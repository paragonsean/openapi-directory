# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundWireDrawdownRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, beneficiary_account_number: str=None, beneficiary_address_line1: str=None, beneficiary_address_line2: str=None, beneficiary_address_line3: str=None, beneficiary_name: str=None, beneficiary_routing_number: str=None, currency: str=None, id: str=None, message_to_recipient: str=None, originator_account_number: str=None, originator_address_line1: str=None, originator_address_line2: str=None, originator_address_line3: str=None, originator_name: str=None, originator_routing_number: str=None, originator_to_beneficiary_information_line1: str=None, originator_to_beneficiary_information_line2: str=None, originator_to_beneficiary_information_line3: str=None, originator_to_beneficiary_information_line4: str=None, recipient_account_number_id: str=None, type: str=None):
        """InboundWireDrawdownRequest - a model defined in OpenAPI

        :param amount: The amount of this InboundWireDrawdownRequest.
        :param beneficiary_account_number: The beneficiary_account_number of this InboundWireDrawdownRequest.
        :param beneficiary_address_line1: The beneficiary_address_line1 of this InboundWireDrawdownRequest.
        :param beneficiary_address_line2: The beneficiary_address_line2 of this InboundWireDrawdownRequest.
        :param beneficiary_address_line3: The beneficiary_address_line3 of this InboundWireDrawdownRequest.
        :param beneficiary_name: The beneficiary_name of this InboundWireDrawdownRequest.
        :param beneficiary_routing_number: The beneficiary_routing_number of this InboundWireDrawdownRequest.
        :param currency: The currency of this InboundWireDrawdownRequest.
        :param id: The id of this InboundWireDrawdownRequest.
        :param message_to_recipient: The message_to_recipient of this InboundWireDrawdownRequest.
        :param originator_account_number: The originator_account_number of this InboundWireDrawdownRequest.
        :param originator_address_line1: The originator_address_line1 of this InboundWireDrawdownRequest.
        :param originator_address_line2: The originator_address_line2 of this InboundWireDrawdownRequest.
        :param originator_address_line3: The originator_address_line3 of this InboundWireDrawdownRequest.
        :param originator_name: The originator_name of this InboundWireDrawdownRequest.
        :param originator_routing_number: The originator_routing_number of this InboundWireDrawdownRequest.
        :param originator_to_beneficiary_information_line1: The originator_to_beneficiary_information_line1 of this InboundWireDrawdownRequest.
        :param originator_to_beneficiary_information_line2: The originator_to_beneficiary_information_line2 of this InboundWireDrawdownRequest.
        :param originator_to_beneficiary_information_line3: The originator_to_beneficiary_information_line3 of this InboundWireDrawdownRequest.
        :param originator_to_beneficiary_information_line4: The originator_to_beneficiary_information_line4 of this InboundWireDrawdownRequest.
        :param recipient_account_number_id: The recipient_account_number_id of this InboundWireDrawdownRequest.
        :param type: The type of this InboundWireDrawdownRequest.
        """
        self.openapi_types = {
            'amount': int,
            'beneficiary_account_number': str,
            'beneficiary_address_line1': str,
            'beneficiary_address_line2': str,
            'beneficiary_address_line3': str,
            'beneficiary_name': str,
            'beneficiary_routing_number': str,
            'currency': str,
            'id': str,
            'message_to_recipient': str,
            'originator_account_number': str,
            'originator_address_line1': str,
            'originator_address_line2': str,
            'originator_address_line3': str,
            'originator_name': str,
            'originator_routing_number': str,
            'originator_to_beneficiary_information_line1': str,
            'originator_to_beneficiary_information_line2': str,
            'originator_to_beneficiary_information_line3': str,
            'originator_to_beneficiary_information_line4': str,
            'recipient_account_number_id': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'beneficiary_account_number': 'beneficiary_account_number',
            'beneficiary_address_line1': 'beneficiary_address_line1',
            'beneficiary_address_line2': 'beneficiary_address_line2',
            'beneficiary_address_line3': 'beneficiary_address_line3',
            'beneficiary_name': 'beneficiary_name',
            'beneficiary_routing_number': 'beneficiary_routing_number',
            'currency': 'currency',
            'id': 'id',
            'message_to_recipient': 'message_to_recipient',
            'originator_account_number': 'originator_account_number',
            'originator_address_line1': 'originator_address_line1',
            'originator_address_line2': 'originator_address_line2',
            'originator_address_line3': 'originator_address_line3',
            'originator_name': 'originator_name',
            'originator_routing_number': 'originator_routing_number',
            'originator_to_beneficiary_information_line1': 'originator_to_beneficiary_information_line1',
            'originator_to_beneficiary_information_line2': 'originator_to_beneficiary_information_line2',
            'originator_to_beneficiary_information_line3': 'originator_to_beneficiary_information_line3',
            'originator_to_beneficiary_information_line4': 'originator_to_beneficiary_information_line4',
            'recipient_account_number_id': 'recipient_account_number_id',
            'type': 'type'
        }

        self._amount = amount
        self._beneficiary_account_number = beneficiary_account_number
        self._beneficiary_address_line1 = beneficiary_address_line1
        self._beneficiary_address_line2 = beneficiary_address_line2
        self._beneficiary_address_line3 = beneficiary_address_line3
        self._beneficiary_name = beneficiary_name
        self._beneficiary_routing_number = beneficiary_routing_number
        self._currency = currency
        self._id = id
        self._message_to_recipient = message_to_recipient
        self._originator_account_number = originator_account_number
        self._originator_address_line1 = originator_address_line1
        self._originator_address_line2 = originator_address_line2
        self._originator_address_line3 = originator_address_line3
        self._originator_name = originator_name
        self._originator_routing_number = originator_routing_number
        self._originator_to_beneficiary_information_line1 = originator_to_beneficiary_information_line1
        self._originator_to_beneficiary_information_line2 = originator_to_beneficiary_information_line2
        self._originator_to_beneficiary_information_line3 = originator_to_beneficiary_information_line3
        self._originator_to_beneficiary_information_line4 = originator_to_beneficiary_information_line4
        self._recipient_account_number_id = recipient_account_number_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundWireDrawdownRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inbound_wire_drawdown_request of this InboundWireDrawdownRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InboundWireDrawdownRequest.

        The amount being requested in cents.

        :return: The amount of this InboundWireDrawdownRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InboundWireDrawdownRequest.

        The amount being requested in cents.

        :param amount: The amount of this InboundWireDrawdownRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def beneficiary_account_number(self):
        """Gets the beneficiary_account_number of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's account number.

        :return: The beneficiary_account_number of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_account_number

    @beneficiary_account_number.setter
    def beneficiary_account_number(self, beneficiary_account_number):
        """Sets the beneficiary_account_number of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's account number.

        :param beneficiary_account_number: The beneficiary_account_number of this InboundWireDrawdownRequest.
        :type beneficiary_account_number: str
        """
        if beneficiary_account_number is None:
            raise ValueError("Invalid value for `beneficiary_account_number`, must not be `None`")

        self._beneficiary_account_number = beneficiary_account_number

    @property
    def beneficiary_address_line1(self):
        """Gets the beneficiary_address_line1 of this InboundWireDrawdownRequest.

        Line 1 of the drawdown request's beneficiary's address.

        :return: The beneficiary_address_line1 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_address_line1

    @beneficiary_address_line1.setter
    def beneficiary_address_line1(self, beneficiary_address_line1):
        """Sets the beneficiary_address_line1 of this InboundWireDrawdownRequest.

        Line 1 of the drawdown request's beneficiary's address.

        :param beneficiary_address_line1: The beneficiary_address_line1 of this InboundWireDrawdownRequest.
        :type beneficiary_address_line1: str
        """
        if beneficiary_address_line1 is None:
            raise ValueError("Invalid value for `beneficiary_address_line1`, must not be `None`")

        self._beneficiary_address_line1 = beneficiary_address_line1

    @property
    def beneficiary_address_line2(self):
        """Gets the beneficiary_address_line2 of this InboundWireDrawdownRequest.

        Line 2 of the drawdown request's beneficiary's address.

        :return: The beneficiary_address_line2 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_address_line2

    @beneficiary_address_line2.setter
    def beneficiary_address_line2(self, beneficiary_address_line2):
        """Sets the beneficiary_address_line2 of this InboundWireDrawdownRequest.

        Line 2 of the drawdown request's beneficiary's address.

        :param beneficiary_address_line2: The beneficiary_address_line2 of this InboundWireDrawdownRequest.
        :type beneficiary_address_line2: str
        """
        if beneficiary_address_line2 is None:
            raise ValueError("Invalid value for `beneficiary_address_line2`, must not be `None`")

        self._beneficiary_address_line2 = beneficiary_address_line2

    @property
    def beneficiary_address_line3(self):
        """Gets the beneficiary_address_line3 of this InboundWireDrawdownRequest.

        Line 3 of the drawdown request's beneficiary's address.

        :return: The beneficiary_address_line3 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_address_line3

    @beneficiary_address_line3.setter
    def beneficiary_address_line3(self, beneficiary_address_line3):
        """Sets the beneficiary_address_line3 of this InboundWireDrawdownRequest.

        Line 3 of the drawdown request's beneficiary's address.

        :param beneficiary_address_line3: The beneficiary_address_line3 of this InboundWireDrawdownRequest.
        :type beneficiary_address_line3: str
        """
        if beneficiary_address_line3 is None:
            raise ValueError("Invalid value for `beneficiary_address_line3`, must not be `None`")

        self._beneficiary_address_line3 = beneficiary_address_line3

    @property
    def beneficiary_name(self):
        """Gets the beneficiary_name of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's name.

        :return: The beneficiary_name of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """Sets the beneficiary_name of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's name.

        :param beneficiary_name: The beneficiary_name of this InboundWireDrawdownRequest.
        :type beneficiary_name: str
        """
        if beneficiary_name is None:
            raise ValueError("Invalid value for `beneficiary_name`, must not be `None`")

        self._beneficiary_name = beneficiary_name

    @property
    def beneficiary_routing_number(self):
        """Gets the beneficiary_routing_number of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's routing number.

        :return: The beneficiary_routing_number of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._beneficiary_routing_number

    @beneficiary_routing_number.setter
    def beneficiary_routing_number(self, beneficiary_routing_number):
        """Sets the beneficiary_routing_number of this InboundWireDrawdownRequest.

        The drawdown request's beneficiary's routing number.

        :param beneficiary_routing_number: The beneficiary_routing_number of this InboundWireDrawdownRequest.
        :type beneficiary_routing_number: str
        """
        if beneficiary_routing_number is None:
            raise ValueError("Invalid value for `beneficiary_routing_number`, must not be `None`")

        self._beneficiary_routing_number = beneficiary_routing_number

    @property
    def currency(self):
        """Gets the currency of this InboundWireDrawdownRequest.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".

        :return: The currency of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InboundWireDrawdownRequest.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".

        :param currency: The currency of this InboundWireDrawdownRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this InboundWireDrawdownRequest.

        The Wire drawdown request identifier.

        :return: The id of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InboundWireDrawdownRequest.

        The Wire drawdown request identifier.

        :param id: The id of this InboundWireDrawdownRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this InboundWireDrawdownRequest.

        A message from the drawdown request's originator.

        :return: The message_to_recipient of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this InboundWireDrawdownRequest.

        A message from the drawdown request's originator.

        :param message_to_recipient: The message_to_recipient of this InboundWireDrawdownRequest.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")

        self._message_to_recipient = message_to_recipient

    @property
    def originator_account_number(self):
        """Gets the originator_account_number of this InboundWireDrawdownRequest.

        The drawdown request's originator's account number.

        :return: The originator_account_number of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_account_number

    @originator_account_number.setter
    def originator_account_number(self, originator_account_number):
        """Sets the originator_account_number of this InboundWireDrawdownRequest.

        The drawdown request's originator's account number.

        :param originator_account_number: The originator_account_number of this InboundWireDrawdownRequest.
        :type originator_account_number: str
        """
        if originator_account_number is None:
            raise ValueError("Invalid value for `originator_account_number`, must not be `None`")

        self._originator_account_number = originator_account_number

    @property
    def originator_address_line1(self):
        """Gets the originator_address_line1 of this InboundWireDrawdownRequest.

        Line 1 of the drawdown request's originator's address.

        :return: The originator_address_line1 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_address_line1

    @originator_address_line1.setter
    def originator_address_line1(self, originator_address_line1):
        """Sets the originator_address_line1 of this InboundWireDrawdownRequest.

        Line 1 of the drawdown request's originator's address.

        :param originator_address_line1: The originator_address_line1 of this InboundWireDrawdownRequest.
        :type originator_address_line1: str
        """
        if originator_address_line1 is None:
            raise ValueError("Invalid value for `originator_address_line1`, must not be `None`")

        self._originator_address_line1 = originator_address_line1

    @property
    def originator_address_line2(self):
        """Gets the originator_address_line2 of this InboundWireDrawdownRequest.

        Line 2 of the drawdown request's originator's address.

        :return: The originator_address_line2 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_address_line2

    @originator_address_line2.setter
    def originator_address_line2(self, originator_address_line2):
        """Sets the originator_address_line2 of this InboundWireDrawdownRequest.

        Line 2 of the drawdown request's originator's address.

        :param originator_address_line2: The originator_address_line2 of this InboundWireDrawdownRequest.
        :type originator_address_line2: str
        """
        if originator_address_line2 is None:
            raise ValueError("Invalid value for `originator_address_line2`, must not be `None`")

        self._originator_address_line2 = originator_address_line2

    @property
    def originator_address_line3(self):
        """Gets the originator_address_line3 of this InboundWireDrawdownRequest.

        Line 3 of the drawdown request's originator's address.

        :return: The originator_address_line3 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_address_line3

    @originator_address_line3.setter
    def originator_address_line3(self, originator_address_line3):
        """Sets the originator_address_line3 of this InboundWireDrawdownRequest.

        Line 3 of the drawdown request's originator's address.

        :param originator_address_line3: The originator_address_line3 of this InboundWireDrawdownRequest.
        :type originator_address_line3: str
        """
        if originator_address_line3 is None:
            raise ValueError("Invalid value for `originator_address_line3`, must not be `None`")

        self._originator_address_line3 = originator_address_line3

    @property
    def originator_name(self):
        """Gets the originator_name of this InboundWireDrawdownRequest.

        The drawdown request's originator's name.

        :return: The originator_name of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_name

    @originator_name.setter
    def originator_name(self, originator_name):
        """Sets the originator_name of this InboundWireDrawdownRequest.

        The drawdown request's originator's name.

        :param originator_name: The originator_name of this InboundWireDrawdownRequest.
        :type originator_name: str
        """
        if originator_name is None:
            raise ValueError("Invalid value for `originator_name`, must not be `None`")

        self._originator_name = originator_name

    @property
    def originator_routing_number(self):
        """Gets the originator_routing_number of this InboundWireDrawdownRequest.

        The drawdown request's originator's routing number.

        :return: The originator_routing_number of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_routing_number

    @originator_routing_number.setter
    def originator_routing_number(self, originator_routing_number):
        """Sets the originator_routing_number of this InboundWireDrawdownRequest.

        The drawdown request's originator's routing number.

        :param originator_routing_number: The originator_routing_number of this InboundWireDrawdownRequest.
        :type originator_routing_number: str
        """
        if originator_routing_number is None:
            raise ValueError("Invalid value for `originator_routing_number`, must not be `None`")

        self._originator_routing_number = originator_routing_number

    @property
    def originator_to_beneficiary_information_line1(self):
        """Gets the originator_to_beneficiary_information_line1 of this InboundWireDrawdownRequest.

        Line 1 of the information conveyed from the originator of the message to the beneficiary.

        :return: The originator_to_beneficiary_information_line1 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_to_beneficiary_information_line1

    @originator_to_beneficiary_information_line1.setter
    def originator_to_beneficiary_information_line1(self, originator_to_beneficiary_information_line1):
        """Sets the originator_to_beneficiary_information_line1 of this InboundWireDrawdownRequest.

        Line 1 of the information conveyed from the originator of the message to the beneficiary.

        :param originator_to_beneficiary_information_line1: The originator_to_beneficiary_information_line1 of this InboundWireDrawdownRequest.
        :type originator_to_beneficiary_information_line1: str
        """
        if originator_to_beneficiary_information_line1 is None:
            raise ValueError("Invalid value for `originator_to_beneficiary_information_line1`, must not be `None`")

        self._originator_to_beneficiary_information_line1 = originator_to_beneficiary_information_line1

    @property
    def originator_to_beneficiary_information_line2(self):
        """Gets the originator_to_beneficiary_information_line2 of this InboundWireDrawdownRequest.

        Line 2 of the information conveyed from the originator of the message to the beneficiary.

        :return: The originator_to_beneficiary_information_line2 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_to_beneficiary_information_line2

    @originator_to_beneficiary_information_line2.setter
    def originator_to_beneficiary_information_line2(self, originator_to_beneficiary_information_line2):
        """Sets the originator_to_beneficiary_information_line2 of this InboundWireDrawdownRequest.

        Line 2 of the information conveyed from the originator of the message to the beneficiary.

        :param originator_to_beneficiary_information_line2: The originator_to_beneficiary_information_line2 of this InboundWireDrawdownRequest.
        :type originator_to_beneficiary_information_line2: str
        """
        if originator_to_beneficiary_information_line2 is None:
            raise ValueError("Invalid value for `originator_to_beneficiary_information_line2`, must not be `None`")

        self._originator_to_beneficiary_information_line2 = originator_to_beneficiary_information_line2

    @property
    def originator_to_beneficiary_information_line3(self):
        """Gets the originator_to_beneficiary_information_line3 of this InboundWireDrawdownRequest.

        Line 3 of the information conveyed from the originator of the message to the beneficiary.

        :return: The originator_to_beneficiary_information_line3 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_to_beneficiary_information_line3

    @originator_to_beneficiary_information_line3.setter
    def originator_to_beneficiary_information_line3(self, originator_to_beneficiary_information_line3):
        """Sets the originator_to_beneficiary_information_line3 of this InboundWireDrawdownRequest.

        Line 3 of the information conveyed from the originator of the message to the beneficiary.

        :param originator_to_beneficiary_information_line3: The originator_to_beneficiary_information_line3 of this InboundWireDrawdownRequest.
        :type originator_to_beneficiary_information_line3: str
        """
        if originator_to_beneficiary_information_line3 is None:
            raise ValueError("Invalid value for `originator_to_beneficiary_information_line3`, must not be `None`")

        self._originator_to_beneficiary_information_line3 = originator_to_beneficiary_information_line3

    @property
    def originator_to_beneficiary_information_line4(self):
        """Gets the originator_to_beneficiary_information_line4 of this InboundWireDrawdownRequest.

        Line 4 of the information conveyed from the originator of the message to the beneficiary.

        :return: The originator_to_beneficiary_information_line4 of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._originator_to_beneficiary_information_line4

    @originator_to_beneficiary_information_line4.setter
    def originator_to_beneficiary_information_line4(self, originator_to_beneficiary_information_line4):
        """Sets the originator_to_beneficiary_information_line4 of this InboundWireDrawdownRequest.

        Line 4 of the information conveyed from the originator of the message to the beneficiary.

        :param originator_to_beneficiary_information_line4: The originator_to_beneficiary_information_line4 of this InboundWireDrawdownRequest.
        :type originator_to_beneficiary_information_line4: str
        """
        if originator_to_beneficiary_information_line4 is None:
            raise ValueError("Invalid value for `originator_to_beneficiary_information_line4`, must not be `None`")

        self._originator_to_beneficiary_information_line4 = originator_to_beneficiary_information_line4

    @property
    def recipient_account_number_id(self):
        """Gets the recipient_account_number_id of this InboundWireDrawdownRequest.

        The Account Number from which the recipient of this request is being requested to send funds.

        :return: The recipient_account_number_id of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_account_number_id

    @recipient_account_number_id.setter
    def recipient_account_number_id(self, recipient_account_number_id):
        """Sets the recipient_account_number_id of this InboundWireDrawdownRequest.

        The Account Number from which the recipient of this request is being requested to send funds.

        :param recipient_account_number_id: The recipient_account_number_id of this InboundWireDrawdownRequest.
        :type recipient_account_number_id: str
        """
        if recipient_account_number_id is None:
            raise ValueError("Invalid value for `recipient_account_number_id`, must not be `None`")

        self._recipient_account_number_id = recipient_account_number_id

    @property
    def type(self):
        """Gets the type of this InboundWireDrawdownRequest.

        A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.

        :return: The type of this InboundWireDrawdownRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InboundWireDrawdownRequest.

        A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.

        :param type: The type of this InboundWireDrawdownRequest.
        :type type: str
        """
        allowed_values = ["inbound_wire_drawdown_request"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
