# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction3 import Transaction3
from openapi_server import util


class InterestPaymentSimulationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction: Transaction3=None, type: str=None):
        """InterestPaymentSimulationResult - a model defined in OpenAPI

        :param transaction: The transaction of this InterestPaymentSimulationResult.
        :param type: The type of this InterestPaymentSimulationResult.
        """
        self.openapi_types = {
            'transaction': Transaction3,
            'type': str
        }

        self.attribute_map = {
            'transaction': 'transaction',
            'type': 'type'
        }

        self._transaction = transaction
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterestPaymentSimulationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The interest_payment_simulation_result of this InterestPaymentSimulationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction(self):
        """Gets the transaction of this InterestPaymentSimulationResult.


        :return: The transaction of this InterestPaymentSimulationResult.
        :rtype: Transaction3
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this InterestPaymentSimulationResult.


        :param transaction: The transaction of this InterestPaymentSimulationResult.
        :type transaction: Transaction3
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")

        self._transaction = transaction

    @property
    def type(self):
        """Gets the type of this InterestPaymentSimulationResult.

        A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.

        :return: The type of this InterestPaymentSimulationResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InterestPaymentSimulationResult.

        A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.

        :param type: The type of this InterestPaymentSimulationResult.
        :type type: str
        """
        allowed_values = ["interest_payment_simulation_result"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
