# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulatesAdvancingTheStateOfACardDisputeParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explanation: str=None, status: str=None):
        """SimulatesAdvancingTheStateOfACardDisputeParameters - a model defined in OpenAPI

        :param explanation: The explanation of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        :param status: The status of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        """
        self.openapi_types = {
            'explanation': str,
            'status': str
        }

        self.attribute_map = {
            'explanation': 'explanation',
            'status': 'status'
        }

        self._explanation = explanation
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulatesAdvancingTheStateOfACardDisputeParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulates_advancing_the_state_of_a_card_dispute_parameters of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explanation(self):
        """Gets the explanation of this SimulatesAdvancingTheStateOfACardDisputeParameters.

        Why the dispute was rejected. Not required for accepting disputes.

        :return: The explanation of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this SimulatesAdvancingTheStateOfACardDisputeParameters.

        Why the dispute was rejected. Not required for accepting disputes.

        :param explanation: The explanation of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        :type explanation: str
        """
        if explanation is not None and len(explanation) > 200:
            raise ValueError("Invalid value for `explanation`, length must be less than or equal to `200`")
        if explanation is not None and len(explanation) < 1:
            raise ValueError("Invalid value for `explanation`, length must be greater than or equal to `1`")

        self._explanation = explanation

    @property
    def status(self):
        """Gets the status of this SimulatesAdvancingTheStateOfACardDisputeParameters.

        The status to move the dispute to.

        :return: The status of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SimulatesAdvancingTheStateOfACardDisputeParameters.

        The status to move the dispute to.

        :param status: The status of this SimulatesAdvancingTheStateOfACardDisputeParameters.
        :type status: str
        """
        allowed_values = ["accepted", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
