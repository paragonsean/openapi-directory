# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: str=None, selected_event_category: str=None, shared_secret: str=None, status: str=None, type: str=None, url: str=None):
        """EventSubscription - a model defined in OpenAPI

        :param created_at: The created_at of this EventSubscription.
        :param id: The id of this EventSubscription.
        :param selected_event_category: The selected_event_category of this EventSubscription.
        :param shared_secret: The shared_secret of this EventSubscription.
        :param status: The status of this EventSubscription.
        :param type: The type of this EventSubscription.
        :param url: The url of this EventSubscription.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': str,
            'selected_event_category': str,
            'shared_secret': str,
            'status': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'selected_event_category': 'selected_event_category',
            'shared_secret': 'shared_secret',
            'status': 'status',
            'type': 'type',
            'url': 'url'
        }

        self._created_at = created_at
        self._id = id
        self._selected_event_category = selected_event_category
        self._shared_secret = shared_secret
        self._status = status
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event_subscription of this EventSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this EventSubscription.

        The time the event subscription was created.

        :return: The created_at of this EventSubscription.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventSubscription.

        The time the event subscription was created.

        :param created_at: The created_at of this EventSubscription.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this EventSubscription.

        The event subscription identifier.

        :return: The id of this EventSubscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSubscription.

        The event subscription identifier.

        :param id: The id of this EventSubscription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def selected_event_category(self):
        """Gets the selected_event_category of this EventSubscription.

        If specified, this subscription will only receive webhooks for Events with the specified `category`.

        :return: The selected_event_category of this EventSubscription.
        :rtype: str
        """
        return self._selected_event_category

    @selected_event_category.setter
    def selected_event_category(self, selected_event_category):
        """Sets the selected_event_category of this EventSubscription.

        If specified, this subscription will only receive webhooks for Events with the specified `category`.

        :param selected_event_category: The selected_event_category of this EventSubscription.
        :type selected_event_category: str
        """
        allowed_values = [None,"account.created", "account.updated", "account_number.created", "account_number.updated", "account_statement.created", "account_transfer.created", "account_transfer.updated", "ach_prenotification.created", "ach_prenotification.updated", "ach_transfer.created", "ach_transfer.updated", "card.created", "card.updated", "card_payment.created", "card_payment.updated", "card_dispute.created", "card_dispute.updated", "check_deposit.created", "check_deposit.updated", "check_transfer.created", "check_transfer.updated", "declined_transaction.created", "digital_wallet_token.created", "digital_wallet_token.updated", "document.created", "entity.created", "entity.updated", "external_account.created", "file.created", "group.updated", "group.heartbeat", "inbound_ach_transfer_return.created", "inbound_ach_transfer_return.updated", "inbound_wire_drawdown_request.created", "oauth_connection.created", "oauth_connection.deactivated", "pending_transaction.created", "pending_transaction.updated", "real_time_decision.card_authorization_requested", "real_time_decision.digital_wallet_token_requested", "real_time_decision.digital_wallet_authentication_requested", "real_time_payments_transfer.created", "real_time_payments_transfer.updated", "real_time_payments_request_for_payment.created", "real_time_payments_request_for_payment.updated", "transaction.created", "wire_drawdown_request.created", "wire_drawdown_request.updated", "wire_transfer.created", "wire_transfer.updated"]  # noqa: E501
        if selected_event_category not in allowed_values:
            raise ValueError(
                "Invalid value for `selected_event_category` ({0}), must be one of {1}"
                .format(selected_event_category, allowed_values)
            )

        self._selected_event_category = selected_event_category

    @property
    def shared_secret(self):
        """Gets the shared_secret of this EventSubscription.

        The key that will be used to sign webhooks.

        :return: The shared_secret of this EventSubscription.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this EventSubscription.

        The key that will be used to sign webhooks.

        :param shared_secret: The shared_secret of this EventSubscription.
        :type shared_secret: str
        """
        if shared_secret is None:
            raise ValueError("Invalid value for `shared_secret`, must not be `None`")

        self._shared_secret = shared_secret

    @property
    def status(self):
        """Gets the status of this EventSubscription.

        This indicates if we'll send notifications to this subscription.

        :return: The status of this EventSubscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventSubscription.

        This indicates if we'll send notifications to this subscription.

        :param status: The status of this EventSubscription.
        :type status: str
        """
        allowed_values = ["active", "disabled", "deleted", "requires_attention"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this EventSubscription.

        A constant representing the object's type. For this resource it will always be `event_subscription`.

        :return: The type of this EventSubscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventSubscription.

        A constant representing the object's type. For this resource it will always be `event_subscription`.

        :param type: The type of this EventSubscription.
        :type type: str
        """
        allowed_values = ["event_subscription"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this EventSubscription.

        The webhook url where we'll send notifications.

        :return: The url of this EventSubscription.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventSubscription.

        The webhook url where we'll send notifications.

        :param url: The url of this EventSubscription.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
