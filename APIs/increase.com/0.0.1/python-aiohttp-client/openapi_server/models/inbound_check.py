# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, check_front_image_file_id: str=None, check_number: str=None, check_rear_image_file_id: str=None, currency: str=None):
        """InboundCheck - a model defined in OpenAPI

        :param amount: The amount of this InboundCheck.
        :param check_front_image_file_id: The check_front_image_file_id of this InboundCheck.
        :param check_number: The check_number of this InboundCheck.
        :param check_rear_image_file_id: The check_rear_image_file_id of this InboundCheck.
        :param currency: The currency of this InboundCheck.
        """
        self.openapi_types = {
            'amount': int,
            'check_front_image_file_id': str,
            'check_number': str,
            'check_rear_image_file_id': str,
            'currency': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'check_front_image_file_id': 'check_front_image_file_id',
            'check_number': 'check_number',
            'check_rear_image_file_id': 'check_rear_image_file_id',
            'currency': 'currency'
        }

        self._amount = amount
        self._check_front_image_file_id = check_front_image_file_id
        self._check_number = check_number
        self._check_rear_image_file_id = check_rear_image_file_id
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Inbound_Check of this InboundCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InboundCheck.

        The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :return: The amount of this InboundCheck.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InboundCheck.

        The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :param amount: The amount of this InboundCheck.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def check_front_image_file_id(self):
        """Gets the check_front_image_file_id of this InboundCheck.

        

        :return: The check_front_image_file_id of this InboundCheck.
        :rtype: str
        """
        return self._check_front_image_file_id

    @check_front_image_file_id.setter
    def check_front_image_file_id(self, check_front_image_file_id):
        """Sets the check_front_image_file_id of this InboundCheck.

        

        :param check_front_image_file_id: The check_front_image_file_id of this InboundCheck.
        :type check_front_image_file_id: str
        """
        if check_front_image_file_id is None:
            raise ValueError("Invalid value for `check_front_image_file_id`, must not be `None`")

        self._check_front_image_file_id = check_front_image_file_id

    @property
    def check_number(self):
        """Gets the check_number of this InboundCheck.

        

        :return: The check_number of this InboundCheck.
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this InboundCheck.

        

        :param check_number: The check_number of this InboundCheck.
        :type check_number: str
        """
        if check_number is None:
            raise ValueError("Invalid value for `check_number`, must not be `None`")

        self._check_number = check_number

    @property
    def check_rear_image_file_id(self):
        """Gets the check_rear_image_file_id of this InboundCheck.

        

        :return: The check_rear_image_file_id of this InboundCheck.
        :rtype: str
        """
        return self._check_rear_image_file_id

    @check_rear_image_file_id.setter
    def check_rear_image_file_id(self, check_rear_image_file_id):
        """Sets the check_rear_image_file_id of this InboundCheck.

        

        :param check_rear_image_file_id: The check_rear_image_file_id of this InboundCheck.
        :type check_rear_image_file_id: str
        """
        if check_rear_image_file_id is None:
            raise ValueError("Invalid value for `check_rear_image_file_id`, must not be `None`")

        self._check_rear_image_file_id = check_rear_image_file_id

    @property
    def currency(self):
        """Gets the currency of this InboundCheck.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this InboundCheck.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InboundCheck.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this InboundCheck.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
