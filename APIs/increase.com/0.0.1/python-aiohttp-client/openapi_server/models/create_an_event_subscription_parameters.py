# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnEventSubscriptionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selected_event_category: str=None, shared_secret: str=None, url: str=None):
        """CreateAnEventSubscriptionParameters - a model defined in OpenAPI

        :param selected_event_category: The selected_event_category of this CreateAnEventSubscriptionParameters.
        :param shared_secret: The shared_secret of this CreateAnEventSubscriptionParameters.
        :param url: The url of this CreateAnEventSubscriptionParameters.
        """
        self.openapi_types = {
            'selected_event_category': str,
            'shared_secret': str,
            'url': str
        }

        self.attribute_map = {
            'selected_event_category': 'selected_event_category',
            'shared_secret': 'shared_secret',
            'url': 'url'
        }

        self._selected_event_category = selected_event_category
        self._shared_secret = shared_secret
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEventSubscriptionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_event_subscription_parameters of this CreateAnEventSubscriptionParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selected_event_category(self):
        """Gets the selected_event_category of this CreateAnEventSubscriptionParameters.

        If specified, this subscription will only receive webhooks for Events with the specified `category`.

        :return: The selected_event_category of this CreateAnEventSubscriptionParameters.
        :rtype: str
        """
        return self._selected_event_category

    @selected_event_category.setter
    def selected_event_category(self, selected_event_category):
        """Sets the selected_event_category of this CreateAnEventSubscriptionParameters.

        If specified, this subscription will only receive webhooks for Events with the specified `category`.

        :param selected_event_category: The selected_event_category of this CreateAnEventSubscriptionParameters.
        :type selected_event_category: str
        """
        allowed_values = ["account.created", "account.updated", "account_number.created", "account_number.updated", "account_statement.created", "account_transfer.created", "account_transfer.updated", "ach_prenotification.created", "ach_prenotification.updated", "ach_transfer.created", "ach_transfer.updated", "card.created", "card.updated", "card_payment.created", "card_payment.updated", "card_dispute.created", "card_dispute.updated", "check_deposit.created", "check_deposit.updated", "check_transfer.created", "check_transfer.updated", "declined_transaction.created", "digital_wallet_token.created", "digital_wallet_token.updated", "document.created", "entity.created", "entity.updated", "external_account.created", "file.created", "group.updated", "group.heartbeat", "inbound_ach_transfer_return.created", "inbound_ach_transfer_return.updated", "inbound_wire_drawdown_request.created", "oauth_connection.created", "oauth_connection.deactivated", "pending_transaction.created", "pending_transaction.updated", "real_time_decision.card_authorization_requested", "real_time_decision.digital_wallet_token_requested", "real_time_decision.digital_wallet_authentication_requested", "real_time_payments_transfer.created", "real_time_payments_transfer.updated", "real_time_payments_request_for_payment.created", "real_time_payments_request_for_payment.updated", "transaction.created", "wire_drawdown_request.created", "wire_drawdown_request.updated", "wire_transfer.created", "wire_transfer.updated"]  # noqa: E501
        if selected_event_category not in allowed_values:
            raise ValueError(
                "Invalid value for `selected_event_category` ({0}), must be one of {1}"
                .format(selected_event_category, allowed_values)
            )

        self._selected_event_category = selected_event_category

    @property
    def shared_secret(self):
        """Gets the shared_secret of this CreateAnEventSubscriptionParameters.

        The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.

        :return: The shared_secret of this CreateAnEventSubscriptionParameters.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this CreateAnEventSubscriptionParameters.

        The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.

        :param shared_secret: The shared_secret of this CreateAnEventSubscriptionParameters.
        :type shared_secret: str
        """
        if shared_secret is not None and len(shared_secret) > 100:
            raise ValueError("Invalid value for `shared_secret`, length must be less than or equal to `100`")
        if shared_secret is not None and len(shared_secret) < 1:
            raise ValueError("Invalid value for `shared_secret`, length must be greater than or equal to `1`")

        self._shared_secret = shared_secret

    @property
    def url(self):
        """Gets the url of this CreateAnEventSubscriptionParameters.

        The URL you'd like us to send webhooks to.

        :return: The url of this CreateAnEventSubscriptionParameters.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateAnEventSubscriptionParameters.

        The URL you'd like us to send webhooks to.

        :param url: The url of this CreateAnEventSubscriptionParameters.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
