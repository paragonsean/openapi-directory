# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OauthConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, group_id: str=None, id: str=None, status: str=None, type: str=None):
        """OauthConnection - a model defined in OpenAPI

        :param created_at: The created_at of this OauthConnection.
        :param group_id: The group_id of this OauthConnection.
        :param id: The id of this OauthConnection.
        :param status: The status of this OauthConnection.
        :param type: The type of this OauthConnection.
        """
        self.openapi_types = {
            'created_at': datetime,
            'group_id': str,
            'id': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'group_id': 'group_id',
            'id': 'id',
            'status': 'status',
            'type': 'type'
        }

        self._created_at = created_at
        self._group_id = group_id
        self._id = id
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OauthConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The oauth_connection of this OauthConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this OauthConnection.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.

        :return: The created_at of this OauthConnection.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OauthConnection.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.

        :param created_at: The created_at of this OauthConnection.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def group_id(self):
        """Gets the group_id of this OauthConnection.

        The identifier of the Group that has authorized your OAuth application.

        :return: The group_id of this OauthConnection.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this OauthConnection.

        The identifier of the Group that has authorized your OAuth application.

        :param group_id: The group_id of this OauthConnection.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this OauthConnection.

        The OAuth Connection's identifier.

        :return: The id of this OauthConnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OauthConnection.

        The OAuth Connection's identifier.

        :param id: The id of this OauthConnection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this OauthConnection.

        Whether the connection is active.

        :return: The status of this OauthConnection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OauthConnection.

        Whether the connection is active.

        :param status: The status of this OauthConnection.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this OauthConnection.

        A constant representing the object's type. For this resource it will always be `oauth_connection`.

        :return: The type of this OauthConnection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OauthConnection.

        A constant representing the object's type. For this resource it will always be `oauth_connection`.

        :param type: The type of this OauthConnection.
        :type type: str
        """
        allowed_values = ["oauth_connection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
