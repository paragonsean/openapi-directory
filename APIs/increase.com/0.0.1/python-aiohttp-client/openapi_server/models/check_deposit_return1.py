# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDepositReturn1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, check_deposit_id: str=None, currency: str=None, return_reason: str=None, returned_at: datetime=None, transaction_id: str=None):
        """CheckDepositReturn1 - a model defined in OpenAPI

        :param amount: The amount of this CheckDepositReturn1.
        :param check_deposit_id: The check_deposit_id of this CheckDepositReturn1.
        :param currency: The currency of this CheckDepositReturn1.
        :param return_reason: The return_reason of this CheckDepositReturn1.
        :param returned_at: The returned_at of this CheckDepositReturn1.
        :param transaction_id: The transaction_id of this CheckDepositReturn1.
        """
        self.openapi_types = {
            'amount': int,
            'check_deposit_id': str,
            'currency': str,
            'return_reason': str,
            'returned_at': datetime,
            'transaction_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'check_deposit_id': 'check_deposit_id',
            'currency': 'currency',
            'return_reason': 'return_reason',
            'returned_at': 'returned_at',
            'transaction_id': 'transaction_id'
        }

        self._amount = amount
        self._check_deposit_id = check_deposit_id
        self._currency = currency
        self._return_reason = return_reason
        self._returned_at = returned_at
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDepositReturn1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Deposit_Return_1 of this CheckDepositReturn1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CheckDepositReturn1.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this CheckDepositReturn1.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckDepositReturn1.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this CheckDepositReturn1.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def check_deposit_id(self):
        """Gets the check_deposit_id of this CheckDepositReturn1.

        The identifier of the Check Deposit that was returned.

        :return: The check_deposit_id of this CheckDepositReturn1.
        :rtype: str
        """
        return self._check_deposit_id

    @check_deposit_id.setter
    def check_deposit_id(self, check_deposit_id):
        """Sets the check_deposit_id of this CheckDepositReturn1.

        The identifier of the Check Deposit that was returned.

        :param check_deposit_id: The check_deposit_id of this CheckDepositReturn1.
        :type check_deposit_id: str
        """
        if check_deposit_id is None:
            raise ValueError("Invalid value for `check_deposit_id`, must not be `None`")

        self._check_deposit_id = check_deposit_id

    @property
    def currency(self):
        """Gets the currency of this CheckDepositReturn1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this CheckDepositReturn1.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckDepositReturn1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this CheckDepositReturn1.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def return_reason(self):
        """Gets the return_reason of this CheckDepositReturn1.

        

        :return: The return_reason of this CheckDepositReturn1.
        :rtype: str
        """
        return self._return_reason

    @return_reason.setter
    def return_reason(self, return_reason):
        """Sets the return_reason of this CheckDepositReturn1.

        

        :param return_reason: The return_reason of this CheckDepositReturn1.
        :type return_reason: str
        """
        allowed_values = ["ach_conversion_not_supported", "closed_account", "duplicate_submission", "insufficient_funds", "no_account", "not_authorized", "stale_dated", "stop_payment", "unknown_reason", "unmatched_details", "unreadable_image"]  # noqa: E501
        if return_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `return_reason` ({0}), must be one of {1}"
                .format(return_reason, allowed_values)
            )

        self._return_reason = return_reason

    @property
    def returned_at(self):
        """Gets the returned_at of this CheckDepositReturn1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.

        :return: The returned_at of this CheckDepositReturn1.
        :rtype: datetime
        """
        return self._returned_at

    @returned_at.setter
    def returned_at(self, returned_at):
        """Sets the returned_at of this CheckDepositReturn1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.

        :param returned_at: The returned_at of this CheckDepositReturn1.
        :type returned_at: datetime
        """
        if returned_at is None:
            raise ValueError("Invalid value for `returned_at`, must not be `None`")

        self._returned_at = returned_at

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CheckDepositReturn1.

        The identifier of the transaction that reversed the original check deposit transaction.

        :return: The transaction_id of this CheckDepositReturn1.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CheckDepositReturn1.

        The identifier of the transaction that reversed the original check deposit transaction.

        :param transaction_id: The transaction_id of this CheckDepositReturn1.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
