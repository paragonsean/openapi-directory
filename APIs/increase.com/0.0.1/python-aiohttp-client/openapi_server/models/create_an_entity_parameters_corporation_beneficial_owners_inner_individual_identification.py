# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license import CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense
from openapi_server.models.create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_other import CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther
from openapi_server.models.create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_passport import CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationPassport
from openapi_server import util


class CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drivers_license: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense=None, method: str=None, number: str=None, other: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther=None, passport: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationPassport=None):
        """CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification - a model defined in OpenAPI

        :param drivers_license: The drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :param method: The method of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :param number: The number of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :param other: The other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :param passport: The passport of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        """
        self.openapi_types = {
            'drivers_license': CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense,
            'method': str,
            'number': str,
            'other': CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther,
            'passport': CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationPassport
        }

        self.attribute_map = {
            'drivers_license': 'drivers_license',
            'method': 'method',
            'number': 'number',
            'other': 'other',
            'passport': 'passport'
        }

        self._drivers_license = drivers_license
        self._method = method
        self._number = number
        self._other = other
        self._passport = passport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drivers_license(self):
        """Gets the drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :return: The drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :rtype: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense
        """
        return self._drivers_license

    @drivers_license.setter
    def drivers_license(self, drivers_license):
        """Sets the drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :param drivers_license: The drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :type drivers_license: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense
        """

        self._drivers_license = drivers_license

    @property
    def method(self):
        """Gets the method of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.

        A method that can be used to verify the individual's identity.

        :return: The method of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.

        A method that can be used to verify the individual's identity.

        :param method: The method of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :type method: str
        """
        allowed_values = ["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def number(self):
        """Gets the number of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.

        An identification number that can be used to verify the individual's identity, such as a social security number.

        :return: The number of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.

        An identification number that can be used to verify the individual's identity, such as a social security number.

        :param number: The number of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 200:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `200`")
        if number is not None and len(number) < 4:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `4`")

        self._number = number

    @property
    def other(self):
        """Gets the other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :return: The other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :rtype: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :param other: The other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :type other: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther
        """

        self._other = other

    @property
    def passport(self):
        """Gets the passport of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :return: The passport of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :rtype: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationPassport
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.


        :param passport: The passport of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification.
        :type passport: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationPassport
        """

        self._passport = passport
