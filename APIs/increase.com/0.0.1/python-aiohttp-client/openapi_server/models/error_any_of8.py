# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorAnyOf8(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, errors: List[object]=None, status: int=None, title: str=None, type: str=None):
        """ErrorAnyOf8 - a model defined in OpenAPI

        :param detail: The detail of this ErrorAnyOf8.
        :param errors: The errors of this ErrorAnyOf8.
        :param status: The status of this ErrorAnyOf8.
        :param title: The title of this ErrorAnyOf8.
        :param type: The type of this ErrorAnyOf8.
        """
        self.openapi_types = {
            'detail': str,
            'errors': List[object],
            'status': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'errors': 'errors',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._detail = detail
        self._errors = errors
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorAnyOf8':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error_anyOf_8 of this ErrorAnyOf8.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ErrorAnyOf8.


        :return: The detail of this ErrorAnyOf8.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ErrorAnyOf8.


        :param detail: The detail of this ErrorAnyOf8.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def errors(self):
        """Gets the errors of this ErrorAnyOf8.

        All errors related to parsing the request parameters.

        :return: The errors of this ErrorAnyOf8.
        :rtype: List[object]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorAnyOf8.

        All errors related to parsing the request parameters.

        :param errors: The errors of this ErrorAnyOf8.
        :type errors: List[object]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def status(self):
        """Gets the status of this ErrorAnyOf8.


        :return: The status of this ErrorAnyOf8.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorAnyOf8.


        :param status: The status of this ErrorAnyOf8.
        :type status: int
        """
        allowed_values = [400]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this ErrorAnyOf8.


        :return: The title of this ErrorAnyOf8.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorAnyOf8.


        :param title: The title of this ErrorAnyOf8.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ErrorAnyOf8.


        :return: The type of this ErrorAnyOf8.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorAnyOf8.


        :param type: The type of this ErrorAnyOf8.
        :type type: str
        """
        allowed_values = ["invalid_parameters_error"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
