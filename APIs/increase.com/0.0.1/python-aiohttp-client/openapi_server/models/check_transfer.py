# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_transfer_deposit import CheckTransferDeposit
from openapi_server.models.check_transfer_return import CheckTransferReturn
from openapi_server.models.check_transfer_stop_payment_request import CheckTransferStopPaymentRequest
from openapi_server.models.check_transfer_submission import CheckTransferSubmission
from openapi_server.models.return_address import ReturnAddress
from openapi_server.models.transfer_approval import TransferApproval
from openapi_server.models.transfer_cancellation import TransferCancellation
from openapi_server import util


class CheckTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, address_city: str=None, address_line1: str=None, address_line2: str=None, address_state: str=None, address_zip: str=None, amount: int=None, approval: TransferApproval=None, cancellation: TransferCancellation=None, created_at: datetime=None, currency: str=None, deposit: CheckTransferDeposit=None, id: str=None, mailed_at: datetime=None, message: str=None, note: str=None, recipient_name: str=None, return_address: ReturnAddress=None, return_details: CheckTransferReturn=None, status: str=None, stop_payment_request: CheckTransferStopPaymentRequest=None, submission: CheckTransferSubmission=None, submitted_at: datetime=None, transaction_id: str=None, type: str=None):
        """CheckTransfer - a model defined in OpenAPI

        :param account_id: The account_id of this CheckTransfer.
        :param address_city: The address_city of this CheckTransfer.
        :param address_line1: The address_line1 of this CheckTransfer.
        :param address_line2: The address_line2 of this CheckTransfer.
        :param address_state: The address_state of this CheckTransfer.
        :param address_zip: The address_zip of this CheckTransfer.
        :param amount: The amount of this CheckTransfer.
        :param approval: The approval of this CheckTransfer.
        :param cancellation: The cancellation of this CheckTransfer.
        :param created_at: The created_at of this CheckTransfer.
        :param currency: The currency of this CheckTransfer.
        :param deposit: The deposit of this CheckTransfer.
        :param id: The id of this CheckTransfer.
        :param mailed_at: The mailed_at of this CheckTransfer.
        :param message: The message of this CheckTransfer.
        :param note: The note of this CheckTransfer.
        :param recipient_name: The recipient_name of this CheckTransfer.
        :param return_address: The return_address of this CheckTransfer.
        :param return_details: The return_details of this CheckTransfer.
        :param status: The status of this CheckTransfer.
        :param stop_payment_request: The stop_payment_request of this CheckTransfer.
        :param submission: The submission of this CheckTransfer.
        :param submitted_at: The submitted_at of this CheckTransfer.
        :param transaction_id: The transaction_id of this CheckTransfer.
        :param type: The type of this CheckTransfer.
        """
        self.openapi_types = {
            'account_id': str,
            'address_city': str,
            'address_line1': str,
            'address_line2': str,
            'address_state': str,
            'address_zip': str,
            'amount': int,
            'approval': TransferApproval,
            'cancellation': TransferCancellation,
            'created_at': datetime,
            'currency': str,
            'deposit': CheckTransferDeposit,
            'id': str,
            'mailed_at': datetime,
            'message': str,
            'note': str,
            'recipient_name': str,
            'return_address': ReturnAddress,
            'return_details': CheckTransferReturn,
            'status': str,
            'stop_payment_request': CheckTransferStopPaymentRequest,
            'submission': CheckTransferSubmission,
            'submitted_at': datetime,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'address_city': 'address_city',
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'address_state': 'address_state',
            'address_zip': 'address_zip',
            'amount': 'amount',
            'approval': 'approval',
            'cancellation': 'cancellation',
            'created_at': 'created_at',
            'currency': 'currency',
            'deposit': 'deposit',
            'id': 'id',
            'mailed_at': 'mailed_at',
            'message': 'message',
            'note': 'note',
            'recipient_name': 'recipient_name',
            'return_address': 'return_address',
            'return_details': 'return_details',
            'status': 'status',
            'stop_payment_request': 'stop_payment_request',
            'submission': 'submission',
            'submitted_at': 'submitted_at',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._address_city = address_city
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_state = address_state
        self._address_zip = address_zip
        self._amount = amount
        self._approval = approval
        self._cancellation = cancellation
        self._created_at = created_at
        self._currency = currency
        self._deposit = deposit
        self._id = id
        self._mailed_at = mailed_at
        self._message = message
        self._note = note
        self._recipient_name = recipient_name
        self._return_address = return_address
        self._return_details = return_details
        self._status = status
        self._stop_payment_request = stop_payment_request
        self._submission = submission
        self._submitted_at = submitted_at
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check_transfer of this CheckTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CheckTransfer.

        The identifier of the Account from which funds will be transferred.

        :return: The account_id of this CheckTransfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CheckTransfer.

        The identifier of the Account from which funds will be transferred.

        :param account_id: The account_id of this CheckTransfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def address_city(self):
        """Gets the address_city of this CheckTransfer.

        The city of the check's destination.

        :return: The address_city of this CheckTransfer.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CheckTransfer.

        The city of the check's destination.

        :param address_city: The address_city of this CheckTransfer.
        :type address_city: str
        """
        if address_city is None:
            raise ValueError("Invalid value for `address_city`, must not be `None`")

        self._address_city = address_city

    @property
    def address_line1(self):
        """Gets the address_line1 of this CheckTransfer.

        The street address of the check's destination.

        :return: The address_line1 of this CheckTransfer.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CheckTransfer.

        The street address of the check's destination.

        :param address_line1: The address_line1 of this CheckTransfer.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CheckTransfer.

        The second line of the address of the check's destination.

        :return: The address_line2 of this CheckTransfer.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CheckTransfer.

        The second line of the address of the check's destination.

        :param address_line2: The address_line2 of this CheckTransfer.
        :type address_line2: str
        """
        if address_line2 is None:
            raise ValueError("Invalid value for `address_line2`, must not be `None`")

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """Gets the address_state of this CheckTransfer.

        The state of the check's destination.

        :return: The address_state of this CheckTransfer.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CheckTransfer.

        The state of the check's destination.

        :param address_state: The address_state of this CheckTransfer.
        :type address_state: str
        """
        if address_state is None:
            raise ValueError("Invalid value for `address_state`, must not be `None`")

        self._address_state = address_state

    @property
    def address_zip(self):
        """Gets the address_zip of this CheckTransfer.

        The postal code of the check's destination.

        :return: The address_zip of this CheckTransfer.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CheckTransfer.

        The postal code of the check's destination.

        :param address_zip: The address_zip of this CheckTransfer.
        :type address_zip: str
        """
        if address_zip is None:
            raise ValueError("Invalid value for `address_zip`, must not be `None`")

        self._address_zip = address_zip

    @property
    def amount(self):
        """Gets the amount of this CheckTransfer.

        The transfer amount in USD cents.

        :return: The amount of this CheckTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckTransfer.

        The transfer amount in USD cents.

        :param amount: The amount of this CheckTransfer.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this CheckTransfer.


        :return: The approval of this CheckTransfer.
        :rtype: TransferApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this CheckTransfer.


        :param approval: The approval of this CheckTransfer.
        :type approval: TransferApproval
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")

        self._approval = approval

    @property
    def cancellation(self):
        """Gets the cancellation of this CheckTransfer.


        :return: The cancellation of this CheckTransfer.
        :rtype: TransferCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this CheckTransfer.


        :param cancellation: The cancellation of this CheckTransfer.
        :type cancellation: TransferCancellation
        """
        if cancellation is None:
            raise ValueError("Invalid value for `cancellation`, must not be `None`")

        self._cancellation = cancellation

    @property
    def created_at(self):
        """Gets the created_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this CheckTransfer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this CheckTransfer.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this CheckTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.

        :return: The currency of this CheckTransfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.

        :param currency: The currency of this CheckTransfer.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def deposit(self):
        """Gets the deposit of this CheckTransfer.


        :return: The deposit of this CheckTransfer.
        :rtype: CheckTransferDeposit
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this CheckTransfer.


        :param deposit: The deposit of this CheckTransfer.
        :type deposit: CheckTransferDeposit
        """
        if deposit is None:
            raise ValueError("Invalid value for `deposit`, must not be `None`")

        self._deposit = deposit

    @property
    def id(self):
        """Gets the id of this CheckTransfer.

        The Check transfer's identifier.

        :return: The id of this CheckTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckTransfer.

        The Check transfer's identifier.

        :param id: The id of this CheckTransfer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mailed_at(self):
        """Gets the mailed_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.

        :return: The mailed_at of this CheckTransfer.
        :rtype: datetime
        """
        return self._mailed_at

    @mailed_at.setter
    def mailed_at(self, mailed_at):
        """Sets the mailed_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.

        :param mailed_at: The mailed_at of this CheckTransfer.
        :type mailed_at: datetime
        """
        if mailed_at is None:
            raise ValueError("Invalid value for `mailed_at`, must not be `None`")

        self._mailed_at = mailed_at

    @property
    def message(self):
        """Gets the message of this CheckTransfer.

        The descriptor that will be printed on the memo field on the check.

        :return: The message of this CheckTransfer.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckTransfer.

        The descriptor that will be printed on the memo field on the check.

        :param message: The message of this CheckTransfer.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def note(self):
        """Gets the note of this CheckTransfer.

        The descriptor that will be printed on the letter included with the check.

        :return: The note of this CheckTransfer.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CheckTransfer.

        The descriptor that will be printed on the letter included with the check.

        :param note: The note of this CheckTransfer.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def recipient_name(self):
        """Gets the recipient_name of this CheckTransfer.

        The name that will be printed on the check.

        :return: The recipient_name of this CheckTransfer.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this CheckTransfer.

        The name that will be printed on the check.

        :param recipient_name: The recipient_name of this CheckTransfer.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def return_address(self):
        """Gets the return_address of this CheckTransfer.


        :return: The return_address of this CheckTransfer.
        :rtype: ReturnAddress
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this CheckTransfer.


        :param return_address: The return_address of this CheckTransfer.
        :type return_address: ReturnAddress
        """
        if return_address is None:
            raise ValueError("Invalid value for `return_address`, must not be `None`")

        self._return_address = return_address

    @property
    def return_details(self):
        """Gets the return_details of this CheckTransfer.


        :return: The return_details of this CheckTransfer.
        :rtype: CheckTransferReturn
        """
        return self._return_details

    @return_details.setter
    def return_details(self, return_details):
        """Sets the return_details of this CheckTransfer.


        :param return_details: The return_details of this CheckTransfer.
        :type return_details: CheckTransferReturn
        """
        if return_details is None:
            raise ValueError("Invalid value for `return_details`, must not be `None`")

        self._return_details = return_details

    @property
    def status(self):
        """Gets the status of this CheckTransfer.

        The lifecycle status of the transfer.

        :return: The status of this CheckTransfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckTransfer.

        The lifecycle status of the transfer.

        :param status: The status of this CheckTransfer.
        :type status: str
        """
        allowed_values = ["pending_approval", "pending_submission", "submitted", "pending_mailing", "mailed", "canceled", "deposited", "stopped", "returned", "rejected", "requires_attention"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stop_payment_request(self):
        """Gets the stop_payment_request of this CheckTransfer.


        :return: The stop_payment_request of this CheckTransfer.
        :rtype: CheckTransferStopPaymentRequest
        """
        return self._stop_payment_request

    @stop_payment_request.setter
    def stop_payment_request(self, stop_payment_request):
        """Sets the stop_payment_request of this CheckTransfer.


        :param stop_payment_request: The stop_payment_request of this CheckTransfer.
        :type stop_payment_request: CheckTransferStopPaymentRequest
        """
        if stop_payment_request is None:
            raise ValueError("Invalid value for `stop_payment_request`, must not be `None`")

        self._stop_payment_request = stop_payment_request

    @property
    def submission(self):
        """Gets the submission of this CheckTransfer.


        :return: The submission of this CheckTransfer.
        :rtype: CheckTransferSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this CheckTransfer.


        :param submission: The submission of this CheckTransfer.
        :type submission: CheckTransferSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def submitted_at(self):
        """Gets the submitted_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.

        :return: The submitted_at of this CheckTransfer.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this CheckTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.

        :param submitted_at: The submitted_at of this CheckTransfer.
        :type submitted_at: datetime
        """
        if submitted_at is None:
            raise ValueError("Invalid value for `submitted_at`, must not be `None`")

        self._submitted_at = submitted_at

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CheckTransfer.

        The ID for the transaction caused by the transfer.

        :return: The transaction_id of this CheckTransfer.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CheckTransfer.

        The ID for the transaction caused by the transfer.

        :param transaction_id: The transaction_id of this CheckTransfer.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this CheckTransfer.

        A constant representing the object's type. For this resource it will always be `check_transfer`.

        :return: The type of this CheckTransfer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckTransfer.

        A constant representing the object's type. For this resource it will always be `check_transfer`.

        :param type: The type of this CheckTransfer.
        :type type: str
        """
        allowed_values = ["check_transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
