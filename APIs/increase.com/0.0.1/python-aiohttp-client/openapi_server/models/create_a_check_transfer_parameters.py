# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_a_check_transfer_parameters_return_address import CreateACheckTransferParametersReturnAddress
from openapi_server import util


class CreateACheckTransferParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, address_city: str=None, address_line1: str=None, address_line2: str=None, address_state: str=None, address_zip: str=None, amount: int=None, message: str=None, note: str=None, recipient_name: str=None, require_approval: bool=None, return_address: CreateACheckTransferParametersReturnAddress=None):
        """CreateACheckTransferParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateACheckTransferParameters.
        :param address_city: The address_city of this CreateACheckTransferParameters.
        :param address_line1: The address_line1 of this CreateACheckTransferParameters.
        :param address_line2: The address_line2 of this CreateACheckTransferParameters.
        :param address_state: The address_state of this CreateACheckTransferParameters.
        :param address_zip: The address_zip of this CreateACheckTransferParameters.
        :param amount: The amount of this CreateACheckTransferParameters.
        :param message: The message of this CreateACheckTransferParameters.
        :param note: The note of this CreateACheckTransferParameters.
        :param recipient_name: The recipient_name of this CreateACheckTransferParameters.
        :param require_approval: The require_approval of this CreateACheckTransferParameters.
        :param return_address: The return_address of this CreateACheckTransferParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'address_city': str,
            'address_line1': str,
            'address_line2': str,
            'address_state': str,
            'address_zip': str,
            'amount': int,
            'message': str,
            'note': str,
            'recipient_name': str,
            'require_approval': bool,
            'return_address': CreateACheckTransferParametersReturnAddress
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'address_city': 'address_city',
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'address_state': 'address_state',
            'address_zip': 'address_zip',
            'amount': 'amount',
            'message': 'message',
            'note': 'note',
            'recipient_name': 'recipient_name',
            'require_approval': 'require_approval',
            'return_address': 'return_address'
        }

        self._account_id = account_id
        self._address_city = address_city
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_state = address_state
        self._address_zip = address_zip
        self._amount = amount
        self._message = message
        self._note = note
        self._recipient_name = recipient_name
        self._require_approval = require_approval
        self._return_address = return_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACheckTransferParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_check_transfer_parameters of this CreateACheckTransferParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateACheckTransferParameters.

        The identifier for the account that will send the transfer.

        :return: The account_id of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateACheckTransferParameters.

        The identifier for the account that will send the transfer.

        :param account_id: The account_id of this CreateACheckTransferParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def address_city(self):
        """Gets the address_city of this CreateACheckTransferParameters.

        The city of the check's destination.

        :return: The address_city of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CreateACheckTransferParameters.

        The city of the check's destination.

        :param address_city: The address_city of this CreateACheckTransferParameters.
        :type address_city: str
        """
        if address_city is None:
            raise ValueError("Invalid value for `address_city`, must not be `None`")
        if address_city is not None and len(address_city) > 250:
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `250`")
        if address_city is not None and len(address_city) < 1:
            raise ValueError("Invalid value for `address_city`, length must be greater than or equal to `1`")

        self._address_city = address_city

    @property
    def address_line1(self):
        """Gets the address_line1 of this CreateACheckTransferParameters.

        The street address of the check's destination.

        :return: The address_line1 of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CreateACheckTransferParameters.

        The street address of the check's destination.

        :param address_line1: The address_line1 of this CreateACheckTransferParameters.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")
        if address_line1 is not None and len(address_line1) > 250:
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `250`")
        if address_line1 is not None and len(address_line1) < 1:
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `1`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CreateACheckTransferParameters.

        The second line of the address of the check's destination.

        :return: The address_line2 of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CreateACheckTransferParameters.

        The second line of the address of the check's destination.

        :param address_line2: The address_line2 of this CreateACheckTransferParameters.
        :type address_line2: str
        """
        if address_line2 is not None and len(address_line2) > 250:
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `250`")
        if address_line2 is not None and len(address_line2) < 1:
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `1`")

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """Gets the address_state of this CreateACheckTransferParameters.

        The state of the check's destination.

        :return: The address_state of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CreateACheckTransferParameters.

        The state of the check's destination.

        :param address_state: The address_state of this CreateACheckTransferParameters.
        :type address_state: str
        """
        if address_state is None:
            raise ValueError("Invalid value for `address_state`, must not be `None`")
        if address_state is not None and len(address_state) > 200:
            raise ValueError("Invalid value for `address_state`, length must be less than or equal to `200`")
        if address_state is not None and len(address_state) < 1:
            raise ValueError("Invalid value for `address_state`, length must be greater than or equal to `1`")

        self._address_state = address_state

    @property
    def address_zip(self):
        """Gets the address_zip of this CreateACheckTransferParameters.

        The postal code of the check's destination.

        :return: The address_zip of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CreateACheckTransferParameters.

        The postal code of the check's destination.

        :param address_zip: The address_zip of this CreateACheckTransferParameters.
        :type address_zip: str
        """
        if address_zip is None:
            raise ValueError("Invalid value for `address_zip`, must not be `None`")
        if address_zip is not None and len(address_zip) > 250:
            raise ValueError("Invalid value for `address_zip`, length must be less than or equal to `250`")
        if address_zip is not None and len(address_zip) < 1:
            raise ValueError("Invalid value for `address_zip`, length must be greater than or equal to `1`")

        self._address_zip = address_zip

    @property
    def amount(self):
        """Gets the amount of this CreateACheckTransferParameters.

        The transfer amount in cents.

        :return: The amount of this CreateACheckTransferParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateACheckTransferParameters.

        The transfer amount in cents.

        :param amount: The amount of this CreateACheckTransferParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def message(self):
        """Gets the message of this CreateACheckTransferParameters.

        The descriptor that will be printed on the memo field on the check.

        :return: The message of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateACheckTransferParameters.

        The descriptor that will be printed on the memo field on the check.

        :param message: The message of this CreateACheckTransferParameters.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) > 73:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `73`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def note(self):
        """Gets the note of this CreateACheckTransferParameters.

        The descriptor that will be printed on the letter included with the check.

        :return: The note of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CreateACheckTransferParameters.

        The descriptor that will be printed on the letter included with the check.

        :param note: The note of this CreateACheckTransferParameters.
        :type note: str
        """
        if note is not None and len(note) > 200:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `200`")
        if note is not None and len(note) < 1:
            raise ValueError("Invalid value for `note`, length must be greater than or equal to `1`")

        self._note = note

    @property
    def recipient_name(self):
        """Gets the recipient_name of this CreateACheckTransferParameters.

        The name that will be printed on the check.

        :return: The recipient_name of this CreateACheckTransferParameters.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this CreateACheckTransferParameters.

        The name that will be printed on the check.

        :param recipient_name: The recipient_name of this CreateACheckTransferParameters.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")
        if recipient_name is not None and len(recipient_name) > 250:
            raise ValueError("Invalid value for `recipient_name`, length must be less than or equal to `250`")
        if recipient_name is not None and len(recipient_name) < 1:
            raise ValueError("Invalid value for `recipient_name`, length must be greater than or equal to `1`")

        self._recipient_name = recipient_name

    @property
    def require_approval(self):
        """Gets the require_approval of this CreateACheckTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :return: The require_approval of this CreateACheckTransferParameters.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval):
        """Sets the require_approval of this CreateACheckTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :param require_approval: The require_approval of this CreateACheckTransferParameters.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def return_address(self):
        """Gets the return_address of this CreateACheckTransferParameters.


        :return: The return_address of this CreateACheckTransferParameters.
        :rtype: CreateACheckTransferParametersReturnAddress
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this CreateACheckTransferParameters.


        :param return_address: The return_address of this CreateACheckTransferParameters.
        :type return_address: CreateACheckTransferParametersReturnAddress
        """

        self._return_address = return_address
