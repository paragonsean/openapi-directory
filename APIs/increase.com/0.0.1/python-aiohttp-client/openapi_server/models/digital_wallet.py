# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigitalWallet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_profile_id: str=None, email: str=None, phone: str=None):
        """DigitalWallet - a model defined in OpenAPI

        :param card_profile_id: The card_profile_id of this DigitalWallet.
        :param email: The email of this DigitalWallet.
        :param phone: The phone of this DigitalWallet.
        """
        self.openapi_types = {
            'card_profile_id': str,
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'card_profile_id': 'card_profile_id',
            'email': 'email',
            'phone': 'phone'
        }

        self._card_profile_id = card_profile_id
        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalWallet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Digital_Wallet of this DigitalWallet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_profile_id(self):
        """Gets the card_profile_id of this DigitalWallet.

        The card profile assigned to this digital card. Card profiles may also be assigned at the program level.

        :return: The card_profile_id of this DigitalWallet.
        :rtype: str
        """
        return self._card_profile_id

    @card_profile_id.setter
    def card_profile_id(self, card_profile_id):
        """Sets the card_profile_id of this DigitalWallet.

        The card profile assigned to this digital card. Card profiles may also be assigned at the program level.

        :param card_profile_id: The card_profile_id of this DigitalWallet.
        :type card_profile_id: str
        """
        if card_profile_id is None:
            raise ValueError("Invalid value for `card_profile_id`, must not be `None`")

        self._card_profile_id = card_profile_id

    @property
    def email(self):
        """Gets the email of this DigitalWallet.

        An email address that can be used to verify the cardholder via one-time passcode over email.

        :return: The email of this DigitalWallet.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DigitalWallet.

        An email address that can be used to verify the cardholder via one-time passcode over email.

        :param email: The email of this DigitalWallet.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this DigitalWallet.

        A phone number that can be used to verify the cardholder via one-time passcode over SMS.

        :return: The phone of this DigitalWallet.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DigitalWallet.

        A phone number that can be used to verify the cardholder via one-time passcode over SMS.

        :param phone: The phone of this DigitalWallet.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
