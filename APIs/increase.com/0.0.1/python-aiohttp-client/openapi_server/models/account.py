# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, currency: str=None, entity_id: str=None, id: str=None, informational_entity_id: str=None, interest_accrued: str=None, interest_accrued_at: date=None, name: str=None, status: str=None, type: str=None):
        """Account - a model defined in OpenAPI

        :param created_at: The created_at of this Account.
        :param currency: The currency of this Account.
        :param entity_id: The entity_id of this Account.
        :param id: The id of this Account.
        :param informational_entity_id: The informational_entity_id of this Account.
        :param interest_accrued: The interest_accrued of this Account.
        :param interest_accrued_at: The interest_accrued_at of this Account.
        :param name: The name of this Account.
        :param status: The status of this Account.
        :param type: The type of this Account.
        """
        self.openapi_types = {
            'created_at': datetime,
            'currency': str,
            'entity_id': str,
            'id': str,
            'informational_entity_id': str,
            'interest_accrued': str,
            'interest_accrued_at': date,
            'name': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'currency': 'currency',
            'entity_id': 'entity_id',
            'id': 'id',
            'informational_entity_id': 'informational_entity_id',
            'interest_accrued': 'interest_accrued',
            'interest_accrued_at': 'interest_accrued_at',
            'name': 'name',
            'status': 'status',
            'type': 'type'
        }

        self._created_at = created_at
        self._currency = currency
        self._entity_id = entity_id
        self._id = id
        self._informational_entity_id = informational_entity_id
        self._interest_accrued = interest_accrued
        self._interest_accrued_at = interest_accrued_at
        self._name = name
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Account.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.

        :return: The created_at of this Account.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.

        :param created_at: The created_at of this Account.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Account.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.

        :return: The currency of this Account.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.

        :param currency: The currency of this Account.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def entity_id(self):
        """Gets the entity_id of this Account.

        The identifier for the Entity the Account belongs to.

        :return: The entity_id of this Account.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Account.

        The identifier for the Entity the Account belongs to.

        :param entity_id: The entity_id of this Account.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this Account.

        The Account identifier.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The Account identifier.

        :param id: The id of this Account.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def informational_entity_id(self):
        """Gets the informational_entity_id of this Account.

        The identifier of an Entity that, while not owning the Account, is associated with its activity.

        :return: The informational_entity_id of this Account.
        :rtype: str
        """
        return self._informational_entity_id

    @informational_entity_id.setter
    def informational_entity_id(self, informational_entity_id):
        """Sets the informational_entity_id of this Account.

        The identifier of an Entity that, while not owning the Account, is associated with its activity.

        :param informational_entity_id: The informational_entity_id of this Account.
        :type informational_entity_id: str
        """
        if informational_entity_id is None:
            raise ValueError("Invalid value for `informational_entity_id`, must not be `None`")

        self._informational_entity_id = informational_entity_id

    @property
    def interest_accrued(self):
        """Gets the interest_accrued of this Account.

        The interest accrued but not yet paid, expressed as a string containing a floating-point value.

        :return: The interest_accrued of this Account.
        :rtype: str
        """
        return self._interest_accrued

    @interest_accrued.setter
    def interest_accrued(self, interest_accrued):
        """Sets the interest_accrued of this Account.

        The interest accrued but not yet paid, expressed as a string containing a floating-point value.

        :param interest_accrued: The interest_accrued of this Account.
        :type interest_accrued: str
        """
        if interest_accrued is None:
            raise ValueError("Invalid value for `interest_accrued`, must not be `None`")

        self._interest_accrued = interest_accrued

    @property
    def interest_accrued_at(self):
        """Gets the interest_accrued_at of this Account.

        The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.

        :return: The interest_accrued_at of this Account.
        :rtype: date
        """
        return self._interest_accrued_at

    @interest_accrued_at.setter
    def interest_accrued_at(self, interest_accrued_at):
        """Sets the interest_accrued_at of this Account.

        The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.

        :param interest_accrued_at: The interest_accrued_at of this Account.
        :type interest_accrued_at: date
        """
        if interest_accrued_at is None:
            raise ValueError("Invalid value for `interest_accrued_at`, must not be `None`")

        self._interest_accrued_at = interest_accrued_at

    @property
    def name(self):
        """Gets the name of this Account.

        The name you choose for the Account.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        The name you choose for the Account.

        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Account.

        The status of the Account.

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        The status of the Account.

        :param status: The status of this Account.
        :type status: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Account.

        A constant representing the object's type. For this resource it will always be `account`.

        :return: The type of this Account.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        A constant representing the object's type. For this resource it will always be `account`.

        :param type: The type of this Account.
        :type type: str
        """
        allowed_values = ["account"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
