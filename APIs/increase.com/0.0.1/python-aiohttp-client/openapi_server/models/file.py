# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, direction: str=None, download_url: str=None, filename: str=None, id: str=None, purpose: str=None, type: str=None):
        """File - a model defined in OpenAPI

        :param created_at: The created_at of this File.
        :param description: The description of this File.
        :param direction: The direction of this File.
        :param download_url: The download_url of this File.
        :param filename: The filename of this File.
        :param id: The id of this File.
        :param purpose: The purpose of this File.
        :param type: The type of this File.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'direction': str,
            'download_url': str,
            'filename': str,
            'id': str,
            'purpose': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'direction': 'direction',
            'download_url': 'download_url',
            'filename': 'filename',
            'id': 'id',
            'purpose': 'purpose',
            'type': 'type'
        }

        self._created_at = created_at
        self._description = description
        self._direction = direction
        self._download_url = download_url
        self._filename = filename
        self._id = id
        self._purpose = purpose
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The file of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this File.

        The time the File was created.

        :return: The created_at of this File.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.

        The time the File was created.

        :param created_at: The created_at of this File.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this File.

        A description of the File.

        :return: The description of this File.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        A description of the File.

        :param description: The description of this File.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def direction(self):
        """Gets the direction of this File.

        Whether the File was generated by Increase or by you and sent to Increase.

        :return: The direction of this File.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this File.

        Whether the File was generated by Increase or by you and sent to Increase.

        :param direction: The direction of this File.
        :type direction: str
        """
        allowed_values = ["to_increase", "from_increase"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def download_url(self):
        """Gets the download_url of this File.

        A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.

        :return: The download_url of this File.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this File.

        A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.

        :param download_url: The download_url of this File.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def filename(self):
        """Gets the filename of this File.

        The filename that was provided upon upload or generated by Increase.

        :return: The filename of this File.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this File.

        The filename that was provided upon upload or generated by Increase.

        :param filename: The filename of this File.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def id(self):
        """Gets the id of this File.

        The File's identifier.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The File's identifier.

        :param id: The id of this File.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def purpose(self):
        """Gets the purpose of this File.

        What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :return: The purpose of this File.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this File.

        What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :param purpose: The purpose of this File.
        :type purpose: str
        """
        allowed_values = ["check_image_front", "check_image_back", "form_1099_int", "form_ss_4", "identity_document", "increase_statement", "other", "trust_formation_document", "digital_wallet_artwork", "digital_wallet_app_icon", "document_request", "entity_supplemental_document", "export"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def type(self):
        """Gets the type of this File.

        A constant representing the object's type. For this resource it will always be `file`.

        :return: The type of this File.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.

        A constant representing the object's type. For this resource it will always be `file`.

        :param type: The type of this File.
        :type type: str
        """
        allowed_values = ["file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
