# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealTimePaymentsTransferAcknowledgement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, destination_account_number: str=None, destination_routing_number: str=None, remittance_information: str=None, transfer_id: str=None):
        """RealTimePaymentsTransferAcknowledgement - a model defined in OpenAPI

        :param amount: The amount of this RealTimePaymentsTransferAcknowledgement.
        :param destination_account_number: The destination_account_number of this RealTimePaymentsTransferAcknowledgement.
        :param destination_routing_number: The destination_routing_number of this RealTimePaymentsTransferAcknowledgement.
        :param remittance_information: The remittance_information of this RealTimePaymentsTransferAcknowledgement.
        :param transfer_id: The transfer_id of this RealTimePaymentsTransferAcknowledgement.
        """
        self.openapi_types = {
            'amount': int,
            'destination_account_number': str,
            'destination_routing_number': str,
            'remittance_information': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'destination_account_number': 'destination_account_number',
            'destination_routing_number': 'destination_routing_number',
            'remittance_information': 'remittance_information',
            'transfer_id': 'transfer_id'
        }

        self._amount = amount
        self._destination_account_number = destination_account_number
        self._destination_routing_number = destination_routing_number
        self._remittance_information = remittance_information
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimePaymentsTransferAcknowledgement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Real_Time_Payments_Transfer_Acknowledgement of this RealTimePaymentsTransferAcknowledgement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RealTimePaymentsTransferAcknowledgement.

        The transfer amount in USD cents.

        :return: The amount of this RealTimePaymentsTransferAcknowledgement.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RealTimePaymentsTransferAcknowledgement.

        The transfer amount in USD cents.

        :param amount: The amount of this RealTimePaymentsTransferAcknowledgement.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def destination_account_number(self):
        """Gets the destination_account_number of this RealTimePaymentsTransferAcknowledgement.

        The destination account number.

        :return: The destination_account_number of this RealTimePaymentsTransferAcknowledgement.
        :rtype: str
        """
        return self._destination_account_number

    @destination_account_number.setter
    def destination_account_number(self, destination_account_number):
        """Sets the destination_account_number of this RealTimePaymentsTransferAcknowledgement.

        The destination account number.

        :param destination_account_number: The destination_account_number of this RealTimePaymentsTransferAcknowledgement.
        :type destination_account_number: str
        """
        if destination_account_number is None:
            raise ValueError("Invalid value for `destination_account_number`, must not be `None`")

        self._destination_account_number = destination_account_number

    @property
    def destination_routing_number(self):
        """Gets the destination_routing_number of this RealTimePaymentsTransferAcknowledgement.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The destination_routing_number of this RealTimePaymentsTransferAcknowledgement.
        :rtype: str
        """
        return self._destination_routing_number

    @destination_routing_number.setter
    def destination_routing_number(self, destination_routing_number):
        """Sets the destination_routing_number of this RealTimePaymentsTransferAcknowledgement.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param destination_routing_number: The destination_routing_number of this RealTimePaymentsTransferAcknowledgement.
        :type destination_routing_number: str
        """
        if destination_routing_number is None:
            raise ValueError("Invalid value for `destination_routing_number`, must not be `None`")

        self._destination_routing_number = destination_routing_number

    @property
    def remittance_information(self):
        """Gets the remittance_information of this RealTimePaymentsTransferAcknowledgement.

        Unstructured information that will show on the recipient's bank statement.

        :return: The remittance_information of this RealTimePaymentsTransferAcknowledgement.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this RealTimePaymentsTransferAcknowledgement.

        Unstructured information that will show on the recipient's bank statement.

        :param remittance_information: The remittance_information of this RealTimePaymentsTransferAcknowledgement.
        :type remittance_information: str
        """
        if remittance_information is None:
            raise ValueError("Invalid value for `remittance_information`, must not be `None`")

        self._remittance_information = remittance_information

    @property
    def transfer_id(self):
        """Gets the transfer_id of this RealTimePaymentsTransferAcknowledgement.

        The identifier of the Real Time Payments Transfer that led to this Transaction.

        :return: The transfer_id of this RealTimePaymentsTransferAcknowledgement.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this RealTimePaymentsTransferAcknowledgement.

        The identifier of the Real Time Payments Transfer that led to this Transaction.

        :param transfer_id: The transfer_id of this RealTimePaymentsTransferAcknowledgement.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
