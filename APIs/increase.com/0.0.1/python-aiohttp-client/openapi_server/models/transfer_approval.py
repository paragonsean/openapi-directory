# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferApproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_at: datetime=None, approved_by: str=None):
        """TransferApproval - a model defined in OpenAPI

        :param approved_at: The approved_at of this TransferApproval.
        :param approved_by: The approved_by of this TransferApproval.
        """
        self.openapi_types = {
            'approved_at': datetime,
            'approved_by': str
        }

        self.attribute_map = {
            'approved_at': 'approved_at',
            'approved_by': 'approved_by'
        }

        self._approved_at = approved_at
        self._approved_by = approved_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferApproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transfer_Approval of this TransferApproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_at(self):
        """Gets the approved_at of this TransferApproval.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.

        :return: The approved_at of this TransferApproval.
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this TransferApproval.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.

        :param approved_at: The approved_at of this TransferApproval.
        :type approved_at: datetime
        """
        if approved_at is None:
            raise ValueError("Invalid value for `approved_at`, must not be `None`")

        self._approved_at = approved_at

    @property
    def approved_by(self):
        """Gets the approved_by of this TransferApproval.

        If the Transfer was approved by a user in the dashboard, the email address of that user.

        :return: The approved_by of this TransferApproval.
        :rtype: str
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by):
        """Sets the approved_by of this TransferApproval.

        If the Transfer was approved by a user in the dashboard, the email address of that user.

        :param approved_by: The approved_by of this TransferApproval.
        :type approved_by: str
        """
        if approved_by is None:
            raise ValueError("Invalid value for `approved_by`, must not be `None`")

        self._approved_by = approved_by
