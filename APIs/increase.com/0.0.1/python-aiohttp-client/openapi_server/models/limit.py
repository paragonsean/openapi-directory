# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Limit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, interval: str=None, metric: str=None, model_id: str=None, model_type: str=None, status: str=None, type: str=None, value: int=None):
        """Limit - a model defined in OpenAPI

        :param id: The id of this Limit.
        :param interval: The interval of this Limit.
        :param metric: The metric of this Limit.
        :param model_id: The model_id of this Limit.
        :param model_type: The model_type of this Limit.
        :param status: The status of this Limit.
        :param type: The type of this Limit.
        :param value: The value of this Limit.
        """
        self.openapi_types = {
            'id': str,
            'interval': str,
            'metric': str,
            'model_id': str,
            'model_type': str,
            'status': str,
            'type': str,
            'value': int
        }

        self.attribute_map = {
            'id': 'id',
            'interval': 'interval',
            'metric': 'metric',
            'model_id': 'model_id',
            'model_type': 'model_type',
            'status': 'status',
            'type': 'type',
            'value': 'value'
        }

        self._id = id
        self._interval = interval
        self._metric = metric
        self._model_id = model_id
        self._model_type = model_type
        self._status = status
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Limit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The limit of this Limit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Limit.

        The Limit identifier.

        :return: The id of this Limit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Limit.

        The Limit identifier.

        :param id: The id of this Limit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this Limit.

        The interval for the metric. This is required if `metric` is `count` or `volume`.

        :return: The interval of this Limit.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Limit.

        The interval for the metric. This is required if `metric` is `count` or `volume`.

        :param interval: The interval of this Limit.
        :type interval: str
        """
        allowed_values = [None,"transaction", "day", "week", "month", "year", "all_time"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def metric(self):
        """Gets the metric of this Limit.

        The metric for the Limit.

        :return: The metric of this Limit.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Limit.

        The metric for the Limit.

        :param metric: The metric of this Limit.
        :type metric: str
        """
        allowed_values = ["count", "volume"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def model_id(self):
        """Gets the model_id of this Limit.

        The identifier of the Account Number, Account, or Card the Limit applies to.

        :return: The model_id of this Limit.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Limit.

        The identifier of the Account Number, Account, or Card the Limit applies to.

        :param model_id: The model_id of this Limit.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def model_type(self):
        """Gets the model_type of this Limit.

        The type of the model you wish to associate the Limit with.

        :return: The model_type of this Limit.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Limit.

        The type of the model you wish to associate the Limit with.

        :param model_type: The model_type of this Limit.
        :type model_type: str
        """
        allowed_values = ["account", "account_number", "card"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status(self):
        """Gets the status of this Limit.

        The current status of the Limit.

        :return: The status of this Limit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Limit.

        The current status of the Limit.

        :param status: The status of this Limit.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Limit.

        A constant representing the object's type. For this resource it will always be `limit`.

        :return: The type of this Limit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Limit.

        A constant representing the object's type. For this resource it will always be `limit`.

        :param type: The type of this Limit.
        :type type: str
        """
        allowed_values = ["limit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this Limit.

        The value to evaluate the Limit against.

        :return: The value of this Limit.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Limit.

        The value to evaluate the Limit against.

        :param value: The value of this Limit.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
