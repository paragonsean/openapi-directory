# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ach_debit_status: str=None, activation_status: str=None, created_at: datetime=None, id: str=None, type: str=None):
        """Group - a model defined in OpenAPI

        :param ach_debit_status: The ach_debit_status of this Group.
        :param activation_status: The activation_status of this Group.
        :param created_at: The created_at of this Group.
        :param id: The id of this Group.
        :param type: The type of this Group.
        """
        self.openapi_types = {
            'ach_debit_status': str,
            'activation_status': str,
            'created_at': datetime,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'ach_debit_status': 'ach_debit_status',
            'activation_status': 'activation_status',
            'created_at': 'created_at',
            'id': 'id',
            'type': 'type'
        }

        self._ach_debit_status = ach_debit_status
        self._activation_status = activation_status
        self._created_at = created_at
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ach_debit_status(self):
        """Gets the ach_debit_status of this Group.

        If the Group is allowed to create ACH debits.

        :return: The ach_debit_status of this Group.
        :rtype: str
        """
        return self._ach_debit_status

    @ach_debit_status.setter
    def ach_debit_status(self, ach_debit_status):
        """Sets the ach_debit_status of this Group.

        If the Group is allowed to create ACH debits.

        :param ach_debit_status: The ach_debit_status of this Group.
        :type ach_debit_status: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if ach_debit_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ach_debit_status` ({0}), must be one of {1}"
                .format(ach_debit_status, allowed_values)
            )

        self._ach_debit_status = ach_debit_status

    @property
    def activation_status(self):
        """Gets the activation_status of this Group.

        If the Group is activated or not.

        :return: The activation_status of this Group.
        :rtype: str
        """
        return self._activation_status

    @activation_status.setter
    def activation_status(self, activation_status):
        """Sets the activation_status of this Group.

        If the Group is activated or not.

        :param activation_status: The activation_status of this Group.
        :type activation_status: str
        """
        allowed_values = ["unactivated", "activated"]  # noqa: E501
        if activation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `activation_status` ({0}), must be one of {1}"
                .format(activation_status, allowed_values)
            )

        self._activation_status = activation_status

    @property
    def created_at(self):
        """Gets the created_at of this Group.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.

        :return: The created_at of this Group.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Group.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.

        :param created_at: The created_at of this Group.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Group.

        The Group identifier.

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        The Group identifier.

        :param id: The id of this Group.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this Group.

        A constant representing the object's type. For this resource it will always be `group`.

        :return: The type of this Group.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.

        A constant representing the object's type. For this resource it will always be `group`.

        :param type: The type of this Group.
        :type type: str
        """
        allowed_values = ["group"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
