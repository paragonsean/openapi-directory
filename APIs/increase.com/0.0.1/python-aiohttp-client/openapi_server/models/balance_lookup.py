# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BalanceLookup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, available_balance: int=None, current_balance: int=None, type: str=None):
        """BalanceLookup - a model defined in OpenAPI

        :param account_id: The account_id of this BalanceLookup.
        :param available_balance: The available_balance of this BalanceLookup.
        :param current_balance: The current_balance of this BalanceLookup.
        :param type: The type of this BalanceLookup.
        """
        self.openapi_types = {
            'account_id': str,
            'available_balance': int,
            'current_balance': int,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'available_balance': 'available_balance',
            'current_balance': 'current_balance',
            'type': 'type'
        }

        self._account_id = account_id
        self._available_balance = available_balance
        self._current_balance = current_balance
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceLookup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The balance_lookup of this BalanceLookup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this BalanceLookup.

        The identifier for the account for which the balance was queried.

        :return: The account_id of this BalanceLookup.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BalanceLookup.

        The identifier for the account for which the balance was queried.

        :param account_id: The account_id of this BalanceLookup.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def available_balance(self):
        """Gets the available_balance of this BalanceLookup.

        The Account's available balance, representing the current balance less any open Pending Transactions on the Account.

        :return: The available_balance of this BalanceLookup.
        :rtype: int
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this BalanceLookup.

        The Account's available balance, representing the current balance less any open Pending Transactions on the Account.

        :param available_balance: The available_balance of this BalanceLookup.
        :type available_balance: int
        """
        if available_balance is None:
            raise ValueError("Invalid value for `available_balance`, must not be `None`")

        self._available_balance = available_balance

    @property
    def current_balance(self):
        """Gets the current_balance of this BalanceLookup.

        The Account's current balance, representing the sum of all posted Transactions on the Account.

        :return: The current_balance of this BalanceLookup.
        :rtype: int
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this BalanceLookup.

        The Account's current balance, representing the sum of all posted Transactions on the Account.

        :param current_balance: The current_balance of this BalanceLookup.
        :type current_balance: int
        """
        if current_balance is None:
            raise ValueError("Invalid value for `current_balance`, must not be `None`")

        self._current_balance = current_balance

    @property
    def type(self):
        """Gets the type of this BalanceLookup.

        A constant representing the object's type. For this resource it will always be `balance_lookup`.

        :return: The type of this BalanceLookup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BalanceLookup.

        A constant representing the object's type. For this resource it will always be `balance_lookup`.

        :param type: The type of this BalanceLookup.
        :type type: str
        """
        allowed_values = ["balance_lookup"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
