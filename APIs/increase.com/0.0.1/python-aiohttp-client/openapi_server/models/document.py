# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, created_at: datetime=None, entity_id: str=None, file_id: str=None, id: str=None, type: str=None):
        """Document - a model defined in OpenAPI

        :param category: The category of this Document.
        :param created_at: The created_at of this Document.
        :param entity_id: The entity_id of this Document.
        :param file_id: The file_id of this Document.
        :param id: The id of this Document.
        :param type: The type of this Document.
        """
        self.openapi_types = {
            'category': str,
            'created_at': datetime,
            'entity_id': str,
            'file_id': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'created_at': 'created_at',
            'entity_id': 'entity_id',
            'file_id': 'file_id',
            'id': 'id',
            'type': 'type'
        }

        self._category = category
        self._created_at = created_at
        self._entity_id = entity_id
        self._file_id = file_id
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Document.

        The type of document.

        :return: The category of this Document.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Document.

        The type of document.

        :param category: The category of this Document.
        :type category: str
        """
        allowed_values = ["account_opening_disclosures", "anti_money_laundering_policy", "anti_money_laundering_procedures", "audit_report", "background_checks", "business_continuity_plan", "collections_policy", "complaints_policy", "complaint_report", "compliance_report", "compliance_staffing_plan", "compliance_management_system_policy", "consumer_privacy_notice", "consumer_protection_policy", "corporate_formation_document", "credit_monitoring_report", "customer_information_program_policy", "electronic_funds_tranfer_act_policy", "employee_overview", "end_user_terms_of_service", "e_sign_policy", "financial_statement", "form_1099_int", "fraud_prevention_policy", "funds_availability_policy", "funds_availability_disclosure", "funds_flow_diagram", "gramm_leach_bliley_act_policy", "information_security_policy", "insurance_policy", "investor_presentation", "loan_application_processing_policy", "management_biography", "marketing_and_advertising_policy", "network_security_diagram", "onboarding_questionnaire", "penetration_test_report", "program_risk_assessment", "security_audit_report", "servicing_policy", "transaction_monitoring_report", "truth_in_savings_act_policy", "underwriting_policy", "vendor_list", "vendor_management_policy", "vendor_risk_management_report", "volume_forecast"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this Document.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.

        :return: The created_at of this Document.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Document.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.

        :param created_at: The created_at of this Document.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def entity_id(self):
        """Gets the entity_id of this Document.

        The identifier of the Entity the document was generated for.

        :return: The entity_id of this Document.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Document.

        The identifier of the Entity the document was generated for.

        :param entity_id: The entity_id of this Document.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def file_id(self):
        """Gets the file_id of this Document.

        The identifier of the File containing the Document's contents.

        :return: The file_id of this Document.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Document.

        The identifier of the File containing the Document's contents.

        :param file_id: The file_id of this Document.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this Document.

        The Document identifier.

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        The Document identifier.

        :param id: The id of this Document.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this Document.

        A constant representing the object's type. For this resource it will always be `document`.

        :return: The type of this Document.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Document.

        A constant representing the object's type. For this resource it will always be `document`.

        :param type: The type of this Document.
        :type type: str
        """
        allowed_values = ["document"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
