# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckTransferReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, reason: str=None, returned_at: datetime=None, transaction_id: str=None, transfer_id: str=None):
        """CheckTransferReturn - a model defined in OpenAPI

        :param file_id: The file_id of this CheckTransferReturn.
        :param reason: The reason of this CheckTransferReturn.
        :param returned_at: The returned_at of this CheckTransferReturn.
        :param transaction_id: The transaction_id of this CheckTransferReturn.
        :param transfer_id: The transfer_id of this CheckTransferReturn.
        """
        self.openapi_types = {
            'file_id': str,
            'reason': str,
            'returned_at': datetime,
            'transaction_id': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'reason': 'reason',
            'returned_at': 'returned_at',
            'transaction_id': 'transaction_id',
            'transfer_id': 'transfer_id'
        }

        self._file_id = file_id
        self._reason = reason
        self._returned_at = returned_at
        self._transaction_id = transaction_id
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransferReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Transfer_Return of this CheckTransferReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this CheckTransferReturn.

        If available, a document with additional information about the return.

        :return: The file_id of this CheckTransferReturn.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this CheckTransferReturn.

        If available, a document with additional information about the return.

        :param file_id: The file_id of this CheckTransferReturn.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def reason(self):
        """Gets the reason of this CheckTransferReturn.

        The reason why the check was returned.

        :return: The reason of this CheckTransferReturn.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckTransferReturn.

        The reason why the check was returned.

        :param reason: The reason of this CheckTransferReturn.
        :type reason: str
        """
        allowed_values = ["mail_delivery_failure", "refused_by_recipient"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def returned_at(self):
        """Gets the returned_at of this CheckTransferReturn.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.

        :return: The returned_at of this CheckTransferReturn.
        :rtype: datetime
        """
        return self._returned_at

    @returned_at.setter
    def returned_at(self, returned_at):
        """Sets the returned_at of this CheckTransferReturn.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.

        :param returned_at: The returned_at of this CheckTransferReturn.
        :type returned_at: datetime
        """
        if returned_at is None:
            raise ValueError("Invalid value for `returned_at`, must not be `None`")

        self._returned_at = returned_at

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CheckTransferReturn.

        The identifier of the Transaction that was created to credit you for the returned check.

        :return: The transaction_id of this CheckTransferReturn.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CheckTransferReturn.

        The identifier of the Transaction that was created to credit you for the returned check.

        :param transaction_id: The transaction_id of this CheckTransferReturn.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def transfer_id(self):
        """Gets the transfer_id of this CheckTransferReturn.

        The identifier of the returned Check Transfer.

        :return: The transfer_id of this CheckTransferReturn.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this CheckTransferReturn.

        The identifier of the returned Check Transfer.

        :param transfer_id: The transfer_id of this CheckTransferReturn.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
