# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateDigitalWalletProvisioningForACardParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: str=None):
        """SimulateDigitalWalletProvisioningForACardParameters - a model defined in OpenAPI

        :param card_id: The card_id of this SimulateDigitalWalletProvisioningForACardParameters.
        """
        self.openapi_types = {
            'card_id': str
        }

        self.attribute_map = {
            'card_id': 'card_id'
        }

        self._card_id = card_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateDigitalWalletProvisioningForACardParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_digital_wallet_provisioning_for_a_card_parameters of this SimulateDigitalWalletProvisioningForACardParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this SimulateDigitalWalletProvisioningForACardParameters.

        The identifier of the Card to be authorized.

        :return: The card_id of this SimulateDigitalWalletProvisioningForACardParameters.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this SimulateDigitalWalletProvisioningForACardParameters.

        The identifier of the Card to be authorized.

        :param card_id: The card_id of this SimulateDigitalWalletProvisioningForACardParameters.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id
