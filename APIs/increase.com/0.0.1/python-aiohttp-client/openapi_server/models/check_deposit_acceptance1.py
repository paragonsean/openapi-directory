# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDepositAcceptance1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, amount: int=None, auxiliary_on_us: str=None, check_deposit_id: str=None, currency: str=None, routing_number: str=None, serial_number: str=None):
        """CheckDepositAcceptance1 - a model defined in OpenAPI

        :param account_number: The account_number of this CheckDepositAcceptance1.
        :param amount: The amount of this CheckDepositAcceptance1.
        :param auxiliary_on_us: The auxiliary_on_us of this CheckDepositAcceptance1.
        :param check_deposit_id: The check_deposit_id of this CheckDepositAcceptance1.
        :param currency: The currency of this CheckDepositAcceptance1.
        :param routing_number: The routing_number of this CheckDepositAcceptance1.
        :param serial_number: The serial_number of this CheckDepositAcceptance1.
        """
        self.openapi_types = {
            'account_number': str,
            'amount': int,
            'auxiliary_on_us': str,
            'check_deposit_id': str,
            'currency': str,
            'routing_number': str,
            'serial_number': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'amount': 'amount',
            'auxiliary_on_us': 'auxiliary_on_us',
            'check_deposit_id': 'check_deposit_id',
            'currency': 'currency',
            'routing_number': 'routing_number',
            'serial_number': 'serial_number'
        }

        self._account_number = account_number
        self._amount = amount
        self._auxiliary_on_us = auxiliary_on_us
        self._check_deposit_id = check_deposit_id
        self._currency = currency
        self._routing_number = routing_number
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDepositAcceptance1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Deposit_Acceptance_1 of this CheckDepositAcceptance1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CheckDepositAcceptance1.

        The account number printed on the check.

        :return: The account_number of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CheckDepositAcceptance1.

        The account number printed on the check.

        :param account_number: The account_number of this CheckDepositAcceptance1.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this CheckDepositAcceptance1.

        The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this CheckDepositAcceptance1.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckDepositAcceptance1.

        The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this CheckDepositAcceptance1.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def auxiliary_on_us(self):
        """Gets the auxiliary_on_us of this CheckDepositAcceptance1.

        An additional line of metadata printed on the check. This typically includes the check number for business checks.

        :return: The auxiliary_on_us of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._auxiliary_on_us

    @auxiliary_on_us.setter
    def auxiliary_on_us(self, auxiliary_on_us):
        """Sets the auxiliary_on_us of this CheckDepositAcceptance1.

        An additional line of metadata printed on the check. This typically includes the check number for business checks.

        :param auxiliary_on_us: The auxiliary_on_us of this CheckDepositAcceptance1.
        :type auxiliary_on_us: str
        """
        if auxiliary_on_us is None:
            raise ValueError("Invalid value for `auxiliary_on_us`, must not be `None`")

        self._auxiliary_on_us = auxiliary_on_us

    @property
    def check_deposit_id(self):
        """Gets the check_deposit_id of this CheckDepositAcceptance1.

        The ID of the Check Deposit that was accepted.

        :return: The check_deposit_id of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._check_deposit_id

    @check_deposit_id.setter
    def check_deposit_id(self, check_deposit_id):
        """Sets the check_deposit_id of this CheckDepositAcceptance1.

        The ID of the Check Deposit that was accepted.

        :param check_deposit_id: The check_deposit_id of this CheckDepositAcceptance1.
        :type check_deposit_id: str
        """
        if check_deposit_id is None:
            raise ValueError("Invalid value for `check_deposit_id`, must not be `None`")

        self._check_deposit_id = check_deposit_id

    @property
    def currency(self):
        """Gets the currency of this CheckDepositAcceptance1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckDepositAcceptance1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this CheckDepositAcceptance1.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def routing_number(self):
        """Gets the routing_number of this CheckDepositAcceptance1.

        The routing number printed on the check.

        :return: The routing_number of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CheckDepositAcceptance1.

        The routing number printed on the check.

        :param routing_number: The routing_number of this CheckDepositAcceptance1.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def serial_number(self):
        """Gets the serial_number of this CheckDepositAcceptance1.

        The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.

        :return: The serial_number of this CheckDepositAcceptance1.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CheckDepositAcceptance1.

        The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.

        :param serial_number: The serial_number of this CheckDepositAcceptance1.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")

        self._serial_number = serial_number
