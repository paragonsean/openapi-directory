# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ACHNotificationOfChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_code: str=None, corrected_data: str=None, created_at: datetime=None):
        """ACHNotificationOfChange - a model defined in OpenAPI

        :param change_code: The change_code of this ACHNotificationOfChange.
        :param corrected_data: The corrected_data of this ACHNotificationOfChange.
        :param created_at: The created_at of this ACHNotificationOfChange.
        """
        self.openapi_types = {
            'change_code': str,
            'corrected_data': str,
            'created_at': datetime
        }

        self.attribute_map = {
            'change_code': 'change_code',
            'corrected_data': 'corrected_data',
            'created_at': 'created_at'
        }

        self._change_code = change_code
        self._corrected_data = corrected_data
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ACHNotificationOfChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ACH_Notification_of_Change of this ACHNotificationOfChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_code(self):
        """Gets the change_code of this ACHNotificationOfChange.

        The type of change that occurred.

        :return: The change_code of this ACHNotificationOfChange.
        :rtype: str
        """
        return self._change_code

    @change_code.setter
    def change_code(self, change_code):
        """Sets the change_code of this ACHNotificationOfChange.

        The type of change that occurred.

        :param change_code: The change_code of this ACHNotificationOfChange.
        :type change_code: str
        """
        if change_code is None:
            raise ValueError("Invalid value for `change_code`, must not be `None`")

        self._change_code = change_code

    @property
    def corrected_data(self):
        """Gets the corrected_data of this ACHNotificationOfChange.

        The corrected data.

        :return: The corrected_data of this ACHNotificationOfChange.
        :rtype: str
        """
        return self._corrected_data

    @corrected_data.setter
    def corrected_data(self, corrected_data):
        """Sets the corrected_data of this ACHNotificationOfChange.

        The corrected data.

        :param corrected_data: The corrected_data of this ACHNotificationOfChange.
        :type corrected_data: str
        """
        if corrected_data is None:
            raise ValueError("Invalid value for `corrected_data`, must not be `None`")

        self._corrected_data = corrected_data

    @property
    def created_at(self):
        """Gets the created_at of this ACHNotificationOfChange.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.

        :return: The created_at of this ACHNotificationOfChange.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ACHNotificationOfChange.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.

        :param created_at: The created_at of this ACHNotificationOfChange.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at
