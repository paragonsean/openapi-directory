# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ACHTransferReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, return_reason_code: str=None, transaction_id: str=None, transfer_id: str=None):
        """ACHTransferReturn - a model defined in OpenAPI

        :param created_at: The created_at of this ACHTransferReturn.
        :param return_reason_code: The return_reason_code of this ACHTransferReturn.
        :param transaction_id: The transaction_id of this ACHTransferReturn.
        :param transfer_id: The transfer_id of this ACHTransferReturn.
        """
        self.openapi_types = {
            'created_at': datetime,
            'return_reason_code': str,
            'transaction_id': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'return_reason_code': 'return_reason_code',
            'transaction_id': 'transaction_id',
            'transfer_id': 'transfer_id'
        }

        self._created_at = created_at
        self._return_reason_code = return_reason_code
        self._transaction_id = transaction_id
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ACHTransferReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ACH_Transfer_Return of this ACHTransferReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ACHTransferReturn.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this ACHTransferReturn.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ACHTransferReturn.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this ACHTransferReturn.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def return_reason_code(self):
        """Gets the return_reason_code of this ACHTransferReturn.

        Why the ACH Transfer was returned.

        :return: The return_reason_code of this ACHTransferReturn.
        :rtype: str
        """
        return self._return_reason_code

    @return_reason_code.setter
    def return_reason_code(self, return_reason_code):
        """Sets the return_reason_code of this ACHTransferReturn.

        Why the ACH Transfer was returned.

        :param return_reason_code: The return_reason_code of this ACHTransferReturn.
        :type return_reason_code: str
        """
        allowed_values = ["insufficient_fund", "no_account", "account_closed", "invalid_account_number_structure", "account_frozen_entry_returned_per_ofac_instruction", "credit_entry_refused_by_receiver", "unauthorized_debit_to_consumer_account_using_corporate_sec_code", "corporate_customer_advised_not_authorized", "payment_stopped", "non_transaction_account", "uncollected_funds", "routing_number_check_digit_error", "customer_advised_unauthorized_improper_ineligible_or_incomplete", "amount_field_error", "authorization_revoked_by_customer", "invalid_ach_routing_number", "file_record_edit_criteria", "enr_invalid_individual_name", "returned_per_odfi_request", "addenda_error", "limited_participation_dfi", "incorrectly_coded_outbound_international_payment", "other"]  # noqa: E501
        if return_reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `return_reason_code` ({0}), must be one of {1}"
                .format(return_reason_code, allowed_values)
            )

        self._return_reason_code = return_reason_code

    @property
    def transaction_id(self):
        """Gets the transaction_id of this ACHTransferReturn.

        The identifier of the Tranasaction associated with this return.

        :return: The transaction_id of this ACHTransferReturn.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this ACHTransferReturn.

        The identifier of the Tranasaction associated with this return.

        :param transaction_id: The transaction_id of this ACHTransferReturn.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def transfer_id(self):
        """Gets the transfer_id of this ACHTransferReturn.

        The identifier of the ACH Transfer associated with this return.

        :return: The transfer_id of this ACHTransferReturn.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this ACHTransferReturn.

        The identifier of the ACH Transfer associated with this return.

        :param transfer_id: The transfer_id of this ACHTransferReturn.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
