# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_deposit_acceptance import CheckDepositAcceptance
from openapi_server.models.check_deposit_rejection import CheckDepositRejection
from openapi_server.models.check_deposit_return import CheckDepositReturn
from openapi_server import util


class CheckDeposit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, back_image_file_id: str=None, created_at: datetime=None, currency: str=None, deposit_acceptance: CheckDepositAcceptance=None, deposit_rejection: CheckDepositRejection=None, deposit_return: CheckDepositReturn=None, front_image_file_id: str=None, id: str=None, status: str=None, transaction_id: str=None, type: str=None):
        """CheckDeposit - a model defined in OpenAPI

        :param account_id: The account_id of this CheckDeposit.
        :param amount: The amount of this CheckDeposit.
        :param back_image_file_id: The back_image_file_id of this CheckDeposit.
        :param created_at: The created_at of this CheckDeposit.
        :param currency: The currency of this CheckDeposit.
        :param deposit_acceptance: The deposit_acceptance of this CheckDeposit.
        :param deposit_rejection: The deposit_rejection of this CheckDeposit.
        :param deposit_return: The deposit_return of this CheckDeposit.
        :param front_image_file_id: The front_image_file_id of this CheckDeposit.
        :param id: The id of this CheckDeposit.
        :param status: The status of this CheckDeposit.
        :param transaction_id: The transaction_id of this CheckDeposit.
        :param type: The type of this CheckDeposit.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'back_image_file_id': str,
            'created_at': datetime,
            'currency': str,
            'deposit_acceptance': CheckDepositAcceptance,
            'deposit_rejection': CheckDepositRejection,
            'deposit_return': CheckDepositReturn,
            'front_image_file_id': str,
            'id': str,
            'status': str,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'back_image_file_id': 'back_image_file_id',
            'created_at': 'created_at',
            'currency': 'currency',
            'deposit_acceptance': 'deposit_acceptance',
            'deposit_rejection': 'deposit_rejection',
            'deposit_return': 'deposit_return',
            'front_image_file_id': 'front_image_file_id',
            'id': 'id',
            'status': 'status',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._amount = amount
        self._back_image_file_id = back_image_file_id
        self._created_at = created_at
        self._currency = currency
        self._deposit_acceptance = deposit_acceptance
        self._deposit_rejection = deposit_rejection
        self._deposit_return = deposit_return
        self._front_image_file_id = front_image_file_id
        self._id = id
        self._status = status
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDeposit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check_deposit of this CheckDeposit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CheckDeposit.

        The Account the check was deposited into.

        :return: The account_id of this CheckDeposit.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CheckDeposit.

        The Account the check was deposited into.

        :param account_id: The account_id of this CheckDeposit.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this CheckDeposit.

        The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :return: The amount of this CheckDeposit.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckDeposit.

        The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :param amount: The amount of this CheckDeposit.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def back_image_file_id(self):
        """Gets the back_image_file_id of this CheckDeposit.

        The ID for the File containing the image of the back of the check.

        :return: The back_image_file_id of this CheckDeposit.
        :rtype: str
        """
        return self._back_image_file_id

    @back_image_file_id.setter
    def back_image_file_id(self, back_image_file_id):
        """Sets the back_image_file_id of this CheckDeposit.

        The ID for the File containing the image of the back of the check.

        :param back_image_file_id: The back_image_file_id of this CheckDeposit.
        :type back_image_file_id: str
        """
        if back_image_file_id is None:
            raise ValueError("Invalid value for `back_image_file_id`, must not be `None`")

        self._back_image_file_id = back_image_file_id

    @property
    def created_at(self):
        """Gets the created_at of this CheckDeposit.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this CheckDeposit.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CheckDeposit.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this CheckDeposit.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this CheckDeposit.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.

        :return: The currency of this CheckDeposit.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckDeposit.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.

        :param currency: The currency of this CheckDeposit.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def deposit_acceptance(self):
        """Gets the deposit_acceptance of this CheckDeposit.


        :return: The deposit_acceptance of this CheckDeposit.
        :rtype: CheckDepositAcceptance
        """
        return self._deposit_acceptance

    @deposit_acceptance.setter
    def deposit_acceptance(self, deposit_acceptance):
        """Sets the deposit_acceptance of this CheckDeposit.


        :param deposit_acceptance: The deposit_acceptance of this CheckDeposit.
        :type deposit_acceptance: CheckDepositAcceptance
        """
        if deposit_acceptance is None:
            raise ValueError("Invalid value for `deposit_acceptance`, must not be `None`")

        self._deposit_acceptance = deposit_acceptance

    @property
    def deposit_rejection(self):
        """Gets the deposit_rejection of this CheckDeposit.


        :return: The deposit_rejection of this CheckDeposit.
        :rtype: CheckDepositRejection
        """
        return self._deposit_rejection

    @deposit_rejection.setter
    def deposit_rejection(self, deposit_rejection):
        """Sets the deposit_rejection of this CheckDeposit.


        :param deposit_rejection: The deposit_rejection of this CheckDeposit.
        :type deposit_rejection: CheckDepositRejection
        """
        if deposit_rejection is None:
            raise ValueError("Invalid value for `deposit_rejection`, must not be `None`")

        self._deposit_rejection = deposit_rejection

    @property
    def deposit_return(self):
        """Gets the deposit_return of this CheckDeposit.


        :return: The deposit_return of this CheckDeposit.
        :rtype: CheckDepositReturn
        """
        return self._deposit_return

    @deposit_return.setter
    def deposit_return(self, deposit_return):
        """Sets the deposit_return of this CheckDeposit.


        :param deposit_return: The deposit_return of this CheckDeposit.
        :type deposit_return: CheckDepositReturn
        """
        if deposit_return is None:
            raise ValueError("Invalid value for `deposit_return`, must not be `None`")

        self._deposit_return = deposit_return

    @property
    def front_image_file_id(self):
        """Gets the front_image_file_id of this CheckDeposit.

        The ID for the File containing the image of the front of the check.

        :return: The front_image_file_id of this CheckDeposit.
        :rtype: str
        """
        return self._front_image_file_id

    @front_image_file_id.setter
    def front_image_file_id(self, front_image_file_id):
        """Sets the front_image_file_id of this CheckDeposit.

        The ID for the File containing the image of the front of the check.

        :param front_image_file_id: The front_image_file_id of this CheckDeposit.
        :type front_image_file_id: str
        """
        if front_image_file_id is None:
            raise ValueError("Invalid value for `front_image_file_id`, must not be `None`")

        self._front_image_file_id = front_image_file_id

    @property
    def id(self):
        """Gets the id of this CheckDeposit.

        The deposit's identifier.

        :return: The id of this CheckDeposit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckDeposit.

        The deposit's identifier.

        :param id: The id of this CheckDeposit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this CheckDeposit.

        The status of the Check Deposit.

        :return: The status of this CheckDeposit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckDeposit.

        The status of the Check Deposit.

        :param status: The status of this CheckDeposit.
        :type status: str
        """
        allowed_values = ["pending", "submitted", "rejected", "returned"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CheckDeposit.

        The ID for the Transaction created by the deposit.

        :return: The transaction_id of this CheckDeposit.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CheckDeposit.

        The ID for the Transaction created by the deposit.

        :param transaction_id: The transaction_id of this CheckDeposit.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this CheckDeposit.

        A constant representing the object's type. For this resource it will always be `check_deposit`.

        :return: The type of this CheckDeposit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckDeposit.

        A constant representing the object's type. For this resource it will always be `check_deposit`.

        :param type: The type of this CheckDeposit.
        :type type: str
        """
        allowed_values = ["check_deposit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
