# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnExternalAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, description: str=None, funding: str=None, routing_number: str=None):
        """CreateAnExternalAccountParameters - a model defined in OpenAPI

        :param account_number: The account_number of this CreateAnExternalAccountParameters.
        :param description: The description of this CreateAnExternalAccountParameters.
        :param funding: The funding of this CreateAnExternalAccountParameters.
        :param routing_number: The routing_number of this CreateAnExternalAccountParameters.
        """
        self.openapi_types = {
            'account_number': str,
            'description': str,
            'funding': str,
            'routing_number': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'description': 'description',
            'funding': 'funding',
            'routing_number': 'routing_number'
        }

        self._account_number = account_number
        self._description = description
        self._funding = funding
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnExternalAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_external_account_parameters of this CreateAnExternalAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CreateAnExternalAccountParameters.

        The account number for the destination account.

        :return: The account_number of this CreateAnExternalAccountParameters.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAnExternalAccountParameters.

        The account number for the destination account.

        :param account_number: The account_number of this CreateAnExternalAccountParameters.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def description(self):
        """Gets the description of this CreateAnExternalAccountParameters.

        The name you choose for the Account.

        :return: The description of this CreateAnExternalAccountParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnExternalAccountParameters.

        The name you choose for the Account.

        :param description: The description of this CreateAnExternalAccountParameters.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this CreateAnExternalAccountParameters.

        The type of the destination account. Defaults to `checking`.

        :return: The funding of this CreateAnExternalAccountParameters.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this CreateAnExternalAccountParameters.

        The type of the destination account. Defaults to `checking`.

        :param funding: The funding of this CreateAnExternalAccountParameters.
        :type funding: str
        """
        allowed_values = ["checking", "savings", "other"]  # noqa: E501
        if funding not in allowed_values:
            raise ValueError(
                "Invalid value for `funding` ({0}), must be one of {1}"
                .format(funding, allowed_values)
            )

        self._funding = funding

    @property
    def routing_number(self):
        """Gets the routing_number of this CreateAnExternalAccountParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :return: The routing_number of this CreateAnExternalAccountParameters.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreateAnExternalAccountParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :param routing_number: The routing_number of this CreateAnExternalAccountParameters.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number
