# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundDigitalWalletTokenRequestSimulationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decline_reason: str=None, digital_wallet_token_id: str=None, type: str=None):
        """InboundDigitalWalletTokenRequestSimulationResult - a model defined in OpenAPI

        :param decline_reason: The decline_reason of this InboundDigitalWalletTokenRequestSimulationResult.
        :param digital_wallet_token_id: The digital_wallet_token_id of this InboundDigitalWalletTokenRequestSimulationResult.
        :param type: The type of this InboundDigitalWalletTokenRequestSimulationResult.
        """
        self.openapi_types = {
            'decline_reason': str,
            'digital_wallet_token_id': str,
            'type': str
        }

        self.attribute_map = {
            'decline_reason': 'decline_reason',
            'digital_wallet_token_id': 'digital_wallet_token_id',
            'type': 'type'
        }

        self._decline_reason = decline_reason
        self._digital_wallet_token_id = digital_wallet_token_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundDigitalWalletTokenRequestSimulationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inbound_digital_wallet_token_request_simulation_result of this InboundDigitalWalletTokenRequestSimulationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decline_reason(self):
        """Gets the decline_reason of this InboundDigitalWalletTokenRequestSimulationResult.

        If the simulated tokenization attempt was declined, this field contains details as to why.

        :return: The decline_reason of this InboundDigitalWalletTokenRequestSimulationResult.
        :rtype: str
        """
        return self._decline_reason

    @decline_reason.setter
    def decline_reason(self, decline_reason):
        """Sets the decline_reason of this InboundDigitalWalletTokenRequestSimulationResult.

        If the simulated tokenization attempt was declined, this field contains details as to why.

        :param decline_reason: The decline_reason of this InboundDigitalWalletTokenRequestSimulationResult.
        :type decline_reason: str
        """
        allowed_values = [None,"card_not_active", "no_verification_method", "webhook_timed_out", "webhook_declined"]  # noqa: E501
        if decline_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `decline_reason` ({0}), must be one of {1}"
                .format(decline_reason, allowed_values)
            )

        self._decline_reason = decline_reason

    @property
    def digital_wallet_token_id(self):
        """Gets the digital_wallet_token_id of this InboundDigitalWalletTokenRequestSimulationResult.

        If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.

        :return: The digital_wallet_token_id of this InboundDigitalWalletTokenRequestSimulationResult.
        :rtype: str
        """
        return self._digital_wallet_token_id

    @digital_wallet_token_id.setter
    def digital_wallet_token_id(self, digital_wallet_token_id):
        """Sets the digital_wallet_token_id of this InboundDigitalWalletTokenRequestSimulationResult.

        If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.

        :param digital_wallet_token_id: The digital_wallet_token_id of this InboundDigitalWalletTokenRequestSimulationResult.
        :type digital_wallet_token_id: str
        """
        if digital_wallet_token_id is None:
            raise ValueError("Invalid value for `digital_wallet_token_id`, must not be `None`")

        self._digital_wallet_token_id = digital_wallet_token_id

    @property
    def type(self):
        """Gets the type of this InboundDigitalWalletTokenRequestSimulationResult.

        A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.

        :return: The type of this InboundDigitalWalletTokenRequestSimulationResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InboundDigitalWalletTokenRequestSimulationResult.

        A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.

        :param type: The type of this InboundDigitalWalletTokenRequestSimulationResult.
        :type type: str
        """
        allowed_values = ["inbound_digital_wallet_token_request_simulation_result"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
