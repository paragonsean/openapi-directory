# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_notification_of_change import ACHNotificationOfChange
from openapi_server.models.ach_transfer_return import ACHTransferReturn
from openapi_server.models.ach_transfer_submission import ACHTransferSubmission
from openapi_server.models.transfer_approval import TransferApproval
from openapi_server.models.transfer_cancellation import TransferCancellation
from openapi_server import util


class AchTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_number: str=None, addendum: str=None, amount: int=None, approval: TransferApproval=None, cancellation: TransferCancellation=None, company_descriptive_date: str=None, company_discretionary_data: str=None, company_entry_description: str=None, company_name: str=None, created_at: datetime=None, currency: str=None, effective_date: date=None, external_account_id: str=None, funding: str=None, id: str=None, individual_id: str=None, individual_name: str=None, network: str=None, notifications_of_change: List[ACHNotificationOfChange]=None, _return: ACHTransferReturn=None, routing_number: str=None, standard_entry_class_code: str=None, statement_descriptor: str=None, status: str=None, submission: ACHTransferSubmission=None, transaction_id: str=None, type: str=None):
        """AchTransfer - a model defined in OpenAPI

        :param account_id: The account_id of this AchTransfer.
        :param account_number: The account_number of this AchTransfer.
        :param addendum: The addendum of this AchTransfer.
        :param amount: The amount of this AchTransfer.
        :param approval: The approval of this AchTransfer.
        :param cancellation: The cancellation of this AchTransfer.
        :param company_descriptive_date: The company_descriptive_date of this AchTransfer.
        :param company_discretionary_data: The company_discretionary_data of this AchTransfer.
        :param company_entry_description: The company_entry_description of this AchTransfer.
        :param company_name: The company_name of this AchTransfer.
        :param created_at: The created_at of this AchTransfer.
        :param currency: The currency of this AchTransfer.
        :param effective_date: The effective_date of this AchTransfer.
        :param external_account_id: The external_account_id of this AchTransfer.
        :param funding: The funding of this AchTransfer.
        :param id: The id of this AchTransfer.
        :param individual_id: The individual_id of this AchTransfer.
        :param individual_name: The individual_name of this AchTransfer.
        :param network: The network of this AchTransfer.
        :param notifications_of_change: The notifications_of_change of this AchTransfer.
        :param _return: The _return of this AchTransfer.
        :param routing_number: The routing_number of this AchTransfer.
        :param standard_entry_class_code: The standard_entry_class_code of this AchTransfer.
        :param statement_descriptor: The statement_descriptor of this AchTransfer.
        :param status: The status of this AchTransfer.
        :param submission: The submission of this AchTransfer.
        :param transaction_id: The transaction_id of this AchTransfer.
        :param type: The type of this AchTransfer.
        """
        self.openapi_types = {
            'account_id': str,
            'account_number': str,
            'addendum': str,
            'amount': int,
            'approval': TransferApproval,
            'cancellation': TransferCancellation,
            'company_descriptive_date': str,
            'company_discretionary_data': str,
            'company_entry_description': str,
            'company_name': str,
            'created_at': datetime,
            'currency': str,
            'effective_date': date,
            'external_account_id': str,
            'funding': str,
            'id': str,
            'individual_id': str,
            'individual_name': str,
            'network': str,
            'notifications_of_change': List[ACHNotificationOfChange],
            '_return': ACHTransferReturn,
            'routing_number': str,
            'standard_entry_class_code': str,
            'statement_descriptor': str,
            'status': str,
            'submission': ACHTransferSubmission,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'account_number': 'account_number',
            'addendum': 'addendum',
            'amount': 'amount',
            'approval': 'approval',
            'cancellation': 'cancellation',
            'company_descriptive_date': 'company_descriptive_date',
            'company_discretionary_data': 'company_discretionary_data',
            'company_entry_description': 'company_entry_description',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'currency': 'currency',
            'effective_date': 'effective_date',
            'external_account_id': 'external_account_id',
            'funding': 'funding',
            'id': 'id',
            'individual_id': 'individual_id',
            'individual_name': 'individual_name',
            'network': 'network',
            'notifications_of_change': 'notifications_of_change',
            '_return': 'return',
            'routing_number': 'routing_number',
            'standard_entry_class_code': 'standard_entry_class_code',
            'statement_descriptor': 'statement_descriptor',
            'status': 'status',
            'submission': 'submission',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._account_number = account_number
        self._addendum = addendum
        self._amount = amount
        self._approval = approval
        self._cancellation = cancellation
        self._company_descriptive_date = company_descriptive_date
        self._company_discretionary_data = company_discretionary_data
        self._company_entry_description = company_entry_description
        self._company_name = company_name
        self._created_at = created_at
        self._currency = currency
        self._effective_date = effective_date
        self._external_account_id = external_account_id
        self._funding = funding
        self._id = id
        self._individual_id = individual_id
        self._individual_name = individual_name
        self._network = network
        self._notifications_of_change = notifications_of_change
        self.__return = _return
        self._routing_number = routing_number
        self._standard_entry_class_code = standard_entry_class_code
        self._statement_descriptor = statement_descriptor
        self._status = status
        self._submission = submission
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ach_transfer of this AchTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AchTransfer.

        The Account to which the transfer belongs.

        :return: The account_id of this AchTransfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AchTransfer.

        The Account to which the transfer belongs.

        :param account_id: The account_id of this AchTransfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this AchTransfer.

        The destination account number.

        :return: The account_number of this AchTransfer.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AchTransfer.

        The destination account number.

        :param account_number: The account_number of this AchTransfer.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def addendum(self):
        """Gets the addendum of this AchTransfer.

        Additional information that will be sent to the recipient.

        :return: The addendum of this AchTransfer.
        :rtype: str
        """
        return self._addendum

    @addendum.setter
    def addendum(self, addendum):
        """Sets the addendum of this AchTransfer.

        Additional information that will be sent to the recipient.

        :param addendum: The addendum of this AchTransfer.
        :type addendum: str
        """
        if addendum is None:
            raise ValueError("Invalid value for `addendum`, must not be `None`")

        self._addendum = addendum

    @property
    def amount(self):
        """Gets the amount of this AchTransfer.

        The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.

        :return: The amount of this AchTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AchTransfer.

        The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.

        :param amount: The amount of this AchTransfer.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this AchTransfer.


        :return: The approval of this AchTransfer.
        :rtype: TransferApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this AchTransfer.


        :param approval: The approval of this AchTransfer.
        :type approval: TransferApproval
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")

        self._approval = approval

    @property
    def cancellation(self):
        """Gets the cancellation of this AchTransfer.


        :return: The cancellation of this AchTransfer.
        :rtype: TransferCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this AchTransfer.


        :param cancellation: The cancellation of this AchTransfer.
        :type cancellation: TransferCancellation
        """
        if cancellation is None:
            raise ValueError("Invalid value for `cancellation`, must not be `None`")

        self._cancellation = cancellation

    @property
    def company_descriptive_date(self):
        """Gets the company_descriptive_date of this AchTransfer.

        The description of the date of the transfer.

        :return: The company_descriptive_date of this AchTransfer.
        :rtype: str
        """
        return self._company_descriptive_date

    @company_descriptive_date.setter
    def company_descriptive_date(self, company_descriptive_date):
        """Sets the company_descriptive_date of this AchTransfer.

        The description of the date of the transfer.

        :param company_descriptive_date: The company_descriptive_date of this AchTransfer.
        :type company_descriptive_date: str
        """
        if company_descriptive_date is None:
            raise ValueError("Invalid value for `company_descriptive_date`, must not be `None`")

        self._company_descriptive_date = company_descriptive_date

    @property
    def company_discretionary_data(self):
        """Gets the company_discretionary_data of this AchTransfer.

        The data you chose to associate with the transfer.

        :return: The company_discretionary_data of this AchTransfer.
        :rtype: str
        """
        return self._company_discretionary_data

    @company_discretionary_data.setter
    def company_discretionary_data(self, company_discretionary_data):
        """Sets the company_discretionary_data of this AchTransfer.

        The data you chose to associate with the transfer.

        :param company_discretionary_data: The company_discretionary_data of this AchTransfer.
        :type company_discretionary_data: str
        """
        if company_discretionary_data is None:
            raise ValueError("Invalid value for `company_discretionary_data`, must not be `None`")

        self._company_discretionary_data = company_discretionary_data

    @property
    def company_entry_description(self):
        """Gets the company_entry_description of this AchTransfer.

        The description of the transfer you set to be shown to the recipient.

        :return: The company_entry_description of this AchTransfer.
        :rtype: str
        """
        return self._company_entry_description

    @company_entry_description.setter
    def company_entry_description(self, company_entry_description):
        """Sets the company_entry_description of this AchTransfer.

        The description of the transfer you set to be shown to the recipient.

        :param company_entry_description: The company_entry_description of this AchTransfer.
        :type company_entry_description: str
        """
        if company_entry_description is None:
            raise ValueError("Invalid value for `company_entry_description`, must not be `None`")

        self._company_entry_description = company_entry_description

    @property
    def company_name(self):
        """Gets the company_name of this AchTransfer.

        The name by which the recipient knows you.

        :return: The company_name of this AchTransfer.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AchTransfer.

        The name by which the recipient knows you.

        :param company_name: The company_name of this AchTransfer.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this AchTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this AchTransfer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AchTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this AchTransfer.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this AchTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.

        :return: The currency of this AchTransfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AchTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.

        :param currency: The currency of this AchTransfer.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def effective_date(self):
        """Gets the effective_date of this AchTransfer.

        The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The effective_date of this AchTransfer.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this AchTransfer.

        The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param effective_date: The effective_date of this AchTransfer.
        :type effective_date: date
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")

        self._effective_date = effective_date

    @property
    def external_account_id(self):
        """Gets the external_account_id of this AchTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :return: The external_account_id of this AchTransfer.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this AchTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :param external_account_id: The external_account_id of this AchTransfer.
        :type external_account_id: str
        """
        if external_account_id is None:
            raise ValueError("Invalid value for `external_account_id`, must not be `None`")

        self._external_account_id = external_account_id

    @property
    def funding(self):
        """Gets the funding of this AchTransfer.

        The type of the account to which the transfer will be sent.

        :return: The funding of this AchTransfer.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this AchTransfer.

        The type of the account to which the transfer will be sent.

        :param funding: The funding of this AchTransfer.
        :type funding: str
        """
        allowed_values = ["checking", "savings"]  # noqa: E501
        if funding not in allowed_values:
            raise ValueError(
                "Invalid value for `funding` ({0}), must be one of {1}"
                .format(funding, allowed_values)
            )

        self._funding = funding

    @property
    def id(self):
        """Gets the id of this AchTransfer.

        The ACH transfer's identifier.

        :return: The id of this AchTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AchTransfer.

        The ACH transfer's identifier.

        :param id: The id of this AchTransfer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def individual_id(self):
        """Gets the individual_id of this AchTransfer.

        Your identifer for the transfer recipient.

        :return: The individual_id of this AchTransfer.
        :rtype: str
        """
        return self._individual_id

    @individual_id.setter
    def individual_id(self, individual_id):
        """Sets the individual_id of this AchTransfer.

        Your identifer for the transfer recipient.

        :param individual_id: The individual_id of this AchTransfer.
        :type individual_id: str
        """
        if individual_id is None:
            raise ValueError("Invalid value for `individual_id`, must not be `None`")

        self._individual_id = individual_id

    @property
    def individual_name(self):
        """Gets the individual_name of this AchTransfer.

        The name of the transfer recipient. This value is information and not verified by the recipient's bank.

        :return: The individual_name of this AchTransfer.
        :rtype: str
        """
        return self._individual_name

    @individual_name.setter
    def individual_name(self, individual_name):
        """Sets the individual_name of this AchTransfer.

        The name of the transfer recipient. This value is information and not verified by the recipient's bank.

        :param individual_name: The individual_name of this AchTransfer.
        :type individual_name: str
        """
        if individual_name is None:
            raise ValueError("Invalid value for `individual_name`, must not be `None`")

        self._individual_name = individual_name

    @property
    def network(self):
        """Gets the network of this AchTransfer.

        The transfer's network.

        :return: The network of this AchTransfer.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AchTransfer.

        The transfer's network.

        :param network: The network of this AchTransfer.
        :type network: str
        """
        allowed_values = ["ach"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def notifications_of_change(self):
        """Gets the notifications_of_change of this AchTransfer.

        If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.

        :return: The notifications_of_change of this AchTransfer.
        :rtype: List[ACHNotificationOfChange]
        """
        return self._notifications_of_change

    @notifications_of_change.setter
    def notifications_of_change(self, notifications_of_change):
        """Sets the notifications_of_change of this AchTransfer.

        If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.

        :param notifications_of_change: The notifications_of_change of this AchTransfer.
        :type notifications_of_change: List[ACHNotificationOfChange]
        """
        if notifications_of_change is None:
            raise ValueError("Invalid value for `notifications_of_change`, must not be `None`")

        self._notifications_of_change = notifications_of_change

    @property
    def _return(self):
        """Gets the _return of this AchTransfer.


        :return: The _return of this AchTransfer.
        :rtype: ACHTransferReturn
        """
        return self.__return

    @_return.setter
    def _return(self, _return):
        """Sets the _return of this AchTransfer.


        :param _return: The _return of this AchTransfer.
        :type _return: ACHTransferReturn
        """
        if _return is None:
            raise ValueError("Invalid value for `_return`, must not be `None`")

        self.__return = _return

    @property
    def routing_number(self):
        """Gets the routing_number of this AchTransfer.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The routing_number of this AchTransfer.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this AchTransfer.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param routing_number: The routing_number of this AchTransfer.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def standard_entry_class_code(self):
        """Gets the standard_entry_class_code of this AchTransfer.

        The Standard Entry Class (SEC) code to use for the transfer.

        :return: The standard_entry_class_code of this AchTransfer.
        :rtype: str
        """
        return self._standard_entry_class_code

    @standard_entry_class_code.setter
    def standard_entry_class_code(self, standard_entry_class_code):
        """Sets the standard_entry_class_code of this AchTransfer.

        The Standard Entry Class (SEC) code to use for the transfer.

        :param standard_entry_class_code: The standard_entry_class_code of this AchTransfer.
        :type standard_entry_class_code: str
        """
        allowed_values = ["corporate_credit_or_debit", "prearranged_payments_and_deposit", "internet_initiated"]  # noqa: E501
        if standard_entry_class_code not in allowed_values:
            raise ValueError(
                "Invalid value for `standard_entry_class_code` ({0}), must be one of {1}"
                .format(standard_entry_class_code, allowed_values)
            )

        self._standard_entry_class_code = standard_entry_class_code

    @property
    def statement_descriptor(self):
        """Gets the statement_descriptor of this AchTransfer.

        The descriptor that will show on the recipient's bank statement.

        :return: The statement_descriptor of this AchTransfer.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """Sets the statement_descriptor of this AchTransfer.

        The descriptor that will show on the recipient's bank statement.

        :param statement_descriptor: The statement_descriptor of this AchTransfer.
        :type statement_descriptor: str
        """
        if statement_descriptor is None:
            raise ValueError("Invalid value for `statement_descriptor`, must not be `None`")

        self._statement_descriptor = statement_descriptor

    @property
    def status(self):
        """Gets the status of this AchTransfer.

        The lifecycle status of the transfer.

        :return: The status of this AchTransfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AchTransfer.

        The lifecycle status of the transfer.

        :param status: The status of this AchTransfer.
        :type status: str
        """
        allowed_values = ["pending_approval", "canceled", "pending_reviewing", "pending_submission", "submitted", "returned", "requires_attention", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this AchTransfer.


        :return: The submission of this AchTransfer.
        :rtype: ACHTransferSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this AchTransfer.


        :param submission: The submission of this AchTransfer.
        :type submission: ACHTransferSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AchTransfer.

        The ID for the transaction funding the transfer.

        :return: The transaction_id of this AchTransfer.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AchTransfer.

        The ID for the transaction funding the transfer.

        :param transaction_id: The transaction_id of this AchTransfer.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this AchTransfer.

        A constant representing the object's type. For this resource it will always be `ach_transfer`.

        :return: The type of this AchTransfer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AchTransfer.

        A constant representing the object's type. For this resource it will always be `ach_transfer`.

        :param type: The type of this AchTransfer.
        :type type: str
        """
        allowed_values = ["ach_transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
