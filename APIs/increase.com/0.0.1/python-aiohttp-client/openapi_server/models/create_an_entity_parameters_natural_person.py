# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_an_entity_parameters_corporation_beneficial_owners_inner_individual_address import CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualAddress
from openapi_server.models.create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification import CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification
from openapi_server import util


class CreateAnEntityParametersNaturalPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualAddress=None, confirmed_no_us_tax_id: bool=None, date_of_birth: date=None, identification: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification=None, name: str=None):
        """CreateAnEntityParametersNaturalPerson - a model defined in OpenAPI

        :param address: The address of this CreateAnEntityParametersNaturalPerson.
        :param confirmed_no_us_tax_id: The confirmed_no_us_tax_id of this CreateAnEntityParametersNaturalPerson.
        :param date_of_birth: The date_of_birth of this CreateAnEntityParametersNaturalPerson.
        :param identification: The identification of this CreateAnEntityParametersNaturalPerson.
        :param name: The name of this CreateAnEntityParametersNaturalPerson.
        """
        self.openapi_types = {
            'address': CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualAddress,
            'confirmed_no_us_tax_id': bool,
            'date_of_birth': date,
            'identification': CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification,
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'confirmed_no_us_tax_id': 'confirmed_no_us_tax_id',
            'date_of_birth': 'date_of_birth',
            'identification': 'identification',
            'name': 'name'
        }

        self._address = address
        self._confirmed_no_us_tax_id = confirmed_no_us_tax_id
        self._date_of_birth = date_of_birth
        self._identification = identification
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersNaturalPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_natural_person of this CreateAnEntityParametersNaturalPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CreateAnEntityParametersNaturalPerson.


        :return: The address of this CreateAnEntityParametersNaturalPerson.
        :rtype: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateAnEntityParametersNaturalPerson.


        :param address: The address of this CreateAnEntityParametersNaturalPerson.
        :type address: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def confirmed_no_us_tax_id(self):
        """Gets the confirmed_no_us_tax_id of this CreateAnEntityParametersNaturalPerson.

        The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).

        :return: The confirmed_no_us_tax_id of this CreateAnEntityParametersNaturalPerson.
        :rtype: bool
        """
        return self._confirmed_no_us_tax_id

    @confirmed_no_us_tax_id.setter
    def confirmed_no_us_tax_id(self, confirmed_no_us_tax_id):
        """Sets the confirmed_no_us_tax_id of this CreateAnEntityParametersNaturalPerson.

        The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).

        :param confirmed_no_us_tax_id: The confirmed_no_us_tax_id of this CreateAnEntityParametersNaturalPerson.
        :type confirmed_no_us_tax_id: bool
        """

        self._confirmed_no_us_tax_id = confirmed_no_us_tax_id

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CreateAnEntityParametersNaturalPerson.

        The person's date of birth in YYYY-MM-DD format.

        :return: The date_of_birth of this CreateAnEntityParametersNaturalPerson.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CreateAnEntityParametersNaturalPerson.

        The person's date of birth in YYYY-MM-DD format.

        :param date_of_birth: The date_of_birth of this CreateAnEntityParametersNaturalPerson.
        :type date_of_birth: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def identification(self):
        """Gets the identification of this CreateAnEntityParametersNaturalPerson.


        :return: The identification of this CreateAnEntityParametersNaturalPerson.
        :rtype: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CreateAnEntityParametersNaturalPerson.


        :param identification: The identification of this CreateAnEntityParametersNaturalPerson.
        :type identification: CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentification
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this CreateAnEntityParametersNaturalPerson.

        The person's legal name.

        :return: The name of this CreateAnEntityParametersNaturalPerson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnEntityParametersNaturalPerson.

        The person's legal name.

        :param name: The name of this CreateAnEntityParametersNaturalPerson.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
