# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateARealTimePaymentsTransferParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, creditor_name: str=None, destination_account_number: str=None, destination_routing_number: str=None, external_account_id: str=None, remittance_information: str=None, require_approval: bool=None, source_account_number_id: str=None):
        """CreateARealTimePaymentsTransferParameters - a model defined in OpenAPI

        :param amount: The amount of this CreateARealTimePaymentsTransferParameters.
        :param creditor_name: The creditor_name of this CreateARealTimePaymentsTransferParameters.
        :param destination_account_number: The destination_account_number of this CreateARealTimePaymentsTransferParameters.
        :param destination_routing_number: The destination_routing_number of this CreateARealTimePaymentsTransferParameters.
        :param external_account_id: The external_account_id of this CreateARealTimePaymentsTransferParameters.
        :param remittance_information: The remittance_information of this CreateARealTimePaymentsTransferParameters.
        :param require_approval: The require_approval of this CreateARealTimePaymentsTransferParameters.
        :param source_account_number_id: The source_account_number_id of this CreateARealTimePaymentsTransferParameters.
        """
        self.openapi_types = {
            'amount': int,
            'creditor_name': str,
            'destination_account_number': str,
            'destination_routing_number': str,
            'external_account_id': str,
            'remittance_information': str,
            'require_approval': bool,
            'source_account_number_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'creditor_name': 'creditor_name',
            'destination_account_number': 'destination_account_number',
            'destination_routing_number': 'destination_routing_number',
            'external_account_id': 'external_account_id',
            'remittance_information': 'remittance_information',
            'require_approval': 'require_approval',
            'source_account_number_id': 'source_account_number_id'
        }

        self._amount = amount
        self._creditor_name = creditor_name
        self._destination_account_number = destination_account_number
        self._destination_routing_number = destination_routing_number
        self._external_account_id = external_account_id
        self._remittance_information = remittance_information
        self._require_approval = require_approval
        self._source_account_number_id = source_account_number_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateARealTimePaymentsTransferParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_real_time_payments_transfer_parameters of this CreateARealTimePaymentsTransferParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CreateARealTimePaymentsTransferParameters.

        The transfer amount in USD cents. For Real Time Payments transfers, must be positive.

        :return: The amount of this CreateARealTimePaymentsTransferParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateARealTimePaymentsTransferParameters.

        The transfer amount in USD cents. For Real Time Payments transfers, must be positive.

        :param amount: The amount of this CreateARealTimePaymentsTransferParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def creditor_name(self):
        """Gets the creditor_name of this CreateARealTimePaymentsTransferParameters.

        The name of the transfer's recipient.

        :return: The creditor_name of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this CreateARealTimePaymentsTransferParameters.

        The name of the transfer's recipient.

        :param creditor_name: The creditor_name of this CreateARealTimePaymentsTransferParameters.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")
        if creditor_name is not None and len(creditor_name) > 140:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `140`")
        if creditor_name is not None and len(creditor_name) < 1:
            raise ValueError("Invalid value for `creditor_name`, length must be greater than or equal to `1`")

        self._creditor_name = creditor_name

    @property
    def destination_account_number(self):
        """Gets the destination_account_number of this CreateARealTimePaymentsTransferParameters.

        The destination account number.

        :return: The destination_account_number of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._destination_account_number

    @destination_account_number.setter
    def destination_account_number(self, destination_account_number):
        """Sets the destination_account_number of this CreateARealTimePaymentsTransferParameters.

        The destination account number.

        :param destination_account_number: The destination_account_number of this CreateARealTimePaymentsTransferParameters.
        :type destination_account_number: str
        """
        if destination_account_number is not None and len(destination_account_number) > 34:
            raise ValueError("Invalid value for `destination_account_number`, length must be less than or equal to `34`")
        if destination_account_number is not None and len(destination_account_number) < 1:
            raise ValueError("Invalid value for `destination_account_number`, length must be greater than or equal to `1`")

        self._destination_account_number = destination_account_number

    @property
    def destination_routing_number(self):
        """Gets the destination_routing_number of this CreateARealTimePaymentsTransferParameters.

        The destination American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The destination_routing_number of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._destination_routing_number

    @destination_routing_number.setter
    def destination_routing_number(self, destination_routing_number):
        """Sets the destination_routing_number of this CreateARealTimePaymentsTransferParameters.

        The destination American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param destination_routing_number: The destination_routing_number of this CreateARealTimePaymentsTransferParameters.
        :type destination_routing_number: str
        """
        if destination_routing_number is not None and len(destination_routing_number) > 9:
            raise ValueError("Invalid value for `destination_routing_number`, length must be less than or equal to `9`")
        if destination_routing_number is not None and len(destination_routing_number) < 9:
            raise ValueError("Invalid value for `destination_routing_number`, length must be greater than or equal to `9`")

        self._destination_routing_number = destination_routing_number

    @property
    def external_account_id(self):
        """Gets the external_account_id of this CreateARealTimePaymentsTransferParameters.

        The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent.

        :return: The external_account_id of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this CreateARealTimePaymentsTransferParameters.

        The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent.

        :param external_account_id: The external_account_id of this CreateARealTimePaymentsTransferParameters.
        :type external_account_id: str
        """

        self._external_account_id = external_account_id

    @property
    def remittance_information(self):
        """Gets the remittance_information of this CreateARealTimePaymentsTransferParameters.

        Unstructured information that will show on the recipient's bank statement.

        :return: The remittance_information of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this CreateARealTimePaymentsTransferParameters.

        Unstructured information that will show on the recipient's bank statement.

        :param remittance_information: The remittance_information of this CreateARealTimePaymentsTransferParameters.
        :type remittance_information: str
        """
        if remittance_information is None:
            raise ValueError("Invalid value for `remittance_information`, must not be `None`")
        if remittance_information is not None and len(remittance_information) > 140:
            raise ValueError("Invalid value for `remittance_information`, length must be less than or equal to `140`")
        if remittance_information is not None and len(remittance_information) < 1:
            raise ValueError("Invalid value for `remittance_information`, length must be greater than or equal to `1`")

        self._remittance_information = remittance_information

    @property
    def require_approval(self):
        """Gets the require_approval of this CreateARealTimePaymentsTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :return: The require_approval of this CreateARealTimePaymentsTransferParameters.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval):
        """Sets the require_approval of this CreateARealTimePaymentsTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :param require_approval: The require_approval of this CreateARealTimePaymentsTransferParameters.
        :type require_approval: bool
        """

        self._require_approval = require_approval

    @property
    def source_account_number_id(self):
        """Gets the source_account_number_id of this CreateARealTimePaymentsTransferParameters.

        The identifier of the Account Number from which to send the transfer.

        :return: The source_account_number_id of this CreateARealTimePaymentsTransferParameters.
        :rtype: str
        """
        return self._source_account_number_id

    @source_account_number_id.setter
    def source_account_number_id(self, source_account_number_id):
        """Sets the source_account_number_id of this CreateARealTimePaymentsTransferParameters.

        The identifier of the Account Number from which to send the transfer.

        :param source_account_number_id: The source_account_number_id of this CreateARealTimePaymentsTransferParameters.
        :type source_account_number_id: str
        """
        if source_account_number_id is None:
            raise ValueError("Invalid value for `source_account_number_id`, must not be `None`")

        self._source_account_number_id = source_account_number_id
