# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAWireDrawdownRequestParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_id: str=None, amount: int=None, message_to_recipient: str=None, recipient_account_number: str=None, recipient_address_line1: str=None, recipient_address_line2: str=None, recipient_address_line3: str=None, recipient_name: str=None, recipient_routing_number: str=None):
        """CreateAWireDrawdownRequestParameters - a model defined in OpenAPI

        :param account_number_id: The account_number_id of this CreateAWireDrawdownRequestParameters.
        :param amount: The amount of this CreateAWireDrawdownRequestParameters.
        :param message_to_recipient: The message_to_recipient of this CreateAWireDrawdownRequestParameters.
        :param recipient_account_number: The recipient_account_number of this CreateAWireDrawdownRequestParameters.
        :param recipient_address_line1: The recipient_address_line1 of this CreateAWireDrawdownRequestParameters.
        :param recipient_address_line2: The recipient_address_line2 of this CreateAWireDrawdownRequestParameters.
        :param recipient_address_line3: The recipient_address_line3 of this CreateAWireDrawdownRequestParameters.
        :param recipient_name: The recipient_name of this CreateAWireDrawdownRequestParameters.
        :param recipient_routing_number: The recipient_routing_number of this CreateAWireDrawdownRequestParameters.
        """
        self.openapi_types = {
            'account_number_id': str,
            'amount': int,
            'message_to_recipient': str,
            'recipient_account_number': str,
            'recipient_address_line1': str,
            'recipient_address_line2': str,
            'recipient_address_line3': str,
            'recipient_name': str,
            'recipient_routing_number': str
        }

        self.attribute_map = {
            'account_number_id': 'account_number_id',
            'amount': 'amount',
            'message_to_recipient': 'message_to_recipient',
            'recipient_account_number': 'recipient_account_number',
            'recipient_address_line1': 'recipient_address_line1',
            'recipient_address_line2': 'recipient_address_line2',
            'recipient_address_line3': 'recipient_address_line3',
            'recipient_name': 'recipient_name',
            'recipient_routing_number': 'recipient_routing_number'
        }

        self._account_number_id = account_number_id
        self._amount = amount
        self._message_to_recipient = message_to_recipient
        self._recipient_account_number = recipient_account_number
        self._recipient_address_line1 = recipient_address_line1
        self._recipient_address_line2 = recipient_address_line2
        self._recipient_address_line3 = recipient_address_line3
        self._recipient_name = recipient_name
        self._recipient_routing_number = recipient_routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAWireDrawdownRequestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_wire_drawdown_request_parameters of this CreateAWireDrawdownRequestParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_id(self):
        """Gets the account_number_id of this CreateAWireDrawdownRequestParameters.

        The Account Number to which the recipient should send funds.

        :return: The account_number_id of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._account_number_id

    @account_number_id.setter
    def account_number_id(self, account_number_id):
        """Sets the account_number_id of this CreateAWireDrawdownRequestParameters.

        The Account Number to which the recipient should send funds.

        :param account_number_id: The account_number_id of this CreateAWireDrawdownRequestParameters.
        :type account_number_id: str
        """
        if account_number_id is None:
            raise ValueError("Invalid value for `account_number_id`, must not be `None`")

        self._account_number_id = account_number_id

    @property
    def amount(self):
        """Gets the amount of this CreateAWireDrawdownRequestParameters.

        The amount requested from the recipient, in cents.

        :return: The amount of this CreateAWireDrawdownRequestParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateAWireDrawdownRequestParameters.

        The amount requested from the recipient, in cents.

        :param amount: The amount of this CreateAWireDrawdownRequestParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this CreateAWireDrawdownRequestParameters.

        A message the recipient will see as part of the request.

        :return: The message_to_recipient of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this CreateAWireDrawdownRequestParameters.

        A message the recipient will see as part of the request.

        :param message_to_recipient: The message_to_recipient of this CreateAWireDrawdownRequestParameters.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")
        if message_to_recipient is not None and len(message_to_recipient) > 140:
            raise ValueError("Invalid value for `message_to_recipient`, length must be less than or equal to `140`")
        if message_to_recipient is not None and len(message_to_recipient) < 1:
            raise ValueError("Invalid value for `message_to_recipient`, length must be greater than or equal to `1`")

        self._message_to_recipient = message_to_recipient

    @property
    def recipient_account_number(self):
        """Gets the recipient_account_number of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's account number.

        :return: The recipient_account_number of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_account_number

    @recipient_account_number.setter
    def recipient_account_number(self, recipient_account_number):
        """Sets the recipient_account_number of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's account number.

        :param recipient_account_number: The recipient_account_number of this CreateAWireDrawdownRequestParameters.
        :type recipient_account_number: str
        """
        if recipient_account_number is None:
            raise ValueError("Invalid value for `recipient_account_number`, must not be `None`")
        if recipient_account_number is not None and len(recipient_account_number) > 200:
            raise ValueError("Invalid value for `recipient_account_number`, length must be less than or equal to `200`")
        if recipient_account_number is not None and len(recipient_account_number) < 1:
            raise ValueError("Invalid value for `recipient_account_number`, length must be greater than or equal to `1`")

        self._recipient_account_number = recipient_account_number

    @property
    def recipient_address_line1(self):
        """Gets the recipient_address_line1 of this CreateAWireDrawdownRequestParameters.

        Line 1 of the drawdown request's recipient's address.

        :return: The recipient_address_line1 of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_address_line1

    @recipient_address_line1.setter
    def recipient_address_line1(self, recipient_address_line1):
        """Sets the recipient_address_line1 of this CreateAWireDrawdownRequestParameters.

        Line 1 of the drawdown request's recipient's address.

        :param recipient_address_line1: The recipient_address_line1 of this CreateAWireDrawdownRequestParameters.
        :type recipient_address_line1: str
        """
        if recipient_address_line1 is not None and len(recipient_address_line1) > 35:
            raise ValueError("Invalid value for `recipient_address_line1`, length must be less than or equal to `35`")
        if recipient_address_line1 is not None and len(recipient_address_line1) < 1:
            raise ValueError("Invalid value for `recipient_address_line1`, length must be greater than or equal to `1`")

        self._recipient_address_line1 = recipient_address_line1

    @property
    def recipient_address_line2(self):
        """Gets the recipient_address_line2 of this CreateAWireDrawdownRequestParameters.

        Line 2 of the drawdown request's recipient's address.

        :return: The recipient_address_line2 of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_address_line2

    @recipient_address_line2.setter
    def recipient_address_line2(self, recipient_address_line2):
        """Sets the recipient_address_line2 of this CreateAWireDrawdownRequestParameters.

        Line 2 of the drawdown request's recipient's address.

        :param recipient_address_line2: The recipient_address_line2 of this CreateAWireDrawdownRequestParameters.
        :type recipient_address_line2: str
        """
        if recipient_address_line2 is not None and len(recipient_address_line2) > 35:
            raise ValueError("Invalid value for `recipient_address_line2`, length must be less than or equal to `35`")
        if recipient_address_line2 is not None and len(recipient_address_line2) < 1:
            raise ValueError("Invalid value for `recipient_address_line2`, length must be greater than or equal to `1`")

        self._recipient_address_line2 = recipient_address_line2

    @property
    def recipient_address_line3(self):
        """Gets the recipient_address_line3 of this CreateAWireDrawdownRequestParameters.

        Line 3 of the drawdown request's recipient's address.

        :return: The recipient_address_line3 of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_address_line3

    @recipient_address_line3.setter
    def recipient_address_line3(self, recipient_address_line3):
        """Sets the recipient_address_line3 of this CreateAWireDrawdownRequestParameters.

        Line 3 of the drawdown request's recipient's address.

        :param recipient_address_line3: The recipient_address_line3 of this CreateAWireDrawdownRequestParameters.
        :type recipient_address_line3: str
        """
        if recipient_address_line3 is not None and len(recipient_address_line3) > 35:
            raise ValueError("Invalid value for `recipient_address_line3`, length must be less than or equal to `35`")
        if recipient_address_line3 is not None and len(recipient_address_line3) < 1:
            raise ValueError("Invalid value for `recipient_address_line3`, length must be greater than or equal to `1`")

        self._recipient_address_line3 = recipient_address_line3

    @property
    def recipient_name(self):
        """Gets the recipient_name of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's name.

        :return: The recipient_name of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's name.

        :param recipient_name: The recipient_name of this CreateAWireDrawdownRequestParameters.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")
        if recipient_name is not None and len(recipient_name) > 35:
            raise ValueError("Invalid value for `recipient_name`, length must be less than or equal to `35`")
        if recipient_name is not None and len(recipient_name) < 1:
            raise ValueError("Invalid value for `recipient_name`, length must be greater than or equal to `1`")

        self._recipient_name = recipient_name

    @property
    def recipient_routing_number(self):
        """Gets the recipient_routing_number of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's routing number.

        :return: The recipient_routing_number of this CreateAWireDrawdownRequestParameters.
        :rtype: str
        """
        return self._recipient_routing_number

    @recipient_routing_number.setter
    def recipient_routing_number(self, recipient_routing_number):
        """Sets the recipient_routing_number of this CreateAWireDrawdownRequestParameters.

        The drawdown request's recipient's routing number.

        :param recipient_routing_number: The recipient_routing_number of this CreateAWireDrawdownRequestParameters.
        :type recipient_routing_number: str
        """
        if recipient_routing_number is None:
            raise ValueError("Invalid value for `recipient_routing_number`, must not be `None`")
        if recipient_routing_number is not None and len(recipient_routing_number) > 200:
            raise ValueError("Invalid value for `recipient_routing_number`, length must be less than or equal to `200`")
        if recipient_routing_number is not None and len(recipient_routing_number) < 1:
            raise ValueError("Invalid value for `recipient_routing_number`, length must be greater than or equal to `1`")

        self._recipient_routing_number = recipient_routing_number
