# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountTransferIntention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, description: str=None, destination_account_id: str=None, source_account_id: str=None, transfer_id: str=None):
        """AccountTransferIntention - a model defined in OpenAPI

        :param amount: The amount of this AccountTransferIntention.
        :param currency: The currency of this AccountTransferIntention.
        :param description: The description of this AccountTransferIntention.
        :param destination_account_id: The destination_account_id of this AccountTransferIntention.
        :param source_account_id: The source_account_id of this AccountTransferIntention.
        :param transfer_id: The transfer_id of this AccountTransferIntention.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'description': str,
            'destination_account_id': str,
            'source_account_id': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'description': 'description',
            'destination_account_id': 'destination_account_id',
            'source_account_id': 'source_account_id',
            'transfer_id': 'transfer_id'
        }

        self._amount = amount
        self._currency = currency
        self._description = description
        self._destination_account_id = destination_account_id
        self._source_account_id = source_account_id
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTransferIntention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account_Transfer_Intention of this AccountTransferIntention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this AccountTransferIntention.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this AccountTransferIntention.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountTransferIntention.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this AccountTransferIntention.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this AccountTransferIntention.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.

        :return: The currency of this AccountTransferIntention.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountTransferIntention.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.

        :param currency: The currency of this AccountTransferIntention.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this AccountTransferIntention.

        The description you chose to give the transfer.

        :return: The description of this AccountTransferIntention.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountTransferIntention.

        The description you chose to give the transfer.

        :param description: The description of this AccountTransferIntention.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def destination_account_id(self):
        """Gets the destination_account_id of this AccountTransferIntention.

        The identifier of the Account to where the Account Transfer was sent.

        :return: The destination_account_id of this AccountTransferIntention.
        :rtype: str
        """
        return self._destination_account_id

    @destination_account_id.setter
    def destination_account_id(self, destination_account_id):
        """Sets the destination_account_id of this AccountTransferIntention.

        The identifier of the Account to where the Account Transfer was sent.

        :param destination_account_id: The destination_account_id of this AccountTransferIntention.
        :type destination_account_id: str
        """
        if destination_account_id is None:
            raise ValueError("Invalid value for `destination_account_id`, must not be `None`")

        self._destination_account_id = destination_account_id

    @property
    def source_account_id(self):
        """Gets the source_account_id of this AccountTransferIntention.

        The identifier of the Account from where the Account Transfer was sent.

        :return: The source_account_id of this AccountTransferIntention.
        :rtype: str
        """
        return self._source_account_id

    @source_account_id.setter
    def source_account_id(self, source_account_id):
        """Sets the source_account_id of this AccountTransferIntention.

        The identifier of the Account from where the Account Transfer was sent.

        :param source_account_id: The source_account_id of this AccountTransferIntention.
        :type source_account_id: str
        """
        if source_account_id is None:
            raise ValueError("Invalid value for `source_account_id`, must not be `None`")

        self._source_account_id = source_account_id

    @property
    def transfer_id(self):
        """Gets the transfer_id of this AccountTransferIntention.

        The identifier of the Account Transfer that led to this Pending Transaction.

        :return: The transfer_id of this AccountTransferIntention.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this AccountTransferIntention.

        The identifier of the Account Transfer that led to this Pending Transaction.

        :param transfer_id: The transfer_id of this AccountTransferIntention.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
