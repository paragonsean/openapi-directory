# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateACheckDepositParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, back_image_file_id: str=None, currency: str=None, front_image_file_id: str=None):
        """CreateACheckDepositParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateACheckDepositParameters.
        :param amount: The amount of this CreateACheckDepositParameters.
        :param back_image_file_id: The back_image_file_id of this CreateACheckDepositParameters.
        :param currency: The currency of this CreateACheckDepositParameters.
        :param front_image_file_id: The front_image_file_id of this CreateACheckDepositParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'back_image_file_id': str,
            'currency': str,
            'front_image_file_id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'back_image_file_id': 'back_image_file_id',
            'currency': 'currency',
            'front_image_file_id': 'front_image_file_id'
        }

        self._account_id = account_id
        self._amount = amount
        self._back_image_file_id = back_image_file_id
        self._currency = currency
        self._front_image_file_id = front_image_file_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACheckDepositParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_check_deposit_parameters of this CreateACheckDepositParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateACheckDepositParameters.

        The identifier for the Account to deposit the check in.

        :return: The account_id of this CreateACheckDepositParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateACheckDepositParameters.

        The identifier for the Account to deposit the check in.

        :param account_id: The account_id of this CreateACheckDepositParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this CreateACheckDepositParameters.

        The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.

        :return: The amount of this CreateACheckDepositParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateACheckDepositParameters.

        The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.

        :param amount: The amount of this CreateACheckDepositParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")

        self._amount = amount

    @property
    def back_image_file_id(self):
        """Gets the back_image_file_id of this CreateACheckDepositParameters.

        The File containing the check's back image.

        :return: The back_image_file_id of this CreateACheckDepositParameters.
        :rtype: str
        """
        return self._back_image_file_id

    @back_image_file_id.setter
    def back_image_file_id(self, back_image_file_id):
        """Sets the back_image_file_id of this CreateACheckDepositParameters.

        The File containing the check's back image.

        :param back_image_file_id: The back_image_file_id of this CreateACheckDepositParameters.
        :type back_image_file_id: str
        """
        if back_image_file_id is None:
            raise ValueError("Invalid value for `back_image_file_id`, must not be `None`")

        self._back_image_file_id = back_image_file_id

    @property
    def currency(self):
        """Gets the currency of this CreateACheckDepositParameters.

        The currency to use for the deposit.

        :return: The currency of this CreateACheckDepositParameters.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateACheckDepositParameters.

        The currency to use for the deposit.

        :param currency: The currency of this CreateACheckDepositParameters.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 200:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `200`")
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")

        self._currency = currency

    @property
    def front_image_file_id(self):
        """Gets the front_image_file_id of this CreateACheckDepositParameters.

        The File containing the check's front image.

        :return: The front_image_file_id of this CreateACheckDepositParameters.
        :rtype: str
        """
        return self._front_image_file_id

    @front_image_file_id.setter
    def front_image_file_id(self, front_image_file_id):
        """Sets the front_image_file_id of this CreateACheckDepositParameters.

        The File containing the check's front image.

        :param front_image_file_id: The front_image_file_id of this CreateACheckDepositParameters.
        :type front_image_file_id: str
        """
        if front_image_file_id is None:
            raise ValueError("Invalid value for `front_image_file_id`, must not be `None`")

        self._front_image_file_id = front_image_file_id
