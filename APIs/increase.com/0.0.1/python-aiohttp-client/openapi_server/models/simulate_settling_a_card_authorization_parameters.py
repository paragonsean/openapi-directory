# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateSettlingACardAuthorizationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, card_id: str=None, pending_transaction_id: str=None):
        """SimulateSettlingACardAuthorizationParameters - a model defined in OpenAPI

        :param amount: The amount of this SimulateSettlingACardAuthorizationParameters.
        :param card_id: The card_id of this SimulateSettlingACardAuthorizationParameters.
        :param pending_transaction_id: The pending_transaction_id of this SimulateSettlingACardAuthorizationParameters.
        """
        self.openapi_types = {
            'amount': int,
            'card_id': str,
            'pending_transaction_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'card_id': 'card_id',
            'pending_transaction_id': 'pending_transaction_id'
        }

        self._amount = amount
        self._card_id = card_id
        self._pending_transaction_id = pending_transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateSettlingACardAuthorizationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_settling_a_card_authorization_parameters of this SimulateSettlingACardAuthorizationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SimulateSettlingACardAuthorizationParameters.

        The amount to be settled. This defaults to the amount of the Pending Transaction being settled.

        :return: The amount of this SimulateSettlingACardAuthorizationParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SimulateSettlingACardAuthorizationParameters.

        The amount to be settled. This defaults to the amount of the Pending Transaction being settled.

        :param amount: The amount of this SimulateSettlingACardAuthorizationParameters.
        :type amount: int
        """
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def card_id(self):
        """Gets the card_id of this SimulateSettlingACardAuthorizationParameters.

        The identifier of the Card to create a settlement on.

        :return: The card_id of this SimulateSettlingACardAuthorizationParameters.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this SimulateSettlingACardAuthorizationParameters.

        The identifier of the Card to create a settlement on.

        :param card_id: The card_id of this SimulateSettlingACardAuthorizationParameters.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def pending_transaction_id(self):
        """Gets the pending_transaction_id of this SimulateSettlingACardAuthorizationParameters.

        The identifier of the Pending Transaction for the Card Authorization you wish to settle.

        :return: The pending_transaction_id of this SimulateSettlingACardAuthorizationParameters.
        :rtype: str
        """
        return self._pending_transaction_id

    @pending_transaction_id.setter
    def pending_transaction_id(self, pending_transaction_id):
        """Sets the pending_transaction_id of this SimulateSettlingACardAuthorizationParameters.

        The identifier of the Pending Transaction for the Card Authorization you wish to settle.

        :param pending_transaction_id: The pending_transaction_id of this SimulateSettlingACardAuthorizationParameters.
        :type pending_transaction_id: str
        """
        if pending_transaction_id is None:
            raise ValueError("Invalid value for `pending_transaction_id`, must not be `None`")

        self._pending_transaction_id = pending_transaction_id
