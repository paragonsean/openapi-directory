# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_wire_reversal1 import InboundWireReversal1
from openapi_server.models.transfer_approval import TransferApproval
from openapi_server.models.transfer_cancellation import TransferCancellation
from openapi_server.models.wire_transfer_submission import WireTransferSubmission
from openapi_server import util


class WireTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_number: str=None, amount: int=None, approval: TransferApproval=None, beneficiary_address_line1: str=None, beneficiary_address_line2: str=None, beneficiary_address_line3: str=None, beneficiary_name: str=None, cancellation: TransferCancellation=None, created_at: datetime=None, currency: str=None, external_account_id: str=None, id: str=None, message_to_recipient: str=None, network: str=None, reversal: InboundWireReversal1=None, routing_number: str=None, status: str=None, submission: WireTransferSubmission=None, transaction_id: str=None, type: str=None):
        """WireTransfer - a model defined in OpenAPI

        :param account_id: The account_id of this WireTransfer.
        :param account_number: The account_number of this WireTransfer.
        :param amount: The amount of this WireTransfer.
        :param approval: The approval of this WireTransfer.
        :param beneficiary_address_line1: The beneficiary_address_line1 of this WireTransfer.
        :param beneficiary_address_line2: The beneficiary_address_line2 of this WireTransfer.
        :param beneficiary_address_line3: The beneficiary_address_line3 of this WireTransfer.
        :param beneficiary_name: The beneficiary_name of this WireTransfer.
        :param cancellation: The cancellation of this WireTransfer.
        :param created_at: The created_at of this WireTransfer.
        :param currency: The currency of this WireTransfer.
        :param external_account_id: The external_account_id of this WireTransfer.
        :param id: The id of this WireTransfer.
        :param message_to_recipient: The message_to_recipient of this WireTransfer.
        :param network: The network of this WireTransfer.
        :param reversal: The reversal of this WireTransfer.
        :param routing_number: The routing_number of this WireTransfer.
        :param status: The status of this WireTransfer.
        :param submission: The submission of this WireTransfer.
        :param transaction_id: The transaction_id of this WireTransfer.
        :param type: The type of this WireTransfer.
        """
        self.openapi_types = {
            'account_id': str,
            'account_number': str,
            'amount': int,
            'approval': TransferApproval,
            'beneficiary_address_line1': str,
            'beneficiary_address_line2': str,
            'beneficiary_address_line3': str,
            'beneficiary_name': str,
            'cancellation': TransferCancellation,
            'created_at': datetime,
            'currency': str,
            'external_account_id': str,
            'id': str,
            'message_to_recipient': str,
            'network': str,
            'reversal': InboundWireReversal1,
            'routing_number': str,
            'status': str,
            'submission': WireTransferSubmission,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'account_number': 'account_number',
            'amount': 'amount',
            'approval': 'approval',
            'beneficiary_address_line1': 'beneficiary_address_line1',
            'beneficiary_address_line2': 'beneficiary_address_line2',
            'beneficiary_address_line3': 'beneficiary_address_line3',
            'beneficiary_name': 'beneficiary_name',
            'cancellation': 'cancellation',
            'created_at': 'created_at',
            'currency': 'currency',
            'external_account_id': 'external_account_id',
            'id': 'id',
            'message_to_recipient': 'message_to_recipient',
            'network': 'network',
            'reversal': 'reversal',
            'routing_number': 'routing_number',
            'status': 'status',
            'submission': 'submission',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._account_number = account_number
        self._amount = amount
        self._approval = approval
        self._beneficiary_address_line1 = beneficiary_address_line1
        self._beneficiary_address_line2 = beneficiary_address_line2
        self._beneficiary_address_line3 = beneficiary_address_line3
        self._beneficiary_name = beneficiary_name
        self._cancellation = cancellation
        self._created_at = created_at
        self._currency = currency
        self._external_account_id = external_account_id
        self._id = id
        self._message_to_recipient = message_to_recipient
        self._network = network
        self._reversal = reversal
        self._routing_number = routing_number
        self._status = status
        self._submission = submission
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WireTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The wire_transfer of this WireTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this WireTransfer.

        The Account to which the transfer belongs.

        :return: The account_id of this WireTransfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this WireTransfer.

        The Account to which the transfer belongs.

        :param account_id: The account_id of this WireTransfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this WireTransfer.

        The destination account number.

        :return: The account_number of this WireTransfer.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this WireTransfer.

        The destination account number.

        :param account_number: The account_number of this WireTransfer.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this WireTransfer.

        The transfer amount in USD cents.

        :return: The amount of this WireTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WireTransfer.

        The transfer amount in USD cents.

        :param amount: The amount of this WireTransfer.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this WireTransfer.


        :return: The approval of this WireTransfer.
        :rtype: TransferApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this WireTransfer.


        :param approval: The approval of this WireTransfer.
        :type approval: TransferApproval
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")

        self._approval = approval

    @property
    def beneficiary_address_line1(self):
        """Gets the beneficiary_address_line1 of this WireTransfer.

        The beneficiary's address line 1.

        :return: The beneficiary_address_line1 of this WireTransfer.
        :rtype: str
        """
        return self._beneficiary_address_line1

    @beneficiary_address_line1.setter
    def beneficiary_address_line1(self, beneficiary_address_line1):
        """Sets the beneficiary_address_line1 of this WireTransfer.

        The beneficiary's address line 1.

        :param beneficiary_address_line1: The beneficiary_address_line1 of this WireTransfer.
        :type beneficiary_address_line1: str
        """
        if beneficiary_address_line1 is None:
            raise ValueError("Invalid value for `beneficiary_address_line1`, must not be `None`")

        self._beneficiary_address_line1 = beneficiary_address_line1

    @property
    def beneficiary_address_line2(self):
        """Gets the beneficiary_address_line2 of this WireTransfer.

        The beneficiary's address line 2.

        :return: The beneficiary_address_line2 of this WireTransfer.
        :rtype: str
        """
        return self._beneficiary_address_line2

    @beneficiary_address_line2.setter
    def beneficiary_address_line2(self, beneficiary_address_line2):
        """Sets the beneficiary_address_line2 of this WireTransfer.

        The beneficiary's address line 2.

        :param beneficiary_address_line2: The beneficiary_address_line2 of this WireTransfer.
        :type beneficiary_address_line2: str
        """
        if beneficiary_address_line2 is None:
            raise ValueError("Invalid value for `beneficiary_address_line2`, must not be `None`")

        self._beneficiary_address_line2 = beneficiary_address_line2

    @property
    def beneficiary_address_line3(self):
        """Gets the beneficiary_address_line3 of this WireTransfer.

        The beneficiary's address line 3.

        :return: The beneficiary_address_line3 of this WireTransfer.
        :rtype: str
        """
        return self._beneficiary_address_line3

    @beneficiary_address_line3.setter
    def beneficiary_address_line3(self, beneficiary_address_line3):
        """Sets the beneficiary_address_line3 of this WireTransfer.

        The beneficiary's address line 3.

        :param beneficiary_address_line3: The beneficiary_address_line3 of this WireTransfer.
        :type beneficiary_address_line3: str
        """
        if beneficiary_address_line3 is None:
            raise ValueError("Invalid value for `beneficiary_address_line3`, must not be `None`")

        self._beneficiary_address_line3 = beneficiary_address_line3

    @property
    def beneficiary_name(self):
        """Gets the beneficiary_name of this WireTransfer.

        The beneficiary's name.

        :return: The beneficiary_name of this WireTransfer.
        :rtype: str
        """
        return self._beneficiary_name

    @beneficiary_name.setter
    def beneficiary_name(self, beneficiary_name):
        """Sets the beneficiary_name of this WireTransfer.

        The beneficiary's name.

        :param beneficiary_name: The beneficiary_name of this WireTransfer.
        :type beneficiary_name: str
        """
        if beneficiary_name is None:
            raise ValueError("Invalid value for `beneficiary_name`, must not be `None`")

        self._beneficiary_name = beneficiary_name

    @property
    def cancellation(self):
        """Gets the cancellation of this WireTransfer.


        :return: The cancellation of this WireTransfer.
        :rtype: TransferCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this WireTransfer.


        :param cancellation: The cancellation of this WireTransfer.
        :type cancellation: TransferCancellation
        """
        if cancellation is None:
            raise ValueError("Invalid value for `cancellation`, must not be `None`")

        self._cancellation = cancellation

    @property
    def created_at(self):
        """Gets the created_at of this WireTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this WireTransfer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WireTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this WireTransfer.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this WireTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.

        :return: The currency of this WireTransfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WireTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.

        :param currency: The currency of this WireTransfer.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def external_account_id(self):
        """Gets the external_account_id of this WireTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :return: The external_account_id of this WireTransfer.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this WireTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :param external_account_id: The external_account_id of this WireTransfer.
        :type external_account_id: str
        """
        if external_account_id is None:
            raise ValueError("Invalid value for `external_account_id`, must not be `None`")

        self._external_account_id = external_account_id

    @property
    def id(self):
        """Gets the id of this WireTransfer.

        The wire transfer's identifier.

        :return: The id of this WireTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WireTransfer.

        The wire transfer's identifier.

        :param id: The id of this WireTransfer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this WireTransfer.

        The message that will show on the recipient's bank statement.

        :return: The message_to_recipient of this WireTransfer.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this WireTransfer.

        The message that will show on the recipient's bank statement.

        :param message_to_recipient: The message_to_recipient of this WireTransfer.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")

        self._message_to_recipient = message_to_recipient

    @property
    def network(self):
        """Gets the network of this WireTransfer.

        The transfer's network.

        :return: The network of this WireTransfer.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WireTransfer.

        The transfer's network.

        :param network: The network of this WireTransfer.
        :type network: str
        """
        allowed_values = ["wire"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def reversal(self):
        """Gets the reversal of this WireTransfer.


        :return: The reversal of this WireTransfer.
        :rtype: InboundWireReversal1
        """
        return self._reversal

    @reversal.setter
    def reversal(self, reversal):
        """Sets the reversal of this WireTransfer.


        :param reversal: The reversal of this WireTransfer.
        :type reversal: InboundWireReversal1
        """
        if reversal is None:
            raise ValueError("Invalid value for `reversal`, must not be `None`")

        self._reversal = reversal

    @property
    def routing_number(self):
        """Gets the routing_number of this WireTransfer.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The routing_number of this WireTransfer.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this WireTransfer.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param routing_number: The routing_number of this WireTransfer.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def status(self):
        """Gets the status of this WireTransfer.

        The lifecycle status of the transfer.

        :return: The status of this WireTransfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WireTransfer.

        The lifecycle status of the transfer.

        :param status: The status of this WireTransfer.
        :type status: str
        """
        allowed_values = ["canceled", "requires_attention", "pending_approval", "rejected", "reversed", "complete", "pending_creating"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this WireTransfer.


        :return: The submission of this WireTransfer.
        :rtype: WireTransferSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this WireTransfer.


        :param submission: The submission of this WireTransfer.
        :type submission: WireTransferSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def transaction_id(self):
        """Gets the transaction_id of this WireTransfer.

        The ID for the transaction funding the transfer.

        :return: The transaction_id of this WireTransfer.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this WireTransfer.

        The ID for the transaction funding the transfer.

        :param transaction_id: The transaction_id of this WireTransfer.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this WireTransfer.

        A constant representing the object's type. For this resource it will always be `wire_transfer`.

        :return: The type of this WireTransfer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WireTransfer.

        A constant representing the object's type. For this resource it will always be `wire_transfer`.

        :param type: The type of this WireTransfer.
        :type type: str
        """
        allowed_values = ["wire_transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
