# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_prenotification_return import ACHPrenotificationReturn
from openapi_server import util


class AchPrenotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, addendum: str=None, company_descriptive_date: str=None, company_discretionary_data: str=None, company_entry_description: str=None, company_name: str=None, created_at: datetime=None, credit_debit_indicator: str=None, effective_date: datetime=None, id: str=None, prenotification_return: ACHPrenotificationReturn=None, routing_number: str=None, status: str=None, type: str=None):
        """AchPrenotification - a model defined in OpenAPI

        :param account_number: The account_number of this AchPrenotification.
        :param addendum: The addendum of this AchPrenotification.
        :param company_descriptive_date: The company_descriptive_date of this AchPrenotification.
        :param company_discretionary_data: The company_discretionary_data of this AchPrenotification.
        :param company_entry_description: The company_entry_description of this AchPrenotification.
        :param company_name: The company_name of this AchPrenotification.
        :param created_at: The created_at of this AchPrenotification.
        :param credit_debit_indicator: The credit_debit_indicator of this AchPrenotification.
        :param effective_date: The effective_date of this AchPrenotification.
        :param id: The id of this AchPrenotification.
        :param prenotification_return: The prenotification_return of this AchPrenotification.
        :param routing_number: The routing_number of this AchPrenotification.
        :param status: The status of this AchPrenotification.
        :param type: The type of this AchPrenotification.
        """
        self.openapi_types = {
            'account_number': str,
            'addendum': str,
            'company_descriptive_date': str,
            'company_discretionary_data': str,
            'company_entry_description': str,
            'company_name': str,
            'created_at': datetime,
            'credit_debit_indicator': str,
            'effective_date': datetime,
            'id': str,
            'prenotification_return': ACHPrenotificationReturn,
            'routing_number': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'addendum': 'addendum',
            'company_descriptive_date': 'company_descriptive_date',
            'company_discretionary_data': 'company_discretionary_data',
            'company_entry_description': 'company_entry_description',
            'company_name': 'company_name',
            'created_at': 'created_at',
            'credit_debit_indicator': 'credit_debit_indicator',
            'effective_date': 'effective_date',
            'id': 'id',
            'prenotification_return': 'prenotification_return',
            'routing_number': 'routing_number',
            'status': 'status',
            'type': 'type'
        }

        self._account_number = account_number
        self._addendum = addendum
        self._company_descriptive_date = company_descriptive_date
        self._company_discretionary_data = company_discretionary_data
        self._company_entry_description = company_entry_description
        self._company_name = company_name
        self._created_at = created_at
        self._credit_debit_indicator = credit_debit_indicator
        self._effective_date = effective_date
        self._id = id
        self._prenotification_return = prenotification_return
        self._routing_number = routing_number
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchPrenotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ach_prenotification of this AchPrenotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this AchPrenotification.

        The destination account number.

        :return: The account_number of this AchPrenotification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AchPrenotification.

        The destination account number.

        :param account_number: The account_number of this AchPrenotification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def addendum(self):
        """Gets the addendum of this AchPrenotification.

        Additional information for the recipient.

        :return: The addendum of this AchPrenotification.
        :rtype: str
        """
        return self._addendum

    @addendum.setter
    def addendum(self, addendum):
        """Sets the addendum of this AchPrenotification.

        Additional information for the recipient.

        :param addendum: The addendum of this AchPrenotification.
        :type addendum: str
        """
        if addendum is None:
            raise ValueError("Invalid value for `addendum`, must not be `None`")

        self._addendum = addendum

    @property
    def company_descriptive_date(self):
        """Gets the company_descriptive_date of this AchPrenotification.

        The description of the date of the notification.

        :return: The company_descriptive_date of this AchPrenotification.
        :rtype: str
        """
        return self._company_descriptive_date

    @company_descriptive_date.setter
    def company_descriptive_date(self, company_descriptive_date):
        """Sets the company_descriptive_date of this AchPrenotification.

        The description of the date of the notification.

        :param company_descriptive_date: The company_descriptive_date of this AchPrenotification.
        :type company_descriptive_date: str
        """
        if company_descriptive_date is None:
            raise ValueError("Invalid value for `company_descriptive_date`, must not be `None`")

        self._company_descriptive_date = company_descriptive_date

    @property
    def company_discretionary_data(self):
        """Gets the company_discretionary_data of this AchPrenotification.

        Optional data associated with the notification.

        :return: The company_discretionary_data of this AchPrenotification.
        :rtype: str
        """
        return self._company_discretionary_data

    @company_discretionary_data.setter
    def company_discretionary_data(self, company_discretionary_data):
        """Sets the company_discretionary_data of this AchPrenotification.

        Optional data associated with the notification.

        :param company_discretionary_data: The company_discretionary_data of this AchPrenotification.
        :type company_discretionary_data: str
        """
        if company_discretionary_data is None:
            raise ValueError("Invalid value for `company_discretionary_data`, must not be `None`")

        self._company_discretionary_data = company_discretionary_data

    @property
    def company_entry_description(self):
        """Gets the company_entry_description of this AchPrenotification.

        The description of the notification.

        :return: The company_entry_description of this AchPrenotification.
        :rtype: str
        """
        return self._company_entry_description

    @company_entry_description.setter
    def company_entry_description(self, company_entry_description):
        """Sets the company_entry_description of this AchPrenotification.

        The description of the notification.

        :param company_entry_description: The company_entry_description of this AchPrenotification.
        :type company_entry_description: str
        """
        if company_entry_description is None:
            raise ValueError("Invalid value for `company_entry_description`, must not be `None`")

        self._company_entry_description = company_entry_description

    @property
    def company_name(self):
        """Gets the company_name of this AchPrenotification.

        The name by which you know the company.

        :return: The company_name of this AchPrenotification.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AchPrenotification.

        The name by which you know the company.

        :param company_name: The company_name of this AchPrenotification.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this AchPrenotification.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.

        :return: The created_at of this AchPrenotification.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AchPrenotification.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.

        :param created_at: The created_at of this AchPrenotification.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this AchPrenotification.

        If the notification is for a future credit or debit.

        :return: The credit_debit_indicator of this AchPrenotification.
        :rtype: str
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this AchPrenotification.

        If the notification is for a future credit or debit.

        :param credit_debit_indicator: The credit_debit_indicator of this AchPrenotification.
        :type credit_debit_indicator: str
        """
        allowed_values = [None,"credit", "debit"]  # noqa: E501
        if credit_debit_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_debit_indicator` ({0}), must be one of {1}"
                .format(credit_debit_indicator, allowed_values)
            )

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def effective_date(self):
        """Gets the effective_date of this AchPrenotification.

        The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The effective_date of this AchPrenotification.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this AchPrenotification.

        The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param effective_date: The effective_date of this AchPrenotification.
        :type effective_date: datetime
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")

        self._effective_date = effective_date

    @property
    def id(self):
        """Gets the id of this AchPrenotification.

        The ACH Prenotification's identifier.

        :return: The id of this AchPrenotification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AchPrenotification.

        The ACH Prenotification's identifier.

        :param id: The id of this AchPrenotification.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def prenotification_return(self):
        """Gets the prenotification_return of this AchPrenotification.


        :return: The prenotification_return of this AchPrenotification.
        :rtype: ACHPrenotificationReturn
        """
        return self._prenotification_return

    @prenotification_return.setter
    def prenotification_return(self, prenotification_return):
        """Sets the prenotification_return of this AchPrenotification.


        :param prenotification_return: The prenotification_return of this AchPrenotification.
        :type prenotification_return: ACHPrenotificationReturn
        """
        if prenotification_return is None:
            raise ValueError("Invalid value for `prenotification_return`, must not be `None`")

        self._prenotification_return = prenotification_return

    @property
    def routing_number(self):
        """Gets the routing_number of this AchPrenotification.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The routing_number of this AchPrenotification.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this AchPrenotification.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param routing_number: The routing_number of this AchPrenotification.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def status(self):
        """Gets the status of this AchPrenotification.

        The lifecycle status of the ACH Prenotification.

        :return: The status of this AchPrenotification.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AchPrenotification.

        The lifecycle status of the ACH Prenotification.

        :param status: The status of this AchPrenotification.
        :type status: str
        """
        allowed_values = ["pending_submitting", "requires_attention", "returned", "submitted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this AchPrenotification.

        A constant representing the object's type. For this resource it will always be `ach_prenotification`.

        :return: The type of this AchPrenotification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AchPrenotification.

        A constant representing the object's type. For this resource it will always be `ach_prenotification`.

        :param type: The type of this AchPrenotification.
        :type type: str
        """
        allowed_values = ["ach_prenotification"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
