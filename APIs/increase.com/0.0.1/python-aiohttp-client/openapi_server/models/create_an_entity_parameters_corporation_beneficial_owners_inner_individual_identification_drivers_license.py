# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: date=None, file_id: str=None, state: str=None):
        """CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :param file_id: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :param state: The state of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        """
        self.openapi_types = {
            'expiration_date': date,
            'file_id': str,
            'state': str
        }

        self.attribute_map = {
            'expiration_date': 'expiration_date',
            'file_id': 'file_id',
            'state': 'state'
        }

        self._expiration_date = expiration_date
        self._file_id = file_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The driver's license's expiration date in YYYY-MM-DD format.

        :return: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The driver's license's expiration date in YYYY-MM-DD format.

        :param expiration_date: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :type expiration_date: date
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def file_id(self):
        """Gets the file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The identifier of the File containing the driver's license.

        :return: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The identifier of the File containing the driver's license.

        :param file_id: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def state(self):
        """Gets the state of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The state that issued the provided driver's license.

        :return: The state of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.

        The state that issued the provided driver's license.

        :param state: The state of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationDriversLicense.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) > 200:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `200`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state
