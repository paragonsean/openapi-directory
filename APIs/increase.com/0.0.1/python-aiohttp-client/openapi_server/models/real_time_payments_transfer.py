# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.real_time_payments_transfer_rejection import RealTimePaymentsTransferRejection
from openapi_server.models.real_time_payments_transfer_submission import RealTimePaymentsTransferSubmission
from openapi_server.models.transfer_approval import TransferApproval
from openapi_server.models.transfer_cancellation import TransferCancellation
from openapi_server import util


class RealTimePaymentsTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, approval: TransferApproval=None, cancellation: TransferCancellation=None, created_at: datetime=None, creditor_name: str=None, currency: str=None, destination_account_number: str=None, destination_routing_number: str=None, external_account_id: str=None, id: str=None, rejection: RealTimePaymentsTransferRejection=None, remittance_information: str=None, source_account_number_id: str=None, status: str=None, submission: RealTimePaymentsTransferSubmission=None, transaction_id: str=None, type: str=None):
        """RealTimePaymentsTransfer - a model defined in OpenAPI

        :param account_id: The account_id of this RealTimePaymentsTransfer.
        :param amount: The amount of this RealTimePaymentsTransfer.
        :param approval: The approval of this RealTimePaymentsTransfer.
        :param cancellation: The cancellation of this RealTimePaymentsTransfer.
        :param created_at: The created_at of this RealTimePaymentsTransfer.
        :param creditor_name: The creditor_name of this RealTimePaymentsTransfer.
        :param currency: The currency of this RealTimePaymentsTransfer.
        :param destination_account_number: The destination_account_number of this RealTimePaymentsTransfer.
        :param destination_routing_number: The destination_routing_number of this RealTimePaymentsTransfer.
        :param external_account_id: The external_account_id of this RealTimePaymentsTransfer.
        :param id: The id of this RealTimePaymentsTransfer.
        :param rejection: The rejection of this RealTimePaymentsTransfer.
        :param remittance_information: The remittance_information of this RealTimePaymentsTransfer.
        :param source_account_number_id: The source_account_number_id of this RealTimePaymentsTransfer.
        :param status: The status of this RealTimePaymentsTransfer.
        :param submission: The submission of this RealTimePaymentsTransfer.
        :param transaction_id: The transaction_id of this RealTimePaymentsTransfer.
        :param type: The type of this RealTimePaymentsTransfer.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'approval': TransferApproval,
            'cancellation': TransferCancellation,
            'created_at': datetime,
            'creditor_name': str,
            'currency': str,
            'destination_account_number': str,
            'destination_routing_number': str,
            'external_account_id': str,
            'id': str,
            'rejection': RealTimePaymentsTransferRejection,
            'remittance_information': str,
            'source_account_number_id': str,
            'status': str,
            'submission': RealTimePaymentsTransferSubmission,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'approval': 'approval',
            'cancellation': 'cancellation',
            'created_at': 'created_at',
            'creditor_name': 'creditor_name',
            'currency': 'currency',
            'destination_account_number': 'destination_account_number',
            'destination_routing_number': 'destination_routing_number',
            'external_account_id': 'external_account_id',
            'id': 'id',
            'rejection': 'rejection',
            'remittance_information': 'remittance_information',
            'source_account_number_id': 'source_account_number_id',
            'status': 'status',
            'submission': 'submission',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._amount = amount
        self._approval = approval
        self._cancellation = cancellation
        self._created_at = created_at
        self._creditor_name = creditor_name
        self._currency = currency
        self._destination_account_number = destination_account_number
        self._destination_routing_number = destination_routing_number
        self._external_account_id = external_account_id
        self._id = id
        self._rejection = rejection
        self._remittance_information = remittance_information
        self._source_account_number_id = source_account_number_id
        self._status = status
        self._submission = submission
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimePaymentsTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The real_time_payments_transfer of this RealTimePaymentsTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this RealTimePaymentsTransfer.

        The Account from which the transfer was sent.

        :return: The account_id of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RealTimePaymentsTransfer.

        The Account from which the transfer was sent.

        :param account_id: The account_id of this RealTimePaymentsTransfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this RealTimePaymentsTransfer.

        The transfer amount in USD cents.

        :return: The amount of this RealTimePaymentsTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RealTimePaymentsTransfer.

        The transfer amount in USD cents.

        :param amount: The amount of this RealTimePaymentsTransfer.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this RealTimePaymentsTransfer.


        :return: The approval of this RealTimePaymentsTransfer.
        :rtype: TransferApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this RealTimePaymentsTransfer.


        :param approval: The approval of this RealTimePaymentsTransfer.
        :type approval: TransferApproval
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")

        self._approval = approval

    @property
    def cancellation(self):
        """Gets the cancellation of this RealTimePaymentsTransfer.


        :return: The cancellation of this RealTimePaymentsTransfer.
        :rtype: TransferCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this RealTimePaymentsTransfer.


        :param cancellation: The cancellation of this RealTimePaymentsTransfer.
        :type cancellation: TransferCancellation
        """
        if cancellation is None:
            raise ValueError("Invalid value for `cancellation`, must not be `None`")

        self._cancellation = cancellation

    @property
    def created_at(self):
        """Gets the created_at of this RealTimePaymentsTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this RealTimePaymentsTransfer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RealTimePaymentsTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this RealTimePaymentsTransfer.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creditor_name(self):
        """Gets the creditor_name of this RealTimePaymentsTransfer.

        The name of the transfer's recipient as provided by the sender.

        :return: The creditor_name of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this RealTimePaymentsTransfer.

        The name of the transfer's recipient as provided by the sender.

        :param creditor_name: The creditor_name of this RealTimePaymentsTransfer.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")

        self._creditor_name = creditor_name

    @property
    def currency(self):
        """Gets the currency of this RealTimePaymentsTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.

        :return: The currency of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RealTimePaymentsTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.

        :param currency: The currency of this RealTimePaymentsTransfer.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def destination_account_number(self):
        """Gets the destination_account_number of this RealTimePaymentsTransfer.

        The destination account number.

        :return: The destination_account_number of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._destination_account_number

    @destination_account_number.setter
    def destination_account_number(self, destination_account_number):
        """Sets the destination_account_number of this RealTimePaymentsTransfer.

        The destination account number.

        :param destination_account_number: The destination_account_number of this RealTimePaymentsTransfer.
        :type destination_account_number: str
        """
        if destination_account_number is None:
            raise ValueError("Invalid value for `destination_account_number`, must not be `None`")

        self._destination_account_number = destination_account_number

    @property
    def destination_routing_number(self):
        """Gets the destination_routing_number of this RealTimePaymentsTransfer.

        The destination American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The destination_routing_number of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._destination_routing_number

    @destination_routing_number.setter
    def destination_routing_number(self, destination_routing_number):
        """Sets the destination_routing_number of this RealTimePaymentsTransfer.

        The destination American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param destination_routing_number: The destination_routing_number of this RealTimePaymentsTransfer.
        :type destination_routing_number: str
        """
        if destination_routing_number is None:
            raise ValueError("Invalid value for `destination_routing_number`, must not be `None`")

        self._destination_routing_number = destination_routing_number

    @property
    def external_account_id(self):
        """Gets the external_account_id of this RealTimePaymentsTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :return: The external_account_id of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this RealTimePaymentsTransfer.

        The identifier of the External Account the transfer was made to, if any.

        :param external_account_id: The external_account_id of this RealTimePaymentsTransfer.
        :type external_account_id: str
        """
        if external_account_id is None:
            raise ValueError("Invalid value for `external_account_id`, must not be `None`")

        self._external_account_id = external_account_id

    @property
    def id(self):
        """Gets the id of this RealTimePaymentsTransfer.

        The Real Time Payments Transfer's identifier.

        :return: The id of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RealTimePaymentsTransfer.

        The Real Time Payments Transfer's identifier.

        :param id: The id of this RealTimePaymentsTransfer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def rejection(self):
        """Gets the rejection of this RealTimePaymentsTransfer.


        :return: The rejection of this RealTimePaymentsTransfer.
        :rtype: RealTimePaymentsTransferRejection
        """
        return self._rejection

    @rejection.setter
    def rejection(self, rejection):
        """Sets the rejection of this RealTimePaymentsTransfer.


        :param rejection: The rejection of this RealTimePaymentsTransfer.
        :type rejection: RealTimePaymentsTransferRejection
        """
        if rejection is None:
            raise ValueError("Invalid value for `rejection`, must not be `None`")

        self._rejection = rejection

    @property
    def remittance_information(self):
        """Gets the remittance_information of this RealTimePaymentsTransfer.

        Unstructured information that will show on the recipient's bank statement.

        :return: The remittance_information of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this RealTimePaymentsTransfer.

        Unstructured information that will show on the recipient's bank statement.

        :param remittance_information: The remittance_information of this RealTimePaymentsTransfer.
        :type remittance_information: str
        """
        if remittance_information is None:
            raise ValueError("Invalid value for `remittance_information`, must not be `None`")

        self._remittance_information = remittance_information

    @property
    def source_account_number_id(self):
        """Gets the source_account_number_id of this RealTimePaymentsTransfer.

        The Account Number the recipient will see as having sent the transfer.

        :return: The source_account_number_id of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._source_account_number_id

    @source_account_number_id.setter
    def source_account_number_id(self, source_account_number_id):
        """Sets the source_account_number_id of this RealTimePaymentsTransfer.

        The Account Number the recipient will see as having sent the transfer.

        :param source_account_number_id: The source_account_number_id of this RealTimePaymentsTransfer.
        :type source_account_number_id: str
        """
        if source_account_number_id is None:
            raise ValueError("Invalid value for `source_account_number_id`, must not be `None`")

        self._source_account_number_id = source_account_number_id

    @property
    def status(self):
        """Gets the status of this RealTimePaymentsTransfer.

        The lifecycle status of the transfer.

        :return: The status of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RealTimePaymentsTransfer.

        The lifecycle status of the transfer.

        :param status: The status of this RealTimePaymentsTransfer.
        :type status: str
        """
        allowed_values = ["pending_approval", "canceled", "pending_submission", "submitted", "complete", "rejected", "requires_attention"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this RealTimePaymentsTransfer.


        :return: The submission of this RealTimePaymentsTransfer.
        :rtype: RealTimePaymentsTransferSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this RealTimePaymentsTransfer.


        :param submission: The submission of this RealTimePaymentsTransfer.
        :type submission: RealTimePaymentsTransferSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def transaction_id(self):
        """Gets the transaction_id of this RealTimePaymentsTransfer.

        The Transaction funding the transfer once it is complete.

        :return: The transaction_id of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this RealTimePaymentsTransfer.

        The Transaction funding the transfer once it is complete.

        :param transaction_id: The transaction_id of this RealTimePaymentsTransfer.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this RealTimePaymentsTransfer.

        A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.

        :return: The type of this RealTimePaymentsTransfer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RealTimePaymentsTransfer.

        A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.

        :param type: The type of this RealTimePaymentsTransfer.
        :type type: str
        """
        allowed_values = ["real_time_payments_transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
