# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Identification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, number_last4: str=None):
        """Identification - a model defined in OpenAPI

        :param method: The method of this Identification.
        :param number_last4: The number_last4 of this Identification.
        """
        self.openapi_types = {
            'method': str,
            'number_last4': str
        }

        self.attribute_map = {
            'method': 'method',
            'number_last4': 'number_last4'
        }

        self._method = method
        self._number_last4 = number_last4

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Identification of this Identification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this Identification.

        A method that can be used to verify the individual's identity.

        :return: The method of this Identification.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Identification.

        A method that can be used to verify the individual's identity.

        :param method: The method of this Identification.
        :type method: str
        """
        allowed_values = ["social_security_number", "individual_taxpayer_identification_number", "passport", "drivers_license", "other"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def number_last4(self):
        """Gets the number_last4 of this Identification.

        The last 4 digits of the identification number that can be used to verify the individual's identity.

        :return: The number_last4 of this Identification.
        :rtype: str
        """
        return self._number_last4

    @number_last4.setter
    def number_last4(self, number_last4):
        """Sets the number_last4 of this Identification.

        The last 4 digits of the identification number that can be used to verify the individual's identity.

        :param number_last4: The number_last4 of this Identification.
        :type number_last4: str
        """
        if number_last4 is None:
            raise ValueError("Invalid value for `number_last4`, must not be `None`")

        self._number_last4 = number_last4
