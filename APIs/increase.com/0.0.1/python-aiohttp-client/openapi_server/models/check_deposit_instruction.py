# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDepositInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, back_image_file_id: str=None, check_deposit_id: str=None, currency: str=None, front_image_file_id: str=None):
        """CheckDepositInstruction - a model defined in OpenAPI

        :param amount: The amount of this CheckDepositInstruction.
        :param back_image_file_id: The back_image_file_id of this CheckDepositInstruction.
        :param check_deposit_id: The check_deposit_id of this CheckDepositInstruction.
        :param currency: The currency of this CheckDepositInstruction.
        :param front_image_file_id: The front_image_file_id of this CheckDepositInstruction.
        """
        self.openapi_types = {
            'amount': int,
            'back_image_file_id': str,
            'check_deposit_id': str,
            'currency': str,
            'front_image_file_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'back_image_file_id': 'back_image_file_id',
            'check_deposit_id': 'check_deposit_id',
            'currency': 'currency',
            'front_image_file_id': 'front_image_file_id'
        }

        self._amount = amount
        self._back_image_file_id = back_image_file_id
        self._check_deposit_id = check_deposit_id
        self._currency = currency
        self._front_image_file_id = front_image_file_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDepositInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Deposit_Instruction of this CheckDepositInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CheckDepositInstruction.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this CheckDepositInstruction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckDepositInstruction.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this CheckDepositInstruction.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def back_image_file_id(self):
        """Gets the back_image_file_id of this CheckDepositInstruction.

        The identifier of the File containing the image of the back of the check that was deposited.

        :return: The back_image_file_id of this CheckDepositInstruction.
        :rtype: str
        """
        return self._back_image_file_id

    @back_image_file_id.setter
    def back_image_file_id(self, back_image_file_id):
        """Sets the back_image_file_id of this CheckDepositInstruction.

        The identifier of the File containing the image of the back of the check that was deposited.

        :param back_image_file_id: The back_image_file_id of this CheckDepositInstruction.
        :type back_image_file_id: str
        """
        if back_image_file_id is None:
            raise ValueError("Invalid value for `back_image_file_id`, must not be `None`")

        self._back_image_file_id = back_image_file_id

    @property
    def check_deposit_id(self):
        """Gets the check_deposit_id of this CheckDepositInstruction.

        The identifier of the Check Deposit.

        :return: The check_deposit_id of this CheckDepositInstruction.
        :rtype: str
        """
        return self._check_deposit_id

    @check_deposit_id.setter
    def check_deposit_id(self, check_deposit_id):
        """Sets the check_deposit_id of this CheckDepositInstruction.

        The identifier of the Check Deposit.

        :param check_deposit_id: The check_deposit_id of this CheckDepositInstruction.
        :type check_deposit_id: str
        """
        if check_deposit_id is None:
            raise ValueError("Invalid value for `check_deposit_id`, must not be `None`")

        self._check_deposit_id = check_deposit_id

    @property
    def currency(self):
        """Gets the currency of this CheckDepositInstruction.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this CheckDepositInstruction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckDepositInstruction.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this CheckDepositInstruction.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def front_image_file_id(self):
        """Gets the front_image_file_id of this CheckDepositInstruction.

        The identifier of the File containing the image of the front of the check that was deposited.

        :return: The front_image_file_id of this CheckDepositInstruction.
        :rtype: str
        """
        return self._front_image_file_id

    @front_image_file_id.setter
    def front_image_file_id(self, front_image_file_id):
        """Sets the front_image_file_id of this CheckDepositInstruction.

        The identifier of the File containing the image of the front of the check that was deposited.

        :param front_image_file_id: The front_image_file_id of this CheckDepositInstruction.
        :type front_image_file_id: str
        """
        if front_image_file_id is None:
            raise ValueError("Invalid value for `front_image_file_id`, must not be `None`")

        self._front_image_file_id = front_image_file_id
