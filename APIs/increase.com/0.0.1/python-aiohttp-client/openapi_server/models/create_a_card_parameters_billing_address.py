# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateACardParametersBillingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, line1: str=None, line2: str=None, postal_code: str=None, state: str=None):
        """CreateACardParametersBillingAddress - a model defined in OpenAPI

        :param city: The city of this CreateACardParametersBillingAddress.
        :param line1: The line1 of this CreateACardParametersBillingAddress.
        :param line2: The line2 of this CreateACardParametersBillingAddress.
        :param postal_code: The postal_code of this CreateACardParametersBillingAddress.
        :param state: The state of this CreateACardParametersBillingAddress.
        """
        self.openapi_types = {
            'city': str,
            'line1': str,
            'line2': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            'line1': 'line1',
            'line2': 'line2',
            'postal_code': 'postal_code',
            'state': 'state'
        }

        self._city = city
        self._line1 = line1
        self._line2 = line2
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACardParametersBillingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_card_parameters_billing_address of this CreateACardParametersBillingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this CreateACardParametersBillingAddress.

        The city of the billing address.

        :return: The city of this CreateACardParametersBillingAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CreateACardParametersBillingAddress.

        The city of the billing address.

        :param city: The city of this CreateACardParametersBillingAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) > 200:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `200`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def line1(self):
        """Gets the line1 of this CreateACardParametersBillingAddress.

        The first line of the billing address.

        :return: The line1 of this CreateACardParametersBillingAddress.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this CreateACardParametersBillingAddress.

        The first line of the billing address.

        :param line1: The line1 of this CreateACardParametersBillingAddress.
        :type line1: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")
        if line1 is not None and len(line1) > 200:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `200`")
        if line1 is not None and len(line1) < 1:
            raise ValueError("Invalid value for `line1`, length must be greater than or equal to `1`")

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this CreateACardParametersBillingAddress.

        The second line of the billing address.

        :return: The line2 of this CreateACardParametersBillingAddress.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this CreateACardParametersBillingAddress.

        The second line of the billing address.

        :param line2: The line2 of this CreateACardParametersBillingAddress.
        :type line2: str
        """
        if line2 is not None and len(line2) > 200:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `200`")
        if line2 is not None and len(line2) < 1:
            raise ValueError("Invalid value for `line2`, length must be greater than or equal to `1`")

        self._line2 = line2

    @property
    def postal_code(self):
        """Gets the postal_code of this CreateACardParametersBillingAddress.

        The postal code of the billing address.

        :return: The postal_code of this CreateACardParametersBillingAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CreateACardParametersBillingAddress.

        The postal code of the billing address.

        :param postal_code: The postal_code of this CreateACardParametersBillingAddress.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) > 200:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `200`")
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this CreateACardParametersBillingAddress.

        The US state of the billing address.

        :return: The state of this CreateACardParametersBillingAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateACardParametersBillingAddress.

        The US state of the billing address.

        :param state: The state of this CreateACardParametersBillingAddress.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) > 200:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `200`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state
