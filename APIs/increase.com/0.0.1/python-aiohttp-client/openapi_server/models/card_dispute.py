# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_dispute_acceptance import CardDisputeAcceptance
from openapi_server.models.card_dispute_rejection import CardDisputeRejection
from openapi_server import util


class CardDispute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceptance: CardDisputeAcceptance=None, created_at: datetime=None, disputed_transaction_id: str=None, explanation: str=None, id: str=None, rejection: CardDisputeRejection=None, status: str=None, type: str=None):
        """CardDispute - a model defined in OpenAPI

        :param acceptance: The acceptance of this CardDispute.
        :param created_at: The created_at of this CardDispute.
        :param disputed_transaction_id: The disputed_transaction_id of this CardDispute.
        :param explanation: The explanation of this CardDispute.
        :param id: The id of this CardDispute.
        :param rejection: The rejection of this CardDispute.
        :param status: The status of this CardDispute.
        :param type: The type of this CardDispute.
        """
        self.openapi_types = {
            'acceptance': CardDisputeAcceptance,
            'created_at': datetime,
            'disputed_transaction_id': str,
            'explanation': str,
            'id': str,
            'rejection': CardDisputeRejection,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'acceptance': 'acceptance',
            'created_at': 'created_at',
            'disputed_transaction_id': 'disputed_transaction_id',
            'explanation': 'explanation',
            'id': 'id',
            'rejection': 'rejection',
            'status': 'status',
            'type': 'type'
        }

        self._acceptance = acceptance
        self._created_at = created_at
        self._disputed_transaction_id = disputed_transaction_id
        self._explanation = explanation
        self._id = id
        self._rejection = rejection
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDispute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The card_dispute of this CardDispute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceptance(self):
        """Gets the acceptance of this CardDispute.


        :return: The acceptance of this CardDispute.
        :rtype: CardDisputeAcceptance
        """
        return self._acceptance

    @acceptance.setter
    def acceptance(self, acceptance):
        """Sets the acceptance of this CardDispute.


        :param acceptance: The acceptance of this CardDispute.
        :type acceptance: CardDisputeAcceptance
        """
        if acceptance is None:
            raise ValueError("Invalid value for `acceptance`, must not be `None`")

        self._acceptance = acceptance

    @property
    def created_at(self):
        """Gets the created_at of this CardDispute.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.

        :return: The created_at of this CardDispute.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CardDispute.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.

        :param created_at: The created_at of this CardDispute.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def disputed_transaction_id(self):
        """Gets the disputed_transaction_id of this CardDispute.

        The identifier of the Transaction that was disputed.

        :return: The disputed_transaction_id of this CardDispute.
        :rtype: str
        """
        return self._disputed_transaction_id

    @disputed_transaction_id.setter
    def disputed_transaction_id(self, disputed_transaction_id):
        """Sets the disputed_transaction_id of this CardDispute.

        The identifier of the Transaction that was disputed.

        :param disputed_transaction_id: The disputed_transaction_id of this CardDispute.
        :type disputed_transaction_id: str
        """
        if disputed_transaction_id is None:
            raise ValueError("Invalid value for `disputed_transaction_id`, must not be `None`")

        self._disputed_transaction_id = disputed_transaction_id

    @property
    def explanation(self):
        """Gets the explanation of this CardDispute.

        Why you disputed the Transaction in question.

        :return: The explanation of this CardDispute.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this CardDispute.

        Why you disputed the Transaction in question.

        :param explanation: The explanation of this CardDispute.
        :type explanation: str
        """
        if explanation is None:
            raise ValueError("Invalid value for `explanation`, must not be `None`")

        self._explanation = explanation

    @property
    def id(self):
        """Gets the id of this CardDispute.

        The Card Dispute identifier.

        :return: The id of this CardDispute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardDispute.

        The Card Dispute identifier.

        :param id: The id of this CardDispute.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def rejection(self):
        """Gets the rejection of this CardDispute.


        :return: The rejection of this CardDispute.
        :rtype: CardDisputeRejection
        """
        return self._rejection

    @rejection.setter
    def rejection(self, rejection):
        """Sets the rejection of this CardDispute.


        :param rejection: The rejection of this CardDispute.
        :type rejection: CardDisputeRejection
        """
        if rejection is None:
            raise ValueError("Invalid value for `rejection`, must not be `None`")

        self._rejection = rejection

    @property
    def status(self):
        """Gets the status of this CardDispute.

        The results of the Dispute investigation.

        :return: The status of this CardDispute.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardDispute.

        The results of the Dispute investigation.

        :param status: The status of this CardDispute.
        :type status: str
        """
        allowed_values = ["pending_reviewing", "accepted", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this CardDispute.

        A constant representing the object's type. For this resource it will always be `card_dispute`.

        :return: The type of this CardDispute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CardDispute.

        A constant representing the object's type. For this resource it will always be `card_dispute`.

        :param type: The type of this CardDispute.
        :type type: str
        """
        allowed_values = ["card_dispute"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
