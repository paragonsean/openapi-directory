# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wire_drawdown_request_submission import WireDrawdownRequestSubmission
from openapi_server import util


class WireDrawdownRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_id: str=None, amount: int=None, currency: str=None, fulfillment_transaction_id: str=None, id: str=None, message_to_recipient: str=None, recipient_account_number: str=None, recipient_address_line1: str=None, recipient_address_line2: str=None, recipient_address_line3: str=None, recipient_name: str=None, recipient_routing_number: str=None, status: str=None, submission: WireDrawdownRequestSubmission=None, type: str=None):
        """WireDrawdownRequest - a model defined in OpenAPI

        :param account_number_id: The account_number_id of this WireDrawdownRequest.
        :param amount: The amount of this WireDrawdownRequest.
        :param currency: The currency of this WireDrawdownRequest.
        :param fulfillment_transaction_id: The fulfillment_transaction_id of this WireDrawdownRequest.
        :param id: The id of this WireDrawdownRequest.
        :param message_to_recipient: The message_to_recipient of this WireDrawdownRequest.
        :param recipient_account_number: The recipient_account_number of this WireDrawdownRequest.
        :param recipient_address_line1: The recipient_address_line1 of this WireDrawdownRequest.
        :param recipient_address_line2: The recipient_address_line2 of this WireDrawdownRequest.
        :param recipient_address_line3: The recipient_address_line3 of this WireDrawdownRequest.
        :param recipient_name: The recipient_name of this WireDrawdownRequest.
        :param recipient_routing_number: The recipient_routing_number of this WireDrawdownRequest.
        :param status: The status of this WireDrawdownRequest.
        :param submission: The submission of this WireDrawdownRequest.
        :param type: The type of this WireDrawdownRequest.
        """
        self.openapi_types = {
            'account_number_id': str,
            'amount': int,
            'currency': str,
            'fulfillment_transaction_id': str,
            'id': str,
            'message_to_recipient': str,
            'recipient_account_number': str,
            'recipient_address_line1': str,
            'recipient_address_line2': str,
            'recipient_address_line3': str,
            'recipient_name': str,
            'recipient_routing_number': str,
            'status': str,
            'submission': WireDrawdownRequestSubmission,
            'type': str
        }

        self.attribute_map = {
            'account_number_id': 'account_number_id',
            'amount': 'amount',
            'currency': 'currency',
            'fulfillment_transaction_id': 'fulfillment_transaction_id',
            'id': 'id',
            'message_to_recipient': 'message_to_recipient',
            'recipient_account_number': 'recipient_account_number',
            'recipient_address_line1': 'recipient_address_line1',
            'recipient_address_line2': 'recipient_address_line2',
            'recipient_address_line3': 'recipient_address_line3',
            'recipient_name': 'recipient_name',
            'recipient_routing_number': 'recipient_routing_number',
            'status': 'status',
            'submission': 'submission',
            'type': 'type'
        }

        self._account_number_id = account_number_id
        self._amount = amount
        self._currency = currency
        self._fulfillment_transaction_id = fulfillment_transaction_id
        self._id = id
        self._message_to_recipient = message_to_recipient
        self._recipient_account_number = recipient_account_number
        self._recipient_address_line1 = recipient_address_line1
        self._recipient_address_line2 = recipient_address_line2
        self._recipient_address_line3 = recipient_address_line3
        self._recipient_name = recipient_name
        self._recipient_routing_number = recipient_routing_number
        self._status = status
        self._submission = submission
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WireDrawdownRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The wire_drawdown_request of this WireDrawdownRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_id(self):
        """Gets the account_number_id of this WireDrawdownRequest.

        The Account Number to which the recipient of this request is being requested to send funds.

        :return: The account_number_id of this WireDrawdownRequest.
        :rtype: str
        """
        return self._account_number_id

    @account_number_id.setter
    def account_number_id(self, account_number_id):
        """Sets the account_number_id of this WireDrawdownRequest.

        The Account Number to which the recipient of this request is being requested to send funds.

        :param account_number_id: The account_number_id of this WireDrawdownRequest.
        :type account_number_id: str
        """
        if account_number_id is None:
            raise ValueError("Invalid value for `account_number_id`, must not be `None`")

        self._account_number_id = account_number_id

    @property
    def amount(self):
        """Gets the amount of this WireDrawdownRequest.

        The amount being requested in cents.

        :return: The amount of this WireDrawdownRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WireDrawdownRequest.

        The amount being requested in cents.

        :param amount: The amount of this WireDrawdownRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this WireDrawdownRequest.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".

        :return: The currency of this WireDrawdownRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WireDrawdownRequest.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \"USD\".

        :param currency: The currency of this WireDrawdownRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def fulfillment_transaction_id(self):
        """Gets the fulfillment_transaction_id of this WireDrawdownRequest.

        If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.

        :return: The fulfillment_transaction_id of this WireDrawdownRequest.
        :rtype: str
        """
        return self._fulfillment_transaction_id

    @fulfillment_transaction_id.setter
    def fulfillment_transaction_id(self, fulfillment_transaction_id):
        """Sets the fulfillment_transaction_id of this WireDrawdownRequest.

        If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.

        :param fulfillment_transaction_id: The fulfillment_transaction_id of this WireDrawdownRequest.
        :type fulfillment_transaction_id: str
        """
        if fulfillment_transaction_id is None:
            raise ValueError("Invalid value for `fulfillment_transaction_id`, must not be `None`")

        self._fulfillment_transaction_id = fulfillment_transaction_id

    @property
    def id(self):
        """Gets the id of this WireDrawdownRequest.

        The Wire drawdown request identifier.

        :return: The id of this WireDrawdownRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WireDrawdownRequest.

        The Wire drawdown request identifier.

        :param id: The id of this WireDrawdownRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this WireDrawdownRequest.

        The message the recipient will see as part of the drawdown request.

        :return: The message_to_recipient of this WireDrawdownRequest.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this WireDrawdownRequest.

        The message the recipient will see as part of the drawdown request.

        :param message_to_recipient: The message_to_recipient of this WireDrawdownRequest.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")

        self._message_to_recipient = message_to_recipient

    @property
    def recipient_account_number(self):
        """Gets the recipient_account_number of this WireDrawdownRequest.

        The drawdown request's recipient's account number.

        :return: The recipient_account_number of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_account_number

    @recipient_account_number.setter
    def recipient_account_number(self, recipient_account_number):
        """Sets the recipient_account_number of this WireDrawdownRequest.

        The drawdown request's recipient's account number.

        :param recipient_account_number: The recipient_account_number of this WireDrawdownRequest.
        :type recipient_account_number: str
        """
        if recipient_account_number is None:
            raise ValueError("Invalid value for `recipient_account_number`, must not be `None`")

        self._recipient_account_number = recipient_account_number

    @property
    def recipient_address_line1(self):
        """Gets the recipient_address_line1 of this WireDrawdownRequest.

        Line 1 of the drawdown request's recipient's address.

        :return: The recipient_address_line1 of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_address_line1

    @recipient_address_line1.setter
    def recipient_address_line1(self, recipient_address_line1):
        """Sets the recipient_address_line1 of this WireDrawdownRequest.

        Line 1 of the drawdown request's recipient's address.

        :param recipient_address_line1: The recipient_address_line1 of this WireDrawdownRequest.
        :type recipient_address_line1: str
        """
        if recipient_address_line1 is None:
            raise ValueError("Invalid value for `recipient_address_line1`, must not be `None`")

        self._recipient_address_line1 = recipient_address_line1

    @property
    def recipient_address_line2(self):
        """Gets the recipient_address_line2 of this WireDrawdownRequest.

        Line 2 of the drawdown request's recipient's address.

        :return: The recipient_address_line2 of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_address_line2

    @recipient_address_line2.setter
    def recipient_address_line2(self, recipient_address_line2):
        """Sets the recipient_address_line2 of this WireDrawdownRequest.

        Line 2 of the drawdown request's recipient's address.

        :param recipient_address_line2: The recipient_address_line2 of this WireDrawdownRequest.
        :type recipient_address_line2: str
        """
        if recipient_address_line2 is None:
            raise ValueError("Invalid value for `recipient_address_line2`, must not be `None`")

        self._recipient_address_line2 = recipient_address_line2

    @property
    def recipient_address_line3(self):
        """Gets the recipient_address_line3 of this WireDrawdownRequest.

        Line 3 of the drawdown request's recipient's address.

        :return: The recipient_address_line3 of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_address_line3

    @recipient_address_line3.setter
    def recipient_address_line3(self, recipient_address_line3):
        """Sets the recipient_address_line3 of this WireDrawdownRequest.

        Line 3 of the drawdown request's recipient's address.

        :param recipient_address_line3: The recipient_address_line3 of this WireDrawdownRequest.
        :type recipient_address_line3: str
        """
        if recipient_address_line3 is None:
            raise ValueError("Invalid value for `recipient_address_line3`, must not be `None`")

        self._recipient_address_line3 = recipient_address_line3

    @property
    def recipient_name(self):
        """Gets the recipient_name of this WireDrawdownRequest.

        The drawdown request's recipient's name.

        :return: The recipient_name of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this WireDrawdownRequest.

        The drawdown request's recipient's name.

        :param recipient_name: The recipient_name of this WireDrawdownRequest.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def recipient_routing_number(self):
        """Gets the recipient_routing_number of this WireDrawdownRequest.

        The drawdown request's recipient's routing number.

        :return: The recipient_routing_number of this WireDrawdownRequest.
        :rtype: str
        """
        return self._recipient_routing_number

    @recipient_routing_number.setter
    def recipient_routing_number(self, recipient_routing_number):
        """Sets the recipient_routing_number of this WireDrawdownRequest.

        The drawdown request's recipient's routing number.

        :param recipient_routing_number: The recipient_routing_number of this WireDrawdownRequest.
        :type recipient_routing_number: str
        """
        if recipient_routing_number is None:
            raise ValueError("Invalid value for `recipient_routing_number`, must not be `None`")

        self._recipient_routing_number = recipient_routing_number

    @property
    def status(self):
        """Gets the status of this WireDrawdownRequest.

        The lifecycle status of the drawdown request.

        :return: The status of this WireDrawdownRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WireDrawdownRequest.

        The lifecycle status of the drawdown request.

        :param status: The status of this WireDrawdownRequest.
        :type status: str
        """
        allowed_values = ["pending_submission", "pending_response", "fulfilled", "refused"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission(self):
        """Gets the submission of this WireDrawdownRequest.


        :return: The submission of this WireDrawdownRequest.
        :rtype: WireDrawdownRequestSubmission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this WireDrawdownRequest.


        :param submission: The submission of this WireDrawdownRequest.
        :type submission: WireDrawdownRequestSubmission
        """
        if submission is None:
            raise ValueError("Invalid value for `submission`, must not be `None`")

        self._submission = submission

    @property
    def type(self):
        """Gets the type of this WireDrawdownRequest.

        A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.

        :return: The type of this WireDrawdownRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WireDrawdownRequest.

        A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.

        :param type: The type of this WireDrawdownRequest.
        :type type: str
        """
        allowed_values = ["wire_drawdown_request"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
