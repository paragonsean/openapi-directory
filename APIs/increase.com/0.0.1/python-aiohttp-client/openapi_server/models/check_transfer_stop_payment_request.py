# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckTransferStopPaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, requested_at: datetime=None, transaction_id: str=None, transfer_id: str=None, type: str=None):
        """CheckTransferStopPaymentRequest - a model defined in OpenAPI

        :param requested_at: The requested_at of this CheckTransferStopPaymentRequest.
        :param transaction_id: The transaction_id of this CheckTransferStopPaymentRequest.
        :param transfer_id: The transfer_id of this CheckTransferStopPaymentRequest.
        :param type: The type of this CheckTransferStopPaymentRequest.
        """
        self.openapi_types = {
            'requested_at': datetime,
            'transaction_id': str,
            'transfer_id': str,
            'type': str
        }

        self.attribute_map = {
            'requested_at': 'requested_at',
            'transaction_id': 'transaction_id',
            'transfer_id': 'transfer_id',
            'type': 'type'
        }

        self._requested_at = requested_at
        self._transaction_id = transaction_id
        self._transfer_id = transfer_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransferStopPaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Transfer_Stop_Payment_Request of this CheckTransferStopPaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def requested_at(self):
        """Gets the requested_at of this CheckTransferStopPaymentRequest.

        The time the stop-payment was requested.

        :return: The requested_at of this CheckTransferStopPaymentRequest.
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this CheckTransferStopPaymentRequest.

        The time the stop-payment was requested.

        :param requested_at: The requested_at of this CheckTransferStopPaymentRequest.
        :type requested_at: datetime
        """
        if requested_at is None:
            raise ValueError("Invalid value for `requested_at`, must not be `None`")

        self._requested_at = requested_at

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CheckTransferStopPaymentRequest.

        The transaction ID of the corresponding credit transaction.

        :return: The transaction_id of this CheckTransferStopPaymentRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CheckTransferStopPaymentRequest.

        The transaction ID of the corresponding credit transaction.

        :param transaction_id: The transaction_id of this CheckTransferStopPaymentRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def transfer_id(self):
        """Gets the transfer_id of this CheckTransferStopPaymentRequest.

        The ID of the check transfer that was stopped.

        :return: The transfer_id of this CheckTransferStopPaymentRequest.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this CheckTransferStopPaymentRequest.

        The ID of the check transfer that was stopped.

        :param transfer_id: The transfer_id of this CheckTransferStopPaymentRequest.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id

    @property
    def type(self):
        """Gets the type of this CheckTransferStopPaymentRequest.

        A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.

        :return: The type of this CheckTransferStopPaymentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckTransferStopPaymentRequest.

        A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.

        :param type: The type of this CheckTransferStopPaymentRequest.
        :type type: str
        """
        allowed_values = ["check_transfer_stop_payment_request"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
