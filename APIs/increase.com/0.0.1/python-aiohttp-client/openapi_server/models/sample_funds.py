# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SampleFunds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, originator: str=None):
        """SampleFunds - a model defined in OpenAPI

        :param originator: The originator of this SampleFunds.
        """
        self.openapi_types = {
            'originator': str
        }

        self.attribute_map = {
            'originator': 'originator'
        }

        self._originator = originator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SampleFunds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_Funds of this SampleFunds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def originator(self):
        """Gets the originator of this SampleFunds.

        Where the sample funds came from.

        :return: The originator of this SampleFunds.
        :rtype: str
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this SampleFunds.

        Where the sample funds came from.

        :param originator: The originator of this SampleFunds.
        :type originator: str
        """
        if originator is None:
            raise ValueError("Invalid value for `originator`, must not be `None`")

        self._originator = originator
