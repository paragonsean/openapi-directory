# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_number: str=None, created_at: datetime=None, id: str=None, name: str=None, routing_number: str=None, status: str=None, type: str=None):
        """AccountNumber - a model defined in OpenAPI

        :param account_id: The account_id of this AccountNumber.
        :param account_number: The account_number of this AccountNumber.
        :param created_at: The created_at of this AccountNumber.
        :param id: The id of this AccountNumber.
        :param name: The name of this AccountNumber.
        :param routing_number: The routing_number of this AccountNumber.
        :param status: The status of this AccountNumber.
        :param type: The type of this AccountNumber.
        """
        self.openapi_types = {
            'account_id': str,
            'account_number': str,
            'created_at': datetime,
            'id': str,
            'name': str,
            'routing_number': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'account_number': 'account_number',
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'routing_number': 'routing_number',
            'status': 'status',
            'type': 'type'
        }

        self._account_id = account_id
        self._account_number = account_number
        self._created_at = created_at
        self._id = id
        self._name = name
        self._routing_number = routing_number
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The account_number of this AccountNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountNumber.

        The identifier for the account this Account Number belongs to.

        :return: The account_id of this AccountNumber.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountNumber.

        The identifier for the account this Account Number belongs to.

        :param account_id: The account_id of this AccountNumber.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this AccountNumber.

        The account number.

        :return: The account_number of this AccountNumber.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountNumber.

        The account number.

        :param account_number: The account_number of this AccountNumber.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def created_at(self):
        """Gets the created_at of this AccountNumber.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.

        :return: The created_at of this AccountNumber.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountNumber.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.

        :param created_at: The created_at of this AccountNumber.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this AccountNumber.

        The Account Number identifier.

        :return: The id of this AccountNumber.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountNumber.

        The Account Number identifier.

        :param id: The id of this AccountNumber.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountNumber.

        The name you choose for the Account Number.

        :return: The name of this AccountNumber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountNumber.

        The name you choose for the Account Number.

        :param name: The name of this AccountNumber.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def routing_number(self):
        """Gets the routing_number of this AccountNumber.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The routing_number of this AccountNumber.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this AccountNumber.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param routing_number: The routing_number of this AccountNumber.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def status(self):
        """Gets the status of this AccountNumber.

        This indicates if payments can be made to the Account Number.

        :return: The status of this AccountNumber.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountNumber.

        This indicates if payments can be made to the Account Number.

        :param status: The status of this AccountNumber.
        :type status: str
        """
        allowed_values = ["active", "disabled", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this AccountNumber.

        A constant representing the object's type. For this resource it will always be `account_number`.

        :return: The type of this AccountNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountNumber.

        A constant representing the object's type. For this resource it will always be `account_number`.

        :param type: The type of this AccountNumber.
        :type type: str
        """
        allowed_values = ["account_number"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
