# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_an_entity_parameters_trust_trustees_inner_individual import CreateAnEntityParametersTrustTrusteesInnerIndividual
from openapi_server import util


class CreateAnEntityParametersTrustTrusteesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, individual: CreateAnEntityParametersTrustTrusteesInnerIndividual=None, structure: str=None):
        """CreateAnEntityParametersTrustTrusteesInner - a model defined in OpenAPI

        :param individual: The individual of this CreateAnEntityParametersTrustTrusteesInner.
        :param structure: The structure of this CreateAnEntityParametersTrustTrusteesInner.
        """
        self.openapi_types = {
            'individual': CreateAnEntityParametersTrustTrusteesInnerIndividual,
            'structure': str
        }

        self.attribute_map = {
            'individual': 'individual',
            'structure': 'structure'
        }

        self._individual = individual
        self._structure = structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersTrustTrusteesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_trust_trustees_inner of this CreateAnEntityParametersTrustTrusteesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def individual(self):
        """Gets the individual of this CreateAnEntityParametersTrustTrusteesInner.


        :return: The individual of this CreateAnEntityParametersTrustTrusteesInner.
        :rtype: CreateAnEntityParametersTrustTrusteesInnerIndividual
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this CreateAnEntityParametersTrustTrusteesInner.


        :param individual: The individual of this CreateAnEntityParametersTrustTrusteesInner.
        :type individual: CreateAnEntityParametersTrustTrusteesInnerIndividual
        """

        self._individual = individual

    @property
    def structure(self):
        """Gets the structure of this CreateAnEntityParametersTrustTrusteesInner.

        The structure of the trustee.

        :return: The structure of this CreateAnEntityParametersTrustTrusteesInner.
        :rtype: str
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this CreateAnEntityParametersTrustTrusteesInner.

        The structure of the trustee.

        :param structure: The structure of this CreateAnEntityParametersTrustTrusteesInner.
        :type structure: str
        """
        allowed_values = ["individual"]  # noqa: E501
        if structure not in allowed_values:
            raise ValueError(
                "Invalid value for `structure` ({0}), must be one of {1}"
                .format(structure, allowed_values)
            )

        self._structure = structure
