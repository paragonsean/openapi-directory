# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Visa(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, electronic_commerce_indicator: str=None, point_of_service_entry_mode: str=None):
        """Visa - a model defined in OpenAPI

        :param electronic_commerce_indicator: The electronic_commerce_indicator of this Visa.
        :param point_of_service_entry_mode: The point_of_service_entry_mode of this Visa.
        """
        self.openapi_types = {
            'electronic_commerce_indicator': str,
            'point_of_service_entry_mode': str
        }

        self.attribute_map = {
            'electronic_commerce_indicator': 'electronic_commerce_indicator',
            'point_of_service_entry_mode': 'point_of_service_entry_mode'
        }

        self._electronic_commerce_indicator = electronic_commerce_indicator
        self._point_of_service_entry_mode = point_of_service_entry_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Visa':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Visa of this Visa.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def electronic_commerce_indicator(self):
        """Gets the electronic_commerce_indicator of this Visa.

        For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.

        :return: The electronic_commerce_indicator of this Visa.
        :rtype: str
        """
        return self._electronic_commerce_indicator

    @electronic_commerce_indicator.setter
    def electronic_commerce_indicator(self, electronic_commerce_indicator):
        """Sets the electronic_commerce_indicator of this Visa.

        For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.

        :param electronic_commerce_indicator: The electronic_commerce_indicator of this Visa.
        :type electronic_commerce_indicator: str
        """
        allowed_values = [None,"mail_phone_order", "recurring", "installment", "unknown_mail_phone_order", "secure_electronic_commerce", "non_authenticated_security_transaction_at_3ds_capable_merchant", "non_authenticated_security_transaction", "non_secure_transaction"]  # noqa: E501
        if electronic_commerce_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `electronic_commerce_indicator` ({0}), must be one of {1}"
                .format(electronic_commerce_indicator, allowed_values)
            )

        self._electronic_commerce_indicator = electronic_commerce_indicator

    @property
    def point_of_service_entry_mode(self):
        """Gets the point_of_service_entry_mode of this Visa.

        The method used to enter the cardholder's primary account number and card expiration date

        :return: The point_of_service_entry_mode of this Visa.
        :rtype: str
        """
        return self._point_of_service_entry_mode

    @point_of_service_entry_mode.setter
    def point_of_service_entry_mode(self, point_of_service_entry_mode):
        """Sets the point_of_service_entry_mode of this Visa.

        The method used to enter the cardholder's primary account number and card expiration date

        :param point_of_service_entry_mode: The point_of_service_entry_mode of this Visa.
        :type point_of_service_entry_mode: str
        """
        allowed_values = [None,"manual", "magnetic_stripe_no_cvv", "optical_code", "integrated_circuit_card", "contactless", "credential_on_file", "magnetic_stripe", "contactless_magnetic_stripe", "integrated_circuit_card_no_cvv"]  # noqa: E501
        if point_of_service_entry_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `point_of_service_entry_mode` ({0}), must be one of {1}"
                .format(point_of_service_entry_mode, allowed_values)
            )

        self._point_of_service_entry_mode = point_of_service_entry_mode
