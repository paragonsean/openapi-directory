# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_a_card_parameters_billing_address import CreateACardParametersBillingAddress
from openapi_server.models.create_a_card_parameters_digital_wallet import CreateACardParametersDigitalWallet
from openapi_server import util


class CreateACardParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, billing_address: CreateACardParametersBillingAddress=None, description: str=None, digital_wallet: CreateACardParametersDigitalWallet=None):
        """CreateACardParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateACardParameters.
        :param billing_address: The billing_address of this CreateACardParameters.
        :param description: The description of this CreateACardParameters.
        :param digital_wallet: The digital_wallet of this CreateACardParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'billing_address': CreateACardParametersBillingAddress,
            'description': str,
            'digital_wallet': CreateACardParametersDigitalWallet
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'billing_address': 'billing_address',
            'description': 'description',
            'digital_wallet': 'digital_wallet'
        }

        self._account_id = account_id
        self._billing_address = billing_address
        self._description = description
        self._digital_wallet = digital_wallet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACardParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_card_parameters of this CreateACardParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateACardParameters.

        The Account the card should belong to.

        :return: The account_id of this CreateACardParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateACardParameters.

        The Account the card should belong to.

        :param account_id: The account_id of this CreateACardParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def billing_address(self):
        """Gets the billing_address of this CreateACardParameters.


        :return: The billing_address of this CreateACardParameters.
        :rtype: CreateACardParametersBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreateACardParameters.


        :param billing_address: The billing_address of this CreateACardParameters.
        :type billing_address: CreateACardParametersBillingAddress
        """

        self._billing_address = billing_address

    @property
    def description(self):
        """Gets the description of this CreateACardParameters.

        The description you choose to give the card.

        :return: The description of this CreateACardParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateACardParameters.

        The description you choose to give the card.

        :param description: The description of this CreateACardParameters.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def digital_wallet(self):
        """Gets the digital_wallet of this CreateACardParameters.


        :return: The digital_wallet of this CreateACardParameters.
        :rtype: CreateACardParametersDigitalWallet
        """
        return self._digital_wallet

    @digital_wallet.setter
    def digital_wallet(self, digital_wallet):
        """Sets the digital_wallet of this CreateACardParameters.


        :param digital_wallet: The digital_wallet of this CreateACardParameters.
        :type digital_wallet: CreateACardParametersDigitalWallet
        """

        self._digital_wallet = digital_wallet
