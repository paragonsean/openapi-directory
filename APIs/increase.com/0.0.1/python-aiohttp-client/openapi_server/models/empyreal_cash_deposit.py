# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmpyrealCashDeposit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, bag_id: str=None, deposit_date: datetime=None):
        """EmpyrealCashDeposit - a model defined in OpenAPI

        :param amount: The amount of this EmpyrealCashDeposit.
        :param bag_id: The bag_id of this EmpyrealCashDeposit.
        :param deposit_date: The deposit_date of this EmpyrealCashDeposit.
        """
        self.openapi_types = {
            'amount': int,
            'bag_id': str,
            'deposit_date': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'bag_id': 'bag_id',
            'deposit_date': 'deposit_date'
        }

        self._amount = amount
        self._bag_id = bag_id
        self._deposit_date = deposit_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmpyrealCashDeposit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Empyreal_Cash_Deposit of this EmpyrealCashDeposit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this EmpyrealCashDeposit.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this EmpyrealCashDeposit.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EmpyrealCashDeposit.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this EmpyrealCashDeposit.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def bag_id(self):
        """Gets the bag_id of this EmpyrealCashDeposit.

        

        :return: The bag_id of this EmpyrealCashDeposit.
        :rtype: str
        """
        return self._bag_id

    @bag_id.setter
    def bag_id(self, bag_id):
        """Sets the bag_id of this EmpyrealCashDeposit.

        

        :param bag_id: The bag_id of this EmpyrealCashDeposit.
        :type bag_id: str
        """
        if bag_id is None:
            raise ValueError("Invalid value for `bag_id`, must not be `None`")

        self._bag_id = bag_id

    @property
    def deposit_date(self):
        """Gets the deposit_date of this EmpyrealCashDeposit.

        

        :return: The deposit_date of this EmpyrealCashDeposit.
        :rtype: datetime
        """
        return self._deposit_date

    @deposit_date.setter
    def deposit_date(self, deposit_date):
        """Sets the deposit_date of this EmpyrealCashDeposit.

        

        :param deposit_date: The deposit_date of this EmpyrealCashDeposit.
        :type deposit_date: datetime
        """
        if deposit_date is None:
            raise ValueError("Invalid value for `deposit_date`, must not be `None`")

        self._deposit_date = deposit_date
