# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WireTransferInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, amount: int=None, message_to_recipient: str=None, routing_number: str=None, transfer_id: str=None):
        """WireTransferInstruction - a model defined in OpenAPI

        :param account_number: The account_number of this WireTransferInstruction.
        :param amount: The amount of this WireTransferInstruction.
        :param message_to_recipient: The message_to_recipient of this WireTransferInstruction.
        :param routing_number: The routing_number of this WireTransferInstruction.
        :param transfer_id: The transfer_id of this WireTransferInstruction.
        """
        self.openapi_types = {
            'account_number': str,
            'amount': int,
            'message_to_recipient': str,
            'routing_number': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'amount': 'amount',
            'message_to_recipient': 'message_to_recipient',
            'routing_number': 'routing_number',
            'transfer_id': 'transfer_id'
        }

        self._account_number = account_number
        self._amount = amount
        self._message_to_recipient = message_to_recipient
        self._routing_number = routing_number
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WireTransferInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Wire_Transfer_Instruction of this WireTransferInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this WireTransferInstruction.

        

        :return: The account_number of this WireTransferInstruction.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this WireTransferInstruction.

        

        :param account_number: The account_number of this WireTransferInstruction.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this WireTransferInstruction.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this WireTransferInstruction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WireTransferInstruction.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this WireTransferInstruction.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def message_to_recipient(self):
        """Gets the message_to_recipient of this WireTransferInstruction.

        

        :return: The message_to_recipient of this WireTransferInstruction.
        :rtype: str
        """
        return self._message_to_recipient

    @message_to_recipient.setter
    def message_to_recipient(self, message_to_recipient):
        """Sets the message_to_recipient of this WireTransferInstruction.

        

        :param message_to_recipient: The message_to_recipient of this WireTransferInstruction.
        :type message_to_recipient: str
        """
        if message_to_recipient is None:
            raise ValueError("Invalid value for `message_to_recipient`, must not be `None`")

        self._message_to_recipient = message_to_recipient

    @property
    def routing_number(self):
        """Gets the routing_number of this WireTransferInstruction.

        

        :return: The routing_number of this WireTransferInstruction.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this WireTransferInstruction.

        

        :param routing_number: The routing_number of this WireTransferInstruction.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def transfer_id(self):
        """Gets the transfer_id of this WireTransferInstruction.

        

        :return: The transfer_id of this WireTransferInstruction.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this WireTransferInstruction.

        

        :param transfer_id: The transfer_id of this WireTransferInstruction.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
