# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ACHCheckConversionReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, return_reason_code: str=None):
        """ACHCheckConversionReturn - a model defined in OpenAPI

        :param amount: The amount of this ACHCheckConversionReturn.
        :param return_reason_code: The return_reason_code of this ACHCheckConversionReturn.
        """
        self.openapi_types = {
            'amount': int,
            'return_reason_code': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'return_reason_code': 'return_reason_code'
        }

        self._amount = amount
        self._return_reason_code = return_reason_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ACHCheckConversionReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ACH_Check_Conversion_Return of this ACHCheckConversionReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ACHCheckConversionReturn.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this ACHCheckConversionReturn.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ACHCheckConversionReturn.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this ACHCheckConversionReturn.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def return_reason_code(self):
        """Gets the return_reason_code of this ACHCheckConversionReturn.

        Why the transfer was returned.

        :return: The return_reason_code of this ACHCheckConversionReturn.
        :rtype: str
        """
        return self._return_reason_code

    @return_reason_code.setter
    def return_reason_code(self, return_reason_code):
        """Sets the return_reason_code of this ACHCheckConversionReturn.

        Why the transfer was returned.

        :param return_reason_code: The return_reason_code of this ACHCheckConversionReturn.
        :type return_reason_code: str
        """
        if return_reason_code is None:
            raise ValueError("Invalid value for `return_reason_code`, must not be `None`")

        self._return_reason_code = return_reason_code
