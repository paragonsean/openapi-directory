# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateABookkeepingAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, compliance_category: str=None, entity_id: str=None, name: str=None):
        """CreateABookkeepingAccountParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateABookkeepingAccountParameters.
        :param compliance_category: The compliance_category of this CreateABookkeepingAccountParameters.
        :param entity_id: The entity_id of this CreateABookkeepingAccountParameters.
        :param name: The name of this CreateABookkeepingAccountParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'compliance_category': str,
            'entity_id': str,
            'name': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'compliance_category': 'compliance_category',
            'entity_id': 'entity_id',
            'name': 'name'
        }

        self._account_id = account_id
        self._compliance_category = compliance_category
        self._entity_id = entity_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateABookkeepingAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_bookkeeping_account_parameters of this CreateABookkeepingAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateABookkeepingAccountParameters.

        The entity, if `compliance_category` is `commingled_cash`.

        :return: The account_id of this CreateABookkeepingAccountParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateABookkeepingAccountParameters.

        The entity, if `compliance_category` is `commingled_cash`.

        :param account_id: The account_id of this CreateABookkeepingAccountParameters.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def compliance_category(self):
        """Gets the compliance_category of this CreateABookkeepingAccountParameters.

        The account compliance category.

        :return: The compliance_category of this CreateABookkeepingAccountParameters.
        :rtype: str
        """
        return self._compliance_category

    @compliance_category.setter
    def compliance_category(self, compliance_category):
        """Sets the compliance_category of this CreateABookkeepingAccountParameters.

        The account compliance category.

        :param compliance_category: The compliance_category of this CreateABookkeepingAccountParameters.
        :type compliance_category: str
        """
        allowed_values = ["commingled_cash", "customer_balance"]  # noqa: E501
        if compliance_category not in allowed_values:
            raise ValueError(
                "Invalid value for `compliance_category` ({0}), must be one of {1}"
                .format(compliance_category, allowed_values)
            )

        self._compliance_category = compliance_category

    @property
    def entity_id(self):
        """Gets the entity_id of this CreateABookkeepingAccountParameters.

        The entity, if `compliance_category` is `customer_balance`.

        :return: The entity_id of this CreateABookkeepingAccountParameters.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CreateABookkeepingAccountParameters.

        The entity, if `compliance_category` is `customer_balance`.

        :param entity_id: The entity_id of this CreateABookkeepingAccountParameters.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """Gets the name of this CreateABookkeepingAccountParameters.

        The name you choose for the account.

        :return: The name of this CreateABookkeepingAccountParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateABookkeepingAccountParameters.

        The name you choose for the account.

        :param name: The name of this CreateABookkeepingAccountParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
