# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutingNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ach_transfers: str=None, name: str=None, real_time_payments_transfers: str=None, routing_number: str=None, type: str=None, wire_transfers: str=None):
        """RoutingNumber - a model defined in OpenAPI

        :param ach_transfers: The ach_transfers of this RoutingNumber.
        :param name: The name of this RoutingNumber.
        :param real_time_payments_transfers: The real_time_payments_transfers of this RoutingNumber.
        :param routing_number: The routing_number of this RoutingNumber.
        :param type: The type of this RoutingNumber.
        :param wire_transfers: The wire_transfers of this RoutingNumber.
        """
        self.openapi_types = {
            'ach_transfers': str,
            'name': str,
            'real_time_payments_transfers': str,
            'routing_number': str,
            'type': str,
            'wire_transfers': str
        }

        self.attribute_map = {
            'ach_transfers': 'ach_transfers',
            'name': 'name',
            'real_time_payments_transfers': 'real_time_payments_transfers',
            'routing_number': 'routing_number',
            'type': 'type',
            'wire_transfers': 'wire_transfers'
        }

        self._ach_transfers = ach_transfers
        self._name = name
        self._real_time_payments_transfers = real_time_payments_transfers
        self._routing_number = routing_number
        self._type = type
        self._wire_transfers = wire_transfers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The routing_number of this RoutingNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ach_transfers(self):
        """Gets the ach_transfers of this RoutingNumber.

        This routing number's support for ACH Transfers.

        :return: The ach_transfers of this RoutingNumber.
        :rtype: str
        """
        return self._ach_transfers

    @ach_transfers.setter
    def ach_transfers(self, ach_transfers):
        """Sets the ach_transfers of this RoutingNumber.

        This routing number's support for ACH Transfers.

        :param ach_transfers: The ach_transfers of this RoutingNumber.
        :type ach_transfers: str
        """
        allowed_values = ["supported", "not_supported"]  # noqa: E501
        if ach_transfers not in allowed_values:
            raise ValueError(
                "Invalid value for `ach_transfers` ({0}), must be one of {1}"
                .format(ach_transfers, allowed_values)
            )

        self._ach_transfers = ach_transfers

    @property
    def name(self):
        """Gets the name of this RoutingNumber.

        The name of the financial institution belonging to a routing number.

        :return: The name of this RoutingNumber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutingNumber.

        The name of the financial institution belonging to a routing number.

        :param name: The name of this RoutingNumber.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def real_time_payments_transfers(self):
        """Gets the real_time_payments_transfers of this RoutingNumber.

        This routing number's support for Real Time Payments Transfers.

        :return: The real_time_payments_transfers of this RoutingNumber.
        :rtype: str
        """
        return self._real_time_payments_transfers

    @real_time_payments_transfers.setter
    def real_time_payments_transfers(self, real_time_payments_transfers):
        """Sets the real_time_payments_transfers of this RoutingNumber.

        This routing number's support for Real Time Payments Transfers.

        :param real_time_payments_transfers: The real_time_payments_transfers of this RoutingNumber.
        :type real_time_payments_transfers: str
        """
        allowed_values = ["supported", "not_supported"]  # noqa: E501
        if real_time_payments_transfers not in allowed_values:
            raise ValueError(
                "Invalid value for `real_time_payments_transfers` ({0}), must be one of {1}"
                .format(real_time_payments_transfers, allowed_values)
            )

        self._real_time_payments_transfers = real_time_payments_transfers

    @property
    def routing_number(self):
        """Gets the routing_number of this RoutingNumber.

        The nine digit routing number identifier.

        :return: The routing_number of this RoutingNumber.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this RoutingNumber.

        The nine digit routing number identifier.

        :param routing_number: The routing_number of this RoutingNumber.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def type(self):
        """Gets the type of this RoutingNumber.

        A constant representing the object's type. For this resource it will always be `routing_number`.

        :return: The type of this RoutingNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoutingNumber.

        A constant representing the object's type. For this resource it will always be `routing_number`.

        :param type: The type of this RoutingNumber.
        :type type: str
        """
        allowed_values = ["routing_number"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def wire_transfers(self):
        """Gets the wire_transfers of this RoutingNumber.

        This routing number's support for Wire Transfers.

        :return: The wire_transfers of this RoutingNumber.
        :rtype: str
        """
        return self._wire_transfers

    @wire_transfers.setter
    def wire_transfers(self, wire_transfers):
        """Sets the wire_transfers of this RoutingNumber.

        This routing number's support for Wire Transfers.

        :param wire_transfers: The wire_transfers of this RoutingNumber.
        :type wire_transfers: str
        """
        allowed_values = ["supported", "not_supported"]  # noqa: E501
        if wire_transfers not in allowed_values:
            raise ValueError(
                "Invalid value for `wire_transfers` ({0}), must be one of {1}"
                .format(wire_transfers, allowed_values)
            )

        self._wire_transfers = wire_transfers
