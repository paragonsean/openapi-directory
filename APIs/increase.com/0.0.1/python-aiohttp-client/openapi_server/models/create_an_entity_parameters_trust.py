# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_an_entity_parameters_trust_address import CreateAnEntityParametersTrustAddress
from openapi_server.models.create_an_entity_parameters_trust_grantor import CreateAnEntityParametersTrustGrantor
from openapi_server.models.create_an_entity_parameters_trust_trustees_inner import CreateAnEntityParametersTrustTrusteesInner
from openapi_server import util


class CreateAnEntityParametersTrust(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: CreateAnEntityParametersTrustAddress=None, category: str=None, formation_document_file_id: str=None, formation_state: str=None, grantor: CreateAnEntityParametersTrustGrantor=None, name: str=None, tax_identifier: str=None, trustees: List[CreateAnEntityParametersTrustTrusteesInner]=None):
        """CreateAnEntityParametersTrust - a model defined in OpenAPI

        :param address: The address of this CreateAnEntityParametersTrust.
        :param category: The category of this CreateAnEntityParametersTrust.
        :param formation_document_file_id: The formation_document_file_id of this CreateAnEntityParametersTrust.
        :param formation_state: The formation_state of this CreateAnEntityParametersTrust.
        :param grantor: The grantor of this CreateAnEntityParametersTrust.
        :param name: The name of this CreateAnEntityParametersTrust.
        :param tax_identifier: The tax_identifier of this CreateAnEntityParametersTrust.
        :param trustees: The trustees of this CreateAnEntityParametersTrust.
        """
        self.openapi_types = {
            'address': CreateAnEntityParametersTrustAddress,
            'category': str,
            'formation_document_file_id': str,
            'formation_state': str,
            'grantor': CreateAnEntityParametersTrustGrantor,
            'name': str,
            'tax_identifier': str,
            'trustees': List[CreateAnEntityParametersTrustTrusteesInner]
        }

        self.attribute_map = {
            'address': 'address',
            'category': 'category',
            'formation_document_file_id': 'formation_document_file_id',
            'formation_state': 'formation_state',
            'grantor': 'grantor',
            'name': 'name',
            'tax_identifier': 'tax_identifier',
            'trustees': 'trustees'
        }

        self._address = address
        self._category = category
        self._formation_document_file_id = formation_document_file_id
        self._formation_state = formation_state
        self._grantor = grantor
        self._name = name
        self._tax_identifier = tax_identifier
        self._trustees = trustees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersTrust':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_trust of this CreateAnEntityParametersTrust.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CreateAnEntityParametersTrust.


        :return: The address of this CreateAnEntityParametersTrust.
        :rtype: CreateAnEntityParametersTrustAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateAnEntityParametersTrust.


        :param address: The address of this CreateAnEntityParametersTrust.
        :type address: CreateAnEntityParametersTrustAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def category(self):
        """Gets the category of this CreateAnEntityParametersTrust.

        Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.

        :return: The category of this CreateAnEntityParametersTrust.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateAnEntityParametersTrust.

        Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.

        :param category: The category of this CreateAnEntityParametersTrust.
        :type category: str
        """
        allowed_values = ["revocable", "irrevocable"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def formation_document_file_id(self):
        """Gets the formation_document_file_id of this CreateAnEntityParametersTrust.

        The identifier of the File containing the formation document of the trust.

        :return: The formation_document_file_id of this CreateAnEntityParametersTrust.
        :rtype: str
        """
        return self._formation_document_file_id

    @formation_document_file_id.setter
    def formation_document_file_id(self, formation_document_file_id):
        """Sets the formation_document_file_id of this CreateAnEntityParametersTrust.

        The identifier of the File containing the formation document of the trust.

        :param formation_document_file_id: The formation_document_file_id of this CreateAnEntityParametersTrust.
        :type formation_document_file_id: str
        """

        self._formation_document_file_id = formation_document_file_id

    @property
    def formation_state(self):
        """Gets the formation_state of this CreateAnEntityParametersTrust.

        The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.

        :return: The formation_state of this CreateAnEntityParametersTrust.
        :rtype: str
        """
        return self._formation_state

    @formation_state.setter
    def formation_state(self, formation_state):
        """Sets the formation_state of this CreateAnEntityParametersTrust.

        The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.

        :param formation_state: The formation_state of this CreateAnEntityParametersTrust.
        :type formation_state: str
        """
        if formation_state is not None and len(formation_state) > 200:
            raise ValueError("Invalid value for `formation_state`, length must be less than or equal to `200`")
        if formation_state is not None and len(formation_state) < 1:
            raise ValueError("Invalid value for `formation_state`, length must be greater than or equal to `1`")

        self._formation_state = formation_state

    @property
    def grantor(self):
        """Gets the grantor of this CreateAnEntityParametersTrust.


        :return: The grantor of this CreateAnEntityParametersTrust.
        :rtype: CreateAnEntityParametersTrustGrantor
        """
        return self._grantor

    @grantor.setter
    def grantor(self, grantor):
        """Sets the grantor of this CreateAnEntityParametersTrust.


        :param grantor: The grantor of this CreateAnEntityParametersTrust.
        :type grantor: CreateAnEntityParametersTrustGrantor
        """

        self._grantor = grantor

    @property
    def name(self):
        """Gets the name of this CreateAnEntityParametersTrust.

        The legal name of the trust.

        :return: The name of this CreateAnEntityParametersTrust.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnEntityParametersTrust.

        The legal name of the trust.

        :param name: The name of this CreateAnEntityParametersTrust.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def tax_identifier(self):
        """Gets the tax_identifier of this CreateAnEntityParametersTrust.

        The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.

        :return: The tax_identifier of this CreateAnEntityParametersTrust.
        :rtype: str
        """
        return self._tax_identifier

    @tax_identifier.setter
    def tax_identifier(self, tax_identifier):
        """Sets the tax_identifier of this CreateAnEntityParametersTrust.

        The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.

        :param tax_identifier: The tax_identifier of this CreateAnEntityParametersTrust.
        :type tax_identifier: str
        """
        if tax_identifier is not None and len(tax_identifier) > 200:
            raise ValueError("Invalid value for `tax_identifier`, length must be less than or equal to `200`")
        if tax_identifier is not None and len(tax_identifier) < 1:
            raise ValueError("Invalid value for `tax_identifier`, length must be greater than or equal to `1`")

        self._tax_identifier = tax_identifier

    @property
    def trustees(self):
        """Gets the trustees of this CreateAnEntityParametersTrust.

        The trustees of the trust.

        :return: The trustees of this CreateAnEntityParametersTrust.
        :rtype: List[CreateAnEntityParametersTrustTrusteesInner]
        """
        return self._trustees

    @trustees.setter
    def trustees(self, trustees):
        """Sets the trustees of this CreateAnEntityParametersTrust.

        The trustees of the trust.

        :param trustees: The trustees of this CreateAnEntityParametersTrust.
        :type trustees: List[CreateAnEntityParametersTrustTrusteesInner]
        """
        if trustees is None:
            raise ValueError("Invalid value for `trustees`, must not be `None`")

        self._trustees = trustees
