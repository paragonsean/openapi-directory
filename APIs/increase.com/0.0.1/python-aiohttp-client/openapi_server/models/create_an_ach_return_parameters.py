# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnAchReturnParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: str=None, transaction_id: str=None):
        """CreateAnAchReturnParameters - a model defined in OpenAPI

        :param reason: The reason of this CreateAnAchReturnParameters.
        :param transaction_id: The transaction_id of this CreateAnAchReturnParameters.
        """
        self.openapi_types = {
            'reason': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'reason': 'reason',
            'transaction_id': 'transaction_id'
        }

        self._reason = reason
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnAchReturnParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_ach_return_parameters of this CreateAnAchReturnParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this CreateAnAchReturnParameters.

        The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.

        :return: The reason of this CreateAnAchReturnParameters.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateAnAchReturnParameters.

        The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.

        :param reason: The reason of this CreateAnAchReturnParameters.
        :type reason: str
        """
        allowed_values = ["authorization_revoked_by_customer", "payment_stopped", "customer_advised_unauthorized_improper_ineligible_or_incomplete", "representative_payee_deceased_or_unable_to_continue_in_that_capacity", "beneficiary_or_account_holder_deceased", "credit_entry_refused_by_receiver", "duplicate_entry", "corporate_customer_advised_not_authorized"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CreateAnAchReturnParameters.

        The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.

        :return: The transaction_id of this CreateAnAchReturnParameters.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CreateAnAchReturnParameters.

        The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.

        :param transaction_id: The transaction_id of this CreateAnAchReturnParameters.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
