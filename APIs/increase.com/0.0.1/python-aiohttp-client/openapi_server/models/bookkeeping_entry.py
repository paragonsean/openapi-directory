# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookkeepingEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, entry_set_id: str=None, id: str=None, type: str=None):
        """BookkeepingEntry - a model defined in OpenAPI

        :param account_id: The account_id of this BookkeepingEntry.
        :param amount: The amount of this BookkeepingEntry.
        :param entry_set_id: The entry_set_id of this BookkeepingEntry.
        :param id: The id of this BookkeepingEntry.
        :param type: The type of this BookkeepingEntry.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'entry_set_id': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'entry_set_id': 'entry_set_id',
            'id': 'id',
            'type': 'type'
        }

        self._account_id = account_id
        self._amount = amount
        self._entry_set_id = entry_set_id
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookkeepingEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookkeeping_entry of this BookkeepingEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this BookkeepingEntry.

        The identifier for the Account the Entry belongs to.

        :return: The account_id of this BookkeepingEntry.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BookkeepingEntry.

        The identifier for the Account the Entry belongs to.

        :param account_id: The account_id of this BookkeepingEntry.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this BookkeepingEntry.

        The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.

        :return: The amount of this BookkeepingEntry.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BookkeepingEntry.

        The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.

        :param amount: The amount of this BookkeepingEntry.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def entry_set_id(self):
        """Gets the entry_set_id of this BookkeepingEntry.

        The identifier for the Account the Entry belongs to.

        :return: The entry_set_id of this BookkeepingEntry.
        :rtype: str
        """
        return self._entry_set_id

    @entry_set_id.setter
    def entry_set_id(self, entry_set_id):
        """Sets the entry_set_id of this BookkeepingEntry.

        The identifier for the Account the Entry belongs to.

        :param entry_set_id: The entry_set_id of this BookkeepingEntry.
        :type entry_set_id: str
        """
        if entry_set_id is None:
            raise ValueError("Invalid value for `entry_set_id`, must not be `None`")

        self._entry_set_id = entry_set_id

    @property
    def id(self):
        """Gets the id of this BookkeepingEntry.

        The entry identifier.

        :return: The id of this BookkeepingEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BookkeepingEntry.

        The entry identifier.

        :param id: The id of this BookkeepingEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this BookkeepingEntry.

        A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.

        :return: The type of this BookkeepingEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BookkeepingEntry.

        A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.

        :param type: The type of this BookkeepingEntry.
        :type type: str
        """
        allowed_values = ["bookkeeping_entry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
