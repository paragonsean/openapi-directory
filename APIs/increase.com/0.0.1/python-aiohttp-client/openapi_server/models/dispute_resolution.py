# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisputeResolution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, disputed_transaction_id: str=None):
        """DisputeResolution - a model defined in OpenAPI

        :param amount: The amount of this DisputeResolution.
        :param currency: The currency of this DisputeResolution.
        :param disputed_transaction_id: The disputed_transaction_id of this DisputeResolution.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'disputed_transaction_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'disputed_transaction_id': 'disputed_transaction_id'
        }

        self._amount = amount
        self._currency = currency
        self._disputed_transaction_id = disputed_transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeResolution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dispute_Resolution of this DisputeResolution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DisputeResolution.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this DisputeResolution.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DisputeResolution.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this DisputeResolution.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this DisputeResolution.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this DisputeResolution.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DisputeResolution.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this DisputeResolution.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def disputed_transaction_id(self):
        """Gets the disputed_transaction_id of this DisputeResolution.

        The identifier of the Transaction that was disputed.

        :return: The disputed_transaction_id of this DisputeResolution.
        :rtype: str
        """
        return self._disputed_transaction_id

    @disputed_transaction_id.setter
    def disputed_transaction_id(self, disputed_transaction_id):
        """Sets the disputed_transaction_id of this DisputeResolution.

        The identifier of the Transaction that was disputed.

        :param disputed_transaction_id: The disputed_transaction_id of this DisputeResolution.
        :type disputed_transaction_id: str
        """
        if disputed_transaction_id is None:
            raise ValueError("Invalid value for `disputed_transaction_id`, must not be `None`")

        self._disputed_transaction_id = disputed_transaction_id
