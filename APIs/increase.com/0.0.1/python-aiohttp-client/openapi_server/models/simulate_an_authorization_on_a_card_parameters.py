# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateAnAuthorizationOnACardParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, card_id: str=None, digital_wallet_token_id: str=None, event_subscription_id: str=None):
        """SimulateAnAuthorizationOnACardParameters - a model defined in OpenAPI

        :param amount: The amount of this SimulateAnAuthorizationOnACardParameters.
        :param card_id: The card_id of this SimulateAnAuthorizationOnACardParameters.
        :param digital_wallet_token_id: The digital_wallet_token_id of this SimulateAnAuthorizationOnACardParameters.
        :param event_subscription_id: The event_subscription_id of this SimulateAnAuthorizationOnACardParameters.
        """
        self.openapi_types = {
            'amount': int,
            'card_id': str,
            'digital_wallet_token_id': str,
            'event_subscription_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'card_id': 'card_id',
            'digital_wallet_token_id': 'digital_wallet_token_id',
            'event_subscription_id': 'event_subscription_id'
        }

        self._amount = amount
        self._card_id = card_id
        self._digital_wallet_token_id = digital_wallet_token_id
        self._event_subscription_id = event_subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateAnAuthorizationOnACardParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_an_authorization_on_a_card_parameters of this SimulateAnAuthorizationOnACardParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SimulateAnAuthorizationOnACardParameters.

        The authorization amount in cents.

        :return: The amount of this SimulateAnAuthorizationOnACardParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SimulateAnAuthorizationOnACardParameters.

        The authorization amount in cents.

        :param amount: The amount of this SimulateAnAuthorizationOnACardParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount > 1000000000:
            raise ValueError("Invalid value for `amount`, must be a value less than or equal to `1000000000`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def card_id(self):
        """Gets the card_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Card to be authorized.

        :return: The card_id of this SimulateAnAuthorizationOnACardParameters.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Card to be authorized.

        :param card_id: The card_id of this SimulateAnAuthorizationOnACardParameters.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def digital_wallet_token_id(self):
        """Gets the digital_wallet_token_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Digital Wallet Token to be authorized.

        :return: The digital_wallet_token_id of this SimulateAnAuthorizationOnACardParameters.
        :rtype: str
        """
        return self._digital_wallet_token_id

    @digital_wallet_token_id.setter
    def digital_wallet_token_id(self, digital_wallet_token_id):
        """Sets the digital_wallet_token_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Digital Wallet Token to be authorized.

        :param digital_wallet_token_id: The digital_wallet_token_id of this SimulateAnAuthorizationOnACardParameters.
        :type digital_wallet_token_id: str
        """

        self._digital_wallet_token_id = digital_wallet_token_id

    @property
    def event_subscription_id(self):
        """Gets the event_subscription_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.

        :return: The event_subscription_id of this SimulateAnAuthorizationOnACardParameters.
        :rtype: str
        """
        return self._event_subscription_id

    @event_subscription_id.setter
    def event_subscription_id(self, event_subscription_id):
        """Sets the event_subscription_id of this SimulateAnAuthorizationOnACardParameters.

        The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.

        :param event_subscription_id: The event_subscription_id of this SimulateAnAuthorizationOnACardParameters.
        :type event_subscription_id: str
        """

        self._event_subscription_id = event_subscription_id
