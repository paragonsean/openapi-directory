# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateACardParametersDigitalWallet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_profile_id: str=None, email: str=None, phone: str=None):
        """UpdateACardParametersDigitalWallet - a model defined in OpenAPI

        :param card_profile_id: The card_profile_id of this UpdateACardParametersDigitalWallet.
        :param email: The email of this UpdateACardParametersDigitalWallet.
        :param phone: The phone of this UpdateACardParametersDigitalWallet.
        """
        self.openapi_types = {
            'card_profile_id': str,
            'email': str,
            'phone': str
        }

        self.attribute_map = {
            'card_profile_id': 'card_profile_id',
            'email': 'email',
            'phone': 'phone'
        }

        self._card_profile_id = card_profile_id
        self._email = email
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateACardParametersDigitalWallet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The update_a_card_parameters_digital_wallet of this UpdateACardParametersDigitalWallet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_profile_id(self):
        """Gets the card_profile_id of this UpdateACardParametersDigitalWallet.

        The card profile assigned to this digital card. Card profiles may also be assigned at the program level.

        :return: The card_profile_id of this UpdateACardParametersDigitalWallet.
        :rtype: str
        """
        return self._card_profile_id

    @card_profile_id.setter
    def card_profile_id(self, card_profile_id):
        """Sets the card_profile_id of this UpdateACardParametersDigitalWallet.

        The card profile assigned to this digital card. Card profiles may also be assigned at the program level.

        :param card_profile_id: The card_profile_id of this UpdateACardParametersDigitalWallet.
        :type card_profile_id: str
        """

        self._card_profile_id = card_profile_id

    @property
    def email(self):
        """Gets the email of this UpdateACardParametersDigitalWallet.

        An email address that can be used to verify the cardholder via one-time passcode over email.

        :return: The email of this UpdateACardParametersDigitalWallet.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateACardParametersDigitalWallet.

        An email address that can be used to verify the cardholder via one-time passcode over email.

        :param email: The email of this UpdateACardParametersDigitalWallet.
        :type email: str
        """
        if email is not None and len(email) > 200:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `200`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this UpdateACardParametersDigitalWallet.

        A phone number that can be used to verify the cardholder via one-time passcode over SMS.

        :return: The phone of this UpdateACardParametersDigitalWallet.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UpdateACardParametersDigitalWallet.

        A phone number that can be used to verify the cardholder via one-time passcode over SMS.

        :param phone: The phone of this UpdateACardParametersDigitalWallet.
        :type phone: str
        """
        if phone is not None and len(phone) > 200:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `200`")
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")

        self._phone = phone
