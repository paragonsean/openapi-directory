# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeprecatedCardAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, merchant_acceptor_id: str=None, merchant_category_code: str=None, merchant_city: str=None, merchant_country: str=None, merchant_descriptor: str=None, merchant_state: str=None):
        """DeprecatedCardAuthorization - a model defined in OpenAPI

        :param amount: The amount of this DeprecatedCardAuthorization.
        :param currency: The currency of this DeprecatedCardAuthorization.
        :param merchant_acceptor_id: The merchant_acceptor_id of this DeprecatedCardAuthorization.
        :param merchant_category_code: The merchant_category_code of this DeprecatedCardAuthorization.
        :param merchant_city: The merchant_city of this DeprecatedCardAuthorization.
        :param merchant_country: The merchant_country of this DeprecatedCardAuthorization.
        :param merchant_descriptor: The merchant_descriptor of this DeprecatedCardAuthorization.
        :param merchant_state: The merchant_state of this DeprecatedCardAuthorization.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'merchant_acceptor_id': str,
            'merchant_category_code': str,
            'merchant_city': str,
            'merchant_country': str,
            'merchant_descriptor': str,
            'merchant_state': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'merchant_acceptor_id': 'merchant_acceptor_id',
            'merchant_category_code': 'merchant_category_code',
            'merchant_city': 'merchant_city',
            'merchant_country': 'merchant_country',
            'merchant_descriptor': 'merchant_descriptor',
            'merchant_state': 'merchant_state'
        }

        self._amount = amount
        self._currency = currency
        self._merchant_acceptor_id = merchant_acceptor_id
        self._merchant_category_code = merchant_category_code
        self._merchant_city = merchant_city
        self._merchant_country = merchant_country
        self._merchant_descriptor = merchant_descriptor
        self._merchant_state = merchant_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecatedCardAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deprecated_Card_Authorization of this DeprecatedCardAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DeprecatedCardAuthorization.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this DeprecatedCardAuthorization.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DeprecatedCardAuthorization.

        The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this DeprecatedCardAuthorization.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this DeprecatedCardAuthorization.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :return: The currency of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DeprecatedCardAuthorization.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.

        :param currency: The currency of this DeprecatedCardAuthorization.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def merchant_acceptor_id(self):
        """Gets the merchant_acceptor_id of this DeprecatedCardAuthorization.

        

        :return: The merchant_acceptor_id of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_acceptor_id

    @merchant_acceptor_id.setter
    def merchant_acceptor_id(self, merchant_acceptor_id):
        """Sets the merchant_acceptor_id of this DeprecatedCardAuthorization.

        

        :param merchant_acceptor_id: The merchant_acceptor_id of this DeprecatedCardAuthorization.
        :type merchant_acceptor_id: str
        """
        if merchant_acceptor_id is None:
            raise ValueError("Invalid value for `merchant_acceptor_id`, must not be `None`")

        self._merchant_acceptor_id = merchant_acceptor_id

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this DeprecatedCardAuthorization.

        

        :return: The merchant_category_code of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this DeprecatedCardAuthorization.

        

        :param merchant_category_code: The merchant_category_code of this DeprecatedCardAuthorization.
        :type merchant_category_code: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_city(self):
        """Gets the merchant_city of this DeprecatedCardAuthorization.

        

        :return: The merchant_city of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """Sets the merchant_city of this DeprecatedCardAuthorization.

        

        :param merchant_city: The merchant_city of this DeprecatedCardAuthorization.
        :type merchant_city: str
        """
        if merchant_city is None:
            raise ValueError("Invalid value for `merchant_city`, must not be `None`")

        self._merchant_city = merchant_city

    @property
    def merchant_country(self):
        """Gets the merchant_country of this DeprecatedCardAuthorization.

        

        :return: The merchant_country of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this DeprecatedCardAuthorization.

        

        :param merchant_country: The merchant_country of this DeprecatedCardAuthorization.
        :type merchant_country: str
        """
        if merchant_country is None:
            raise ValueError("Invalid value for `merchant_country`, must not be `None`")

        self._merchant_country = merchant_country

    @property
    def merchant_descriptor(self):
        """Gets the merchant_descriptor of this DeprecatedCardAuthorization.

        

        :return: The merchant_descriptor of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_descriptor

    @merchant_descriptor.setter
    def merchant_descriptor(self, merchant_descriptor):
        """Sets the merchant_descriptor of this DeprecatedCardAuthorization.

        

        :param merchant_descriptor: The merchant_descriptor of this DeprecatedCardAuthorization.
        :type merchant_descriptor: str
        """
        if merchant_descriptor is None:
            raise ValueError("Invalid value for `merchant_descriptor`, must not be `None`")

        self._merchant_descriptor = merchant_descriptor

    @property
    def merchant_state(self):
        """Gets the merchant_state of this DeprecatedCardAuthorization.

        

        :return: The merchant_state of this DeprecatedCardAuthorization.
        :rtype: str
        """
        return self._merchant_state

    @merchant_state.setter
    def merchant_state(self, merchant_state):
        """Sets the merchant_state of this DeprecatedCardAuthorization.

        

        :param merchant_state: The merchant_state of this DeprecatedCardAuthorization.
        :type merchant_state: str
        """
        if merchant_state is None:
            raise ValueError("Invalid value for `merchant_state`, must not be `None`")

        self._merchant_state = merchant_state
