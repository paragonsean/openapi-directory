# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnAchPrenotificationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, addendum: str=None, company_descriptive_date: str=None, company_discretionary_data: str=None, company_entry_description: str=None, company_name: str=None, credit_debit_indicator: str=None, effective_date: date=None, individual_id: str=None, individual_name: str=None, routing_number: str=None, standard_entry_class_code: str=None):
        """CreateAnAchPrenotificationParameters - a model defined in OpenAPI

        :param account_number: The account_number of this CreateAnAchPrenotificationParameters.
        :param addendum: The addendum of this CreateAnAchPrenotificationParameters.
        :param company_descriptive_date: The company_descriptive_date of this CreateAnAchPrenotificationParameters.
        :param company_discretionary_data: The company_discretionary_data of this CreateAnAchPrenotificationParameters.
        :param company_entry_description: The company_entry_description of this CreateAnAchPrenotificationParameters.
        :param company_name: The company_name of this CreateAnAchPrenotificationParameters.
        :param credit_debit_indicator: The credit_debit_indicator of this CreateAnAchPrenotificationParameters.
        :param effective_date: The effective_date of this CreateAnAchPrenotificationParameters.
        :param individual_id: The individual_id of this CreateAnAchPrenotificationParameters.
        :param individual_name: The individual_name of this CreateAnAchPrenotificationParameters.
        :param routing_number: The routing_number of this CreateAnAchPrenotificationParameters.
        :param standard_entry_class_code: The standard_entry_class_code of this CreateAnAchPrenotificationParameters.
        """
        self.openapi_types = {
            'account_number': str,
            'addendum': str,
            'company_descriptive_date': str,
            'company_discretionary_data': str,
            'company_entry_description': str,
            'company_name': str,
            'credit_debit_indicator': str,
            'effective_date': date,
            'individual_id': str,
            'individual_name': str,
            'routing_number': str,
            'standard_entry_class_code': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'addendum': 'addendum',
            'company_descriptive_date': 'company_descriptive_date',
            'company_discretionary_data': 'company_discretionary_data',
            'company_entry_description': 'company_entry_description',
            'company_name': 'company_name',
            'credit_debit_indicator': 'credit_debit_indicator',
            'effective_date': 'effective_date',
            'individual_id': 'individual_id',
            'individual_name': 'individual_name',
            'routing_number': 'routing_number',
            'standard_entry_class_code': 'standard_entry_class_code'
        }

        self._account_number = account_number
        self._addendum = addendum
        self._company_descriptive_date = company_descriptive_date
        self._company_discretionary_data = company_discretionary_data
        self._company_entry_description = company_entry_description
        self._company_name = company_name
        self._credit_debit_indicator = credit_debit_indicator
        self._effective_date = effective_date
        self._individual_id = individual_id
        self._individual_name = individual_name
        self._routing_number = routing_number
        self._standard_entry_class_code = standard_entry_class_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnAchPrenotificationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_ach_prenotification_parameters of this CreateAnAchPrenotificationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CreateAnAchPrenotificationParameters.

        The account number for the destination account.

        :return: The account_number of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAnAchPrenotificationParameters.

        The account number for the destination account.

        :param account_number: The account_number of this CreateAnAchPrenotificationParameters.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 200:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `200`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def addendum(self):
        """Gets the addendum of this CreateAnAchPrenotificationParameters.

        Additional information that will be sent to the recipient.

        :return: The addendum of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._addendum

    @addendum.setter
    def addendum(self, addendum):
        """Sets the addendum of this CreateAnAchPrenotificationParameters.

        Additional information that will be sent to the recipient.

        :param addendum: The addendum of this CreateAnAchPrenotificationParameters.
        :type addendum: str
        """
        if addendum is not None and len(addendum) > 80:
            raise ValueError("Invalid value for `addendum`, length must be less than or equal to `80`")
        if addendum is not None and len(addendum) < 1:
            raise ValueError("Invalid value for `addendum`, length must be greater than or equal to `1`")

        self._addendum = addendum

    @property
    def company_descriptive_date(self):
        """Gets the company_descriptive_date of this CreateAnAchPrenotificationParameters.

        The description of the date of the transfer.

        :return: The company_descriptive_date of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._company_descriptive_date

    @company_descriptive_date.setter
    def company_descriptive_date(self, company_descriptive_date):
        """Sets the company_descriptive_date of this CreateAnAchPrenotificationParameters.

        The description of the date of the transfer.

        :param company_descriptive_date: The company_descriptive_date of this CreateAnAchPrenotificationParameters.
        :type company_descriptive_date: str
        """
        if company_descriptive_date is not None and len(company_descriptive_date) > 6:
            raise ValueError("Invalid value for `company_descriptive_date`, length must be less than or equal to `6`")
        if company_descriptive_date is not None and len(company_descriptive_date) < 1:
            raise ValueError("Invalid value for `company_descriptive_date`, length must be greater than or equal to `1`")

        self._company_descriptive_date = company_descriptive_date

    @property
    def company_discretionary_data(self):
        """Gets the company_discretionary_data of this CreateAnAchPrenotificationParameters.

        The data you choose to associate with the transfer.

        :return: The company_discretionary_data of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._company_discretionary_data

    @company_discretionary_data.setter
    def company_discretionary_data(self, company_discretionary_data):
        """Sets the company_discretionary_data of this CreateAnAchPrenotificationParameters.

        The data you choose to associate with the transfer.

        :param company_discretionary_data: The company_discretionary_data of this CreateAnAchPrenotificationParameters.
        :type company_discretionary_data: str
        """
        if company_discretionary_data is not None and len(company_discretionary_data) > 20:
            raise ValueError("Invalid value for `company_discretionary_data`, length must be less than or equal to `20`")
        if company_discretionary_data is not None and len(company_discretionary_data) < 1:
            raise ValueError("Invalid value for `company_discretionary_data`, length must be greater than or equal to `1`")

        self._company_discretionary_data = company_discretionary_data

    @property
    def company_entry_description(self):
        """Gets the company_entry_description of this CreateAnAchPrenotificationParameters.

        The description of the transfer you wish to be shown to the recipient.

        :return: The company_entry_description of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._company_entry_description

    @company_entry_description.setter
    def company_entry_description(self, company_entry_description):
        """Sets the company_entry_description of this CreateAnAchPrenotificationParameters.

        The description of the transfer you wish to be shown to the recipient.

        :param company_entry_description: The company_entry_description of this CreateAnAchPrenotificationParameters.
        :type company_entry_description: str
        """
        if company_entry_description is not None and len(company_entry_description) > 10:
            raise ValueError("Invalid value for `company_entry_description`, length must be less than or equal to `10`")
        if company_entry_description is not None and len(company_entry_description) < 1:
            raise ValueError("Invalid value for `company_entry_description`, length must be greater than or equal to `1`")

        self._company_entry_description = company_entry_description

    @property
    def company_name(self):
        """Gets the company_name of this CreateAnAchPrenotificationParameters.

        The name by which the recipient knows you.

        :return: The company_name of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CreateAnAchPrenotificationParameters.

        The name by which the recipient knows you.

        :param company_name: The company_name of this CreateAnAchPrenotificationParameters.
        :type company_name: str
        """
        if company_name is not None and len(company_name) > 16:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `16`")
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this CreateAnAchPrenotificationParameters.

        Whether the Prenotification is for a future debit or credit.

        :return: The credit_debit_indicator of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this CreateAnAchPrenotificationParameters.

        Whether the Prenotification is for a future debit or credit.

        :param credit_debit_indicator: The credit_debit_indicator of this CreateAnAchPrenotificationParameters.
        :type credit_debit_indicator: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if credit_debit_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_debit_indicator` ({0}), must be one of {1}"
                .format(credit_debit_indicator, allowed_values)
            )

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def effective_date(self):
        """Gets the effective_date of this CreateAnAchPrenotificationParameters.

        The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The effective_date of this CreateAnAchPrenotificationParameters.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this CreateAnAchPrenotificationParameters.

        The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param effective_date: The effective_date of this CreateAnAchPrenotificationParameters.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def individual_id(self):
        """Gets the individual_id of this CreateAnAchPrenotificationParameters.

        Your identifer for the transfer recipient.

        :return: The individual_id of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._individual_id

    @individual_id.setter
    def individual_id(self, individual_id):
        """Sets the individual_id of this CreateAnAchPrenotificationParameters.

        Your identifer for the transfer recipient.

        :param individual_id: The individual_id of this CreateAnAchPrenotificationParameters.
        :type individual_id: str
        """
        if individual_id is not None and len(individual_id) > 22:
            raise ValueError("Invalid value for `individual_id`, length must be less than or equal to `22`")
        if individual_id is not None and len(individual_id) < 1:
            raise ValueError("Invalid value for `individual_id`, length must be greater than or equal to `1`")

        self._individual_id = individual_id

    @property
    def individual_name(self):
        """Gets the individual_name of this CreateAnAchPrenotificationParameters.

        The name of the transfer recipient. This value is information and not verified by the recipient's bank.

        :return: The individual_name of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._individual_name

    @individual_name.setter
    def individual_name(self, individual_name):
        """Sets the individual_name of this CreateAnAchPrenotificationParameters.

        The name of the transfer recipient. This value is information and not verified by the recipient's bank.

        :param individual_name: The individual_name of this CreateAnAchPrenotificationParameters.
        :type individual_name: str
        """
        if individual_name is not None and len(individual_name) > 22:
            raise ValueError("Invalid value for `individual_name`, length must be less than or equal to `22`")
        if individual_name is not None and len(individual_name) < 1:
            raise ValueError("Invalid value for `individual_name`, length must be greater than or equal to `1`")

        self._individual_name = individual_name

    @property
    def routing_number(self):
        """Gets the routing_number of this CreateAnAchPrenotificationParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :return: The routing_number of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreateAnAchPrenotificationParameters.

        The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.

        :param routing_number: The routing_number of this CreateAnAchPrenotificationParameters.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number

    @property
    def standard_entry_class_code(self):
        """Gets the standard_entry_class_code of this CreateAnAchPrenotificationParameters.

        The Standard Entry Class (SEC) code to use for the ACH Prenotification.

        :return: The standard_entry_class_code of this CreateAnAchPrenotificationParameters.
        :rtype: str
        """
        return self._standard_entry_class_code

    @standard_entry_class_code.setter
    def standard_entry_class_code(self, standard_entry_class_code):
        """Sets the standard_entry_class_code of this CreateAnAchPrenotificationParameters.

        The Standard Entry Class (SEC) code to use for the ACH Prenotification.

        :param standard_entry_class_code: The standard_entry_class_code of this CreateAnAchPrenotificationParameters.
        :type standard_entry_class_code: str
        """
        allowed_values = ["corporate_credit_or_debit", "prearranged_payments_and_deposit", "internet_initiated"]  # noqa: E501
        if standard_entry_class_code not in allowed_values:
            raise ValueError(
                "Invalid value for `standard_entry_class_code` ({0}), must be one of {1}"
                .format(standard_entry_class_code, allowed_values)
            )

        self._standard_entry_class_code = standard_entry_class_code
