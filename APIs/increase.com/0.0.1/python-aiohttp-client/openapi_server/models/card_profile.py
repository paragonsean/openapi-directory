# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digital_wallets import DigitalWallets
from openapi_server import util


class CardProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, digital_wallets: DigitalWallets=None, id: str=None, status: str=None, type: str=None):
        """CardProfile - a model defined in OpenAPI

        :param created_at: The created_at of this CardProfile.
        :param description: The description of this CardProfile.
        :param digital_wallets: The digital_wallets of this CardProfile.
        :param id: The id of this CardProfile.
        :param status: The status of this CardProfile.
        :param type: The type of this CardProfile.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'digital_wallets': DigitalWallets,
            'id': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'digital_wallets': 'digital_wallets',
            'id': 'id',
            'status': 'status',
            'type': 'type'
        }

        self._created_at = created_at
        self._description = description
        self._digital_wallets = digital_wallets
        self._id = id
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The card_profile of this CardProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CardProfile.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.

        :return: The created_at of this CardProfile.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CardProfile.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.

        :param created_at: The created_at of this CardProfile.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CardProfile.

        A description you can use to identify the Card Profile.

        :return: The description of this CardProfile.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CardProfile.

        A description you can use to identify the Card Profile.

        :param description: The description of this CardProfile.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def digital_wallets(self):
        """Gets the digital_wallets of this CardProfile.


        :return: The digital_wallets of this CardProfile.
        :rtype: DigitalWallets
        """
        return self._digital_wallets

    @digital_wallets.setter
    def digital_wallets(self, digital_wallets):
        """Sets the digital_wallets of this CardProfile.


        :param digital_wallets: The digital_wallets of this CardProfile.
        :type digital_wallets: DigitalWallets
        """
        if digital_wallets is None:
            raise ValueError("Invalid value for `digital_wallets`, must not be `None`")

        self._digital_wallets = digital_wallets

    @property
    def id(self):
        """Gets the id of this CardProfile.

        The Card Profile identifier.

        :return: The id of this CardProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardProfile.

        The Card Profile identifier.

        :param id: The id of this CardProfile.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this CardProfile.

        The status of the Card Profile.

        :return: The status of this CardProfile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardProfile.

        The status of the Card Profile.

        :param status: The status of this CardProfile.
        :type status: str
        """
        allowed_values = ["pending", "rejected", "active", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this CardProfile.

        A constant representing the object's type. For this resource it will always be `card_profile`.

        :return: The type of this CardProfile.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CardProfile.

        A constant representing the object's type. For this resource it will always be `card_profile`.

        :param type: The type of this CardProfile.
        :type type: str
        """
        allowed_values = ["card_profile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
