# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.corporation import Corporation
from openapi_server.models.individual2 import Individual2
from openapi_server.models.joint import Joint
from openapi_server.models.supplemental_documents_element import SupplementalDocumentsElement
from openapi_server.models.trust import Trust
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporation: Corporation=None, description: str=None, id: str=None, joint: Joint=None, natural_person: Individual2=None, relationship: str=None, structure: str=None, supplemental_documents: List[SupplementalDocumentsElement]=None, trust: Trust=None, type: str=None):
        """Entity - a model defined in OpenAPI

        :param corporation: The corporation of this Entity.
        :param description: The description of this Entity.
        :param id: The id of this Entity.
        :param joint: The joint of this Entity.
        :param natural_person: The natural_person of this Entity.
        :param relationship: The relationship of this Entity.
        :param structure: The structure of this Entity.
        :param supplemental_documents: The supplemental_documents of this Entity.
        :param trust: The trust of this Entity.
        :param type: The type of this Entity.
        """
        self.openapi_types = {
            'corporation': Corporation,
            'description': str,
            'id': str,
            'joint': Joint,
            'natural_person': Individual2,
            'relationship': str,
            'structure': str,
            'supplemental_documents': List[SupplementalDocumentsElement],
            'trust': Trust,
            'type': str
        }

        self.attribute_map = {
            'corporation': 'corporation',
            'description': 'description',
            'id': 'id',
            'joint': 'joint',
            'natural_person': 'natural_person',
            'relationship': 'relationship',
            'structure': 'structure',
            'supplemental_documents': 'supplemental_documents',
            'trust': 'trust',
            'type': 'type'
        }

        self._corporation = corporation
        self._description = description
        self._id = id
        self._joint = joint
        self._natural_person = natural_person
        self._relationship = relationship
        self._structure = structure
        self._supplemental_documents = supplemental_documents
        self._trust = trust
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporation(self):
        """Gets the corporation of this Entity.


        :return: The corporation of this Entity.
        :rtype: Corporation
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this Entity.


        :param corporation: The corporation of this Entity.
        :type corporation: Corporation
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")

        self._corporation = corporation

    @property
    def description(self):
        """Gets the description of this Entity.

        The entity's description for display purposes.

        :return: The description of this Entity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entity.

        The entity's description for display purposes.

        :param description: The description of this Entity.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Entity.

        The entity's identifier.

        :return: The id of this Entity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entity.

        The entity's identifier.

        :param id: The id of this Entity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def joint(self):
        """Gets the joint of this Entity.


        :return: The joint of this Entity.
        :rtype: Joint
        """
        return self._joint

    @joint.setter
    def joint(self, joint):
        """Sets the joint of this Entity.


        :param joint: The joint of this Entity.
        :type joint: Joint
        """
        if joint is None:
            raise ValueError("Invalid value for `joint`, must not be `None`")

        self._joint = joint

    @property
    def natural_person(self):
        """Gets the natural_person of this Entity.


        :return: The natural_person of this Entity.
        :rtype: Individual2
        """
        return self._natural_person

    @natural_person.setter
    def natural_person(self, natural_person):
        """Sets the natural_person of this Entity.


        :param natural_person: The natural_person of this Entity.
        :type natural_person: Individual2
        """
        if natural_person is None:
            raise ValueError("Invalid value for `natural_person`, must not be `None`")

        self._natural_person = natural_person

    @property
    def relationship(self):
        """Gets the relationship of this Entity.

        The relationship between your group and the entity.

        :return: The relationship of this Entity.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this Entity.

        The relationship between your group and the entity.

        :param relationship: The relationship of this Entity.
        :type relationship: str
        """
        allowed_values = ["affiliated", "informational", "unaffiliated"]  # noqa: E501
        if relationship not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship` ({0}), must be one of {1}"
                .format(relationship, allowed_values)
            )

        self._relationship = relationship

    @property
    def structure(self):
        """Gets the structure of this Entity.

        The entity's legal structure.

        :return: The structure of this Entity.
        :rtype: str
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this Entity.

        The entity's legal structure.

        :param structure: The structure of this Entity.
        :type structure: str
        """
        allowed_values = ["corporation", "natural_person", "joint", "trust"]  # noqa: E501
        if structure not in allowed_values:
            raise ValueError(
                "Invalid value for `structure` ({0}), must be one of {1}"
                .format(structure, allowed_values)
            )

        self._structure = structure

    @property
    def supplemental_documents(self):
        """Gets the supplemental_documents of this Entity.

        Additional documentation associated with the entity.

        :return: The supplemental_documents of this Entity.
        :rtype: List[SupplementalDocumentsElement]
        """
        return self._supplemental_documents

    @supplemental_documents.setter
    def supplemental_documents(self, supplemental_documents):
        """Sets the supplemental_documents of this Entity.

        Additional documentation associated with the entity.

        :param supplemental_documents: The supplemental_documents of this Entity.
        :type supplemental_documents: List[SupplementalDocumentsElement]
        """
        if supplemental_documents is None:
            raise ValueError("Invalid value for `supplemental_documents`, must not be `None`")

        self._supplemental_documents = supplemental_documents

    @property
    def trust(self):
        """Gets the trust of this Entity.


        :return: The trust of this Entity.
        :rtype: Trust
        """
        return self._trust

    @trust.setter
    def trust(self, trust):
        """Sets the trust of this Entity.


        :param trust: The trust of this Entity.
        :type trust: Trust
        """
        if trust is None:
            raise ValueError("Invalid value for `trust`, must not be `None`")

        self._trust = trust

    @property
    def type(self):
        """Gets the type of this Entity.

        A constant representing the object's type. For this resource it will always be `entity`.

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.

        A constant representing the object's type. For this resource it will always be `entity`.

        :param type: The type of this Entity.
        :type type: str
        """
        allowed_values = ["entity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
