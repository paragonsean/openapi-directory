# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.individual import Individual
from openapi_server import util


class BeneficialOwnersElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_title: str=None, individual: Individual=None, prong: str=None):
        """BeneficialOwnersElement - a model defined in OpenAPI

        :param company_title: The company_title of this BeneficialOwnersElement.
        :param individual: The individual of this BeneficialOwnersElement.
        :param prong: The prong of this BeneficialOwnersElement.
        """
        self.openapi_types = {
            'company_title': str,
            'individual': Individual,
            'prong': str
        }

        self.attribute_map = {
            'company_title': 'company_title',
            'individual': 'individual',
            'prong': 'prong'
        }

        self._company_title = company_title
        self._individual = individual
        self._prong = prong

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeneficialOwnersElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Beneficial_Owners_Element of this BeneficialOwnersElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_title(self):
        """Gets the company_title of this BeneficialOwnersElement.

        This person's role or title within the entity.

        :return: The company_title of this BeneficialOwnersElement.
        :rtype: str
        """
        return self._company_title

    @company_title.setter
    def company_title(self, company_title):
        """Sets the company_title of this BeneficialOwnersElement.

        This person's role or title within the entity.

        :param company_title: The company_title of this BeneficialOwnersElement.
        :type company_title: str
        """
        if company_title is None:
            raise ValueError("Invalid value for `company_title`, must not be `None`")

        self._company_title = company_title

    @property
    def individual(self):
        """Gets the individual of this BeneficialOwnersElement.


        :return: The individual of this BeneficialOwnersElement.
        :rtype: Individual
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this BeneficialOwnersElement.


        :param individual: The individual of this BeneficialOwnersElement.
        :type individual: Individual
        """
        if individual is None:
            raise ValueError("Invalid value for `individual`, must not be `None`")

        self._individual = individual

    @property
    def prong(self):
        """Gets the prong of this BeneficialOwnersElement.

        Why this person is considered a beneficial owner of the entity.

        :return: The prong of this BeneficialOwnersElement.
        :rtype: str
        """
        return self._prong

    @prong.setter
    def prong(self, prong):
        """Sets the prong of this BeneficialOwnersElement.

        Why this person is considered a beneficial owner of the entity.

        :param prong: The prong of this BeneficialOwnersElement.
        :type prong: str
        """
        allowed_values = ["ownership", "control"]  # noqa: E501
        if prong not in allowed_values:
            raise ValueError(
                "Invalid value for `prong` ({0}), must be one of {1}"
                .format(prong, allowed_values)
            )

        self._prong = prong
