# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateAnAchTransferToYourAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_id: str=None, amount: int=None, company_descriptive_date: str=None, company_discretionary_data: str=None, company_entry_description: str=None, company_id: str=None, company_name: str=None):
        """SimulateAnAchTransferToYourAccountParameters - a model defined in OpenAPI

        :param account_number_id: The account_number_id of this SimulateAnAchTransferToYourAccountParameters.
        :param amount: The amount of this SimulateAnAchTransferToYourAccountParameters.
        :param company_descriptive_date: The company_descriptive_date of this SimulateAnAchTransferToYourAccountParameters.
        :param company_discretionary_data: The company_discretionary_data of this SimulateAnAchTransferToYourAccountParameters.
        :param company_entry_description: The company_entry_description of this SimulateAnAchTransferToYourAccountParameters.
        :param company_id: The company_id of this SimulateAnAchTransferToYourAccountParameters.
        :param company_name: The company_name of this SimulateAnAchTransferToYourAccountParameters.
        """
        self.openapi_types = {
            'account_number_id': str,
            'amount': int,
            'company_descriptive_date': str,
            'company_discretionary_data': str,
            'company_entry_description': str,
            'company_id': str,
            'company_name': str
        }

        self.attribute_map = {
            'account_number_id': 'account_number_id',
            'amount': 'amount',
            'company_descriptive_date': 'company_descriptive_date',
            'company_discretionary_data': 'company_discretionary_data',
            'company_entry_description': 'company_entry_description',
            'company_id': 'company_id',
            'company_name': 'company_name'
        }

        self._account_number_id = account_number_id
        self._amount = amount
        self._company_descriptive_date = company_descriptive_date
        self._company_discretionary_data = company_discretionary_data
        self._company_entry_description = company_entry_description
        self._company_id = company_id
        self._company_name = company_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateAnAchTransferToYourAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_an_ach_transfer_to_your_account_parameters of this SimulateAnAchTransferToYourAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_id(self):
        """Gets the account_number_id of this SimulateAnAchTransferToYourAccountParameters.

        The identifier of the Account Number the inbound ACH Transfer is for.

        :return: The account_number_id of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._account_number_id

    @account_number_id.setter
    def account_number_id(self, account_number_id):
        """Sets the account_number_id of this SimulateAnAchTransferToYourAccountParameters.

        The identifier of the Account Number the inbound ACH Transfer is for.

        :param account_number_id: The account_number_id of this SimulateAnAchTransferToYourAccountParameters.
        :type account_number_id: str
        """
        if account_number_id is None:
            raise ValueError("Invalid value for `account_number_id`, must not be `None`")

        self._account_number_id = account_number_id

    @property
    def amount(self):
        """Gets the amount of this SimulateAnAchTransferToYourAccountParameters.

        The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.

        :return: The amount of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SimulateAnAchTransferToYourAccountParameters.

        The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.

        :param amount: The amount of this SimulateAnAchTransferToYourAccountParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def company_descriptive_date(self):
        """Gets the company_descriptive_date of this SimulateAnAchTransferToYourAccountParameters.

        The description of the date of the transfer.

        :return: The company_descriptive_date of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._company_descriptive_date

    @company_descriptive_date.setter
    def company_descriptive_date(self, company_descriptive_date):
        """Sets the company_descriptive_date of this SimulateAnAchTransferToYourAccountParameters.

        The description of the date of the transfer.

        :param company_descriptive_date: The company_descriptive_date of this SimulateAnAchTransferToYourAccountParameters.
        :type company_descriptive_date: str
        """
        if company_descriptive_date is not None and len(company_descriptive_date) > 6:
            raise ValueError("Invalid value for `company_descriptive_date`, length must be less than or equal to `6`")
        if company_descriptive_date is not None and len(company_descriptive_date) < 1:
            raise ValueError("Invalid value for `company_descriptive_date`, length must be greater than or equal to `1`")

        self._company_descriptive_date = company_descriptive_date

    @property
    def company_discretionary_data(self):
        """Gets the company_discretionary_data of this SimulateAnAchTransferToYourAccountParameters.

        Data associated with the transfer set by the sender.

        :return: The company_discretionary_data of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._company_discretionary_data

    @company_discretionary_data.setter
    def company_discretionary_data(self, company_discretionary_data):
        """Sets the company_discretionary_data of this SimulateAnAchTransferToYourAccountParameters.

        Data associated with the transfer set by the sender.

        :param company_discretionary_data: The company_discretionary_data of this SimulateAnAchTransferToYourAccountParameters.
        :type company_discretionary_data: str
        """
        if company_discretionary_data is not None and len(company_discretionary_data) > 20:
            raise ValueError("Invalid value for `company_discretionary_data`, length must be less than or equal to `20`")
        if company_discretionary_data is not None and len(company_discretionary_data) < 1:
            raise ValueError("Invalid value for `company_discretionary_data`, length must be greater than or equal to `1`")

        self._company_discretionary_data = company_discretionary_data

    @property
    def company_entry_description(self):
        """Gets the company_entry_description of this SimulateAnAchTransferToYourAccountParameters.

        The description of the transfer set by the sender.

        :return: The company_entry_description of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._company_entry_description

    @company_entry_description.setter
    def company_entry_description(self, company_entry_description):
        """Sets the company_entry_description of this SimulateAnAchTransferToYourAccountParameters.

        The description of the transfer set by the sender.

        :param company_entry_description: The company_entry_description of this SimulateAnAchTransferToYourAccountParameters.
        :type company_entry_description: str
        """
        if company_entry_description is not None and len(company_entry_description) > 10:
            raise ValueError("Invalid value for `company_entry_description`, length must be less than or equal to `10`")
        if company_entry_description is not None and len(company_entry_description) < 1:
            raise ValueError("Invalid value for `company_entry_description`, length must be greater than or equal to `1`")

        self._company_entry_description = company_entry_description

    @property
    def company_id(self):
        """Gets the company_id of this SimulateAnAchTransferToYourAccountParameters.

        The sender's company id.

        :return: The company_id of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this SimulateAnAchTransferToYourAccountParameters.

        The sender's company id.

        :param company_id: The company_id of this SimulateAnAchTransferToYourAccountParameters.
        :type company_id: str
        """
        if company_id is not None and len(company_id) > 15:
            raise ValueError("Invalid value for `company_id`, length must be less than or equal to `15`")
        if company_id is not None and len(company_id) < 1:
            raise ValueError("Invalid value for `company_id`, length must be greater than or equal to `1`")

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this SimulateAnAchTransferToYourAccountParameters.

        The name of the sender.

        :return: The company_name of this SimulateAnAchTransferToYourAccountParameters.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SimulateAnAchTransferToYourAccountParameters.

        The name of the sender.

        :param company_name: The company_name of this SimulateAnAchTransferToYourAccountParameters.
        :type company_name: str
        """
        if company_name is not None and len(company_name) > 16:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `16`")
        if company_name is not None and len(company_name) < 1:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")

        self._company_name = company_name
