# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, created_at: datetime=None, ending_balance: int=None, file_id: str=None, id: str=None, starting_balance: int=None, statement_period_end: datetime=None, statement_period_start: datetime=None, type: str=None):
        """AccountStatement - a model defined in OpenAPI

        :param account_id: The account_id of this AccountStatement.
        :param created_at: The created_at of this AccountStatement.
        :param ending_balance: The ending_balance of this AccountStatement.
        :param file_id: The file_id of this AccountStatement.
        :param id: The id of this AccountStatement.
        :param starting_balance: The starting_balance of this AccountStatement.
        :param statement_period_end: The statement_period_end of this AccountStatement.
        :param statement_period_start: The statement_period_start of this AccountStatement.
        :param type: The type of this AccountStatement.
        """
        self.openapi_types = {
            'account_id': str,
            'created_at': datetime,
            'ending_balance': int,
            'file_id': str,
            'id': str,
            'starting_balance': int,
            'statement_period_end': datetime,
            'statement_period_start': datetime,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'created_at': 'created_at',
            'ending_balance': 'ending_balance',
            'file_id': 'file_id',
            'id': 'id',
            'starting_balance': 'starting_balance',
            'statement_period_end': 'statement_period_end',
            'statement_period_start': 'statement_period_start',
            'type': 'type'
        }

        self._account_id = account_id
        self._created_at = created_at
        self._ending_balance = ending_balance
        self._file_id = file_id
        self._id = id
        self._starting_balance = starting_balance
        self._statement_period_end = statement_period_end
        self._statement_period_start = statement_period_start
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The account_statement of this AccountStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountStatement.

        The identifier for the Account this Account Statement belongs to.

        :return: The account_id of this AccountStatement.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountStatement.

        The identifier for the Account this Account Statement belongs to.

        :param account_id: The account_id of this AccountStatement.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.

        :return: The created_at of this AccountStatement.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.

        :param created_at: The created_at of this AccountStatement.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def ending_balance(self):
        """Gets the ending_balance of this AccountStatement.

        The Account's balance at the start of its statement period.

        :return: The ending_balance of this AccountStatement.
        :rtype: int
        """
        return self._ending_balance

    @ending_balance.setter
    def ending_balance(self, ending_balance):
        """Sets the ending_balance of this AccountStatement.

        The Account's balance at the start of its statement period.

        :param ending_balance: The ending_balance of this AccountStatement.
        :type ending_balance: int
        """
        if ending_balance is None:
            raise ValueError("Invalid value for `ending_balance`, must not be `None`")

        self._ending_balance = ending_balance

    @property
    def file_id(self):
        """Gets the file_id of this AccountStatement.

        The identifier of the File containing a PDF of the statement.

        :return: The file_id of this AccountStatement.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this AccountStatement.

        The identifier of the File containing a PDF of the statement.

        :param file_id: The file_id of this AccountStatement.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this AccountStatement.

        The Account Statement identifier.

        :return: The id of this AccountStatement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountStatement.

        The Account Statement identifier.

        :param id: The id of this AccountStatement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def starting_balance(self):
        """Gets the starting_balance of this AccountStatement.

        The Account's balance at the start of its statement period.

        :return: The starting_balance of this AccountStatement.
        :rtype: int
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this AccountStatement.

        The Account's balance at the start of its statement period.

        :param starting_balance: The starting_balance of this AccountStatement.
        :type starting_balance: int
        """
        if starting_balance is None:
            raise ValueError("Invalid value for `starting_balance`, must not be `None`")

        self._starting_balance = starting_balance

    @property
    def statement_period_end(self):
        """Gets the statement_period_end of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.

        :return: The statement_period_end of this AccountStatement.
        :rtype: datetime
        """
        return self._statement_period_end

    @statement_period_end.setter
    def statement_period_end(self, statement_period_end):
        """Sets the statement_period_end of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.

        :param statement_period_end: The statement_period_end of this AccountStatement.
        :type statement_period_end: datetime
        """
        if statement_period_end is None:
            raise ValueError("Invalid value for `statement_period_end`, must not be `None`")

        self._statement_period_end = statement_period_end

    @property
    def statement_period_start(self):
        """Gets the statement_period_start of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.

        :return: The statement_period_start of this AccountStatement.
        :rtype: datetime
        """
        return self._statement_period_start

    @statement_period_start.setter
    def statement_period_start(self, statement_period_start):
        """Sets the statement_period_start of this AccountStatement.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.

        :param statement_period_start: The statement_period_start of this AccountStatement.
        :type statement_period_start: datetime
        """
        if statement_period_start is None:
            raise ValueError("Invalid value for `statement_period_start`, must not be `None`")

        self._statement_period_start = statement_period_start

    @property
    def type(self):
        """Gets the type of this AccountStatement.

        A constant representing the object's type. For this resource it will always be `account_statement`.

        :return: The type of this AccountStatement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountStatement.

        A constant representing the object's type. For this resource it will always be `account_statement`.

        :param type: The type of this AccountStatement.
        :type type: str
        """
        allowed_values = ["account_statement"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
