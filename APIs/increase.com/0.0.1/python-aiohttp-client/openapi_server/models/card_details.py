# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: str=None, expiration_month: int=None, expiration_year: int=None, primary_account_number: str=None, type: str=None, verification_code: str=None):
        """CardDetails - a model defined in OpenAPI

        :param card_id: The card_id of this CardDetails.
        :param expiration_month: The expiration_month of this CardDetails.
        :param expiration_year: The expiration_year of this CardDetails.
        :param primary_account_number: The primary_account_number of this CardDetails.
        :param type: The type of this CardDetails.
        :param verification_code: The verification_code of this CardDetails.
        """
        self.openapi_types = {
            'card_id': str,
            'expiration_month': int,
            'expiration_year': int,
            'primary_account_number': str,
            'type': str,
            'verification_code': str
        }

        self.attribute_map = {
            'card_id': 'card_id',
            'expiration_month': 'expiration_month',
            'expiration_year': 'expiration_year',
            'primary_account_number': 'primary_account_number',
            'type': 'type',
            'verification_code': 'verification_code'
        }

        self._card_id = card_id
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        self._primary_account_number = primary_account_number
        self._type = type
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The card_details of this CardDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this CardDetails.

        The identifier for the Card for which sensitive details have been returned.

        :return: The card_id of this CardDetails.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CardDetails.

        The identifier for the Card for which sensitive details have been returned.

        :param card_id: The card_id of this CardDetails.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CardDetails.

        The month the card expires in M format (e.g., August is 8).

        :return: The expiration_month of this CardDetails.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CardDetails.

        The month the card expires in M format (e.g., August is 8).

        :param expiration_month: The expiration_month of this CardDetails.
        :type expiration_month: int
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CardDetails.

        The year the card expires in YYYY format (e.g., 2025).

        :return: The expiration_year of this CardDetails.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CardDetails.

        The year the card expires in YYYY format (e.g., 2025).

        :param expiration_year: The expiration_year of this CardDetails.
        :type expiration_year: int
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")

        self._expiration_year = expiration_year

    @property
    def primary_account_number(self):
        """Gets the primary_account_number of this CardDetails.

        The card number.

        :return: The primary_account_number of this CardDetails.
        :rtype: str
        """
        return self._primary_account_number

    @primary_account_number.setter
    def primary_account_number(self, primary_account_number):
        """Sets the primary_account_number of this CardDetails.

        The card number.

        :param primary_account_number: The primary_account_number of this CardDetails.
        :type primary_account_number: str
        """
        if primary_account_number is None:
            raise ValueError("Invalid value for `primary_account_number`, must not be `None`")

        self._primary_account_number = primary_account_number

    @property
    def type(self):
        """Gets the type of this CardDetails.

        A constant representing the object's type. For this resource it will always be `card_details`.

        :return: The type of this CardDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CardDetails.

        A constant representing the object's type. For this resource it will always be `card_details`.

        :param type: The type of this CardDetails.
        :type type: str
        """
        allowed_values = ["card_details"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification_code(self):
        """Gets the verification_code of this CardDetails.

        The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).

        :return: The verification_code of this CardDetails.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this CardDetails.

        The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).

        :param verification_code: The verification_code of this CardDetails.
        :type verification_code: str
        """
        if verification_code is None:
            raise ValueError("Invalid value for `verification_code`, must not be `None`")

        self._verification_code = verification_code
