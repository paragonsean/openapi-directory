# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_object_id: str=None, associated_object_type: str=None, category: str=None, created_at: datetime=None, id: str=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param associated_object_id: The associated_object_id of this Event.
        :param associated_object_type: The associated_object_type of this Event.
        :param category: The category of this Event.
        :param created_at: The created_at of this Event.
        :param id: The id of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            'associated_object_id': str,
            'associated_object_type': str,
            'category': str,
            'created_at': datetime,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'associated_object_id': 'associated_object_id',
            'associated_object_type': 'associated_object_type',
            'category': 'category',
            'created_at': 'created_at',
            'id': 'id',
            'type': 'type'
        }

        self._associated_object_id = associated_object_id
        self._associated_object_type = associated_object_type
        self._category = category
        self._created_at = created_at
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_object_id(self):
        """Gets the associated_object_id of this Event.

        The identifier of the object that generated this Event.

        :return: The associated_object_id of this Event.
        :rtype: str
        """
        return self._associated_object_id

    @associated_object_id.setter
    def associated_object_id(self, associated_object_id):
        """Sets the associated_object_id of this Event.

        The identifier of the object that generated this Event.

        :param associated_object_id: The associated_object_id of this Event.
        :type associated_object_id: str
        """
        if associated_object_id is None:
            raise ValueError("Invalid value for `associated_object_id`, must not be `None`")

        self._associated_object_id = associated_object_id

    @property
    def associated_object_type(self):
        """Gets the associated_object_type of this Event.

        The type of the object that generated this Event.

        :return: The associated_object_type of this Event.
        :rtype: str
        """
        return self._associated_object_type

    @associated_object_type.setter
    def associated_object_type(self, associated_object_type):
        """Sets the associated_object_type of this Event.

        The type of the object that generated this Event.

        :param associated_object_type: The associated_object_type of this Event.
        :type associated_object_type: str
        """
        if associated_object_type is None:
            raise ValueError("Invalid value for `associated_object_type`, must not be `None`")

        self._associated_object_type = associated_object_type

    @property
    def category(self):
        """Gets the category of this Event.

        The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :return: The category of this Event.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Event.

        The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :param category: The category of this Event.
        :type category: str
        """
        allowed_values = ["account.created", "account.updated", "account_number.created", "account_number.updated", "account_statement.created", "account_transfer.created", "account_transfer.updated", "ach_prenotification.created", "ach_prenotification.updated", "ach_transfer.created", "ach_transfer.updated", "card.created", "card.updated", "card_payment.created", "card_payment.updated", "card_dispute.created", "card_dispute.updated", "check_deposit.created", "check_deposit.updated", "check_transfer.created", "check_transfer.updated", "declined_transaction.created", "digital_wallet_token.created", "digital_wallet_token.updated", "document.created", "entity.created", "entity.updated", "external_account.created", "file.created", "group.updated", "group.heartbeat", "inbound_ach_transfer_return.created", "inbound_ach_transfer_return.updated", "inbound_wire_drawdown_request.created", "oauth_connection.created", "oauth_connection.deactivated", "pending_transaction.created", "pending_transaction.updated", "real_time_decision.card_authorization_requested", "real_time_decision.digital_wallet_token_requested", "real_time_decision.digital_wallet_authentication_requested", "real_time_payments_transfer.created", "real_time_payments_transfer.updated", "real_time_payments_request_for_payment.created", "real_time_payments_request_for_payment.updated", "transaction.created", "wire_drawdown_request.created", "wire_drawdown_request.updated", "wire_transfer.created", "wire_transfer.updated"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_at(self):
        """Gets the created_at of this Event.

        The time the Event was created.

        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        The time the Event was created.

        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Event.

        The Event identifier.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        The Event identifier.

        :param id: The id of this Event.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this Event.

        A constant representing the object's type. For this resource it will always be `event`.

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        A constant representing the object's type. For this resource it will always be `event`.

        :param type: The type of this Event.
        :type type: str
        """
        allowed_values = ["event"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
