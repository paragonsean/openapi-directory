# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_address import BillingAddress
from openapi_server.models.digital_wallet import DigitalWallet
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, billing_address: BillingAddress=None, created_at: datetime=None, description: str=None, digital_wallet: DigitalWallet=None, expiration_month: int=None, expiration_year: int=None, id: str=None, last4: str=None, status: str=None, type: str=None):
        """Card - a model defined in OpenAPI

        :param account_id: The account_id of this Card.
        :param billing_address: The billing_address of this Card.
        :param created_at: The created_at of this Card.
        :param description: The description of this Card.
        :param digital_wallet: The digital_wallet of this Card.
        :param expiration_month: The expiration_month of this Card.
        :param expiration_year: The expiration_year of this Card.
        :param id: The id of this Card.
        :param last4: The last4 of this Card.
        :param status: The status of this Card.
        :param type: The type of this Card.
        """
        self.openapi_types = {
            'account_id': str,
            'billing_address': BillingAddress,
            'created_at': datetime,
            'description': str,
            'digital_wallet': DigitalWallet,
            'expiration_month': int,
            'expiration_year': int,
            'id': str,
            'last4': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'billing_address': 'billing_address',
            'created_at': 'created_at',
            'description': 'description',
            'digital_wallet': 'digital_wallet',
            'expiration_month': 'expiration_month',
            'expiration_year': 'expiration_year',
            'id': 'id',
            'last4': 'last4',
            'status': 'status',
            'type': 'type'
        }

        self._account_id = account_id
        self._billing_address = billing_address
        self._created_at = created_at
        self._description = description
        self._digital_wallet = digital_wallet
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        self._id = id
        self._last4 = last4
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Card.

        The identifier for the account this card belongs to.

        :return: The account_id of this Card.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Card.

        The identifier for the account this card belongs to.

        :param account_id: The account_id of this Card.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def billing_address(self):
        """Gets the billing_address of this Card.


        :return: The billing_address of this Card.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Card.


        :param billing_address: The billing_address of this Card.
        :type billing_address: BillingAddress
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def created_at(self):
        """Gets the created_at of this Card.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.

        :return: The created_at of this Card.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Card.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.

        :param created_at: The created_at of this Card.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Card.

        The card's description for display purposes.

        :return: The description of this Card.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Card.

        The card's description for display purposes.

        :param description: The description of this Card.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def digital_wallet(self):
        """Gets the digital_wallet of this Card.


        :return: The digital_wallet of this Card.
        :rtype: DigitalWallet
        """
        return self._digital_wallet

    @digital_wallet.setter
    def digital_wallet(self, digital_wallet):
        """Sets the digital_wallet of this Card.


        :param digital_wallet: The digital_wallet of this Card.
        :type digital_wallet: DigitalWallet
        """
        if digital_wallet is None:
            raise ValueError("Invalid value for `digital_wallet`, must not be `None`")

        self._digital_wallet = digital_wallet

    @property
    def expiration_month(self):
        """Gets the expiration_month of this Card.

        The month the card expires in M format (e.g., August is 8).

        :return: The expiration_month of this Card.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this Card.

        The month the card expires in M format (e.g., August is 8).

        :param expiration_month: The expiration_month of this Card.
        :type expiration_month: int
        """
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this Card.

        The year the card expires in YYYY format (e.g., 2025).

        :return: The expiration_year of this Card.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this Card.

        The year the card expires in YYYY format (e.g., 2025).

        :param expiration_year: The expiration_year of this Card.
        :type expiration_year: int
        """
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")

        self._expiration_year = expiration_year

    @property
    def id(self):
        """Gets the id of this Card.

        The card identifier.

        :return: The id of this Card.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.

        The card identifier.

        :param id: The id of this Card.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last4(self):
        """Gets the last4 of this Card.

        The last 4 digits of the Card's Primary Account Number.

        :return: The last4 of this Card.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this Card.

        The last 4 digits of the Card's Primary Account Number.

        :param last4: The last4 of this Card.
        :type last4: str
        """
        if last4 is None:
            raise ValueError("Invalid value for `last4`, must not be `None`")

        self._last4 = last4

    @property
    def status(self):
        """Gets the status of this Card.

        This indicates if payments can be made with the card.

        :return: The status of this Card.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Card.

        This indicates if payments can be made with the card.

        :param status: The status of this Card.
        :type status: str
        """
        allowed_values = ["active", "disabled", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Card.

        A constant representing the object's type. For this resource it will always be `card`.

        :return: The type of this Card.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Card.

        A constant representing the object's type. For this resource it will always be `card`.

        :param type: The type of this Card.
        :type type: str
        """
        allowed_values = ["card"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
