# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnAccountNumberParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, name: str=None):
        """CreateAnAccountNumberParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateAnAccountNumberParameters.
        :param name: The name of this CreateAnAccountNumberParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'name': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'name': 'name'
        }

        self._account_id = account_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnAccountNumberParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_account_number_parameters of this CreateAnAccountNumberParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateAnAccountNumberParameters.

        The Account the Account Number should belong to.

        :return: The account_id of this CreateAnAccountNumberParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAnAccountNumberParameters.

        The Account the Account Number should belong to.

        :param account_id: The account_id of this CreateAnAccountNumberParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this CreateAnAccountNumberParameters.

        The name you choose for the Account Number.

        :return: The name of this CreateAnAccountNumberParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnAccountNumberParameters.

        The name you choose for the Account Number.

        :param name: The name of this CreateAnAccountNumberParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
