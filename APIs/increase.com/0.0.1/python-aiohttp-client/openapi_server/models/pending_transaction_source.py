# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_transfer_instruction import ACHTransferInstruction
from openapi_server.models.account_transfer_instruction import AccountTransferInstruction
from openapi_server.models.card_authorization import CardAuthorization
from openapi_server.models.check_deposit_instruction import CheckDepositInstruction
from openapi_server.models.check_transfer_instruction import CheckTransferInstruction
from openapi_server.models.deprecated_card_authorization import DeprecatedCardAuthorization
from openapi_server.models.inbound_funds_hold import InboundFundsHold
from openapi_server.models.real_time_payments_transfer_instruction import RealTimePaymentsTransferInstruction
from openapi_server.models.wire_drawdown_payment_instruction import WireDrawdownPaymentInstruction
from openapi_server.models.wire_transfer_instruction import WireTransferInstruction
from openapi_server import util


class PendingTransactionSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_transfer_instruction: AccountTransferInstruction=None, ach_transfer_instruction: ACHTransferInstruction=None, card_authorization: CardAuthorization=None, card_route_authorization: DeprecatedCardAuthorization=None, category: str=None, check_deposit_instruction: CheckDepositInstruction=None, check_transfer_instruction: CheckTransferInstruction=None, inbound_funds_hold: InboundFundsHold=None, real_time_payments_transfer_instruction: RealTimePaymentsTransferInstruction=None, wire_drawdown_payment_instruction: WireDrawdownPaymentInstruction=None, wire_transfer_instruction: WireTransferInstruction=None):
        """PendingTransactionSource - a model defined in OpenAPI

        :param account_transfer_instruction: The account_transfer_instruction of this PendingTransactionSource.
        :param ach_transfer_instruction: The ach_transfer_instruction of this PendingTransactionSource.
        :param card_authorization: The card_authorization of this PendingTransactionSource.
        :param card_route_authorization: The card_route_authorization of this PendingTransactionSource.
        :param category: The category of this PendingTransactionSource.
        :param check_deposit_instruction: The check_deposit_instruction of this PendingTransactionSource.
        :param check_transfer_instruction: The check_transfer_instruction of this PendingTransactionSource.
        :param inbound_funds_hold: The inbound_funds_hold of this PendingTransactionSource.
        :param real_time_payments_transfer_instruction: The real_time_payments_transfer_instruction of this PendingTransactionSource.
        :param wire_drawdown_payment_instruction: The wire_drawdown_payment_instruction of this PendingTransactionSource.
        :param wire_transfer_instruction: The wire_transfer_instruction of this PendingTransactionSource.
        """
        self.openapi_types = {
            'account_transfer_instruction': AccountTransferInstruction,
            'ach_transfer_instruction': ACHTransferInstruction,
            'card_authorization': CardAuthorization,
            'card_route_authorization': DeprecatedCardAuthorization,
            'category': str,
            'check_deposit_instruction': CheckDepositInstruction,
            'check_transfer_instruction': CheckTransferInstruction,
            'inbound_funds_hold': InboundFundsHold,
            'real_time_payments_transfer_instruction': RealTimePaymentsTransferInstruction,
            'wire_drawdown_payment_instruction': WireDrawdownPaymentInstruction,
            'wire_transfer_instruction': WireTransferInstruction
        }

        self.attribute_map = {
            'account_transfer_instruction': 'account_transfer_instruction',
            'ach_transfer_instruction': 'ach_transfer_instruction',
            'card_authorization': 'card_authorization',
            'card_route_authorization': 'card_route_authorization',
            'category': 'category',
            'check_deposit_instruction': 'check_deposit_instruction',
            'check_transfer_instruction': 'check_transfer_instruction',
            'inbound_funds_hold': 'inbound_funds_hold',
            'real_time_payments_transfer_instruction': 'real_time_payments_transfer_instruction',
            'wire_drawdown_payment_instruction': 'wire_drawdown_payment_instruction',
            'wire_transfer_instruction': 'wire_transfer_instruction'
        }

        self._account_transfer_instruction = account_transfer_instruction
        self._ach_transfer_instruction = ach_transfer_instruction
        self._card_authorization = card_authorization
        self._card_route_authorization = card_route_authorization
        self._category = category
        self._check_deposit_instruction = check_deposit_instruction
        self._check_transfer_instruction = check_transfer_instruction
        self._inbound_funds_hold = inbound_funds_hold
        self._real_time_payments_transfer_instruction = real_time_payments_transfer_instruction
        self._wire_drawdown_payment_instruction = wire_drawdown_payment_instruction
        self._wire_transfer_instruction = wire_transfer_instruction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingTransactionSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pending_Transaction_Source of this PendingTransactionSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_transfer_instruction(self):
        """Gets the account_transfer_instruction of this PendingTransactionSource.


        :return: The account_transfer_instruction of this PendingTransactionSource.
        :rtype: AccountTransferInstruction
        """
        return self._account_transfer_instruction

    @account_transfer_instruction.setter
    def account_transfer_instruction(self, account_transfer_instruction):
        """Sets the account_transfer_instruction of this PendingTransactionSource.


        :param account_transfer_instruction: The account_transfer_instruction of this PendingTransactionSource.
        :type account_transfer_instruction: AccountTransferInstruction
        """
        if account_transfer_instruction is None:
            raise ValueError("Invalid value for `account_transfer_instruction`, must not be `None`")

        self._account_transfer_instruction = account_transfer_instruction

    @property
    def ach_transfer_instruction(self):
        """Gets the ach_transfer_instruction of this PendingTransactionSource.


        :return: The ach_transfer_instruction of this PendingTransactionSource.
        :rtype: ACHTransferInstruction
        """
        return self._ach_transfer_instruction

    @ach_transfer_instruction.setter
    def ach_transfer_instruction(self, ach_transfer_instruction):
        """Sets the ach_transfer_instruction of this PendingTransactionSource.


        :param ach_transfer_instruction: The ach_transfer_instruction of this PendingTransactionSource.
        :type ach_transfer_instruction: ACHTransferInstruction
        """
        if ach_transfer_instruction is None:
            raise ValueError("Invalid value for `ach_transfer_instruction`, must not be `None`")

        self._ach_transfer_instruction = ach_transfer_instruction

    @property
    def card_authorization(self):
        """Gets the card_authorization of this PendingTransactionSource.


        :return: The card_authorization of this PendingTransactionSource.
        :rtype: CardAuthorization
        """
        return self._card_authorization

    @card_authorization.setter
    def card_authorization(self, card_authorization):
        """Sets the card_authorization of this PendingTransactionSource.


        :param card_authorization: The card_authorization of this PendingTransactionSource.
        :type card_authorization: CardAuthorization
        """
        if card_authorization is None:
            raise ValueError("Invalid value for `card_authorization`, must not be `None`")

        self._card_authorization = card_authorization

    @property
    def card_route_authorization(self):
        """Gets the card_route_authorization of this PendingTransactionSource.


        :return: The card_route_authorization of this PendingTransactionSource.
        :rtype: DeprecatedCardAuthorization
        """
        return self._card_route_authorization

    @card_route_authorization.setter
    def card_route_authorization(self, card_route_authorization):
        """Sets the card_route_authorization of this PendingTransactionSource.


        :param card_route_authorization: The card_route_authorization of this PendingTransactionSource.
        :type card_route_authorization: DeprecatedCardAuthorization
        """
        if card_route_authorization is None:
            raise ValueError("Invalid value for `card_route_authorization`, must not be `None`")

        self._card_route_authorization = card_route_authorization

    @property
    def category(self):
        """Gets the category of this PendingTransactionSource.

        The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :return: The category of this PendingTransactionSource.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PendingTransactionSource.

        The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :param category: The category of this PendingTransactionSource.
        :type category: str
        """
        allowed_values = ["account_transfer_instruction", "ach_transfer_instruction", "card_authorization", "check_deposit_instruction", "check_transfer_instruction", "inbound_funds_hold", "card_route_authorization", "real_time_payments_transfer_instruction", "wire_drawdown_payment_instruction", "wire_transfer_instruction", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def check_deposit_instruction(self):
        """Gets the check_deposit_instruction of this PendingTransactionSource.


        :return: The check_deposit_instruction of this PendingTransactionSource.
        :rtype: CheckDepositInstruction
        """
        return self._check_deposit_instruction

    @check_deposit_instruction.setter
    def check_deposit_instruction(self, check_deposit_instruction):
        """Sets the check_deposit_instruction of this PendingTransactionSource.


        :param check_deposit_instruction: The check_deposit_instruction of this PendingTransactionSource.
        :type check_deposit_instruction: CheckDepositInstruction
        """
        if check_deposit_instruction is None:
            raise ValueError("Invalid value for `check_deposit_instruction`, must not be `None`")

        self._check_deposit_instruction = check_deposit_instruction

    @property
    def check_transfer_instruction(self):
        """Gets the check_transfer_instruction of this PendingTransactionSource.


        :return: The check_transfer_instruction of this PendingTransactionSource.
        :rtype: CheckTransferInstruction
        """
        return self._check_transfer_instruction

    @check_transfer_instruction.setter
    def check_transfer_instruction(self, check_transfer_instruction):
        """Sets the check_transfer_instruction of this PendingTransactionSource.


        :param check_transfer_instruction: The check_transfer_instruction of this PendingTransactionSource.
        :type check_transfer_instruction: CheckTransferInstruction
        """
        if check_transfer_instruction is None:
            raise ValueError("Invalid value for `check_transfer_instruction`, must not be `None`")

        self._check_transfer_instruction = check_transfer_instruction

    @property
    def inbound_funds_hold(self):
        """Gets the inbound_funds_hold of this PendingTransactionSource.


        :return: The inbound_funds_hold of this PendingTransactionSource.
        :rtype: InboundFundsHold
        """
        return self._inbound_funds_hold

    @inbound_funds_hold.setter
    def inbound_funds_hold(self, inbound_funds_hold):
        """Sets the inbound_funds_hold of this PendingTransactionSource.


        :param inbound_funds_hold: The inbound_funds_hold of this PendingTransactionSource.
        :type inbound_funds_hold: InboundFundsHold
        """
        if inbound_funds_hold is None:
            raise ValueError("Invalid value for `inbound_funds_hold`, must not be `None`")

        self._inbound_funds_hold = inbound_funds_hold

    @property
    def real_time_payments_transfer_instruction(self):
        """Gets the real_time_payments_transfer_instruction of this PendingTransactionSource.


        :return: The real_time_payments_transfer_instruction of this PendingTransactionSource.
        :rtype: RealTimePaymentsTransferInstruction
        """
        return self._real_time_payments_transfer_instruction

    @real_time_payments_transfer_instruction.setter
    def real_time_payments_transfer_instruction(self, real_time_payments_transfer_instruction):
        """Sets the real_time_payments_transfer_instruction of this PendingTransactionSource.


        :param real_time_payments_transfer_instruction: The real_time_payments_transfer_instruction of this PendingTransactionSource.
        :type real_time_payments_transfer_instruction: RealTimePaymentsTransferInstruction
        """
        if real_time_payments_transfer_instruction is None:
            raise ValueError("Invalid value for `real_time_payments_transfer_instruction`, must not be `None`")

        self._real_time_payments_transfer_instruction = real_time_payments_transfer_instruction

    @property
    def wire_drawdown_payment_instruction(self):
        """Gets the wire_drawdown_payment_instruction of this PendingTransactionSource.


        :return: The wire_drawdown_payment_instruction of this PendingTransactionSource.
        :rtype: WireDrawdownPaymentInstruction
        """
        return self._wire_drawdown_payment_instruction

    @wire_drawdown_payment_instruction.setter
    def wire_drawdown_payment_instruction(self, wire_drawdown_payment_instruction):
        """Sets the wire_drawdown_payment_instruction of this PendingTransactionSource.


        :param wire_drawdown_payment_instruction: The wire_drawdown_payment_instruction of this PendingTransactionSource.
        :type wire_drawdown_payment_instruction: WireDrawdownPaymentInstruction
        """
        if wire_drawdown_payment_instruction is None:
            raise ValueError("Invalid value for `wire_drawdown_payment_instruction`, must not be `None`")

        self._wire_drawdown_payment_instruction = wire_drawdown_payment_instruction

    @property
    def wire_transfer_instruction(self):
        """Gets the wire_transfer_instruction of this PendingTransactionSource.


        :return: The wire_transfer_instruction of this PendingTransactionSource.
        :rtype: WireTransferInstruction
        """
        return self._wire_transfer_instruction

    @wire_transfer_instruction.setter
    def wire_transfer_instruction(self, wire_transfer_instruction):
        """Sets the wire_transfer_instruction of this PendingTransactionSource.


        :param wire_transfer_instruction: The wire_transfer_instruction of this PendingTransactionSource.
        :type wire_transfer_instruction: WireTransferInstruction
        """
        if wire_transfer_instruction is None:
            raise ValueError("Invalid value for `wire_transfer_instruction`, must not be `None`")

        self._wire_transfer_instruction = wire_transfer_instruction
