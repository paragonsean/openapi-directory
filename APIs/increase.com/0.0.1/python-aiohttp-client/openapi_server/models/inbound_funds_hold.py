# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundFundsHold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, automatically_releases_at: datetime=None, created_at: datetime=None, currency: str=None, held_transaction_id: str=None, pending_transaction_id: str=None, released_at: datetime=None, status: str=None):
        """InboundFundsHold - a model defined in OpenAPI

        :param amount: The amount of this InboundFundsHold.
        :param automatically_releases_at: The automatically_releases_at of this InboundFundsHold.
        :param created_at: The created_at of this InboundFundsHold.
        :param currency: The currency of this InboundFundsHold.
        :param held_transaction_id: The held_transaction_id of this InboundFundsHold.
        :param pending_transaction_id: The pending_transaction_id of this InboundFundsHold.
        :param released_at: The released_at of this InboundFundsHold.
        :param status: The status of this InboundFundsHold.
        """
        self.openapi_types = {
            'amount': int,
            'automatically_releases_at': datetime,
            'created_at': datetime,
            'currency': str,
            'held_transaction_id': str,
            'pending_transaction_id': str,
            'released_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'automatically_releases_at': 'automatically_releases_at',
            'created_at': 'created_at',
            'currency': 'currency',
            'held_transaction_id': 'held_transaction_id',
            'pending_transaction_id': 'pending_transaction_id',
            'released_at': 'released_at',
            'status': 'status'
        }

        self._amount = amount
        self._automatically_releases_at = automatically_releases_at
        self._created_at = created_at
        self._currency = currency
        self._held_transaction_id = held_transaction_id
        self._pending_transaction_id = pending_transaction_id
        self._released_at = released_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundFundsHold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Inbound_Funds_Hold of this InboundFundsHold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InboundFundsHold.

        The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.

        :return: The amount of this InboundFundsHold.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InboundFundsHold.

        The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.

        :param amount: The amount of this InboundFundsHold.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def automatically_releases_at(self):
        """Gets the automatically_releases_at of this InboundFundsHold.

        When the hold will be released automatically. Certain conditions may cause it to be released before this time.

        :return: The automatically_releases_at of this InboundFundsHold.
        :rtype: datetime
        """
        return self._automatically_releases_at

    @automatically_releases_at.setter
    def automatically_releases_at(self, automatically_releases_at):
        """Sets the automatically_releases_at of this InboundFundsHold.

        When the hold will be released automatically. Certain conditions may cause it to be released before this time.

        :param automatically_releases_at: The automatically_releases_at of this InboundFundsHold.
        :type automatically_releases_at: datetime
        """
        if automatically_releases_at is None:
            raise ValueError("Invalid value for `automatically_releases_at`, must not be `None`")

        self._automatically_releases_at = automatically_releases_at

    @property
    def created_at(self):
        """Gets the created_at of this InboundFundsHold.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.

        :return: The created_at of this InboundFundsHold.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InboundFundsHold.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.

        :param created_at: The created_at of this InboundFundsHold.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this InboundFundsHold.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.

        :return: The currency of this InboundFundsHold.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InboundFundsHold.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.

        :param currency: The currency of this InboundFundsHold.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def held_transaction_id(self):
        """Gets the held_transaction_id of this InboundFundsHold.

        The ID of the Transaction for which funds were held.

        :return: The held_transaction_id of this InboundFundsHold.
        :rtype: str
        """
        return self._held_transaction_id

    @held_transaction_id.setter
    def held_transaction_id(self, held_transaction_id):
        """Sets the held_transaction_id of this InboundFundsHold.

        The ID of the Transaction for which funds were held.

        :param held_transaction_id: The held_transaction_id of this InboundFundsHold.
        :type held_transaction_id: str
        """
        if held_transaction_id is None:
            raise ValueError("Invalid value for `held_transaction_id`, must not be `None`")

        self._held_transaction_id = held_transaction_id

    @property
    def pending_transaction_id(self):
        """Gets the pending_transaction_id of this InboundFundsHold.

        The ID of the Pending Transaction representing the held funds.

        :return: The pending_transaction_id of this InboundFundsHold.
        :rtype: str
        """
        return self._pending_transaction_id

    @pending_transaction_id.setter
    def pending_transaction_id(self, pending_transaction_id):
        """Sets the pending_transaction_id of this InboundFundsHold.

        The ID of the Pending Transaction representing the held funds.

        :param pending_transaction_id: The pending_transaction_id of this InboundFundsHold.
        :type pending_transaction_id: str
        """
        if pending_transaction_id is None:
            raise ValueError("Invalid value for `pending_transaction_id`, must not be `None`")

        self._pending_transaction_id = pending_transaction_id

    @property
    def released_at(self):
        """Gets the released_at of this InboundFundsHold.

        When the hold was released (if it has been released).

        :return: The released_at of this InboundFundsHold.
        :rtype: datetime
        """
        return self._released_at

    @released_at.setter
    def released_at(self, released_at):
        """Sets the released_at of this InboundFundsHold.

        When the hold was released (if it has been released).

        :param released_at: The released_at of this InboundFundsHold.
        :type released_at: datetime
        """
        if released_at is None:
            raise ValueError("Invalid value for `released_at`, must not be `None`")

        self._released_at = released_at

    @property
    def status(self):
        """Gets the status of this InboundFundsHold.

        The status of the hold.

        :return: The status of this InboundFundsHold.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InboundFundsHold.

        The status of the hold.

        :param status: The status of this InboundFundsHold.
        :type status: str
        """
        allowed_values = ["held", "complete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
