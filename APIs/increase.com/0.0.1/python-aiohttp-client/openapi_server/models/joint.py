# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.individual1 import Individual1
from openapi_server import util


class Joint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, individuals: List[Individual1]=None, name: str=None):
        """Joint - a model defined in OpenAPI

        :param individuals: The individuals of this Joint.
        :param name: The name of this Joint.
        """
        self.openapi_types = {
            'individuals': List[Individual1],
            'name': str
        }

        self.attribute_map = {
            'individuals': 'individuals',
            'name': 'name'
        }

        self._individuals = individuals
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Joint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Joint of this Joint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def individuals(self):
        """Gets the individuals of this Joint.

        The two individuals that share control of the entity.

        :return: The individuals of this Joint.
        :rtype: List[Individual1]
        """
        return self._individuals

    @individuals.setter
    def individuals(self, individuals):
        """Sets the individuals of this Joint.

        The two individuals that share control of the entity.

        :param individuals: The individuals of this Joint.
        :type individuals: List[Individual1]
        """
        if individuals is None:
            raise ValueError("Invalid value for `individuals`, must not be `None`")

        self._individuals = individuals

    @property
    def name(self):
        """Gets the name of this Joint.

        The entity's name.

        :return: The name of this Joint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Joint.

        The entity's name.

        :param name: The name of this Joint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
