# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardRevenuePayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: str=None, period_end: datetime=None, period_start: datetime=None, transacted_on_account_id: str=None):
        """CardRevenuePayment - a model defined in OpenAPI

        :param amount: The amount of this CardRevenuePayment.
        :param currency: The currency of this CardRevenuePayment.
        :param period_end: The period_end of this CardRevenuePayment.
        :param period_start: The period_start of this CardRevenuePayment.
        :param transacted_on_account_id: The transacted_on_account_id of this CardRevenuePayment.
        """
        self.openapi_types = {
            'amount': int,
            'currency': str,
            'period_end': datetime,
            'period_start': datetime,
            'transacted_on_account_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'period_end': 'period_end',
            'period_start': 'period_start',
            'transacted_on_account_id': 'transacted_on_account_id'
        }

        self._amount = amount
        self._currency = currency
        self._period_end = period_end
        self._period_start = period_start
        self._transacted_on_account_id = transacted_on_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardRevenuePayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_Revenue_Payment of this CardRevenuePayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CardRevenuePayment.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :return: The amount of this CardRevenuePayment.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CardRevenuePayment.

        The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.

        :param amount: The amount of this CardRevenuePayment.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CardRevenuePayment.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.

        :return: The currency of this CardRevenuePayment.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardRevenuePayment.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.

        :param currency: The currency of this CardRevenuePayment.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def period_end(self):
        """Gets the period_end of this CardRevenuePayment.

        The end of the period for which this transaction paid interest.

        :return: The period_end of this CardRevenuePayment.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this CardRevenuePayment.

        The end of the period for which this transaction paid interest.

        :param period_end: The period_end of this CardRevenuePayment.
        :type period_end: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this CardRevenuePayment.

        The start of the period for which this transaction paid interest.

        :return: The period_start of this CardRevenuePayment.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this CardRevenuePayment.

        The start of the period for which this transaction paid interest.

        :param period_start: The period_start of this CardRevenuePayment.
        :type period_start: datetime
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")

        self._period_start = period_start

    @property
    def transacted_on_account_id(self):
        """Gets the transacted_on_account_id of this CardRevenuePayment.

        The account the card belonged to.

        :return: The transacted_on_account_id of this CardRevenuePayment.
        :rtype: str
        """
        return self._transacted_on_account_id

    @transacted_on_account_id.setter
    def transacted_on_account_id(self, transacted_on_account_id):
        """Sets the transacted_on_account_id of this CardRevenuePayment.

        The account the card belonged to.

        :param transacted_on_account_id: The transacted_on_account_id of this CardRevenuePayment.
        :type transacted_on_account_id: str
        """
        if transacted_on_account_id is None:
            raise ValueError("Invalid value for `transacted_on_account_id`, must not be `None`")

        self._transacted_on_account_id = transacted_on_account_id
