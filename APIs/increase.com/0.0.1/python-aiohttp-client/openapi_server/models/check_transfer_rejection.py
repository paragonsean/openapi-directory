# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckTransferRejection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transfer_id: str=None):
        """CheckTransferRejection - a model defined in OpenAPI

        :param transfer_id: The transfer_id of this CheckTransferRejection.
        """
        self.openapi_types = {
            'transfer_id': str
        }

        self.attribute_map = {
            'transfer_id': 'transfer_id'
        }

        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransferRejection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Transfer_Rejection of this CheckTransferRejection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transfer_id(self):
        """Gets the transfer_id of this CheckTransferRejection.

        The identifier of the Check Transfer that led to this Transaction.

        :return: The transfer_id of this CheckTransferRejection.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this CheckTransferRejection.

        The identifier of the Check Transfer that led to this Transaction.

        :param transfer_id: The transfer_id of this CheckTransferRejection.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
