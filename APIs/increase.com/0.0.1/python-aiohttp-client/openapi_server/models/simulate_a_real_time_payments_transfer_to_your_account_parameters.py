# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateARealTimePaymentsTransferToYourAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_id: str=None, amount: int=None, debtor_account_number: str=None, debtor_name: str=None, debtor_routing_number: str=None, remittance_information: str=None, request_for_payment_id: str=None):
        """SimulateARealTimePaymentsTransferToYourAccountParameters - a model defined in OpenAPI

        :param account_number_id: The account_number_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param amount: The amount of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param debtor_account_number: The debtor_account_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param debtor_name: The debtor_name of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param debtor_routing_number: The debtor_routing_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param remittance_information: The remittance_information of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :param request_for_payment_id: The request_for_payment_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        """
        self.openapi_types = {
            'account_number_id': str,
            'amount': int,
            'debtor_account_number': str,
            'debtor_name': str,
            'debtor_routing_number': str,
            'remittance_information': str,
            'request_for_payment_id': str
        }

        self.attribute_map = {
            'account_number_id': 'account_number_id',
            'amount': 'amount',
            'debtor_account_number': 'debtor_account_number',
            'debtor_name': 'debtor_name',
            'debtor_routing_number': 'debtor_routing_number',
            'remittance_information': 'remittance_information',
            'request_for_payment_id': 'request_for_payment_id'
        }

        self._account_number_id = account_number_id
        self._amount = amount
        self._debtor_account_number = debtor_account_number
        self._debtor_name = debtor_name
        self._debtor_routing_number = debtor_routing_number
        self._remittance_information = remittance_information
        self._request_for_payment_id = request_for_payment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateARealTimePaymentsTransferToYourAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_a_real_time_payments_transfer_to_your_account_parameters of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_id(self):
        """Gets the account_number_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The identifier of the Account Number the inbound Real Time Payments Transfer is for.

        :return: The account_number_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._account_number_id

    @account_number_id.setter
    def account_number_id(self, account_number_id):
        """Sets the account_number_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The identifier of the Account Number the inbound Real Time Payments Transfer is for.

        :param account_number_id: The account_number_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type account_number_id: str
        """
        if account_number_id is None:
            raise ValueError("Invalid value for `account_number_id`, must not be `None`")

        self._account_number_id = account_number_id

    @property
    def amount(self):
        """Gets the amount of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The transfer amount in USD cents. Must be positive.

        :return: The amount of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The transfer amount in USD cents. Must be positive.

        :param amount: The amount of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def debtor_account_number(self):
        """Gets the debtor_account_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The account number of the account that sent the transfer.

        :return: The debtor_account_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._debtor_account_number

    @debtor_account_number.setter
    def debtor_account_number(self, debtor_account_number):
        """Sets the debtor_account_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The account number of the account that sent the transfer.

        :param debtor_account_number: The debtor_account_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type debtor_account_number: str
        """
        if debtor_account_number is not None and len(debtor_account_number) > 200:
            raise ValueError("Invalid value for `debtor_account_number`, length must be less than or equal to `200`")
        if debtor_account_number is not None and len(debtor_account_number) < 1:
            raise ValueError("Invalid value for `debtor_account_number`, length must be greater than or equal to `1`")

        self._debtor_account_number = debtor_account_number

    @property
    def debtor_name(self):
        """Gets the debtor_name of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The name provided by the sender of the transfer.

        :return: The debtor_name of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The name provided by the sender of the transfer.

        :param debtor_name: The debtor_name of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type debtor_name: str
        """
        if debtor_name is not None and len(debtor_name) > 200:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `200`")
        if debtor_name is not None and len(debtor_name) < 1:
            raise ValueError("Invalid value for `debtor_name`, length must be greater than or equal to `1`")

        self._debtor_name = debtor_name

    @property
    def debtor_routing_number(self):
        """Gets the debtor_routing_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The routing number of the account that sent the transfer.

        :return: The debtor_routing_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._debtor_routing_number

    @debtor_routing_number.setter
    def debtor_routing_number(self, debtor_routing_number):
        """Sets the debtor_routing_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The routing number of the account that sent the transfer.

        :param debtor_routing_number: The debtor_routing_number of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type debtor_routing_number: str
        """
        if debtor_routing_number is not None and len(debtor_routing_number) > 9:
            raise ValueError("Invalid value for `debtor_routing_number`, length must be less than or equal to `9`")
        if debtor_routing_number is not None and len(debtor_routing_number) < 9:
            raise ValueError("Invalid value for `debtor_routing_number`, length must be greater than or equal to `9`")

        self._debtor_routing_number = debtor_routing_number

    @property
    def remittance_information(self):
        """Gets the remittance_information of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        Additional information included with the transfer.

        :return: The remittance_information of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        Additional information included with the transfer.

        :param remittance_information: The remittance_information of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type remittance_information: str
        """
        if remittance_information is not None and len(remittance_information) > 140:
            raise ValueError("Invalid value for `remittance_information`, length must be less than or equal to `140`")
        if remittance_information is not None and len(remittance_information) < 1:
            raise ValueError("Invalid value for `remittance_information`, length must be greater than or equal to `1`")

        self._remittance_information = remittance_information

    @property
    def request_for_payment_id(self):
        """Gets the request_for_payment_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The identifier of a pending Request for Payment that this transfer will fulfill.

        :return: The request_for_payment_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :rtype: str
        """
        return self._request_for_payment_id

    @request_for_payment_id.setter
    def request_for_payment_id(self, request_for_payment_id):
        """Sets the request_for_payment_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.

        The identifier of a pending Request for Payment that this transfer will fulfill.

        :param request_for_payment_id: The request_for_payment_id of this SimulateARealTimePaymentsTransferToYourAccountParameters.
        :type request_for_payment_id: str
        """

        self._request_for_payment_id = request_for_payment_id
