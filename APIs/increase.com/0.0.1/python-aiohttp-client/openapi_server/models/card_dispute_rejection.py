# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardDisputeRejection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_dispute_id: str=None, explanation: str=None, rejected_at: datetime=None):
        """CardDisputeRejection - a model defined in OpenAPI

        :param card_dispute_id: The card_dispute_id of this CardDisputeRejection.
        :param explanation: The explanation of this CardDisputeRejection.
        :param rejected_at: The rejected_at of this CardDisputeRejection.
        """
        self.openapi_types = {
            'card_dispute_id': str,
            'explanation': str,
            'rejected_at': datetime
        }

        self.attribute_map = {
            'card_dispute_id': 'card_dispute_id',
            'explanation': 'explanation',
            'rejected_at': 'rejected_at'
        }

        self._card_dispute_id = card_dispute_id
        self._explanation = explanation
        self._rejected_at = rejected_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDisputeRejection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_Dispute_Rejection of this CardDisputeRejection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_dispute_id(self):
        """Gets the card_dispute_id of this CardDisputeRejection.

        The identifier of the Card Dispute that was rejected.

        :return: The card_dispute_id of this CardDisputeRejection.
        :rtype: str
        """
        return self._card_dispute_id

    @card_dispute_id.setter
    def card_dispute_id(self, card_dispute_id):
        """Sets the card_dispute_id of this CardDisputeRejection.

        The identifier of the Card Dispute that was rejected.

        :param card_dispute_id: The card_dispute_id of this CardDisputeRejection.
        :type card_dispute_id: str
        """
        if card_dispute_id is None:
            raise ValueError("Invalid value for `card_dispute_id`, must not be `None`")

        self._card_dispute_id = card_dispute_id

    @property
    def explanation(self):
        """Gets the explanation of this CardDisputeRejection.

        Why the Card Dispute was rejected.

        :return: The explanation of this CardDisputeRejection.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this CardDisputeRejection.

        Why the Card Dispute was rejected.

        :param explanation: The explanation of this CardDisputeRejection.
        :type explanation: str
        """
        if explanation is None:
            raise ValueError("Invalid value for `explanation`, must not be `None`")

        self._explanation = explanation

    @property
    def rejected_at(self):
        """Gets the rejected_at of this CardDisputeRejection.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.

        :return: The rejected_at of this CardDisputeRejection.
        :rtype: datetime
        """
        return self._rejected_at

    @rejected_at.setter
    def rejected_at(self, rejected_at):
        """Sets the rejected_at of this CardDisputeRejection.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.

        :param rejected_at: The rejected_at of this CardDisputeRejection.
        :type rejected_at: datetime
        """
        if rejected_at is None:
            raise ValueError("Invalid value for `rejected_at`, must not be `None`")

        self._rejected_at = rejected_at
