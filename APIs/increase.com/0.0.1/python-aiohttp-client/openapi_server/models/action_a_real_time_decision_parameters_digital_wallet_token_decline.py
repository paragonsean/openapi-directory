# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionARealTimeDecisionParametersDigitalWalletTokenDecline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: str=None):
        """ActionARealTimeDecisionParametersDigitalWalletTokenDecline - a model defined in OpenAPI

        :param reason: The reason of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.
        """
        self.openapi_types = {
            'reason': str
        }

        self.attribute_map = {
            'reason': 'reason'
        }

        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionARealTimeDecisionParametersDigitalWalletTokenDecline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The action_a_real_time_decision_parameters_digital_wallet_token_decline of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.

        Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.

        :return: The reason of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.

        Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.

        :param reason: The reason of this ActionARealTimeDecisionParametersDigitalWalletTokenDecline.
        :type reason: str
        """
        if reason is not None and len(reason) > 200:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `200`")
        if reason is not None and len(reason) < 1:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")

        self._reason = reason
