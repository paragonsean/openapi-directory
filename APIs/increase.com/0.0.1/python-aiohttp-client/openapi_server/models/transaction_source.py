# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_check_conversion import ACHCheckConversion
from openapi_server.models.ach_check_conversion_return import ACHCheckConversionReturn
from openapi_server.models.ach_transfer_intention import ACHTransferIntention
from openapi_server.models.ach_transfer_rejection import ACHTransferRejection
from openapi_server.models.ach_transfer_return1 import ACHTransferReturn1
from openapi_server.models.account_transfer_intention import AccountTransferIntention
from openapi_server.models.card_dispute_acceptance1 import CardDisputeAcceptance1
from openapi_server.models.card_refund import CardRefund
from openapi_server.models.card_revenue_payment import CardRevenuePayment
from openapi_server.models.card_settlement import CardSettlement
from openapi_server.models.check_deposit_acceptance1 import CheckDepositAcceptance1
from openapi_server.models.check_deposit_return1 import CheckDepositReturn1
from openapi_server.models.check_transfer_intention import CheckTransferIntention
from openapi_server.models.check_transfer_rejection import CheckTransferRejection
from openapi_server.models.check_transfer_return1 import CheckTransferReturn1
from openapi_server.models.check_transfer_stop_payment_request1 import CheckTransferStopPaymentRequest1
from openapi_server.models.deprecated_card_refund import DeprecatedCardRefund
from openapi_server.models.deprecated_card_settlement import DeprecatedCardSettlement
from openapi_server.models.dispute_resolution import DisputeResolution
from openapi_server.models.empyreal_cash_deposit import EmpyrealCashDeposit
from openapi_server.models.fee_payment import FeePayment
from openapi_server.models.inbound_ach_transfer import InboundACHTransfer
from openapi_server.models.inbound_check import InboundCheck
from openapi_server.models.inbound_international_ach_transfer import InboundInternationalACHTransfer
from openapi_server.models.inbound_real_time_payments_transfer_confirmation import InboundRealTimePaymentsTransferConfirmation
from openapi_server.models.inbound_wire_drawdown_payment import InboundWireDrawdownPayment
from openapi_server.models.inbound_wire_drawdown_payment_reversal import InboundWireDrawdownPaymentReversal
from openapi_server.models.inbound_wire_reversal import InboundWireReversal
from openapi_server.models.inbound_wire_transfer import InboundWireTransfer
from openapi_server.models.interest_payment import InterestPayment
from openapi_server.models.internal_source import InternalSource
from openapi_server.models.real_time_payments_transfer_acknowledgement import RealTimePaymentsTransferAcknowledgement
from openapi_server.models.sample_funds import SampleFunds
from openapi_server.models.wire_drawdown_payment_intention import WireDrawdownPaymentIntention
from openapi_server.models.wire_drawdown_payment_rejection import WireDrawdownPaymentRejection
from openapi_server.models.wire_transfer_intention import WireTransferIntention
from openapi_server.models.wire_transfer_rejection import WireTransferRejection
from openapi_server import util


class TransactionSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_transfer_intention: AccountTransferIntention=None, ach_check_conversion: ACHCheckConversion=None, ach_check_conversion_return: ACHCheckConversionReturn=None, ach_transfer_intention: ACHTransferIntention=None, ach_transfer_rejection: ACHTransferRejection=None, ach_transfer_return: ACHTransferReturn1=None, card_dispute_acceptance: CardDisputeAcceptance1=None, card_refund: CardRefund=None, card_revenue_payment: CardRevenuePayment=None, card_route_refund: DeprecatedCardRefund=None, card_route_settlement: DeprecatedCardSettlement=None, card_settlement: CardSettlement=None, category: str=None, check_deposit_acceptance: CheckDepositAcceptance1=None, check_deposit_return: CheckDepositReturn1=None, check_transfer_intention: CheckTransferIntention=None, check_transfer_rejection: CheckTransferRejection=None, check_transfer_return: CheckTransferReturn1=None, check_transfer_stop_payment_request: CheckTransferStopPaymentRequest1=None, dispute_resolution: DisputeResolution=None, empyreal_cash_deposit: EmpyrealCashDeposit=None, fee_payment: FeePayment=None, inbound_ach_transfer: InboundACHTransfer=None, inbound_check: InboundCheck=None, inbound_international_ach_transfer: InboundInternationalACHTransfer=None, inbound_real_time_payments_transfer_confirmation: InboundRealTimePaymentsTransferConfirmation=None, inbound_wire_drawdown_payment: InboundWireDrawdownPayment=None, inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal=None, inbound_wire_reversal: InboundWireReversal=None, inbound_wire_transfer: InboundWireTransfer=None, interest_payment: InterestPayment=None, internal_source: InternalSource=None, real_time_payments_transfer_acknowledgement: RealTimePaymentsTransferAcknowledgement=None, sample_funds: SampleFunds=None, wire_drawdown_payment_intention: WireDrawdownPaymentIntention=None, wire_drawdown_payment_rejection: WireDrawdownPaymentRejection=None, wire_transfer_intention: WireTransferIntention=None, wire_transfer_rejection: WireTransferRejection=None):
        """TransactionSource - a model defined in OpenAPI

        :param account_transfer_intention: The account_transfer_intention of this TransactionSource.
        :param ach_check_conversion: The ach_check_conversion of this TransactionSource.
        :param ach_check_conversion_return: The ach_check_conversion_return of this TransactionSource.
        :param ach_transfer_intention: The ach_transfer_intention of this TransactionSource.
        :param ach_transfer_rejection: The ach_transfer_rejection of this TransactionSource.
        :param ach_transfer_return: The ach_transfer_return of this TransactionSource.
        :param card_dispute_acceptance: The card_dispute_acceptance of this TransactionSource.
        :param card_refund: The card_refund of this TransactionSource.
        :param card_revenue_payment: The card_revenue_payment of this TransactionSource.
        :param card_route_refund: The card_route_refund of this TransactionSource.
        :param card_route_settlement: The card_route_settlement of this TransactionSource.
        :param card_settlement: The card_settlement of this TransactionSource.
        :param category: The category of this TransactionSource.
        :param check_deposit_acceptance: The check_deposit_acceptance of this TransactionSource.
        :param check_deposit_return: The check_deposit_return of this TransactionSource.
        :param check_transfer_intention: The check_transfer_intention of this TransactionSource.
        :param check_transfer_rejection: The check_transfer_rejection of this TransactionSource.
        :param check_transfer_return: The check_transfer_return of this TransactionSource.
        :param check_transfer_stop_payment_request: The check_transfer_stop_payment_request of this TransactionSource.
        :param dispute_resolution: The dispute_resolution of this TransactionSource.
        :param empyreal_cash_deposit: The empyreal_cash_deposit of this TransactionSource.
        :param fee_payment: The fee_payment of this TransactionSource.
        :param inbound_ach_transfer: The inbound_ach_transfer of this TransactionSource.
        :param inbound_check: The inbound_check of this TransactionSource.
        :param inbound_international_ach_transfer: The inbound_international_ach_transfer of this TransactionSource.
        :param inbound_real_time_payments_transfer_confirmation: The inbound_real_time_payments_transfer_confirmation of this TransactionSource.
        :param inbound_wire_drawdown_payment: The inbound_wire_drawdown_payment of this TransactionSource.
        :param inbound_wire_drawdown_payment_reversal: The inbound_wire_drawdown_payment_reversal of this TransactionSource.
        :param inbound_wire_reversal: The inbound_wire_reversal of this TransactionSource.
        :param inbound_wire_transfer: The inbound_wire_transfer of this TransactionSource.
        :param interest_payment: The interest_payment of this TransactionSource.
        :param internal_source: The internal_source of this TransactionSource.
        :param real_time_payments_transfer_acknowledgement: The real_time_payments_transfer_acknowledgement of this TransactionSource.
        :param sample_funds: The sample_funds of this TransactionSource.
        :param wire_drawdown_payment_intention: The wire_drawdown_payment_intention of this TransactionSource.
        :param wire_drawdown_payment_rejection: The wire_drawdown_payment_rejection of this TransactionSource.
        :param wire_transfer_intention: The wire_transfer_intention of this TransactionSource.
        :param wire_transfer_rejection: The wire_transfer_rejection of this TransactionSource.
        """
        self.openapi_types = {
            'account_transfer_intention': AccountTransferIntention,
            'ach_check_conversion': ACHCheckConversion,
            'ach_check_conversion_return': ACHCheckConversionReturn,
            'ach_transfer_intention': ACHTransferIntention,
            'ach_transfer_rejection': ACHTransferRejection,
            'ach_transfer_return': ACHTransferReturn1,
            'card_dispute_acceptance': CardDisputeAcceptance1,
            'card_refund': CardRefund,
            'card_revenue_payment': CardRevenuePayment,
            'card_route_refund': DeprecatedCardRefund,
            'card_route_settlement': DeprecatedCardSettlement,
            'card_settlement': CardSettlement,
            'category': str,
            'check_deposit_acceptance': CheckDepositAcceptance1,
            'check_deposit_return': CheckDepositReturn1,
            'check_transfer_intention': CheckTransferIntention,
            'check_transfer_rejection': CheckTransferRejection,
            'check_transfer_return': CheckTransferReturn1,
            'check_transfer_stop_payment_request': CheckTransferStopPaymentRequest1,
            'dispute_resolution': DisputeResolution,
            'empyreal_cash_deposit': EmpyrealCashDeposit,
            'fee_payment': FeePayment,
            'inbound_ach_transfer': InboundACHTransfer,
            'inbound_check': InboundCheck,
            'inbound_international_ach_transfer': InboundInternationalACHTransfer,
            'inbound_real_time_payments_transfer_confirmation': InboundRealTimePaymentsTransferConfirmation,
            'inbound_wire_drawdown_payment': InboundWireDrawdownPayment,
            'inbound_wire_drawdown_payment_reversal': InboundWireDrawdownPaymentReversal,
            'inbound_wire_reversal': InboundWireReversal,
            'inbound_wire_transfer': InboundWireTransfer,
            'interest_payment': InterestPayment,
            'internal_source': InternalSource,
            'real_time_payments_transfer_acknowledgement': RealTimePaymentsTransferAcknowledgement,
            'sample_funds': SampleFunds,
            'wire_drawdown_payment_intention': WireDrawdownPaymentIntention,
            'wire_drawdown_payment_rejection': WireDrawdownPaymentRejection,
            'wire_transfer_intention': WireTransferIntention,
            'wire_transfer_rejection': WireTransferRejection
        }

        self.attribute_map = {
            'account_transfer_intention': 'account_transfer_intention',
            'ach_check_conversion': 'ach_check_conversion',
            'ach_check_conversion_return': 'ach_check_conversion_return',
            'ach_transfer_intention': 'ach_transfer_intention',
            'ach_transfer_rejection': 'ach_transfer_rejection',
            'ach_transfer_return': 'ach_transfer_return',
            'card_dispute_acceptance': 'card_dispute_acceptance',
            'card_refund': 'card_refund',
            'card_revenue_payment': 'card_revenue_payment',
            'card_route_refund': 'card_route_refund',
            'card_route_settlement': 'card_route_settlement',
            'card_settlement': 'card_settlement',
            'category': 'category',
            'check_deposit_acceptance': 'check_deposit_acceptance',
            'check_deposit_return': 'check_deposit_return',
            'check_transfer_intention': 'check_transfer_intention',
            'check_transfer_rejection': 'check_transfer_rejection',
            'check_transfer_return': 'check_transfer_return',
            'check_transfer_stop_payment_request': 'check_transfer_stop_payment_request',
            'dispute_resolution': 'dispute_resolution',
            'empyreal_cash_deposit': 'empyreal_cash_deposit',
            'fee_payment': 'fee_payment',
            'inbound_ach_transfer': 'inbound_ach_transfer',
            'inbound_check': 'inbound_check',
            'inbound_international_ach_transfer': 'inbound_international_ach_transfer',
            'inbound_real_time_payments_transfer_confirmation': 'inbound_real_time_payments_transfer_confirmation',
            'inbound_wire_drawdown_payment': 'inbound_wire_drawdown_payment',
            'inbound_wire_drawdown_payment_reversal': 'inbound_wire_drawdown_payment_reversal',
            'inbound_wire_reversal': 'inbound_wire_reversal',
            'inbound_wire_transfer': 'inbound_wire_transfer',
            'interest_payment': 'interest_payment',
            'internal_source': 'internal_source',
            'real_time_payments_transfer_acknowledgement': 'real_time_payments_transfer_acknowledgement',
            'sample_funds': 'sample_funds',
            'wire_drawdown_payment_intention': 'wire_drawdown_payment_intention',
            'wire_drawdown_payment_rejection': 'wire_drawdown_payment_rejection',
            'wire_transfer_intention': 'wire_transfer_intention',
            'wire_transfer_rejection': 'wire_transfer_rejection'
        }

        self._account_transfer_intention = account_transfer_intention
        self._ach_check_conversion = ach_check_conversion
        self._ach_check_conversion_return = ach_check_conversion_return
        self._ach_transfer_intention = ach_transfer_intention
        self._ach_transfer_rejection = ach_transfer_rejection
        self._ach_transfer_return = ach_transfer_return
        self._card_dispute_acceptance = card_dispute_acceptance
        self._card_refund = card_refund
        self._card_revenue_payment = card_revenue_payment
        self._card_route_refund = card_route_refund
        self._card_route_settlement = card_route_settlement
        self._card_settlement = card_settlement
        self._category = category
        self._check_deposit_acceptance = check_deposit_acceptance
        self._check_deposit_return = check_deposit_return
        self._check_transfer_intention = check_transfer_intention
        self._check_transfer_rejection = check_transfer_rejection
        self._check_transfer_return = check_transfer_return
        self._check_transfer_stop_payment_request = check_transfer_stop_payment_request
        self._dispute_resolution = dispute_resolution
        self._empyreal_cash_deposit = empyreal_cash_deposit
        self._fee_payment = fee_payment
        self._inbound_ach_transfer = inbound_ach_transfer
        self._inbound_check = inbound_check
        self._inbound_international_ach_transfer = inbound_international_ach_transfer
        self._inbound_real_time_payments_transfer_confirmation = inbound_real_time_payments_transfer_confirmation
        self._inbound_wire_drawdown_payment = inbound_wire_drawdown_payment
        self._inbound_wire_drawdown_payment_reversal = inbound_wire_drawdown_payment_reversal
        self._inbound_wire_reversal = inbound_wire_reversal
        self._inbound_wire_transfer = inbound_wire_transfer
        self._interest_payment = interest_payment
        self._internal_source = internal_source
        self._real_time_payments_transfer_acknowledgement = real_time_payments_transfer_acknowledgement
        self._sample_funds = sample_funds
        self._wire_drawdown_payment_intention = wire_drawdown_payment_intention
        self._wire_drawdown_payment_rejection = wire_drawdown_payment_rejection
        self._wire_transfer_intention = wire_transfer_intention
        self._wire_transfer_rejection = wire_transfer_rejection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction_Source of this TransactionSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_transfer_intention(self):
        """Gets the account_transfer_intention of this TransactionSource.


        :return: The account_transfer_intention of this TransactionSource.
        :rtype: AccountTransferIntention
        """
        return self._account_transfer_intention

    @account_transfer_intention.setter
    def account_transfer_intention(self, account_transfer_intention):
        """Sets the account_transfer_intention of this TransactionSource.


        :param account_transfer_intention: The account_transfer_intention of this TransactionSource.
        :type account_transfer_intention: AccountTransferIntention
        """
        if account_transfer_intention is None:
            raise ValueError("Invalid value for `account_transfer_intention`, must not be `None`")

        self._account_transfer_intention = account_transfer_intention

    @property
    def ach_check_conversion(self):
        """Gets the ach_check_conversion of this TransactionSource.


        :return: The ach_check_conversion of this TransactionSource.
        :rtype: ACHCheckConversion
        """
        return self._ach_check_conversion

    @ach_check_conversion.setter
    def ach_check_conversion(self, ach_check_conversion):
        """Sets the ach_check_conversion of this TransactionSource.


        :param ach_check_conversion: The ach_check_conversion of this TransactionSource.
        :type ach_check_conversion: ACHCheckConversion
        """
        if ach_check_conversion is None:
            raise ValueError("Invalid value for `ach_check_conversion`, must not be `None`")

        self._ach_check_conversion = ach_check_conversion

    @property
    def ach_check_conversion_return(self):
        """Gets the ach_check_conversion_return of this TransactionSource.


        :return: The ach_check_conversion_return of this TransactionSource.
        :rtype: ACHCheckConversionReturn
        """
        return self._ach_check_conversion_return

    @ach_check_conversion_return.setter
    def ach_check_conversion_return(self, ach_check_conversion_return):
        """Sets the ach_check_conversion_return of this TransactionSource.


        :param ach_check_conversion_return: The ach_check_conversion_return of this TransactionSource.
        :type ach_check_conversion_return: ACHCheckConversionReturn
        """
        if ach_check_conversion_return is None:
            raise ValueError("Invalid value for `ach_check_conversion_return`, must not be `None`")

        self._ach_check_conversion_return = ach_check_conversion_return

    @property
    def ach_transfer_intention(self):
        """Gets the ach_transfer_intention of this TransactionSource.


        :return: The ach_transfer_intention of this TransactionSource.
        :rtype: ACHTransferIntention
        """
        return self._ach_transfer_intention

    @ach_transfer_intention.setter
    def ach_transfer_intention(self, ach_transfer_intention):
        """Sets the ach_transfer_intention of this TransactionSource.


        :param ach_transfer_intention: The ach_transfer_intention of this TransactionSource.
        :type ach_transfer_intention: ACHTransferIntention
        """
        if ach_transfer_intention is None:
            raise ValueError("Invalid value for `ach_transfer_intention`, must not be `None`")

        self._ach_transfer_intention = ach_transfer_intention

    @property
    def ach_transfer_rejection(self):
        """Gets the ach_transfer_rejection of this TransactionSource.


        :return: The ach_transfer_rejection of this TransactionSource.
        :rtype: ACHTransferRejection
        """
        return self._ach_transfer_rejection

    @ach_transfer_rejection.setter
    def ach_transfer_rejection(self, ach_transfer_rejection):
        """Sets the ach_transfer_rejection of this TransactionSource.


        :param ach_transfer_rejection: The ach_transfer_rejection of this TransactionSource.
        :type ach_transfer_rejection: ACHTransferRejection
        """
        if ach_transfer_rejection is None:
            raise ValueError("Invalid value for `ach_transfer_rejection`, must not be `None`")

        self._ach_transfer_rejection = ach_transfer_rejection

    @property
    def ach_transfer_return(self):
        """Gets the ach_transfer_return of this TransactionSource.


        :return: The ach_transfer_return of this TransactionSource.
        :rtype: ACHTransferReturn1
        """
        return self._ach_transfer_return

    @ach_transfer_return.setter
    def ach_transfer_return(self, ach_transfer_return):
        """Sets the ach_transfer_return of this TransactionSource.


        :param ach_transfer_return: The ach_transfer_return of this TransactionSource.
        :type ach_transfer_return: ACHTransferReturn1
        """
        if ach_transfer_return is None:
            raise ValueError("Invalid value for `ach_transfer_return`, must not be `None`")

        self._ach_transfer_return = ach_transfer_return

    @property
    def card_dispute_acceptance(self):
        """Gets the card_dispute_acceptance of this TransactionSource.


        :return: The card_dispute_acceptance of this TransactionSource.
        :rtype: CardDisputeAcceptance1
        """
        return self._card_dispute_acceptance

    @card_dispute_acceptance.setter
    def card_dispute_acceptance(self, card_dispute_acceptance):
        """Sets the card_dispute_acceptance of this TransactionSource.


        :param card_dispute_acceptance: The card_dispute_acceptance of this TransactionSource.
        :type card_dispute_acceptance: CardDisputeAcceptance1
        """
        if card_dispute_acceptance is None:
            raise ValueError("Invalid value for `card_dispute_acceptance`, must not be `None`")

        self._card_dispute_acceptance = card_dispute_acceptance

    @property
    def card_refund(self):
        """Gets the card_refund of this TransactionSource.


        :return: The card_refund of this TransactionSource.
        :rtype: CardRefund
        """
        return self._card_refund

    @card_refund.setter
    def card_refund(self, card_refund):
        """Sets the card_refund of this TransactionSource.


        :param card_refund: The card_refund of this TransactionSource.
        :type card_refund: CardRefund
        """
        if card_refund is None:
            raise ValueError("Invalid value for `card_refund`, must not be `None`")

        self._card_refund = card_refund

    @property
    def card_revenue_payment(self):
        """Gets the card_revenue_payment of this TransactionSource.


        :return: The card_revenue_payment of this TransactionSource.
        :rtype: CardRevenuePayment
        """
        return self._card_revenue_payment

    @card_revenue_payment.setter
    def card_revenue_payment(self, card_revenue_payment):
        """Sets the card_revenue_payment of this TransactionSource.


        :param card_revenue_payment: The card_revenue_payment of this TransactionSource.
        :type card_revenue_payment: CardRevenuePayment
        """
        if card_revenue_payment is None:
            raise ValueError("Invalid value for `card_revenue_payment`, must not be `None`")

        self._card_revenue_payment = card_revenue_payment

    @property
    def card_route_refund(self):
        """Gets the card_route_refund of this TransactionSource.


        :return: The card_route_refund of this TransactionSource.
        :rtype: DeprecatedCardRefund
        """
        return self._card_route_refund

    @card_route_refund.setter
    def card_route_refund(self, card_route_refund):
        """Sets the card_route_refund of this TransactionSource.


        :param card_route_refund: The card_route_refund of this TransactionSource.
        :type card_route_refund: DeprecatedCardRefund
        """
        if card_route_refund is None:
            raise ValueError("Invalid value for `card_route_refund`, must not be `None`")

        self._card_route_refund = card_route_refund

    @property
    def card_route_settlement(self):
        """Gets the card_route_settlement of this TransactionSource.


        :return: The card_route_settlement of this TransactionSource.
        :rtype: DeprecatedCardSettlement
        """
        return self._card_route_settlement

    @card_route_settlement.setter
    def card_route_settlement(self, card_route_settlement):
        """Sets the card_route_settlement of this TransactionSource.


        :param card_route_settlement: The card_route_settlement of this TransactionSource.
        :type card_route_settlement: DeprecatedCardSettlement
        """
        if card_route_settlement is None:
            raise ValueError("Invalid value for `card_route_settlement`, must not be `None`")

        self._card_route_settlement = card_route_settlement

    @property
    def card_settlement(self):
        """Gets the card_settlement of this TransactionSource.


        :return: The card_settlement of this TransactionSource.
        :rtype: CardSettlement
        """
        return self._card_settlement

    @card_settlement.setter
    def card_settlement(self, card_settlement):
        """Sets the card_settlement of this TransactionSource.


        :param card_settlement: The card_settlement of this TransactionSource.
        :type card_settlement: CardSettlement
        """
        if card_settlement is None:
            raise ValueError("Invalid value for `card_settlement`, must not be `None`")

        self._card_settlement = card_settlement

    @property
    def category(self):
        """Gets the category of this TransactionSource.

        The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :return: The category of this TransactionSource.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransactionSource.

        The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.

        :param category: The category of this TransactionSource.
        :type category: str
        """
        allowed_values = ["account_transfer_intention", "ach_check_conversion_return", "ach_check_conversion", "ach_transfer_intention", "ach_transfer_rejection", "ach_transfer_return", "card_dispute_acceptance", "card_refund", "card_settlement", "card_revenue_payment", "check_deposit_acceptance", "check_deposit_return", "check_transfer_intention", "check_transfer_return", "check_transfer_rejection", "check_transfer_stop_payment_request", "dispute_resolution", "empyreal_cash_deposit", "fee_payment", "inbound_ach_transfer", "inbound_ach_transfer_return_intention", "inbound_check", "inbound_international_ach_transfer", "inbound_real_time_payments_transfer_confirmation", "inbound_wire_drawdown_payment_reversal", "inbound_wire_drawdown_payment", "inbound_wire_reversal", "inbound_wire_transfer", "interest_payment", "internal_general_ledger_transaction", "internal_source", "card_route_refund", "card_route_settlement", "real_time_payments_transfer_acknowledgement", "sample_funds", "wire_drawdown_payment_intention", "wire_drawdown_payment_rejection", "wire_transfer_intention", "wire_transfer_rejection", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def check_deposit_acceptance(self):
        """Gets the check_deposit_acceptance of this TransactionSource.


        :return: The check_deposit_acceptance of this TransactionSource.
        :rtype: CheckDepositAcceptance1
        """
        return self._check_deposit_acceptance

    @check_deposit_acceptance.setter
    def check_deposit_acceptance(self, check_deposit_acceptance):
        """Sets the check_deposit_acceptance of this TransactionSource.


        :param check_deposit_acceptance: The check_deposit_acceptance of this TransactionSource.
        :type check_deposit_acceptance: CheckDepositAcceptance1
        """
        if check_deposit_acceptance is None:
            raise ValueError("Invalid value for `check_deposit_acceptance`, must not be `None`")

        self._check_deposit_acceptance = check_deposit_acceptance

    @property
    def check_deposit_return(self):
        """Gets the check_deposit_return of this TransactionSource.


        :return: The check_deposit_return of this TransactionSource.
        :rtype: CheckDepositReturn1
        """
        return self._check_deposit_return

    @check_deposit_return.setter
    def check_deposit_return(self, check_deposit_return):
        """Sets the check_deposit_return of this TransactionSource.


        :param check_deposit_return: The check_deposit_return of this TransactionSource.
        :type check_deposit_return: CheckDepositReturn1
        """
        if check_deposit_return is None:
            raise ValueError("Invalid value for `check_deposit_return`, must not be `None`")

        self._check_deposit_return = check_deposit_return

    @property
    def check_transfer_intention(self):
        """Gets the check_transfer_intention of this TransactionSource.


        :return: The check_transfer_intention of this TransactionSource.
        :rtype: CheckTransferIntention
        """
        return self._check_transfer_intention

    @check_transfer_intention.setter
    def check_transfer_intention(self, check_transfer_intention):
        """Sets the check_transfer_intention of this TransactionSource.


        :param check_transfer_intention: The check_transfer_intention of this TransactionSource.
        :type check_transfer_intention: CheckTransferIntention
        """
        if check_transfer_intention is None:
            raise ValueError("Invalid value for `check_transfer_intention`, must not be `None`")

        self._check_transfer_intention = check_transfer_intention

    @property
    def check_transfer_rejection(self):
        """Gets the check_transfer_rejection of this TransactionSource.


        :return: The check_transfer_rejection of this TransactionSource.
        :rtype: CheckTransferRejection
        """
        return self._check_transfer_rejection

    @check_transfer_rejection.setter
    def check_transfer_rejection(self, check_transfer_rejection):
        """Sets the check_transfer_rejection of this TransactionSource.


        :param check_transfer_rejection: The check_transfer_rejection of this TransactionSource.
        :type check_transfer_rejection: CheckTransferRejection
        """
        if check_transfer_rejection is None:
            raise ValueError("Invalid value for `check_transfer_rejection`, must not be `None`")

        self._check_transfer_rejection = check_transfer_rejection

    @property
    def check_transfer_return(self):
        """Gets the check_transfer_return of this TransactionSource.


        :return: The check_transfer_return of this TransactionSource.
        :rtype: CheckTransferReturn1
        """
        return self._check_transfer_return

    @check_transfer_return.setter
    def check_transfer_return(self, check_transfer_return):
        """Sets the check_transfer_return of this TransactionSource.


        :param check_transfer_return: The check_transfer_return of this TransactionSource.
        :type check_transfer_return: CheckTransferReturn1
        """
        if check_transfer_return is None:
            raise ValueError("Invalid value for `check_transfer_return`, must not be `None`")

        self._check_transfer_return = check_transfer_return

    @property
    def check_transfer_stop_payment_request(self):
        """Gets the check_transfer_stop_payment_request of this TransactionSource.


        :return: The check_transfer_stop_payment_request of this TransactionSource.
        :rtype: CheckTransferStopPaymentRequest1
        """
        return self._check_transfer_stop_payment_request

    @check_transfer_stop_payment_request.setter
    def check_transfer_stop_payment_request(self, check_transfer_stop_payment_request):
        """Sets the check_transfer_stop_payment_request of this TransactionSource.


        :param check_transfer_stop_payment_request: The check_transfer_stop_payment_request of this TransactionSource.
        :type check_transfer_stop_payment_request: CheckTransferStopPaymentRequest1
        """
        if check_transfer_stop_payment_request is None:
            raise ValueError("Invalid value for `check_transfer_stop_payment_request`, must not be `None`")

        self._check_transfer_stop_payment_request = check_transfer_stop_payment_request

    @property
    def dispute_resolution(self):
        """Gets the dispute_resolution of this TransactionSource.


        :return: The dispute_resolution of this TransactionSource.
        :rtype: DisputeResolution
        """
        return self._dispute_resolution

    @dispute_resolution.setter
    def dispute_resolution(self, dispute_resolution):
        """Sets the dispute_resolution of this TransactionSource.


        :param dispute_resolution: The dispute_resolution of this TransactionSource.
        :type dispute_resolution: DisputeResolution
        """
        if dispute_resolution is None:
            raise ValueError("Invalid value for `dispute_resolution`, must not be `None`")

        self._dispute_resolution = dispute_resolution

    @property
    def empyreal_cash_deposit(self):
        """Gets the empyreal_cash_deposit of this TransactionSource.


        :return: The empyreal_cash_deposit of this TransactionSource.
        :rtype: EmpyrealCashDeposit
        """
        return self._empyreal_cash_deposit

    @empyreal_cash_deposit.setter
    def empyreal_cash_deposit(self, empyreal_cash_deposit):
        """Sets the empyreal_cash_deposit of this TransactionSource.


        :param empyreal_cash_deposit: The empyreal_cash_deposit of this TransactionSource.
        :type empyreal_cash_deposit: EmpyrealCashDeposit
        """
        if empyreal_cash_deposit is None:
            raise ValueError("Invalid value for `empyreal_cash_deposit`, must not be `None`")

        self._empyreal_cash_deposit = empyreal_cash_deposit

    @property
    def fee_payment(self):
        """Gets the fee_payment of this TransactionSource.


        :return: The fee_payment of this TransactionSource.
        :rtype: FeePayment
        """
        return self._fee_payment

    @fee_payment.setter
    def fee_payment(self, fee_payment):
        """Sets the fee_payment of this TransactionSource.


        :param fee_payment: The fee_payment of this TransactionSource.
        :type fee_payment: FeePayment
        """
        if fee_payment is None:
            raise ValueError("Invalid value for `fee_payment`, must not be `None`")

        self._fee_payment = fee_payment

    @property
    def inbound_ach_transfer(self):
        """Gets the inbound_ach_transfer of this TransactionSource.


        :return: The inbound_ach_transfer of this TransactionSource.
        :rtype: InboundACHTransfer
        """
        return self._inbound_ach_transfer

    @inbound_ach_transfer.setter
    def inbound_ach_transfer(self, inbound_ach_transfer):
        """Sets the inbound_ach_transfer of this TransactionSource.


        :param inbound_ach_transfer: The inbound_ach_transfer of this TransactionSource.
        :type inbound_ach_transfer: InboundACHTransfer
        """
        if inbound_ach_transfer is None:
            raise ValueError("Invalid value for `inbound_ach_transfer`, must not be `None`")

        self._inbound_ach_transfer = inbound_ach_transfer

    @property
    def inbound_check(self):
        """Gets the inbound_check of this TransactionSource.


        :return: The inbound_check of this TransactionSource.
        :rtype: InboundCheck
        """
        return self._inbound_check

    @inbound_check.setter
    def inbound_check(self, inbound_check):
        """Sets the inbound_check of this TransactionSource.


        :param inbound_check: The inbound_check of this TransactionSource.
        :type inbound_check: InboundCheck
        """
        if inbound_check is None:
            raise ValueError("Invalid value for `inbound_check`, must not be `None`")

        self._inbound_check = inbound_check

    @property
    def inbound_international_ach_transfer(self):
        """Gets the inbound_international_ach_transfer of this TransactionSource.


        :return: The inbound_international_ach_transfer of this TransactionSource.
        :rtype: InboundInternationalACHTransfer
        """
        return self._inbound_international_ach_transfer

    @inbound_international_ach_transfer.setter
    def inbound_international_ach_transfer(self, inbound_international_ach_transfer):
        """Sets the inbound_international_ach_transfer of this TransactionSource.


        :param inbound_international_ach_transfer: The inbound_international_ach_transfer of this TransactionSource.
        :type inbound_international_ach_transfer: InboundInternationalACHTransfer
        """
        if inbound_international_ach_transfer is None:
            raise ValueError("Invalid value for `inbound_international_ach_transfer`, must not be `None`")

        self._inbound_international_ach_transfer = inbound_international_ach_transfer

    @property
    def inbound_real_time_payments_transfer_confirmation(self):
        """Gets the inbound_real_time_payments_transfer_confirmation of this TransactionSource.


        :return: The inbound_real_time_payments_transfer_confirmation of this TransactionSource.
        :rtype: InboundRealTimePaymentsTransferConfirmation
        """
        return self._inbound_real_time_payments_transfer_confirmation

    @inbound_real_time_payments_transfer_confirmation.setter
    def inbound_real_time_payments_transfer_confirmation(self, inbound_real_time_payments_transfer_confirmation):
        """Sets the inbound_real_time_payments_transfer_confirmation of this TransactionSource.


        :param inbound_real_time_payments_transfer_confirmation: The inbound_real_time_payments_transfer_confirmation of this TransactionSource.
        :type inbound_real_time_payments_transfer_confirmation: InboundRealTimePaymentsTransferConfirmation
        """
        if inbound_real_time_payments_transfer_confirmation is None:
            raise ValueError("Invalid value for `inbound_real_time_payments_transfer_confirmation`, must not be `None`")

        self._inbound_real_time_payments_transfer_confirmation = inbound_real_time_payments_transfer_confirmation

    @property
    def inbound_wire_drawdown_payment(self):
        """Gets the inbound_wire_drawdown_payment of this TransactionSource.


        :return: The inbound_wire_drawdown_payment of this TransactionSource.
        :rtype: InboundWireDrawdownPayment
        """
        return self._inbound_wire_drawdown_payment

    @inbound_wire_drawdown_payment.setter
    def inbound_wire_drawdown_payment(self, inbound_wire_drawdown_payment):
        """Sets the inbound_wire_drawdown_payment of this TransactionSource.


        :param inbound_wire_drawdown_payment: The inbound_wire_drawdown_payment of this TransactionSource.
        :type inbound_wire_drawdown_payment: InboundWireDrawdownPayment
        """
        if inbound_wire_drawdown_payment is None:
            raise ValueError("Invalid value for `inbound_wire_drawdown_payment`, must not be `None`")

        self._inbound_wire_drawdown_payment = inbound_wire_drawdown_payment

    @property
    def inbound_wire_drawdown_payment_reversal(self):
        """Gets the inbound_wire_drawdown_payment_reversal of this TransactionSource.


        :return: The inbound_wire_drawdown_payment_reversal of this TransactionSource.
        :rtype: InboundWireDrawdownPaymentReversal
        """
        return self._inbound_wire_drawdown_payment_reversal

    @inbound_wire_drawdown_payment_reversal.setter
    def inbound_wire_drawdown_payment_reversal(self, inbound_wire_drawdown_payment_reversal):
        """Sets the inbound_wire_drawdown_payment_reversal of this TransactionSource.


        :param inbound_wire_drawdown_payment_reversal: The inbound_wire_drawdown_payment_reversal of this TransactionSource.
        :type inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal
        """
        if inbound_wire_drawdown_payment_reversal is None:
            raise ValueError("Invalid value for `inbound_wire_drawdown_payment_reversal`, must not be `None`")

        self._inbound_wire_drawdown_payment_reversal = inbound_wire_drawdown_payment_reversal

    @property
    def inbound_wire_reversal(self):
        """Gets the inbound_wire_reversal of this TransactionSource.


        :return: The inbound_wire_reversal of this TransactionSource.
        :rtype: InboundWireReversal
        """
        return self._inbound_wire_reversal

    @inbound_wire_reversal.setter
    def inbound_wire_reversal(self, inbound_wire_reversal):
        """Sets the inbound_wire_reversal of this TransactionSource.


        :param inbound_wire_reversal: The inbound_wire_reversal of this TransactionSource.
        :type inbound_wire_reversal: InboundWireReversal
        """
        if inbound_wire_reversal is None:
            raise ValueError("Invalid value for `inbound_wire_reversal`, must not be `None`")

        self._inbound_wire_reversal = inbound_wire_reversal

    @property
    def inbound_wire_transfer(self):
        """Gets the inbound_wire_transfer of this TransactionSource.


        :return: The inbound_wire_transfer of this TransactionSource.
        :rtype: InboundWireTransfer
        """
        return self._inbound_wire_transfer

    @inbound_wire_transfer.setter
    def inbound_wire_transfer(self, inbound_wire_transfer):
        """Sets the inbound_wire_transfer of this TransactionSource.


        :param inbound_wire_transfer: The inbound_wire_transfer of this TransactionSource.
        :type inbound_wire_transfer: InboundWireTransfer
        """
        if inbound_wire_transfer is None:
            raise ValueError("Invalid value for `inbound_wire_transfer`, must not be `None`")

        self._inbound_wire_transfer = inbound_wire_transfer

    @property
    def interest_payment(self):
        """Gets the interest_payment of this TransactionSource.


        :return: The interest_payment of this TransactionSource.
        :rtype: InterestPayment
        """
        return self._interest_payment

    @interest_payment.setter
    def interest_payment(self, interest_payment):
        """Sets the interest_payment of this TransactionSource.


        :param interest_payment: The interest_payment of this TransactionSource.
        :type interest_payment: InterestPayment
        """
        if interest_payment is None:
            raise ValueError("Invalid value for `interest_payment`, must not be `None`")

        self._interest_payment = interest_payment

    @property
    def internal_source(self):
        """Gets the internal_source of this TransactionSource.


        :return: The internal_source of this TransactionSource.
        :rtype: InternalSource
        """
        return self._internal_source

    @internal_source.setter
    def internal_source(self, internal_source):
        """Sets the internal_source of this TransactionSource.


        :param internal_source: The internal_source of this TransactionSource.
        :type internal_source: InternalSource
        """
        if internal_source is None:
            raise ValueError("Invalid value for `internal_source`, must not be `None`")

        self._internal_source = internal_source

    @property
    def real_time_payments_transfer_acknowledgement(self):
        """Gets the real_time_payments_transfer_acknowledgement of this TransactionSource.


        :return: The real_time_payments_transfer_acknowledgement of this TransactionSource.
        :rtype: RealTimePaymentsTransferAcknowledgement
        """
        return self._real_time_payments_transfer_acknowledgement

    @real_time_payments_transfer_acknowledgement.setter
    def real_time_payments_transfer_acknowledgement(self, real_time_payments_transfer_acknowledgement):
        """Sets the real_time_payments_transfer_acknowledgement of this TransactionSource.


        :param real_time_payments_transfer_acknowledgement: The real_time_payments_transfer_acknowledgement of this TransactionSource.
        :type real_time_payments_transfer_acknowledgement: RealTimePaymentsTransferAcknowledgement
        """
        if real_time_payments_transfer_acknowledgement is None:
            raise ValueError("Invalid value for `real_time_payments_transfer_acknowledgement`, must not be `None`")

        self._real_time_payments_transfer_acknowledgement = real_time_payments_transfer_acknowledgement

    @property
    def sample_funds(self):
        """Gets the sample_funds of this TransactionSource.


        :return: The sample_funds of this TransactionSource.
        :rtype: SampleFunds
        """
        return self._sample_funds

    @sample_funds.setter
    def sample_funds(self, sample_funds):
        """Sets the sample_funds of this TransactionSource.


        :param sample_funds: The sample_funds of this TransactionSource.
        :type sample_funds: SampleFunds
        """
        if sample_funds is None:
            raise ValueError("Invalid value for `sample_funds`, must not be `None`")

        self._sample_funds = sample_funds

    @property
    def wire_drawdown_payment_intention(self):
        """Gets the wire_drawdown_payment_intention of this TransactionSource.


        :return: The wire_drawdown_payment_intention of this TransactionSource.
        :rtype: WireDrawdownPaymentIntention
        """
        return self._wire_drawdown_payment_intention

    @wire_drawdown_payment_intention.setter
    def wire_drawdown_payment_intention(self, wire_drawdown_payment_intention):
        """Sets the wire_drawdown_payment_intention of this TransactionSource.


        :param wire_drawdown_payment_intention: The wire_drawdown_payment_intention of this TransactionSource.
        :type wire_drawdown_payment_intention: WireDrawdownPaymentIntention
        """
        if wire_drawdown_payment_intention is None:
            raise ValueError("Invalid value for `wire_drawdown_payment_intention`, must not be `None`")

        self._wire_drawdown_payment_intention = wire_drawdown_payment_intention

    @property
    def wire_drawdown_payment_rejection(self):
        """Gets the wire_drawdown_payment_rejection of this TransactionSource.


        :return: The wire_drawdown_payment_rejection of this TransactionSource.
        :rtype: WireDrawdownPaymentRejection
        """
        return self._wire_drawdown_payment_rejection

    @wire_drawdown_payment_rejection.setter
    def wire_drawdown_payment_rejection(self, wire_drawdown_payment_rejection):
        """Sets the wire_drawdown_payment_rejection of this TransactionSource.


        :param wire_drawdown_payment_rejection: The wire_drawdown_payment_rejection of this TransactionSource.
        :type wire_drawdown_payment_rejection: WireDrawdownPaymentRejection
        """
        if wire_drawdown_payment_rejection is None:
            raise ValueError("Invalid value for `wire_drawdown_payment_rejection`, must not be `None`")

        self._wire_drawdown_payment_rejection = wire_drawdown_payment_rejection

    @property
    def wire_transfer_intention(self):
        """Gets the wire_transfer_intention of this TransactionSource.


        :return: The wire_transfer_intention of this TransactionSource.
        :rtype: WireTransferIntention
        """
        return self._wire_transfer_intention

    @wire_transfer_intention.setter
    def wire_transfer_intention(self, wire_transfer_intention):
        """Sets the wire_transfer_intention of this TransactionSource.


        :param wire_transfer_intention: The wire_transfer_intention of this TransactionSource.
        :type wire_transfer_intention: WireTransferIntention
        """
        if wire_transfer_intention is None:
            raise ValueError("Invalid value for `wire_transfer_intention`, must not be `None`")

        self._wire_transfer_intention = wire_transfer_intention

    @property
    def wire_transfer_rejection(self):
        """Gets the wire_transfer_rejection of this TransactionSource.


        :return: The wire_transfer_rejection of this TransactionSource.
        :rtype: WireTransferRejection
        """
        return self._wire_transfer_rejection

    @wire_transfer_rejection.setter
    def wire_transfer_rejection(self, wire_transfer_rejection):
        """Sets the wire_transfer_rejection of this TransactionSource.


        :param wire_transfer_rejection: The wire_transfer_rejection of this TransactionSource.
        :type wire_transfer_rejection: WireTransferRejection
        """
        if wire_transfer_rejection is None:
            raise ValueError("Invalid value for `wire_transfer_rejection`, must not be `None`")

        self._wire_transfer_rejection = wire_transfer_rejection
