# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transfer_approval import TransferApproval
from openapi_server.models.transfer_cancellation import TransferCancellation
from openapi_server import util


class AccountTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, approval: TransferApproval=None, cancellation: TransferCancellation=None, created_at: datetime=None, currency: str=None, description: str=None, destination_account_id: str=None, destination_transaction_id: str=None, id: str=None, network: str=None, status: str=None, transaction_id: str=None, type: str=None):
        """AccountTransfer - a model defined in OpenAPI

        :param account_id: The account_id of this AccountTransfer.
        :param amount: The amount of this AccountTransfer.
        :param approval: The approval of this AccountTransfer.
        :param cancellation: The cancellation of this AccountTransfer.
        :param created_at: The created_at of this AccountTransfer.
        :param currency: The currency of this AccountTransfer.
        :param description: The description of this AccountTransfer.
        :param destination_account_id: The destination_account_id of this AccountTransfer.
        :param destination_transaction_id: The destination_transaction_id of this AccountTransfer.
        :param id: The id of this AccountTransfer.
        :param network: The network of this AccountTransfer.
        :param status: The status of this AccountTransfer.
        :param transaction_id: The transaction_id of this AccountTransfer.
        :param type: The type of this AccountTransfer.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'approval': TransferApproval,
            'cancellation': TransferCancellation,
            'created_at': datetime,
            'currency': str,
            'description': str,
            'destination_account_id': str,
            'destination_transaction_id': str,
            'id': str,
            'network': str,
            'status': str,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'approval': 'approval',
            'cancellation': 'cancellation',
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'destination_account_id': 'destination_account_id',
            'destination_transaction_id': 'destination_transaction_id',
            'id': 'id',
            'network': 'network',
            'status': 'status',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._account_id = account_id
        self._amount = amount
        self._approval = approval
        self._cancellation = cancellation
        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._destination_account_id = destination_account_id
        self._destination_transaction_id = destination_transaction_id
        self._id = id
        self._network = network
        self._status = status
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The account_transfer of this AccountTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountTransfer.

        The Account to which the transfer belongs.

        :return: The account_id of this AccountTransfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountTransfer.

        The Account to which the transfer belongs.

        :param account_id: The account_id of this AccountTransfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this AccountTransfer.

        The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :return: The amount of this AccountTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountTransfer.

        The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :param amount: The amount of this AccountTransfer.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def approval(self):
        """Gets the approval of this AccountTransfer.


        :return: The approval of this AccountTransfer.
        :rtype: TransferApproval
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this AccountTransfer.


        :param approval: The approval of this AccountTransfer.
        :type approval: TransferApproval
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")

        self._approval = approval

    @property
    def cancellation(self):
        """Gets the cancellation of this AccountTransfer.


        :return: The cancellation of this AccountTransfer.
        :rtype: TransferCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this AccountTransfer.


        :param cancellation: The cancellation of this AccountTransfer.
        :type cancellation: TransferCancellation
        """
        if cancellation is None:
            raise ValueError("Invalid value for `cancellation`, must not be `None`")

        self._cancellation = cancellation

    @property
    def created_at(self):
        """Gets the created_at of this AccountTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :return: The created_at of this AccountTransfer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountTransfer.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.

        :param created_at: The created_at of this AccountTransfer.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this AccountTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.

        :return: The currency of this AccountTransfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountTransfer.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.

        :param currency: The currency of this AccountTransfer.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this AccountTransfer.

        The description that will show on the transactions.

        :return: The description of this AccountTransfer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountTransfer.

        The description that will show on the transactions.

        :param description: The description of this AccountTransfer.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def destination_account_id(self):
        """Gets the destination_account_id of this AccountTransfer.

        The destination account's identifier.

        :return: The destination_account_id of this AccountTransfer.
        :rtype: str
        """
        return self._destination_account_id

    @destination_account_id.setter
    def destination_account_id(self, destination_account_id):
        """Sets the destination_account_id of this AccountTransfer.

        The destination account's identifier.

        :param destination_account_id: The destination_account_id of this AccountTransfer.
        :type destination_account_id: str
        """
        if destination_account_id is None:
            raise ValueError("Invalid value for `destination_account_id`, must not be `None`")

        self._destination_account_id = destination_account_id

    @property
    def destination_transaction_id(self):
        """Gets the destination_transaction_id of this AccountTransfer.

        The ID for the transaction receiving the transfer.

        :return: The destination_transaction_id of this AccountTransfer.
        :rtype: str
        """
        return self._destination_transaction_id

    @destination_transaction_id.setter
    def destination_transaction_id(self, destination_transaction_id):
        """Sets the destination_transaction_id of this AccountTransfer.

        The ID for the transaction receiving the transfer.

        :param destination_transaction_id: The destination_transaction_id of this AccountTransfer.
        :type destination_transaction_id: str
        """
        if destination_transaction_id is None:
            raise ValueError("Invalid value for `destination_transaction_id`, must not be `None`")

        self._destination_transaction_id = destination_transaction_id

    @property
    def id(self):
        """Gets the id of this AccountTransfer.

        The account transfer's identifier.

        :return: The id of this AccountTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountTransfer.

        The account transfer's identifier.

        :param id: The id of this AccountTransfer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def network(self):
        """Gets the network of this AccountTransfer.

        The transfer's network.

        :return: The network of this AccountTransfer.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AccountTransfer.

        The transfer's network.

        :param network: The network of this AccountTransfer.
        :type network: str
        """
        allowed_values = ["account"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def status(self):
        """Gets the status of this AccountTransfer.

        The lifecycle status of the transfer.

        :return: The status of this AccountTransfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountTransfer.

        The lifecycle status of the transfer.

        :param status: The status of this AccountTransfer.
        :type status: str
        """
        allowed_values = ["pending_approval", "canceled", "complete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AccountTransfer.

        The ID for the transaction funding the transfer.

        :return: The transaction_id of this AccountTransfer.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AccountTransfer.

        The ID for the transaction funding the transfer.

        :param transaction_id: The transaction_id of this AccountTransfer.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this AccountTransfer.

        A constant representing the object's type. For this resource it will always be `account_transfer`.

        :return: The type of this AccountTransfer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountTransfer.

        A constant representing the object's type. For this resource it will always be `account_transfer`.

        :param type: The type of this AccountTransfer.
        :type type: str
        """
        allowed_values = ["account_transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
