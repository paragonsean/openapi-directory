# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_a_card_profile_parameters_digital_wallets_text_color import CreateACardProfileParametersDigitalWalletsTextColor
from openapi_server import util


class CreateACardProfileParametersDigitalWallets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_icon_file_id: str=None, background_image_file_id: str=None, card_description: str=None, contact_email: str=None, contact_phone: str=None, contact_website: str=None, issuer_name: str=None, text_color: CreateACardProfileParametersDigitalWalletsTextColor=None):
        """CreateACardProfileParametersDigitalWallets - a model defined in OpenAPI

        :param app_icon_file_id: The app_icon_file_id of this CreateACardProfileParametersDigitalWallets.
        :param background_image_file_id: The background_image_file_id of this CreateACardProfileParametersDigitalWallets.
        :param card_description: The card_description of this CreateACardProfileParametersDigitalWallets.
        :param contact_email: The contact_email of this CreateACardProfileParametersDigitalWallets.
        :param contact_phone: The contact_phone of this CreateACardProfileParametersDigitalWallets.
        :param contact_website: The contact_website of this CreateACardProfileParametersDigitalWallets.
        :param issuer_name: The issuer_name of this CreateACardProfileParametersDigitalWallets.
        :param text_color: The text_color of this CreateACardProfileParametersDigitalWallets.
        """
        self.openapi_types = {
            'app_icon_file_id': str,
            'background_image_file_id': str,
            'card_description': str,
            'contact_email': str,
            'contact_phone': str,
            'contact_website': str,
            'issuer_name': str,
            'text_color': CreateACardProfileParametersDigitalWalletsTextColor
        }

        self.attribute_map = {
            'app_icon_file_id': 'app_icon_file_id',
            'background_image_file_id': 'background_image_file_id',
            'card_description': 'card_description',
            'contact_email': 'contact_email',
            'contact_phone': 'contact_phone',
            'contact_website': 'contact_website',
            'issuer_name': 'issuer_name',
            'text_color': 'text_color'
        }

        self._app_icon_file_id = app_icon_file_id
        self._background_image_file_id = background_image_file_id
        self._card_description = card_description
        self._contact_email = contact_email
        self._contact_phone = contact_phone
        self._contact_website = contact_website
        self._issuer_name = issuer_name
        self._text_color = text_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateACardProfileParametersDigitalWallets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_a_card_profile_parameters_digital_wallets of this CreateACardProfileParametersDigitalWallets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_icon_file_id(self):
        """Gets the app_icon_file_id of this CreateACardProfileParametersDigitalWallets.

        The identifier of the File containing the card's icon image.

        :return: The app_icon_file_id of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._app_icon_file_id

    @app_icon_file_id.setter
    def app_icon_file_id(self, app_icon_file_id):
        """Sets the app_icon_file_id of this CreateACardProfileParametersDigitalWallets.

        The identifier of the File containing the card's icon image.

        :param app_icon_file_id: The app_icon_file_id of this CreateACardProfileParametersDigitalWallets.
        :type app_icon_file_id: str
        """
        if app_icon_file_id is None:
            raise ValueError("Invalid value for `app_icon_file_id`, must not be `None`")

        self._app_icon_file_id = app_icon_file_id

    @property
    def background_image_file_id(self):
        """Gets the background_image_file_id of this CreateACardProfileParametersDigitalWallets.

        The identifier of the File containing the card's front image.

        :return: The background_image_file_id of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._background_image_file_id

    @background_image_file_id.setter
    def background_image_file_id(self, background_image_file_id):
        """Sets the background_image_file_id of this CreateACardProfileParametersDigitalWallets.

        The identifier of the File containing the card's front image.

        :param background_image_file_id: The background_image_file_id of this CreateACardProfileParametersDigitalWallets.
        :type background_image_file_id: str
        """
        if background_image_file_id is None:
            raise ValueError("Invalid value for `background_image_file_id`, must not be `None`")

        self._background_image_file_id = background_image_file_id

    @property
    def card_description(self):
        """Gets the card_description of this CreateACardProfileParametersDigitalWallets.

        A user-facing description for the card itself.

        :return: The card_description of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._card_description

    @card_description.setter
    def card_description(self, card_description):
        """Sets the card_description of this CreateACardProfileParametersDigitalWallets.

        A user-facing description for the card itself.

        :param card_description: The card_description of this CreateACardProfileParametersDigitalWallets.
        :type card_description: str
        """
        if card_description is None:
            raise ValueError("Invalid value for `card_description`, must not be `None`")
        if card_description is not None and len(card_description) > 32:
            raise ValueError("Invalid value for `card_description`, length must be less than or equal to `32`")
        if card_description is not None and len(card_description) < 1:
            raise ValueError("Invalid value for `card_description`, length must be greater than or equal to `1`")

        self._card_description = card_description

    @property
    def contact_email(self):
        """Gets the contact_email of this CreateACardProfileParametersDigitalWallets.

        An email address the user can contact to receive support for their card.

        :return: The contact_email of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this CreateACardProfileParametersDigitalWallets.

        An email address the user can contact to receive support for their card.

        :param contact_email: The contact_email of this CreateACardProfileParametersDigitalWallets.
        :type contact_email: str
        """
        if contact_email is not None and len(contact_email) > 32:
            raise ValueError("Invalid value for `contact_email`, length must be less than or equal to `32`")
        if contact_email is not None and len(contact_email) < 1:
            raise ValueError("Invalid value for `contact_email`, length must be greater than or equal to `1`")

        self._contact_email = contact_email

    @property
    def contact_phone(self):
        """Gets the contact_phone of this CreateACardProfileParametersDigitalWallets.

        A phone number the user can contact to receive support for their card.

        :return: The contact_phone of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this CreateACardProfileParametersDigitalWallets.

        A phone number the user can contact to receive support for their card.

        :param contact_phone: The contact_phone of this CreateACardProfileParametersDigitalWallets.
        :type contact_phone: str
        """
        if contact_phone is not None and len(contact_phone) > 32:
            raise ValueError("Invalid value for `contact_phone`, length must be less than or equal to `32`")
        if contact_phone is not None and len(contact_phone) < 1:
            raise ValueError("Invalid value for `contact_phone`, length must be greater than or equal to `1`")

        self._contact_phone = contact_phone

    @property
    def contact_website(self):
        """Gets the contact_website of this CreateACardProfileParametersDigitalWallets.

        A website the user can visit to view and receive support for their card.

        :return: The contact_website of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._contact_website

    @contact_website.setter
    def contact_website(self, contact_website):
        """Sets the contact_website of this CreateACardProfileParametersDigitalWallets.

        A website the user can visit to view and receive support for their card.

        :param contact_website: The contact_website of this CreateACardProfileParametersDigitalWallets.
        :type contact_website: str
        """

        self._contact_website = contact_website

    @property
    def issuer_name(self):
        """Gets the issuer_name of this CreateACardProfileParametersDigitalWallets.

        A user-facing description for whoever is issuing the card.

        :return: The issuer_name of this CreateACardProfileParametersDigitalWallets.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this CreateACardProfileParametersDigitalWallets.

        A user-facing description for whoever is issuing the card.

        :param issuer_name: The issuer_name of this CreateACardProfileParametersDigitalWallets.
        :type issuer_name: str
        """
        if issuer_name is None:
            raise ValueError("Invalid value for `issuer_name`, must not be `None`")
        if issuer_name is not None and len(issuer_name) > 32:
            raise ValueError("Invalid value for `issuer_name`, length must be less than or equal to `32`")
        if issuer_name is not None and len(issuer_name) < 1:
            raise ValueError("Invalid value for `issuer_name`, length must be greater than or equal to `1`")

        self._issuer_name = issuer_name

    @property
    def text_color(self):
        """Gets the text_color of this CreateACardProfileParametersDigitalWallets.


        :return: The text_color of this CreateACardProfileParametersDigitalWallets.
        :rtype: CreateACardProfileParametersDigitalWalletsTextColor
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this CreateACardProfileParametersDigitalWallets.


        :param text_color: The text_color of this CreateACardProfileParametersDigitalWallets.
        :type text_color: CreateACardProfileParametersDigitalWalletsTextColor
        """

        self._text_color = text_color
