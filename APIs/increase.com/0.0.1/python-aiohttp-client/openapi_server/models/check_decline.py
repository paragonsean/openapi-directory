# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDecline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, auxiliary_on_us: str=None, reason: str=None):
        """CheckDecline - a model defined in OpenAPI

        :param amount: The amount of this CheckDecline.
        :param auxiliary_on_us: The auxiliary_on_us of this CheckDecline.
        :param reason: The reason of this CheckDecline.
        """
        self.openapi_types = {
            'amount': int,
            'auxiliary_on_us': str,
            'reason': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'auxiliary_on_us': 'auxiliary_on_us',
            'reason': 'reason'
        }

        self._amount = amount
        self._auxiliary_on_us = auxiliary_on_us
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDecline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Decline of this CheckDecline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CheckDecline.

        The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :return: The amount of this CheckDecline.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckDecline.

        The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.

        :param amount: The amount of this CheckDecline.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def auxiliary_on_us(self):
        """Gets the auxiliary_on_us of this CheckDecline.

        

        :return: The auxiliary_on_us of this CheckDecline.
        :rtype: str
        """
        return self._auxiliary_on_us

    @auxiliary_on_us.setter
    def auxiliary_on_us(self, auxiliary_on_us):
        """Sets the auxiliary_on_us of this CheckDecline.

        

        :param auxiliary_on_us: The auxiliary_on_us of this CheckDecline.
        :type auxiliary_on_us: str
        """
        if auxiliary_on_us is None:
            raise ValueError("Invalid value for `auxiliary_on_us`, must not be `None`")

        self._auxiliary_on_us = auxiliary_on_us

    @property
    def reason(self):
        """Gets the reason of this CheckDecline.

        Why the check was declined.

        :return: The reason of this CheckDecline.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckDecline.

        Why the check was declined.

        :param reason: The reason of this CheckDecline.
        :type reason: str
        """
        allowed_values = ["ach_route_canceled", "ach_route_disabled", "breaches_limit", "entity_not_active", "group_locked", "insufficient_funds", "unable_to_locate_account", "unable_to_process", "refer_to_image", "stop_payment_requested", "returned", "duplicate_presentment", "not_authorized"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
