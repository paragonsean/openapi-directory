# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entries_element import EntriesElement
from openapi_server import util


class BookkeepingEntrySet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, entries: List[EntriesElement]=None, id: str=None, transaction_id: str=None, type: str=None):
        """BookkeepingEntrySet - a model defined in OpenAPI

        :param _date: The _date of this BookkeepingEntrySet.
        :param entries: The entries of this BookkeepingEntrySet.
        :param id: The id of this BookkeepingEntrySet.
        :param transaction_id: The transaction_id of this BookkeepingEntrySet.
        :param type: The type of this BookkeepingEntrySet.
        """
        self.openapi_types = {
            '_date': datetime,
            'entries': List[EntriesElement],
            'id': str,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            '_date': 'date',
            'entries': 'entries',
            'id': 'id',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self.__date = _date
        self._entries = entries
        self._id = id
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookkeepingEntrySet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookkeeping_entry_set of this BookkeepingEntrySet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this BookkeepingEntrySet.

        The timestamp of the entry set.

        :return: The _date of this BookkeepingEntrySet.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BookkeepingEntrySet.

        The timestamp of the entry set.

        :param _date: The _date of this BookkeepingEntrySet.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def entries(self):
        """Gets the entries of this BookkeepingEntrySet.

        The entries

        :return: The entries of this BookkeepingEntrySet.
        :rtype: List[EntriesElement]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this BookkeepingEntrySet.

        The entries

        :param entries: The entries of this BookkeepingEntrySet.
        :type entries: List[EntriesElement]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")

        self._entries = entries

    @property
    def id(self):
        """Gets the id of this BookkeepingEntrySet.

        The entry set identifier.

        :return: The id of this BookkeepingEntrySet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BookkeepingEntrySet.

        The entry set identifier.

        :param id: The id of this BookkeepingEntrySet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this BookkeepingEntrySet.

        The transaction identifier, if any.

        :return: The transaction_id of this BookkeepingEntrySet.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this BookkeepingEntrySet.

        The transaction identifier, if any.

        :param transaction_id: The transaction_id of this BookkeepingEntrySet.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this BookkeepingEntrySet.

        A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.

        :return: The type of this BookkeepingEntrySet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BookkeepingEntrySet.

        A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.

        :param type: The type of this BookkeepingEntrySet.
        :type type: str
        """
        allowed_values = ["bookkeeping_entry_set"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
