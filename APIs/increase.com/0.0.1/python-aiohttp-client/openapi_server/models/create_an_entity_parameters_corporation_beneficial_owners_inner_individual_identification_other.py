# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, description: str=None, expiration_date: date=None, file_id: str=None):
        """CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther - a model defined in OpenAPI

        :param country: The country of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :param description: The description of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :param expiration_date: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :param file_id: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        """
        self.openapi_types = {
            'country': str,
            'description': str,
            'expiration_date': date,
            'file_id': str
        }

        self.attribute_map = {
            'country': 'country',
            'description': 'description',
            'expiration_date': 'expiration_date',
            'file_id': 'file_id'
        }

        self._country = country
        self._description = description
        self._expiration_date = expiration_date
        self._file_id = file_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_other of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The two-character ISO 3166-1 code representing the country that issued the document.

        :return: The country of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The two-character ISO 3166-1 code representing the country that issued the document.

        :param country: The country of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 200:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `200`")
        if country is not None and len(country) < 1:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")

        self._country = country

    @property
    def description(self):
        """Gets the description of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        A description of the document submitted.

        :return: The description of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        A description of the document submitted.

        :param description: The description of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The document's expiration date in YYYY-MM-DD format.

        :return: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The document's expiration date in YYYY-MM-DD format.

        :param expiration_date: The expiration_date of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :type expiration_date: date
        """

        self._expiration_date = expiration_date

    @property
    def file_id(self):
        """Gets the file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The identifier of the File containing the document.

        :return: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.

        The identifier of the File containing the document.

        :param file_id: The file_id of this CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividualIdentificationOther.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id
