# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferCancellation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canceled_at: datetime=None, canceled_by: str=None):
        """TransferCancellation - a model defined in OpenAPI

        :param canceled_at: The canceled_at of this TransferCancellation.
        :param canceled_by: The canceled_by of this TransferCancellation.
        """
        self.openapi_types = {
            'canceled_at': datetime,
            'canceled_by': str
        }

        self.attribute_map = {
            'canceled_at': 'canceled_at',
            'canceled_by': 'canceled_by'
        }

        self._canceled_at = canceled_at
        self._canceled_by = canceled_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferCancellation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transfer_Cancellation of this TransferCancellation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canceled_at(self):
        """Gets the canceled_at of this TransferCancellation.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.

        :return: The canceled_at of this TransferCancellation.
        :rtype: datetime
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this TransferCancellation.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.

        :param canceled_at: The canceled_at of this TransferCancellation.
        :type canceled_at: datetime
        """
        if canceled_at is None:
            raise ValueError("Invalid value for `canceled_at`, must not be `None`")

        self._canceled_at = canceled_at

    @property
    def canceled_by(self):
        """Gets the canceled_by of this TransferCancellation.

        If the Transfer was canceled by a user in the dashboard, the email address of that user.

        :return: The canceled_by of this TransferCancellation.
        :rtype: str
        """
        return self._canceled_by

    @canceled_by.setter
    def canceled_by(self, canceled_by):
        """Sets the canceled_by of this TransferCancellation.

        If the Transfer was canceled by a user in the dashboard, the email address of that user.

        :param canceled_by: The canceled_by of this TransferCancellation.
        :type canceled_by: str
        """
        if canceled_by is None:
            raise ValueError("Invalid value for `canceled_by`, must not be `None`")

        self._canceled_by = canceled_by
