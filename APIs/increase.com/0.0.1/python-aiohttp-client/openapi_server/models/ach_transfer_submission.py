# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ACHTransferSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, submitted_at: datetime=None, trace_number: str=None):
        """ACHTransferSubmission - a model defined in OpenAPI

        :param submitted_at: The submitted_at of this ACHTransferSubmission.
        :param trace_number: The trace_number of this ACHTransferSubmission.
        """
        self.openapi_types = {
            'submitted_at': datetime,
            'trace_number': str
        }

        self.attribute_map = {
            'submitted_at': 'submitted_at',
            'trace_number': 'trace_number'
        }

        self._submitted_at = submitted_at
        self._trace_number = trace_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ACHTransferSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ACH_Transfer_Submission of this ACHTransferSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def submitted_at(self):
        """Gets the submitted_at of this ACHTransferSubmission.

        When the ACH transfer was sent to FedACH.

        :return: The submitted_at of this ACHTransferSubmission.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this ACHTransferSubmission.

        When the ACH transfer was sent to FedACH.

        :param submitted_at: The submitted_at of this ACHTransferSubmission.
        :type submitted_at: datetime
        """
        if submitted_at is None:
            raise ValueError("Invalid value for `submitted_at`, must not be `None`")

        self._submitted_at = submitted_at

    @property
    def trace_number(self):
        """Gets the trace_number of this ACHTransferSubmission.

        The trace number for the submission.

        :return: The trace_number of this ACHTransferSubmission.
        :rtype: str
        """
        return self._trace_number

    @trace_number.setter
    def trace_number(self, trace_number):
        """Sets the trace_number of this ACHTransferSubmission.

        The trace number for the submission.

        :param trace_number: The trace_number of this ACHTransferSubmission.
        :type trace_number: str
        """
        if trace_number is None:
            raise ValueError("Invalid value for `trace_number`, must not be `None`")

        self._trace_number = trace_number
