# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardDisputeAcceptance1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_at: datetime=None, card_dispute_id: str=None, transaction_id: str=None):
        """CardDisputeAcceptance1 - a model defined in OpenAPI

        :param accepted_at: The accepted_at of this CardDisputeAcceptance1.
        :param card_dispute_id: The card_dispute_id of this CardDisputeAcceptance1.
        :param transaction_id: The transaction_id of this CardDisputeAcceptance1.
        """
        self.openapi_types = {
            'accepted_at': datetime,
            'card_dispute_id': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'accepted_at': 'accepted_at',
            'card_dispute_id': 'card_dispute_id',
            'transaction_id': 'transaction_id'
        }

        self._accepted_at = accepted_at
        self._card_dispute_id = card_dispute_id
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDisputeAcceptance1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_Dispute_Acceptance_1 of this CardDisputeAcceptance1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_at(self):
        """Gets the accepted_at of this CardDisputeAcceptance1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.

        :return: The accepted_at of this CardDisputeAcceptance1.
        :rtype: datetime
        """
        return self._accepted_at

    @accepted_at.setter
    def accepted_at(self, accepted_at):
        """Sets the accepted_at of this CardDisputeAcceptance1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.

        :param accepted_at: The accepted_at of this CardDisputeAcceptance1.
        :type accepted_at: datetime
        """
        if accepted_at is None:
            raise ValueError("Invalid value for `accepted_at`, must not be `None`")

        self._accepted_at = accepted_at

    @property
    def card_dispute_id(self):
        """Gets the card_dispute_id of this CardDisputeAcceptance1.

        The identifier of the Card Dispute that was accepted.

        :return: The card_dispute_id of this CardDisputeAcceptance1.
        :rtype: str
        """
        return self._card_dispute_id

    @card_dispute_id.setter
    def card_dispute_id(self, card_dispute_id):
        """Sets the card_dispute_id of this CardDisputeAcceptance1.

        The identifier of the Card Dispute that was accepted.

        :param card_dispute_id: The card_dispute_id of this CardDisputeAcceptance1.
        :type card_dispute_id: str
        """
        if card_dispute_id is None:
            raise ValueError("Invalid value for `card_dispute_id`, must not be `None`")

        self._card_dispute_id = card_dispute_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CardDisputeAcceptance1.

        The identifier of the Transaction that was created to return the disputed funds to your account.

        :return: The transaction_id of this CardDisputeAcceptance1.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CardDisputeAcceptance1.

        The identifier of the Transaction that was created to return the disputed funds to your account.

        :param transaction_id: The transaction_id of this CardDisputeAcceptance1.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
