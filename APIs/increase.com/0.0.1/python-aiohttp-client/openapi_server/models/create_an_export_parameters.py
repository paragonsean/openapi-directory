# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_an_export_parameters_balance_csv import CreateAnExportParametersBalanceCsv
from openapi_server.models.create_an_export_parameters_transaction_csv import CreateAnExportParametersTransactionCsv
from openapi_server import util


class CreateAnExportParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_csv: CreateAnExportParametersBalanceCsv=None, category: str=None, transaction_csv: CreateAnExportParametersTransactionCsv=None):
        """CreateAnExportParameters - a model defined in OpenAPI

        :param balance_csv: The balance_csv of this CreateAnExportParameters.
        :param category: The category of this CreateAnExportParameters.
        :param transaction_csv: The transaction_csv of this CreateAnExportParameters.
        """
        self.openapi_types = {
            'balance_csv': CreateAnExportParametersBalanceCsv,
            'category': str,
            'transaction_csv': CreateAnExportParametersTransactionCsv
        }

        self.attribute_map = {
            'balance_csv': 'balance_csv',
            'category': 'category',
            'transaction_csv': 'transaction_csv'
        }

        self._balance_csv = balance_csv
        self._category = category
        self._transaction_csv = transaction_csv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnExportParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_export_parameters of this CreateAnExportParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_csv(self):
        """Gets the balance_csv of this CreateAnExportParameters.


        :return: The balance_csv of this CreateAnExportParameters.
        :rtype: CreateAnExportParametersBalanceCsv
        """
        return self._balance_csv

    @balance_csv.setter
    def balance_csv(self, balance_csv):
        """Sets the balance_csv of this CreateAnExportParameters.


        :param balance_csv: The balance_csv of this CreateAnExportParameters.
        :type balance_csv: CreateAnExportParametersBalanceCsv
        """

        self._balance_csv = balance_csv

    @property
    def category(self):
        """Gets the category of this CreateAnExportParameters.

        The type of Export to create.

        :return: The category of this CreateAnExportParameters.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateAnExportParameters.

        The type of Export to create.

        :param category: The category of this CreateAnExportParameters.
        :type category: str
        """
        allowed_values = ["transaction_csv", "balance_csv"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def transaction_csv(self):
        """Gets the transaction_csv of this CreateAnExportParameters.


        :return: The transaction_csv of this CreateAnExportParameters.
        :rtype: CreateAnExportParametersTransactionCsv
        """
        return self._transaction_csv

    @transaction_csv.setter
    def transaction_csv(self, transaction_csv):
        """Sets the transaction_csv of this CreateAnExportParameters.


        :param transaction_csv: The transaction_csv of this CreateAnExportParameters.
        :type transaction_csv: CreateAnExportParametersTransactionCsv
        """

        self._transaction_csv = transaction_csv
