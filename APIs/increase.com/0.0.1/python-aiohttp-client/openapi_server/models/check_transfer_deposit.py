# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckTransferDeposit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, back_image_file_id: str=None, deposited_at: datetime=None, front_image_file_id: str=None, type: str=None):
        """CheckTransferDeposit - a model defined in OpenAPI

        :param back_image_file_id: The back_image_file_id of this CheckTransferDeposit.
        :param deposited_at: The deposited_at of this CheckTransferDeposit.
        :param front_image_file_id: The front_image_file_id of this CheckTransferDeposit.
        :param type: The type of this CheckTransferDeposit.
        """
        self.openapi_types = {
            'back_image_file_id': str,
            'deposited_at': datetime,
            'front_image_file_id': str,
            'type': str
        }

        self.attribute_map = {
            'back_image_file_id': 'back_image_file_id',
            'deposited_at': 'deposited_at',
            'front_image_file_id': 'front_image_file_id',
            'type': 'type'
        }

        self._back_image_file_id = back_image_file_id
        self._deposited_at = deposited_at
        self._front_image_file_id = front_image_file_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransferDeposit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Transfer_Deposit of this CheckTransferDeposit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def back_image_file_id(self):
        """Gets the back_image_file_id of this CheckTransferDeposit.

        The ID for the File containing the image of the rear of the check.

        :return: The back_image_file_id of this CheckTransferDeposit.
        :rtype: str
        """
        return self._back_image_file_id

    @back_image_file_id.setter
    def back_image_file_id(self, back_image_file_id):
        """Sets the back_image_file_id of this CheckTransferDeposit.

        The ID for the File containing the image of the rear of the check.

        :param back_image_file_id: The back_image_file_id of this CheckTransferDeposit.
        :type back_image_file_id: str
        """
        if back_image_file_id is None:
            raise ValueError("Invalid value for `back_image_file_id`, must not be `None`")

        self._back_image_file_id = back_image_file_id

    @property
    def deposited_at(self):
        """Gets the deposited_at of this CheckTransferDeposit.

        When the check was deposited.

        :return: The deposited_at of this CheckTransferDeposit.
        :rtype: datetime
        """
        return self._deposited_at

    @deposited_at.setter
    def deposited_at(self, deposited_at):
        """Sets the deposited_at of this CheckTransferDeposit.

        When the check was deposited.

        :param deposited_at: The deposited_at of this CheckTransferDeposit.
        :type deposited_at: datetime
        """
        if deposited_at is None:
            raise ValueError("Invalid value for `deposited_at`, must not be `None`")

        self._deposited_at = deposited_at

    @property
    def front_image_file_id(self):
        """Gets the front_image_file_id of this CheckTransferDeposit.

        The ID for the File containing the image of the front of the check.

        :return: The front_image_file_id of this CheckTransferDeposit.
        :rtype: str
        """
        return self._front_image_file_id

    @front_image_file_id.setter
    def front_image_file_id(self, front_image_file_id):
        """Sets the front_image_file_id of this CheckTransferDeposit.

        The ID for the File containing the image of the front of the check.

        :param front_image_file_id: The front_image_file_id of this CheckTransferDeposit.
        :type front_image_file_id: str
        """
        if front_image_file_id is None:
            raise ValueError("Invalid value for `front_image_file_id`, must not be `None`")

        self._front_image_file_id = front_image_file_id

    @property
    def type(self):
        """Gets the type of this CheckTransferDeposit.

        A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.

        :return: The type of this CheckTransferDeposit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckTransferDeposit.

        A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.

        :param type: The type of this CheckTransferDeposit.
        :type type: str
        """
        allowed_values = ["check_transfer_deposit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
