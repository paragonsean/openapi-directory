# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigitalWalletAuthentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: str=None, channel: str=None, digital_wallet: str=None, email: str=None, one_time_passcode: str=None, phone: str=None, result: str=None):
        """DigitalWalletAuthentication - a model defined in OpenAPI

        :param card_id: The card_id of this DigitalWalletAuthentication.
        :param channel: The channel of this DigitalWalletAuthentication.
        :param digital_wallet: The digital_wallet of this DigitalWalletAuthentication.
        :param email: The email of this DigitalWalletAuthentication.
        :param one_time_passcode: The one_time_passcode of this DigitalWalletAuthentication.
        :param phone: The phone of this DigitalWalletAuthentication.
        :param result: The result of this DigitalWalletAuthentication.
        """
        self.openapi_types = {
            'card_id': str,
            'channel': str,
            'digital_wallet': str,
            'email': str,
            'one_time_passcode': str,
            'phone': str,
            'result': str
        }

        self.attribute_map = {
            'card_id': 'card_id',
            'channel': 'channel',
            'digital_wallet': 'digital_wallet',
            'email': 'email',
            'one_time_passcode': 'one_time_passcode',
            'phone': 'phone',
            'result': 'result'
        }

        self._card_id = card_id
        self._channel = channel
        self._digital_wallet = digital_wallet
        self._email = email
        self._one_time_passcode = one_time_passcode
        self._phone = phone
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalWalletAuthentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Digital_Wallet_Authentication of this DigitalWalletAuthentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this DigitalWalletAuthentication.

        The identifier of the Card that is being tokenized.

        :return: The card_id of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this DigitalWalletAuthentication.

        The identifier of the Card that is being tokenized.

        :param card_id: The card_id of this DigitalWalletAuthentication.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def channel(self):
        """Gets the channel of this DigitalWalletAuthentication.

        The channel to send the card user their one-time passcode.

        :return: The channel of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DigitalWalletAuthentication.

        The channel to send the card user their one-time passcode.

        :param channel: The channel of this DigitalWalletAuthentication.
        :type channel: str
        """
        allowed_values = ["sms", "email"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def digital_wallet(self):
        """Gets the digital_wallet of this DigitalWalletAuthentication.

        The digital wallet app being used.

        :return: The digital_wallet of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._digital_wallet

    @digital_wallet.setter
    def digital_wallet(self, digital_wallet):
        """Sets the digital_wallet of this DigitalWalletAuthentication.

        The digital wallet app being used.

        :param digital_wallet: The digital_wallet of this DigitalWalletAuthentication.
        :type digital_wallet: str
        """
        allowed_values = ["apple_pay", "google_pay"]  # noqa: E501
        if digital_wallet not in allowed_values:
            raise ValueError(
                "Invalid value for `digital_wallet` ({0}), must be one of {1}"
                .format(digital_wallet, allowed_values)
            )

        self._digital_wallet = digital_wallet

    @property
    def email(self):
        """Gets the email of this DigitalWalletAuthentication.

        The email to send the one-time passcode to if `channel` is equal to `email`.

        :return: The email of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DigitalWalletAuthentication.

        The email to send the one-time passcode to if `channel` is equal to `email`.

        :param email: The email of this DigitalWalletAuthentication.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def one_time_passcode(self):
        """Gets the one_time_passcode of this DigitalWalletAuthentication.

        The one-time passcode to send the card user.

        :return: The one_time_passcode of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._one_time_passcode

    @one_time_passcode.setter
    def one_time_passcode(self, one_time_passcode):
        """Sets the one_time_passcode of this DigitalWalletAuthentication.

        The one-time passcode to send the card user.

        :param one_time_passcode: The one_time_passcode of this DigitalWalletAuthentication.
        :type one_time_passcode: str
        """
        if one_time_passcode is None:
            raise ValueError("Invalid value for `one_time_passcode`, must not be `None`")

        self._one_time_passcode = one_time_passcode

    @property
    def phone(self):
        """Gets the phone of this DigitalWalletAuthentication.

        The phone number to send the one-time passcode to if `channel` is equal to `sms`.

        :return: The phone of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DigitalWalletAuthentication.

        The phone number to send the one-time passcode to if `channel` is equal to `sms`.

        :param phone: The phone of this DigitalWalletAuthentication.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def result(self):
        """Gets the result of this DigitalWalletAuthentication.

        Whether your application successfully delivered the one-time passcode.

        :return: The result of this DigitalWalletAuthentication.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DigitalWalletAuthentication.

        Whether your application successfully delivered the one-time passcode.

        :param result: The result of this DigitalWalletAuthentication.
        :type result: str
        """
        allowed_values = [None,"success", "failure"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
