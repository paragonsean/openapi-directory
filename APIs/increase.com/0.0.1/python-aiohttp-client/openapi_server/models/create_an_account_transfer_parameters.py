# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnAccountTransferParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, description: str=None, destination_account_id: str=None, require_approval: bool=None):
        """CreateAnAccountTransferParameters - a model defined in OpenAPI

        :param account_id: The account_id of this CreateAnAccountTransferParameters.
        :param amount: The amount of this CreateAnAccountTransferParameters.
        :param description: The description of this CreateAnAccountTransferParameters.
        :param destination_account_id: The destination_account_id of this CreateAnAccountTransferParameters.
        :param require_approval: The require_approval of this CreateAnAccountTransferParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'description': str,
            'destination_account_id': str,
            'require_approval': bool
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'description': 'description',
            'destination_account_id': 'destination_account_id',
            'require_approval': 'require_approval'
        }

        self._account_id = account_id
        self._amount = amount
        self._description = description
        self._destination_account_id = destination_account_id
        self._require_approval = require_approval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnAccountTransferParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_account_transfer_parameters of this CreateAnAccountTransferParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateAnAccountTransferParameters.

        The identifier for the account that will send the transfer.

        :return: The account_id of this CreateAnAccountTransferParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAnAccountTransferParameters.

        The identifier for the account that will send the transfer.

        :param account_id: The account_id of this CreateAnAccountTransferParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this CreateAnAccountTransferParameters.

        The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.

        :return: The amount of this CreateAnAccountTransferParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateAnAccountTransferParameters.

        The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.

        :param amount: The amount of this CreateAnAccountTransferParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CreateAnAccountTransferParameters.

        The description you choose to give the transfer.

        :return: The description of this CreateAnAccountTransferParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnAccountTransferParameters.

        The description you choose to give the transfer.

        :param description: The description of this CreateAnAccountTransferParameters.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def destination_account_id(self):
        """Gets the destination_account_id of this CreateAnAccountTransferParameters.

        The identifier for the account that will receive the transfer.

        :return: The destination_account_id of this CreateAnAccountTransferParameters.
        :rtype: str
        """
        return self._destination_account_id

    @destination_account_id.setter
    def destination_account_id(self, destination_account_id):
        """Sets the destination_account_id of this CreateAnAccountTransferParameters.

        The identifier for the account that will receive the transfer.

        :param destination_account_id: The destination_account_id of this CreateAnAccountTransferParameters.
        :type destination_account_id: str
        """
        if destination_account_id is None:
            raise ValueError("Invalid value for `destination_account_id`, must not be `None`")

        self._destination_account_id = destination_account_id

    @property
    def require_approval(self):
        """Gets the require_approval of this CreateAnAccountTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :return: The require_approval of this CreateAnAccountTransferParameters.
        :rtype: bool
        """
        return self._require_approval

    @require_approval.setter
    def require_approval(self, require_approval):
        """Sets the require_approval of this CreateAnAccountTransferParameters.

        Whether the transfer requires explicit approval via the dashboard or API.

        :param require_approval: The require_approval of this CreateAnAccountTransferParameters.
        :type require_approval: bool
        """

        self._require_approval = require_approval
