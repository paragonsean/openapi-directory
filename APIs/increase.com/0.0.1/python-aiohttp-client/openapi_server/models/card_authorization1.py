# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_details import NetworkDetails
from openapi_server import util


class CardAuthorization1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, card_id: str=None, decision: str=None, merchant_acceptor_id: str=None, merchant_category_code: str=None, merchant_city: str=None, merchant_country: str=None, merchant_descriptor: str=None, network: str=None, network_details: NetworkDetails=None, presentment_amount: int=None, presentment_currency: str=None, settlement_amount: int=None, settlement_currency: str=None):
        """CardAuthorization1 - a model defined in OpenAPI

        :param account_id: The account_id of this CardAuthorization1.
        :param card_id: The card_id of this CardAuthorization1.
        :param decision: The decision of this CardAuthorization1.
        :param merchant_acceptor_id: The merchant_acceptor_id of this CardAuthorization1.
        :param merchant_category_code: The merchant_category_code of this CardAuthorization1.
        :param merchant_city: The merchant_city of this CardAuthorization1.
        :param merchant_country: The merchant_country of this CardAuthorization1.
        :param merchant_descriptor: The merchant_descriptor of this CardAuthorization1.
        :param network: The network of this CardAuthorization1.
        :param network_details: The network_details of this CardAuthorization1.
        :param presentment_amount: The presentment_amount of this CardAuthorization1.
        :param presentment_currency: The presentment_currency of this CardAuthorization1.
        :param settlement_amount: The settlement_amount of this CardAuthorization1.
        :param settlement_currency: The settlement_currency of this CardAuthorization1.
        """
        self.openapi_types = {
            'account_id': str,
            'card_id': str,
            'decision': str,
            'merchant_acceptor_id': str,
            'merchant_category_code': str,
            'merchant_city': str,
            'merchant_country': str,
            'merchant_descriptor': str,
            'network': str,
            'network_details': NetworkDetails,
            'presentment_amount': int,
            'presentment_currency': str,
            'settlement_amount': int,
            'settlement_currency': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'card_id': 'card_id',
            'decision': 'decision',
            'merchant_acceptor_id': 'merchant_acceptor_id',
            'merchant_category_code': 'merchant_category_code',
            'merchant_city': 'merchant_city',
            'merchant_country': 'merchant_country',
            'merchant_descriptor': 'merchant_descriptor',
            'network': 'network',
            'network_details': 'network_details',
            'presentment_amount': 'presentment_amount',
            'presentment_currency': 'presentment_currency',
            'settlement_amount': 'settlement_amount',
            'settlement_currency': 'settlement_currency'
        }

        self._account_id = account_id
        self._card_id = card_id
        self._decision = decision
        self._merchant_acceptor_id = merchant_acceptor_id
        self._merchant_category_code = merchant_category_code
        self._merchant_city = merchant_city
        self._merchant_country = merchant_country
        self._merchant_descriptor = merchant_descriptor
        self._network = network
        self._network_details = network_details
        self._presentment_amount = presentment_amount
        self._presentment_currency = presentment_currency
        self._settlement_amount = settlement_amount
        self._settlement_currency = settlement_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAuthorization1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_Authorization_1 of this CardAuthorization1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CardAuthorization1.

        The identifier of the Account the authorization will debit.

        :return: The account_id of this CardAuthorization1.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CardAuthorization1.

        The identifier of the Account the authorization will debit.

        :param account_id: The account_id of this CardAuthorization1.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def card_id(self):
        """Gets the card_id of this CardAuthorization1.

        The identifier of the Card that is being authorized.

        :return: The card_id of this CardAuthorization1.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CardAuthorization1.

        The identifier of the Card that is being authorized.

        :param card_id: The card_id of this CardAuthorization1.
        :type card_id: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")

        self._card_id = card_id

    @property
    def decision(self):
        """Gets the decision of this CardAuthorization1.

        Whether or not the authorization was approved.

        :return: The decision of this CardAuthorization1.
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this CardAuthorization1.

        Whether or not the authorization was approved.

        :param decision: The decision of this CardAuthorization1.
        :type decision: str
        """
        allowed_values = [None,"approve", "decline"]  # noqa: E501
        if decision not in allowed_values:
            raise ValueError(
                "Invalid value for `decision` ({0}), must be one of {1}"
                .format(decision, allowed_values)
            )

        self._decision = decision

    @property
    def merchant_acceptor_id(self):
        """Gets the merchant_acceptor_id of this CardAuthorization1.

        The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.

        :return: The merchant_acceptor_id of this CardAuthorization1.
        :rtype: str
        """
        return self._merchant_acceptor_id

    @merchant_acceptor_id.setter
    def merchant_acceptor_id(self, merchant_acceptor_id):
        """Sets the merchant_acceptor_id of this CardAuthorization1.

        The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.

        :param merchant_acceptor_id: The merchant_acceptor_id of this CardAuthorization1.
        :type merchant_acceptor_id: str
        """
        if merchant_acceptor_id is None:
            raise ValueError("Invalid value for `merchant_acceptor_id`, must not be `None`")

        self._merchant_acceptor_id = merchant_acceptor_id

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this CardAuthorization1.

        The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.

        :return: The merchant_category_code of this CardAuthorization1.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this CardAuthorization1.

        The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.

        :param merchant_category_code: The merchant_category_code of this CardAuthorization1.
        :type merchant_category_code: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_city(self):
        """Gets the merchant_city of this CardAuthorization1.

        The city the merchant resides in.

        :return: The merchant_city of this CardAuthorization1.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """Sets the merchant_city of this CardAuthorization1.

        The city the merchant resides in.

        :param merchant_city: The merchant_city of this CardAuthorization1.
        :type merchant_city: str
        """
        if merchant_city is None:
            raise ValueError("Invalid value for `merchant_city`, must not be `None`")

        self._merchant_city = merchant_city

    @property
    def merchant_country(self):
        """Gets the merchant_country of this CardAuthorization1.

        The country the merchant resides in.

        :return: The merchant_country of this CardAuthorization1.
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this CardAuthorization1.

        The country the merchant resides in.

        :param merchant_country: The merchant_country of this CardAuthorization1.
        :type merchant_country: str
        """
        if merchant_country is None:
            raise ValueError("Invalid value for `merchant_country`, must not be `None`")

        self._merchant_country = merchant_country

    @property
    def merchant_descriptor(self):
        """Gets the merchant_descriptor of this CardAuthorization1.

        The merchant descriptor of the merchant the card is transacting with.

        :return: The merchant_descriptor of this CardAuthorization1.
        :rtype: str
        """
        return self._merchant_descriptor

    @merchant_descriptor.setter
    def merchant_descriptor(self, merchant_descriptor):
        """Sets the merchant_descriptor of this CardAuthorization1.

        The merchant descriptor of the merchant the card is transacting with.

        :param merchant_descriptor: The merchant_descriptor of this CardAuthorization1.
        :type merchant_descriptor: str
        """
        if merchant_descriptor is None:
            raise ValueError("Invalid value for `merchant_descriptor`, must not be `None`")

        self._merchant_descriptor = merchant_descriptor

    @property
    def network(self):
        """Gets the network of this CardAuthorization1.

        The payment network used to process this card authorization

        :return: The network of this CardAuthorization1.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CardAuthorization1.

        The payment network used to process this card authorization

        :param network: The network of this CardAuthorization1.
        :type network: str
        """
        allowed_values = ["visa"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def network_details(self):
        """Gets the network_details of this CardAuthorization1.


        :return: The network_details of this CardAuthorization1.
        :rtype: NetworkDetails
        """
        return self._network_details

    @network_details.setter
    def network_details(self, network_details):
        """Sets the network_details of this CardAuthorization1.


        :param network_details: The network_details of this CardAuthorization1.
        :type network_details: NetworkDetails
        """
        if network_details is None:
            raise ValueError("Invalid value for `network_details`, must not be `None`")

        self._network_details = network_details

    @property
    def presentment_amount(self):
        """Gets the presentment_amount of this CardAuthorization1.

        The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.

        :return: The presentment_amount of this CardAuthorization1.
        :rtype: int
        """
        return self._presentment_amount

    @presentment_amount.setter
    def presentment_amount(self, presentment_amount):
        """Sets the presentment_amount of this CardAuthorization1.

        The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.

        :param presentment_amount: The presentment_amount of this CardAuthorization1.
        :type presentment_amount: int
        """
        if presentment_amount is None:
            raise ValueError("Invalid value for `presentment_amount`, must not be `None`")

        self._presentment_amount = presentment_amount

    @property
    def presentment_currency(self):
        """Gets the presentment_currency of this CardAuthorization1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.

        :return: The presentment_currency of this CardAuthorization1.
        :rtype: str
        """
        return self._presentment_currency

    @presentment_currency.setter
    def presentment_currency(self, presentment_currency):
        """Sets the presentment_currency of this CardAuthorization1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.

        :param presentment_currency: The presentment_currency of this CardAuthorization1.
        :type presentment_currency: str
        """
        if presentment_currency is None:
            raise ValueError("Invalid value for `presentment_currency`, must not be `None`")

        self._presentment_currency = presentment_currency

    @property
    def settlement_amount(self):
        """Gets the settlement_amount of this CardAuthorization1.

        The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.

        :return: The settlement_amount of this CardAuthorization1.
        :rtype: int
        """
        return self._settlement_amount

    @settlement_amount.setter
    def settlement_amount(self, settlement_amount):
        """Sets the settlement_amount of this CardAuthorization1.

        The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.

        :param settlement_amount: The settlement_amount of this CardAuthorization1.
        :type settlement_amount: int
        """
        if settlement_amount is None:
            raise ValueError("Invalid value for `settlement_amount`, must not be `None`")

        self._settlement_amount = settlement_amount

    @property
    def settlement_currency(self):
        """Gets the settlement_currency of this CardAuthorization1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.

        :return: The settlement_currency of this CardAuthorization1.
        :rtype: str
        """
        return self._settlement_currency

    @settlement_currency.setter
    def settlement_currency(self, settlement_currency):
        """Sets the settlement_currency of this CardAuthorization1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.

        :param settlement_currency: The settlement_currency of this CardAuthorization1.
        :type settlement_currency: str
        """
        if settlement_currency is None:
            raise ValueError("Invalid value for `settlement_currency`, must not be `None`")

        self._settlement_currency = settlement_currency
