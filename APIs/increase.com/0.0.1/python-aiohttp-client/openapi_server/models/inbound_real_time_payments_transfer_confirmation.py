# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundRealTimePaymentsTransferConfirmation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, creditor_name: str=None, currency: str=None, debtor_account_number: str=None, debtor_name: str=None, debtor_routing_number: str=None, remittance_information: str=None, transaction_identification: str=None):
        """InboundRealTimePaymentsTransferConfirmation - a model defined in OpenAPI

        :param amount: The amount of this InboundRealTimePaymentsTransferConfirmation.
        :param creditor_name: The creditor_name of this InboundRealTimePaymentsTransferConfirmation.
        :param currency: The currency of this InboundRealTimePaymentsTransferConfirmation.
        :param debtor_account_number: The debtor_account_number of this InboundRealTimePaymentsTransferConfirmation.
        :param debtor_name: The debtor_name of this InboundRealTimePaymentsTransferConfirmation.
        :param debtor_routing_number: The debtor_routing_number of this InboundRealTimePaymentsTransferConfirmation.
        :param remittance_information: The remittance_information of this InboundRealTimePaymentsTransferConfirmation.
        :param transaction_identification: The transaction_identification of this InboundRealTimePaymentsTransferConfirmation.
        """
        self.openapi_types = {
            'amount': int,
            'creditor_name': str,
            'currency': str,
            'debtor_account_number': str,
            'debtor_name': str,
            'debtor_routing_number': str,
            'remittance_information': str,
            'transaction_identification': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'creditor_name': 'creditor_name',
            'currency': 'currency',
            'debtor_account_number': 'debtor_account_number',
            'debtor_name': 'debtor_name',
            'debtor_routing_number': 'debtor_routing_number',
            'remittance_information': 'remittance_information',
            'transaction_identification': 'transaction_identification'
        }

        self._amount = amount
        self._creditor_name = creditor_name
        self._currency = currency
        self._debtor_account_number = debtor_account_number
        self._debtor_name = debtor_name
        self._debtor_routing_number = debtor_routing_number
        self._remittance_information = remittance_information
        self._transaction_identification = transaction_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundRealTimePaymentsTransferConfirmation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Inbound_Real_Time_Payments_Transfer_Confirmation of this InboundRealTimePaymentsTransferConfirmation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InboundRealTimePaymentsTransferConfirmation.

        The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.

        :return: The amount of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InboundRealTimePaymentsTransferConfirmation.

        The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.

        :param amount: The amount of this InboundRealTimePaymentsTransferConfirmation.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def creditor_name(self):
        """Gets the creditor_name of this InboundRealTimePaymentsTransferConfirmation.

        The name the sender of the transfer specified as the recipient of the transfer.

        :return: The creditor_name of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this InboundRealTimePaymentsTransferConfirmation.

        The name the sender of the transfer specified as the recipient of the transfer.

        :param creditor_name: The creditor_name of this InboundRealTimePaymentsTransferConfirmation.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")

        self._creditor_name = creditor_name

    @property
    def currency(self):
        """Gets the currency of this InboundRealTimePaymentsTransferConfirmation.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real Time Payments transfer.

        :return: The currency of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InboundRealTimePaymentsTransferConfirmation.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real Time Payments transfer.

        :param currency: The currency of this InboundRealTimePaymentsTransferConfirmation.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def debtor_account_number(self):
        """Gets the debtor_account_number of this InboundRealTimePaymentsTransferConfirmation.

        The account number of the account that sent the transfer.

        :return: The debtor_account_number of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._debtor_account_number

    @debtor_account_number.setter
    def debtor_account_number(self, debtor_account_number):
        """Sets the debtor_account_number of this InboundRealTimePaymentsTransferConfirmation.

        The account number of the account that sent the transfer.

        :param debtor_account_number: The debtor_account_number of this InboundRealTimePaymentsTransferConfirmation.
        :type debtor_account_number: str
        """
        if debtor_account_number is None:
            raise ValueError("Invalid value for `debtor_account_number`, must not be `None`")

        self._debtor_account_number = debtor_account_number

    @property
    def debtor_name(self):
        """Gets the debtor_name of this InboundRealTimePaymentsTransferConfirmation.

        The name provided by the sender of the transfer.

        :return: The debtor_name of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this InboundRealTimePaymentsTransferConfirmation.

        The name provided by the sender of the transfer.

        :param debtor_name: The debtor_name of this InboundRealTimePaymentsTransferConfirmation.
        :type debtor_name: str
        """
        if debtor_name is None:
            raise ValueError("Invalid value for `debtor_name`, must not be `None`")

        self._debtor_name = debtor_name

    @property
    def debtor_routing_number(self):
        """Gets the debtor_routing_number of this InboundRealTimePaymentsTransferConfirmation.

        The routing number of the account that sent the transfer.

        :return: The debtor_routing_number of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._debtor_routing_number

    @debtor_routing_number.setter
    def debtor_routing_number(self, debtor_routing_number):
        """Sets the debtor_routing_number of this InboundRealTimePaymentsTransferConfirmation.

        The routing number of the account that sent the transfer.

        :param debtor_routing_number: The debtor_routing_number of this InboundRealTimePaymentsTransferConfirmation.
        :type debtor_routing_number: str
        """
        if debtor_routing_number is None:
            raise ValueError("Invalid value for `debtor_routing_number`, must not be `None`")

        self._debtor_routing_number = debtor_routing_number

    @property
    def remittance_information(self):
        """Gets the remittance_information of this InboundRealTimePaymentsTransferConfirmation.

        Additional information included with the transfer.

        :return: The remittance_information of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this InboundRealTimePaymentsTransferConfirmation.

        Additional information included with the transfer.

        :param remittance_information: The remittance_information of this InboundRealTimePaymentsTransferConfirmation.
        :type remittance_information: str
        """
        if remittance_information is None:
            raise ValueError("Invalid value for `remittance_information`, must not be `None`")

        self._remittance_information = remittance_information

    @property
    def transaction_identification(self):
        """Gets the transaction_identification of this InboundRealTimePaymentsTransferConfirmation.

        The Real Time Payments network identification of the transfer

        :return: The transaction_identification of this InboundRealTimePaymentsTransferConfirmation.
        :rtype: str
        """
        return self._transaction_identification

    @transaction_identification.setter
    def transaction_identification(self, transaction_identification):
        """Sets the transaction_identification of this InboundRealTimePaymentsTransferConfirmation.

        The Real Time Payments network identification of the transfer

        :param transaction_identification: The transaction_identification of this InboundRealTimePaymentsTransferConfirmation.
        :type transaction_identification: str
        """
        if transaction_identification is None:
            raise ValueError("Invalid value for `transaction_identification`, must not be `None`")

        self._transaction_identification = transaction_identification
