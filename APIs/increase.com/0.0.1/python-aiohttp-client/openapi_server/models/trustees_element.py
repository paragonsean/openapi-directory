# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.individual4 import Individual4
from openapi_server import util


class TrusteesElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, individual: Individual4=None, structure: str=None):
        """TrusteesElement - a model defined in OpenAPI

        :param individual: The individual of this TrusteesElement.
        :param structure: The structure of this TrusteesElement.
        """
        self.openapi_types = {
            'individual': Individual4,
            'structure': str
        }

        self.attribute_map = {
            'individual': 'individual',
            'structure': 'structure'
        }

        self._individual = individual
        self._structure = structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrusteesElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trustees_Element of this TrusteesElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def individual(self):
        """Gets the individual of this TrusteesElement.


        :return: The individual of this TrusteesElement.
        :rtype: Individual4
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this TrusteesElement.


        :param individual: The individual of this TrusteesElement.
        :type individual: Individual4
        """
        if individual is None:
            raise ValueError("Invalid value for `individual`, must not be `None`")

        self._individual = individual

    @property
    def structure(self):
        """Gets the structure of this TrusteesElement.

        The structure of the trustee. Will always be equal to `individual`.

        :return: The structure of this TrusteesElement.
        :rtype: str
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this TrusteesElement.

        The structure of the trustee. Will always be equal to `individual`.

        :param structure: The structure of this TrusteesElement.
        :type structure: str
        """
        allowed_values = ["individual"]  # noqa: E501
        if structure not in allowed_values:
            raise ValueError(
                "Invalid value for `structure` ({0}), must be one of {1}"
                .format(structure, allowed_values)
            )

        self._structure = structure
