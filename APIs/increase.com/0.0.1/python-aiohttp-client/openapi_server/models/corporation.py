# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.beneficial_owners_element import BeneficialOwnersElement
from openapi_server import util


class Corporation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, beneficial_owners: List[BeneficialOwnersElement]=None, incorporation_state: str=None, name: str=None, tax_identifier: str=None, website: str=None):
        """Corporation - a model defined in OpenAPI

        :param address: The address of this Corporation.
        :param beneficial_owners: The beneficial_owners of this Corporation.
        :param incorporation_state: The incorporation_state of this Corporation.
        :param name: The name of this Corporation.
        :param tax_identifier: The tax_identifier of this Corporation.
        :param website: The website of this Corporation.
        """
        self.openapi_types = {
            'address': Address,
            'beneficial_owners': List[BeneficialOwnersElement],
            'incorporation_state': str,
            'name': str,
            'tax_identifier': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'beneficial_owners': 'beneficial_owners',
            'incorporation_state': 'incorporation_state',
            'name': 'name',
            'tax_identifier': 'tax_identifier',
            'website': 'website'
        }

        self._address = address
        self._beneficial_owners = beneficial_owners
        self._incorporation_state = incorporation_state
        self._name = name
        self._tax_identifier = tax_identifier
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Corporation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Corporation of this Corporation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Corporation.


        :return: The address of this Corporation.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Corporation.


        :param address: The address of this Corporation.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def beneficial_owners(self):
        """Gets the beneficial_owners of this Corporation.

        The identifying details of anyone controlling or owning 25% or more of the corporation.

        :return: The beneficial_owners of this Corporation.
        :rtype: List[BeneficialOwnersElement]
        """
        return self._beneficial_owners

    @beneficial_owners.setter
    def beneficial_owners(self, beneficial_owners):
        """Sets the beneficial_owners of this Corporation.

        The identifying details of anyone controlling or owning 25% or more of the corporation.

        :param beneficial_owners: The beneficial_owners of this Corporation.
        :type beneficial_owners: List[BeneficialOwnersElement]
        """
        if beneficial_owners is None:
            raise ValueError("Invalid value for `beneficial_owners`, must not be `None`")

        self._beneficial_owners = beneficial_owners

    @property
    def incorporation_state(self):
        """Gets the incorporation_state of this Corporation.

        The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.

        :return: The incorporation_state of this Corporation.
        :rtype: str
        """
        return self._incorporation_state

    @incorporation_state.setter
    def incorporation_state(self, incorporation_state):
        """Sets the incorporation_state of this Corporation.

        The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.

        :param incorporation_state: The incorporation_state of this Corporation.
        :type incorporation_state: str
        """
        if incorporation_state is None:
            raise ValueError("Invalid value for `incorporation_state`, must not be `None`")

        self._incorporation_state = incorporation_state

    @property
    def name(self):
        """Gets the name of this Corporation.

        The legal name of the corporation.

        :return: The name of this Corporation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Corporation.

        The legal name of the corporation.

        :param name: The name of this Corporation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tax_identifier(self):
        """Gets the tax_identifier of this Corporation.

        The Employer Identification Number (EIN) for the corporation.

        :return: The tax_identifier of this Corporation.
        :rtype: str
        """
        return self._tax_identifier

    @tax_identifier.setter
    def tax_identifier(self, tax_identifier):
        """Sets the tax_identifier of this Corporation.

        The Employer Identification Number (EIN) for the corporation.

        :param tax_identifier: The tax_identifier of this Corporation.
        :type tax_identifier: str
        """
        if tax_identifier is None:
            raise ValueError("Invalid value for `tax_identifier`, must not be `None`")

        self._tax_identifier = tax_identifier

    @property
    def website(self):
        """Gets the website of this Corporation.

        The website of the corporation.

        :return: The website of this Corporation.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Corporation.

        The website of the corporation.

        :param website: The website of this Corporation.
        :type website: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")

        self._website = website
