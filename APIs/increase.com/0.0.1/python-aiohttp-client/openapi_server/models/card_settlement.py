# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardSettlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, card_authorization: str=None, currency: str=None, id: str=None, merchant_acceptor_id: str=None, merchant_category_code: str=None, merchant_city: str=None, merchant_country: str=None, merchant_name: str=None, merchant_state: str=None, pending_transaction_id: str=None, presentment_amount: int=None, presentment_currency: str=None, type: str=None):
        """CardSettlement - a model defined in OpenAPI

        :param amount: The amount of this CardSettlement.
        :param card_authorization: The card_authorization of this CardSettlement.
        :param currency: The currency of this CardSettlement.
        :param id: The id of this CardSettlement.
        :param merchant_acceptor_id: The merchant_acceptor_id of this CardSettlement.
        :param merchant_category_code: The merchant_category_code of this CardSettlement.
        :param merchant_city: The merchant_city of this CardSettlement.
        :param merchant_country: The merchant_country of this CardSettlement.
        :param merchant_name: The merchant_name of this CardSettlement.
        :param merchant_state: The merchant_state of this CardSettlement.
        :param pending_transaction_id: The pending_transaction_id of this CardSettlement.
        :param presentment_amount: The presentment_amount of this CardSettlement.
        :param presentment_currency: The presentment_currency of this CardSettlement.
        :param type: The type of this CardSettlement.
        """
        self.openapi_types = {
            'amount': int,
            'card_authorization': str,
            'currency': str,
            'id': str,
            'merchant_acceptor_id': str,
            'merchant_category_code': str,
            'merchant_city': str,
            'merchant_country': str,
            'merchant_name': str,
            'merchant_state': str,
            'pending_transaction_id': str,
            'presentment_amount': int,
            'presentment_currency': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'card_authorization': 'card_authorization',
            'currency': 'currency',
            'id': 'id',
            'merchant_acceptor_id': 'merchant_acceptor_id',
            'merchant_category_code': 'merchant_category_code',
            'merchant_city': 'merchant_city',
            'merchant_country': 'merchant_country',
            'merchant_name': 'merchant_name',
            'merchant_state': 'merchant_state',
            'pending_transaction_id': 'pending_transaction_id',
            'presentment_amount': 'presentment_amount',
            'presentment_currency': 'presentment_currency',
            'type': 'type'
        }

        self._amount = amount
        self._card_authorization = card_authorization
        self._currency = currency
        self._id = id
        self._merchant_acceptor_id = merchant_acceptor_id
        self._merchant_category_code = merchant_category_code
        self._merchant_city = merchant_city
        self._merchant_country = merchant_country
        self._merchant_name = merchant_name
        self._merchant_state = merchant_state
        self._pending_transaction_id = pending_transaction_id
        self._presentment_amount = presentment_amount
        self._presentment_currency = presentment_currency
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardSettlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card_Settlement of this CardSettlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CardSettlement.

        The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.

        :return: The amount of this CardSettlement.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CardSettlement.

        The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.

        :param amount: The amount of this CardSettlement.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def card_authorization(self):
        """Gets the card_authorization of this CardSettlement.

        The Card Authorization that was created prior to this Card Settlement, if on exists.

        :return: The card_authorization of this CardSettlement.
        :rtype: str
        """
        return self._card_authorization

    @card_authorization.setter
    def card_authorization(self, card_authorization):
        """Sets the card_authorization of this CardSettlement.

        The Card Authorization that was created prior to this Card Settlement, if on exists.

        :param card_authorization: The card_authorization of this CardSettlement.
        :type card_authorization: str
        """
        if card_authorization is None:
            raise ValueError("Invalid value for `card_authorization`, must not be `None`")

        self._card_authorization = card_authorization

    @property
    def currency(self):
        """Gets the currency of this CardSettlement.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.

        :return: The currency of this CardSettlement.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardSettlement.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.

        :param currency: The currency of this CardSettlement.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this CardSettlement.

        The Card Settlement identifier.

        :return: The id of this CardSettlement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardSettlement.

        The Card Settlement identifier.

        :param id: The id of this CardSettlement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def merchant_acceptor_id(self):
        """Gets the merchant_acceptor_id of this CardSettlement.

        The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.

        :return: The merchant_acceptor_id of this CardSettlement.
        :rtype: str
        """
        return self._merchant_acceptor_id

    @merchant_acceptor_id.setter
    def merchant_acceptor_id(self, merchant_acceptor_id):
        """Sets the merchant_acceptor_id of this CardSettlement.

        The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.

        :param merchant_acceptor_id: The merchant_acceptor_id of this CardSettlement.
        :type merchant_acceptor_id: str
        """
        if merchant_acceptor_id is None:
            raise ValueError("Invalid value for `merchant_acceptor_id`, must not be `None`")

        self._merchant_acceptor_id = merchant_acceptor_id

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this CardSettlement.

        The 4-digit MCC describing the merchant's business.

        :return: The merchant_category_code of this CardSettlement.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this CardSettlement.

        The 4-digit MCC describing the merchant's business.

        :param merchant_category_code: The merchant_category_code of this CardSettlement.
        :type merchant_category_code: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_city(self):
        """Gets the merchant_city of this CardSettlement.

        The city the merchant resides in.

        :return: The merchant_city of this CardSettlement.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """Sets the merchant_city of this CardSettlement.

        The city the merchant resides in.

        :param merchant_city: The merchant_city of this CardSettlement.
        :type merchant_city: str
        """
        if merchant_city is None:
            raise ValueError("Invalid value for `merchant_city`, must not be `None`")

        self._merchant_city = merchant_city

    @property
    def merchant_country(self):
        """Gets the merchant_country of this CardSettlement.

        The country the merchant resides in.

        :return: The merchant_country of this CardSettlement.
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this CardSettlement.

        The country the merchant resides in.

        :param merchant_country: The merchant_country of this CardSettlement.
        :type merchant_country: str
        """
        if merchant_country is None:
            raise ValueError("Invalid value for `merchant_country`, must not be `None`")

        self._merchant_country = merchant_country

    @property
    def merchant_name(self):
        """Gets the merchant_name of this CardSettlement.

        The name of the merchant.

        :return: The merchant_name of this CardSettlement.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this CardSettlement.

        The name of the merchant.

        :param merchant_name: The merchant_name of this CardSettlement.
        :type merchant_name: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def merchant_state(self):
        """Gets the merchant_state of this CardSettlement.

        The state the merchant resides in.

        :return: The merchant_state of this CardSettlement.
        :rtype: str
        """
        return self._merchant_state

    @merchant_state.setter
    def merchant_state(self, merchant_state):
        """Sets the merchant_state of this CardSettlement.

        The state the merchant resides in.

        :param merchant_state: The merchant_state of this CardSettlement.
        :type merchant_state: str
        """
        if merchant_state is None:
            raise ValueError("Invalid value for `merchant_state`, must not be `None`")

        self._merchant_state = merchant_state

    @property
    def pending_transaction_id(self):
        """Gets the pending_transaction_id of this CardSettlement.

        The identifier of the Pending Transaction associated with this Transaction.

        :return: The pending_transaction_id of this CardSettlement.
        :rtype: str
        """
        return self._pending_transaction_id

    @pending_transaction_id.setter
    def pending_transaction_id(self, pending_transaction_id):
        """Sets the pending_transaction_id of this CardSettlement.

        The identifier of the Pending Transaction associated with this Transaction.

        :param pending_transaction_id: The pending_transaction_id of this CardSettlement.
        :type pending_transaction_id: str
        """
        if pending_transaction_id is None:
            raise ValueError("Invalid value for `pending_transaction_id`, must not be `None`")

        self._pending_transaction_id = pending_transaction_id

    @property
    def presentment_amount(self):
        """Gets the presentment_amount of this CardSettlement.

        The amount in the minor unit of the transaction's presentment currency.

        :return: The presentment_amount of this CardSettlement.
        :rtype: int
        """
        return self._presentment_amount

    @presentment_amount.setter
    def presentment_amount(self, presentment_amount):
        """Sets the presentment_amount of this CardSettlement.

        The amount in the minor unit of the transaction's presentment currency.

        :param presentment_amount: The presentment_amount of this CardSettlement.
        :type presentment_amount: int
        """
        if presentment_amount is None:
            raise ValueError("Invalid value for `presentment_amount`, must not be `None`")

        self._presentment_amount = presentment_amount

    @property
    def presentment_currency(self):
        """Gets the presentment_currency of this CardSettlement.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.

        :return: The presentment_currency of this CardSettlement.
        :rtype: str
        """
        return self._presentment_currency

    @presentment_currency.setter
    def presentment_currency(self, presentment_currency):
        """Sets the presentment_currency of this CardSettlement.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.

        :param presentment_currency: The presentment_currency of this CardSettlement.
        :type presentment_currency: str
        """
        if presentment_currency is None:
            raise ValueError("Invalid value for `presentment_currency`, must not be `None`")

        self._presentment_currency = presentment_currency

    @property
    def type(self):
        """Gets the type of this CardSettlement.

        A constant representing the object's type. For this resource it will always be `card_settlement`.

        :return: The type of this CardSettlement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CardSettlement.

        A constant representing the object's type. For this resource it will always be `card_settlement`.

        :param type: The type of this CardSettlement.
        :type type: str
        """
        allowed_values = ["card_settlement"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
