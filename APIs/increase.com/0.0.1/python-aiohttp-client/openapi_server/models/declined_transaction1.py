# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.declined_transaction_source import DeclinedTransactionSource
from openapi_server import util


class DeclinedTransaction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None, created_at: datetime=None, currency: str=None, description: str=None, id: str=None, route_id: str=None, route_type: str=None, source: DeclinedTransactionSource=None, type: str=None):
        """DeclinedTransaction1 - a model defined in OpenAPI

        :param account_id: The account_id of this DeclinedTransaction1.
        :param amount: The amount of this DeclinedTransaction1.
        :param created_at: The created_at of this DeclinedTransaction1.
        :param currency: The currency of this DeclinedTransaction1.
        :param description: The description of this DeclinedTransaction1.
        :param id: The id of this DeclinedTransaction1.
        :param route_id: The route_id of this DeclinedTransaction1.
        :param route_type: The route_type of this DeclinedTransaction1.
        :param source: The source of this DeclinedTransaction1.
        :param type: The type of this DeclinedTransaction1.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int,
            'created_at': datetime,
            'currency': str,
            'description': str,
            'id': str,
            'route_id': str,
            'route_type': str,
            'source': DeclinedTransactionSource,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount',
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'id': 'id',
            'route_id': 'route_id',
            'route_type': 'route_type',
            'source': 'source',
            'type': 'type'
        }

        self._account_id = account_id
        self._amount = amount
        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._id = id
        self._route_id = route_id
        self._route_type = route_type
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeclinedTransaction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Declined_Transaction_1 of this DeclinedTransaction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DeclinedTransaction1.

        The identifier for the Account the Declined Transaction belongs to.

        :return: The account_id of this DeclinedTransaction1.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeclinedTransaction1.

        The identifier for the Account the Declined Transaction belongs to.

        :param account_id: The account_id of this DeclinedTransaction1.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this DeclinedTransaction1.

        The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.

        :return: The amount of this DeclinedTransaction1.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DeclinedTransaction1.

        The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.

        :param amount: The amount of this DeclinedTransaction1.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this DeclinedTransaction1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.

        :return: The created_at of this DeclinedTransaction1.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeclinedTransaction1.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.

        :param created_at: The created_at of this DeclinedTransaction1.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this DeclinedTransaction1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.

        :return: The currency of this DeclinedTransaction1.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DeclinedTransaction1.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.

        :param currency: The currency of this DeclinedTransaction1.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this DeclinedTransaction1.

        This is the description the vendor provides.

        :return: The description of this DeclinedTransaction1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeclinedTransaction1.

        This is the description the vendor provides.

        :param description: The description of this DeclinedTransaction1.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this DeclinedTransaction1.

        The Declined Transaction identifier.

        :return: The id of this DeclinedTransaction1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeclinedTransaction1.

        The Declined Transaction identifier.

        :param id: The id of this DeclinedTransaction1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def route_id(self):
        """Gets the route_id of this DeclinedTransaction1.

        The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.

        :return: The route_id of this DeclinedTransaction1.
        :rtype: str
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this DeclinedTransaction1.

        The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.

        :param route_id: The route_id of this DeclinedTransaction1.
        :type route_id: str
        """
        if route_id is None:
            raise ValueError("Invalid value for `route_id`, must not be `None`")

        self._route_id = route_id

    @property
    def route_type(self):
        """Gets the route_type of this DeclinedTransaction1.

        The type of the route this Declined Transaction came through.

        :return: The route_type of this DeclinedTransaction1.
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this DeclinedTransaction1.

        The type of the route this Declined Transaction came through.

        :param route_type: The route_type of this DeclinedTransaction1.
        :type route_type: str
        """
        allowed_values = [None,"account_number", "card"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def source(self):
        """Gets the source of this DeclinedTransaction1.


        :return: The source of this DeclinedTransaction1.
        :rtype: DeclinedTransactionSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DeclinedTransaction1.


        :param source: The source of this DeclinedTransaction1.
        :type source: DeclinedTransactionSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this DeclinedTransaction1.

        A constant representing the object's type. For this resource it will always be `declined_transaction`.

        :return: The type of this DeclinedTransaction1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeclinedTransaction1.

        A constant representing the object's type. For this resource it will always be `declined_transaction`.

        :param type: The type of this DeclinedTransaction1.
        :type type: str
        """
        allowed_values = ["declined_transaction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
