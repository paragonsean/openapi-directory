# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, created_at: datetime=None, description: str=None, funding: str=None, id: str=None, routing_number: str=None, status: str=None, type: str=None, verification_status: str=None):
        """ExternalAccount - a model defined in OpenAPI

        :param account_number: The account_number of this ExternalAccount.
        :param created_at: The created_at of this ExternalAccount.
        :param description: The description of this ExternalAccount.
        :param funding: The funding of this ExternalAccount.
        :param id: The id of this ExternalAccount.
        :param routing_number: The routing_number of this ExternalAccount.
        :param status: The status of this ExternalAccount.
        :param type: The type of this ExternalAccount.
        :param verification_status: The verification_status of this ExternalAccount.
        """
        self.openapi_types = {
            'account_number': str,
            'created_at': datetime,
            'description': str,
            'funding': str,
            'id': str,
            'routing_number': str,
            'status': str,
            'type': str,
            'verification_status': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'created_at': 'created_at',
            'description': 'description',
            'funding': 'funding',
            'id': 'id',
            'routing_number': 'routing_number',
            'status': 'status',
            'type': 'type',
            'verification_status': 'verification_status'
        }

        self._account_number = account_number
        self._created_at = created_at
        self._description = description
        self._funding = funding
        self._id = id
        self._routing_number = routing_number
        self._status = status
        self._type = type
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The external_account of this ExternalAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ExternalAccount.

        The destination account number.

        :return: The account_number of this ExternalAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ExternalAccount.

        The destination account number.

        :param account_number: The account_number of this ExternalAccount.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def created_at(self):
        """Gets the created_at of this ExternalAccount.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.

        :return: The created_at of this ExternalAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExternalAccount.

        The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.

        :param created_at: The created_at of this ExternalAccount.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ExternalAccount.

        The External Account's description for display purposes.

        :return: The description of this ExternalAccount.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalAccount.

        The External Account's description for display purposes.

        :param description: The description of this ExternalAccount.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this ExternalAccount.

        The type of the account to which the transfer will be sent.

        :return: The funding of this ExternalAccount.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ExternalAccount.

        The type of the account to which the transfer will be sent.

        :param funding: The funding of this ExternalAccount.
        :type funding: str
        """
        allowed_values = ["checking", "savings", "other"]  # noqa: E501
        if funding not in allowed_values:
            raise ValueError(
                "Invalid value for `funding` ({0}), must be one of {1}"
                .format(funding, allowed_values)
            )

        self._funding = funding

    @property
    def id(self):
        """Gets the id of this ExternalAccount.

        The External Account's identifier.

        :return: The id of this ExternalAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalAccount.

        The External Account's identifier.

        :param id: The id of this ExternalAccount.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def routing_number(self):
        """Gets the routing_number of this ExternalAccount.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :return: The routing_number of this ExternalAccount.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this ExternalAccount.

        The American Bankers' Association (ABA) Routing Transit Number (RTN).

        :param routing_number: The routing_number of this ExternalAccount.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")

        self._routing_number = routing_number

    @property
    def status(self):
        """Gets the status of this ExternalAccount.

        The External Account's status.

        :return: The status of this ExternalAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExternalAccount.

        The External Account's status.

        :param status: The status of this ExternalAccount.
        :type status: str
        """
        allowed_values = ["active", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this ExternalAccount.

        A constant representing the object's type. For this resource it will always be `external_account`.

        :return: The type of this ExternalAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalAccount.

        A constant representing the object's type. For this resource it will always be `external_account`.

        :param type: The type of this ExternalAccount.
        :type type: str
        """
        allowed_values = ["external_account"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification_status(self):
        """Gets the verification_status of this ExternalAccount.

        If you have verified ownership of the External Account.

        :return: The verification_status of this ExternalAccount.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this ExternalAccount.

        If you have verified ownership of the External Account.

        :param verification_status: The verification_status of this ExternalAccount.
        :type verification_status: str
        """
        allowed_values = ["unverified", "pending", "verified"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status
