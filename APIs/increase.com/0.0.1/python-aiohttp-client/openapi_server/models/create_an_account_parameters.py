# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAnAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, informational_entity_id: str=None, name: str=None, program_id: str=None):
        """CreateAnAccountParameters - a model defined in OpenAPI

        :param entity_id: The entity_id of this CreateAnAccountParameters.
        :param informational_entity_id: The informational_entity_id of this CreateAnAccountParameters.
        :param name: The name of this CreateAnAccountParameters.
        :param program_id: The program_id of this CreateAnAccountParameters.
        """
        self.openapi_types = {
            'entity_id': str,
            'informational_entity_id': str,
            'name': str,
            'program_id': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'informational_entity_id': 'informational_entity_id',
            'name': 'name',
            'program_id': 'program_id'
        }

        self._entity_id = entity_id
        self._informational_entity_id = informational_entity_id
        self._name = name
        self._program_id = program_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_an_account_parameters of this CreateAnAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this CreateAnAccountParameters.

        The identifier for the Entity that will own the Account.

        :return: The entity_id of this CreateAnAccountParameters.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this CreateAnAccountParameters.

        The identifier for the Entity that will own the Account.

        :param entity_id: The entity_id of this CreateAnAccountParameters.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def informational_entity_id(self):
        """Gets the informational_entity_id of this CreateAnAccountParameters.

        The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`.

        :return: The informational_entity_id of this CreateAnAccountParameters.
        :rtype: str
        """
        return self._informational_entity_id

    @informational_entity_id.setter
    def informational_entity_id(self, informational_entity_id):
        """Sets the informational_entity_id of this CreateAnAccountParameters.

        The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`.

        :param informational_entity_id: The informational_entity_id of this CreateAnAccountParameters.
        :type informational_entity_id: str
        """

        self._informational_entity_id = informational_entity_id

    @property
    def name(self):
        """Gets the name of this CreateAnAccountParameters.

        The name you choose for the Account.

        :return: The name of this CreateAnAccountParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnAccountParameters.

        The name you choose for the Account.

        :param name: The name of this CreateAnAccountParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def program_id(self):
        """Gets the program_id of this CreateAnAccountParameters.

        The identifier for the Program that this Account falls under.

        :return: The program_id of this CreateAnAccountParameters.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this CreateAnAccountParameters.

        The identifier for the Program that this Account falls under.

        :param program_id: The program_id of this CreateAnAccountParameters.
        :type program_id: str
        """

        self._program_id = program_id
