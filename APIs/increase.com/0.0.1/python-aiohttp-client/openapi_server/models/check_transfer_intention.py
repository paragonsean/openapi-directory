# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckTransferIntention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_city: str=None, address_line1: str=None, address_line2: str=None, address_state: str=None, address_zip: str=None, amount: int=None, currency: str=None, recipient_name: str=None, transfer_id: str=None):
        """CheckTransferIntention - a model defined in OpenAPI

        :param address_city: The address_city of this CheckTransferIntention.
        :param address_line1: The address_line1 of this CheckTransferIntention.
        :param address_line2: The address_line2 of this CheckTransferIntention.
        :param address_state: The address_state of this CheckTransferIntention.
        :param address_zip: The address_zip of this CheckTransferIntention.
        :param amount: The amount of this CheckTransferIntention.
        :param currency: The currency of this CheckTransferIntention.
        :param recipient_name: The recipient_name of this CheckTransferIntention.
        :param transfer_id: The transfer_id of this CheckTransferIntention.
        """
        self.openapi_types = {
            'address_city': str,
            'address_line1': str,
            'address_line2': str,
            'address_state': str,
            'address_zip': str,
            'amount': int,
            'currency': str,
            'recipient_name': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'address_city': 'address_city',
            'address_line1': 'address_line1',
            'address_line2': 'address_line2',
            'address_state': 'address_state',
            'address_zip': 'address_zip',
            'amount': 'amount',
            'currency': 'currency',
            'recipient_name': 'recipient_name',
            'transfer_id': 'transfer_id'
        }

        self._address_city = address_city
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_state = address_state
        self._address_zip = address_zip
        self._amount = amount
        self._currency = currency
        self._recipient_name = recipient_name
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckTransferIntention':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check_Transfer_Intention of this CheckTransferIntention.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_city(self):
        """Gets the address_city of this CheckTransferIntention.

        The city of the check's destination.

        :return: The address_city of this CheckTransferIntention.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CheckTransferIntention.

        The city of the check's destination.

        :param address_city: The address_city of this CheckTransferIntention.
        :type address_city: str
        """
        if address_city is None:
            raise ValueError("Invalid value for `address_city`, must not be `None`")

        self._address_city = address_city

    @property
    def address_line1(self):
        """Gets the address_line1 of this CheckTransferIntention.

        The street address of the check's destination.

        :return: The address_line1 of this CheckTransferIntention.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CheckTransferIntention.

        The street address of the check's destination.

        :param address_line1: The address_line1 of this CheckTransferIntention.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CheckTransferIntention.

        The second line of the address of the check's destination.

        :return: The address_line2 of this CheckTransferIntention.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CheckTransferIntention.

        The second line of the address of the check's destination.

        :param address_line2: The address_line2 of this CheckTransferIntention.
        :type address_line2: str
        """
        if address_line2 is None:
            raise ValueError("Invalid value for `address_line2`, must not be `None`")

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """Gets the address_state of this CheckTransferIntention.

        The state of the check's destination.

        :return: The address_state of this CheckTransferIntention.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CheckTransferIntention.

        The state of the check's destination.

        :param address_state: The address_state of this CheckTransferIntention.
        :type address_state: str
        """
        if address_state is None:
            raise ValueError("Invalid value for `address_state`, must not be `None`")

        self._address_state = address_state

    @property
    def address_zip(self):
        """Gets the address_zip of this CheckTransferIntention.

        The postal code of the check's destination.

        :return: The address_zip of this CheckTransferIntention.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CheckTransferIntention.

        The postal code of the check's destination.

        :param address_zip: The address_zip of this CheckTransferIntention.
        :type address_zip: str
        """
        if address_zip is None:
            raise ValueError("Invalid value for `address_zip`, must not be `None`")

        self._address_zip = address_zip

    @property
    def amount(self):
        """Gets the amount of this CheckTransferIntention.

        The transfer amount in USD cents.

        :return: The amount of this CheckTransferIntention.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckTransferIntention.

        The transfer amount in USD cents.

        :param amount: The amount of this CheckTransferIntention.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CheckTransferIntention.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.

        :return: The currency of this CheckTransferIntention.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CheckTransferIntention.

        The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.

        :param currency: The currency of this CheckTransferIntention.
        :type currency: str
        """
        allowed_values = ["CAD", "CHF", "EUR", "GBP", "JPY", "USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def recipient_name(self):
        """Gets the recipient_name of this CheckTransferIntention.

        The name that will be printed on the check.

        :return: The recipient_name of this CheckTransferIntention.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this CheckTransferIntention.

        The name that will be printed on the check.

        :param recipient_name: The recipient_name of this CheckTransferIntention.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def transfer_id(self):
        """Gets the transfer_id of this CheckTransferIntention.

        The identifier of the Check Transfer with which this is associated.

        :return: The transfer_id of this CheckTransferIntention.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this CheckTransferIntention.

        The identifier of the Check Transfer with which this is associated.

        :param transfer_id: The transfer_id of this CheckTransferIntention.
        :type transfer_id: str
        """
        if transfer_id is None:
            raise ValueError("Invalid value for `transfer_id`, must not be `None`")

        self._transfer_id = transfer_id
