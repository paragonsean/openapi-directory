# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulateAnInterestPaymentToYourAccountParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, amount: int=None):
        """SimulateAnInterestPaymentToYourAccountParameters - a model defined in OpenAPI

        :param account_id: The account_id of this SimulateAnInterestPaymentToYourAccountParameters.
        :param amount: The amount of this SimulateAnInterestPaymentToYourAccountParameters.
        """
        self.openapi_types = {
            'account_id': str,
            'amount': int
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'amount': 'amount'
        }

        self._account_id = account_id
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulateAnInterestPaymentToYourAccountParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simulate_an_interest_payment_to_your_account_parameters of this SimulateAnInterestPaymentToYourAccountParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this SimulateAnInterestPaymentToYourAccountParameters.

        The identifier of the Account Number the Interest Payment is for.

        :return: The account_id of this SimulateAnInterestPaymentToYourAccountParameters.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SimulateAnInterestPaymentToYourAccountParameters.

        The identifier of the Account Number the Interest Payment is for.

        :param account_id: The account_id of this SimulateAnInterestPaymentToYourAccountParameters.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this SimulateAnInterestPaymentToYourAccountParameters.

        The interest amount in cents. Must be positive.

        :return: The amount of this SimulateAnInterestPaymentToYourAccountParameters.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SimulateAnInterestPaymentToYourAccountParameters.

        The interest amount in cents. Must be positive.

        :param amount: The amount of this SimulateAnInterestPaymentToYourAccountParameters.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount
