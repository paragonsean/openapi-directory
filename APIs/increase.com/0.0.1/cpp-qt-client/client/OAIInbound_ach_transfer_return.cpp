/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInbound_ach_transfer_return.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInbound_ach_transfer_return::OAIInbound_ach_transfer_return(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInbound_ach_transfer_return::OAIInbound_ach_transfer_return() {
    this->initializeModel();
}

OAIInbound_ach_transfer_return::~OAIInbound_ach_transfer_return() {}

void OAIInbound_ach_transfer_return::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbound_ach_transfer_transaction_id_isSet = false;
    m_inbound_ach_transfer_transaction_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submission_isSet = false;
    m_submission_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInbound_ach_transfer_return::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInbound_ach_transfer_return::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inbound_ach_transfer_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_inbound_ach_transfer_transaction_id, json[QString("inbound_ach_transfer_transaction_id")]);
    m_inbound_ach_transfer_transaction_id_isSet = !json[QString("inbound_ach_transfer_transaction_id")].isNull() && m_inbound_ach_transfer_transaction_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submission_isValid = ::OpenAPI::fromJsonValue(m_submission, json[QString("submission")]);
    m_submission_isSet = !json[QString("submission")].isNull() && m_submission_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInbound_ach_transfer_return::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInbound_ach_transfer_return::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbound_ach_transfer_transaction_id_isSet) {
        obj.insert(QString("inbound_ach_transfer_transaction_id"), ::OpenAPI::toJsonValue(m_inbound_ach_transfer_transaction_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submission.isSet()) {
        obj.insert(QString("submission"), ::OpenAPI::toJsonValue(m_submission));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInbound_ach_transfer_return::getId() const {
    return m_id;
}
void OAIInbound_ach_transfer_return::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInbound_ach_transfer_return::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInbound_ach_transfer_return::getInboundAchTransferTransactionId() const {
    return m_inbound_ach_transfer_transaction_id;
}
void OAIInbound_ach_transfer_return::setInboundAchTransferTransactionId(const QString &inbound_ach_transfer_transaction_id) {
    m_inbound_ach_transfer_transaction_id = inbound_ach_transfer_transaction_id;
    m_inbound_ach_transfer_transaction_id_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_inbound_ach_transfer_transaction_id_Set() const{
    return m_inbound_ach_transfer_transaction_id_isSet;
}

bool OAIInbound_ach_transfer_return::is_inbound_ach_transfer_transaction_id_Valid() const{
    return m_inbound_ach_transfer_transaction_id_isValid;
}

QString OAIInbound_ach_transfer_return::getReason() const {
    return m_reason;
}
void OAIInbound_ach_transfer_return::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIInbound_ach_transfer_return::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIInbound_ach_transfer_return::getStatus() const {
    return m_status;
}
void OAIInbound_ach_transfer_return::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInbound_ach_transfer_return::is_status_Valid() const{
    return m_status_isValid;
}

OAIInbound_ACH_Transfer_Return_Submission OAIInbound_ach_transfer_return::getSubmission() const {
    return m_submission;
}
void OAIInbound_ach_transfer_return::setSubmission(const OAIInbound_ACH_Transfer_Return_Submission &submission) {
    m_submission = submission;
    m_submission_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_submission_Set() const{
    return m_submission_isSet;
}

bool OAIInbound_ach_transfer_return::is_submission_Valid() const{
    return m_submission_isValid;
}

QString OAIInbound_ach_transfer_return::getTransactionId() const {
    return m_transaction_id;
}
void OAIInbound_ach_transfer_return::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIInbound_ach_transfer_return::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIInbound_ach_transfer_return::getType() const {
    return m_type;
}
void OAIInbound_ach_transfer_return::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInbound_ach_transfer_return::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInbound_ach_transfer_return::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInbound_ach_transfer_return::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_ach_transfer_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInbound_ach_transfer_return::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_inbound_ach_transfer_transaction_id_isValid && m_reason_isValid && m_status_isValid && m_submission_isValid && m_transaction_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
