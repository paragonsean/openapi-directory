/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisa.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisa::OAIVisa(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisa::OAIVisa() {
    this->initializeModel();
}

OAIVisa::~OAIVisa() {}

void OAIVisa::initializeModel() {

    m_electronic_commerce_indicator_isSet = false;
    m_electronic_commerce_indicator_isValid = false;

    m_point_of_service_entry_mode_isSet = false;
    m_point_of_service_entry_mode_isValid = false;
}

void OAIVisa::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisa::fromJsonObject(QJsonObject json) {

    m_electronic_commerce_indicator_isValid = ::OpenAPI::fromJsonValue(m_electronic_commerce_indicator, json[QString("electronic_commerce_indicator")]);
    m_electronic_commerce_indicator_isSet = !json[QString("electronic_commerce_indicator")].isNull() && m_electronic_commerce_indicator_isValid;

    m_point_of_service_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_point_of_service_entry_mode, json[QString("point_of_service_entry_mode")]);
    m_point_of_service_entry_mode_isSet = !json[QString("point_of_service_entry_mode")].isNull() && m_point_of_service_entry_mode_isValid;
}

QString OAIVisa::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisa::asJsonObject() const {
    QJsonObject obj;
    if (m_electronic_commerce_indicator_isSet) {
        obj.insert(QString("electronic_commerce_indicator"), ::OpenAPI::toJsonValue(m_electronic_commerce_indicator));
    }
    if (m_point_of_service_entry_mode_isSet) {
        obj.insert(QString("point_of_service_entry_mode"), ::OpenAPI::toJsonValue(m_point_of_service_entry_mode));
    }
    return obj;
}

QString OAIVisa::getElectronicCommerceIndicator() const {
    return m_electronic_commerce_indicator;
}
void OAIVisa::setElectronicCommerceIndicator(const QString &electronic_commerce_indicator) {
    m_electronic_commerce_indicator = electronic_commerce_indicator;
    m_electronic_commerce_indicator_isSet = true;
}

bool OAIVisa::is_electronic_commerce_indicator_Set() const{
    return m_electronic_commerce_indicator_isSet;
}

bool OAIVisa::is_electronic_commerce_indicator_Valid() const{
    return m_electronic_commerce_indicator_isValid;
}

QString OAIVisa::getPointOfServiceEntryMode() const {
    return m_point_of_service_entry_mode;
}
void OAIVisa::setPointOfServiceEntryMode(const QString &point_of_service_entry_mode) {
    m_point_of_service_entry_mode = point_of_service_entry_mode;
    m_point_of_service_entry_mode_isSet = true;
}

bool OAIVisa::is_point_of_service_entry_mode_Set() const{
    return m_point_of_service_entry_mode_isSet;
}

bool OAIVisa::is_point_of_service_entry_mode_Valid() const{
    return m_point_of_service_entry_mode_isValid;
}

bool OAIVisa::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_electronic_commerce_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_of_service_entry_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisa::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_electronic_commerce_indicator_isValid && m_point_of_service_entry_mode_isValid && true;
}

} // namespace OpenAPI
