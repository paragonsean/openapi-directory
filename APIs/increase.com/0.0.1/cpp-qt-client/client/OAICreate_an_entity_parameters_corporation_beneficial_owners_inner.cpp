/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_an_entity_parameters_corporation_beneficial_owners_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner() {
    this->initializeModel();
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::~OAICreate_an_entity_parameters_corporation_beneficial_owners_inner() {}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::initializeModel() {

    m_company_title_isSet = false;
    m_company_title_isValid = false;

    m_individual_isSet = false;
    m_individual_isValid = false;

    m_prong_isSet = false;
    m_prong_isValid = false;
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::fromJsonObject(QJsonObject json) {

    m_company_title_isValid = ::OpenAPI::fromJsonValue(m_company_title, json[QString("company_title")]);
    m_company_title_isSet = !json[QString("company_title")].isNull() && m_company_title_isValid;

    m_individual_isValid = ::OpenAPI::fromJsonValue(m_individual, json[QString("individual")]);
    m_individual_isSet = !json[QString("individual")].isNull() && m_individual_isValid;

    m_prong_isValid = ::OpenAPI::fromJsonValue(m_prong, json[QString("prong")]);
    m_prong_isSet = !json[QString("prong")].isNull() && m_prong_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_company_title_isSet) {
        obj.insert(QString("company_title"), ::OpenAPI::toJsonValue(m_company_title));
    }
    if (m_individual.isSet()) {
        obj.insert(QString("individual"), ::OpenAPI::toJsonValue(m_individual));
    }
    if (m_prong_isSet) {
        obj.insert(QString("prong"), ::OpenAPI::toJsonValue(m_prong));
    }
    return obj;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::getCompanyTitle() const {
    return m_company_title;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::setCompanyTitle(const QString &company_title) {
    m_company_title = company_title;
    m_company_title_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_company_title_Set() const{
    return m_company_title_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_company_title_Valid() const{
    return m_company_title_isValid;
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::getIndividual() const {
    return m_individual;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::setIndividual(const OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual &individual) {
    m_individual = individual;
    m_individual_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_individual_Set() const{
    return m_individual_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_individual_Valid() const{
    return m_individual_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::getProng() const {
    return m_prong;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::setProng(const QString &prong) {
    m_prong = prong;
    m_prong_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_prong_Set() const{
    return m_prong_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::is_prong_Valid() const{
    return m_prong_isValid;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prong_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_individual_isValid && m_prong_isValid && true;
}

} // namespace OpenAPI
