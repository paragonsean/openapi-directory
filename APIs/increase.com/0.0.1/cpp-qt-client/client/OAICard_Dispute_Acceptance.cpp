/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard_Dispute_Acceptance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard_Dispute_Acceptance::OAICard_Dispute_Acceptance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard_Dispute_Acceptance::OAICard_Dispute_Acceptance() {
    this->initializeModel();
}

OAICard_Dispute_Acceptance::~OAICard_Dispute_Acceptance() {}

void OAICard_Dispute_Acceptance::initializeModel() {

    m_accepted_at_isSet = false;
    m_accepted_at_isValid = false;

    m_card_dispute_id_isSet = false;
    m_card_dispute_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAICard_Dispute_Acceptance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard_Dispute_Acceptance::fromJsonObject(QJsonObject json) {

    m_accepted_at_isValid = ::OpenAPI::fromJsonValue(m_accepted_at, json[QString("accepted_at")]);
    m_accepted_at_isSet = !json[QString("accepted_at")].isNull() && m_accepted_at_isValid;

    m_card_dispute_id_isValid = ::OpenAPI::fromJsonValue(m_card_dispute_id, json[QString("card_dispute_id")]);
    m_card_dispute_id_isSet = !json[QString("card_dispute_id")].isNull() && m_card_dispute_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAICard_Dispute_Acceptance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard_Dispute_Acceptance::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_at_isSet) {
        obj.insert(QString("accepted_at"), ::OpenAPI::toJsonValue(m_accepted_at));
    }
    if (m_card_dispute_id_isSet) {
        obj.insert(QString("card_dispute_id"), ::OpenAPI::toJsonValue(m_card_dispute_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QDateTime OAICard_Dispute_Acceptance::getAcceptedAt() const {
    return m_accepted_at;
}
void OAICard_Dispute_Acceptance::setAcceptedAt(const QDateTime &accepted_at) {
    m_accepted_at = accepted_at;
    m_accepted_at_isSet = true;
}

bool OAICard_Dispute_Acceptance::is_accepted_at_Set() const{
    return m_accepted_at_isSet;
}

bool OAICard_Dispute_Acceptance::is_accepted_at_Valid() const{
    return m_accepted_at_isValid;
}

QString OAICard_Dispute_Acceptance::getCardDisputeId() const {
    return m_card_dispute_id;
}
void OAICard_Dispute_Acceptance::setCardDisputeId(const QString &card_dispute_id) {
    m_card_dispute_id = card_dispute_id;
    m_card_dispute_id_isSet = true;
}

bool OAICard_Dispute_Acceptance::is_card_dispute_id_Set() const{
    return m_card_dispute_id_isSet;
}

bool OAICard_Dispute_Acceptance::is_card_dispute_id_Valid() const{
    return m_card_dispute_id_isValid;
}

QString OAICard_Dispute_Acceptance::getTransactionId() const {
    return m_transaction_id;
}
void OAICard_Dispute_Acceptance::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAICard_Dispute_Acceptance::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAICard_Dispute_Acceptance::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAICard_Dispute_Acceptance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_dispute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard_Dispute_Acceptance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accepted_at_isValid && m_card_dispute_id_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
