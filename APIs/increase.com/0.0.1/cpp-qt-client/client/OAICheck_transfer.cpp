/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_transfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_transfer::OAICheck_transfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_transfer::OAICheck_transfer() {
    this->initializeModel();
}

OAICheck_transfer::~OAICheck_transfer() {}

void OAICheck_transfer::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_address_city_isSet = false;
    m_address_city_isValid = false;

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_state_isSet = false;
    m_address_state_isValid = false;

    m_address_zip_isSet = false;
    m_address_zip_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_approval_isSet = false;
    m_approval_isValid = false;

    m_cancellation_isSet = false;
    m_cancellation_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_deposit_isSet = false;
    m_deposit_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mailed_at_isSet = false;
    m_mailed_at_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_return_address_isSet = false;
    m_return_address_isValid = false;

    m_return_details_isSet = false;
    m_return_details_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stop_payment_request_isSet = false;
    m_stop_payment_request_isValid = false;

    m_submission_isSet = false;
    m_submission_isValid = false;

    m_submitted_at_isSet = false;
    m_submitted_at_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheck_transfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_transfer::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_address_city_isValid = ::OpenAPI::fromJsonValue(m_address_city, json[QString("address_city")]);
    m_address_city_isSet = !json[QString("address_city")].isNull() && m_address_city_isValid;

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("address_line1")]);
    m_address_line1_isSet = !json[QString("address_line1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("address_line2")]);
    m_address_line2_isSet = !json[QString("address_line2")].isNull() && m_address_line2_isValid;

    m_address_state_isValid = ::OpenAPI::fromJsonValue(m_address_state, json[QString("address_state")]);
    m_address_state_isSet = !json[QString("address_state")].isNull() && m_address_state_isValid;

    m_address_zip_isValid = ::OpenAPI::fromJsonValue(m_address_zip, json[QString("address_zip")]);
    m_address_zip_isSet = !json[QString("address_zip")].isNull() && m_address_zip_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_approval_isValid = ::OpenAPI::fromJsonValue(m_approval, json[QString("approval")]);
    m_approval_isSet = !json[QString("approval")].isNull() && m_approval_isValid;

    m_cancellation_isValid = ::OpenAPI::fromJsonValue(m_cancellation, json[QString("cancellation")]);
    m_cancellation_isSet = !json[QString("cancellation")].isNull() && m_cancellation_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_deposit_isValid = ::OpenAPI::fromJsonValue(m_deposit, json[QString("deposit")]);
    m_deposit_isSet = !json[QString("deposit")].isNull() && m_deposit_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mailed_at_isValid = ::OpenAPI::fromJsonValue(m_mailed_at, json[QString("mailed_at")]);
    m_mailed_at_isSet = !json[QString("mailed_at")].isNull() && m_mailed_at_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_return_address_isValid = ::OpenAPI::fromJsonValue(m_return_address, json[QString("return_address")]);
    m_return_address_isSet = !json[QString("return_address")].isNull() && m_return_address_isValid;

    m_return_details_isValid = ::OpenAPI::fromJsonValue(m_return_details, json[QString("return_details")]);
    m_return_details_isSet = !json[QString("return_details")].isNull() && m_return_details_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stop_payment_request_isValid = ::OpenAPI::fromJsonValue(m_stop_payment_request, json[QString("stop_payment_request")]);
    m_stop_payment_request_isSet = !json[QString("stop_payment_request")].isNull() && m_stop_payment_request_isValid;

    m_submission_isValid = ::OpenAPI::fromJsonValue(m_submission, json[QString("submission")]);
    m_submission_isSet = !json[QString("submission")].isNull() && m_submission_isValid;

    m_submitted_at_isValid = ::OpenAPI::fromJsonValue(m_submitted_at, json[QString("submitted_at")]);
    m_submitted_at_isSet = !json[QString("submitted_at")].isNull() && m_submitted_at_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheck_transfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_transfer::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_address_city_isSet) {
        obj.insert(QString("address_city"), ::OpenAPI::toJsonValue(m_address_city));
    }
    if (m_address_line1_isSet) {
        obj.insert(QString("address_line1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("address_line2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_state_isSet) {
        obj.insert(QString("address_state"), ::OpenAPI::toJsonValue(m_address_state));
    }
    if (m_address_zip_isSet) {
        obj.insert(QString("address_zip"), ::OpenAPI::toJsonValue(m_address_zip));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_approval.isSet()) {
        obj.insert(QString("approval"), ::OpenAPI::toJsonValue(m_approval));
    }
    if (m_cancellation.isSet()) {
        obj.insert(QString("cancellation"), ::OpenAPI::toJsonValue(m_cancellation));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_deposit.isSet()) {
        obj.insert(QString("deposit"), ::OpenAPI::toJsonValue(m_deposit));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mailed_at_isSet) {
        obj.insert(QString("mailed_at"), ::OpenAPI::toJsonValue(m_mailed_at));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_return_address.isSet()) {
        obj.insert(QString("return_address"), ::OpenAPI::toJsonValue(m_return_address));
    }
    if (m_return_details.isSet()) {
        obj.insert(QString("return_details"), ::OpenAPI::toJsonValue(m_return_details));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stop_payment_request.isSet()) {
        obj.insert(QString("stop_payment_request"), ::OpenAPI::toJsonValue(m_stop_payment_request));
    }
    if (m_submission.isSet()) {
        obj.insert(QString("submission"), ::OpenAPI::toJsonValue(m_submission));
    }
    if (m_submitted_at_isSet) {
        obj.insert(QString("submitted_at"), ::OpenAPI::toJsonValue(m_submitted_at));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICheck_transfer::getAccountId() const {
    return m_account_id;
}
void OAICheck_transfer::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICheck_transfer::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICheck_transfer::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICheck_transfer::getAddressCity() const {
    return m_address_city;
}
void OAICheck_transfer::setAddressCity(const QString &address_city) {
    m_address_city = address_city;
    m_address_city_isSet = true;
}

bool OAICheck_transfer::is_address_city_Set() const{
    return m_address_city_isSet;
}

bool OAICheck_transfer::is_address_city_Valid() const{
    return m_address_city_isValid;
}

QString OAICheck_transfer::getAddressLine1() const {
    return m_address_line1;
}
void OAICheck_transfer::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAICheck_transfer::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAICheck_transfer::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAICheck_transfer::getAddressLine2() const {
    return m_address_line2;
}
void OAICheck_transfer::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAICheck_transfer::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAICheck_transfer::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAICheck_transfer::getAddressState() const {
    return m_address_state;
}
void OAICheck_transfer::setAddressState(const QString &address_state) {
    m_address_state = address_state;
    m_address_state_isSet = true;
}

bool OAICheck_transfer::is_address_state_Set() const{
    return m_address_state_isSet;
}

bool OAICheck_transfer::is_address_state_Valid() const{
    return m_address_state_isValid;
}

QString OAICheck_transfer::getAddressZip() const {
    return m_address_zip;
}
void OAICheck_transfer::setAddressZip(const QString &address_zip) {
    m_address_zip = address_zip;
    m_address_zip_isSet = true;
}

bool OAICheck_transfer::is_address_zip_Set() const{
    return m_address_zip_isSet;
}

bool OAICheck_transfer::is_address_zip_Valid() const{
    return m_address_zip_isValid;
}

qint32 OAICheck_transfer::getAmount() const {
    return m_amount;
}
void OAICheck_transfer::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICheck_transfer::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICheck_transfer::is_amount_Valid() const{
    return m_amount_isValid;
}

OAITransfer_Approval OAICheck_transfer::getApproval() const {
    return m_approval;
}
void OAICheck_transfer::setApproval(const OAITransfer_Approval &approval) {
    m_approval = approval;
    m_approval_isSet = true;
}

bool OAICheck_transfer::is_approval_Set() const{
    return m_approval_isSet;
}

bool OAICheck_transfer::is_approval_Valid() const{
    return m_approval_isValid;
}

OAITransfer_Cancellation OAICheck_transfer::getCancellation() const {
    return m_cancellation;
}
void OAICheck_transfer::setCancellation(const OAITransfer_Cancellation &cancellation) {
    m_cancellation = cancellation;
    m_cancellation_isSet = true;
}

bool OAICheck_transfer::is_cancellation_Set() const{
    return m_cancellation_isSet;
}

bool OAICheck_transfer::is_cancellation_Valid() const{
    return m_cancellation_isValid;
}

QDateTime OAICheck_transfer::getCreatedAt() const {
    return m_created_at;
}
void OAICheck_transfer::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICheck_transfer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICheck_transfer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICheck_transfer::getCurrency() const {
    return m_currency;
}
void OAICheck_transfer::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICheck_transfer::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICheck_transfer::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICheck_Transfer_Deposit OAICheck_transfer::getDeposit() const {
    return m_deposit;
}
void OAICheck_transfer::setDeposit(const OAICheck_Transfer_Deposit &deposit) {
    m_deposit = deposit;
    m_deposit_isSet = true;
}

bool OAICheck_transfer::is_deposit_Set() const{
    return m_deposit_isSet;
}

bool OAICheck_transfer::is_deposit_Valid() const{
    return m_deposit_isValid;
}

QString OAICheck_transfer::getId() const {
    return m_id;
}
void OAICheck_transfer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheck_transfer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheck_transfer::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICheck_transfer::getMailedAt() const {
    return m_mailed_at;
}
void OAICheck_transfer::setMailedAt(const QDateTime &mailed_at) {
    m_mailed_at = mailed_at;
    m_mailed_at_isSet = true;
}

bool OAICheck_transfer::is_mailed_at_Set() const{
    return m_mailed_at_isSet;
}

bool OAICheck_transfer::is_mailed_at_Valid() const{
    return m_mailed_at_isValid;
}

QString OAICheck_transfer::getMessage() const {
    return m_message;
}
void OAICheck_transfer::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICheck_transfer::is_message_Set() const{
    return m_message_isSet;
}

bool OAICheck_transfer::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICheck_transfer::getNote() const {
    return m_note;
}
void OAICheck_transfer::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICheck_transfer::is_note_Set() const{
    return m_note_isSet;
}

bool OAICheck_transfer::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICheck_transfer::getRecipientName() const {
    return m_recipient_name;
}
void OAICheck_transfer::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAICheck_transfer::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAICheck_transfer::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

OAIReturn_Address OAICheck_transfer::getReturnAddress() const {
    return m_return_address;
}
void OAICheck_transfer::setReturnAddress(const OAIReturn_Address &return_address) {
    m_return_address = return_address;
    m_return_address_isSet = true;
}

bool OAICheck_transfer::is_return_address_Set() const{
    return m_return_address_isSet;
}

bool OAICheck_transfer::is_return_address_Valid() const{
    return m_return_address_isValid;
}

OAICheck_Transfer_Return OAICheck_transfer::getReturnDetails() const {
    return m_return_details;
}
void OAICheck_transfer::setReturnDetails(const OAICheck_Transfer_Return &return_details) {
    m_return_details = return_details;
    m_return_details_isSet = true;
}

bool OAICheck_transfer::is_return_details_Set() const{
    return m_return_details_isSet;
}

bool OAICheck_transfer::is_return_details_Valid() const{
    return m_return_details_isValid;
}

QString OAICheck_transfer::getStatus() const {
    return m_status;
}
void OAICheck_transfer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICheck_transfer::is_status_Set() const{
    return m_status_isSet;
}

bool OAICheck_transfer::is_status_Valid() const{
    return m_status_isValid;
}

OAICheck_Transfer_Stop_Payment_Request OAICheck_transfer::getStopPaymentRequest() const {
    return m_stop_payment_request;
}
void OAICheck_transfer::setStopPaymentRequest(const OAICheck_Transfer_Stop_Payment_Request &stop_payment_request) {
    m_stop_payment_request = stop_payment_request;
    m_stop_payment_request_isSet = true;
}

bool OAICheck_transfer::is_stop_payment_request_Set() const{
    return m_stop_payment_request_isSet;
}

bool OAICheck_transfer::is_stop_payment_request_Valid() const{
    return m_stop_payment_request_isValid;
}

OAICheck_Transfer_Submission OAICheck_transfer::getSubmission() const {
    return m_submission;
}
void OAICheck_transfer::setSubmission(const OAICheck_Transfer_Submission &submission) {
    m_submission = submission;
    m_submission_isSet = true;
}

bool OAICheck_transfer::is_submission_Set() const{
    return m_submission_isSet;
}

bool OAICheck_transfer::is_submission_Valid() const{
    return m_submission_isValid;
}

QDateTime OAICheck_transfer::getSubmittedAt() const {
    return m_submitted_at;
}
void OAICheck_transfer::setSubmittedAt(const QDateTime &submitted_at) {
    m_submitted_at = submitted_at;
    m_submitted_at_isSet = true;
}

bool OAICheck_transfer::is_submitted_at_Set() const{
    return m_submitted_at_isSet;
}

bool OAICheck_transfer::is_submitted_at_Valid() const{
    return m_submitted_at_isValid;
}

QString OAICheck_transfer::getTransactionId() const {
    return m_transaction_id;
}
void OAICheck_transfer::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAICheck_transfer::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAICheck_transfer::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAICheck_transfer::getType() const {
    return m_type;
}
void OAICheck_transfer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheck_transfer::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheck_transfer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheck_transfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_payment_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_transfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_address_city_isValid && m_address_line1_isValid && m_address_line2_isValid && m_address_state_isValid && m_address_zip_isValid && m_amount_isValid && m_approval_isValid && m_cancellation_isValid && m_created_at_isValid && m_currency_isValid && m_deposit_isValid && m_id_isValid && m_mailed_at_isValid && m_message_isValid && m_note_isValid && m_recipient_name_isValid && m_return_address_isValid && m_return_details_isValid && m_status_isValid && m_stop_payment_request_isValid && m_submission_isValid && m_submitted_at_isValid && m_transaction_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
