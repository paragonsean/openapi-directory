/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_Transfer_Deposit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_Transfer_Deposit::OAICheck_Transfer_Deposit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_Transfer_Deposit::OAICheck_Transfer_Deposit() {
    this->initializeModel();
}

OAICheck_Transfer_Deposit::~OAICheck_Transfer_Deposit() {}

void OAICheck_Transfer_Deposit::initializeModel() {

    m_back_image_file_id_isSet = false;
    m_back_image_file_id_isValid = false;

    m_deposited_at_isSet = false;
    m_deposited_at_isValid = false;

    m_front_image_file_id_isSet = false;
    m_front_image_file_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheck_Transfer_Deposit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_Transfer_Deposit::fromJsonObject(QJsonObject json) {

    m_back_image_file_id_isValid = ::OpenAPI::fromJsonValue(m_back_image_file_id, json[QString("back_image_file_id")]);
    m_back_image_file_id_isSet = !json[QString("back_image_file_id")].isNull() && m_back_image_file_id_isValid;

    m_deposited_at_isValid = ::OpenAPI::fromJsonValue(m_deposited_at, json[QString("deposited_at")]);
    m_deposited_at_isSet = !json[QString("deposited_at")].isNull() && m_deposited_at_isValid;

    m_front_image_file_id_isValid = ::OpenAPI::fromJsonValue(m_front_image_file_id, json[QString("front_image_file_id")]);
    m_front_image_file_id_isSet = !json[QString("front_image_file_id")].isNull() && m_front_image_file_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheck_Transfer_Deposit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_Transfer_Deposit::asJsonObject() const {
    QJsonObject obj;
    if (m_back_image_file_id_isSet) {
        obj.insert(QString("back_image_file_id"), ::OpenAPI::toJsonValue(m_back_image_file_id));
    }
    if (m_deposited_at_isSet) {
        obj.insert(QString("deposited_at"), ::OpenAPI::toJsonValue(m_deposited_at));
    }
    if (m_front_image_file_id_isSet) {
        obj.insert(QString("front_image_file_id"), ::OpenAPI::toJsonValue(m_front_image_file_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICheck_Transfer_Deposit::getBackImageFileId() const {
    return m_back_image_file_id;
}
void OAICheck_Transfer_Deposit::setBackImageFileId(const QString &back_image_file_id) {
    m_back_image_file_id = back_image_file_id;
    m_back_image_file_id_isSet = true;
}

bool OAICheck_Transfer_Deposit::is_back_image_file_id_Set() const{
    return m_back_image_file_id_isSet;
}

bool OAICheck_Transfer_Deposit::is_back_image_file_id_Valid() const{
    return m_back_image_file_id_isValid;
}

QDateTime OAICheck_Transfer_Deposit::getDepositedAt() const {
    return m_deposited_at;
}
void OAICheck_Transfer_Deposit::setDepositedAt(const QDateTime &deposited_at) {
    m_deposited_at = deposited_at;
    m_deposited_at_isSet = true;
}

bool OAICheck_Transfer_Deposit::is_deposited_at_Set() const{
    return m_deposited_at_isSet;
}

bool OAICheck_Transfer_Deposit::is_deposited_at_Valid() const{
    return m_deposited_at_isValid;
}

QString OAICheck_Transfer_Deposit::getFrontImageFileId() const {
    return m_front_image_file_id;
}
void OAICheck_Transfer_Deposit::setFrontImageFileId(const QString &front_image_file_id) {
    m_front_image_file_id = front_image_file_id;
    m_front_image_file_id_isSet = true;
}

bool OAICheck_Transfer_Deposit::is_front_image_file_id_Set() const{
    return m_front_image_file_id_isSet;
}

bool OAICheck_Transfer_Deposit::is_front_image_file_id_Valid() const{
    return m_front_image_file_id_isValid;
}

QString OAICheck_Transfer_Deposit::getType() const {
    return m_type;
}
void OAICheck_Transfer_Deposit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheck_Transfer_Deposit::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheck_Transfer_Deposit::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheck_Transfer_Deposit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_back_image_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposited_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_front_image_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_Transfer_Deposit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_back_image_file_id_isValid && m_deposited_at_isValid && m_front_image_file_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
