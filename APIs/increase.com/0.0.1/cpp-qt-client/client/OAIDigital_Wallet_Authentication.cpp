/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigital_Wallet_Authentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigital_Wallet_Authentication::OAIDigital_Wallet_Authentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigital_Wallet_Authentication::OAIDigital_Wallet_Authentication() {
    this->initializeModel();
}

OAIDigital_Wallet_Authentication::~OAIDigital_Wallet_Authentication() {}

void OAIDigital_Wallet_Authentication::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_digital_wallet_isSet = false;
    m_digital_wallet_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_one_time_passcode_isSet = false;
    m_one_time_passcode_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIDigital_Wallet_Authentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigital_Wallet_Authentication::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_digital_wallet_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet, json[QString("digital_wallet")]);
    m_digital_wallet_isSet = !json[QString("digital_wallet")].isNull() && m_digital_wallet_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_one_time_passcode_isValid = ::OpenAPI::fromJsonValue(m_one_time_passcode, json[QString("one_time_passcode")]);
    m_one_time_passcode_isSet = !json[QString("one_time_passcode")].isNull() && m_one_time_passcode_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIDigital_Wallet_Authentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigital_Wallet_Authentication::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_digital_wallet_isSet) {
        obj.insert(QString("digital_wallet"), ::OpenAPI::toJsonValue(m_digital_wallet));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_one_time_passcode_isSet) {
        obj.insert(QString("one_time_passcode"), ::OpenAPI::toJsonValue(m_one_time_passcode));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIDigital_Wallet_Authentication::getCardId() const {
    return m_card_id;
}
void OAIDigital_Wallet_Authentication::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIDigital_Wallet_Authentication::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIDigital_Wallet_Authentication::getChannel() const {
    return m_channel;
}
void OAIDigital_Wallet_Authentication::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIDigital_Wallet_Authentication::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIDigital_Wallet_Authentication::getDigitalWallet() const {
    return m_digital_wallet;
}
void OAIDigital_Wallet_Authentication::setDigitalWallet(const QString &digital_wallet) {
    m_digital_wallet = digital_wallet;
    m_digital_wallet_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_digital_wallet_Set() const{
    return m_digital_wallet_isSet;
}

bool OAIDigital_Wallet_Authentication::is_digital_wallet_Valid() const{
    return m_digital_wallet_isValid;
}

QString OAIDigital_Wallet_Authentication::getEmail() const {
    return m_email;
}
void OAIDigital_Wallet_Authentication::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_email_Set() const{
    return m_email_isSet;
}

bool OAIDigital_Wallet_Authentication::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIDigital_Wallet_Authentication::getOneTimePasscode() const {
    return m_one_time_passcode;
}
void OAIDigital_Wallet_Authentication::setOneTimePasscode(const QString &one_time_passcode) {
    m_one_time_passcode = one_time_passcode;
    m_one_time_passcode_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_one_time_passcode_Set() const{
    return m_one_time_passcode_isSet;
}

bool OAIDigital_Wallet_Authentication::is_one_time_passcode_Valid() const{
    return m_one_time_passcode_isValid;
}

QString OAIDigital_Wallet_Authentication::getPhone() const {
    return m_phone;
}
void OAIDigital_Wallet_Authentication::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIDigital_Wallet_Authentication::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIDigital_Wallet_Authentication::getResult() const {
    return m_result;
}
void OAIDigital_Wallet_Authentication::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIDigital_Wallet_Authentication::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDigital_Wallet_Authentication::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIDigital_Wallet_Authentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_time_passcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigital_Wallet_Authentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_id_isValid && m_channel_isValid && m_digital_wallet_isValid && m_email_isValid && m_one_time_passcode_isValid && m_phone_isValid && m_result_isValid && true;
}

} // namespace OpenAPI
