/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILimit::OAILimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILimit::OAILimit() {
    this->initializeModel();
}

OAILimit::~OAILimit() {}

void OAILimit::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILimit::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("model_id")]);
    m_model_id_isSet = !json[QString("model_id")].isNull() && m_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("model_type")]);
    m_model_type_isSet = !json[QString("model_type")].isNull() && m_model_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILimit::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("model_id"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("model_type"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAILimit::getId() const {
    return m_id;
}
void OAILimit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILimit::is_id_Set() const{
    return m_id_isSet;
}

bool OAILimit::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILimit::getInterval() const {
    return m_interval;
}
void OAILimit::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAILimit::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAILimit::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAILimit::getMetric() const {
    return m_metric;
}
void OAILimit::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAILimit::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAILimit::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAILimit::getModelId() const {
    return m_model_id;
}
void OAILimit::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAILimit::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAILimit::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAILimit::getModelType() const {
    return m_model_type;
}
void OAILimit::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAILimit::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAILimit::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAILimit::getStatus() const {
    return m_status;
}
void OAILimit::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILimit::is_status_Set() const{
    return m_status_isSet;
}

bool OAILimit::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILimit::getType() const {
    return m_type;
}
void OAILimit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILimit::is_type_Set() const{
    return m_type_isSet;
}

bool OAILimit::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAILimit::getValue() const {
    return m_value;
}
void OAILimit::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILimit::is_value_Set() const{
    return m_value_isSet;
}

bool OAILimit::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_interval_isValid && m_metric_isValid && m_model_id_isValid && m_model_type_isValid && m_status_isValid && m_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
