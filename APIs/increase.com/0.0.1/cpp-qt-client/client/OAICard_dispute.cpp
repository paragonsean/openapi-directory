/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard_dispute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard_dispute::OAICard_dispute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard_dispute::OAICard_dispute() {
    this->initializeModel();
}

OAICard_dispute::~OAICard_dispute() {}

void OAICard_dispute::initializeModel() {

    m_acceptance_isSet = false;
    m_acceptance_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_disputed_transaction_id_isSet = false;
    m_disputed_transaction_id_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rejection_isSet = false;
    m_rejection_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICard_dispute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard_dispute::fromJsonObject(QJsonObject json) {

    m_acceptance_isValid = ::OpenAPI::fromJsonValue(m_acceptance, json[QString("acceptance")]);
    m_acceptance_isSet = !json[QString("acceptance")].isNull() && m_acceptance_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_disputed_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_disputed_transaction_id, json[QString("disputed_transaction_id")]);
    m_disputed_transaction_id_isSet = !json[QString("disputed_transaction_id")].isNull() && m_disputed_transaction_id_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rejection_isValid = ::OpenAPI::fromJsonValue(m_rejection, json[QString("rejection")]);
    m_rejection_isSet = !json[QString("rejection")].isNull() && m_rejection_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICard_dispute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard_dispute::asJsonObject() const {
    QJsonObject obj;
    if (m_acceptance.isSet()) {
        obj.insert(QString("acceptance"), ::OpenAPI::toJsonValue(m_acceptance));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_disputed_transaction_id_isSet) {
        obj.insert(QString("disputed_transaction_id"), ::OpenAPI::toJsonValue(m_disputed_transaction_id));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rejection.isSet()) {
        obj.insert(QString("rejection"), ::OpenAPI::toJsonValue(m_rejection));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICard_Dispute_Acceptance OAICard_dispute::getAcceptance() const {
    return m_acceptance;
}
void OAICard_dispute::setAcceptance(const OAICard_Dispute_Acceptance &acceptance) {
    m_acceptance = acceptance;
    m_acceptance_isSet = true;
}

bool OAICard_dispute::is_acceptance_Set() const{
    return m_acceptance_isSet;
}

bool OAICard_dispute::is_acceptance_Valid() const{
    return m_acceptance_isValid;
}

QDateTime OAICard_dispute::getCreatedAt() const {
    return m_created_at;
}
void OAICard_dispute::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICard_dispute::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICard_dispute::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICard_dispute::getDisputedTransactionId() const {
    return m_disputed_transaction_id;
}
void OAICard_dispute::setDisputedTransactionId(const QString &disputed_transaction_id) {
    m_disputed_transaction_id = disputed_transaction_id;
    m_disputed_transaction_id_isSet = true;
}

bool OAICard_dispute::is_disputed_transaction_id_Set() const{
    return m_disputed_transaction_id_isSet;
}

bool OAICard_dispute::is_disputed_transaction_id_Valid() const{
    return m_disputed_transaction_id_isValid;
}

QString OAICard_dispute::getExplanation() const {
    return m_explanation;
}
void OAICard_dispute::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAICard_dispute::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAICard_dispute::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QString OAICard_dispute::getId() const {
    return m_id;
}
void OAICard_dispute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICard_dispute::is_id_Set() const{
    return m_id_isSet;
}

bool OAICard_dispute::is_id_Valid() const{
    return m_id_isValid;
}

OAICard_Dispute_Rejection OAICard_dispute::getRejection() const {
    return m_rejection;
}
void OAICard_dispute::setRejection(const OAICard_Dispute_Rejection &rejection) {
    m_rejection = rejection;
    m_rejection_isSet = true;
}

bool OAICard_dispute::is_rejection_Set() const{
    return m_rejection_isSet;
}

bool OAICard_dispute::is_rejection_Valid() const{
    return m_rejection_isValid;
}

QString OAICard_dispute::getStatus() const {
    return m_status;
}
void OAICard_dispute::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICard_dispute::is_status_Set() const{
    return m_status_isSet;
}

bool OAICard_dispute::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICard_dispute::getType() const {
    return m_type;
}
void OAICard_dispute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICard_dispute::is_type_Set() const{
    return m_type_isSet;
}

bool OAICard_dispute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICard_dispute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceptance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disputed_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard_dispute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acceptance_isValid && m_created_at_isValid && m_disputed_transaction_id_isValid && m_explanation_isValid && m_id_isValid && m_rejection_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
