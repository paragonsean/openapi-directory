/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_a_real_time_decision_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_a_real_time_decision_parameters::OAIAction_a_real_time_decision_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_a_real_time_decision_parameters::OAIAction_a_real_time_decision_parameters() {
    this->initializeModel();
}

OAIAction_a_real_time_decision_parameters::~OAIAction_a_real_time_decision_parameters() {}

void OAIAction_a_real_time_decision_parameters::initializeModel() {

    m_card_authorization_isSet = false;
    m_card_authorization_isValid = false;

    m_digital_wallet_authentication_isSet = false;
    m_digital_wallet_authentication_isValid = false;

    m_digital_wallet_token_isSet = false;
    m_digital_wallet_token_isValid = false;
}

void OAIAction_a_real_time_decision_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_a_real_time_decision_parameters::fromJsonObject(QJsonObject json) {

    m_card_authorization_isValid = ::OpenAPI::fromJsonValue(m_card_authorization, json[QString("card_authorization")]);
    m_card_authorization_isSet = !json[QString("card_authorization")].isNull() && m_card_authorization_isValid;

    m_digital_wallet_authentication_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet_authentication, json[QString("digital_wallet_authentication")]);
    m_digital_wallet_authentication_isSet = !json[QString("digital_wallet_authentication")].isNull() && m_digital_wallet_authentication_isValid;

    m_digital_wallet_token_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet_token, json[QString("digital_wallet_token")]);
    m_digital_wallet_token_isSet = !json[QString("digital_wallet_token")].isNull() && m_digital_wallet_token_isValid;
}

QString OAIAction_a_real_time_decision_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_a_real_time_decision_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_card_authorization.isSet()) {
        obj.insert(QString("card_authorization"), ::OpenAPI::toJsonValue(m_card_authorization));
    }
    if (m_digital_wallet_authentication.isSet()) {
        obj.insert(QString("digital_wallet_authentication"), ::OpenAPI::toJsonValue(m_digital_wallet_authentication));
    }
    if (m_digital_wallet_token.isSet()) {
        obj.insert(QString("digital_wallet_token"), ::OpenAPI::toJsonValue(m_digital_wallet_token));
    }
    return obj;
}

OAIAction_a_real_time_decision_parameters_card_authorization OAIAction_a_real_time_decision_parameters::getCardAuthorization() const {
    return m_card_authorization;
}
void OAIAction_a_real_time_decision_parameters::setCardAuthorization(const OAIAction_a_real_time_decision_parameters_card_authorization &card_authorization) {
    m_card_authorization = card_authorization;
    m_card_authorization_isSet = true;
}

bool OAIAction_a_real_time_decision_parameters::is_card_authorization_Set() const{
    return m_card_authorization_isSet;
}

bool OAIAction_a_real_time_decision_parameters::is_card_authorization_Valid() const{
    return m_card_authorization_isValid;
}

OAIAction_a_real_time_decision_parameters_digital_wallet_authentication OAIAction_a_real_time_decision_parameters::getDigitalWalletAuthentication() const {
    return m_digital_wallet_authentication;
}
void OAIAction_a_real_time_decision_parameters::setDigitalWalletAuthentication(const OAIAction_a_real_time_decision_parameters_digital_wallet_authentication &digital_wallet_authentication) {
    m_digital_wallet_authentication = digital_wallet_authentication;
    m_digital_wallet_authentication_isSet = true;
}

bool OAIAction_a_real_time_decision_parameters::is_digital_wallet_authentication_Set() const{
    return m_digital_wallet_authentication_isSet;
}

bool OAIAction_a_real_time_decision_parameters::is_digital_wallet_authentication_Valid() const{
    return m_digital_wallet_authentication_isValid;
}

OAIAction_a_real_time_decision_parameters_digital_wallet_token OAIAction_a_real_time_decision_parameters::getDigitalWalletToken() const {
    return m_digital_wallet_token;
}
void OAIAction_a_real_time_decision_parameters::setDigitalWalletToken(const OAIAction_a_real_time_decision_parameters_digital_wallet_token &digital_wallet_token) {
    m_digital_wallet_token = digital_wallet_token;
    m_digital_wallet_token_isSet = true;
}

bool OAIAction_a_real_time_decision_parameters::is_digital_wallet_token_Set() const{
    return m_digital_wallet_token_isSet;
}

bool OAIAction_a_real_time_decision_parameters::is_digital_wallet_token_Valid() const{
    return m_digital_wallet_token_isValid;
}

bool OAIAction_a_real_time_decision_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_token.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_a_real_time_decision_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
