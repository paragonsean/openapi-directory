/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_an_entity_parameters_corporation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_an_entity_parameters_corporation::OAICreate_an_entity_parameters_corporation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_an_entity_parameters_corporation::OAICreate_an_entity_parameters_corporation() {
    this->initializeModel();
}

OAICreate_an_entity_parameters_corporation::~OAICreate_an_entity_parameters_corporation() {}

void OAICreate_an_entity_parameters_corporation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_beneficial_owners_isSet = false;
    m_beneficial_owners_isValid = false;

    m_incorporation_state_isSet = false;
    m_incorporation_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tax_identifier_isSet = false;
    m_tax_identifier_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAICreate_an_entity_parameters_corporation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_an_entity_parameters_corporation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_beneficial_owners_isValid = ::OpenAPI::fromJsonValue(m_beneficial_owners, json[QString("beneficial_owners")]);
    m_beneficial_owners_isSet = !json[QString("beneficial_owners")].isNull() && m_beneficial_owners_isValid;

    m_incorporation_state_isValid = ::OpenAPI::fromJsonValue(m_incorporation_state, json[QString("incorporation_state")]);
    m_incorporation_state_isSet = !json[QString("incorporation_state")].isNull() && m_incorporation_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tax_identifier_isValid = ::OpenAPI::fromJsonValue(m_tax_identifier, json[QString("tax_identifier")]);
    m_tax_identifier_isSet = !json[QString("tax_identifier")].isNull() && m_tax_identifier_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAICreate_an_entity_parameters_corporation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_an_entity_parameters_corporation::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_beneficial_owners.size() > 0) {
        obj.insert(QString("beneficial_owners"), ::OpenAPI::toJsonValue(m_beneficial_owners));
    }
    if (m_incorporation_state_isSet) {
        obj.insert(QString("incorporation_state"), ::OpenAPI::toJsonValue(m_incorporation_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tax_identifier_isSet) {
        obj.insert(QString("tax_identifier"), ::OpenAPI::toJsonValue(m_tax_identifier));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAICreate_an_entity_parameters_corporation_address OAICreate_an_entity_parameters_corporation::getAddress() const {
    return m_address;
}
void OAICreate_an_entity_parameters_corporation::setAddress(const OAICreate_an_entity_parameters_corporation_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_address_Set() const{
    return m_address_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAICreate_an_entity_parameters_corporation_beneficial_owners_inner> OAICreate_an_entity_parameters_corporation::getBeneficialOwners() const {
    return m_beneficial_owners;
}
void OAICreate_an_entity_parameters_corporation::setBeneficialOwners(const QList<OAICreate_an_entity_parameters_corporation_beneficial_owners_inner> &beneficial_owners) {
    m_beneficial_owners = beneficial_owners;
    m_beneficial_owners_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_beneficial_owners_Set() const{
    return m_beneficial_owners_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_beneficial_owners_Valid() const{
    return m_beneficial_owners_isValid;
}

QString OAICreate_an_entity_parameters_corporation::getIncorporationState() const {
    return m_incorporation_state;
}
void OAICreate_an_entity_parameters_corporation::setIncorporationState(const QString &incorporation_state) {
    m_incorporation_state = incorporation_state;
    m_incorporation_state_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_incorporation_state_Set() const{
    return m_incorporation_state_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_incorporation_state_Valid() const{
    return m_incorporation_state_isValid;
}

QString OAICreate_an_entity_parameters_corporation::getName() const {
    return m_name;
}
void OAICreate_an_entity_parameters_corporation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreate_an_entity_parameters_corporation::getTaxIdentifier() const {
    return m_tax_identifier;
}
void OAICreate_an_entity_parameters_corporation::setTaxIdentifier(const QString &tax_identifier) {
    m_tax_identifier = tax_identifier;
    m_tax_identifier_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_tax_identifier_Set() const{
    return m_tax_identifier_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_tax_identifier_Valid() const{
    return m_tax_identifier_isValid;
}

QString OAICreate_an_entity_parameters_corporation::getWebsite() const {
    return m_website;
}
void OAICreate_an_entity_parameters_corporation::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation::is_website_Set() const{
    return m_website_isSet;
}

bool OAICreate_an_entity_parameters_corporation::is_website_Valid() const{
    return m_website_isValid;
}

bool OAICreate_an_entity_parameters_corporation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficial_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_incorporation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_an_entity_parameters_corporation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_beneficial_owners_isValid && m_name_isValid && m_tax_identifier_isValid && true;
}

} // namespace OpenAPI
