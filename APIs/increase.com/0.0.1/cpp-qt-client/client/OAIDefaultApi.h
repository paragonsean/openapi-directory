/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAccount_list.h"
#include "OAIAccount_number.h"
#include "OAIAccount_number_list.h"
#include "OAIAccount_statement.h"
#include "OAIAccount_statement_list.h"
#include "OAIAccount_transfer.h"
#include "OAIAccount_transfer_list.h"
#include "OAIAch_prenotification.h"
#include "OAIAch_prenotification_list.h"
#include "OAIAch_transfer.h"
#include "OAIAch_transfer_list.h"
#include "OAIAction_a_real_time_decision_parameters.h"
#include "OAIBalance_lookup.h"
#include "OAIBookkeeping_account.h"
#include "OAIBookkeeping_account_list.h"
#include "OAIBookkeeping_entry_list.h"
#include "OAIBookkeeping_entry_set.h"
#include "OAICard.h"
#include "OAICard_details.h"
#include "OAICard_dispute.h"
#include "OAICard_dispute_list.h"
#include "OAICard_list.h"
#include "OAICard_profile.h"
#include "OAICard_profile_list.h"
#include "OAICheck_deposit.h"
#include "OAICheck_deposit_list.h"
#include "OAICheck_transfer.h"
#include "OAICheck_transfer_list.h"
#include "OAIComplete_a_sandbox_real_time_payments_transfer_parameters.h"
#include "OAICreate_a_bookkeeping_account_parameters.h"
#include "OAICreate_a_bookkeeping_entry_set_parameters.h"
#include "OAICreate_a_card_dispute_parameters.h"
#include "OAICreate_a_card_parameters.h"
#include "OAICreate_a_card_profile_parameters.h"
#include "OAICreate_a_check_deposit_parameters.h"
#include "OAICreate_a_check_transfer_parameters.h"
#include "OAICreate_a_limit_parameters.h"
#include "OAICreate_a_real_time_payments_transfer_parameters.h"
#include "OAICreate_a_supplemental_document_for_an_entity_parameters.h"
#include "OAICreate_a_wire_drawdown_request_parameters.h"
#include "OAICreate_a_wire_transfer_parameters.h"
#include "OAICreate_an_account_number_parameters.h"
#include "OAICreate_an_account_parameters.h"
#include "OAICreate_an_account_transfer_parameters.h"
#include "OAICreate_an_ach_prenotification_parameters.h"
#include "OAICreate_an_ach_return_parameters.h"
#include "OAICreate_an_ach_transfer_parameters.h"
#include "OAICreate_an_entity_parameters.h"
#include "OAICreate_an_event_subscription_parameters.h"
#include "OAICreate_an_export_parameters.h"
#include "OAICreate_an_external_account_parameters.h"
#include "OAIDeclined_transaction.h"
#include "OAIDeclined_transaction_list.h"
#include "OAIDigital_wallet_token.h"
#include "OAIDigital_wallet_token_list.h"
#include "OAIDocument.h"
#include "OAIDocument_list.h"
#include "OAIEntity.h"
#include "OAIEntity_list.h"
#include "OAIError.h"
#include "OAIEvent.h"
#include "OAIEvent_list.h"
#include "OAIEvent_subscription.h"
#include "OAIEvent_subscription_list.h"
#include "OAIExport.h"
#include "OAIExport_list.h"
#include "OAIExternal_account.h"
#include "OAIExternal_account_list.h"
#include "OAIFile_list.h"
#include "OAIGroup.h"
#include "OAIHttpFileElement.h"
#include "OAIInbound_ach_transfer_return.h"
#include "OAIInbound_ach_transfer_return_list.h"
#include "OAIInbound_ach_transfer_simulation_result.h"
#include "OAIInbound_card_authorization_simulation_result.h"
#include "OAIInbound_digital_wallet_token_request_simulation_result.h"
#include "OAIInbound_real_time_payments_transfer_simulation_result.h"
#include "OAIInbound_wire_drawdown_request.h"
#include "OAIInbound_wire_drawdown_request_list.h"
#include "OAIInbound_wire_transfer_simulation_result.h"
#include "OAIInterest_payment_simulation_result.h"
#include "OAILimit.h"
#include "OAILimit_list.h"
#include "OAILook_up_the_balance_for_an_account_parameters.h"
#include "OAIOauth_connection.h"
#include "OAIOauth_connection_list.h"
#include "OAIPending_transaction.h"
#include "OAIPending_transaction_list.h"
#include "OAIProgram.h"
#include "OAIProgram_list.h"
#include "OAIReal_time_decision.h"
#include "OAIReal_time_payments_transfer.h"
#include "OAIReal_time_payments_transfer_list.h"
#include "OAIReturn_a_sandbox_ach_transfer_parameters.h"
#include "OAIReturn_a_sandbox_check_transfer_parameters.h"
#include "OAIRouting_number_list.h"
#include "OAISimulate_a_real_time_payments_transfer_to_your_account_parameters.h"
#include "OAISimulate_a_refund_on_a_card_parameters.h"
#include "OAISimulate_a_tax_document_being_created_parameters.h"
#include "OAISimulate_a_wire_transfer_to_your_account_parameters.h"
#include "OAISimulate_an_account_statement_being_created_parameters.h"
#include "OAISimulate_an_ach_transfer_to_your_account_parameters.h"
#include "OAISimulate_an_authorization_on_a_card_parameters.h"
#include "OAISimulate_an_inbound_wire_drawdown_request_being_created_parameters.h"
#include "OAISimulate_an_interest_payment_to_your_account_parameters.h"
#include "OAISimulate_digital_wallet_provisioning_for_a_card_parameters.h"
#include "OAISimulate_settling_a_card_authorization_parameters.h"
#include "OAISimulates_advancing_the_state_of_a_card_dispute_parameters.h"
#include "OAITransaction.h"
#include "OAITransaction_list.h"
#include "OAIUpdate_a_card_parameters.h"
#include "OAIUpdate_a_limit_parameters.h"
#include "OAIUpdate_an_account_number_parameters.h"
#include "OAIUpdate_an_account_parameters.h"
#include "OAIUpdate_an_event_subscription_parameters.h"
#include "OAIUpdate_an_external_account_parameters.h"
#include "OAIWire_drawdown_request.h"
#include "OAIWire_drawdown_request_list.h"
#include "OAIWire_transfer.h"
#include "OAIWire_transfer_list.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  real_time_decision_id QString [required]
    * @param[in]  oai_action_a_real_time_decision_parameters OAIAction_a_real_time_decision_parameters [required]
    */
    virtual void actionARealTimeDecision(const QString &real_time_decision_id, const OAIAction_a_real_time_decision_parameters &oai_action_a_real_time_decision_parameters);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void approveACheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  wire_transfer_id QString [required]
    */
    virtual void approveAWireTransfer(const QString &wire_transfer_id);

    /**
    * @param[in]  account_transfer_id QString [required]
    */
    virtual void approveAnAccountTransfer(const QString &account_transfer_id);

    /**
    * @param[in]  ach_transfer_id QString [required]
    */
    virtual void approveAnAchTransfer(const QString &ach_transfer_id);

    /**
    * @param[in]  ach_transfer_id QString [required]
    */
    virtual void cancelAPendingAchTransfer(const QString &ach_transfer_id);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void cancelAPendingCheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  wire_transfer_id QString [required]
    */
    virtual void cancelAPendingWireTransfer(const QString &wire_transfer_id);

    /**
    * @param[in]  account_transfer_id QString [required]
    */
    virtual void cancelAnAccountTransfer(const QString &account_transfer_id);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void closeAnAccount(const QString &account_id);

    /**
    * @param[in]  account_transfer_id QString [required]
    */
    virtual void completeASandboxAccountTransfer(const QString &account_transfer_id);

    /**
    * @param[in]  real_time_payments_transfer_id QString [required]
    * @param[in]  oai_complete_a_sandbox_real_time_payments_transfer_parameters OAIComplete_a_sandbox_real_time_payments_transfer_parameters [required]
    */
    virtual void completeASandboxRealTimePaymentsTransfer(const QString &real_time_payments_transfer_id, const OAIComplete_a_sandbox_real_time_payments_transfer_parameters &oai_complete_a_sandbox_real_time_payments_transfer_parameters);

    /**
    * @param[in]  oai_create_a_bookkeeping_account_parameters OAICreate_a_bookkeeping_account_parameters [required]
    */
    virtual void createABookkeepingAccount(const OAICreate_a_bookkeeping_account_parameters &oai_create_a_bookkeeping_account_parameters);

    /**
    * @param[in]  oai_create_a_bookkeeping_entry_set_parameters OAICreate_a_bookkeeping_entry_set_parameters [required]
    */
    virtual void createABookkeepingEntrySet(const OAICreate_a_bookkeeping_entry_set_parameters &oai_create_a_bookkeeping_entry_set_parameters);

    /**
    * @param[in]  oai_create_a_card_parameters OAICreate_a_card_parameters [required]
    */
    virtual void createACard(const OAICreate_a_card_parameters &oai_create_a_card_parameters);

    /**
    * @param[in]  oai_create_a_card_dispute_parameters OAICreate_a_card_dispute_parameters [required]
    */
    virtual void createACardDispute(const OAICreate_a_card_dispute_parameters &oai_create_a_card_dispute_parameters);

    /**
    * @param[in]  oai_create_a_card_profile_parameters OAICreate_a_card_profile_parameters [required]
    */
    virtual void createACardProfile(const OAICreate_a_card_profile_parameters &oai_create_a_card_profile_parameters);

    /**
    * @param[in]  oai_create_a_check_deposit_parameters OAICreate_a_check_deposit_parameters [required]
    */
    virtual void createACheckDeposit(const OAICreate_a_check_deposit_parameters &oai_create_a_check_deposit_parameters);

    /**
    * @param[in]  oai_create_a_check_transfer_parameters OAICreate_a_check_transfer_parameters [required]
    */
    virtual void createACheckTransfer(const OAICreate_a_check_transfer_parameters &oai_create_a_check_transfer_parameters);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  purpose QString [required]
    * @param[in]  description QString [optional]
    */
    virtual void createAFile(const OAIHttpFileElement &file, const QString &purpose, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_a_limit_parameters OAICreate_a_limit_parameters [required]
    */
    virtual void createALimit(const OAICreate_a_limit_parameters &oai_create_a_limit_parameters);

    /**
    * @param[in]  oai_create_a_real_time_payments_transfer_parameters OAICreate_a_real_time_payments_transfer_parameters [required]
    */
    virtual void createARealTimePaymentsTransfer(const OAICreate_a_real_time_payments_transfer_parameters &oai_create_a_real_time_payments_transfer_parameters);

    /**
    * @param[in]  entity_id QString [required]
    * @param[in]  oai_create_a_supplemental_document_for_an_entity_parameters OAICreate_a_supplemental_document_for_an_entity_parameters [required]
    */
    virtual void createASupplementalDocumentForAnEntity(const QString &entity_id, const OAICreate_a_supplemental_document_for_an_entity_parameters &oai_create_a_supplemental_document_for_an_entity_parameters);

    /**
    * @param[in]  oai_create_a_wire_drawdown_request_parameters OAICreate_a_wire_drawdown_request_parameters [required]
    */
    virtual void createAWireDrawdownRequest(const OAICreate_a_wire_drawdown_request_parameters &oai_create_a_wire_drawdown_request_parameters);

    /**
    * @param[in]  oai_create_a_wire_transfer_parameters OAICreate_a_wire_transfer_parameters [required]
    */
    virtual void createAWireTransfer(const OAICreate_a_wire_transfer_parameters &oai_create_a_wire_transfer_parameters);

    /**
    * @param[in]  oai_create_an_account_parameters OAICreate_an_account_parameters [required]
    */
    virtual void createAnAccount(const OAICreate_an_account_parameters &oai_create_an_account_parameters);

    /**
    * @param[in]  oai_create_an_account_number_parameters OAICreate_an_account_number_parameters [required]
    */
    virtual void createAnAccountNumber(const OAICreate_an_account_number_parameters &oai_create_an_account_number_parameters);

    /**
    * @param[in]  oai_create_an_account_transfer_parameters OAICreate_an_account_transfer_parameters [required]
    */
    virtual void createAnAccountTransfer(const OAICreate_an_account_transfer_parameters &oai_create_an_account_transfer_parameters);

    /**
    * @param[in]  oai_create_an_ach_prenotification_parameters OAICreate_an_ach_prenotification_parameters [required]
    */
    virtual void createAnAchPrenotification(const OAICreate_an_ach_prenotification_parameters &oai_create_an_ach_prenotification_parameters);

    /**
    * @param[in]  oai_create_an_ach_return_parameters OAICreate_an_ach_return_parameters [required]
    */
    virtual void createAnAchReturn(const OAICreate_an_ach_return_parameters &oai_create_an_ach_return_parameters);

    /**
    * @param[in]  oai_create_an_ach_transfer_parameters OAICreate_an_ach_transfer_parameters [required]
    */
    virtual void createAnAchTransfer(const OAICreate_an_ach_transfer_parameters &oai_create_an_ach_transfer_parameters);

    /**
    * @param[in]  oai_create_an_entity_parameters OAICreate_an_entity_parameters [required]
    */
    virtual void createAnEntity(const OAICreate_an_entity_parameters &oai_create_an_entity_parameters);

    /**
    * @param[in]  oai_create_an_event_subscription_parameters OAICreate_an_event_subscription_parameters [required]
    */
    virtual void createAnEventSubscription(const OAICreate_an_event_subscription_parameters &oai_create_an_event_subscription_parameters);

    /**
    * @param[in]  oai_create_an_export_parameters OAICreate_an_export_parameters [required]
    */
    virtual void createAnExport(const OAICreate_an_export_parameters &oai_create_an_export_parameters);

    /**
    * @param[in]  oai_create_an_external_account_parameters OAICreate_an_external_account_parameters [required]
    */
    virtual void createAnExternalAccount(const OAICreate_an_external_account_parameters &oai_create_an_external_account_parameters);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void depositASandboxCheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listAccountNumbers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  statement_period_start_after QDateTime [optional]
    * @param[in]  statement_period_start_before QDateTime [optional]
    * @param[in]  statement_period_start_on_or_after QDateTime [optional]
    * @param[in]  statement_period_start_on_or_before QDateTime [optional]
    */
    virtual void listAccountStatements(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &statement_period_start_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &statement_period_start_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &statement_period_start_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &statement_period_start_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listAccountTransfers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  entity_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listAccounts(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listAchPrenotifications(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  external_account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listAchTransfers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listBookkeepingAccounts(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listBookkeepingEntries(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    * @param[in]  status_in QList<QString> [optional]
    */
    virtual void listCardDisputes(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status_in QList<QString> [optional]
    */
    virtual void listCardProfiles(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listCards(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listCheckDeposits(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listCheckTransfers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    * @param[in]  route_id QString [optional]
    */
    virtual void listDeclinedTransactions(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &route_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  card_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listDigitalWalletTokens(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &card_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  entity_id QString [optional]
    * @param[in]  category_in QList<QString> [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listDocuments(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &category_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listEntities(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listEventSubscriptions(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    * @param[in]  category_in QList<QString> [optional]
    * @param[in]  associated_object_id QString [optional]
    */
    virtual void listEvents(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &category_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &associated_object_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listExports(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status_in QList<QString> [optional]
    */
    virtual void listExternalAccounts(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    * @param[in]  purpose_in QList<QString> [optional]
    */
    virtual void listFiles(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &purpose_in = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listInboundAchTransferReturns(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listInboundWireDrawdownRequests(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  model_id QString [optional]
    * @param[in]  status QString [optional]
    */
    virtual void listLimits(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listOauthConnections(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  route_id QString [optional]
    * @param[in]  source_id QString [optional]
    * @param[in]  status_in QList<QString> [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listPendingTransactions(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listPrograms(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  external_account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listRealTimePaymentsTransfers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  routing_number QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listRoutingNumbers(const QString &routing_number, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    * @param[in]  category_in QList<QString> [optional]
    * @param[in]  route_id QString [optional]
    */
    virtual void listTransactions(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &category_in = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &route_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listWireDrawdownRequests(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  external_account_id QString [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_on_or_after QDateTime [optional]
    * @param[in]  created_at_on_or_before QDateTime [optional]
    */
    virtual void listWireTransfers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_on_or_before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  oai_look_up_the_balance_for_an_account_parameters OAILook_up_the_balance_for_an_account_parameters [required]
    */
    virtual void lookUpTheBalanceForAnAccount(const OAILook_up_the_balance_for_an_account_parameters &oai_look_up_the_balance_for_an_account_parameters);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void mailASandboxCheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  check_deposit_id QString [required]
    */
    virtual void rejectASandboxCheckDeposit(const QString &check_deposit_id);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void requestAStopPaymentOnACheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  card_id QString [required]
    */
    virtual void retrieveACard(const QString &card_id);

    /**
    * @param[in]  card_dispute_id QString [required]
    */
    virtual void retrieveACardDispute(const QString &card_dispute_id);

    /**
    * @param[in]  card_profile_id QString [required]
    */
    virtual void retrieveACardProfile(const QString &card_profile_id);

    /**
    * @param[in]  check_deposit_id QString [required]
    */
    virtual void retrieveACheckDeposit(const QString &check_deposit_id);

    /**
    * @param[in]  check_transfer_id QString [required]
    */
    virtual void retrieveACheckTransfer(const QString &check_transfer_id);

    /**
    * @param[in]  declined_transaction_id QString [required]
    */
    virtual void retrieveADeclinedTransaction(const QString &declined_transaction_id);

    /**
    * @param[in]  digital_wallet_token_id QString [required]
    */
    virtual void retrieveADigitalWalletToken(const QString &digital_wallet_token_id);

    /**
    * @param[in]  document_id QString [required]
    */
    virtual void retrieveADocument(const QString &document_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void retrieveAFile(const QString &file_id);

    /**
    * @param[in]  limit_id QString [required]
    */
    virtual void retrieveALimit(const QString &limit_id);

    /**
    * @param[in]  pending_transaction_id QString [required]
    */
    virtual void retrieveAPendingTransaction(const QString &pending_transaction_id);

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void retrieveAProgram(const QString &program_id);

    /**
    * @param[in]  real_time_decision_id QString [required]
    */
    virtual void retrieveARealTimeDecision(const QString &real_time_decision_id);

    /**
    * @param[in]  real_time_payments_transfer_id QString [required]
    */
    virtual void retrieveARealTimePaymentsTransfer(const QString &real_time_payments_transfer_id);

    /**
    * @param[in]  transaction_id QString [required]
    */
    virtual void retrieveATransaction(const QString &transaction_id);

    /**
    * @param[in]  wire_drawdown_request_id QString [required]
    */
    virtual void retrieveAWireDrawdownRequest(const QString &wire_drawdown_request_id);

    /**
    * @param[in]  wire_transfer_id QString [required]
    */
    virtual void retrieveAWireTransfer(const QString &wire_transfer_id);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void retrieveAnAccount(const QString &account_id);

    /**
    * @param[in]  account_number_id QString [required]
    */
    virtual void retrieveAnAccountNumber(const QString &account_number_id);

    /**
    * @param[in]  account_statement_id QString [required]
    */
    virtual void retrieveAnAccountStatement(const QString &account_statement_id);

    /**
    * @param[in]  account_transfer_id QString [required]
    */
    virtual void retrieveAnAccountTransfer(const QString &account_transfer_id);

    /**
    * @param[in]  ach_prenotification_id QString [required]
    */
    virtual void retrieveAnAchPrenotification(const QString &ach_prenotification_id);

    /**
    * @param[in]  ach_transfer_id QString [required]
    */
    virtual void retrieveAnAchTransfer(const QString &ach_transfer_id);

    /**
    * @param[in]  entity_id QString [required]
    */
    virtual void retrieveAnEntity(const QString &entity_id);

    /**
    * @param[in]  event_id QString [required]
    */
    virtual void retrieveAnEvent(const QString &event_id);

    /**
    * @param[in]  event_subscription_id QString [required]
    */
    virtual void retrieveAnEventSubscription(const QString &event_subscription_id);

    /**
    * @param[in]  export_id QString [required]
    */
    virtual void retrieveAnExport(const QString &export_id);

    /**
    * @param[in]  external_account_id QString [required]
    */
    virtual void retrieveAnExternalAccount(const QString &external_account_id);

    /**
    * @param[in]  inbound_ach_transfer_return_id QString [required]
    */
    virtual void retrieveAnInboundAchTransferReturn(const QString &inbound_ach_transfer_return_id);

    /**
    * @param[in]  inbound_wire_drawdown_request_id QString [required]
    */
    virtual void retrieveAnInboundWireDrawdownRequest(const QString &inbound_wire_drawdown_request_id);

    /**
    * @param[in]  oauth_connection_id QString [required]
    */
    virtual void retrieveAnOauthConnection(const QString &oauth_connection_id);


    virtual void retrieveGroupDetails();

    /**
    * @param[in]  card_id QString [required]
    */
    virtual void retrieveSensitiveDetailsForACard(const QString &card_id);

    /**
    * @param[in]  ach_transfer_id QString [required]
    * @param[in]  oai_return_a_sandbox_ach_transfer_parameters OAIReturn_a_sandbox_ach_transfer_parameters [required]
    */
    virtual void returnASandboxAchTransfer(const QString &ach_transfer_id, const OAIReturn_a_sandbox_ach_transfer_parameters &oai_return_a_sandbox_ach_transfer_parameters);

    /**
    * @param[in]  check_deposit_id QString [required]
    */
    virtual void returnASandboxCheckDeposit(const QString &check_deposit_id);

    /**
    * @param[in]  check_transfer_id QString [required]
    * @param[in]  oai_return_a_sandbox_check_transfer_parameters OAIReturn_a_sandbox_check_transfer_parameters [required]
    */
    virtual void returnASandboxCheckTransfer(const QString &check_transfer_id, const OAIReturn_a_sandbox_check_transfer_parameters &oai_return_a_sandbox_check_transfer_parameters);

    /**
    * @param[in]  wire_transfer_id QString [required]
    */
    virtual void reverseASandboxWireTransfer(const QString &wire_transfer_id);

    /**
    * @param[in]  oai_simulate_a_real_time_payments_transfer_to_your_account_parameters OAISimulate_a_real_time_payments_transfer_to_your_account_parameters [required]
    */
    virtual void simulateARealTimePaymentsTransferToYourAccount(const OAISimulate_a_real_time_payments_transfer_to_your_account_parameters &oai_simulate_a_real_time_payments_transfer_to_your_account_parameters);

    /**
    * @param[in]  oai_simulate_a_refund_on_a_card_parameters OAISimulate_a_refund_on_a_card_parameters [required]
    */
    virtual void simulateARefundOnACard(const OAISimulate_a_refund_on_a_card_parameters &oai_simulate_a_refund_on_a_card_parameters);

    /**
    * @param[in]  oai_simulate_a_tax_document_being_created_parameters OAISimulate_a_tax_document_being_created_parameters [required]
    */
    virtual void simulateATaxDocumentBeingCreated(const OAISimulate_a_tax_document_being_created_parameters &oai_simulate_a_tax_document_being_created_parameters);

    /**
    * @param[in]  oai_simulate_a_wire_transfer_to_your_account_parameters OAISimulate_a_wire_transfer_to_your_account_parameters [required]
    */
    virtual void simulateAWireTransferToYourAccount(const OAISimulate_a_wire_transfer_to_your_account_parameters &oai_simulate_a_wire_transfer_to_your_account_parameters);

    /**
    * @param[in]  oai_simulate_an_account_statement_being_created_parameters OAISimulate_an_account_statement_being_created_parameters [required]
    */
    virtual void simulateAnAccountStatementBeingCreated(const OAISimulate_an_account_statement_being_created_parameters &oai_simulate_an_account_statement_being_created_parameters);

    /**
    * @param[in]  oai_simulate_an_ach_transfer_to_your_account_parameters OAISimulate_an_ach_transfer_to_your_account_parameters [required]
    */
    virtual void simulateAnAchTransferToYourAccount(const OAISimulate_an_ach_transfer_to_your_account_parameters &oai_simulate_an_ach_transfer_to_your_account_parameters);

    /**
    * @param[in]  oai_simulate_an_authorization_on_a_card_parameters OAISimulate_an_authorization_on_a_card_parameters [required]
    */
    virtual void simulateAnAuthorizationOnACard(const OAISimulate_an_authorization_on_a_card_parameters &oai_simulate_an_authorization_on_a_card_parameters);

    /**
    * @param[in]  oai_simulate_an_inbound_wire_drawdown_request_being_created_parameters OAISimulate_an_inbound_wire_drawdown_request_being_created_parameters [required]
    */
    virtual void simulateAnInboundWireDrawdownRequestBeingCreated(const OAISimulate_an_inbound_wire_drawdown_request_being_created_parameters &oai_simulate_an_inbound_wire_drawdown_request_being_created_parameters);

    /**
    * @param[in]  oai_simulate_an_interest_payment_to_your_account_parameters OAISimulate_an_interest_payment_to_your_account_parameters [required]
    */
    virtual void simulateAnInterestPaymentToYourAccount(const OAISimulate_an_interest_payment_to_your_account_parameters &oai_simulate_an_interest_payment_to_your_account_parameters);

    /**
    * @param[in]  oai_simulate_digital_wallet_provisioning_for_a_card_parameters OAISimulate_digital_wallet_provisioning_for_a_card_parameters [required]
    */
    virtual void simulateDigitalWalletProvisioningForACard(const OAISimulate_digital_wallet_provisioning_for_a_card_parameters &oai_simulate_digital_wallet_provisioning_for_a_card_parameters);

    /**
    * @param[in]  oai_simulate_settling_a_card_authorization_parameters OAISimulate_settling_a_card_authorization_parameters [required]
    */
    virtual void simulateSettlingACardAuthorization(const OAISimulate_settling_a_card_authorization_parameters &oai_simulate_settling_a_card_authorization_parameters);

    /**
    * @param[in]  card_dispute_id QString [required]
    * @param[in]  oai_simulates_advancing_the_state_of_a_card_dispute_parameters OAISimulates_advancing_the_state_of_a_card_dispute_parameters [required]
    */
    virtual void simulatesAdvancingTheStateOfACardDispute(const QString &card_dispute_id, const OAISimulates_advancing_the_state_of_a_card_dispute_parameters &oai_simulates_advancing_the_state_of_a_card_dispute_parameters);

    /**
    * @param[in]  ach_transfer_id QString [required]
    */
    virtual void submitASandboxAchTransfer(const QString &ach_transfer_id);

    /**
    * @param[in]  check_deposit_id QString [required]
    */
    virtual void submitASandboxCheckDeposit(const QString &check_deposit_id);

    /**
    * @param[in]  wire_transfer_id QString [required]
    */
    virtual void submitASandboxWireTransfer(const QString &wire_transfer_id);

    /**
    * @param[in]  card_id QString [required]
    * @param[in]  oai_update_a_card_parameters OAIUpdate_a_card_parameters [required]
    */
    virtual void updateACard(const QString &card_id, const OAIUpdate_a_card_parameters &oai_update_a_card_parameters);

    /**
    * @param[in]  limit_id QString [required]
    * @param[in]  oai_update_a_limit_parameters OAIUpdate_a_limit_parameters [required]
    */
    virtual void updateALimit(const QString &limit_id, const OAIUpdate_a_limit_parameters &oai_update_a_limit_parameters);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_update_an_account_parameters OAIUpdate_an_account_parameters [required]
    */
    virtual void updateAnAccount(const QString &account_id, const OAIUpdate_an_account_parameters &oai_update_an_account_parameters);

    /**
    * @param[in]  account_number_id QString [required]
    * @param[in]  oai_update_an_account_number_parameters OAIUpdate_an_account_number_parameters [required]
    */
    virtual void updateAnAccountNumber(const QString &account_number_id, const OAIUpdate_an_account_number_parameters &oai_update_an_account_number_parameters);

    /**
    * @param[in]  event_subscription_id QString [required]
    * @param[in]  oai_update_an_event_subscription_parameters OAIUpdate_an_event_subscription_parameters [required]
    */
    virtual void updateAnEventSubscription(const QString &event_subscription_id, const OAIUpdate_an_event_subscription_parameters &oai_update_an_event_subscription_parameters);

    /**
    * @param[in]  external_account_id QString [required]
    * @param[in]  oai_update_an_external_account_parameters OAIUpdate_an_external_account_parameters [required]
    */
    virtual void updateAnExternalAccount(const QString &external_account_id, const OAIUpdate_an_external_account_parameters &oai_update_an_external_account_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void actionARealTimeDecisionCallback(OAIHttpRequestWorker *worker);
    void approveACheckTransferCallback(OAIHttpRequestWorker *worker);
    void approveAWireTransferCallback(OAIHttpRequestWorker *worker);
    void approveAnAccountTransferCallback(OAIHttpRequestWorker *worker);
    void approveAnAchTransferCallback(OAIHttpRequestWorker *worker);
    void cancelAPendingAchTransferCallback(OAIHttpRequestWorker *worker);
    void cancelAPendingCheckTransferCallback(OAIHttpRequestWorker *worker);
    void cancelAPendingWireTransferCallback(OAIHttpRequestWorker *worker);
    void cancelAnAccountTransferCallback(OAIHttpRequestWorker *worker);
    void closeAnAccountCallback(OAIHttpRequestWorker *worker);
    void completeASandboxAccountTransferCallback(OAIHttpRequestWorker *worker);
    void completeASandboxRealTimePaymentsTransferCallback(OAIHttpRequestWorker *worker);
    void createABookkeepingAccountCallback(OAIHttpRequestWorker *worker);
    void createABookkeepingEntrySetCallback(OAIHttpRequestWorker *worker);
    void createACardCallback(OAIHttpRequestWorker *worker);
    void createACardDisputeCallback(OAIHttpRequestWorker *worker);
    void createACardProfileCallback(OAIHttpRequestWorker *worker);
    void createACheckDepositCallback(OAIHttpRequestWorker *worker);
    void createACheckTransferCallback(OAIHttpRequestWorker *worker);
    void createAFileCallback(OAIHttpRequestWorker *worker);
    void createALimitCallback(OAIHttpRequestWorker *worker);
    void createARealTimePaymentsTransferCallback(OAIHttpRequestWorker *worker);
    void createASupplementalDocumentForAnEntityCallback(OAIHttpRequestWorker *worker);
    void createAWireDrawdownRequestCallback(OAIHttpRequestWorker *worker);
    void createAWireTransferCallback(OAIHttpRequestWorker *worker);
    void createAnAccountCallback(OAIHttpRequestWorker *worker);
    void createAnAccountNumberCallback(OAIHttpRequestWorker *worker);
    void createAnAccountTransferCallback(OAIHttpRequestWorker *worker);
    void createAnAchPrenotificationCallback(OAIHttpRequestWorker *worker);
    void createAnAchReturnCallback(OAIHttpRequestWorker *worker);
    void createAnAchTransferCallback(OAIHttpRequestWorker *worker);
    void createAnEntityCallback(OAIHttpRequestWorker *worker);
    void createAnEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void createAnExportCallback(OAIHttpRequestWorker *worker);
    void createAnExternalAccountCallback(OAIHttpRequestWorker *worker);
    void depositASandboxCheckTransferCallback(OAIHttpRequestWorker *worker);
    void listAccountNumbersCallback(OAIHttpRequestWorker *worker);
    void listAccountStatementsCallback(OAIHttpRequestWorker *worker);
    void listAccountTransfersCallback(OAIHttpRequestWorker *worker);
    void listAccountsCallback(OAIHttpRequestWorker *worker);
    void listAchPrenotificationsCallback(OAIHttpRequestWorker *worker);
    void listAchTransfersCallback(OAIHttpRequestWorker *worker);
    void listBookkeepingAccountsCallback(OAIHttpRequestWorker *worker);
    void listBookkeepingEntriesCallback(OAIHttpRequestWorker *worker);
    void listCardDisputesCallback(OAIHttpRequestWorker *worker);
    void listCardProfilesCallback(OAIHttpRequestWorker *worker);
    void listCardsCallback(OAIHttpRequestWorker *worker);
    void listCheckDepositsCallback(OAIHttpRequestWorker *worker);
    void listCheckTransfersCallback(OAIHttpRequestWorker *worker);
    void listDeclinedTransactionsCallback(OAIHttpRequestWorker *worker);
    void listDigitalWalletTokensCallback(OAIHttpRequestWorker *worker);
    void listDocumentsCallback(OAIHttpRequestWorker *worker);
    void listEntitiesCallback(OAIHttpRequestWorker *worker);
    void listEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void listEventsCallback(OAIHttpRequestWorker *worker);
    void listExportsCallback(OAIHttpRequestWorker *worker);
    void listExternalAccountsCallback(OAIHttpRequestWorker *worker);
    void listFilesCallback(OAIHttpRequestWorker *worker);
    void listInboundAchTransferReturnsCallback(OAIHttpRequestWorker *worker);
    void listInboundWireDrawdownRequestsCallback(OAIHttpRequestWorker *worker);
    void listLimitsCallback(OAIHttpRequestWorker *worker);
    void listOauthConnectionsCallback(OAIHttpRequestWorker *worker);
    void listPendingTransactionsCallback(OAIHttpRequestWorker *worker);
    void listProgramsCallback(OAIHttpRequestWorker *worker);
    void listRealTimePaymentsTransfersCallback(OAIHttpRequestWorker *worker);
    void listRoutingNumbersCallback(OAIHttpRequestWorker *worker);
    void listTransactionsCallback(OAIHttpRequestWorker *worker);
    void listWireDrawdownRequestsCallback(OAIHttpRequestWorker *worker);
    void listWireTransfersCallback(OAIHttpRequestWorker *worker);
    void lookUpTheBalanceForAnAccountCallback(OAIHttpRequestWorker *worker);
    void mailASandboxCheckTransferCallback(OAIHttpRequestWorker *worker);
    void rejectASandboxCheckDepositCallback(OAIHttpRequestWorker *worker);
    void requestAStopPaymentOnACheckTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveACardCallback(OAIHttpRequestWorker *worker);
    void retrieveACardDisputeCallback(OAIHttpRequestWorker *worker);
    void retrieveACardProfileCallback(OAIHttpRequestWorker *worker);
    void retrieveACheckDepositCallback(OAIHttpRequestWorker *worker);
    void retrieveACheckTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveADeclinedTransactionCallback(OAIHttpRequestWorker *worker);
    void retrieveADigitalWalletTokenCallback(OAIHttpRequestWorker *worker);
    void retrieveADocumentCallback(OAIHttpRequestWorker *worker);
    void retrieveAFileCallback(OAIHttpRequestWorker *worker);
    void retrieveALimitCallback(OAIHttpRequestWorker *worker);
    void retrieveAPendingTransactionCallback(OAIHttpRequestWorker *worker);
    void retrieveAProgramCallback(OAIHttpRequestWorker *worker);
    void retrieveARealTimeDecisionCallback(OAIHttpRequestWorker *worker);
    void retrieveARealTimePaymentsTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveATransactionCallback(OAIHttpRequestWorker *worker);
    void retrieveAWireDrawdownRequestCallback(OAIHttpRequestWorker *worker);
    void retrieveAWireTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAccountCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAccountNumberCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAccountStatementCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAccountTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAchPrenotificationCallback(OAIHttpRequestWorker *worker);
    void retrieveAnAchTransferCallback(OAIHttpRequestWorker *worker);
    void retrieveAnEntityCallback(OAIHttpRequestWorker *worker);
    void retrieveAnEventCallback(OAIHttpRequestWorker *worker);
    void retrieveAnEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void retrieveAnExportCallback(OAIHttpRequestWorker *worker);
    void retrieveAnExternalAccountCallback(OAIHttpRequestWorker *worker);
    void retrieveAnInboundAchTransferReturnCallback(OAIHttpRequestWorker *worker);
    void retrieveAnInboundWireDrawdownRequestCallback(OAIHttpRequestWorker *worker);
    void retrieveAnOauthConnectionCallback(OAIHttpRequestWorker *worker);
    void retrieveGroupDetailsCallback(OAIHttpRequestWorker *worker);
    void retrieveSensitiveDetailsForACardCallback(OAIHttpRequestWorker *worker);
    void returnASandboxAchTransferCallback(OAIHttpRequestWorker *worker);
    void returnASandboxCheckDepositCallback(OAIHttpRequestWorker *worker);
    void returnASandboxCheckTransferCallback(OAIHttpRequestWorker *worker);
    void reverseASandboxWireTransferCallback(OAIHttpRequestWorker *worker);
    void simulateARealTimePaymentsTransferToYourAccountCallback(OAIHttpRequestWorker *worker);
    void simulateARefundOnACardCallback(OAIHttpRequestWorker *worker);
    void simulateATaxDocumentBeingCreatedCallback(OAIHttpRequestWorker *worker);
    void simulateAWireTransferToYourAccountCallback(OAIHttpRequestWorker *worker);
    void simulateAnAccountStatementBeingCreatedCallback(OAIHttpRequestWorker *worker);
    void simulateAnAchTransferToYourAccountCallback(OAIHttpRequestWorker *worker);
    void simulateAnAuthorizationOnACardCallback(OAIHttpRequestWorker *worker);
    void simulateAnInboundWireDrawdownRequestBeingCreatedCallback(OAIHttpRequestWorker *worker);
    void simulateAnInterestPaymentToYourAccountCallback(OAIHttpRequestWorker *worker);
    void simulateDigitalWalletProvisioningForACardCallback(OAIHttpRequestWorker *worker);
    void simulateSettlingACardAuthorizationCallback(OAIHttpRequestWorker *worker);
    void simulatesAdvancingTheStateOfACardDisputeCallback(OAIHttpRequestWorker *worker);
    void submitASandboxAchTransferCallback(OAIHttpRequestWorker *worker);
    void submitASandboxCheckDepositCallback(OAIHttpRequestWorker *worker);
    void submitASandboxWireTransferCallback(OAIHttpRequestWorker *worker);
    void updateACardCallback(OAIHttpRequestWorker *worker);
    void updateALimitCallback(OAIHttpRequestWorker *worker);
    void updateAnAccountCallback(OAIHttpRequestWorker *worker);
    void updateAnAccountNumberCallback(OAIHttpRequestWorker *worker);
    void updateAnEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateAnExternalAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void actionARealTimeDecisionSignal(OAIReal_time_decision summary);
    void approveACheckTransferSignal(OAICheck_transfer summary);
    void approveAWireTransferSignal(OAIWire_transfer summary);
    void approveAnAccountTransferSignal(OAIAccount_transfer summary);
    void approveAnAchTransferSignal(OAIAch_transfer summary);
    void cancelAPendingAchTransferSignal(OAIAch_transfer summary);
    void cancelAPendingCheckTransferSignal(OAICheck_transfer summary);
    void cancelAPendingWireTransferSignal(OAIWire_transfer summary);
    void cancelAnAccountTransferSignal(OAIAccount_transfer summary);
    void closeAnAccountSignal(OAIAccount summary);
    void completeASandboxAccountTransferSignal(OAIAccount_transfer summary);
    void completeASandboxRealTimePaymentsTransferSignal(OAIReal_time_payments_transfer summary);
    void createABookkeepingAccountSignal(OAIBookkeeping_account summary);
    void createABookkeepingEntrySetSignal(OAIBookkeeping_entry_set summary);
    void createACardSignal(OAICard summary);
    void createACardDisputeSignal(OAICard_dispute summary);
    void createACardProfileSignal(OAICard_profile summary);
    void createACheckDepositSignal(OAICheck_deposit summary);
    void createACheckTransferSignal(OAICheck_transfer summary);
    void createAFileSignal(OAIHttpFileElement summary);
    void createALimitSignal(OAILimit summary);
    void createARealTimePaymentsTransferSignal(OAIReal_time_payments_transfer summary);
    void createASupplementalDocumentForAnEntitySignal(OAIEntity summary);
    void createAWireDrawdownRequestSignal(OAIWire_drawdown_request summary);
    void createAWireTransferSignal(OAIWire_transfer summary);
    void createAnAccountSignal(OAIAccount summary);
    void createAnAccountNumberSignal(OAIAccount_number summary);
    void createAnAccountTransferSignal(OAIAccount_transfer summary);
    void createAnAchPrenotificationSignal(OAIAch_prenotification summary);
    void createAnAchReturnSignal(OAIInbound_ach_transfer_return summary);
    void createAnAchTransferSignal(OAIAch_transfer summary);
    void createAnEntitySignal(OAIEntity summary);
    void createAnEventSubscriptionSignal(OAIEvent_subscription summary);
    void createAnExportSignal(OAIExport summary);
    void createAnExternalAccountSignal(OAIExternal_account summary);
    void depositASandboxCheckTransferSignal(OAICheck_transfer summary);
    void listAccountNumbersSignal(OAIAccount_number_list summary);
    void listAccountStatementsSignal(OAIAccount_statement_list summary);
    void listAccountTransfersSignal(OAIAccount_transfer_list summary);
    void listAccountsSignal(OAIAccount_list summary);
    void listAchPrenotificationsSignal(OAIAch_prenotification_list summary);
    void listAchTransfersSignal(OAIAch_transfer_list summary);
    void listBookkeepingAccountsSignal(OAIBookkeeping_account_list summary);
    void listBookkeepingEntriesSignal(OAIBookkeeping_entry_list summary);
    void listCardDisputesSignal(OAICard_dispute_list summary);
    void listCardProfilesSignal(OAICard_profile_list summary);
    void listCardsSignal(OAICard_list summary);
    void listCheckDepositsSignal(OAICheck_deposit_list summary);
    void listCheckTransfersSignal(OAICheck_transfer_list summary);
    void listDeclinedTransactionsSignal(OAIDeclined_transaction_list summary);
    void listDigitalWalletTokensSignal(OAIDigital_wallet_token_list summary);
    void listDocumentsSignal(OAIDocument_list summary);
    void listEntitiesSignal(OAIEntity_list summary);
    void listEventSubscriptionsSignal(OAIEvent_subscription_list summary);
    void listEventsSignal(OAIEvent_list summary);
    void listExportsSignal(OAIExport_list summary);
    void listExternalAccountsSignal(OAIExternal_account_list summary);
    void listFilesSignal(OAIFile_list summary);
    void listInboundAchTransferReturnsSignal(OAIInbound_ach_transfer_return_list summary);
    void listInboundWireDrawdownRequestsSignal(OAIInbound_wire_drawdown_request_list summary);
    void listLimitsSignal(OAILimit_list summary);
    void listOauthConnectionsSignal(OAIOauth_connection_list summary);
    void listPendingTransactionsSignal(OAIPending_transaction_list summary);
    void listProgramsSignal(OAIProgram_list summary);
    void listRealTimePaymentsTransfersSignal(OAIReal_time_payments_transfer_list summary);
    void listRoutingNumbersSignal(OAIRouting_number_list summary);
    void listTransactionsSignal(OAITransaction_list summary);
    void listWireDrawdownRequestsSignal(OAIWire_drawdown_request_list summary);
    void listWireTransfersSignal(OAIWire_transfer_list summary);
    void lookUpTheBalanceForAnAccountSignal(OAIBalance_lookup summary);
    void mailASandboxCheckTransferSignal(OAICheck_transfer summary);
    void rejectASandboxCheckDepositSignal(OAICheck_deposit summary);
    void requestAStopPaymentOnACheckTransferSignal(OAICheck_transfer summary);
    void retrieveACardSignal(OAICard summary);
    void retrieveACardDisputeSignal(OAICard_dispute summary);
    void retrieveACardProfileSignal(OAICard_profile summary);
    void retrieveACheckDepositSignal(OAICheck_deposit summary);
    void retrieveACheckTransferSignal(OAICheck_transfer summary);
    void retrieveADeclinedTransactionSignal(OAIDeclined_transaction summary);
    void retrieveADigitalWalletTokenSignal(OAIDigital_wallet_token summary);
    void retrieveADocumentSignal(OAIDocument summary);
    void retrieveAFileSignal(OAIHttpFileElement summary);
    void retrieveALimitSignal(OAILimit summary);
    void retrieveAPendingTransactionSignal(OAIPending_transaction summary);
    void retrieveAProgramSignal(OAIProgram summary);
    void retrieveARealTimeDecisionSignal(OAIReal_time_decision summary);
    void retrieveARealTimePaymentsTransferSignal(OAIReal_time_payments_transfer summary);
    void retrieveATransactionSignal(OAITransaction summary);
    void retrieveAWireDrawdownRequestSignal(OAIWire_drawdown_request summary);
    void retrieveAWireTransferSignal(OAIWire_transfer summary);
    void retrieveAnAccountSignal(OAIAccount summary);
    void retrieveAnAccountNumberSignal(OAIAccount_number summary);
    void retrieveAnAccountStatementSignal(OAIAccount_statement summary);
    void retrieveAnAccountTransferSignal(OAIAccount_transfer summary);
    void retrieveAnAchPrenotificationSignal(OAIAch_prenotification summary);
    void retrieveAnAchTransferSignal(OAIAch_transfer summary);
    void retrieveAnEntitySignal(OAIEntity summary);
    void retrieveAnEventSignal(OAIEvent summary);
    void retrieveAnEventSubscriptionSignal(OAIEvent_subscription summary);
    void retrieveAnExportSignal(OAIExport summary);
    void retrieveAnExternalAccountSignal(OAIExternal_account summary);
    void retrieveAnInboundAchTransferReturnSignal(OAIInbound_ach_transfer_return summary);
    void retrieveAnInboundWireDrawdownRequestSignal(OAIInbound_wire_drawdown_request summary);
    void retrieveAnOauthConnectionSignal(OAIOauth_connection summary);
    void retrieveGroupDetailsSignal(OAIGroup summary);
    void retrieveSensitiveDetailsForACardSignal(OAICard_details summary);
    void returnASandboxAchTransferSignal(OAIAch_transfer summary);
    void returnASandboxCheckDepositSignal(OAICheck_deposit summary);
    void returnASandboxCheckTransferSignal(OAICheck_transfer summary);
    void reverseASandboxWireTransferSignal(OAIWire_transfer summary);
    void simulateARealTimePaymentsTransferToYourAccountSignal(OAIInbound_real_time_payments_transfer_simulation_result summary);
    void simulateARefundOnACardSignal(OAITransaction summary);
    void simulateATaxDocumentBeingCreatedSignal(OAIDocument summary);
    void simulateAWireTransferToYourAccountSignal(OAIInbound_wire_transfer_simulation_result summary);
    void simulateAnAccountStatementBeingCreatedSignal(OAIAccount_statement summary);
    void simulateAnAchTransferToYourAccountSignal(OAIInbound_ach_transfer_simulation_result summary);
    void simulateAnAuthorizationOnACardSignal(OAIInbound_card_authorization_simulation_result summary);
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignal(OAIInbound_wire_drawdown_request summary);
    void simulateAnInterestPaymentToYourAccountSignal(OAIInterest_payment_simulation_result summary);
    void simulateDigitalWalletProvisioningForACardSignal(OAIInbound_digital_wallet_token_request_simulation_result summary);
    void simulateSettlingACardAuthorizationSignal(OAITransaction summary);
    void simulatesAdvancingTheStateOfACardDisputeSignal(OAICard_dispute summary);
    void submitASandboxAchTransferSignal(OAIAch_transfer summary);
    void submitASandboxCheckDepositSignal(OAICheck_deposit summary);
    void submitASandboxWireTransferSignal(OAIWire_transfer summary);
    void updateACardSignal(OAICard summary);
    void updateALimitSignal(OAILimit summary);
    void updateAnAccountSignal(OAIAccount summary);
    void updateAnAccountNumberSignal(OAIAccount_number summary);
    void updateAnEventSubscriptionSignal(OAIEvent_subscription summary);
    void updateAnExternalAccountSignal(OAIExternal_account summary);


    void actionARealTimeDecisionSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_decision summary);
    void approveACheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void approveAWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void approveAnAccountTransferSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer summary);
    void approveAnAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void cancelAPendingAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void cancelAPendingCheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void cancelAPendingWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void cancelAnAccountTransferSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer summary);
    void closeAnAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void completeASandboxAccountTransferSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer summary);
    void completeASandboxRealTimePaymentsTransferSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_payments_transfer summary);
    void createABookkeepingAccountSignalFull(OAIHttpRequestWorker *worker, OAIBookkeeping_account summary);
    void createABookkeepingEntrySetSignalFull(OAIHttpRequestWorker *worker, OAIBookkeeping_entry_set summary);
    void createACardSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void createACardDisputeSignalFull(OAIHttpRequestWorker *worker, OAICard_dispute summary);
    void createACardProfileSignalFull(OAIHttpRequestWorker *worker, OAICard_profile summary);
    void createACheckDepositSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit summary);
    void createACheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void createAFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void createALimitSignalFull(OAIHttpRequestWorker *worker, OAILimit summary);
    void createARealTimePaymentsTransferSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_payments_transfer summary);
    void createASupplementalDocumentForAnEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntity summary);
    void createAWireDrawdownRequestSignalFull(OAIHttpRequestWorker *worker, OAIWire_drawdown_request summary);
    void createAWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void createAnAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void createAnAccountNumberSignalFull(OAIHttpRequestWorker *worker, OAIAccount_number summary);
    void createAnAccountTransferSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer summary);
    void createAnAchPrenotificationSignalFull(OAIHttpRequestWorker *worker, OAIAch_prenotification summary);
    void createAnAchReturnSignalFull(OAIHttpRequestWorker *worker, OAIInbound_ach_transfer_return summary);
    void createAnAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void createAnEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntity summary);
    void createAnEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEvent_subscription summary);
    void createAnExportSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void createAnExternalAccountSignalFull(OAIHttpRequestWorker *worker, OAIExternal_account summary);
    void depositASandboxCheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void listAccountNumbersSignalFull(OAIHttpRequestWorker *worker, OAIAccount_number_list summary);
    void listAccountStatementsSignalFull(OAIHttpRequestWorker *worker, OAIAccount_statement_list summary);
    void listAccountTransfersSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer_list summary);
    void listAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAccount_list summary);
    void listAchPrenotificationsSignalFull(OAIHttpRequestWorker *worker, OAIAch_prenotification_list summary);
    void listAchTransfersSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer_list summary);
    void listBookkeepingAccountsSignalFull(OAIHttpRequestWorker *worker, OAIBookkeeping_account_list summary);
    void listBookkeepingEntriesSignalFull(OAIHttpRequestWorker *worker, OAIBookkeeping_entry_list summary);
    void listCardDisputesSignalFull(OAIHttpRequestWorker *worker, OAICard_dispute_list summary);
    void listCardProfilesSignalFull(OAIHttpRequestWorker *worker, OAICard_profile_list summary);
    void listCardsSignalFull(OAIHttpRequestWorker *worker, OAICard_list summary);
    void listCheckDepositsSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit_list summary);
    void listCheckTransfersSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer_list summary);
    void listDeclinedTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIDeclined_transaction_list summary);
    void listDigitalWalletTokensSignalFull(OAIHttpRequestWorker *worker, OAIDigital_wallet_token_list summary);
    void listDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocument_list summary);
    void listEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIEntity_list summary);
    void listEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_subscription_list summary);
    void listEventsSignalFull(OAIHttpRequestWorker *worker, OAIEvent_list summary);
    void listExportsSignalFull(OAIHttpRequestWorker *worker, OAIExport_list summary);
    void listExternalAccountsSignalFull(OAIHttpRequestWorker *worker, OAIExternal_account_list summary);
    void listFilesSignalFull(OAIHttpRequestWorker *worker, OAIFile_list summary);
    void listInboundAchTransferReturnsSignalFull(OAIHttpRequestWorker *worker, OAIInbound_ach_transfer_return_list summary);
    void listInboundWireDrawdownRequestsSignalFull(OAIHttpRequestWorker *worker, OAIInbound_wire_drawdown_request_list summary);
    void listLimitsSignalFull(OAIHttpRequestWorker *worker, OAILimit_list summary);
    void listOauthConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIOauth_connection_list summary);
    void listPendingTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIPending_transaction_list summary);
    void listProgramsSignalFull(OAIHttpRequestWorker *worker, OAIProgram_list summary);
    void listRealTimePaymentsTransfersSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_payments_transfer_list summary);
    void listRoutingNumbersSignalFull(OAIHttpRequestWorker *worker, OAIRouting_number_list summary);
    void listTransactionsSignalFull(OAIHttpRequestWorker *worker, OAITransaction_list summary);
    void listWireDrawdownRequestsSignalFull(OAIHttpRequestWorker *worker, OAIWire_drawdown_request_list summary);
    void listWireTransfersSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer_list summary);
    void lookUpTheBalanceForAnAccountSignalFull(OAIHttpRequestWorker *worker, OAIBalance_lookup summary);
    void mailASandboxCheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void rejectASandboxCheckDepositSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit summary);
    void requestAStopPaymentOnACheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void retrieveACardSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void retrieveACardDisputeSignalFull(OAIHttpRequestWorker *worker, OAICard_dispute summary);
    void retrieveACardProfileSignalFull(OAIHttpRequestWorker *worker, OAICard_profile summary);
    void retrieveACheckDepositSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit summary);
    void retrieveACheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void retrieveADeclinedTransactionSignalFull(OAIHttpRequestWorker *worker, OAIDeclined_transaction summary);
    void retrieveADigitalWalletTokenSignalFull(OAIHttpRequestWorker *worker, OAIDigital_wallet_token summary);
    void retrieveADocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void retrieveAFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void retrieveALimitSignalFull(OAIHttpRequestWorker *worker, OAILimit summary);
    void retrieveAPendingTransactionSignalFull(OAIHttpRequestWorker *worker, OAIPending_transaction summary);
    void retrieveAProgramSignalFull(OAIHttpRequestWorker *worker, OAIProgram summary);
    void retrieveARealTimeDecisionSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_decision summary);
    void retrieveARealTimePaymentsTransferSignalFull(OAIHttpRequestWorker *worker, OAIReal_time_payments_transfer summary);
    void retrieveATransactionSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void retrieveAWireDrawdownRequestSignalFull(OAIHttpRequestWorker *worker, OAIWire_drawdown_request summary);
    void retrieveAWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void retrieveAnAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void retrieveAnAccountNumberSignalFull(OAIHttpRequestWorker *worker, OAIAccount_number summary);
    void retrieveAnAccountStatementSignalFull(OAIHttpRequestWorker *worker, OAIAccount_statement summary);
    void retrieveAnAccountTransferSignalFull(OAIHttpRequestWorker *worker, OAIAccount_transfer summary);
    void retrieveAnAchPrenotificationSignalFull(OAIHttpRequestWorker *worker, OAIAch_prenotification summary);
    void retrieveAnAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void retrieveAnEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntity summary);
    void retrieveAnEventSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void retrieveAnEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEvent_subscription summary);
    void retrieveAnExportSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void retrieveAnExternalAccountSignalFull(OAIHttpRequestWorker *worker, OAIExternal_account summary);
    void retrieveAnInboundAchTransferReturnSignalFull(OAIHttpRequestWorker *worker, OAIInbound_ach_transfer_return summary);
    void retrieveAnInboundWireDrawdownRequestSignalFull(OAIHttpRequestWorker *worker, OAIInbound_wire_drawdown_request summary);
    void retrieveAnOauthConnectionSignalFull(OAIHttpRequestWorker *worker, OAIOauth_connection summary);
    void retrieveGroupDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void retrieveSensitiveDetailsForACardSignalFull(OAIHttpRequestWorker *worker, OAICard_details summary);
    void returnASandboxAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void returnASandboxCheckDepositSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit summary);
    void returnASandboxCheckTransferSignalFull(OAIHttpRequestWorker *worker, OAICheck_transfer summary);
    void reverseASandboxWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void simulateARealTimePaymentsTransferToYourAccountSignalFull(OAIHttpRequestWorker *worker, OAIInbound_real_time_payments_transfer_simulation_result summary);
    void simulateARefundOnACardSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void simulateATaxDocumentBeingCreatedSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void simulateAWireTransferToYourAccountSignalFull(OAIHttpRequestWorker *worker, OAIInbound_wire_transfer_simulation_result summary);
    void simulateAnAccountStatementBeingCreatedSignalFull(OAIHttpRequestWorker *worker, OAIAccount_statement summary);
    void simulateAnAchTransferToYourAccountSignalFull(OAIHttpRequestWorker *worker, OAIInbound_ach_transfer_simulation_result summary);
    void simulateAnAuthorizationOnACardSignalFull(OAIHttpRequestWorker *worker, OAIInbound_card_authorization_simulation_result summary);
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignalFull(OAIHttpRequestWorker *worker, OAIInbound_wire_drawdown_request summary);
    void simulateAnInterestPaymentToYourAccountSignalFull(OAIHttpRequestWorker *worker, OAIInterest_payment_simulation_result summary);
    void simulateDigitalWalletProvisioningForACardSignalFull(OAIHttpRequestWorker *worker, OAIInbound_digital_wallet_token_request_simulation_result summary);
    void simulateSettlingACardAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void simulatesAdvancingTheStateOfACardDisputeSignalFull(OAIHttpRequestWorker *worker, OAICard_dispute summary);
    void submitASandboxAchTransferSignalFull(OAIHttpRequestWorker *worker, OAIAch_transfer summary);
    void submitASandboxCheckDepositSignalFull(OAIHttpRequestWorker *worker, OAICheck_deposit summary);
    void submitASandboxWireTransferSignalFull(OAIHttpRequestWorker *worker, OAIWire_transfer summary);
    void updateACardSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void updateALimitSignalFull(OAIHttpRequestWorker *worker, OAILimit summary);
    void updateAnAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void updateAnAccountNumberSignalFull(OAIHttpRequestWorker *worker, OAIAccount_number summary);
    void updateAnEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEvent_subscription summary);
    void updateAnExternalAccountSignalFull(OAIHttpRequestWorker *worker, OAIExternal_account summary);

    Q_DECL_DEPRECATED_X("Use actionARealTimeDecisionSignalError() instead")
    void actionARealTimeDecisionSignalE(OAIReal_time_decision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionARealTimeDecisionSignalError(OAIReal_time_decision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveACheckTransferSignalError() instead")
    void approveACheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void approveACheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAWireTransferSignalError() instead")
    void approveAWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAnAccountTransferSignalError() instead")
    void approveAnAccountTransferSignalE(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAnAccountTransferSignalError(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAnAchTransferSignalError() instead")
    void approveAnAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAnAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingAchTransferSignalError() instead")
    void cancelAPendingAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingCheckTransferSignalError() instead")
    void cancelAPendingCheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingCheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingWireTransferSignalError() instead")
    void cancelAPendingWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAnAccountTransferSignalError() instead")
    void cancelAnAccountTransferSignalE(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAnAccountTransferSignalError(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeAnAccountSignalError() instead")
    void closeAnAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void closeAnAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeASandboxAccountTransferSignalError() instead")
    void completeASandboxAccountTransferSignalE(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeASandboxAccountTransferSignalError(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeASandboxRealTimePaymentsTransferSignalError() instead")
    void completeASandboxRealTimePaymentsTransferSignalE(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeASandboxRealTimePaymentsTransferSignalError(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createABookkeepingAccountSignalError() instead")
    void createABookkeepingAccountSignalE(OAIBookkeeping_account summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createABookkeepingAccountSignalError(OAIBookkeeping_account summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createABookkeepingEntrySetSignalError() instead")
    void createABookkeepingEntrySetSignalE(OAIBookkeeping_entry_set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createABookkeepingEntrySetSignalError(OAIBookkeeping_entry_set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardSignalError() instead")
    void createACardSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardDisputeSignalError() instead")
    void createACardDisputeSignalE(OAICard_dispute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardDisputeSignalError(OAICard_dispute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardProfileSignalError() instead")
    void createACardProfileSignalE(OAICard_profile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardProfileSignalError(OAICard_profile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACheckDepositSignalError() instead")
    void createACheckDepositSignalE(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createACheckDepositSignalError(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACheckTransferSignalError() instead")
    void createACheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createACheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAFileSignalError() instead")
    void createAFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createALimitSignalError() instead")
    void createALimitSignalE(OAILimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createALimitSignalError(OAILimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createARealTimePaymentsTransferSignalError() instead")
    void createARealTimePaymentsTransferSignalE(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createARealTimePaymentsTransferSignalError(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createASupplementalDocumentForAnEntitySignalError() instead")
    void createASupplementalDocumentForAnEntitySignalE(OAIEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createASupplementalDocumentForAnEntitySignalError(OAIEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAWireDrawdownRequestSignalError() instead")
    void createAWireDrawdownRequestSignalE(OAIWire_drawdown_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAWireDrawdownRequestSignalError(OAIWire_drawdown_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAWireTransferSignalError() instead")
    void createAWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountSignalError() instead")
    void createAnAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountNumberSignalError() instead")
    void createAnAccountNumberSignalE(OAIAccount_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountNumberSignalError(OAIAccount_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountTransferSignalError() instead")
    void createAnAccountTransferSignalE(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountTransferSignalError(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchPrenotificationSignalError() instead")
    void createAnAchPrenotificationSignalE(OAIAch_prenotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchPrenotificationSignalError(OAIAch_prenotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchReturnSignalError() instead")
    void createAnAchReturnSignalE(OAIInbound_ach_transfer_return summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchReturnSignalError(OAIInbound_ach_transfer_return summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchTransferSignalError() instead")
    void createAnAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnEntitySignalError() instead")
    void createAnEntitySignalE(OAIEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnEntitySignalError(OAIEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnEventSubscriptionSignalError() instead")
    void createAnEventSubscriptionSignalE(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnEventSubscriptionSignalError(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnExportSignalError() instead")
    void createAnExportSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnExportSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnExternalAccountSignalError() instead")
    void createAnExternalAccountSignalE(OAIExternal_account summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnExternalAccountSignalError(OAIExternal_account summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositASandboxCheckTransferSignalError() instead")
    void depositASandboxCheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depositASandboxCheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountNumbersSignalError() instead")
    void listAccountNumbersSignalE(OAIAccount_number_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountNumbersSignalError(OAIAccount_number_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountStatementsSignalError() instead")
    void listAccountStatementsSignalE(OAIAccount_statement_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountStatementsSignalError(OAIAccount_statement_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountTransfersSignalError() instead")
    void listAccountTransfersSignalE(OAIAccount_transfer_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountTransfersSignalError(OAIAccount_transfer_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalError() instead")
    void listAccountsSignalE(OAIAccount_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalError(OAIAccount_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAchPrenotificationsSignalError() instead")
    void listAchPrenotificationsSignalE(OAIAch_prenotification_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAchPrenotificationsSignalError(OAIAch_prenotification_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAchTransfersSignalError() instead")
    void listAchTransfersSignalE(OAIAch_transfer_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAchTransfersSignalError(OAIAch_transfer_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookkeepingAccountsSignalError() instead")
    void listBookkeepingAccountsSignalE(OAIBookkeeping_account_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookkeepingAccountsSignalError(OAIBookkeeping_account_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookkeepingEntriesSignalError() instead")
    void listBookkeepingEntriesSignalE(OAIBookkeeping_entry_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookkeepingEntriesSignalError(OAIBookkeeping_entry_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardDisputesSignalError() instead")
    void listCardDisputesSignalE(OAICard_dispute_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardDisputesSignalError(OAICard_dispute_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardProfilesSignalError() instead")
    void listCardProfilesSignalE(OAICard_profile_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardProfilesSignalError(OAICard_profile_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalError() instead")
    void listCardsSignalE(OAICard_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalError(OAICard_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckDepositsSignalError() instead")
    void listCheckDepositsSignalE(OAICheck_deposit_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckDepositsSignalError(OAICheck_deposit_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckTransfersSignalError() instead")
    void listCheckTransfersSignalE(OAICheck_transfer_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckTransfersSignalError(OAICheck_transfer_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeclinedTransactionsSignalError() instead")
    void listDeclinedTransactionsSignalE(OAIDeclined_transaction_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeclinedTransactionsSignalError(OAIDeclined_transaction_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDigitalWalletTokensSignalError() instead")
    void listDigitalWalletTokensSignalE(OAIDigital_wallet_token_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDigitalWalletTokensSignalError(OAIDigital_wallet_token_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentsSignalError() instead")
    void listDocumentsSignalE(OAIDocument_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentsSignalError(OAIDocument_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEntitiesSignalError() instead")
    void listEntitiesSignalE(OAIEntity_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEntitiesSignalError(OAIEntity_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventSubscriptionsSignalError() instead")
    void listEventSubscriptionsSignalE(OAIEvent_subscription_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventSubscriptionsSignalError(OAIEvent_subscription_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventsSignalError() instead")
    void listEventsSignalE(OAIEvent_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventsSignalError(OAIEvent_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExportsSignalError() instead")
    void listExportsSignalE(OAIExport_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listExportsSignalError(OAIExport_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExternalAccountsSignalError() instead")
    void listExternalAccountsSignalE(OAIExternal_account_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listExternalAccountsSignalError(OAIExternal_account_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFilesSignalError() instead")
    void listFilesSignalE(OAIFile_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFilesSignalError(OAIFile_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInboundAchTransferReturnsSignalError() instead")
    void listInboundAchTransferReturnsSignalE(OAIInbound_ach_transfer_return_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInboundAchTransferReturnsSignalError(OAIInbound_ach_transfer_return_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInboundWireDrawdownRequestsSignalError() instead")
    void listInboundWireDrawdownRequestsSignalE(OAIInbound_wire_drawdown_request_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInboundWireDrawdownRequestsSignalError(OAIInbound_wire_drawdown_request_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLimitsSignalError() instead")
    void listLimitsSignalE(OAILimit_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLimitsSignalError(OAILimit_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOauthConnectionsSignalError() instead")
    void listOauthConnectionsSignalE(OAIOauth_connection_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOauthConnectionsSignalError(OAIOauth_connection_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPendingTransactionsSignalError() instead")
    void listPendingTransactionsSignalE(OAIPending_transaction_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPendingTransactionsSignalError(OAIPending_transaction_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgramsSignalError() instead")
    void listProgramsSignalE(OAIProgram_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgramsSignalError(OAIProgram_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealTimePaymentsTransfersSignalError() instead")
    void listRealTimePaymentsTransfersSignalE(OAIReal_time_payments_transfer_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealTimePaymentsTransfersSignalError(OAIReal_time_payments_transfer_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoutingNumbersSignalError() instead")
    void listRoutingNumbersSignalE(OAIRouting_number_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoutingNumbersSignalError(OAIRouting_number_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalError() instead")
    void listTransactionsSignalE(OAITransaction_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalError(OAITransaction_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWireDrawdownRequestsSignalError() instead")
    void listWireDrawdownRequestsSignalE(OAIWire_drawdown_request_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWireDrawdownRequestsSignalError(OAIWire_drawdown_request_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWireTransfersSignalError() instead")
    void listWireTransfersSignalE(OAIWire_transfer_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWireTransfersSignalError(OAIWire_transfer_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lookUpTheBalanceForAnAccountSignalError() instead")
    void lookUpTheBalanceForAnAccountSignalE(OAIBalance_lookup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lookUpTheBalanceForAnAccountSignalError(OAIBalance_lookup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mailASandboxCheckTransferSignalError() instead")
    void mailASandboxCheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mailASandboxCheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectASandboxCheckDepositSignalError() instead")
    void rejectASandboxCheckDepositSignalE(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectASandboxCheckDepositSignalError(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAStopPaymentOnACheckTransferSignalError() instead")
    void requestAStopPaymentOnACheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAStopPaymentOnACheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardSignalError() instead")
    void retrieveACardSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardDisputeSignalError() instead")
    void retrieveACardDisputeSignalE(OAICard_dispute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardDisputeSignalError(OAICard_dispute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardProfileSignalError() instead")
    void retrieveACardProfileSignalE(OAICard_profile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardProfileSignalError(OAICard_profile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACheckDepositSignalError() instead")
    void retrieveACheckDepositSignalE(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACheckDepositSignalError(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACheckTransferSignalError() instead")
    void retrieveACheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADeclinedTransactionSignalError() instead")
    void retrieveADeclinedTransactionSignalE(OAIDeclined_transaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADeclinedTransactionSignalError(OAIDeclined_transaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADigitalWalletTokenSignalError() instead")
    void retrieveADigitalWalletTokenSignalE(OAIDigital_wallet_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADigitalWalletTokenSignalError(OAIDigital_wallet_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADocumentSignalError() instead")
    void retrieveADocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAFileSignalError() instead")
    void retrieveAFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveALimitSignalError() instead")
    void retrieveALimitSignalE(OAILimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveALimitSignalError(OAILimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPendingTransactionSignalError() instead")
    void retrieveAPendingTransactionSignalE(OAIPending_transaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPendingTransactionSignalError(OAIPending_transaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAProgramSignalError() instead")
    void retrieveAProgramSignalE(OAIProgram summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAProgramSignalError(OAIProgram summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveARealTimeDecisionSignalError() instead")
    void retrieveARealTimeDecisionSignalE(OAIReal_time_decision summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveARealTimeDecisionSignalError(OAIReal_time_decision summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveARealTimePaymentsTransferSignalError() instead")
    void retrieveARealTimePaymentsTransferSignalE(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveARealTimePaymentsTransferSignalError(OAIReal_time_payments_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveATransactionSignalError() instead")
    void retrieveATransactionSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveATransactionSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAWireDrawdownRequestSignalError() instead")
    void retrieveAWireDrawdownRequestSignalE(OAIWire_drawdown_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAWireDrawdownRequestSignalError(OAIWire_drawdown_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAWireTransferSignalError() instead")
    void retrieveAWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountSignalError() instead")
    void retrieveAnAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountNumberSignalError() instead")
    void retrieveAnAccountNumberSignalE(OAIAccount_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountNumberSignalError(OAIAccount_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountStatementSignalError() instead")
    void retrieveAnAccountStatementSignalE(OAIAccount_statement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountStatementSignalError(OAIAccount_statement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountTransferSignalError() instead")
    void retrieveAnAccountTransferSignalE(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountTransferSignalError(OAIAccount_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAchPrenotificationSignalError() instead")
    void retrieveAnAchPrenotificationSignalE(OAIAch_prenotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAchPrenotificationSignalError(OAIAch_prenotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAchTransferSignalError() instead")
    void retrieveAnAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEntitySignalError() instead")
    void retrieveAnEntitySignalE(OAIEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEntitySignalError(OAIEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEventSignalError() instead")
    void retrieveAnEventSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEventSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEventSubscriptionSignalError() instead")
    void retrieveAnEventSubscriptionSignalE(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEventSubscriptionSignalError(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnExportSignalError() instead")
    void retrieveAnExportSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnExportSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnExternalAccountSignalError() instead")
    void retrieveAnExternalAccountSignalE(OAIExternal_account summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnExternalAccountSignalError(OAIExternal_account summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnInboundAchTransferReturnSignalError() instead")
    void retrieveAnInboundAchTransferReturnSignalE(OAIInbound_ach_transfer_return summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnInboundAchTransferReturnSignalError(OAIInbound_ach_transfer_return summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnInboundWireDrawdownRequestSignalError() instead")
    void retrieveAnInboundWireDrawdownRequestSignalE(OAIInbound_wire_drawdown_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnInboundWireDrawdownRequestSignalError(OAIInbound_wire_drawdown_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnOauthConnectionSignalError() instead")
    void retrieveAnOauthConnectionSignalE(OAIOauth_connection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnOauthConnectionSignalError(OAIOauth_connection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGroupDetailsSignalError() instead")
    void retrieveGroupDetailsSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGroupDetailsSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSensitiveDetailsForACardSignalError() instead")
    void retrieveSensitiveDetailsForACardSignalE(OAICard_details summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSensitiveDetailsForACardSignalError(OAICard_details summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxAchTransferSignalError() instead")
    void returnASandboxAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxCheckDepositSignalError() instead")
    void returnASandboxCheckDepositSignalE(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxCheckDepositSignalError(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxCheckTransferSignalError() instead")
    void returnASandboxCheckTransferSignalE(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxCheckTransferSignalError(OAICheck_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reverseASandboxWireTransferSignalError() instead")
    void reverseASandboxWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reverseASandboxWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateARealTimePaymentsTransferToYourAccountSignalError() instead")
    void simulateARealTimePaymentsTransferToYourAccountSignalE(OAIInbound_real_time_payments_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateARealTimePaymentsTransferToYourAccountSignalError(OAIInbound_real_time_payments_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateARefundOnACardSignalError() instead")
    void simulateARefundOnACardSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateARefundOnACardSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateATaxDocumentBeingCreatedSignalError() instead")
    void simulateATaxDocumentBeingCreatedSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateATaxDocumentBeingCreatedSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAWireTransferToYourAccountSignalError() instead")
    void simulateAWireTransferToYourAccountSignalE(OAIInbound_wire_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAWireTransferToYourAccountSignalError(OAIInbound_wire_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAccountStatementBeingCreatedSignalError() instead")
    void simulateAnAccountStatementBeingCreatedSignalE(OAIAccount_statement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAccountStatementBeingCreatedSignalError(OAIAccount_statement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAchTransferToYourAccountSignalError() instead")
    void simulateAnAchTransferToYourAccountSignalE(OAIInbound_ach_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAchTransferToYourAccountSignalError(OAIInbound_ach_transfer_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAuthorizationOnACardSignalError() instead")
    void simulateAnAuthorizationOnACardSignalE(OAIInbound_card_authorization_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAuthorizationOnACardSignalError(OAIInbound_card_authorization_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnInboundWireDrawdownRequestBeingCreatedSignalError() instead")
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignalE(OAIInbound_wire_drawdown_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignalError(OAIInbound_wire_drawdown_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnInterestPaymentToYourAccountSignalError() instead")
    void simulateAnInterestPaymentToYourAccountSignalE(OAIInterest_payment_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnInterestPaymentToYourAccountSignalError(OAIInterest_payment_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateDigitalWalletProvisioningForACardSignalError() instead")
    void simulateDigitalWalletProvisioningForACardSignalE(OAIInbound_digital_wallet_token_request_simulation_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateDigitalWalletProvisioningForACardSignalError(OAIInbound_digital_wallet_token_request_simulation_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateSettlingACardAuthorizationSignalError() instead")
    void simulateSettlingACardAuthorizationSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateSettlingACardAuthorizationSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulatesAdvancingTheStateOfACardDisputeSignalError() instead")
    void simulatesAdvancingTheStateOfACardDisputeSignalE(OAICard_dispute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void simulatesAdvancingTheStateOfACardDisputeSignalError(OAICard_dispute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxAchTransferSignalError() instead")
    void submitASandboxAchTransferSignalE(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxAchTransferSignalError(OAIAch_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxCheckDepositSignalError() instead")
    void submitASandboxCheckDepositSignalE(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxCheckDepositSignalError(OAICheck_deposit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxWireTransferSignalError() instead")
    void submitASandboxWireTransferSignalE(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxWireTransferSignalError(OAIWire_transfer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateACardSignalError() instead")
    void updateACardSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateACardSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateALimitSignalError() instead")
    void updateALimitSignalE(OAILimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateALimitSignalError(OAILimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnAccountSignalError() instead")
    void updateAnAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnAccountNumberSignalError() instead")
    void updateAnAccountNumberSignalE(OAIAccount_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnAccountNumberSignalError(OAIAccount_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnEventSubscriptionSignalError() instead")
    void updateAnEventSubscriptionSignalE(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnEventSubscriptionSignalError(OAIEvent_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnExternalAccountSignalError() instead")
    void updateAnExternalAccountSignalE(OAIExternal_account summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnExternalAccountSignalError(OAIExternal_account summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use actionARealTimeDecisionSignalErrorFull() instead")
    void actionARealTimeDecisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionARealTimeDecisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveACheckTransferSignalErrorFull() instead")
    void approveACheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveACheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAWireTransferSignalErrorFull() instead")
    void approveAWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAnAccountTransferSignalErrorFull() instead")
    void approveAnAccountTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAnAccountTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use approveAnAchTransferSignalErrorFull() instead")
    void approveAnAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveAnAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingAchTransferSignalErrorFull() instead")
    void cancelAPendingAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingCheckTransferSignalErrorFull() instead")
    void cancelAPendingCheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingCheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAPendingWireTransferSignalErrorFull() instead")
    void cancelAPendingWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAPendingWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelAnAccountTransferSignalErrorFull() instead")
    void cancelAnAccountTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAnAccountTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeAnAccountSignalErrorFull() instead")
    void closeAnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void closeAnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeASandboxAccountTransferSignalErrorFull() instead")
    void completeASandboxAccountTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeASandboxAccountTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeASandboxRealTimePaymentsTransferSignalErrorFull() instead")
    void completeASandboxRealTimePaymentsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeASandboxRealTimePaymentsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createABookkeepingAccountSignalErrorFull() instead")
    void createABookkeepingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createABookkeepingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createABookkeepingEntrySetSignalErrorFull() instead")
    void createABookkeepingEntrySetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createABookkeepingEntrySetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardSignalErrorFull() instead")
    void createACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardDisputeSignalErrorFull() instead")
    void createACardDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACardProfileSignalErrorFull() instead")
    void createACardProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createACardProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACheckDepositSignalErrorFull() instead")
    void createACheckDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createACheckDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createACheckTransferSignalErrorFull() instead")
    void createACheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createACheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAFileSignalErrorFull() instead")
    void createAFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createALimitSignalErrorFull() instead")
    void createALimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createALimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createARealTimePaymentsTransferSignalErrorFull() instead")
    void createARealTimePaymentsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createARealTimePaymentsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createASupplementalDocumentForAnEntitySignalErrorFull() instead")
    void createASupplementalDocumentForAnEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createASupplementalDocumentForAnEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAWireDrawdownRequestSignalErrorFull() instead")
    void createAWireDrawdownRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAWireDrawdownRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAWireTransferSignalErrorFull() instead")
    void createAWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountSignalErrorFull() instead")
    void createAnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountNumberSignalErrorFull() instead")
    void createAnAccountNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAccountTransferSignalErrorFull() instead")
    void createAnAccountTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAccountTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchPrenotificationSignalErrorFull() instead")
    void createAnAchPrenotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchPrenotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchReturnSignalErrorFull() instead")
    void createAnAchReturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchReturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnAchTransferSignalErrorFull() instead")
    void createAnAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnEntitySignalErrorFull() instead")
    void createAnEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnEventSubscriptionSignalErrorFull() instead")
    void createAnEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnExportSignalErrorFull() instead")
    void createAnExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnExternalAccountSignalErrorFull() instead")
    void createAnExternalAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnExternalAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositASandboxCheckTransferSignalErrorFull() instead")
    void depositASandboxCheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depositASandboxCheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountNumbersSignalErrorFull() instead")
    void listAccountNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountStatementsSignalErrorFull() instead")
    void listAccountStatementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountStatementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountTransfersSignalErrorFull() instead")
    void listAccountTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalErrorFull() instead")
    void listAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAchPrenotificationsSignalErrorFull() instead")
    void listAchPrenotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAchPrenotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAchTransfersSignalErrorFull() instead")
    void listAchTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAchTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookkeepingAccountsSignalErrorFull() instead")
    void listBookkeepingAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookkeepingAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookkeepingEntriesSignalErrorFull() instead")
    void listBookkeepingEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookkeepingEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardDisputesSignalErrorFull() instead")
    void listCardDisputesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardDisputesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardProfilesSignalErrorFull() instead")
    void listCardProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCardsSignalErrorFull() instead")
    void listCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckDepositsSignalErrorFull() instead")
    void listCheckDepositsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckDepositsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckTransfersSignalErrorFull() instead")
    void listCheckTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeclinedTransactionsSignalErrorFull() instead")
    void listDeclinedTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeclinedTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDigitalWalletTokensSignalErrorFull() instead")
    void listDigitalWalletTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDigitalWalletTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentsSignalErrorFull() instead")
    void listDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEntitiesSignalErrorFull() instead")
    void listEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventSubscriptionsSignalErrorFull() instead")
    void listEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventsSignalErrorFull() instead")
    void listEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExportsSignalErrorFull() instead")
    void listExportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listExportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExternalAccountsSignalErrorFull() instead")
    void listExternalAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listExternalAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFilesSignalErrorFull() instead")
    void listFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInboundAchTransferReturnsSignalErrorFull() instead")
    void listInboundAchTransferReturnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInboundAchTransferReturnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInboundWireDrawdownRequestsSignalErrorFull() instead")
    void listInboundWireDrawdownRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInboundWireDrawdownRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLimitsSignalErrorFull() instead")
    void listLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOauthConnectionsSignalErrorFull() instead")
    void listOauthConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOauthConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPendingTransactionsSignalErrorFull() instead")
    void listPendingTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPendingTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProgramsSignalErrorFull() instead")
    void listProgramsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProgramsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealTimePaymentsTransfersSignalErrorFull() instead")
    void listRealTimePaymentsTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealTimePaymentsTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoutingNumbersSignalErrorFull() instead")
    void listRoutingNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoutingNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalErrorFull() instead")
    void listTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWireDrawdownRequestsSignalErrorFull() instead")
    void listWireDrawdownRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWireDrawdownRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWireTransfersSignalErrorFull() instead")
    void listWireTransfersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWireTransfersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lookUpTheBalanceForAnAccountSignalErrorFull() instead")
    void lookUpTheBalanceForAnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lookUpTheBalanceForAnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mailASandboxCheckTransferSignalErrorFull() instead")
    void mailASandboxCheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mailASandboxCheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectASandboxCheckDepositSignalErrorFull() instead")
    void rejectASandboxCheckDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectASandboxCheckDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAStopPaymentOnACheckTransferSignalErrorFull() instead")
    void requestAStopPaymentOnACheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAStopPaymentOnACheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardSignalErrorFull() instead")
    void retrieveACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardDisputeSignalErrorFull() instead")
    void retrieveACardDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACardProfileSignalErrorFull() instead")
    void retrieveACardProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACardProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACheckDepositSignalErrorFull() instead")
    void retrieveACheckDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACheckDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveACheckTransferSignalErrorFull() instead")
    void retrieveACheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveACheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADeclinedTransactionSignalErrorFull() instead")
    void retrieveADeclinedTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADeclinedTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADigitalWalletTokenSignalErrorFull() instead")
    void retrieveADigitalWalletTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADigitalWalletTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveADocumentSignalErrorFull() instead")
    void retrieveADocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveADocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAFileSignalErrorFull() instead")
    void retrieveAFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveALimitSignalErrorFull() instead")
    void retrieveALimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveALimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAPendingTransactionSignalErrorFull() instead")
    void retrieveAPendingTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAPendingTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAProgramSignalErrorFull() instead")
    void retrieveAProgramSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAProgramSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveARealTimeDecisionSignalErrorFull() instead")
    void retrieveARealTimeDecisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveARealTimeDecisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveARealTimePaymentsTransferSignalErrorFull() instead")
    void retrieveARealTimePaymentsTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveARealTimePaymentsTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveATransactionSignalErrorFull() instead")
    void retrieveATransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveATransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAWireDrawdownRequestSignalErrorFull() instead")
    void retrieveAWireDrawdownRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAWireDrawdownRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAWireTransferSignalErrorFull() instead")
    void retrieveAWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountSignalErrorFull() instead")
    void retrieveAnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountNumberSignalErrorFull() instead")
    void retrieveAnAccountNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountStatementSignalErrorFull() instead")
    void retrieveAnAccountStatementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountStatementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAccountTransferSignalErrorFull() instead")
    void retrieveAnAccountTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAccountTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAchPrenotificationSignalErrorFull() instead")
    void retrieveAnAchPrenotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAchPrenotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnAchTransferSignalErrorFull() instead")
    void retrieveAnAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEntitySignalErrorFull() instead")
    void retrieveAnEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEventSignalErrorFull() instead")
    void retrieveAnEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnEventSubscriptionSignalErrorFull() instead")
    void retrieveAnEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnExportSignalErrorFull() instead")
    void retrieveAnExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnExternalAccountSignalErrorFull() instead")
    void retrieveAnExternalAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnExternalAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnInboundAchTransferReturnSignalErrorFull() instead")
    void retrieveAnInboundAchTransferReturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnInboundAchTransferReturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnInboundWireDrawdownRequestSignalErrorFull() instead")
    void retrieveAnInboundWireDrawdownRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnInboundWireDrawdownRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveAnOauthConnectionSignalErrorFull() instead")
    void retrieveAnOauthConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveAnOauthConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveGroupDetailsSignalErrorFull() instead")
    void retrieveGroupDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveGroupDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveSensitiveDetailsForACardSignalErrorFull() instead")
    void retrieveSensitiveDetailsForACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveSensitiveDetailsForACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxAchTransferSignalErrorFull() instead")
    void returnASandboxAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxCheckDepositSignalErrorFull() instead")
    void returnASandboxCheckDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxCheckDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use returnASandboxCheckTransferSignalErrorFull() instead")
    void returnASandboxCheckTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void returnASandboxCheckTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reverseASandboxWireTransferSignalErrorFull() instead")
    void reverseASandboxWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reverseASandboxWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateARealTimePaymentsTransferToYourAccountSignalErrorFull() instead")
    void simulateARealTimePaymentsTransferToYourAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateARealTimePaymentsTransferToYourAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateARefundOnACardSignalErrorFull() instead")
    void simulateARefundOnACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateARefundOnACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateATaxDocumentBeingCreatedSignalErrorFull() instead")
    void simulateATaxDocumentBeingCreatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateATaxDocumentBeingCreatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAWireTransferToYourAccountSignalErrorFull() instead")
    void simulateAWireTransferToYourAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAWireTransferToYourAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAccountStatementBeingCreatedSignalErrorFull() instead")
    void simulateAnAccountStatementBeingCreatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAccountStatementBeingCreatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAchTransferToYourAccountSignalErrorFull() instead")
    void simulateAnAchTransferToYourAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAchTransferToYourAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnAuthorizationOnACardSignalErrorFull() instead")
    void simulateAnAuthorizationOnACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnAuthorizationOnACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnInboundWireDrawdownRequestBeingCreatedSignalErrorFull() instead")
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnInboundWireDrawdownRequestBeingCreatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateAnInterestPaymentToYourAccountSignalErrorFull() instead")
    void simulateAnInterestPaymentToYourAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateAnInterestPaymentToYourAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateDigitalWalletProvisioningForACardSignalErrorFull() instead")
    void simulateDigitalWalletProvisioningForACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateDigitalWalletProvisioningForACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulateSettlingACardAuthorizationSignalErrorFull() instead")
    void simulateSettlingACardAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulateSettlingACardAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use simulatesAdvancingTheStateOfACardDisputeSignalErrorFull() instead")
    void simulatesAdvancingTheStateOfACardDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void simulatesAdvancingTheStateOfACardDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxAchTransferSignalErrorFull() instead")
    void submitASandboxAchTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxAchTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxCheckDepositSignalErrorFull() instead")
    void submitASandboxCheckDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxCheckDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitASandboxWireTransferSignalErrorFull() instead")
    void submitASandboxWireTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitASandboxWireTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateACardSignalErrorFull() instead")
    void updateACardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateACardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateALimitSignalErrorFull() instead")
    void updateALimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateALimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnAccountSignalErrorFull() instead")
    void updateAnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnAccountNumberSignalErrorFull() instead")
    void updateAnAccountNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnAccountNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnEventSubscriptionSignalErrorFull() instead")
    void updateAnEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAnExternalAccountSignalErrorFull() instead")
    void updateAnExternalAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAnExternalAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
