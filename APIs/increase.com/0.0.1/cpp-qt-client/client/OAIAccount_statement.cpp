/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount_statement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount_statement::OAIAccount_statement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount_statement::OAIAccount_statement() {
    this->initializeModel();
}

OAIAccount_statement::~OAIAccount_statement() {}

void OAIAccount_statement::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ending_balance_isSet = false;
    m_ending_balance_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_starting_balance_isSet = false;
    m_starting_balance_isValid = false;

    m_statement_period_end_isSet = false;
    m_statement_period_end_isValid = false;

    m_statement_period_start_isSet = false;
    m_statement_period_start_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAccount_statement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount_statement::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_ending_balance_isValid = ::OpenAPI::fromJsonValue(m_ending_balance, json[QString("ending_balance")]);
    m_ending_balance_isSet = !json[QString("ending_balance")].isNull() && m_ending_balance_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_starting_balance_isValid = ::OpenAPI::fromJsonValue(m_starting_balance, json[QString("starting_balance")]);
    m_starting_balance_isSet = !json[QString("starting_balance")].isNull() && m_starting_balance_isValid;

    m_statement_period_end_isValid = ::OpenAPI::fromJsonValue(m_statement_period_end, json[QString("statement_period_end")]);
    m_statement_period_end_isSet = !json[QString("statement_period_end")].isNull() && m_statement_period_end_isValid;

    m_statement_period_start_isValid = ::OpenAPI::fromJsonValue(m_statement_period_start, json[QString("statement_period_start")]);
    m_statement_period_start_isSet = !json[QString("statement_period_start")].isNull() && m_statement_period_start_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAccount_statement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount_statement::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ending_balance_isSet) {
        obj.insert(QString("ending_balance"), ::OpenAPI::toJsonValue(m_ending_balance));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_starting_balance_isSet) {
        obj.insert(QString("starting_balance"), ::OpenAPI::toJsonValue(m_starting_balance));
    }
    if (m_statement_period_end_isSet) {
        obj.insert(QString("statement_period_end"), ::OpenAPI::toJsonValue(m_statement_period_end));
    }
    if (m_statement_period_start_isSet) {
        obj.insert(QString("statement_period_start"), ::OpenAPI::toJsonValue(m_statement_period_start));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAccount_statement::getAccountId() const {
    return m_account_id;
}
void OAIAccount_statement::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccount_statement::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccount_statement::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIAccount_statement::getCreatedAt() const {
    return m_created_at;
}
void OAIAccount_statement::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccount_statement::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccount_statement::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIAccount_statement::getEndingBalance() const {
    return m_ending_balance;
}
void OAIAccount_statement::setEndingBalance(const qint32 &ending_balance) {
    m_ending_balance = ending_balance;
    m_ending_balance_isSet = true;
}

bool OAIAccount_statement::is_ending_balance_Set() const{
    return m_ending_balance_isSet;
}

bool OAIAccount_statement::is_ending_balance_Valid() const{
    return m_ending_balance_isValid;
}

QString OAIAccount_statement::getFileId() const {
    return m_file_id;
}
void OAIAccount_statement::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIAccount_statement::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIAccount_statement::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIAccount_statement::getId() const {
    return m_id;
}
void OAIAccount_statement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount_statement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount_statement::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAccount_statement::getStartingBalance() const {
    return m_starting_balance;
}
void OAIAccount_statement::setStartingBalance(const qint32 &starting_balance) {
    m_starting_balance = starting_balance;
    m_starting_balance_isSet = true;
}

bool OAIAccount_statement::is_starting_balance_Set() const{
    return m_starting_balance_isSet;
}

bool OAIAccount_statement::is_starting_balance_Valid() const{
    return m_starting_balance_isValid;
}

QDateTime OAIAccount_statement::getStatementPeriodEnd() const {
    return m_statement_period_end;
}
void OAIAccount_statement::setStatementPeriodEnd(const QDateTime &statement_period_end) {
    m_statement_period_end = statement_period_end;
    m_statement_period_end_isSet = true;
}

bool OAIAccount_statement::is_statement_period_end_Set() const{
    return m_statement_period_end_isSet;
}

bool OAIAccount_statement::is_statement_period_end_Valid() const{
    return m_statement_period_end_isValid;
}

QDateTime OAIAccount_statement::getStatementPeriodStart() const {
    return m_statement_period_start;
}
void OAIAccount_statement::setStatementPeriodStart(const QDateTime &statement_period_start) {
    m_statement_period_start = statement_period_start;
    m_statement_period_start_isSet = true;
}

bool OAIAccount_statement::is_statement_period_start_Set() const{
    return m_statement_period_start_isSet;
}

bool OAIAccount_statement::is_statement_period_start_Valid() const{
    return m_statement_period_start_isValid;
}

QString OAIAccount_statement::getType() const {
    return m_type;
}
void OAIAccount_statement::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount_statement::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount_statement::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAccount_statement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount_statement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_created_at_isValid && m_ending_balance_isValid && m_file_id_isValid && m_id_isValid && m_starting_balance_isValid && m_statement_period_end_isValid && m_statement_period_start_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
