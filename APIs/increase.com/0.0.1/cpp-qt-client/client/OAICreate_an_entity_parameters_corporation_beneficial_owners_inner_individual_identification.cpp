/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification() {
    this->initializeModel();
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::~OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification() {}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::initializeModel() {

    m_drivers_license_isSet = false;
    m_drivers_license_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_passport_isSet = false;
    m_passport_isValid = false;
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::fromJsonObject(QJsonObject json) {

    m_drivers_license_isValid = ::OpenAPI::fromJsonValue(m_drivers_license, json[QString("drivers_license")]);
    m_drivers_license_isSet = !json[QString("drivers_license")].isNull() && m_drivers_license_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_passport_isValid = ::OpenAPI::fromJsonValue(m_passport, json[QString("passport")]);
    m_passport_isSet = !json[QString("passport")].isNull() && m_passport_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::asJsonObject() const {
    QJsonObject obj;
    if (m_drivers_license.isSet()) {
        obj.insert(QString("drivers_license"), ::OpenAPI::toJsonValue(m_drivers_license));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_other.isSet()) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_passport.isSet()) {
        obj.insert(QString("passport"), ::OpenAPI::toJsonValue(m_passport));
    }
    return obj;
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::getDriversLicense() const {
    return m_drivers_license;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::setDriversLicense(const OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license &drivers_license) {
    m_drivers_license = drivers_license;
    m_drivers_license_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_drivers_license_Set() const{
    return m_drivers_license_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_drivers_license_Valid() const{
    return m_drivers_license_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::getMethod() const {
    return m_method;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_method_Set() const{
    return m_method_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_method_Valid() const{
    return m_method_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::getNumber() const {
    return m_number;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_number_Set() const{
    return m_number_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_number_Valid() const{
    return m_number_isValid;
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_other OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::getOther() const {
    return m_other;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::setOther(const OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_other &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_other_Set() const{
    return m_other_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_other_Valid() const{
    return m_other_isValid;
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_passport OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::getPassport() const {
    return m_passport;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::setPassport(const OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_passport &passport) {
    m_passport = passport;
    m_passport_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_passport_Set() const{
    return m_passport_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::is_passport_Valid() const{
    return m_passport_isValid;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drivers_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passport.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_method_isValid && m_number_isValid && true;
}

} // namespace OpenAPI
