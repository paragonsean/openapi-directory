/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulate_an_authorization_on_a_card_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulate_an_authorization_on_a_card_parameters::OAISimulate_an_authorization_on_a_card_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulate_an_authorization_on_a_card_parameters::OAISimulate_an_authorization_on_a_card_parameters() {
    this->initializeModel();
}

OAISimulate_an_authorization_on_a_card_parameters::~OAISimulate_an_authorization_on_a_card_parameters() {}

void OAISimulate_an_authorization_on_a_card_parameters::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_digital_wallet_token_id_isSet = false;
    m_digital_wallet_token_id_isValid = false;

    m_event_subscription_id_isSet = false;
    m_event_subscription_id_isValid = false;
}

void OAISimulate_an_authorization_on_a_card_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulate_an_authorization_on_a_card_parameters::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_digital_wallet_token_id_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet_token_id, json[QString("digital_wallet_token_id")]);
    m_digital_wallet_token_id_isSet = !json[QString("digital_wallet_token_id")].isNull() && m_digital_wallet_token_id_isValid;

    m_event_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_event_subscription_id, json[QString("event_subscription_id")]);
    m_event_subscription_id_isSet = !json[QString("event_subscription_id")].isNull() && m_event_subscription_id_isValid;
}

QString OAISimulate_an_authorization_on_a_card_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulate_an_authorization_on_a_card_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_digital_wallet_token_id_isSet) {
        obj.insert(QString("digital_wallet_token_id"), ::OpenAPI::toJsonValue(m_digital_wallet_token_id));
    }
    if (m_event_subscription_id_isSet) {
        obj.insert(QString("event_subscription_id"), ::OpenAPI::toJsonValue(m_event_subscription_id));
    }
    return obj;
}

qint32 OAISimulate_an_authorization_on_a_card_parameters::getAmount() const {
    return m_amount;
}
void OAISimulate_an_authorization_on_a_card_parameters::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISimulate_an_authorization_on_a_card_parameters::getCardId() const {
    return m_card_id;
}
void OAISimulate_an_authorization_on_a_card_parameters::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAISimulate_an_authorization_on_a_card_parameters::getDigitalWalletTokenId() const {
    return m_digital_wallet_token_id;
}
void OAISimulate_an_authorization_on_a_card_parameters::setDigitalWalletTokenId(const QString &digital_wallet_token_id) {
    m_digital_wallet_token_id = digital_wallet_token_id;
    m_digital_wallet_token_id_isSet = true;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_digital_wallet_token_id_Set() const{
    return m_digital_wallet_token_id_isSet;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_digital_wallet_token_id_Valid() const{
    return m_digital_wallet_token_id_isValid;
}

QString OAISimulate_an_authorization_on_a_card_parameters::getEventSubscriptionId() const {
    return m_event_subscription_id;
}
void OAISimulate_an_authorization_on_a_card_parameters::setEventSubscriptionId(const QString &event_subscription_id) {
    m_event_subscription_id = event_subscription_id;
    m_event_subscription_id_isSet = true;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_event_subscription_id_Set() const{
    return m_event_subscription_id_isSet;
}

bool OAISimulate_an_authorization_on_a_card_parameters::is_event_subscription_id_Valid() const{
    return m_event_subscription_id_isValid;
}

bool OAISimulate_an_authorization_on_a_card_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulate_an_authorization_on_a_card_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && true;
}

} // namespace OpenAPI
