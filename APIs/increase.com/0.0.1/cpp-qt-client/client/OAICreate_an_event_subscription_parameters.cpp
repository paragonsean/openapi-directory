/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_an_event_subscription_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_an_event_subscription_parameters::OAICreate_an_event_subscription_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_an_event_subscription_parameters::OAICreate_an_event_subscription_parameters() {
    this->initializeModel();
}

OAICreate_an_event_subscription_parameters::~OAICreate_an_event_subscription_parameters() {}

void OAICreate_an_event_subscription_parameters::initializeModel() {

    m_selected_event_category_isSet = false;
    m_selected_event_category_isValid = false;

    m_shared_secret_isSet = false;
    m_shared_secret_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreate_an_event_subscription_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_an_event_subscription_parameters::fromJsonObject(QJsonObject json) {

    m_selected_event_category_isValid = ::OpenAPI::fromJsonValue(m_selected_event_category, json[QString("selected_event_category")]);
    m_selected_event_category_isSet = !json[QString("selected_event_category")].isNull() && m_selected_event_category_isValid;

    m_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_shared_secret, json[QString("shared_secret")]);
    m_shared_secret_isSet = !json[QString("shared_secret")].isNull() && m_shared_secret_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreate_an_event_subscription_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_an_event_subscription_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_event_category_isSet) {
        obj.insert(QString("selected_event_category"), ::OpenAPI::toJsonValue(m_selected_event_category));
    }
    if (m_shared_secret_isSet) {
        obj.insert(QString("shared_secret"), ::OpenAPI::toJsonValue(m_shared_secret));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICreate_an_event_subscription_parameters::getSelectedEventCategory() const {
    return m_selected_event_category;
}
void OAICreate_an_event_subscription_parameters::setSelectedEventCategory(const QString &selected_event_category) {
    m_selected_event_category = selected_event_category;
    m_selected_event_category_isSet = true;
}

bool OAICreate_an_event_subscription_parameters::is_selected_event_category_Set() const{
    return m_selected_event_category_isSet;
}

bool OAICreate_an_event_subscription_parameters::is_selected_event_category_Valid() const{
    return m_selected_event_category_isValid;
}

QString OAICreate_an_event_subscription_parameters::getSharedSecret() const {
    return m_shared_secret;
}
void OAICreate_an_event_subscription_parameters::setSharedSecret(const QString &shared_secret) {
    m_shared_secret = shared_secret;
    m_shared_secret_isSet = true;
}

bool OAICreate_an_event_subscription_parameters::is_shared_secret_Set() const{
    return m_shared_secret_isSet;
}

bool OAICreate_an_event_subscription_parameters::is_shared_secret_Valid() const{
    return m_shared_secret_isValid;
}

QString OAICreate_an_event_subscription_parameters::getUrl() const {
    return m_url;
}
void OAICreate_an_event_subscription_parameters::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreate_an_event_subscription_parameters::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreate_an_event_subscription_parameters::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreate_an_event_subscription_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_event_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_an_event_subscription_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
