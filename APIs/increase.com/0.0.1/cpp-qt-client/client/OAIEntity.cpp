/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity::OAIEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity::OAIEntity() {
    this->initializeModel();
}

OAIEntity::~OAIEntity() {}

void OAIEntity::initializeModel() {

    m_corporation_isSet = false;
    m_corporation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_joint_isSet = false;
    m_joint_isValid = false;

    m_natural_person_isSet = false;
    m_natural_person_isValid = false;

    m_relationship_isSet = false;
    m_relationship_isValid = false;

    m_structure_isSet = false;
    m_structure_isValid = false;

    m_supplemental_documents_isSet = false;
    m_supplemental_documents_isValid = false;

    m_trust_isSet = false;
    m_trust_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity::fromJsonObject(QJsonObject json) {

    m_corporation_isValid = ::OpenAPI::fromJsonValue(m_corporation, json[QString("corporation")]);
    m_corporation_isSet = !json[QString("corporation")].isNull() && m_corporation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_joint_isValid = ::OpenAPI::fromJsonValue(m_joint, json[QString("joint")]);
    m_joint_isSet = !json[QString("joint")].isNull() && m_joint_isValid;

    m_natural_person_isValid = ::OpenAPI::fromJsonValue(m_natural_person, json[QString("natural_person")]);
    m_natural_person_isSet = !json[QString("natural_person")].isNull() && m_natural_person_isValid;

    m_relationship_isValid = ::OpenAPI::fromJsonValue(m_relationship, json[QString("relationship")]);
    m_relationship_isSet = !json[QString("relationship")].isNull() && m_relationship_isValid;

    m_structure_isValid = ::OpenAPI::fromJsonValue(m_structure, json[QString("structure")]);
    m_structure_isSet = !json[QString("structure")].isNull() && m_structure_isValid;

    m_supplemental_documents_isValid = ::OpenAPI::fromJsonValue(m_supplemental_documents, json[QString("supplemental_documents")]);
    m_supplemental_documents_isSet = !json[QString("supplemental_documents")].isNull() && m_supplemental_documents_isValid;

    m_trust_isValid = ::OpenAPI::fromJsonValue(m_trust, json[QString("trust")]);
    m_trust_isSet = !json[QString("trust")].isNull() && m_trust_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_corporation.isSet()) {
        obj.insert(QString("corporation"), ::OpenAPI::toJsonValue(m_corporation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_joint.isSet()) {
        obj.insert(QString("joint"), ::OpenAPI::toJsonValue(m_joint));
    }
    if (m_natural_person.isSet()) {
        obj.insert(QString("natural_person"), ::OpenAPI::toJsonValue(m_natural_person));
    }
    if (m_relationship_isSet) {
        obj.insert(QString("relationship"), ::OpenAPI::toJsonValue(m_relationship));
    }
    if (m_structure_isSet) {
        obj.insert(QString("structure"), ::OpenAPI::toJsonValue(m_structure));
    }
    if (m_supplemental_documents.size() > 0) {
        obj.insert(QString("supplemental_documents"), ::OpenAPI::toJsonValue(m_supplemental_documents));
    }
    if (m_trust.isSet()) {
        obj.insert(QString("trust"), ::OpenAPI::toJsonValue(m_trust));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICorporation OAIEntity::getCorporation() const {
    return m_corporation;
}
void OAIEntity::setCorporation(const OAICorporation &corporation) {
    m_corporation = corporation;
    m_corporation_isSet = true;
}

bool OAIEntity::is_corporation_Set() const{
    return m_corporation_isSet;
}

bool OAIEntity::is_corporation_Valid() const{
    return m_corporation_isValid;
}

QString OAIEntity::getDescription() const {
    return m_description;
}
void OAIEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEntity::getId() const {
    return m_id;
}
void OAIEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIJoint OAIEntity::getJoint() const {
    return m_joint;
}
void OAIEntity::setJoint(const OAIJoint &joint) {
    m_joint = joint;
    m_joint_isSet = true;
}

bool OAIEntity::is_joint_Set() const{
    return m_joint_isSet;
}

bool OAIEntity::is_joint_Valid() const{
    return m_joint_isValid;
}

OAIIndividual_2 OAIEntity::getNaturalPerson() const {
    return m_natural_person;
}
void OAIEntity::setNaturalPerson(const OAIIndividual_2 &natural_person) {
    m_natural_person = natural_person;
    m_natural_person_isSet = true;
}

bool OAIEntity::is_natural_person_Set() const{
    return m_natural_person_isSet;
}

bool OAIEntity::is_natural_person_Valid() const{
    return m_natural_person_isValid;
}

QString OAIEntity::getRelationship() const {
    return m_relationship;
}
void OAIEntity::setRelationship(const QString &relationship) {
    m_relationship = relationship;
    m_relationship_isSet = true;
}

bool OAIEntity::is_relationship_Set() const{
    return m_relationship_isSet;
}

bool OAIEntity::is_relationship_Valid() const{
    return m_relationship_isValid;
}

QString OAIEntity::getStructure() const {
    return m_structure;
}
void OAIEntity::setStructure(const QString &structure) {
    m_structure = structure;
    m_structure_isSet = true;
}

bool OAIEntity::is_structure_Set() const{
    return m_structure_isSet;
}

bool OAIEntity::is_structure_Valid() const{
    return m_structure_isValid;
}

QList<OAISupplemental_Documents_Element> OAIEntity::getSupplementalDocuments() const {
    return m_supplemental_documents;
}
void OAIEntity::setSupplementalDocuments(const QList<OAISupplemental_Documents_Element> &supplemental_documents) {
    m_supplemental_documents = supplemental_documents;
    m_supplemental_documents_isSet = true;
}

bool OAIEntity::is_supplemental_documents_Set() const{
    return m_supplemental_documents_isSet;
}

bool OAIEntity::is_supplemental_documents_Valid() const{
    return m_supplemental_documents_isValid;
}

OAITrust OAIEntity::getTrust() const {
    return m_trust;
}
void OAIEntity::setTrust(const OAITrust &trust) {
    m_trust = trust;
    m_trust_isSet = true;
}

bool OAIEntity::is_trust_Set() const{
    return m_trust_isSet;
}

bool OAIEntity::is_trust_Valid() const{
    return m_trust_isValid;
}

QString OAIEntity::getType() const {
    return m_type;
}
void OAIEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_natural_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_corporation_isValid && m_description_isValid && m_id_isValid && m_joint_isValid && m_natural_person_isValid && m_relationship_isValid && m_structure_isValid && m_supplemental_documents_isValid && m_trust_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
