/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license() {
    this->initializeModel();
}

OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::~OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license() {}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDate OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::getExpirationDate() const {
    return m_expiration_date;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::setExpirationDate(const QDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::getFileId() const {
    return m_file_id;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::getState() const {
    return m_state;
}
void OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_an_entity_parameters_corporation_beneficial_owners_inner_individual_identification_drivers_license::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiration_date_isValid && m_file_id_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
