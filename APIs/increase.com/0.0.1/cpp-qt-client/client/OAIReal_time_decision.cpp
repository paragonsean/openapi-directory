/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReal_time_decision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReal_time_decision::OAIReal_time_decision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReal_time_decision::OAIReal_time_decision() {
    this->initializeModel();
}

OAIReal_time_decision::~OAIReal_time_decision() {}

void OAIReal_time_decision::initializeModel() {

    m_card_authorization_isSet = false;
    m_card_authorization_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_digital_wallet_authentication_isSet = false;
    m_digital_wallet_authentication_isValid = false;

    m_digital_wallet_token_isSet = false;
    m_digital_wallet_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeout_at_isSet = false;
    m_timeout_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReal_time_decision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReal_time_decision::fromJsonObject(QJsonObject json) {

    m_card_authorization_isValid = ::OpenAPI::fromJsonValue(m_card_authorization, json[QString("card_authorization")]);
    m_card_authorization_isSet = !json[QString("card_authorization")].isNull() && m_card_authorization_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_digital_wallet_authentication_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet_authentication, json[QString("digital_wallet_authentication")]);
    m_digital_wallet_authentication_isSet = !json[QString("digital_wallet_authentication")].isNull() && m_digital_wallet_authentication_isValid;

    m_digital_wallet_token_isValid = ::OpenAPI::fromJsonValue(m_digital_wallet_token, json[QString("digital_wallet_token")]);
    m_digital_wallet_token_isSet = !json[QString("digital_wallet_token")].isNull() && m_digital_wallet_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeout_at_isValid = ::OpenAPI::fromJsonValue(m_timeout_at, json[QString("timeout_at")]);
    m_timeout_at_isSet = !json[QString("timeout_at")].isNull() && m_timeout_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReal_time_decision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReal_time_decision::asJsonObject() const {
    QJsonObject obj;
    if (m_card_authorization.isSet()) {
        obj.insert(QString("card_authorization"), ::OpenAPI::toJsonValue(m_card_authorization));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_digital_wallet_authentication.isSet()) {
        obj.insert(QString("digital_wallet_authentication"), ::OpenAPI::toJsonValue(m_digital_wallet_authentication));
    }
    if (m_digital_wallet_token.isSet()) {
        obj.insert(QString("digital_wallet_token"), ::OpenAPI::toJsonValue(m_digital_wallet_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeout_at_isSet) {
        obj.insert(QString("timeout_at"), ::OpenAPI::toJsonValue(m_timeout_at));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICard_Authorization_1 OAIReal_time_decision::getCardAuthorization() const {
    return m_card_authorization;
}
void OAIReal_time_decision::setCardAuthorization(const OAICard_Authorization_1 &card_authorization) {
    m_card_authorization = card_authorization;
    m_card_authorization_isSet = true;
}

bool OAIReal_time_decision::is_card_authorization_Set() const{
    return m_card_authorization_isSet;
}

bool OAIReal_time_decision::is_card_authorization_Valid() const{
    return m_card_authorization_isValid;
}

QString OAIReal_time_decision::getCategory() const {
    return m_category;
}
void OAIReal_time_decision::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIReal_time_decision::is_category_Set() const{
    return m_category_isSet;
}

bool OAIReal_time_decision::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIReal_time_decision::getCreatedAt() const {
    return m_created_at;
}
void OAIReal_time_decision::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIReal_time_decision::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIReal_time_decision::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIDigital_Wallet_Authentication OAIReal_time_decision::getDigitalWalletAuthentication() const {
    return m_digital_wallet_authentication;
}
void OAIReal_time_decision::setDigitalWalletAuthentication(const OAIDigital_Wallet_Authentication &digital_wallet_authentication) {
    m_digital_wallet_authentication = digital_wallet_authentication;
    m_digital_wallet_authentication_isSet = true;
}

bool OAIReal_time_decision::is_digital_wallet_authentication_Set() const{
    return m_digital_wallet_authentication_isSet;
}

bool OAIReal_time_decision::is_digital_wallet_authentication_Valid() const{
    return m_digital_wallet_authentication_isValid;
}

OAIDigital_Wallet_Token OAIReal_time_decision::getDigitalWalletToken() const {
    return m_digital_wallet_token;
}
void OAIReal_time_decision::setDigitalWalletToken(const OAIDigital_Wallet_Token &digital_wallet_token) {
    m_digital_wallet_token = digital_wallet_token;
    m_digital_wallet_token_isSet = true;
}

bool OAIReal_time_decision::is_digital_wallet_token_Set() const{
    return m_digital_wallet_token_isSet;
}

bool OAIReal_time_decision::is_digital_wallet_token_Valid() const{
    return m_digital_wallet_token_isValid;
}

QString OAIReal_time_decision::getId() const {
    return m_id;
}
void OAIReal_time_decision::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReal_time_decision::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReal_time_decision::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReal_time_decision::getStatus() const {
    return m_status;
}
void OAIReal_time_decision::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReal_time_decision::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReal_time_decision::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIReal_time_decision::getTimeoutAt() const {
    return m_timeout_at;
}
void OAIReal_time_decision::setTimeoutAt(const QDateTime &timeout_at) {
    m_timeout_at = timeout_at;
    m_timeout_at_isSet = true;
}

bool OAIReal_time_decision::is_timeout_at_Set() const{
    return m_timeout_at_isSet;
}

bool OAIReal_time_decision::is_timeout_at_Valid() const{
    return m_timeout_at_isValid;
}

QString OAIReal_time_decision::getType() const {
    return m_type;
}
void OAIReal_time_decision::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReal_time_decision::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReal_time_decision::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReal_time_decision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_wallet_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReal_time_decision::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_authorization_isValid && m_category_isValid && m_created_at_isValid && m_digital_wallet_authentication_isValid && m_digital_wallet_token_isValid && m_id_isValid && m_status_isValid && m_timeout_at_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
