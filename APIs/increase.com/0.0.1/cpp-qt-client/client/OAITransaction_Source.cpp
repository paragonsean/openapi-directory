/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction_Source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction_Source::OAITransaction_Source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction_Source::OAITransaction_Source() {
    this->initializeModel();
}

OAITransaction_Source::~OAITransaction_Source() {}

void OAITransaction_Source::initializeModel() {

    m_account_transfer_intention_isSet = false;
    m_account_transfer_intention_isValid = false;

    m_ach_check_conversion_isSet = false;
    m_ach_check_conversion_isValid = false;

    m_ach_check_conversion_return_isSet = false;
    m_ach_check_conversion_return_isValid = false;

    m_ach_transfer_intention_isSet = false;
    m_ach_transfer_intention_isValid = false;

    m_ach_transfer_rejection_isSet = false;
    m_ach_transfer_rejection_isValid = false;

    m_ach_transfer_return_isSet = false;
    m_ach_transfer_return_isValid = false;

    m_card_dispute_acceptance_isSet = false;
    m_card_dispute_acceptance_isValid = false;

    m_card_refund_isSet = false;
    m_card_refund_isValid = false;

    m_card_revenue_payment_isSet = false;
    m_card_revenue_payment_isValid = false;

    m_card_route_refund_isSet = false;
    m_card_route_refund_isValid = false;

    m_card_route_settlement_isSet = false;
    m_card_route_settlement_isValid = false;

    m_card_settlement_isSet = false;
    m_card_settlement_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_check_deposit_acceptance_isSet = false;
    m_check_deposit_acceptance_isValid = false;

    m_check_deposit_return_isSet = false;
    m_check_deposit_return_isValid = false;

    m_check_transfer_intention_isSet = false;
    m_check_transfer_intention_isValid = false;

    m_check_transfer_rejection_isSet = false;
    m_check_transfer_rejection_isValid = false;

    m_check_transfer_return_isSet = false;
    m_check_transfer_return_isValid = false;

    m_check_transfer_stop_payment_request_isSet = false;
    m_check_transfer_stop_payment_request_isValid = false;

    m_dispute_resolution_isSet = false;
    m_dispute_resolution_isValid = false;

    m_empyreal_cash_deposit_isSet = false;
    m_empyreal_cash_deposit_isValid = false;

    m_fee_payment_isSet = false;
    m_fee_payment_isValid = false;

    m_inbound_ach_transfer_isSet = false;
    m_inbound_ach_transfer_isValid = false;

    m_inbound_check_isSet = false;
    m_inbound_check_isValid = false;

    m_inbound_international_ach_transfer_isSet = false;
    m_inbound_international_ach_transfer_isValid = false;

    m_inbound_real_time_payments_transfer_confirmation_isSet = false;
    m_inbound_real_time_payments_transfer_confirmation_isValid = false;

    m_inbound_wire_drawdown_payment_isSet = false;
    m_inbound_wire_drawdown_payment_isValid = false;

    m_inbound_wire_drawdown_payment_reversal_isSet = false;
    m_inbound_wire_drawdown_payment_reversal_isValid = false;

    m_inbound_wire_reversal_isSet = false;
    m_inbound_wire_reversal_isValid = false;

    m_inbound_wire_transfer_isSet = false;
    m_inbound_wire_transfer_isValid = false;

    m_interest_payment_isSet = false;
    m_interest_payment_isValid = false;

    m_internal_source_isSet = false;
    m_internal_source_isValid = false;

    m_real_time_payments_transfer_acknowledgement_isSet = false;
    m_real_time_payments_transfer_acknowledgement_isValid = false;

    m_sample_funds_isSet = false;
    m_sample_funds_isValid = false;

    m_wire_drawdown_payment_intention_isSet = false;
    m_wire_drawdown_payment_intention_isValid = false;

    m_wire_drawdown_payment_rejection_isSet = false;
    m_wire_drawdown_payment_rejection_isValid = false;

    m_wire_transfer_intention_isSet = false;
    m_wire_transfer_intention_isValid = false;

    m_wire_transfer_rejection_isSet = false;
    m_wire_transfer_rejection_isValid = false;
}

void OAITransaction_Source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction_Source::fromJsonObject(QJsonObject json) {

    m_account_transfer_intention_isValid = ::OpenAPI::fromJsonValue(m_account_transfer_intention, json[QString("account_transfer_intention")]);
    m_account_transfer_intention_isSet = !json[QString("account_transfer_intention")].isNull() && m_account_transfer_intention_isValid;

    m_ach_check_conversion_isValid = ::OpenAPI::fromJsonValue(m_ach_check_conversion, json[QString("ach_check_conversion")]);
    m_ach_check_conversion_isSet = !json[QString("ach_check_conversion")].isNull() && m_ach_check_conversion_isValid;

    m_ach_check_conversion_return_isValid = ::OpenAPI::fromJsonValue(m_ach_check_conversion_return, json[QString("ach_check_conversion_return")]);
    m_ach_check_conversion_return_isSet = !json[QString("ach_check_conversion_return")].isNull() && m_ach_check_conversion_return_isValid;

    m_ach_transfer_intention_isValid = ::OpenAPI::fromJsonValue(m_ach_transfer_intention, json[QString("ach_transfer_intention")]);
    m_ach_transfer_intention_isSet = !json[QString("ach_transfer_intention")].isNull() && m_ach_transfer_intention_isValid;

    m_ach_transfer_rejection_isValid = ::OpenAPI::fromJsonValue(m_ach_transfer_rejection, json[QString("ach_transfer_rejection")]);
    m_ach_transfer_rejection_isSet = !json[QString("ach_transfer_rejection")].isNull() && m_ach_transfer_rejection_isValid;

    m_ach_transfer_return_isValid = ::OpenAPI::fromJsonValue(m_ach_transfer_return, json[QString("ach_transfer_return")]);
    m_ach_transfer_return_isSet = !json[QString("ach_transfer_return")].isNull() && m_ach_transfer_return_isValid;

    m_card_dispute_acceptance_isValid = ::OpenAPI::fromJsonValue(m_card_dispute_acceptance, json[QString("card_dispute_acceptance")]);
    m_card_dispute_acceptance_isSet = !json[QString("card_dispute_acceptance")].isNull() && m_card_dispute_acceptance_isValid;

    m_card_refund_isValid = ::OpenAPI::fromJsonValue(m_card_refund, json[QString("card_refund")]);
    m_card_refund_isSet = !json[QString("card_refund")].isNull() && m_card_refund_isValid;

    m_card_revenue_payment_isValid = ::OpenAPI::fromJsonValue(m_card_revenue_payment, json[QString("card_revenue_payment")]);
    m_card_revenue_payment_isSet = !json[QString("card_revenue_payment")].isNull() && m_card_revenue_payment_isValid;

    m_card_route_refund_isValid = ::OpenAPI::fromJsonValue(m_card_route_refund, json[QString("card_route_refund")]);
    m_card_route_refund_isSet = !json[QString("card_route_refund")].isNull() && m_card_route_refund_isValid;

    m_card_route_settlement_isValid = ::OpenAPI::fromJsonValue(m_card_route_settlement, json[QString("card_route_settlement")]);
    m_card_route_settlement_isSet = !json[QString("card_route_settlement")].isNull() && m_card_route_settlement_isValid;

    m_card_settlement_isValid = ::OpenAPI::fromJsonValue(m_card_settlement, json[QString("card_settlement")]);
    m_card_settlement_isSet = !json[QString("card_settlement")].isNull() && m_card_settlement_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_check_deposit_acceptance_isValid = ::OpenAPI::fromJsonValue(m_check_deposit_acceptance, json[QString("check_deposit_acceptance")]);
    m_check_deposit_acceptance_isSet = !json[QString("check_deposit_acceptance")].isNull() && m_check_deposit_acceptance_isValid;

    m_check_deposit_return_isValid = ::OpenAPI::fromJsonValue(m_check_deposit_return, json[QString("check_deposit_return")]);
    m_check_deposit_return_isSet = !json[QString("check_deposit_return")].isNull() && m_check_deposit_return_isValid;

    m_check_transfer_intention_isValid = ::OpenAPI::fromJsonValue(m_check_transfer_intention, json[QString("check_transfer_intention")]);
    m_check_transfer_intention_isSet = !json[QString("check_transfer_intention")].isNull() && m_check_transfer_intention_isValid;

    m_check_transfer_rejection_isValid = ::OpenAPI::fromJsonValue(m_check_transfer_rejection, json[QString("check_transfer_rejection")]);
    m_check_transfer_rejection_isSet = !json[QString("check_transfer_rejection")].isNull() && m_check_transfer_rejection_isValid;

    m_check_transfer_return_isValid = ::OpenAPI::fromJsonValue(m_check_transfer_return, json[QString("check_transfer_return")]);
    m_check_transfer_return_isSet = !json[QString("check_transfer_return")].isNull() && m_check_transfer_return_isValid;

    m_check_transfer_stop_payment_request_isValid = ::OpenAPI::fromJsonValue(m_check_transfer_stop_payment_request, json[QString("check_transfer_stop_payment_request")]);
    m_check_transfer_stop_payment_request_isSet = !json[QString("check_transfer_stop_payment_request")].isNull() && m_check_transfer_stop_payment_request_isValid;

    m_dispute_resolution_isValid = ::OpenAPI::fromJsonValue(m_dispute_resolution, json[QString("dispute_resolution")]);
    m_dispute_resolution_isSet = !json[QString("dispute_resolution")].isNull() && m_dispute_resolution_isValid;

    m_empyreal_cash_deposit_isValid = ::OpenAPI::fromJsonValue(m_empyreal_cash_deposit, json[QString("empyreal_cash_deposit")]);
    m_empyreal_cash_deposit_isSet = !json[QString("empyreal_cash_deposit")].isNull() && m_empyreal_cash_deposit_isValid;

    m_fee_payment_isValid = ::OpenAPI::fromJsonValue(m_fee_payment, json[QString("fee_payment")]);
    m_fee_payment_isSet = !json[QString("fee_payment")].isNull() && m_fee_payment_isValid;

    m_inbound_ach_transfer_isValid = ::OpenAPI::fromJsonValue(m_inbound_ach_transfer, json[QString("inbound_ach_transfer")]);
    m_inbound_ach_transfer_isSet = !json[QString("inbound_ach_transfer")].isNull() && m_inbound_ach_transfer_isValid;

    m_inbound_check_isValid = ::OpenAPI::fromJsonValue(m_inbound_check, json[QString("inbound_check")]);
    m_inbound_check_isSet = !json[QString("inbound_check")].isNull() && m_inbound_check_isValid;

    m_inbound_international_ach_transfer_isValid = ::OpenAPI::fromJsonValue(m_inbound_international_ach_transfer, json[QString("inbound_international_ach_transfer")]);
    m_inbound_international_ach_transfer_isSet = !json[QString("inbound_international_ach_transfer")].isNull() && m_inbound_international_ach_transfer_isValid;

    m_inbound_real_time_payments_transfer_confirmation_isValid = ::OpenAPI::fromJsonValue(m_inbound_real_time_payments_transfer_confirmation, json[QString("inbound_real_time_payments_transfer_confirmation")]);
    m_inbound_real_time_payments_transfer_confirmation_isSet = !json[QString("inbound_real_time_payments_transfer_confirmation")].isNull() && m_inbound_real_time_payments_transfer_confirmation_isValid;

    m_inbound_wire_drawdown_payment_isValid = ::OpenAPI::fromJsonValue(m_inbound_wire_drawdown_payment, json[QString("inbound_wire_drawdown_payment")]);
    m_inbound_wire_drawdown_payment_isSet = !json[QString("inbound_wire_drawdown_payment")].isNull() && m_inbound_wire_drawdown_payment_isValid;

    m_inbound_wire_drawdown_payment_reversal_isValid = ::OpenAPI::fromJsonValue(m_inbound_wire_drawdown_payment_reversal, json[QString("inbound_wire_drawdown_payment_reversal")]);
    m_inbound_wire_drawdown_payment_reversal_isSet = !json[QString("inbound_wire_drawdown_payment_reversal")].isNull() && m_inbound_wire_drawdown_payment_reversal_isValid;

    m_inbound_wire_reversal_isValid = ::OpenAPI::fromJsonValue(m_inbound_wire_reversal, json[QString("inbound_wire_reversal")]);
    m_inbound_wire_reversal_isSet = !json[QString("inbound_wire_reversal")].isNull() && m_inbound_wire_reversal_isValid;

    m_inbound_wire_transfer_isValid = ::OpenAPI::fromJsonValue(m_inbound_wire_transfer, json[QString("inbound_wire_transfer")]);
    m_inbound_wire_transfer_isSet = !json[QString("inbound_wire_transfer")].isNull() && m_inbound_wire_transfer_isValid;

    m_interest_payment_isValid = ::OpenAPI::fromJsonValue(m_interest_payment, json[QString("interest_payment")]);
    m_interest_payment_isSet = !json[QString("interest_payment")].isNull() && m_interest_payment_isValid;

    m_internal_source_isValid = ::OpenAPI::fromJsonValue(m_internal_source, json[QString("internal_source")]);
    m_internal_source_isSet = !json[QString("internal_source")].isNull() && m_internal_source_isValid;

    m_real_time_payments_transfer_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_real_time_payments_transfer_acknowledgement, json[QString("real_time_payments_transfer_acknowledgement")]);
    m_real_time_payments_transfer_acknowledgement_isSet = !json[QString("real_time_payments_transfer_acknowledgement")].isNull() && m_real_time_payments_transfer_acknowledgement_isValid;

    m_sample_funds_isValid = ::OpenAPI::fromJsonValue(m_sample_funds, json[QString("sample_funds")]);
    m_sample_funds_isSet = !json[QString("sample_funds")].isNull() && m_sample_funds_isValid;

    m_wire_drawdown_payment_intention_isValid = ::OpenAPI::fromJsonValue(m_wire_drawdown_payment_intention, json[QString("wire_drawdown_payment_intention")]);
    m_wire_drawdown_payment_intention_isSet = !json[QString("wire_drawdown_payment_intention")].isNull() && m_wire_drawdown_payment_intention_isValid;

    m_wire_drawdown_payment_rejection_isValid = ::OpenAPI::fromJsonValue(m_wire_drawdown_payment_rejection, json[QString("wire_drawdown_payment_rejection")]);
    m_wire_drawdown_payment_rejection_isSet = !json[QString("wire_drawdown_payment_rejection")].isNull() && m_wire_drawdown_payment_rejection_isValid;

    m_wire_transfer_intention_isValid = ::OpenAPI::fromJsonValue(m_wire_transfer_intention, json[QString("wire_transfer_intention")]);
    m_wire_transfer_intention_isSet = !json[QString("wire_transfer_intention")].isNull() && m_wire_transfer_intention_isValid;

    m_wire_transfer_rejection_isValid = ::OpenAPI::fromJsonValue(m_wire_transfer_rejection, json[QString("wire_transfer_rejection")]);
    m_wire_transfer_rejection_isSet = !json[QString("wire_transfer_rejection")].isNull() && m_wire_transfer_rejection_isValid;
}

QString OAITransaction_Source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction_Source::asJsonObject() const {
    QJsonObject obj;
    if (m_account_transfer_intention.isSet()) {
        obj.insert(QString("account_transfer_intention"), ::OpenAPI::toJsonValue(m_account_transfer_intention));
    }
    if (m_ach_check_conversion.isSet()) {
        obj.insert(QString("ach_check_conversion"), ::OpenAPI::toJsonValue(m_ach_check_conversion));
    }
    if (m_ach_check_conversion_return.isSet()) {
        obj.insert(QString("ach_check_conversion_return"), ::OpenAPI::toJsonValue(m_ach_check_conversion_return));
    }
    if (m_ach_transfer_intention.isSet()) {
        obj.insert(QString("ach_transfer_intention"), ::OpenAPI::toJsonValue(m_ach_transfer_intention));
    }
    if (m_ach_transfer_rejection.isSet()) {
        obj.insert(QString("ach_transfer_rejection"), ::OpenAPI::toJsonValue(m_ach_transfer_rejection));
    }
    if (m_ach_transfer_return.isSet()) {
        obj.insert(QString("ach_transfer_return"), ::OpenAPI::toJsonValue(m_ach_transfer_return));
    }
    if (m_card_dispute_acceptance.isSet()) {
        obj.insert(QString("card_dispute_acceptance"), ::OpenAPI::toJsonValue(m_card_dispute_acceptance));
    }
    if (m_card_refund.isSet()) {
        obj.insert(QString("card_refund"), ::OpenAPI::toJsonValue(m_card_refund));
    }
    if (m_card_revenue_payment.isSet()) {
        obj.insert(QString("card_revenue_payment"), ::OpenAPI::toJsonValue(m_card_revenue_payment));
    }
    if (m_card_route_refund.isSet()) {
        obj.insert(QString("card_route_refund"), ::OpenAPI::toJsonValue(m_card_route_refund));
    }
    if (m_card_route_settlement.isSet()) {
        obj.insert(QString("card_route_settlement"), ::OpenAPI::toJsonValue(m_card_route_settlement));
    }
    if (m_card_settlement.isSet()) {
        obj.insert(QString("card_settlement"), ::OpenAPI::toJsonValue(m_card_settlement));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_check_deposit_acceptance.isSet()) {
        obj.insert(QString("check_deposit_acceptance"), ::OpenAPI::toJsonValue(m_check_deposit_acceptance));
    }
    if (m_check_deposit_return.isSet()) {
        obj.insert(QString("check_deposit_return"), ::OpenAPI::toJsonValue(m_check_deposit_return));
    }
    if (m_check_transfer_intention.isSet()) {
        obj.insert(QString("check_transfer_intention"), ::OpenAPI::toJsonValue(m_check_transfer_intention));
    }
    if (m_check_transfer_rejection.isSet()) {
        obj.insert(QString("check_transfer_rejection"), ::OpenAPI::toJsonValue(m_check_transfer_rejection));
    }
    if (m_check_transfer_return.isSet()) {
        obj.insert(QString("check_transfer_return"), ::OpenAPI::toJsonValue(m_check_transfer_return));
    }
    if (m_check_transfer_stop_payment_request.isSet()) {
        obj.insert(QString("check_transfer_stop_payment_request"), ::OpenAPI::toJsonValue(m_check_transfer_stop_payment_request));
    }
    if (m_dispute_resolution.isSet()) {
        obj.insert(QString("dispute_resolution"), ::OpenAPI::toJsonValue(m_dispute_resolution));
    }
    if (m_empyreal_cash_deposit.isSet()) {
        obj.insert(QString("empyreal_cash_deposit"), ::OpenAPI::toJsonValue(m_empyreal_cash_deposit));
    }
    if (m_fee_payment.isSet()) {
        obj.insert(QString("fee_payment"), ::OpenAPI::toJsonValue(m_fee_payment));
    }
    if (m_inbound_ach_transfer.isSet()) {
        obj.insert(QString("inbound_ach_transfer"), ::OpenAPI::toJsonValue(m_inbound_ach_transfer));
    }
    if (m_inbound_check.isSet()) {
        obj.insert(QString("inbound_check"), ::OpenAPI::toJsonValue(m_inbound_check));
    }
    if (m_inbound_international_ach_transfer.isSet()) {
        obj.insert(QString("inbound_international_ach_transfer"), ::OpenAPI::toJsonValue(m_inbound_international_ach_transfer));
    }
    if (m_inbound_real_time_payments_transfer_confirmation.isSet()) {
        obj.insert(QString("inbound_real_time_payments_transfer_confirmation"), ::OpenAPI::toJsonValue(m_inbound_real_time_payments_transfer_confirmation));
    }
    if (m_inbound_wire_drawdown_payment.isSet()) {
        obj.insert(QString("inbound_wire_drawdown_payment"), ::OpenAPI::toJsonValue(m_inbound_wire_drawdown_payment));
    }
    if (m_inbound_wire_drawdown_payment_reversal.isSet()) {
        obj.insert(QString("inbound_wire_drawdown_payment_reversal"), ::OpenAPI::toJsonValue(m_inbound_wire_drawdown_payment_reversal));
    }
    if (m_inbound_wire_reversal.isSet()) {
        obj.insert(QString("inbound_wire_reversal"), ::OpenAPI::toJsonValue(m_inbound_wire_reversal));
    }
    if (m_inbound_wire_transfer.isSet()) {
        obj.insert(QString("inbound_wire_transfer"), ::OpenAPI::toJsonValue(m_inbound_wire_transfer));
    }
    if (m_interest_payment.isSet()) {
        obj.insert(QString("interest_payment"), ::OpenAPI::toJsonValue(m_interest_payment));
    }
    if (m_internal_source.isSet()) {
        obj.insert(QString("internal_source"), ::OpenAPI::toJsonValue(m_internal_source));
    }
    if (m_real_time_payments_transfer_acknowledgement.isSet()) {
        obj.insert(QString("real_time_payments_transfer_acknowledgement"), ::OpenAPI::toJsonValue(m_real_time_payments_transfer_acknowledgement));
    }
    if (m_sample_funds.isSet()) {
        obj.insert(QString("sample_funds"), ::OpenAPI::toJsonValue(m_sample_funds));
    }
    if (m_wire_drawdown_payment_intention.isSet()) {
        obj.insert(QString("wire_drawdown_payment_intention"), ::OpenAPI::toJsonValue(m_wire_drawdown_payment_intention));
    }
    if (m_wire_drawdown_payment_rejection.isSet()) {
        obj.insert(QString("wire_drawdown_payment_rejection"), ::OpenAPI::toJsonValue(m_wire_drawdown_payment_rejection));
    }
    if (m_wire_transfer_intention.isSet()) {
        obj.insert(QString("wire_transfer_intention"), ::OpenAPI::toJsonValue(m_wire_transfer_intention));
    }
    if (m_wire_transfer_rejection.isSet()) {
        obj.insert(QString("wire_transfer_rejection"), ::OpenAPI::toJsonValue(m_wire_transfer_rejection));
    }
    return obj;
}

OAIAccount_Transfer_Intention OAITransaction_Source::getAccountTransferIntention() const {
    return m_account_transfer_intention;
}
void OAITransaction_Source::setAccountTransferIntention(const OAIAccount_Transfer_Intention &account_transfer_intention) {
    m_account_transfer_intention = account_transfer_intention;
    m_account_transfer_intention_isSet = true;
}

bool OAITransaction_Source::is_account_transfer_intention_Set() const{
    return m_account_transfer_intention_isSet;
}

bool OAITransaction_Source::is_account_transfer_intention_Valid() const{
    return m_account_transfer_intention_isValid;
}

OAIACH_Check_Conversion OAITransaction_Source::getAchCheckConversion() const {
    return m_ach_check_conversion;
}
void OAITransaction_Source::setAchCheckConversion(const OAIACH_Check_Conversion &ach_check_conversion) {
    m_ach_check_conversion = ach_check_conversion;
    m_ach_check_conversion_isSet = true;
}

bool OAITransaction_Source::is_ach_check_conversion_Set() const{
    return m_ach_check_conversion_isSet;
}

bool OAITransaction_Source::is_ach_check_conversion_Valid() const{
    return m_ach_check_conversion_isValid;
}

OAIACH_Check_Conversion_Return OAITransaction_Source::getAchCheckConversionReturn() const {
    return m_ach_check_conversion_return;
}
void OAITransaction_Source::setAchCheckConversionReturn(const OAIACH_Check_Conversion_Return &ach_check_conversion_return) {
    m_ach_check_conversion_return = ach_check_conversion_return;
    m_ach_check_conversion_return_isSet = true;
}

bool OAITransaction_Source::is_ach_check_conversion_return_Set() const{
    return m_ach_check_conversion_return_isSet;
}

bool OAITransaction_Source::is_ach_check_conversion_return_Valid() const{
    return m_ach_check_conversion_return_isValid;
}

OAIACH_Transfer_Intention OAITransaction_Source::getAchTransferIntention() const {
    return m_ach_transfer_intention;
}
void OAITransaction_Source::setAchTransferIntention(const OAIACH_Transfer_Intention &ach_transfer_intention) {
    m_ach_transfer_intention = ach_transfer_intention;
    m_ach_transfer_intention_isSet = true;
}

bool OAITransaction_Source::is_ach_transfer_intention_Set() const{
    return m_ach_transfer_intention_isSet;
}

bool OAITransaction_Source::is_ach_transfer_intention_Valid() const{
    return m_ach_transfer_intention_isValid;
}

OAIACH_Transfer_Rejection OAITransaction_Source::getAchTransferRejection() const {
    return m_ach_transfer_rejection;
}
void OAITransaction_Source::setAchTransferRejection(const OAIACH_Transfer_Rejection &ach_transfer_rejection) {
    m_ach_transfer_rejection = ach_transfer_rejection;
    m_ach_transfer_rejection_isSet = true;
}

bool OAITransaction_Source::is_ach_transfer_rejection_Set() const{
    return m_ach_transfer_rejection_isSet;
}

bool OAITransaction_Source::is_ach_transfer_rejection_Valid() const{
    return m_ach_transfer_rejection_isValid;
}

OAIACH_Transfer_Return_1 OAITransaction_Source::getAchTransferReturn() const {
    return m_ach_transfer_return;
}
void OAITransaction_Source::setAchTransferReturn(const OAIACH_Transfer_Return_1 &ach_transfer_return) {
    m_ach_transfer_return = ach_transfer_return;
    m_ach_transfer_return_isSet = true;
}

bool OAITransaction_Source::is_ach_transfer_return_Set() const{
    return m_ach_transfer_return_isSet;
}

bool OAITransaction_Source::is_ach_transfer_return_Valid() const{
    return m_ach_transfer_return_isValid;
}

OAICard_Dispute_Acceptance_1 OAITransaction_Source::getCardDisputeAcceptance() const {
    return m_card_dispute_acceptance;
}
void OAITransaction_Source::setCardDisputeAcceptance(const OAICard_Dispute_Acceptance_1 &card_dispute_acceptance) {
    m_card_dispute_acceptance = card_dispute_acceptance;
    m_card_dispute_acceptance_isSet = true;
}

bool OAITransaction_Source::is_card_dispute_acceptance_Set() const{
    return m_card_dispute_acceptance_isSet;
}

bool OAITransaction_Source::is_card_dispute_acceptance_Valid() const{
    return m_card_dispute_acceptance_isValid;
}

OAICard_Refund OAITransaction_Source::getCardRefund() const {
    return m_card_refund;
}
void OAITransaction_Source::setCardRefund(const OAICard_Refund &card_refund) {
    m_card_refund = card_refund;
    m_card_refund_isSet = true;
}

bool OAITransaction_Source::is_card_refund_Set() const{
    return m_card_refund_isSet;
}

bool OAITransaction_Source::is_card_refund_Valid() const{
    return m_card_refund_isValid;
}

OAICard_Revenue_Payment OAITransaction_Source::getCardRevenuePayment() const {
    return m_card_revenue_payment;
}
void OAITransaction_Source::setCardRevenuePayment(const OAICard_Revenue_Payment &card_revenue_payment) {
    m_card_revenue_payment = card_revenue_payment;
    m_card_revenue_payment_isSet = true;
}

bool OAITransaction_Source::is_card_revenue_payment_Set() const{
    return m_card_revenue_payment_isSet;
}

bool OAITransaction_Source::is_card_revenue_payment_Valid() const{
    return m_card_revenue_payment_isValid;
}

OAIDeprecated_Card_Refund OAITransaction_Source::getCardRouteRefund() const {
    return m_card_route_refund;
}
void OAITransaction_Source::setCardRouteRefund(const OAIDeprecated_Card_Refund &card_route_refund) {
    m_card_route_refund = card_route_refund;
    m_card_route_refund_isSet = true;
}

bool OAITransaction_Source::is_card_route_refund_Set() const{
    return m_card_route_refund_isSet;
}

bool OAITransaction_Source::is_card_route_refund_Valid() const{
    return m_card_route_refund_isValid;
}

OAIDeprecated_Card_Settlement OAITransaction_Source::getCardRouteSettlement() const {
    return m_card_route_settlement;
}
void OAITransaction_Source::setCardRouteSettlement(const OAIDeprecated_Card_Settlement &card_route_settlement) {
    m_card_route_settlement = card_route_settlement;
    m_card_route_settlement_isSet = true;
}

bool OAITransaction_Source::is_card_route_settlement_Set() const{
    return m_card_route_settlement_isSet;
}

bool OAITransaction_Source::is_card_route_settlement_Valid() const{
    return m_card_route_settlement_isValid;
}

OAICard_Settlement OAITransaction_Source::getCardSettlement() const {
    return m_card_settlement;
}
void OAITransaction_Source::setCardSettlement(const OAICard_Settlement &card_settlement) {
    m_card_settlement = card_settlement;
    m_card_settlement_isSet = true;
}

bool OAITransaction_Source::is_card_settlement_Set() const{
    return m_card_settlement_isSet;
}

bool OAITransaction_Source::is_card_settlement_Valid() const{
    return m_card_settlement_isValid;
}

QString OAITransaction_Source::getCategory() const {
    return m_category;
}
void OAITransaction_Source::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransaction_Source::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransaction_Source::is_category_Valid() const{
    return m_category_isValid;
}

OAICheck_Deposit_Acceptance_1 OAITransaction_Source::getCheckDepositAcceptance() const {
    return m_check_deposit_acceptance;
}
void OAITransaction_Source::setCheckDepositAcceptance(const OAICheck_Deposit_Acceptance_1 &check_deposit_acceptance) {
    m_check_deposit_acceptance = check_deposit_acceptance;
    m_check_deposit_acceptance_isSet = true;
}

bool OAITransaction_Source::is_check_deposit_acceptance_Set() const{
    return m_check_deposit_acceptance_isSet;
}

bool OAITransaction_Source::is_check_deposit_acceptance_Valid() const{
    return m_check_deposit_acceptance_isValid;
}

OAICheck_Deposit_Return_1 OAITransaction_Source::getCheckDepositReturn() const {
    return m_check_deposit_return;
}
void OAITransaction_Source::setCheckDepositReturn(const OAICheck_Deposit_Return_1 &check_deposit_return) {
    m_check_deposit_return = check_deposit_return;
    m_check_deposit_return_isSet = true;
}

bool OAITransaction_Source::is_check_deposit_return_Set() const{
    return m_check_deposit_return_isSet;
}

bool OAITransaction_Source::is_check_deposit_return_Valid() const{
    return m_check_deposit_return_isValid;
}

OAICheck_Transfer_Intention OAITransaction_Source::getCheckTransferIntention() const {
    return m_check_transfer_intention;
}
void OAITransaction_Source::setCheckTransferIntention(const OAICheck_Transfer_Intention &check_transfer_intention) {
    m_check_transfer_intention = check_transfer_intention;
    m_check_transfer_intention_isSet = true;
}

bool OAITransaction_Source::is_check_transfer_intention_Set() const{
    return m_check_transfer_intention_isSet;
}

bool OAITransaction_Source::is_check_transfer_intention_Valid() const{
    return m_check_transfer_intention_isValid;
}

OAICheck_Transfer_Rejection OAITransaction_Source::getCheckTransferRejection() const {
    return m_check_transfer_rejection;
}
void OAITransaction_Source::setCheckTransferRejection(const OAICheck_Transfer_Rejection &check_transfer_rejection) {
    m_check_transfer_rejection = check_transfer_rejection;
    m_check_transfer_rejection_isSet = true;
}

bool OAITransaction_Source::is_check_transfer_rejection_Set() const{
    return m_check_transfer_rejection_isSet;
}

bool OAITransaction_Source::is_check_transfer_rejection_Valid() const{
    return m_check_transfer_rejection_isValid;
}

OAICheck_Transfer_Return_1 OAITransaction_Source::getCheckTransferReturn() const {
    return m_check_transfer_return;
}
void OAITransaction_Source::setCheckTransferReturn(const OAICheck_Transfer_Return_1 &check_transfer_return) {
    m_check_transfer_return = check_transfer_return;
    m_check_transfer_return_isSet = true;
}

bool OAITransaction_Source::is_check_transfer_return_Set() const{
    return m_check_transfer_return_isSet;
}

bool OAITransaction_Source::is_check_transfer_return_Valid() const{
    return m_check_transfer_return_isValid;
}

OAICheck_Transfer_Stop_Payment_Request_1 OAITransaction_Source::getCheckTransferStopPaymentRequest() const {
    return m_check_transfer_stop_payment_request;
}
void OAITransaction_Source::setCheckTransferStopPaymentRequest(const OAICheck_Transfer_Stop_Payment_Request_1 &check_transfer_stop_payment_request) {
    m_check_transfer_stop_payment_request = check_transfer_stop_payment_request;
    m_check_transfer_stop_payment_request_isSet = true;
}

bool OAITransaction_Source::is_check_transfer_stop_payment_request_Set() const{
    return m_check_transfer_stop_payment_request_isSet;
}

bool OAITransaction_Source::is_check_transfer_stop_payment_request_Valid() const{
    return m_check_transfer_stop_payment_request_isValid;
}

OAIDispute_Resolution OAITransaction_Source::getDisputeResolution() const {
    return m_dispute_resolution;
}
void OAITransaction_Source::setDisputeResolution(const OAIDispute_Resolution &dispute_resolution) {
    m_dispute_resolution = dispute_resolution;
    m_dispute_resolution_isSet = true;
}

bool OAITransaction_Source::is_dispute_resolution_Set() const{
    return m_dispute_resolution_isSet;
}

bool OAITransaction_Source::is_dispute_resolution_Valid() const{
    return m_dispute_resolution_isValid;
}

OAIEmpyreal_Cash_Deposit OAITransaction_Source::getEmpyrealCashDeposit() const {
    return m_empyreal_cash_deposit;
}
void OAITransaction_Source::setEmpyrealCashDeposit(const OAIEmpyreal_Cash_Deposit &empyreal_cash_deposit) {
    m_empyreal_cash_deposit = empyreal_cash_deposit;
    m_empyreal_cash_deposit_isSet = true;
}

bool OAITransaction_Source::is_empyreal_cash_deposit_Set() const{
    return m_empyreal_cash_deposit_isSet;
}

bool OAITransaction_Source::is_empyreal_cash_deposit_Valid() const{
    return m_empyreal_cash_deposit_isValid;
}

OAIFee_Payment OAITransaction_Source::getFeePayment() const {
    return m_fee_payment;
}
void OAITransaction_Source::setFeePayment(const OAIFee_Payment &fee_payment) {
    m_fee_payment = fee_payment;
    m_fee_payment_isSet = true;
}

bool OAITransaction_Source::is_fee_payment_Set() const{
    return m_fee_payment_isSet;
}

bool OAITransaction_Source::is_fee_payment_Valid() const{
    return m_fee_payment_isValid;
}

OAIInbound_ACH_Transfer OAITransaction_Source::getInboundAchTransfer() const {
    return m_inbound_ach_transfer;
}
void OAITransaction_Source::setInboundAchTransfer(const OAIInbound_ACH_Transfer &inbound_ach_transfer) {
    m_inbound_ach_transfer = inbound_ach_transfer;
    m_inbound_ach_transfer_isSet = true;
}

bool OAITransaction_Source::is_inbound_ach_transfer_Set() const{
    return m_inbound_ach_transfer_isSet;
}

bool OAITransaction_Source::is_inbound_ach_transfer_Valid() const{
    return m_inbound_ach_transfer_isValid;
}

OAIInbound_Check OAITransaction_Source::getInboundCheck() const {
    return m_inbound_check;
}
void OAITransaction_Source::setInboundCheck(const OAIInbound_Check &inbound_check) {
    m_inbound_check = inbound_check;
    m_inbound_check_isSet = true;
}

bool OAITransaction_Source::is_inbound_check_Set() const{
    return m_inbound_check_isSet;
}

bool OAITransaction_Source::is_inbound_check_Valid() const{
    return m_inbound_check_isValid;
}

OAIInbound_International_ACH_Transfer OAITransaction_Source::getInboundInternationalAchTransfer() const {
    return m_inbound_international_ach_transfer;
}
void OAITransaction_Source::setInboundInternationalAchTransfer(const OAIInbound_International_ACH_Transfer &inbound_international_ach_transfer) {
    m_inbound_international_ach_transfer = inbound_international_ach_transfer;
    m_inbound_international_ach_transfer_isSet = true;
}

bool OAITransaction_Source::is_inbound_international_ach_transfer_Set() const{
    return m_inbound_international_ach_transfer_isSet;
}

bool OAITransaction_Source::is_inbound_international_ach_transfer_Valid() const{
    return m_inbound_international_ach_transfer_isValid;
}

OAIInbound_Real_Time_Payments_Transfer_Confirmation OAITransaction_Source::getInboundRealTimePaymentsTransferConfirmation() const {
    return m_inbound_real_time_payments_transfer_confirmation;
}
void OAITransaction_Source::setInboundRealTimePaymentsTransferConfirmation(const OAIInbound_Real_Time_Payments_Transfer_Confirmation &inbound_real_time_payments_transfer_confirmation) {
    m_inbound_real_time_payments_transfer_confirmation = inbound_real_time_payments_transfer_confirmation;
    m_inbound_real_time_payments_transfer_confirmation_isSet = true;
}

bool OAITransaction_Source::is_inbound_real_time_payments_transfer_confirmation_Set() const{
    return m_inbound_real_time_payments_transfer_confirmation_isSet;
}

bool OAITransaction_Source::is_inbound_real_time_payments_transfer_confirmation_Valid() const{
    return m_inbound_real_time_payments_transfer_confirmation_isValid;
}

OAIInbound_Wire_Drawdown_Payment OAITransaction_Source::getInboundWireDrawdownPayment() const {
    return m_inbound_wire_drawdown_payment;
}
void OAITransaction_Source::setInboundWireDrawdownPayment(const OAIInbound_Wire_Drawdown_Payment &inbound_wire_drawdown_payment) {
    m_inbound_wire_drawdown_payment = inbound_wire_drawdown_payment;
    m_inbound_wire_drawdown_payment_isSet = true;
}

bool OAITransaction_Source::is_inbound_wire_drawdown_payment_Set() const{
    return m_inbound_wire_drawdown_payment_isSet;
}

bool OAITransaction_Source::is_inbound_wire_drawdown_payment_Valid() const{
    return m_inbound_wire_drawdown_payment_isValid;
}

OAIInbound_Wire_Drawdown_Payment_Reversal OAITransaction_Source::getInboundWireDrawdownPaymentReversal() const {
    return m_inbound_wire_drawdown_payment_reversal;
}
void OAITransaction_Source::setInboundWireDrawdownPaymentReversal(const OAIInbound_Wire_Drawdown_Payment_Reversal &inbound_wire_drawdown_payment_reversal) {
    m_inbound_wire_drawdown_payment_reversal = inbound_wire_drawdown_payment_reversal;
    m_inbound_wire_drawdown_payment_reversal_isSet = true;
}

bool OAITransaction_Source::is_inbound_wire_drawdown_payment_reversal_Set() const{
    return m_inbound_wire_drawdown_payment_reversal_isSet;
}

bool OAITransaction_Source::is_inbound_wire_drawdown_payment_reversal_Valid() const{
    return m_inbound_wire_drawdown_payment_reversal_isValid;
}

OAIInbound_Wire_Reversal OAITransaction_Source::getInboundWireReversal() const {
    return m_inbound_wire_reversal;
}
void OAITransaction_Source::setInboundWireReversal(const OAIInbound_Wire_Reversal &inbound_wire_reversal) {
    m_inbound_wire_reversal = inbound_wire_reversal;
    m_inbound_wire_reversal_isSet = true;
}

bool OAITransaction_Source::is_inbound_wire_reversal_Set() const{
    return m_inbound_wire_reversal_isSet;
}

bool OAITransaction_Source::is_inbound_wire_reversal_Valid() const{
    return m_inbound_wire_reversal_isValid;
}

OAIInbound_Wire_Transfer OAITransaction_Source::getInboundWireTransfer() const {
    return m_inbound_wire_transfer;
}
void OAITransaction_Source::setInboundWireTransfer(const OAIInbound_Wire_Transfer &inbound_wire_transfer) {
    m_inbound_wire_transfer = inbound_wire_transfer;
    m_inbound_wire_transfer_isSet = true;
}

bool OAITransaction_Source::is_inbound_wire_transfer_Set() const{
    return m_inbound_wire_transfer_isSet;
}

bool OAITransaction_Source::is_inbound_wire_transfer_Valid() const{
    return m_inbound_wire_transfer_isValid;
}

OAIInterest_Payment OAITransaction_Source::getInterestPayment() const {
    return m_interest_payment;
}
void OAITransaction_Source::setInterestPayment(const OAIInterest_Payment &interest_payment) {
    m_interest_payment = interest_payment;
    m_interest_payment_isSet = true;
}

bool OAITransaction_Source::is_interest_payment_Set() const{
    return m_interest_payment_isSet;
}

bool OAITransaction_Source::is_interest_payment_Valid() const{
    return m_interest_payment_isValid;
}

OAIInternal_Source OAITransaction_Source::getInternalSource() const {
    return m_internal_source;
}
void OAITransaction_Source::setInternalSource(const OAIInternal_Source &internal_source) {
    m_internal_source = internal_source;
    m_internal_source_isSet = true;
}

bool OAITransaction_Source::is_internal_source_Set() const{
    return m_internal_source_isSet;
}

bool OAITransaction_Source::is_internal_source_Valid() const{
    return m_internal_source_isValid;
}

OAIReal_Time_Payments_Transfer_Acknowledgement OAITransaction_Source::getRealTimePaymentsTransferAcknowledgement() const {
    return m_real_time_payments_transfer_acknowledgement;
}
void OAITransaction_Source::setRealTimePaymentsTransferAcknowledgement(const OAIReal_Time_Payments_Transfer_Acknowledgement &real_time_payments_transfer_acknowledgement) {
    m_real_time_payments_transfer_acknowledgement = real_time_payments_transfer_acknowledgement;
    m_real_time_payments_transfer_acknowledgement_isSet = true;
}

bool OAITransaction_Source::is_real_time_payments_transfer_acknowledgement_Set() const{
    return m_real_time_payments_transfer_acknowledgement_isSet;
}

bool OAITransaction_Source::is_real_time_payments_transfer_acknowledgement_Valid() const{
    return m_real_time_payments_transfer_acknowledgement_isValid;
}

OAISample_Funds OAITransaction_Source::getSampleFunds() const {
    return m_sample_funds;
}
void OAITransaction_Source::setSampleFunds(const OAISample_Funds &sample_funds) {
    m_sample_funds = sample_funds;
    m_sample_funds_isSet = true;
}

bool OAITransaction_Source::is_sample_funds_Set() const{
    return m_sample_funds_isSet;
}

bool OAITransaction_Source::is_sample_funds_Valid() const{
    return m_sample_funds_isValid;
}

OAIWire_Drawdown_Payment_Intention OAITransaction_Source::getWireDrawdownPaymentIntention() const {
    return m_wire_drawdown_payment_intention;
}
void OAITransaction_Source::setWireDrawdownPaymentIntention(const OAIWire_Drawdown_Payment_Intention &wire_drawdown_payment_intention) {
    m_wire_drawdown_payment_intention = wire_drawdown_payment_intention;
    m_wire_drawdown_payment_intention_isSet = true;
}

bool OAITransaction_Source::is_wire_drawdown_payment_intention_Set() const{
    return m_wire_drawdown_payment_intention_isSet;
}

bool OAITransaction_Source::is_wire_drawdown_payment_intention_Valid() const{
    return m_wire_drawdown_payment_intention_isValid;
}

OAIWire_Drawdown_Payment_Rejection OAITransaction_Source::getWireDrawdownPaymentRejection() const {
    return m_wire_drawdown_payment_rejection;
}
void OAITransaction_Source::setWireDrawdownPaymentRejection(const OAIWire_Drawdown_Payment_Rejection &wire_drawdown_payment_rejection) {
    m_wire_drawdown_payment_rejection = wire_drawdown_payment_rejection;
    m_wire_drawdown_payment_rejection_isSet = true;
}

bool OAITransaction_Source::is_wire_drawdown_payment_rejection_Set() const{
    return m_wire_drawdown_payment_rejection_isSet;
}

bool OAITransaction_Source::is_wire_drawdown_payment_rejection_Valid() const{
    return m_wire_drawdown_payment_rejection_isValid;
}

OAIWire_Transfer_Intention OAITransaction_Source::getWireTransferIntention() const {
    return m_wire_transfer_intention;
}
void OAITransaction_Source::setWireTransferIntention(const OAIWire_Transfer_Intention &wire_transfer_intention) {
    m_wire_transfer_intention = wire_transfer_intention;
    m_wire_transfer_intention_isSet = true;
}

bool OAITransaction_Source::is_wire_transfer_intention_Set() const{
    return m_wire_transfer_intention_isSet;
}

bool OAITransaction_Source::is_wire_transfer_intention_Valid() const{
    return m_wire_transfer_intention_isValid;
}

OAIWire_Transfer_Rejection OAITransaction_Source::getWireTransferRejection() const {
    return m_wire_transfer_rejection;
}
void OAITransaction_Source::setWireTransferRejection(const OAIWire_Transfer_Rejection &wire_transfer_rejection) {
    m_wire_transfer_rejection = wire_transfer_rejection;
    m_wire_transfer_rejection_isSet = true;
}

bool OAITransaction_Source::is_wire_transfer_rejection_Set() const{
    return m_wire_transfer_rejection_isSet;
}

bool OAITransaction_Source::is_wire_transfer_rejection_Valid() const{
    return m_wire_transfer_rejection_isValid;
}

bool OAITransaction_Source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_transfer_intention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_check_conversion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_check_conversion_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_transfer_intention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_transfer_rejection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_transfer_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_dispute_acceptance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_refund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_revenue_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_route_refund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_route_settlement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_settlement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_deposit_acceptance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_deposit_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_transfer_intention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_transfer_rejection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_transfer_return.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_transfer_stop_payment_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_empyreal_cash_deposit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_ach_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_international_ach_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_real_time_payments_transfer_confirmation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_wire_drawdown_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_wire_drawdown_payment_reversal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_wire_reversal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_wire_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_time_payments_transfer_acknowledgement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_funds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_drawdown_payment_intention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_drawdown_payment_rejection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_transfer_intention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_transfer_rejection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction_Source::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_transfer_intention_isValid && m_ach_check_conversion_isValid && m_ach_check_conversion_return_isValid && m_ach_transfer_intention_isValid && m_ach_transfer_rejection_isValid && m_ach_transfer_return_isValid && m_card_dispute_acceptance_isValid && m_card_refund_isValid && m_card_revenue_payment_isValid && m_card_route_refund_isValid && m_card_route_settlement_isValid && m_card_settlement_isValid && m_category_isValid && m_check_deposit_acceptance_isValid && m_check_deposit_return_isValid && m_check_transfer_intention_isValid && m_check_transfer_rejection_isValid && m_check_transfer_return_isValid && m_check_transfer_stop_payment_request_isValid && m_dispute_resolution_isValid && m_empyreal_cash_deposit_isValid && m_fee_payment_isValid && m_inbound_ach_transfer_isValid && m_inbound_check_isValid && m_inbound_international_ach_transfer_isValid && m_inbound_real_time_payments_transfer_confirmation_isValid && m_inbound_wire_drawdown_payment_isValid && m_inbound_wire_drawdown_payment_reversal_isValid && m_inbound_wire_reversal_isValid && m_inbound_wire_transfer_isValid && m_interest_payment_isValid && m_internal_source_isValid && m_real_time_payments_transfer_acknowledgement_isValid && m_sample_funds_isValid && m_wire_drawdown_payment_intention_isValid && m_wire_drawdown_payment_rejection_isValid && m_wire_transfer_intention_isValid && m_wire_transfer_rejection_isValid && true;
}

} // namespace OpenAPI
