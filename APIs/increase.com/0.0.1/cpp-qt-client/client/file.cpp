/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

file::file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

file::file() {
    this->initializeModel();
}

file::~file() {}

void file::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void file::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject file::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime file::getCreatedAt() const {
    return m_created_at;
}
void file::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool file::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool file::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString file::getDescription() const {
    return m_description;
}
void file::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool file::is_description_Set() const{
    return m_description_isSet;
}

bool file::is_description_Valid() const{
    return m_description_isValid;
}

QString file::getDirection() const {
    return m_direction;
}
void file::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool file::is_direction_Set() const{
    return m_direction_isSet;
}

bool file::is_direction_Valid() const{
    return m_direction_isValid;
}

QString file::getDownloadUrl() const {
    return m_download_url;
}
void file::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool file::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool file::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString file::getFilename() const {
    return m_filename;
}
void file::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool file::is_filename_Set() const{
    return m_filename_isSet;
}

bool file::is_filename_Valid() const{
    return m_filename_isValid;
}

QString file::getId() const {
    return m_id;
}
void file::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool file::is_id_Set() const{
    return m_id_isSet;
}

bool file::is_id_Valid() const{
    return m_id_isValid;
}

QString file::getPurpose() const {
    return m_purpose;
}
void file::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool file::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool file::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString file::getType() const {
    return m_type;
}
void file::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool file::is_type_Set() const{
    return m_type_isSet;
}

bool file::is_type_Valid() const{
    return m_type_isValid;
}

bool file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool file::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_direction_isValid && m_download_url_isValid && m_filename_isValid && m_id_isValid && m_purpose_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
