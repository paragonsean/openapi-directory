/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISample_Funds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISample_Funds::OAISample_Funds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISample_Funds::OAISample_Funds() {
    this->initializeModel();
}

OAISample_Funds::~OAISample_Funds() {}

void OAISample_Funds::initializeModel() {

    m_originator_isSet = false;
    m_originator_isValid = false;
}

void OAISample_Funds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISample_Funds::fromJsonObject(QJsonObject json) {

    m_originator_isValid = ::OpenAPI::fromJsonValue(m_originator, json[QString("originator")]);
    m_originator_isSet = !json[QString("originator")].isNull() && m_originator_isValid;
}

QString OAISample_Funds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISample_Funds::asJsonObject() const {
    QJsonObject obj;
    if (m_originator_isSet) {
        obj.insert(QString("originator"), ::OpenAPI::toJsonValue(m_originator));
    }
    return obj;
}

QString OAISample_Funds::getOriginator() const {
    return m_originator;
}
void OAISample_Funds::setOriginator(const QString &originator) {
    m_originator = originator;
    m_originator_isSet = true;
}

bool OAISample_Funds::is_originator_Set() const{
    return m_originator_isSet;
}

bool OAISample_Funds::is_originator_Valid() const{
    return m_originator_isValid;
}

bool OAISample_Funds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_originator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISample_Funds::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_originator_isValid && true;
}

} // namespace OpenAPI
