/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrust.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrust::OAITrust(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrust::OAITrust() {
    this->initializeModel();
}

OAITrust::~OAITrust() {}

void OAITrust::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_formation_document_file_id_isSet = false;
    m_formation_document_file_id_isValid = false;

    m_formation_state_isSet = false;
    m_formation_state_isValid = false;

    m_grantor_isSet = false;
    m_grantor_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tax_identifier_isSet = false;
    m_tax_identifier_isValid = false;

    m_trustees_isSet = false;
    m_trustees_isValid = false;
}

void OAITrust::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrust::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_formation_document_file_id_isValid = ::OpenAPI::fromJsonValue(m_formation_document_file_id, json[QString("formation_document_file_id")]);
    m_formation_document_file_id_isSet = !json[QString("formation_document_file_id")].isNull() && m_formation_document_file_id_isValid;

    m_formation_state_isValid = ::OpenAPI::fromJsonValue(m_formation_state, json[QString("formation_state")]);
    m_formation_state_isSet = !json[QString("formation_state")].isNull() && m_formation_state_isValid;

    m_grantor_isValid = ::OpenAPI::fromJsonValue(m_grantor, json[QString("grantor")]);
    m_grantor_isSet = !json[QString("grantor")].isNull() && m_grantor_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tax_identifier_isValid = ::OpenAPI::fromJsonValue(m_tax_identifier, json[QString("tax_identifier")]);
    m_tax_identifier_isSet = !json[QString("tax_identifier")].isNull() && m_tax_identifier_isValid;

    m_trustees_isValid = ::OpenAPI::fromJsonValue(m_trustees, json[QString("trustees")]);
    m_trustees_isSet = !json[QString("trustees")].isNull() && m_trustees_isValid;
}

QString OAITrust::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrust::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_formation_document_file_id_isSet) {
        obj.insert(QString("formation_document_file_id"), ::OpenAPI::toJsonValue(m_formation_document_file_id));
    }
    if (m_formation_state_isSet) {
        obj.insert(QString("formation_state"), ::OpenAPI::toJsonValue(m_formation_state));
    }
    if (m_grantor.isSet()) {
        obj.insert(QString("grantor"), ::OpenAPI::toJsonValue(m_grantor));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tax_identifier_isSet) {
        obj.insert(QString("tax_identifier"), ::OpenAPI::toJsonValue(m_tax_identifier));
    }
    if (m_trustees.size() > 0) {
        obj.insert(QString("trustees"), ::OpenAPI::toJsonValue(m_trustees));
    }
    return obj;
}

OAIAddress_2 OAITrust::getAddress() const {
    return m_address;
}
void OAITrust::setAddress(const OAIAddress_2 &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAITrust::is_address_Set() const{
    return m_address_isSet;
}

bool OAITrust::is_address_Valid() const{
    return m_address_isValid;
}

QString OAITrust::getCategory() const {
    return m_category;
}
void OAITrust::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITrust::is_category_Set() const{
    return m_category_isSet;
}

bool OAITrust::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITrust::getFormationDocumentFileId() const {
    return m_formation_document_file_id;
}
void OAITrust::setFormationDocumentFileId(const QString &formation_document_file_id) {
    m_formation_document_file_id = formation_document_file_id;
    m_formation_document_file_id_isSet = true;
}

bool OAITrust::is_formation_document_file_id_Set() const{
    return m_formation_document_file_id_isSet;
}

bool OAITrust::is_formation_document_file_id_Valid() const{
    return m_formation_document_file_id_isValid;
}

QString OAITrust::getFormationState() const {
    return m_formation_state;
}
void OAITrust::setFormationState(const QString &formation_state) {
    m_formation_state = formation_state;
    m_formation_state_isSet = true;
}

bool OAITrust::is_formation_state_Set() const{
    return m_formation_state_isSet;
}

bool OAITrust::is_formation_state_Valid() const{
    return m_formation_state_isValid;
}

OAIIndividual_3 OAITrust::getGrantor() const {
    return m_grantor;
}
void OAITrust::setGrantor(const OAIIndividual_3 &grantor) {
    m_grantor = grantor;
    m_grantor_isSet = true;
}

bool OAITrust::is_grantor_Set() const{
    return m_grantor_isSet;
}

bool OAITrust::is_grantor_Valid() const{
    return m_grantor_isValid;
}

QString OAITrust::getName() const {
    return m_name;
}
void OAITrust::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrust::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrust::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrust::getTaxIdentifier() const {
    return m_tax_identifier;
}
void OAITrust::setTaxIdentifier(const QString &tax_identifier) {
    m_tax_identifier = tax_identifier;
    m_tax_identifier_isSet = true;
}

bool OAITrust::is_tax_identifier_Set() const{
    return m_tax_identifier_isSet;
}

bool OAITrust::is_tax_identifier_Valid() const{
    return m_tax_identifier_isValid;
}

QList<OAITrustees_Element> OAITrust::getTrustees() const {
    return m_trustees;
}
void OAITrust::setTrustees(const QList<OAITrustees_Element> &trustees) {
    m_trustees = trustees;
    m_trustees_isSet = true;
}

bool OAITrust::is_trustees_Set() const{
    return m_trustees_isSet;
}

bool OAITrust::is_trustees_Valid() const{
    return m_trustees_isValid;
}

bool OAITrust::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formation_document_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grantor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trustees.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrust::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_category_isValid && m_formation_document_file_id_isValid && m_formation_state_isValid && m_grantor_isValid && m_name_isValid && m_tax_identifier_isValid && m_trustees_isValid && true;
}

} // namespace OpenAPI
