/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard_Authorization_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard_Authorization_1::OAICard_Authorization_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard_Authorization_1::OAICard_Authorization_1() {
    this->initializeModel();
}

OAICard_Authorization_1::~OAICard_Authorization_1() {}

void OAICard_Authorization_1::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_merchant_acceptor_id_isSet = false;
    m_merchant_acceptor_id_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_merchant_city_isSet = false;
    m_merchant_city_isValid = false;

    m_merchant_country_isSet = false;
    m_merchant_country_isValid = false;

    m_merchant_descriptor_isSet = false;
    m_merchant_descriptor_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_details_isSet = false;
    m_network_details_isValid = false;

    m_presentment_amount_isSet = false;
    m_presentment_amount_isValid = false;

    m_presentment_currency_isSet = false;
    m_presentment_currency_isValid = false;

    m_settlement_amount_isSet = false;
    m_settlement_amount_isValid = false;

    m_settlement_currency_isSet = false;
    m_settlement_currency_isValid = false;
}

void OAICard_Authorization_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard_Authorization_1::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_merchant_acceptor_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_acceptor_id, json[QString("merchant_acceptor_id")]);
    m_merchant_acceptor_id_isSet = !json[QString("merchant_acceptor_id")].isNull() && m_merchant_acceptor_id_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchant_category_code")]);
    m_merchant_category_code_isSet = !json[QString("merchant_category_code")].isNull() && m_merchant_category_code_isValid;

    m_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_merchant_city, json[QString("merchant_city")]);
    m_merchant_city_isSet = !json[QString("merchant_city")].isNull() && m_merchant_city_isValid;

    m_merchant_country_isValid = ::OpenAPI::fromJsonValue(m_merchant_country, json[QString("merchant_country")]);
    m_merchant_country_isSet = !json[QString("merchant_country")].isNull() && m_merchant_country_isValid;

    m_merchant_descriptor_isValid = ::OpenAPI::fromJsonValue(m_merchant_descriptor, json[QString("merchant_descriptor")]);
    m_merchant_descriptor_isSet = !json[QString("merchant_descriptor")].isNull() && m_merchant_descriptor_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_details_isValid = ::OpenAPI::fromJsonValue(m_network_details, json[QString("network_details")]);
    m_network_details_isSet = !json[QString("network_details")].isNull() && m_network_details_isValid;

    m_presentment_amount_isValid = ::OpenAPI::fromJsonValue(m_presentment_amount, json[QString("presentment_amount")]);
    m_presentment_amount_isSet = !json[QString("presentment_amount")].isNull() && m_presentment_amount_isValid;

    m_presentment_currency_isValid = ::OpenAPI::fromJsonValue(m_presentment_currency, json[QString("presentment_currency")]);
    m_presentment_currency_isSet = !json[QString("presentment_currency")].isNull() && m_presentment_currency_isValid;

    m_settlement_amount_isValid = ::OpenAPI::fromJsonValue(m_settlement_amount, json[QString("settlement_amount")]);
    m_settlement_amount_isSet = !json[QString("settlement_amount")].isNull() && m_settlement_amount_isValid;

    m_settlement_currency_isValid = ::OpenAPI::fromJsonValue(m_settlement_currency, json[QString("settlement_currency")]);
    m_settlement_currency_isSet = !json[QString("settlement_currency")].isNull() && m_settlement_currency_isValid;
}

QString OAICard_Authorization_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard_Authorization_1::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_decision_isSet) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_merchant_acceptor_id_isSet) {
        obj.insert(QString("merchant_acceptor_id"), ::OpenAPI::toJsonValue(m_merchant_acceptor_id));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchant_category_code"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_merchant_city_isSet) {
        obj.insert(QString("merchant_city"), ::OpenAPI::toJsonValue(m_merchant_city));
    }
    if (m_merchant_country_isSet) {
        obj.insert(QString("merchant_country"), ::OpenAPI::toJsonValue(m_merchant_country));
    }
    if (m_merchant_descriptor_isSet) {
        obj.insert(QString("merchant_descriptor"), ::OpenAPI::toJsonValue(m_merchant_descriptor));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_details.isSet()) {
        obj.insert(QString("network_details"), ::OpenAPI::toJsonValue(m_network_details));
    }
    if (m_presentment_amount_isSet) {
        obj.insert(QString("presentment_amount"), ::OpenAPI::toJsonValue(m_presentment_amount));
    }
    if (m_presentment_currency_isSet) {
        obj.insert(QString("presentment_currency"), ::OpenAPI::toJsonValue(m_presentment_currency));
    }
    if (m_settlement_amount_isSet) {
        obj.insert(QString("settlement_amount"), ::OpenAPI::toJsonValue(m_settlement_amount));
    }
    if (m_settlement_currency_isSet) {
        obj.insert(QString("settlement_currency"), ::OpenAPI::toJsonValue(m_settlement_currency));
    }
    return obj;
}

QString OAICard_Authorization_1::getAccountId() const {
    return m_account_id;
}
void OAICard_Authorization_1::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICard_Authorization_1::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICard_Authorization_1::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICard_Authorization_1::getCardId() const {
    return m_card_id;
}
void OAICard_Authorization_1::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAICard_Authorization_1::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAICard_Authorization_1::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAICard_Authorization_1::getDecision() const {
    return m_decision;
}
void OAICard_Authorization_1::setDecision(const QString &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAICard_Authorization_1::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAICard_Authorization_1::is_decision_Valid() const{
    return m_decision_isValid;
}

QString OAICard_Authorization_1::getMerchantAcceptorId() const {
    return m_merchant_acceptor_id;
}
void OAICard_Authorization_1::setMerchantAcceptorId(const QString &merchant_acceptor_id) {
    m_merchant_acceptor_id = merchant_acceptor_id;
    m_merchant_acceptor_id_isSet = true;
}

bool OAICard_Authorization_1::is_merchant_acceptor_id_Set() const{
    return m_merchant_acceptor_id_isSet;
}

bool OAICard_Authorization_1::is_merchant_acceptor_id_Valid() const{
    return m_merchant_acceptor_id_isValid;
}

QString OAICard_Authorization_1::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAICard_Authorization_1::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAICard_Authorization_1::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAICard_Authorization_1::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QString OAICard_Authorization_1::getMerchantCity() const {
    return m_merchant_city;
}
void OAICard_Authorization_1::setMerchantCity(const QString &merchant_city) {
    m_merchant_city = merchant_city;
    m_merchant_city_isSet = true;
}

bool OAICard_Authorization_1::is_merchant_city_Set() const{
    return m_merchant_city_isSet;
}

bool OAICard_Authorization_1::is_merchant_city_Valid() const{
    return m_merchant_city_isValid;
}

QString OAICard_Authorization_1::getMerchantCountry() const {
    return m_merchant_country;
}
void OAICard_Authorization_1::setMerchantCountry(const QString &merchant_country) {
    m_merchant_country = merchant_country;
    m_merchant_country_isSet = true;
}

bool OAICard_Authorization_1::is_merchant_country_Set() const{
    return m_merchant_country_isSet;
}

bool OAICard_Authorization_1::is_merchant_country_Valid() const{
    return m_merchant_country_isValid;
}

QString OAICard_Authorization_1::getMerchantDescriptor() const {
    return m_merchant_descriptor;
}
void OAICard_Authorization_1::setMerchantDescriptor(const QString &merchant_descriptor) {
    m_merchant_descriptor = merchant_descriptor;
    m_merchant_descriptor_isSet = true;
}

bool OAICard_Authorization_1::is_merchant_descriptor_Set() const{
    return m_merchant_descriptor_isSet;
}

bool OAICard_Authorization_1::is_merchant_descriptor_Valid() const{
    return m_merchant_descriptor_isValid;
}

QString OAICard_Authorization_1::getNetwork() const {
    return m_network;
}
void OAICard_Authorization_1::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICard_Authorization_1::is_network_Set() const{
    return m_network_isSet;
}

bool OAICard_Authorization_1::is_network_Valid() const{
    return m_network_isValid;
}

OAINetwork_Details OAICard_Authorization_1::getNetworkDetails() const {
    return m_network_details;
}
void OAICard_Authorization_1::setNetworkDetails(const OAINetwork_Details &network_details) {
    m_network_details = network_details;
    m_network_details_isSet = true;
}

bool OAICard_Authorization_1::is_network_details_Set() const{
    return m_network_details_isSet;
}

bool OAICard_Authorization_1::is_network_details_Valid() const{
    return m_network_details_isValid;
}

qint32 OAICard_Authorization_1::getPresentmentAmount() const {
    return m_presentment_amount;
}
void OAICard_Authorization_1::setPresentmentAmount(const qint32 &presentment_amount) {
    m_presentment_amount = presentment_amount;
    m_presentment_amount_isSet = true;
}

bool OAICard_Authorization_1::is_presentment_amount_Set() const{
    return m_presentment_amount_isSet;
}

bool OAICard_Authorization_1::is_presentment_amount_Valid() const{
    return m_presentment_amount_isValid;
}

QString OAICard_Authorization_1::getPresentmentCurrency() const {
    return m_presentment_currency;
}
void OAICard_Authorization_1::setPresentmentCurrency(const QString &presentment_currency) {
    m_presentment_currency = presentment_currency;
    m_presentment_currency_isSet = true;
}

bool OAICard_Authorization_1::is_presentment_currency_Set() const{
    return m_presentment_currency_isSet;
}

bool OAICard_Authorization_1::is_presentment_currency_Valid() const{
    return m_presentment_currency_isValid;
}

qint32 OAICard_Authorization_1::getSettlementAmount() const {
    return m_settlement_amount;
}
void OAICard_Authorization_1::setSettlementAmount(const qint32 &settlement_amount) {
    m_settlement_amount = settlement_amount;
    m_settlement_amount_isSet = true;
}

bool OAICard_Authorization_1::is_settlement_amount_Set() const{
    return m_settlement_amount_isSet;
}

bool OAICard_Authorization_1::is_settlement_amount_Valid() const{
    return m_settlement_amount_isValid;
}

QString OAICard_Authorization_1::getSettlementCurrency() const {
    return m_settlement_currency;
}
void OAICard_Authorization_1::setSettlementCurrency(const QString &settlement_currency) {
    m_settlement_currency = settlement_currency;
    m_settlement_currency_isSet = true;
}

bool OAICard_Authorization_1::is_settlement_currency_Set() const{
    return m_settlement_currency_isSet;
}

bool OAICard_Authorization_1::is_settlement_currency_Valid() const{
    return m_settlement_currency_isValid;
}

bool OAICard_Authorization_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_acceptor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentment_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard_Authorization_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_card_id_isValid && m_decision_isValid && m_merchant_acceptor_id_isValid && m_merchant_category_code_isValid && m_merchant_city_isValid && m_merchant_country_isValid && m_merchant_descriptor_isValid && m_network_isValid && m_network_details_isValid && m_presentment_amount_isValid && m_presentment_currency_isValid && m_settlement_amount_isValid && m_settlement_currency_isValid && true;
}

} // namespace OpenAPI
