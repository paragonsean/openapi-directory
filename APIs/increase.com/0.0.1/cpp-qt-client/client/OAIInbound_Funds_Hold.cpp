/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInbound_Funds_Hold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInbound_Funds_Hold::OAIInbound_Funds_Hold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInbound_Funds_Hold::OAIInbound_Funds_Hold() {
    this->initializeModel();
}

OAIInbound_Funds_Hold::~OAIInbound_Funds_Hold() {}

void OAIInbound_Funds_Hold::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_automatically_releases_at_isSet = false;
    m_automatically_releases_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_held_transaction_id_isSet = false;
    m_held_transaction_id_isValid = false;

    m_pending_transaction_id_isSet = false;
    m_pending_transaction_id_isValid = false;

    m_released_at_isSet = false;
    m_released_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInbound_Funds_Hold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInbound_Funds_Hold::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_automatically_releases_at_isValid = ::OpenAPI::fromJsonValue(m_automatically_releases_at, json[QString("automatically_releases_at")]);
    m_automatically_releases_at_isSet = !json[QString("automatically_releases_at")].isNull() && m_automatically_releases_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_held_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_held_transaction_id, json[QString("held_transaction_id")]);
    m_held_transaction_id_isSet = !json[QString("held_transaction_id")].isNull() && m_held_transaction_id_isValid;

    m_pending_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_pending_transaction_id, json[QString("pending_transaction_id")]);
    m_pending_transaction_id_isSet = !json[QString("pending_transaction_id")].isNull() && m_pending_transaction_id_isValid;

    m_released_at_isValid = ::OpenAPI::fromJsonValue(m_released_at, json[QString("released_at")]);
    m_released_at_isSet = !json[QString("released_at")].isNull() && m_released_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInbound_Funds_Hold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInbound_Funds_Hold::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_automatically_releases_at_isSet) {
        obj.insert(QString("automatically_releases_at"), ::OpenAPI::toJsonValue(m_automatically_releases_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_held_transaction_id_isSet) {
        obj.insert(QString("held_transaction_id"), ::OpenAPI::toJsonValue(m_held_transaction_id));
    }
    if (m_pending_transaction_id_isSet) {
        obj.insert(QString("pending_transaction_id"), ::OpenAPI::toJsonValue(m_pending_transaction_id));
    }
    if (m_released_at_isSet) {
        obj.insert(QString("released_at"), ::OpenAPI::toJsonValue(m_released_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIInbound_Funds_Hold::getAmount() const {
    return m_amount;
}
void OAIInbound_Funds_Hold::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIInbound_Funds_Hold::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIInbound_Funds_Hold::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIInbound_Funds_Hold::getAutomaticallyReleasesAt() const {
    return m_automatically_releases_at;
}
void OAIInbound_Funds_Hold::setAutomaticallyReleasesAt(const QDateTime &automatically_releases_at) {
    m_automatically_releases_at = automatically_releases_at;
    m_automatically_releases_at_isSet = true;
}

bool OAIInbound_Funds_Hold::is_automatically_releases_at_Set() const{
    return m_automatically_releases_at_isSet;
}

bool OAIInbound_Funds_Hold::is_automatically_releases_at_Valid() const{
    return m_automatically_releases_at_isValid;
}

QDateTime OAIInbound_Funds_Hold::getCreatedAt() const {
    return m_created_at;
}
void OAIInbound_Funds_Hold::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInbound_Funds_Hold::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInbound_Funds_Hold::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIInbound_Funds_Hold::getCurrency() const {
    return m_currency;
}
void OAIInbound_Funds_Hold::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInbound_Funds_Hold::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInbound_Funds_Hold::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIInbound_Funds_Hold::getHeldTransactionId() const {
    return m_held_transaction_id;
}
void OAIInbound_Funds_Hold::setHeldTransactionId(const QString &held_transaction_id) {
    m_held_transaction_id = held_transaction_id;
    m_held_transaction_id_isSet = true;
}

bool OAIInbound_Funds_Hold::is_held_transaction_id_Set() const{
    return m_held_transaction_id_isSet;
}

bool OAIInbound_Funds_Hold::is_held_transaction_id_Valid() const{
    return m_held_transaction_id_isValid;
}

QString OAIInbound_Funds_Hold::getPendingTransactionId() const {
    return m_pending_transaction_id;
}
void OAIInbound_Funds_Hold::setPendingTransactionId(const QString &pending_transaction_id) {
    m_pending_transaction_id = pending_transaction_id;
    m_pending_transaction_id_isSet = true;
}

bool OAIInbound_Funds_Hold::is_pending_transaction_id_Set() const{
    return m_pending_transaction_id_isSet;
}

bool OAIInbound_Funds_Hold::is_pending_transaction_id_Valid() const{
    return m_pending_transaction_id_isValid;
}

QDateTime OAIInbound_Funds_Hold::getReleasedAt() const {
    return m_released_at;
}
void OAIInbound_Funds_Hold::setReleasedAt(const QDateTime &released_at) {
    m_released_at = released_at;
    m_released_at_isSet = true;
}

bool OAIInbound_Funds_Hold::is_released_at_Set() const{
    return m_released_at_isSet;
}

bool OAIInbound_Funds_Hold::is_released_at_Valid() const{
    return m_released_at_isValid;
}

QString OAIInbound_Funds_Hold::getStatus() const {
    return m_status;
}
void OAIInbound_Funds_Hold::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInbound_Funds_Hold::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInbound_Funds_Hold::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInbound_Funds_Hold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatically_releases_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_held_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInbound_Funds_Hold::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_automatically_releases_at_isValid && m_created_at_isValid && m_currency_isValid && m_held_transaction_id_isValid && m_pending_transaction_id_isValid && m_released_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
