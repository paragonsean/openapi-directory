/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPending_Transaction_Source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPending_Transaction_Source::OAIPending_Transaction_Source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPending_Transaction_Source::OAIPending_Transaction_Source() {
    this->initializeModel();
}

OAIPending_Transaction_Source::~OAIPending_Transaction_Source() {}

void OAIPending_Transaction_Source::initializeModel() {

    m_account_transfer_instruction_isSet = false;
    m_account_transfer_instruction_isValid = false;

    m_ach_transfer_instruction_isSet = false;
    m_ach_transfer_instruction_isValid = false;

    m_card_authorization_isSet = false;
    m_card_authorization_isValid = false;

    m_card_route_authorization_isSet = false;
    m_card_route_authorization_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_check_deposit_instruction_isSet = false;
    m_check_deposit_instruction_isValid = false;

    m_check_transfer_instruction_isSet = false;
    m_check_transfer_instruction_isValid = false;

    m_inbound_funds_hold_isSet = false;
    m_inbound_funds_hold_isValid = false;

    m_real_time_payments_transfer_instruction_isSet = false;
    m_real_time_payments_transfer_instruction_isValid = false;

    m_wire_drawdown_payment_instruction_isSet = false;
    m_wire_drawdown_payment_instruction_isValid = false;

    m_wire_transfer_instruction_isSet = false;
    m_wire_transfer_instruction_isValid = false;
}

void OAIPending_Transaction_Source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPending_Transaction_Source::fromJsonObject(QJsonObject json) {

    m_account_transfer_instruction_isValid = ::OpenAPI::fromJsonValue(m_account_transfer_instruction, json[QString("account_transfer_instruction")]);
    m_account_transfer_instruction_isSet = !json[QString("account_transfer_instruction")].isNull() && m_account_transfer_instruction_isValid;

    m_ach_transfer_instruction_isValid = ::OpenAPI::fromJsonValue(m_ach_transfer_instruction, json[QString("ach_transfer_instruction")]);
    m_ach_transfer_instruction_isSet = !json[QString("ach_transfer_instruction")].isNull() && m_ach_transfer_instruction_isValid;

    m_card_authorization_isValid = ::OpenAPI::fromJsonValue(m_card_authorization, json[QString("card_authorization")]);
    m_card_authorization_isSet = !json[QString("card_authorization")].isNull() && m_card_authorization_isValid;

    m_card_route_authorization_isValid = ::OpenAPI::fromJsonValue(m_card_route_authorization, json[QString("card_route_authorization")]);
    m_card_route_authorization_isSet = !json[QString("card_route_authorization")].isNull() && m_card_route_authorization_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_check_deposit_instruction_isValid = ::OpenAPI::fromJsonValue(m_check_deposit_instruction, json[QString("check_deposit_instruction")]);
    m_check_deposit_instruction_isSet = !json[QString("check_deposit_instruction")].isNull() && m_check_deposit_instruction_isValid;

    m_check_transfer_instruction_isValid = ::OpenAPI::fromJsonValue(m_check_transfer_instruction, json[QString("check_transfer_instruction")]);
    m_check_transfer_instruction_isSet = !json[QString("check_transfer_instruction")].isNull() && m_check_transfer_instruction_isValid;

    m_inbound_funds_hold_isValid = ::OpenAPI::fromJsonValue(m_inbound_funds_hold, json[QString("inbound_funds_hold")]);
    m_inbound_funds_hold_isSet = !json[QString("inbound_funds_hold")].isNull() && m_inbound_funds_hold_isValid;

    m_real_time_payments_transfer_instruction_isValid = ::OpenAPI::fromJsonValue(m_real_time_payments_transfer_instruction, json[QString("real_time_payments_transfer_instruction")]);
    m_real_time_payments_transfer_instruction_isSet = !json[QString("real_time_payments_transfer_instruction")].isNull() && m_real_time_payments_transfer_instruction_isValid;

    m_wire_drawdown_payment_instruction_isValid = ::OpenAPI::fromJsonValue(m_wire_drawdown_payment_instruction, json[QString("wire_drawdown_payment_instruction")]);
    m_wire_drawdown_payment_instruction_isSet = !json[QString("wire_drawdown_payment_instruction")].isNull() && m_wire_drawdown_payment_instruction_isValid;

    m_wire_transfer_instruction_isValid = ::OpenAPI::fromJsonValue(m_wire_transfer_instruction, json[QString("wire_transfer_instruction")]);
    m_wire_transfer_instruction_isSet = !json[QString("wire_transfer_instruction")].isNull() && m_wire_transfer_instruction_isValid;
}

QString OAIPending_Transaction_Source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPending_Transaction_Source::asJsonObject() const {
    QJsonObject obj;
    if (m_account_transfer_instruction.isSet()) {
        obj.insert(QString("account_transfer_instruction"), ::OpenAPI::toJsonValue(m_account_transfer_instruction));
    }
    if (m_ach_transfer_instruction.isSet()) {
        obj.insert(QString("ach_transfer_instruction"), ::OpenAPI::toJsonValue(m_ach_transfer_instruction));
    }
    if (m_card_authorization.isSet()) {
        obj.insert(QString("card_authorization"), ::OpenAPI::toJsonValue(m_card_authorization));
    }
    if (m_card_route_authorization.isSet()) {
        obj.insert(QString("card_route_authorization"), ::OpenAPI::toJsonValue(m_card_route_authorization));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_check_deposit_instruction.isSet()) {
        obj.insert(QString("check_deposit_instruction"), ::OpenAPI::toJsonValue(m_check_deposit_instruction));
    }
    if (m_check_transfer_instruction.isSet()) {
        obj.insert(QString("check_transfer_instruction"), ::OpenAPI::toJsonValue(m_check_transfer_instruction));
    }
    if (m_inbound_funds_hold.isSet()) {
        obj.insert(QString("inbound_funds_hold"), ::OpenAPI::toJsonValue(m_inbound_funds_hold));
    }
    if (m_real_time_payments_transfer_instruction.isSet()) {
        obj.insert(QString("real_time_payments_transfer_instruction"), ::OpenAPI::toJsonValue(m_real_time_payments_transfer_instruction));
    }
    if (m_wire_drawdown_payment_instruction.isSet()) {
        obj.insert(QString("wire_drawdown_payment_instruction"), ::OpenAPI::toJsonValue(m_wire_drawdown_payment_instruction));
    }
    if (m_wire_transfer_instruction.isSet()) {
        obj.insert(QString("wire_transfer_instruction"), ::OpenAPI::toJsonValue(m_wire_transfer_instruction));
    }
    return obj;
}

OAIAccount_Transfer_Instruction OAIPending_Transaction_Source::getAccountTransferInstruction() const {
    return m_account_transfer_instruction;
}
void OAIPending_Transaction_Source::setAccountTransferInstruction(const OAIAccount_Transfer_Instruction &account_transfer_instruction) {
    m_account_transfer_instruction = account_transfer_instruction;
    m_account_transfer_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_account_transfer_instruction_Set() const{
    return m_account_transfer_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_account_transfer_instruction_Valid() const{
    return m_account_transfer_instruction_isValid;
}

OAIACH_Transfer_Instruction OAIPending_Transaction_Source::getAchTransferInstruction() const {
    return m_ach_transfer_instruction;
}
void OAIPending_Transaction_Source::setAchTransferInstruction(const OAIACH_Transfer_Instruction &ach_transfer_instruction) {
    m_ach_transfer_instruction = ach_transfer_instruction;
    m_ach_transfer_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_ach_transfer_instruction_Set() const{
    return m_ach_transfer_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_ach_transfer_instruction_Valid() const{
    return m_ach_transfer_instruction_isValid;
}

OAICard_Authorization OAIPending_Transaction_Source::getCardAuthorization() const {
    return m_card_authorization;
}
void OAIPending_Transaction_Source::setCardAuthorization(const OAICard_Authorization &card_authorization) {
    m_card_authorization = card_authorization;
    m_card_authorization_isSet = true;
}

bool OAIPending_Transaction_Source::is_card_authorization_Set() const{
    return m_card_authorization_isSet;
}

bool OAIPending_Transaction_Source::is_card_authorization_Valid() const{
    return m_card_authorization_isValid;
}

OAIDeprecated_Card_Authorization OAIPending_Transaction_Source::getCardRouteAuthorization() const {
    return m_card_route_authorization;
}
void OAIPending_Transaction_Source::setCardRouteAuthorization(const OAIDeprecated_Card_Authorization &card_route_authorization) {
    m_card_route_authorization = card_route_authorization;
    m_card_route_authorization_isSet = true;
}

bool OAIPending_Transaction_Source::is_card_route_authorization_Set() const{
    return m_card_route_authorization_isSet;
}

bool OAIPending_Transaction_Source::is_card_route_authorization_Valid() const{
    return m_card_route_authorization_isValid;
}

QString OAIPending_Transaction_Source::getCategory() const {
    return m_category;
}
void OAIPending_Transaction_Source::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPending_Transaction_Source::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPending_Transaction_Source::is_category_Valid() const{
    return m_category_isValid;
}

OAICheck_Deposit_Instruction OAIPending_Transaction_Source::getCheckDepositInstruction() const {
    return m_check_deposit_instruction;
}
void OAIPending_Transaction_Source::setCheckDepositInstruction(const OAICheck_Deposit_Instruction &check_deposit_instruction) {
    m_check_deposit_instruction = check_deposit_instruction;
    m_check_deposit_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_check_deposit_instruction_Set() const{
    return m_check_deposit_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_check_deposit_instruction_Valid() const{
    return m_check_deposit_instruction_isValid;
}

OAICheck_Transfer_Instruction OAIPending_Transaction_Source::getCheckTransferInstruction() const {
    return m_check_transfer_instruction;
}
void OAIPending_Transaction_Source::setCheckTransferInstruction(const OAICheck_Transfer_Instruction &check_transfer_instruction) {
    m_check_transfer_instruction = check_transfer_instruction;
    m_check_transfer_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_check_transfer_instruction_Set() const{
    return m_check_transfer_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_check_transfer_instruction_Valid() const{
    return m_check_transfer_instruction_isValid;
}

OAIInbound_Funds_Hold OAIPending_Transaction_Source::getInboundFundsHold() const {
    return m_inbound_funds_hold;
}
void OAIPending_Transaction_Source::setInboundFundsHold(const OAIInbound_Funds_Hold &inbound_funds_hold) {
    m_inbound_funds_hold = inbound_funds_hold;
    m_inbound_funds_hold_isSet = true;
}

bool OAIPending_Transaction_Source::is_inbound_funds_hold_Set() const{
    return m_inbound_funds_hold_isSet;
}

bool OAIPending_Transaction_Source::is_inbound_funds_hold_Valid() const{
    return m_inbound_funds_hold_isValid;
}

OAIReal_Time_Payments_Transfer_Instruction OAIPending_Transaction_Source::getRealTimePaymentsTransferInstruction() const {
    return m_real_time_payments_transfer_instruction;
}
void OAIPending_Transaction_Source::setRealTimePaymentsTransferInstruction(const OAIReal_Time_Payments_Transfer_Instruction &real_time_payments_transfer_instruction) {
    m_real_time_payments_transfer_instruction = real_time_payments_transfer_instruction;
    m_real_time_payments_transfer_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_real_time_payments_transfer_instruction_Set() const{
    return m_real_time_payments_transfer_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_real_time_payments_transfer_instruction_Valid() const{
    return m_real_time_payments_transfer_instruction_isValid;
}

OAIWire_Drawdown_Payment_Instruction OAIPending_Transaction_Source::getWireDrawdownPaymentInstruction() const {
    return m_wire_drawdown_payment_instruction;
}
void OAIPending_Transaction_Source::setWireDrawdownPaymentInstruction(const OAIWire_Drawdown_Payment_Instruction &wire_drawdown_payment_instruction) {
    m_wire_drawdown_payment_instruction = wire_drawdown_payment_instruction;
    m_wire_drawdown_payment_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_wire_drawdown_payment_instruction_Set() const{
    return m_wire_drawdown_payment_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_wire_drawdown_payment_instruction_Valid() const{
    return m_wire_drawdown_payment_instruction_isValid;
}

OAIWire_Transfer_Instruction OAIPending_Transaction_Source::getWireTransferInstruction() const {
    return m_wire_transfer_instruction;
}
void OAIPending_Transaction_Source::setWireTransferInstruction(const OAIWire_Transfer_Instruction &wire_transfer_instruction) {
    m_wire_transfer_instruction = wire_transfer_instruction;
    m_wire_transfer_instruction_isSet = true;
}

bool OAIPending_Transaction_Source::is_wire_transfer_instruction_Set() const{
    return m_wire_transfer_instruction_isSet;
}

bool OAIPending_Transaction_Source::is_wire_transfer_instruction_Valid() const{
    return m_wire_transfer_instruction_isValid;
}

bool OAIPending_Transaction_Source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_transfer_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_transfer_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_route_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_deposit_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_transfer_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_funds_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_time_payments_transfer_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_drawdown_payment_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wire_transfer_instruction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPending_Transaction_Source::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_transfer_instruction_isValid && m_ach_transfer_instruction_isValid && m_card_authorization_isValid && m_card_route_authorization_isValid && m_category_isValid && m_check_deposit_instruction_isValid && m_check_transfer_instruction_isValid && m_inbound_funds_hold_isValid && m_real_time_payments_transfer_instruction_isValid && m_wire_drawdown_payment_instruction_isValid && m_wire_transfer_instruction_isValid && true;
}

} // namespace OpenAPI
