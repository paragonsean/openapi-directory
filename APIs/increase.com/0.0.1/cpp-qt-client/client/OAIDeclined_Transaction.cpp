/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeclined_Transaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeclined_Transaction::OAIDeclined_Transaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeclined_Transaction::OAIDeclined_Transaction() {
    this->initializeModel();
}

OAIDeclined_Transaction::~OAIDeclined_Transaction() {}

void OAIDeclined_Transaction::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_route_id_isSet = false;
    m_route_id_isValid = false;

    m_route_type_isSet = false;
    m_route_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDeclined_Transaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeclined_Transaction::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_route_id_isValid = ::OpenAPI::fromJsonValue(m_route_id, json[QString("route_id")]);
    m_route_id_isSet = !json[QString("route_id")].isNull() && m_route_id_isValid;

    m_route_type_isValid = ::OpenAPI::fromJsonValue(m_route_type, json[QString("route_type")]);
    m_route_type_isSet = !json[QString("route_type")].isNull() && m_route_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDeclined_Transaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeclined_Transaction::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_route_id_isSet) {
        obj.insert(QString("route_id"), ::OpenAPI::toJsonValue(m_route_id));
    }
    if (m_route_type_isSet) {
        obj.insert(QString("route_type"), ::OpenAPI::toJsonValue(m_route_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDeclined_Transaction::getAccountId() const {
    return m_account_id;
}
void OAIDeclined_Transaction::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDeclined_Transaction::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDeclined_Transaction::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAIDeclined_Transaction::getAmount() const {
    return m_amount;
}
void OAIDeclined_Transaction::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDeclined_Transaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDeclined_Transaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIDeclined_Transaction::getCreatedAt() const {
    return m_created_at;
}
void OAIDeclined_Transaction::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeclined_Transaction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeclined_Transaction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeclined_Transaction::getCurrency() const {
    return m_currency;
}
void OAIDeclined_Transaction::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDeclined_Transaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDeclined_Transaction::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIDeclined_Transaction::getDescription() const {
    return m_description;
}
void OAIDeclined_Transaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeclined_Transaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeclined_Transaction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeclined_Transaction::getId() const {
    return m_id;
}
void OAIDeclined_Transaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeclined_Transaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeclined_Transaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeclined_Transaction::getRouteId() const {
    return m_route_id;
}
void OAIDeclined_Transaction::setRouteId(const QString &route_id) {
    m_route_id = route_id;
    m_route_id_isSet = true;
}

bool OAIDeclined_Transaction::is_route_id_Set() const{
    return m_route_id_isSet;
}

bool OAIDeclined_Transaction::is_route_id_Valid() const{
    return m_route_id_isValid;
}

QString OAIDeclined_Transaction::getRouteType() const {
    return m_route_type;
}
void OAIDeclined_Transaction::setRouteType(const QString &route_type) {
    m_route_type = route_type;
    m_route_type_isSet = true;
}

bool OAIDeclined_Transaction::is_route_type_Set() const{
    return m_route_type_isSet;
}

bool OAIDeclined_Transaction::is_route_type_Valid() const{
    return m_route_type_isValid;
}

OAIDeclined_Transaction_Source OAIDeclined_Transaction::getSource() const {
    return m_source;
}
void OAIDeclined_Transaction::setSource(const OAIDeclined_Transaction_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDeclined_Transaction::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDeclined_Transaction::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDeclined_Transaction::getType() const {
    return m_type;
}
void OAIDeclined_Transaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeclined_Transaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeclined_Transaction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDeclined_Transaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeclined_Transaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_created_at_isValid && m_currency_isValid && m_description_isValid && m_id_isValid && m_route_id_isValid && m_route_type_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
