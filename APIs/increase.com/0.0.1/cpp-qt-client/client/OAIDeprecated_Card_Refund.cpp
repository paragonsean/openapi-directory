/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeprecated_Card_Refund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeprecated_Card_Refund::OAIDeprecated_Card_Refund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeprecated_Card_Refund::OAIDeprecated_Card_Refund() {
    this->initializeModel();
}

OAIDeprecated_Card_Refund::~OAIDeprecated_Card_Refund() {}

void OAIDeprecated_Card_Refund::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_merchant_acceptor_id_isSet = false;
    m_merchant_acceptor_id_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_merchant_city_isSet = false;
    m_merchant_city_isValid = false;

    m_merchant_country_isSet = false;
    m_merchant_country_isValid = false;

    m_merchant_descriptor_isSet = false;
    m_merchant_descriptor_isValid = false;

    m_merchant_state_isSet = false;
    m_merchant_state_isValid = false;
}

void OAIDeprecated_Card_Refund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeprecated_Card_Refund::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_merchant_acceptor_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_acceptor_id, json[QString("merchant_acceptor_id")]);
    m_merchant_acceptor_id_isSet = !json[QString("merchant_acceptor_id")].isNull() && m_merchant_acceptor_id_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchant_category_code")]);
    m_merchant_category_code_isSet = !json[QString("merchant_category_code")].isNull() && m_merchant_category_code_isValid;

    m_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_merchant_city, json[QString("merchant_city")]);
    m_merchant_city_isSet = !json[QString("merchant_city")].isNull() && m_merchant_city_isValid;

    m_merchant_country_isValid = ::OpenAPI::fromJsonValue(m_merchant_country, json[QString("merchant_country")]);
    m_merchant_country_isSet = !json[QString("merchant_country")].isNull() && m_merchant_country_isValid;

    m_merchant_descriptor_isValid = ::OpenAPI::fromJsonValue(m_merchant_descriptor, json[QString("merchant_descriptor")]);
    m_merchant_descriptor_isSet = !json[QString("merchant_descriptor")].isNull() && m_merchant_descriptor_isValid;

    m_merchant_state_isValid = ::OpenAPI::fromJsonValue(m_merchant_state, json[QString("merchant_state")]);
    m_merchant_state_isSet = !json[QString("merchant_state")].isNull() && m_merchant_state_isValid;
}

QString OAIDeprecated_Card_Refund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeprecated_Card_Refund::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_merchant_acceptor_id_isSet) {
        obj.insert(QString("merchant_acceptor_id"), ::OpenAPI::toJsonValue(m_merchant_acceptor_id));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchant_category_code"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_merchant_city_isSet) {
        obj.insert(QString("merchant_city"), ::OpenAPI::toJsonValue(m_merchant_city));
    }
    if (m_merchant_country_isSet) {
        obj.insert(QString("merchant_country"), ::OpenAPI::toJsonValue(m_merchant_country));
    }
    if (m_merchant_descriptor_isSet) {
        obj.insert(QString("merchant_descriptor"), ::OpenAPI::toJsonValue(m_merchant_descriptor));
    }
    if (m_merchant_state_isSet) {
        obj.insert(QString("merchant_state"), ::OpenAPI::toJsonValue(m_merchant_state));
    }
    return obj;
}

qint32 OAIDeprecated_Card_Refund::getAmount() const {
    return m_amount;
}
void OAIDeprecated_Card_Refund::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDeprecated_Card_Refund::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIDeprecated_Card_Refund::getCurrency() const {
    return m_currency;
}
void OAIDeprecated_Card_Refund::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDeprecated_Card_Refund::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantAcceptorId() const {
    return m_merchant_acceptor_id;
}
void OAIDeprecated_Card_Refund::setMerchantAcceptorId(const QString &merchant_acceptor_id) {
    m_merchant_acceptor_id = merchant_acceptor_id;
    m_merchant_acceptor_id_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_acceptor_id_Set() const{
    return m_merchant_acceptor_id_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_acceptor_id_Valid() const{
    return m_merchant_acceptor_id_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAIDeprecated_Card_Refund::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantCity() const {
    return m_merchant_city;
}
void OAIDeprecated_Card_Refund::setMerchantCity(const QString &merchant_city) {
    m_merchant_city = merchant_city;
    m_merchant_city_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_city_Set() const{
    return m_merchant_city_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_city_Valid() const{
    return m_merchant_city_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantCountry() const {
    return m_merchant_country;
}
void OAIDeprecated_Card_Refund::setMerchantCountry(const QString &merchant_country) {
    m_merchant_country = merchant_country;
    m_merchant_country_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_country_Set() const{
    return m_merchant_country_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_country_Valid() const{
    return m_merchant_country_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantDescriptor() const {
    return m_merchant_descriptor;
}
void OAIDeprecated_Card_Refund::setMerchantDescriptor(const QString &merchant_descriptor) {
    m_merchant_descriptor = merchant_descriptor;
    m_merchant_descriptor_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_descriptor_Set() const{
    return m_merchant_descriptor_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_descriptor_Valid() const{
    return m_merchant_descriptor_isValid;
}

QString OAIDeprecated_Card_Refund::getMerchantState() const {
    return m_merchant_state;
}
void OAIDeprecated_Card_Refund::setMerchantState(const QString &merchant_state) {
    m_merchant_state = merchant_state;
    m_merchant_state_isSet = true;
}

bool OAIDeprecated_Card_Refund::is_merchant_state_Set() const{
    return m_merchant_state_isSet;
}

bool OAIDeprecated_Card_Refund::is_merchant_state_Valid() const{
    return m_merchant_state_isValid;
}

bool OAIDeprecated_Card_Refund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_acceptor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeprecated_Card_Refund::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_currency_isValid && m_merchant_acceptor_id_isValid && m_merchant_category_code_isValid && m_merchant_city_isValid && m_merchant_country_isValid && m_merchant_descriptor_isValid && m_merchant_state_isValid && true;
}

} // namespace OpenAPI
