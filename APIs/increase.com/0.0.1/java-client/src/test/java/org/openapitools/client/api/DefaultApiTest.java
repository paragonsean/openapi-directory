/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountList;
import org.openapitools.client.model.AccountNumber;
import org.openapitools.client.model.AccountNumberList;
import org.openapitools.client.model.AccountStatement;
import org.openapitools.client.model.AccountStatementList;
import org.openapitools.client.model.AccountTransfer;
import org.openapitools.client.model.AccountTransferList;
import org.openapitools.client.model.AchPrenotification;
import org.openapitools.client.model.AchPrenotificationList;
import org.openapitools.client.model.AchTransfer;
import org.openapitools.client.model.AchTransferList;
import org.openapitools.client.model.ActionARealTimeDecisionParameters;
import org.openapitools.client.model.BalanceLookup;
import org.openapitools.client.model.BookkeepingAccount;
import org.openapitools.client.model.BookkeepingAccountList;
import org.openapitools.client.model.BookkeepingEntryList;
import org.openapitools.client.model.BookkeepingEntrySet;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardDetails;
import org.openapitools.client.model.CardDispute;
import org.openapitools.client.model.CardDisputeList;
import org.openapitools.client.model.CardList;
import org.openapitools.client.model.CardProfile;
import org.openapitools.client.model.CardProfileList;
import org.openapitools.client.model.CheckDeposit;
import org.openapitools.client.model.CheckDepositList;
import org.openapitools.client.model.CheckTransfer;
import org.openapitools.client.model.CheckTransferList;
import org.openapitools.client.model.CompleteASandboxRealTimePaymentsTransferParameters;
import org.openapitools.client.model.CreateABookkeepingAccountParameters;
import org.openapitools.client.model.CreateABookkeepingEntrySetParameters;
import org.openapitools.client.model.CreateACardDisputeParameters;
import org.openapitools.client.model.CreateACardParameters;
import org.openapitools.client.model.CreateACardProfileParameters;
import org.openapitools.client.model.CreateACheckDepositParameters;
import org.openapitools.client.model.CreateACheckTransferParameters;
import org.openapitools.client.model.CreateALimitParameters;
import org.openapitools.client.model.CreateARealTimePaymentsTransferParameters;
import org.openapitools.client.model.CreateASupplementalDocumentForAnEntityParameters;
import org.openapitools.client.model.CreateAWireDrawdownRequestParameters;
import org.openapitools.client.model.CreateAWireTransferParameters;
import org.openapitools.client.model.CreateAnAccountNumberParameters;
import org.openapitools.client.model.CreateAnAccountParameters;
import org.openapitools.client.model.CreateAnAccountTransferParameters;
import org.openapitools.client.model.CreateAnAchPrenotificationParameters;
import org.openapitools.client.model.CreateAnAchReturnParameters;
import org.openapitools.client.model.CreateAnAchTransferParameters;
import org.openapitools.client.model.CreateAnEntityParameters;
import org.openapitools.client.model.CreateAnEventSubscriptionParameters;
import org.openapitools.client.model.CreateAnExportParameters;
import org.openapitools.client.model.CreateAnExternalAccountParameters;
import org.openapitools.client.model.DeclinedTransaction;
import org.openapitools.client.model.DeclinedTransactionList;
import org.openapitools.client.model.DigitalWalletToken;
import org.openapitools.client.model.DigitalWalletTokenList;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentList;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.EntityList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventList;
import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.EventSubscriptionList;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.ExportList;
import org.openapitools.client.model.ExternalAccount;
import org.openapitools.client.model.ExternalAccountList;
import java.io.File;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.InboundAchTransferReturn;
import org.openapitools.client.model.InboundAchTransferReturnList;
import org.openapitools.client.model.InboundAchTransferSimulationResult;
import org.openapitools.client.model.InboundCardAuthorizationSimulationResult;
import org.openapitools.client.model.InboundDigitalWalletTokenRequestSimulationResult;
import org.openapitools.client.model.InboundRealTimePaymentsTransferSimulationResult;
import org.openapitools.client.model.InboundWireDrawdownRequest;
import org.openapitools.client.model.InboundWireDrawdownRequestList;
import org.openapitools.client.model.InboundWireTransferSimulationResult;
import org.openapitools.client.model.InterestPaymentSimulationResult;
import org.openapitools.client.model.Limit;
import org.openapitools.client.model.LimitList;
import org.openapitools.client.model.LookUpTheBalanceForAnAccountParameters;
import org.openapitools.client.model.OauthConnection;
import org.openapitools.client.model.OauthConnectionList;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PendingTransaction;
import org.openapitools.client.model.PendingTransactionList;
import org.openapitools.client.model.Program;
import org.openapitools.client.model.ProgramList;
import org.openapitools.client.model.RealTimeDecision;
import org.openapitools.client.model.RealTimePaymentsTransfer;
import org.openapitools.client.model.RealTimePaymentsTransferList;
import org.openapitools.client.model.ReturnASandboxAchTransferParameters;
import org.openapitools.client.model.ReturnASandboxCheckTransferParameters;
import org.openapitools.client.model.RoutingNumberList;
import org.openapitools.client.model.SimulateARealTimePaymentsTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateARefundOnACardParameters;
import org.openapitools.client.model.SimulateATaxDocumentBeingCreatedParameters;
import org.openapitools.client.model.SimulateAWireTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateAnAccountStatementBeingCreatedParameters;
import org.openapitools.client.model.SimulateAnAchTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateAnAuthorizationOnACardParameters;
import org.openapitools.client.model.SimulateAnInboundWireDrawdownRequestBeingCreatedParameters;
import org.openapitools.client.model.SimulateAnInterestPaymentToYourAccountParameters;
import org.openapitools.client.model.SimulateDigitalWalletProvisioningForACardParameters;
import org.openapitools.client.model.SimulateSettlingACardAuthorizationParameters;
import org.openapitools.client.model.SimulatesAdvancingTheStateOfACardDisputeParameters;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionList;
import org.openapitools.client.model.UpdateACardParameters;
import org.openapitools.client.model.UpdateALimitParameters;
import org.openapitools.client.model.UpdateAnAccountNumberParameters;
import org.openapitools.client.model.UpdateAnAccountParameters;
import org.openapitools.client.model.UpdateAnEventSubscriptionParameters;
import org.openapitools.client.model.UpdateAnExternalAccountParameters;
import org.openapitools.client.model.WireDrawdownRequest;
import org.openapitools.client.model.WireDrawdownRequestList;
import org.openapitools.client.model.WireTransfer;
import org.openapitools.client.model.WireTransferList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Action a Real-Time Decision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionARealTimeDecisionTest() throws ApiException {
        String realTimeDecisionId = null;
        ActionARealTimeDecisionParameters actionARealTimeDecisionParameters = null;
        RealTimeDecision response = api.actionARealTimeDecision(realTimeDecisionId, actionARealTimeDecisionParameters);
        // TODO: test validations
    }

    /**
     * Approve a Check Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveACheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.approveACheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * Approve a Wire Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveAWireTransferTest() throws ApiException {
        String wireTransferId = null;
        WireTransfer response = api.approveAWireTransfer(wireTransferId);
        // TODO: test validations
    }

    /**
     * Approve an Account Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveAnAccountTransferTest() throws ApiException {
        String accountTransferId = null;
        AccountTransfer response = api.approveAnAccountTransfer(accountTransferId);
        // TODO: test validations
    }

    /**
     * Approve an ACH Transfer
     *
     * Approves an ACH Transfer in a pending_approval state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveAnAchTransferTest() throws ApiException {
        String achTransferId = null;
        AchTransfer response = api.approveAnAchTransfer(achTransferId);
        // TODO: test validations
    }

    /**
     * Cancel a pending ACH Transfer
     *
     * Cancels an ACH Transfer in a pending_approval state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAPendingAchTransferTest() throws ApiException {
        String achTransferId = null;
        AchTransfer response = api.cancelAPendingAchTransfer(achTransferId);
        // TODO: test validations
    }

    /**
     * Cancel a pending Check Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAPendingCheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.cancelAPendingCheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * Cancel a pending Wire Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAPendingWireTransferTest() throws ApiException {
        String wireTransferId = null;
        WireTransfer response = api.cancelAPendingWireTransfer(wireTransferId);
        // TODO: test validations
    }

    /**
     * Cancel an Account Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAnAccountTransferTest() throws ApiException {
        String accountTransferId = null;
        AccountTransfer response = api.cancelAnAccountTransfer(accountTransferId);
        // TODO: test validations
    }

    /**
     * Close an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeAnAccountTest() throws ApiException {
        String accountId = null;
        Account response = api.closeAnAccount(accountId);
        // TODO: test validations
    }

    /**
     * Complete a Sandbox Account Transfer
     *
     * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeASandboxAccountTransferTest() throws ApiException {
        String accountTransferId = null;
        AccountTransfer response = api.completeASandboxAccountTransfer(accountTransferId);
        // TODO: test validations
    }

    /**
     * Complete a Sandbox Real Time Payments Transfer
     *
     * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a &#x60;status&#x60; of &#x60;pending_submission&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeASandboxRealTimePaymentsTransferTest() throws ApiException {
        String realTimePaymentsTransferId = null;
        CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters = null;
        RealTimePaymentsTransfer response = api.completeASandboxRealTimePaymentsTransfer(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters);
        // TODO: test validations
    }

    /**
     * Create a Bookkeeping Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createABookkeepingAccountTest() throws ApiException {
        CreateABookkeepingAccountParameters createABookkeepingAccountParameters = null;
        BookkeepingAccount response = api.createABookkeepingAccount(createABookkeepingAccountParameters);
        // TODO: test validations
    }

    /**
     * Create a Bookkeeping Entry Set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createABookkeepingEntrySetTest() throws ApiException {
        CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters = null;
        BookkeepingEntrySet response = api.createABookkeepingEntrySet(createABookkeepingEntrySetParameters);
        // TODO: test validations
    }

    /**
     * Create a Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACardTest() throws ApiException {
        CreateACardParameters createACardParameters = null;
        Card response = api.createACard(createACardParameters);
        // TODO: test validations
    }

    /**
     * Create a Card Dispute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACardDisputeTest() throws ApiException {
        CreateACardDisputeParameters createACardDisputeParameters = null;
        CardDispute response = api.createACardDispute(createACardDisputeParameters);
        // TODO: test validations
    }

    /**
     * Create a Card Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACardProfileTest() throws ApiException {
        CreateACardProfileParameters createACardProfileParameters = null;
        CardProfile response = api.createACardProfile(createACardProfileParameters);
        // TODO: test validations
    }

    /**
     * Create a Check Deposit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACheckDepositTest() throws ApiException {
        CreateACheckDepositParameters createACheckDepositParameters = null;
        CheckDeposit response = api.createACheckDeposit(createACheckDepositParameters);
        // TODO: test validations
    }

    /**
     * Create a Check Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createACheckTransferTest() throws ApiException {
        CreateACheckTransferParameters createACheckTransferParameters = null;
        CheckTransfer response = api.createACheckTransfer(createACheckTransferParameters);
        // TODO: test validations
    }

    /**
     * Create a File
     *
     * To upload a file to Increase, you&#39;ll need to send a request of Content-Type &#x60;multipart/form-data&#x60;. The request should contain the file you would like to upload, as well as the parameters for creating a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAFileTest() throws ApiException {
        File _file = null;
        String purpose = null;
        String description = null;
        File response = api.createAFile(_file, purpose, description);
        // TODO: test validations
    }

    /**
     * Create a Limit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createALimitTest() throws ApiException {
        CreateALimitParameters createALimitParameters = null;
        Limit response = api.createALimit(createALimitParameters);
        // TODO: test validations
    }

    /**
     * Create a Real Time Payments Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createARealTimePaymentsTransferTest() throws ApiException {
        CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters = null;
        RealTimePaymentsTransfer response = api.createARealTimePaymentsTransfer(createARealTimePaymentsTransferParameters);
        // TODO: test validations
    }

    /**
     * Create a supplemental document for an Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createASupplementalDocumentForAnEntityTest() throws ApiException {
        String entityId = null;
        CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters = null;
        Entity response = api.createASupplementalDocumentForAnEntity(entityId, createASupplementalDocumentForAnEntityParameters);
        // TODO: test validations
    }

    /**
     * Create a Wire Drawdown Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAWireDrawdownRequestTest() throws ApiException {
        CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters = null;
        WireDrawdownRequest response = api.createAWireDrawdownRequest(createAWireDrawdownRequestParameters);
        // TODO: test validations
    }

    /**
     * Create a Wire Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAWireTransferTest() throws ApiException {
        CreateAWireTransferParameters createAWireTransferParameters = null;
        WireTransfer response = api.createAWireTransfer(createAWireTransferParameters);
        // TODO: test validations
    }

    /**
     * Create an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAccountTest() throws ApiException {
        CreateAnAccountParameters createAnAccountParameters = null;
        Account response = api.createAnAccount(createAnAccountParameters);
        // TODO: test validations
    }

    /**
     * Create an Account Number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAccountNumberTest() throws ApiException {
        CreateAnAccountNumberParameters createAnAccountNumberParameters = null;
        AccountNumber response = api.createAnAccountNumber(createAnAccountNumberParameters);
        // TODO: test validations
    }

    /**
     * Create an Account Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAccountTransferTest() throws ApiException {
        CreateAnAccountTransferParameters createAnAccountTransferParameters = null;
        AccountTransfer response = api.createAnAccountTransfer(createAnAccountTransferParameters);
        // TODO: test validations
    }

    /**
     * Create an ACH Prenotification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAchPrenotificationTest() throws ApiException {
        CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters = null;
        AchPrenotification response = api.createAnAchPrenotification(createAnAchPrenotificationParameters);
        // TODO: test validations
    }

    /**
     * Create an ACH Return
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAchReturnTest() throws ApiException {
        CreateAnAchReturnParameters createAnAchReturnParameters = null;
        InboundAchTransferReturn response = api.createAnAchReturn(createAnAchReturnParameters);
        // TODO: test validations
    }

    /**
     * Create an ACH Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnAchTransferTest() throws ApiException {
        CreateAnAchTransferParameters createAnAchTransferParameters = null;
        AchTransfer response = api.createAnAchTransfer(createAnAchTransferParameters);
        // TODO: test validations
    }

    /**
     * Create an Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnEntityTest() throws ApiException {
        CreateAnEntityParameters createAnEntityParameters = null;
        Entity response = api.createAnEntity(createAnEntityParameters);
        // TODO: test validations
    }

    /**
     * Create an Event Subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnEventSubscriptionTest() throws ApiException {
        CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters = null;
        EventSubscription response = api.createAnEventSubscription(createAnEventSubscriptionParameters);
        // TODO: test validations
    }

    /**
     * Create an Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnExportTest() throws ApiException {
        CreateAnExportParameters createAnExportParameters = null;
        Export response = api.createAnExport(createAnExportParameters);
        // TODO: test validations
    }

    /**
     * Create an External Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnExternalAccountTest() throws ApiException {
        CreateAnExternalAccountParameters createAnExternalAccountParameters = null;
        ExternalAccount response = api.createAnExternalAccount(createAnExternalAccountParameters);
        // TODO: test validations
    }

    /**
     * Deposit a Sandbox Check Transfer
     *
     * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void depositASandboxCheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.depositASandboxCheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * List Account Numbers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountNumbersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String status = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        AccountNumberList response = api.listAccountNumbers(cursor, limit, status, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Account Statements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountStatementsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime statementPeriodStartAfter = null;
        OffsetDateTime statementPeriodStartBefore = null;
        OffsetDateTime statementPeriodStartOnOrAfter = null;
        OffsetDateTime statementPeriodStartOnOrBefore = null;
        AccountStatementList response = api.listAccountStatements(cursor, limit, accountId, statementPeriodStartAfter, statementPeriodStartBefore, statementPeriodStartOnOrAfter, statementPeriodStartOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Account Transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountTransfersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        AccountTransferList response = api.listAccountTransfers(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String entityId = null;
        String status = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        AccountList response = api.listAccounts(cursor, limit, entityId, status, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List ACH Prenotifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAchPrenotificationsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        AchPrenotificationList response = api.listAchPrenotifications(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List ACH Transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAchTransfersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        String externalAccountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        AchTransferList response = api.listAchTransfers(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Bookkeeping Accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBookkeepingAccountsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        BookkeepingAccountList response = api.listBookkeepingAccounts(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Bookkeeping Entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBookkeepingEntriesTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        BookkeepingEntryList response = api.listBookkeepingEntries(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Card Disputes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCardDisputesTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        List<String> statusIn = null;
        CardDisputeList response = api.listCardDisputes(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, statusIn);
        // TODO: test validations
    }

    /**
     * List Card Profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCardProfilesTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        List<String> statusIn = null;
        CardProfileList response = api.listCardProfiles(cursor, limit, statusIn);
        // TODO: test validations
    }

    /**
     * List Cards
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCardsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        CardList response = api.listCards(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Check Deposits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCheckDepositsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        CheckDepositList response = api.listCheckDeposits(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Check Transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCheckTransfersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        CheckTransferList response = api.listCheckTransfers(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Declined Transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeclinedTransactionsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        String routeId = null;
        DeclinedTransactionList response = api.listDeclinedTransactions(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, routeId);
        // TODO: test validations
    }

    /**
     * List Digital Wallet Tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDigitalWalletTokensTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String cardId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        DigitalWalletTokenList response = api.listDigitalWalletTokens(cursor, limit, cardId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDocumentsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String entityId = null;
        List<String> categoryIn = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        DocumentList response = api.listDocuments(cursor, limit, entityId, categoryIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEntitiesTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        EntityList response = api.listEntities(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Event Subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventSubscriptionsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        EventSubscriptionList response = api.listEventSubscriptions(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        List<String> categoryIn = null;
        String associatedObjectId = null;
        EventList response = api.listEvents(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, associatedObjectId);
        // TODO: test validations
    }

    /**
     * List Exports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExportsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        ExportList response = api.listExports(cursor, limit);
        // TODO: test validations
    }

    /**
     * List External Accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExternalAccountsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        List<String> statusIn = null;
        ExternalAccountList response = api.listExternalAccounts(cursor, limit, statusIn);
        // TODO: test validations
    }

    /**
     * List Files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilesTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        List<String> purposeIn = null;
        FileList response = api.listFiles(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, purposeIn);
        // TODO: test validations
    }

    /**
     * List Inbound ACH Transfer Returns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboundAchTransferReturnsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        InboundAchTransferReturnList response = api.listInboundAchTransferReturns(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Inbound Wire Drawdown Requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboundWireDrawdownRequestsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        InboundWireDrawdownRequestList response = api.listInboundWireDrawdownRequests(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Limits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLimitsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String modelId = null;
        String status = null;
        LimitList response = api.listLimits(cursor, limit, modelId, status);
        // TODO: test validations
    }

    /**
     * List OAuth Connections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOauthConnectionsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        OauthConnectionList response = api.listOauthConnections(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Pending Transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPendingTransactionsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        String routeId = null;
        String sourceId = null;
        List<String> statusIn = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        PendingTransactionList response = api.listPendingTransactions(cursor, limit, accountId, routeId, sourceId, statusIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Programs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProgramsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        ProgramList response = api.listPrograms(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Real Time Payments Transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRealTimePaymentsTransfersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        String externalAccountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        RealTimePaymentsTransferList response = api.listRealTimePaymentsTransfers(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * List Routing Numbers
     *
     * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoutingNumbersTest() throws ApiException {
        String routingNumber = null;
        String cursor = null;
        Integer limit = null;
        RoutingNumberList response = api.listRoutingNumbers(routingNumber, cursor, limit);
        // TODO: test validations
    }

    /**
     * List Transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        List<String> categoryIn = null;
        String routeId = null;
        TransactionList response = api.listTransactions(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, routeId);
        // TODO: test validations
    }

    /**
     * List Wire Drawdown Requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWireDrawdownRequestsTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        WireDrawdownRequestList response = api.listWireDrawdownRequests(cursor, limit);
        // TODO: test validations
    }

    /**
     * List Wire Transfers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWireTransfersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String accountId = null;
        String externalAccountId = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtOnOrAfter = null;
        OffsetDateTime createdAtOnOrBefore = null;
        WireTransferList response = api.listWireTransfers(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        // TODO: test validations
    }

    /**
     * Look up the balance for an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookUpTheBalanceForAnAccountTest() throws ApiException {
        LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters = null;
        BalanceLookup response = api.lookUpTheBalanceForAnAccount(lookUpTheBalanceForAnAccountParameters);
        // TODO: test validations
    }

    /**
     * Mail a Sandbox Check Transfer
     *
     * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mailASandboxCheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.mailASandboxCheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * Reject a Sandbox Check Deposit
     *
     * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectASandboxCheckDepositTest() throws ApiException {
        String checkDepositId = null;
        CheckDeposit response = api.rejectASandboxCheckDeposit(checkDepositId);
        // TODO: test validations
    }

    /**
     * Request a stop payment on a Check Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAStopPaymentOnACheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.requestAStopPaymentOnACheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve a Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveACardTest() throws ApiException {
        String cardId = null;
        Card response = api.retrieveACard(cardId);
        // TODO: test validations
    }

    /**
     * Retrieve a Card Dispute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveACardDisputeTest() throws ApiException {
        String cardDisputeId = null;
        CardDispute response = api.retrieveACardDispute(cardDisputeId);
        // TODO: test validations
    }

    /**
     * Retrieve a Card Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveACardProfileTest() throws ApiException {
        String cardProfileId = null;
        CardProfile response = api.retrieveACardProfile(cardProfileId);
        // TODO: test validations
    }

    /**
     * Retrieve a Check Deposit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveACheckDepositTest() throws ApiException {
        String checkDepositId = null;
        CheckDeposit response = api.retrieveACheckDeposit(checkDepositId);
        // TODO: test validations
    }

    /**
     * Retrieve a Check Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveACheckTransferTest() throws ApiException {
        String checkTransferId = null;
        CheckTransfer response = api.retrieveACheckTransfer(checkTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve a Declined Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveADeclinedTransactionTest() throws ApiException {
        String declinedTransactionId = null;
        DeclinedTransaction response = api.retrieveADeclinedTransaction(declinedTransactionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Digital Wallet Token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveADigitalWalletTokenTest() throws ApiException {
        String digitalWalletTokenId = null;
        DigitalWalletToken response = api.retrieveADigitalWalletToken(digitalWalletTokenId);
        // TODO: test validations
    }

    /**
     * Retrieve a Document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveADocumentTest() throws ApiException {
        String documentId = null;
        Document response = api.retrieveADocument(documentId);
        // TODO: test validations
    }

    /**
     * Retrieve a File
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAFileTest() throws ApiException {
        String fileId = null;
        File response = api.retrieveAFile(fileId);
        // TODO: test validations
    }

    /**
     * Retrieve a Limit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveALimitTest() throws ApiException {
        String limitId = null;
        Limit response = api.retrieveALimit(limitId);
        // TODO: test validations
    }

    /**
     * Retrieve a Pending Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAPendingTransactionTest() throws ApiException {
        String pendingTransactionId = null;
        PendingTransaction response = api.retrieveAPendingTransaction(pendingTransactionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Program
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAProgramTest() throws ApiException {
        String programId = null;
        Program response = api.retrieveAProgram(programId);
        // TODO: test validations
    }

    /**
     * Retrieve a Real-Time Decision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveARealTimeDecisionTest() throws ApiException {
        String realTimeDecisionId = null;
        RealTimeDecision response = api.retrieveARealTimeDecision(realTimeDecisionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Real Time Payments Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveARealTimePaymentsTransferTest() throws ApiException {
        String realTimePaymentsTransferId = null;
        RealTimePaymentsTransfer response = api.retrieveARealTimePaymentsTransfer(realTimePaymentsTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve a Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveATransactionTest() throws ApiException {
        String transactionId = null;
        Transaction response = api.retrieveATransaction(transactionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Wire Drawdown Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAWireDrawdownRequestTest() throws ApiException {
        String wireDrawdownRequestId = null;
        WireDrawdownRequest response = api.retrieveAWireDrawdownRequest(wireDrawdownRequestId);
        // TODO: test validations
    }

    /**
     * Retrieve a Wire Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAWireTransferTest() throws ApiException {
        String wireTransferId = null;
        WireTransfer response = api.retrieveAWireTransfer(wireTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAccountTest() throws ApiException {
        String accountId = null;
        Account response = api.retrieveAnAccount(accountId);
        // TODO: test validations
    }

    /**
     * Retrieve an Account Number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAccountNumberTest() throws ApiException {
        String accountNumberId = null;
        AccountNumber response = api.retrieveAnAccountNumber(accountNumberId);
        // TODO: test validations
    }

    /**
     * Retrieve an Account Statement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAccountStatementTest() throws ApiException {
        String accountStatementId = null;
        AccountStatement response = api.retrieveAnAccountStatement(accountStatementId);
        // TODO: test validations
    }

    /**
     * Retrieve an Account Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAccountTransferTest() throws ApiException {
        String accountTransferId = null;
        AccountTransfer response = api.retrieveAnAccountTransfer(accountTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve an ACH Prenotification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAchPrenotificationTest() throws ApiException {
        String achPrenotificationId = null;
        AchPrenotification response = api.retrieveAnAchPrenotification(achPrenotificationId);
        // TODO: test validations
    }

    /**
     * Retrieve an ACH Transfer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnAchTransferTest() throws ApiException {
        String achTransferId = null;
        AchTransfer response = api.retrieveAnAchTransfer(achTransferId);
        // TODO: test validations
    }

    /**
     * Retrieve an Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnEntityTest() throws ApiException {
        String entityId = null;
        Entity response = api.retrieveAnEntity(entityId);
        // TODO: test validations
    }

    /**
     * Retrieve an Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnEventTest() throws ApiException {
        String eventId = null;
        Event response = api.retrieveAnEvent(eventId);
        // TODO: test validations
    }

    /**
     * Retrieve an Event Subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnEventSubscriptionTest() throws ApiException {
        String eventSubscriptionId = null;
        EventSubscription response = api.retrieveAnEventSubscription(eventSubscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieve an Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnExportTest() throws ApiException {
        String exportId = null;
        Export response = api.retrieveAnExport(exportId);
        // TODO: test validations
    }

    /**
     * Retrieve an External Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnExternalAccountTest() throws ApiException {
        String externalAccountId = null;
        ExternalAccount response = api.retrieveAnExternalAccount(externalAccountId);
        // TODO: test validations
    }

    /**
     * Retrieve an Inbound ACH Transfer Return
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnInboundAchTransferReturnTest() throws ApiException {
        String inboundAchTransferReturnId = null;
        InboundAchTransferReturn response = api.retrieveAnInboundAchTransferReturn(inboundAchTransferReturnId);
        // TODO: test validations
    }

    /**
     * Retrieve an Inbound Wire Drawdown Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnInboundWireDrawdownRequestTest() throws ApiException {
        String inboundWireDrawdownRequestId = null;
        InboundWireDrawdownRequest response = api.retrieveAnInboundWireDrawdownRequest(inboundWireDrawdownRequestId);
        // TODO: test validations
    }

    /**
     * Retrieve an OAuth Connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAnOauthConnectionTest() throws ApiException {
        String oauthConnectionId = null;
        OauthConnection response = api.retrieveAnOauthConnection(oauthConnectionId);
        // TODO: test validations
    }

    /**
     * Retrieve Group details
     *
     * Returns details for the currently authenticated Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveGroupDetailsTest() throws ApiException {
        Group response = api.retrieveGroupDetails();
        // TODO: test validations
    }

    /**
     * Retrieve sensitive details for a Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSensitiveDetailsForACardTest() throws ApiException {
        String cardId = null;
        CardDetails response = api.retrieveSensitiveDetailsForACard(cardId);
        // TODO: test validations
    }

    /**
     * Return a Sandbox ACH Transfer
     *
     * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnASandboxAchTransferTest() throws ApiException {
        String achTransferId = null;
        ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters = null;
        AchTransfer response = api.returnASandboxAchTransfer(achTransferId, returnASandboxAchTransferParameters);
        // TODO: test validations
    }

    /**
     * Return a Sandbox Check Deposit
     *
     * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnASandboxCheckDepositTest() throws ApiException {
        String checkDepositId = null;
        CheckDeposit response = api.returnASandboxCheckDeposit(checkDepositId);
        // TODO: test validations
    }

    /**
     * Return a Sandbox Check Transfer
     *
     * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnASandboxCheckTransferTest() throws ApiException {
        String checkTransferId = null;
        ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters = null;
        CheckTransfer response = api.returnASandboxCheckTransfer(checkTransferId, returnASandboxCheckTransferParameters);
        // TODO: test validations
    }

    /**
     * Reverse a Sandbox Wire Transfer
     *
     * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a &#x60;status&#x60; of &#x60;complete&#x60;.&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reverseASandboxWireTransferTest() throws ApiException {
        String wireTransferId = null;
        WireTransfer response = api.reverseASandboxWireTransfer(wireTransferId);
        // TODO: test validations
    }

    /**
     * Simulate a Real Time Payments Transfer to your account
     *
     * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateARealTimePaymentsTransferToYourAccountTest() throws ApiException {
        SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters = null;
        InboundRealTimePaymentsTransferSimulationResult response = api.simulateARealTimePaymentsTransferToYourAccount(simulateARealTimePaymentsTransferToYourAccountParameters);
        // TODO: test validations
    }

    /**
     * Simulate a refund on a card
     *
     * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateARefundOnACardTest() throws ApiException {
        SimulateARefundOnACardParameters simulateARefundOnACardParameters = null;
        Transaction response = api.simulateARefundOnACard(simulateARefundOnACardParameters);
        // TODO: test validations
    }

    /**
     * Simulate a tax document being created
     *
     * Simulates an tax document being created for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateATaxDocumentBeingCreatedTest() throws ApiException {
        SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters = null;
        Document response = api.simulateATaxDocumentBeingCreated(simulateATaxDocumentBeingCreatedParameters);
        // TODO: test validations
    }

    /**
     * Simulate a Wire Transfer to your account
     *
     * Simulates an inbound Wire Transfer to your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAWireTransferToYourAccountTest() throws ApiException {
        SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters = null;
        InboundWireTransferSimulationResult response = api.simulateAWireTransferToYourAccount(simulateAWireTransferToYourAccountParameters);
        // TODO: test validations
    }

    /**
     * Simulate an Account Statement being created
     *
     * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAnAccountStatementBeingCreatedTest() throws ApiException {
        SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters = null;
        AccountStatement response = api.simulateAnAccountStatementBeingCreated(simulateAnAccountStatementBeingCreatedParameters);
        // TODO: test validations
    }

    /**
     * Simulate an ACH Transfer to your account
     *
     * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the &#x60;amount&#x60; is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAnAchTransferToYourAccountTest() throws ApiException {
        SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters = null;
        InboundAchTransferSimulationResult response = api.simulateAnAchTransferToYourAccount(simulateAnAchTransferToYourAccountParameters);
        // TODO: test validations
    }

    /**
     * Simulate an authorization on a Card
     *
     * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the &#x60;amount&#x60; submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type &#x60;card_authorization&#x60; or a [Declined Transaction](#declined-transactions) of type &#x60;card_decline&#x60;. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAnAuthorizationOnACardTest() throws ApiException {
        SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters = null;
        InboundCardAuthorizationSimulationResult response = api.simulateAnAuthorizationOnACard(simulateAnAuthorizationOnACardParameters);
        // TODO: test validations
    }

    /**
     * Simulate an Inbound Wire Drawdown request being created
     *
     * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAnInboundWireDrawdownRequestBeingCreatedTest() throws ApiException {
        SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters = null;
        InboundWireDrawdownRequest response = api.simulateAnInboundWireDrawdownRequestBeingCreated(simulateAnInboundWireDrawdownRequestBeingCreatedParameters);
        // TODO: test validations
    }

    /**
     * Simulate an Interest Payment to your account
     *
     * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateAnInterestPaymentToYourAccountTest() throws ApiException {
        SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters = null;
        InterestPaymentSimulationResult response = api.simulateAnInterestPaymentToYourAccount(simulateAnInterestPaymentToYourAccountParameters);
        // TODO: test validations
    }

    /**
     * Simulate digital wallet provisioning for a card
     *
     * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateDigitalWalletProvisioningForACardTest() throws ApiException {
        SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters = null;
        InboundDigitalWalletTokenRequestSimulationResult response = api.simulateDigitalWalletProvisioningForACard(simulateDigitalWalletProvisioningForACardParameters);
        // TODO: test validations
    }

    /**
     * Simulate settling a card authorization
     *
     * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulateSettlingACardAuthorizationTest() throws ApiException {
        SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters = null;
        Transaction response = api.simulateSettlingACardAuthorization(simulateSettlingACardAuthorizationParameters);
        // TODO: test validations
    }

    /**
     * Simulates advancing the state of a card dispute
     *
     * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of &#x60;pending_reviewing&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void simulatesAdvancingTheStateOfACardDisputeTest() throws ApiException {
        String cardDisputeId = null;
        SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters = null;
        CardDispute response = api.simulatesAdvancingTheStateOfACardDispute(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters);
        // TODO: test validations
    }

    /**
     * Submit a Sandbox ACH Transfer
     *
     * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of &#x60;submitted&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitASandboxAchTransferTest() throws ApiException {
        String achTransferId = null;
        AchTransfer response = api.submitASandboxAchTransfer(achTransferId);
        // TODO: test validations
    }

    /**
     * Submit a Sandbox Check Deposit
     *
     * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitASandboxCheckDepositTest() throws ApiException {
        String checkDepositId = null;
        CheckDeposit response = api.submitASandboxCheckDeposit(checkDepositId);
        // TODO: test validations
    }

    /**
     * Submit a Sandbox Wire Transfer
     *
     * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_creating&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitASandboxWireTransferTest() throws ApiException {
        String wireTransferId = null;
        WireTransfer response = api.submitASandboxWireTransfer(wireTransferId);
        // TODO: test validations
    }

    /**
     * Update a Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateACardTest() throws ApiException {
        String cardId = null;
        UpdateACardParameters updateACardParameters = null;
        Card response = api.updateACard(cardId, updateACardParameters);
        // TODO: test validations
    }

    /**
     * Update a Limit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateALimitTest() throws ApiException {
        String limitId = null;
        UpdateALimitParameters updateALimitParameters = null;
        Limit response = api.updateALimit(limitId, updateALimitParameters);
        // TODO: test validations
    }

    /**
     * Update an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnAccountTest() throws ApiException {
        String accountId = null;
        UpdateAnAccountParameters updateAnAccountParameters = null;
        Account response = api.updateAnAccount(accountId, updateAnAccountParameters);
        // TODO: test validations
    }

    /**
     * Update an Account Number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnAccountNumberTest() throws ApiException {
        String accountNumberId = null;
        UpdateAnAccountNumberParameters updateAnAccountNumberParameters = null;
        AccountNumber response = api.updateAnAccountNumber(accountNumberId, updateAnAccountNumberParameters);
        // TODO: test validations
    }

    /**
     * Update an Event Subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnEventSubscriptionTest() throws ApiException {
        String eventSubscriptionId = null;
        UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters = null;
        EventSubscription response = api.updateAnEventSubscription(eventSubscriptionId, updateAnEventSubscriptionParameters);
        // TODO: test validations
    }

    /**
     * Update an External Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnExternalAccountTest() throws ApiException {
        String externalAccountId = null;
        UpdateAnExternalAccountParameters updateAnExternalAccountParameters = null;
        ExternalAccount response = api.updateAnExternalAccount(externalAccountId, updateAnExternalAccountParameters);
        // TODO: test validations
    }

}
