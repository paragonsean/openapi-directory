/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields related to a digital wallet token provisioning attempt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DigitalWalletToken {
  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CARD_PROFILE_ID = "card_profile_id";
  @SerializedName(SERIALIZED_NAME_CARD_PROFILE_ID)
  private String cardProfileId;

  /**
   * Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
   */
  @JsonAdapter(DecisionEnum.Adapter.class)
  public enum DecisionEnum {
    /**
     * Approve the provisioning request.
     */
    APPROVE("approve"),
    
    /**
     * Decline the provisioning request.
     */
    DECLINE("decline");

    private String value;

    DecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionEnum fromValue(String value) {
      for (DecisionEnum b : DecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecisionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECISION = "decision";
  @SerializedName(SERIALIZED_NAME_DECISION)
  private DecisionEnum decision;

  /**
   * The digital wallet app being used.
   */
  @JsonAdapter(DigitalWalletEnum.Adapter.class)
  public enum DigitalWalletEnum {
    /**
     * Apple Pay
     */
    APPLE_PAY("apple_pay"),
    
    /**
     * Google Pay
     */
    GOOGLE_PAY("google_pay");

    private String value;

    DigitalWalletEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DigitalWalletEnum fromValue(String value) {
      for (DigitalWalletEnum b : DigitalWalletEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DigitalWalletEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DigitalWalletEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DigitalWalletEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DigitalWalletEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DigitalWalletEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIGITAL_WALLET = "digital_wallet";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET)
  private DigitalWalletEnum digitalWallet;

  public DigitalWalletToken() {
  }

  public DigitalWalletToken cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The identifier of the Card that is being tokenized.
   * @return cardId
   */
  @javax.annotation.Nonnull
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public DigitalWalletToken cardProfileId(String cardProfileId) {
    this.cardProfileId = cardProfileId;
    return this;
  }

  /**
   * The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
   * @return cardProfileId
   */
  @javax.annotation.Nullable
  public String getCardProfileId() {
    return cardProfileId;
  }

  public void setCardProfileId(String cardProfileId) {
    this.cardProfileId = cardProfileId;
  }


  public DigitalWalletToken decision(DecisionEnum decision) {
    this.decision = decision;
    return this;
  }

  /**
   * Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
   * @return decision
   */
  @javax.annotation.Nullable
  public DecisionEnum getDecision() {
    return decision;
  }

  public void setDecision(DecisionEnum decision) {
    this.decision = decision;
  }


  public DigitalWalletToken digitalWallet(DigitalWalletEnum digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

  /**
   * The digital wallet app being used.
   * @return digitalWallet
   */
  @javax.annotation.Nonnull
  public DigitalWalletEnum getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(DigitalWalletEnum digitalWallet) {
    this.digitalWallet = digitalWallet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalWalletToken digitalWalletToken = (DigitalWalletToken) o;
    return Objects.equals(this.cardId, digitalWalletToken.cardId) &&
        Objects.equals(this.cardProfileId, digitalWalletToken.cardProfileId) &&
        Objects.equals(this.decision, digitalWalletToken.decision) &&
        Objects.equals(this.digitalWallet, digitalWalletToken.digitalWallet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, cardProfileId, decision, digitalWallet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalWalletToken {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardProfileId: ").append(toIndentedString(cardProfileId)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_id");
    openapiFields.add("card_profile_id");
    openapiFields.add("decision");
    openapiFields.add("digital_wallet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("card_id");
    openapiRequiredFields.add("card_profile_id");
    openapiRequiredFields.add("decision");
    openapiRequiredFields.add("digital_wallet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DigitalWalletToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalWalletToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalWalletToken is not found in the empty JSON string", DigitalWalletToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalWalletToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalWalletToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalWalletToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("card_profile_id") != null && !jsonObj.get("card_profile_id").isJsonNull()) && !jsonObj.get("card_profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_profile_id").toString()));
      }
      if ((jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonNull()) && !jsonObj.get("decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decision").toString()));
      }
      // validate the required field `decision`
      DecisionEnum.validateJsonElement(jsonObj.get("decision"));
      if (!jsonObj.get("digital_wallet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_wallet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_wallet").toString()));
      }
      // validate the required field `digital_wallet`
      DigitalWalletEnum.validateJsonElement(jsonObj.get("digital_wallet"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalWalletToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalWalletToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalWalletToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalWalletToken.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalWalletToken>() {
           @Override
           public void write(JsonWriter out, DigitalWalletToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalWalletToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DigitalWalletToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DigitalWalletToken
   * @throws IOException if the JSON string is invalid with respect to DigitalWalletToken
   */
  public static DigitalWalletToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalWalletToken.class);
  }

  /**
   * Convert an instance of DigitalWalletToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

