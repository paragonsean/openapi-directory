/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Increase generates certain documents / forms automatically for your application; they can be listed here. Currently the only supported document type is IRS Form 1099-INT.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  /**
   * The type of document.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * The disclosures that the company uses to manage its account opening.
     */
    ACCOUNT_OPENING_DISCLOSURES("account_opening_disclosures"),
    
    /**
     * The policy that the company uses to manage its anti-money laundering.
     */
    ANTI_MONEY_LAUNDERING_POLICY("anti_money_laundering_policy"),
    
    /**
     * The procedures that the company uses to implement it&#39;s AML policy.
     */
    ANTI_MONEY_LAUNDERING_PROCEDURES("anti_money_laundering_procedures"),
    
    /**
     * An audit report for the company.
     */
    AUDIT_REPORT("audit_report"),
    
    /**
     * The results of one or more background checks.
     */
    BACKGROUND_CHECKS("background_checks"),
    
    /**
     * A business continuity plan for the company.
     */
    BUSINESS_CONTINUITY_PLAN("business_continuity_plan"),
    
    /**
     * The policy that the company uses to manage its collections.
     */
    COLLECTIONS_POLICY("collections_policy"),
    
    /**
     * The policy that the company uses to manage its complaints.
     */
    COMPLAINTS_POLICY("complaints_policy"),
    
    /**
     * A report that was used to manage the company&#39;s complaints.
     */
    COMPLAINT_REPORT("complaint_report"),
    
    /**
     * A compliance report not covered by another category.
     */
    COMPLIANCE_REPORT("compliance_report"),
    
    /**
     * A list of employees or organizational chart for the compliance/risk team. If absent, description of compliance vendor or compliance staffing plan for future hires.
     */
    COMPLIANCE_STAFFING_PLAN("compliance_staffing_plan"),
    
    /**
     * The policy that the company uses to manage its compliance.
     */
    COMPLIANCE_MANAGEMENT_SYSTEM_POLICY("compliance_management_system_policy"),
    
    /**
     * The notice that the company uses to manage its consumer privacy.
     */
    CONSUMER_PRIVACY_NOTICE("consumer_privacy_notice"),
    
    /**
     * The policy that the company uses to manage its consumer protection.
     */
    CONSUMER_PROTECTION_POLICY("consumer_protection_policy"),
    
    /**
     * The document that was used to form the company.
     */
    CORPORATE_FORMATION_DOCUMENT("corporate_formation_document"),
    
    /**
     * A report that was used to monitor the company&#39;s credit.
     */
    CREDIT_MONITORING_REPORT("credit_monitoring_report"),
    
    /**
     * The policy that the company uses to manage its customer information.
     */
    CUSTOMER_INFORMATION_PROGRAM_POLICY("customer_information_program_policy"),
    
    /**
     * The policy that the company uses to manage its Electronic Funds Transfer Act.
     */
    ELECTRONIC_FUNDS_TRANFER_ACT_POLICY("electronic_funds_tranfer_act_policy"),
    
    /**
     * An overview of the company&#39;s employees.
     */
    EMPLOYEE_OVERVIEW("employee_overview"),
    
    /**
     * The terms of service that the company uses for its end users.
     */
    END_USER_TERMS_OF_SERVICE("end_user_terms_of_service"),
    
    /**
     * The policy that the company uses to manage its e-signatures.
     */
    E_SIGN_POLICY("e_sign_policy"),
    
    /**
     * A financial statement for the company.
     */
    FINANCIAL_STATEMENT("financial_statement"),
    
    /**
     * Internal Revenue Service Form 1099-INT.
     */
    FORM_1099_INT("form_1099_int"),
    
    /**
     * The policy that the company uses to manage its fraud prevention.
     */
    FRAUD_PREVENTION_POLICY("fraud_prevention_policy"),
    
    /**
     * The policy that the company uses to manage its funds availability.
     */
    FUNDS_AVAILABILITY_POLICY("funds_availability_policy"),
    
    /**
     * The disclosure that the company uses to manage its funds availability.
     */
    FUNDS_AVAILABILITY_DISCLOSURE("funds_availability_disclosure"),
    
    /**
     * A diagram of the company&#39;s funds flow.
     */
    FUNDS_FLOW_DIAGRAM("funds_flow_diagram"),
    
    /**
     * The policy that the company uses to manage its Gramm-Leach-Bliley Act.
     */
    GRAMM_LEACH_BLILEY_ACT_POLICY("gramm_leach_bliley_act_policy"),
    
    /**
     * The policy that the company uses to manage its information security.
     */
    INFORMATION_SECURITY_POLICY("information_security_policy"),
    
    /**
     * The policy that the company uses to manage its insurance.
     */
    INSURANCE_POLICY("insurance_policy"),
    
    /**
     * A presentation that was given to investors.
     */
    INVESTOR_PRESENTATION("investor_presentation"),
    
    /**
     * The policy that the company uses to manage its loan application processing.
     */
    LOAN_APPLICATION_PROCESSING_POLICY("loan_application_processing_policy"),
    
    /**
     * A biography of the company management.
     */
    MANAGEMENT_BIOGRAPHY("management_biography"),
    
    /**
     * The policy that the company uses to manage its marketing and advertising.
     */
    MARKETING_AND_ADVERTISING_POLICY("marketing_and_advertising_policy"),
    
    /**
     * A diagram of the company&#39;s network security.
     */
    NETWORK_SECURITY_DIAGRAM("network_security_diagram"),
    
    /**
     * A questionnaire that was filled out by the company.
     */
    ONBOARDING_QUESTIONNAIRE("onboarding_questionnaire"),
    
    /**
     * A report that was used to test the company&#39;s security.
     */
    PENETRATION_TEST_REPORT("penetration_test_report"),
    
    /**
     * An assessment of the program&#39;s risk.
     */
    PROGRAM_RISK_ASSESSMENT("program_risk_assessment"),
    
    /**
     * A report that was used to audit the company&#39;s security.
     */
    SECURITY_AUDIT_REPORT("security_audit_report"),
    
    /**
     * The policy that the company uses to manage its servicing.
     */
    SERVICING_POLICY("servicing_policy"),
    
    /**
     * A report that was used to monitor the company&#39;s transactions.
     */
    TRANSACTION_MONITORING_REPORT("transaction_monitoring_report"),
    
    /**
     * The policy that the company uses to manage its Truth in Savings Act.
     */
    TRUTH_IN_SAVINGS_ACT_POLICY("truth_in_savings_act_policy"),
    
    /**
     * The policy that the company uses to manage its underwriting.
     */
    UNDERWRITING_POLICY("underwriting_policy"),
    
    /**
     * A risk-rated list of the company&#39;s vendors.
     */
    VENDOR_LIST("vendor_list"),
    
    /**
     * The policy that the company uses to manage its vendors.
     */
    VENDOR_MANAGEMENT_POLICY("vendor_management_policy"),
    
    /**
     * A report that was used to manage the company&#39;s vendors.
     */
    VENDOR_RISK_MANAGEMENT_REPORT("vendor_risk_management_report"),
    
    /**
     * A forecast of the company&#39;s volume.
     */
    VOLUME_FORECAST("volume_forecast");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;document&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DOCUMENT("document");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Document() {
  }

  public Document category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The type of document.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Document createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Document entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The identifier of the Entity the document was generated for.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public Document fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * The identifier of the File containing the Document&#39;s contents.
   * @return fileId
   */
  @javax.annotation.Nonnull
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public Document id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Document identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Document type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;document&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.category, document.category) &&
        Objects.equals(this.createdAt, document.createdAt) &&
        Objects.equals(this.entityId, document.entityId) &&
        Objects.equals(this.fileId, document.fileId) &&
        Objects.equals(this.id, document.id) &&
        Objects.equals(this.type, document.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, createdAt, entityId, fileId, id, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("created_at");
    openapiFields.add("entity_id");
    openapiFields.add("file_id");
    openapiFields.add("id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("entity_id");
    openapiRequiredFields.add("file_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Document.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if (!jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

