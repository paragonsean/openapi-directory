/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RealTimePaymentsTransferRejection;
import org.openapitools.client.model.RealTimePaymentsTransferSubmission;
import org.openapitools.client.model.TransferApproval;
import org.openapitools.client.model.TransferCancellation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RealTimePaymentsTransfer {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private TransferApproval approval;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private TransferCancellation cancellation;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditor_name";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  private String creditorName;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer&#39;s currency. For real time payments transfers this is always equal to &#x60;USD&#x60;.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DESTINATION_ACCOUNT_NUMBER = "destination_account_number";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ACCOUNT_NUMBER)
  private String destinationAccountNumber;

  public static final String SERIALIZED_NAME_DESTINATION_ROUTING_NUMBER = "destination_routing_number";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ROUTING_NUMBER)
  private String destinationRoutingNumber;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "external_account_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REJECTION = "rejection";
  @SerializedName(SERIALIZED_NAME_REJECTION)
  private RealTimePaymentsTransferRejection rejection;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION = "remittance_information";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION)
  private String remittanceInformation;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_NUMBER_ID = "source_account_number_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_NUMBER_ID)
  private String sourceAccountNumberId;

  /**
   * The lifecycle status of the transfer.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The transfer is pending approval.
     */
    PENDING_APPROVAL("pending_approval"),
    
    /**
     * The transfer has been canceled.
     */
    CANCELED("canceled"),
    
    /**
     * The transfer is queued to be submitted to Real Time Payments.
     */
    PENDING_SUBMISSION("pending_submission"),
    
    /**
     * The transfer has been submitted and is pending a response from Real Time Payments.
     */
    SUBMITTED("submitted"),
    
    /**
     * The transfer has been sent successfully and is complete.
     */
    COMPLETE("complete"),
    
    /**
     * The transfer was rejected by the network or the recipient&#39;s bank.
     */
    REJECTED("rejected"),
    
    /**
     * The transfer requires attention by an operator.
     */
    REQUIRES_ATTENTION("requires_attention");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private RealTimePaymentsTransferSubmission submission;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;real_time_payments_transfer&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REAL_TIME_PAYMENTS_TRANSFER("real_time_payments_transfer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public RealTimePaymentsTransfer() {
  }

  public RealTimePaymentsTransfer accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The Account from which the transfer was sent.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public RealTimePaymentsTransfer amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in USD cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public RealTimePaymentsTransfer approval(TransferApproval approval) {
    this.approval = approval;
    return this;
  }

  /**
   * Get approval
   * @return approval
   */
  @javax.annotation.Nullable
  public TransferApproval getApproval() {
    return approval;
  }

  public void setApproval(TransferApproval approval) {
    this.approval = approval;
  }


  public RealTimePaymentsTransfer cancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public TransferCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public RealTimePaymentsTransfer createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RealTimePaymentsTransfer creditorName(String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * The name of the transfer&#39;s recipient as provided by the sender.
   * @return creditorName
   */
  @javax.annotation.Nonnull
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(String creditorName) {
    this.creditorName = creditorName;
  }


  public RealTimePaymentsTransfer currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer&#39;s currency. For real time payments transfers this is always equal to &#x60;USD&#x60;.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public RealTimePaymentsTransfer destinationAccountNumber(String destinationAccountNumber) {
    this.destinationAccountNumber = destinationAccountNumber;
    return this;
  }

  /**
   * The destination account number.
   * @return destinationAccountNumber
   */
  @javax.annotation.Nonnull
  public String getDestinationAccountNumber() {
    return destinationAccountNumber;
  }

  public void setDestinationAccountNumber(String destinationAccountNumber) {
    this.destinationAccountNumber = destinationAccountNumber;
  }


  public RealTimePaymentsTransfer destinationRoutingNumber(String destinationRoutingNumber) {
    this.destinationRoutingNumber = destinationRoutingNumber;
    return this;
  }

  /**
   * The destination American Bankers&#39; Association (ABA) Routing Transit Number (RTN).
   * @return destinationRoutingNumber
   */
  @javax.annotation.Nonnull
  public String getDestinationRoutingNumber() {
    return destinationRoutingNumber;
  }

  public void setDestinationRoutingNumber(String destinationRoutingNumber) {
    this.destinationRoutingNumber = destinationRoutingNumber;
  }


  public RealTimePaymentsTransfer externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * The identifier of the External Account the transfer was made to, if any.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public RealTimePaymentsTransfer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Real Time Payments Transfer&#39;s identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RealTimePaymentsTransfer rejection(RealTimePaymentsTransferRejection rejection) {
    this.rejection = rejection;
    return this;
  }

  /**
   * Get rejection
   * @return rejection
   */
  @javax.annotation.Nullable
  public RealTimePaymentsTransferRejection getRejection() {
    return rejection;
  }

  public void setRejection(RealTimePaymentsTransferRejection rejection) {
    this.rejection = rejection;
  }


  public RealTimePaymentsTransfer remittanceInformation(String remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
    return this;
  }

  /**
   * Unstructured information that will show on the recipient&#39;s bank statement.
   * @return remittanceInformation
   */
  @javax.annotation.Nonnull
  public String getRemittanceInformation() {
    return remittanceInformation;
  }

  public void setRemittanceInformation(String remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
  }


  public RealTimePaymentsTransfer sourceAccountNumberId(String sourceAccountNumberId) {
    this.sourceAccountNumberId = sourceAccountNumberId;
    return this;
  }

  /**
   * The Account Number the recipient will see as having sent the transfer.
   * @return sourceAccountNumberId
   */
  @javax.annotation.Nonnull
  public String getSourceAccountNumberId() {
    return sourceAccountNumberId;
  }

  public void setSourceAccountNumberId(String sourceAccountNumberId) {
    this.sourceAccountNumberId = sourceAccountNumberId;
  }


  public RealTimePaymentsTransfer status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The lifecycle status of the transfer.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RealTimePaymentsTransfer submission(RealTimePaymentsTransferSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public RealTimePaymentsTransferSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(RealTimePaymentsTransferSubmission submission) {
    this.submission = submission;
  }


  public RealTimePaymentsTransfer transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The Transaction funding the transfer once it is complete.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public RealTimePaymentsTransfer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;real_time_payments_transfer&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealTimePaymentsTransfer realTimePaymentsTransfer = (RealTimePaymentsTransfer) o;
    return Objects.equals(this.accountId, realTimePaymentsTransfer.accountId) &&
        Objects.equals(this.amount, realTimePaymentsTransfer.amount) &&
        Objects.equals(this.approval, realTimePaymentsTransfer.approval) &&
        Objects.equals(this.cancellation, realTimePaymentsTransfer.cancellation) &&
        Objects.equals(this.createdAt, realTimePaymentsTransfer.createdAt) &&
        Objects.equals(this.creditorName, realTimePaymentsTransfer.creditorName) &&
        Objects.equals(this.currency, realTimePaymentsTransfer.currency) &&
        Objects.equals(this.destinationAccountNumber, realTimePaymentsTransfer.destinationAccountNumber) &&
        Objects.equals(this.destinationRoutingNumber, realTimePaymentsTransfer.destinationRoutingNumber) &&
        Objects.equals(this.externalAccountId, realTimePaymentsTransfer.externalAccountId) &&
        Objects.equals(this.id, realTimePaymentsTransfer.id) &&
        Objects.equals(this.rejection, realTimePaymentsTransfer.rejection) &&
        Objects.equals(this.remittanceInformation, realTimePaymentsTransfer.remittanceInformation) &&
        Objects.equals(this.sourceAccountNumberId, realTimePaymentsTransfer.sourceAccountNumberId) &&
        Objects.equals(this.status, realTimePaymentsTransfer.status) &&
        Objects.equals(this.submission, realTimePaymentsTransfer.submission) &&
        Objects.equals(this.transactionId, realTimePaymentsTransfer.transactionId) &&
        Objects.equals(this.type, realTimePaymentsTransfer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, amount, approval, cancellation, createdAt, creditorName, currency, destinationAccountNumber, destinationRoutingNumber, externalAccountId, id, rejection, remittanceInformation, sourceAccountNumberId, status, submission, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealTimePaymentsTransfer {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    destinationAccountNumber: ").append(toIndentedString(destinationAccountNumber)).append("\n");
    sb.append("    destinationRoutingNumber: ").append(toIndentedString(destinationRoutingNumber)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rejection: ").append(toIndentedString(rejection)).append("\n");
    sb.append("    remittanceInformation: ").append(toIndentedString(remittanceInformation)).append("\n");
    sb.append("    sourceAccountNumberId: ").append(toIndentedString(sourceAccountNumberId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("amount");
    openapiFields.add("approval");
    openapiFields.add("cancellation");
    openapiFields.add("created_at");
    openapiFields.add("creditor_name");
    openapiFields.add("currency");
    openapiFields.add("destination_account_number");
    openapiFields.add("destination_routing_number");
    openapiFields.add("external_account_id");
    openapiFields.add("id");
    openapiFields.add("rejection");
    openapiFields.add("remittance_information");
    openapiFields.add("source_account_number_id");
    openapiFields.add("status");
    openapiFields.add("submission");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("approval");
    openapiRequiredFields.add("cancellation");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("creditor_name");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("destination_account_number");
    openapiRequiredFields.add("destination_routing_number");
    openapiRequiredFields.add("external_account_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("rejection");
    openapiRequiredFields.add("remittance_information");
    openapiRequiredFields.add("source_account_number_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealTimePaymentsTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealTimePaymentsTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealTimePaymentsTransfer is not found in the empty JSON string", RealTimePaymentsTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealTimePaymentsTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealTimePaymentsTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RealTimePaymentsTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      // validate the required field `approval`
      TransferApproval.validateJsonElement(jsonObj.get("approval"));
      // validate the required field `cancellation`
      TransferCancellation.validateJsonElement(jsonObj.get("cancellation"));
      if (!jsonObj.get("creditor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditor_name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("destination_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_account_number").toString()));
      }
      if (!jsonObj.get("destination_routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_routing_number").toString()));
      }
      if ((jsonObj.get("external_account_id") != null && !jsonObj.get("external_account_id").isJsonNull()) && !jsonObj.get("external_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `rejection`
      RealTimePaymentsTransferRejection.validateJsonElement(jsonObj.get("rejection"));
      if (!jsonObj.get("remittance_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittance_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittance_information").toString()));
      }
      if (!jsonObj.get("source_account_number_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_account_number_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_account_number_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `submission`
      RealTimePaymentsTransferSubmission.validateJsonElement(jsonObj.get("submission"));
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealTimePaymentsTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealTimePaymentsTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealTimePaymentsTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealTimePaymentsTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<RealTimePaymentsTransfer>() {
           @Override
           public void write(JsonWriter out, RealTimePaymentsTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealTimePaymentsTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealTimePaymentsTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealTimePaymentsTransfer
   * @throws IOException if the JSON string is invalid with respect to RealTimePaymentsTransfer
   */
  public static RealTimePaymentsTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealTimePaymentsTransfer.class);
  }

  /**
   * Convert an instance of RealTimePaymentsTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

