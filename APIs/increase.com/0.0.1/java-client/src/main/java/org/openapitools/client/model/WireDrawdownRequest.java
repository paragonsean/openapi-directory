/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WireDrawdownRequestSubmission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WireDrawdownRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_ID = "account_number_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_ID)
  private String accountNumberId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FULFILLMENT_TRANSACTION_ID = "fulfillment_transaction_id";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TRANSACTION_ID)
  private String fulfillmentTransactionId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE_TO_RECIPIENT = "message_to_recipient";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_RECIPIENT)
  private String messageToRecipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_NUMBER = "recipient_account_number";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_NUMBER)
  private String recipientAccountNumber;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE1 = "recipient_address_line1";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE1)
  private String recipientAddressLine1;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE2 = "recipient_address_line2";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE2)
  private String recipientAddressLine2;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE3 = "recipient_address_line3";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS_LINE3)
  private String recipientAddressLine3;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RECIPIENT_ROUTING_NUMBER = "recipient_routing_number";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ROUTING_NUMBER)
  private String recipientRoutingNumber;

  /**
   * The lifecycle status of the drawdown request.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The drawdown request is queued to be submitted to Fedwire.
     */
    PENDING_SUBMISSION("pending_submission"),
    
    /**
     * The drawdown request has been sent and the recipient should respond in some way.
     */
    PENDING_RESPONSE("pending_response"),
    
    /**
     * The drawdown request has been fulfilled by the recipient.
     */
    FULFILLED("fulfilled"),
    
    /**
     * The drawdown request has been refused by the recipient.
     */
    REFUSED("refused");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private WireDrawdownRequestSubmission submission;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;wire_drawdown_request&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WIRE_DRAWDOWN_REQUEST("wire_drawdown_request");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public WireDrawdownRequest() {
  }

  public WireDrawdownRequest accountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
    return this;
  }

  /**
   * The Account Number to which the recipient of this request is being requested to send funds.
   * @return accountNumberId
   */
  @javax.annotation.Nonnull
  public String getAccountNumberId() {
    return accountNumberId;
  }

  public void setAccountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
  }


  public WireDrawdownRequest amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount being requested in cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public WireDrawdownRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be \&quot;USD\&quot;.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public WireDrawdownRequest fulfillmentTransactionId(String fulfillmentTransactionId) {
    this.fulfillmentTransactionId = fulfillmentTransactionId;
    return this;
  }

  /**
   * If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.
   * @return fulfillmentTransactionId
   */
  @javax.annotation.Nullable
  public String getFulfillmentTransactionId() {
    return fulfillmentTransactionId;
  }

  public void setFulfillmentTransactionId(String fulfillmentTransactionId) {
    this.fulfillmentTransactionId = fulfillmentTransactionId;
  }


  public WireDrawdownRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Wire drawdown request identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WireDrawdownRequest messageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
    return this;
  }

  /**
   * The message the recipient will see as part of the drawdown request.
   * @return messageToRecipient
   */
  @javax.annotation.Nonnull
  public String getMessageToRecipient() {
    return messageToRecipient;
  }

  public void setMessageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
  }


  public WireDrawdownRequest recipientAccountNumber(String recipientAccountNumber) {
    this.recipientAccountNumber = recipientAccountNumber;
    return this;
  }

  /**
   * The drawdown request&#39;s recipient&#39;s account number.
   * @return recipientAccountNumber
   */
  @javax.annotation.Nonnull
  public String getRecipientAccountNumber() {
    return recipientAccountNumber;
  }

  public void setRecipientAccountNumber(String recipientAccountNumber) {
    this.recipientAccountNumber = recipientAccountNumber;
  }


  public WireDrawdownRequest recipientAddressLine1(String recipientAddressLine1) {
    this.recipientAddressLine1 = recipientAddressLine1;
    return this;
  }

  /**
   * Line 1 of the drawdown request&#39;s recipient&#39;s address.
   * @return recipientAddressLine1
   */
  @javax.annotation.Nullable
  public String getRecipientAddressLine1() {
    return recipientAddressLine1;
  }

  public void setRecipientAddressLine1(String recipientAddressLine1) {
    this.recipientAddressLine1 = recipientAddressLine1;
  }


  public WireDrawdownRequest recipientAddressLine2(String recipientAddressLine2) {
    this.recipientAddressLine2 = recipientAddressLine2;
    return this;
  }

  /**
   * Line 2 of the drawdown request&#39;s recipient&#39;s address.
   * @return recipientAddressLine2
   */
  @javax.annotation.Nullable
  public String getRecipientAddressLine2() {
    return recipientAddressLine2;
  }

  public void setRecipientAddressLine2(String recipientAddressLine2) {
    this.recipientAddressLine2 = recipientAddressLine2;
  }


  public WireDrawdownRequest recipientAddressLine3(String recipientAddressLine3) {
    this.recipientAddressLine3 = recipientAddressLine3;
    return this;
  }

  /**
   * Line 3 of the drawdown request&#39;s recipient&#39;s address.
   * @return recipientAddressLine3
   */
  @javax.annotation.Nullable
  public String getRecipientAddressLine3() {
    return recipientAddressLine3;
  }

  public void setRecipientAddressLine3(String recipientAddressLine3) {
    this.recipientAddressLine3 = recipientAddressLine3;
  }


  public WireDrawdownRequest recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * The drawdown request&#39;s recipient&#39;s name.
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public WireDrawdownRequest recipientRoutingNumber(String recipientRoutingNumber) {
    this.recipientRoutingNumber = recipientRoutingNumber;
    return this;
  }

  /**
   * The drawdown request&#39;s recipient&#39;s routing number.
   * @return recipientRoutingNumber
   */
  @javax.annotation.Nonnull
  public String getRecipientRoutingNumber() {
    return recipientRoutingNumber;
  }

  public void setRecipientRoutingNumber(String recipientRoutingNumber) {
    this.recipientRoutingNumber = recipientRoutingNumber;
  }


  public WireDrawdownRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The lifecycle status of the drawdown request.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WireDrawdownRequest submission(WireDrawdownRequestSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public WireDrawdownRequestSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(WireDrawdownRequestSubmission submission) {
    this.submission = submission;
  }


  public WireDrawdownRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;wire_drawdown_request&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WireDrawdownRequest wireDrawdownRequest = (WireDrawdownRequest) o;
    return Objects.equals(this.accountNumberId, wireDrawdownRequest.accountNumberId) &&
        Objects.equals(this.amount, wireDrawdownRequest.amount) &&
        Objects.equals(this.currency, wireDrawdownRequest.currency) &&
        Objects.equals(this.fulfillmentTransactionId, wireDrawdownRequest.fulfillmentTransactionId) &&
        Objects.equals(this.id, wireDrawdownRequest.id) &&
        Objects.equals(this.messageToRecipient, wireDrawdownRequest.messageToRecipient) &&
        Objects.equals(this.recipientAccountNumber, wireDrawdownRequest.recipientAccountNumber) &&
        Objects.equals(this.recipientAddressLine1, wireDrawdownRequest.recipientAddressLine1) &&
        Objects.equals(this.recipientAddressLine2, wireDrawdownRequest.recipientAddressLine2) &&
        Objects.equals(this.recipientAddressLine3, wireDrawdownRequest.recipientAddressLine3) &&
        Objects.equals(this.recipientName, wireDrawdownRequest.recipientName) &&
        Objects.equals(this.recipientRoutingNumber, wireDrawdownRequest.recipientRoutingNumber) &&
        Objects.equals(this.status, wireDrawdownRequest.status) &&
        Objects.equals(this.submission, wireDrawdownRequest.submission) &&
        Objects.equals(this.type, wireDrawdownRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumberId, amount, currency, fulfillmentTransactionId, id, messageToRecipient, recipientAccountNumber, recipientAddressLine1, recipientAddressLine2, recipientAddressLine3, recipientName, recipientRoutingNumber, status, submission, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WireDrawdownRequest {\n");
    sb.append("    accountNumberId: ").append(toIndentedString(accountNumberId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    fulfillmentTransactionId: ").append(toIndentedString(fulfillmentTransactionId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageToRecipient: ").append(toIndentedString(messageToRecipient)).append("\n");
    sb.append("    recipientAccountNumber: ").append(toIndentedString(recipientAccountNumber)).append("\n");
    sb.append("    recipientAddressLine1: ").append(toIndentedString(recipientAddressLine1)).append("\n");
    sb.append("    recipientAddressLine2: ").append(toIndentedString(recipientAddressLine2)).append("\n");
    sb.append("    recipientAddressLine3: ").append(toIndentedString(recipientAddressLine3)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    recipientRoutingNumber: ").append(toIndentedString(recipientRoutingNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number_id");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("fulfillment_transaction_id");
    openapiFields.add("id");
    openapiFields.add("message_to_recipient");
    openapiFields.add("recipient_account_number");
    openapiFields.add("recipient_address_line1");
    openapiFields.add("recipient_address_line2");
    openapiFields.add("recipient_address_line3");
    openapiFields.add("recipient_name");
    openapiFields.add("recipient_routing_number");
    openapiFields.add("status");
    openapiFields.add("submission");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("fulfillment_transaction_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("message_to_recipient");
    openapiRequiredFields.add("recipient_account_number");
    openapiRequiredFields.add("recipient_address_line1");
    openapiRequiredFields.add("recipient_address_line2");
    openapiRequiredFields.add("recipient_address_line3");
    openapiRequiredFields.add("recipient_name");
    openapiRequiredFields.add("recipient_routing_number");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WireDrawdownRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WireDrawdownRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WireDrawdownRequest is not found in the empty JSON string", WireDrawdownRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WireDrawdownRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WireDrawdownRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WireDrawdownRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number_id").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("fulfillment_transaction_id") != null && !jsonObj.get("fulfillment_transaction_id").isJsonNull()) && !jsonObj.get("fulfillment_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillment_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillment_transaction_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("message_to_recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_to_recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_to_recipient").toString()));
      }
      if (!jsonObj.get("recipient_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_number").toString()));
      }
      if ((jsonObj.get("recipient_address_line1") != null && !jsonObj.get("recipient_address_line1").isJsonNull()) && !jsonObj.get("recipient_address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_address_line1").toString()));
      }
      if ((jsonObj.get("recipient_address_line2") != null && !jsonObj.get("recipient_address_line2").isJsonNull()) && !jsonObj.get("recipient_address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_address_line2").toString()));
      }
      if ((jsonObj.get("recipient_address_line3") != null && !jsonObj.get("recipient_address_line3").isJsonNull()) && !jsonObj.get("recipient_address_line3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_address_line3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_address_line3").toString()));
      }
      if ((jsonObj.get("recipient_name") != null && !jsonObj.get("recipient_name").isJsonNull()) && !jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      if (!jsonObj.get("recipient_routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_routing_number").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `submission`
      WireDrawdownRequestSubmission.validateJsonElement(jsonObj.get("submission"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WireDrawdownRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WireDrawdownRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WireDrawdownRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WireDrawdownRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WireDrawdownRequest>() {
           @Override
           public void write(JsonWriter out, WireDrawdownRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WireDrawdownRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WireDrawdownRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WireDrawdownRequest
   * @throws IOException if the JSON string is invalid with respect to WireDrawdownRequest
   */
  public static WireDrawdownRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WireDrawdownRequest.class);
  }

  /**
   * Convert an instance of WireDrawdownRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

