/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InboundACHTransferReturnSubmission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If unauthorized activity occurs via ACH, you can create an Inbound ACH Transfer Return and we&#39;ll reverse the transaction. You can create an Inbound ACH Transfer return the first two days after receiving an Inbound ACH Transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundAchTransferReturn {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INBOUND_ACH_TRANSFER_TRANSACTION_ID = "inbound_ach_transfer_transaction_id";
  @SerializedName(SERIALIZED_NAME_INBOUND_ACH_TRANSFER_TRANSACTION_ID)
  private String inboundAchTransferTransactionId;

  /**
   * The reason why this transfer will be returned. This is sent to the initiating bank.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    /**
     * The customer no longer authorizes this transaction. The Nacha return code is R07.
     */
    AUTHORIZATION_REVOKED_BY_CUSTOMER("authorization_revoked_by_customer"),
    
    /**
     * The customer asked for the payment to be stopped. This reason is only allowed for debits. The Nacha return code is R08.
     */
    PAYMENT_STOPPED("payment_stopped"),
    
    /**
     * The customer advises that the debit was unauthorized. The Nacha return code is R10.
     */
    CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE("customer_advised_unauthorized_improper_ineligible_or_incomplete"),
    
    /**
     * The payee is deceased. The Nacha return code is R14.
     */
    REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY("representative_payee_deceased_or_unable_to_continue_in_that_capacity"),
    
    /**
     * The account holder is deceased. The Nacha return code is R15.
     */
    BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED("beneficiary_or_account_holder_deceased"),
    
    /**
     * The customer refused a credit entry. This reason is only allowed for credits. The Nacha return code is R23.
     */
    CREDIT_ENTRY_REFUSED_BY_RECEIVER("credit_entry_refused_by_receiver"),
    
    /**
     * The account holder identified this transaction as a duplicate. The Nacha return code is R24.
     */
    DUPLICATE_ENTRY("duplicate_entry"),
    
    /**
     * The corporate customer no longer authorizes this transaction. The Nacha return code is R29.
     */
    CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED("corporate_customer_advised_not_authorized");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  /**
   * The lifecycle status of the transfer.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The transfer return is pending submission to the Federal Reserve.
     */
    PENDING_SUBMITTING("pending_submitting"),
    
    /**
     * The transfer has been submitted to the Federal Reserve.
     */
    SUBMITTED("submitted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private InboundACHTransferReturnSubmission submission;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;inbound_ach_transfer_return&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INBOUND_ACH_TRANSFER_RETURN("inbound_ach_transfer_return");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public InboundAchTransferReturn() {
  }

  public InboundAchTransferReturn id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the Inbound ACH Transfer Return.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InboundAchTransferReturn inboundAchTransferTransactionId(String inboundAchTransferTransactionId) {
    this.inboundAchTransferTransactionId = inboundAchTransferTransactionId;
    return this;
  }

  /**
   * The ID for the Transaction that is being returned.
   * @return inboundAchTransferTransactionId
   */
  @javax.annotation.Nonnull
  public String getInboundAchTransferTransactionId() {
    return inboundAchTransferTransactionId;
  }

  public void setInboundAchTransferTransactionId(String inboundAchTransferTransactionId) {
    this.inboundAchTransferTransactionId = inboundAchTransferTransactionId;
  }


  public InboundAchTransferReturn reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason why this transfer will be returned. This is sent to the initiating bank.
   * @return reason
   */
  @javax.annotation.Nonnull
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  public InboundAchTransferReturn status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The lifecycle status of the transfer.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public InboundAchTransferReturn submission(InboundACHTransferReturnSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public InboundACHTransferReturnSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(InboundACHTransferReturnSubmission submission) {
    this.submission = submission;
  }


  public InboundAchTransferReturn transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The ID for the transaction refunding the transfer.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public InboundAchTransferReturn type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;inbound_ach_transfer_return&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundAchTransferReturn inboundAchTransferReturn = (InboundAchTransferReturn) o;
    return Objects.equals(this.id, inboundAchTransferReturn.id) &&
        Objects.equals(this.inboundAchTransferTransactionId, inboundAchTransferReturn.inboundAchTransferTransactionId) &&
        Objects.equals(this.reason, inboundAchTransferReturn.reason) &&
        Objects.equals(this.status, inboundAchTransferReturn.status) &&
        Objects.equals(this.submission, inboundAchTransferReturn.submission) &&
        Objects.equals(this.transactionId, inboundAchTransferReturn.transactionId) &&
        Objects.equals(this.type, inboundAchTransferReturn.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inboundAchTransferTransactionId, reason, status, submission, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundAchTransferReturn {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inboundAchTransferTransactionId: ").append(toIndentedString(inboundAchTransferTransactionId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("inbound_ach_transfer_transaction_id");
    openapiFields.add("reason");
    openapiFields.add("status");
    openapiFields.add("submission");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("inbound_ach_transfer_transaction_id");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundAchTransferReturn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundAchTransferReturn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundAchTransferReturn is not found in the empty JSON string", InboundAchTransferReturn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundAchTransferReturn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundAchTransferReturn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundAchTransferReturn.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("inbound_ach_transfer_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbound_ach_transfer_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inbound_ach_transfer_transaction_id").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the required field `reason`
      ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `submission`
      InboundACHTransferReturnSubmission.validateJsonElement(jsonObj.get("submission"));
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundAchTransferReturn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundAchTransferReturn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundAchTransferReturn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundAchTransferReturn.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundAchTransferReturn>() {
           @Override
           public void write(JsonWriter out, InboundAchTransferReturn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundAchTransferReturn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundAchTransferReturn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundAchTransferReturn
   * @throws IOException if the JSON string is invalid with respect to InboundAchTransferReturn
   */
  public static InboundAchTransferReturn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundAchTransferReturn.class);
  }

  /**
   * Convert an instance of InboundAchTransferReturn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

