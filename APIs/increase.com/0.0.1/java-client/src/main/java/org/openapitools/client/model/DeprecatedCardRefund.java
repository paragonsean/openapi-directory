/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;card_route_refund&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeprecatedCardRefund {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_MERCHANT_ACCEPTOR_ID = "merchant_acceptor_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCEPTOR_ID)
  private String merchantAcceptorId;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchant_category_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_CITY = "merchant_city";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CITY)
  private String merchantCity;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY = "merchant_country";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY)
  private String merchantCountry;

  public static final String SERIALIZED_NAME_MERCHANT_DESCRIPTOR = "merchant_descriptor";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DESCRIPTOR)
  private String merchantDescriptor;

  public static final String SERIALIZED_NAME_MERCHANT_STATE = "merchant_state";
  @SerializedName(SERIALIZED_NAME_MERCHANT_STATE)
  private String merchantState;

  public DeprecatedCardRefund() {
  }

  public DeprecatedCardRefund amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public DeprecatedCardRefund currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public DeprecatedCardRefund merchantAcceptorId(String merchantAcceptorId) {
    this.merchantAcceptorId = merchantAcceptorId;
    return this;
  }

  /**
   * 
   * @return merchantAcceptorId
   */
  @javax.annotation.Nonnull
  public String getMerchantAcceptorId() {
    return merchantAcceptorId;
  }

  public void setMerchantAcceptorId(String merchantAcceptorId) {
    this.merchantAcceptorId = merchantAcceptorId;
  }


  public DeprecatedCardRefund merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * 
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public DeprecatedCardRefund merchantCity(String merchantCity) {
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * 
   * @return merchantCity
   */
  @javax.annotation.Nullable
  public String getMerchantCity() {
    return merchantCity;
  }

  public void setMerchantCity(String merchantCity) {
    this.merchantCity = merchantCity;
  }


  public DeprecatedCardRefund merchantCountry(String merchantCountry) {
    this.merchantCountry = merchantCountry;
    return this;
  }

  /**
   * 
   * @return merchantCountry
   */
  @javax.annotation.Nonnull
  public String getMerchantCountry() {
    return merchantCountry;
  }

  public void setMerchantCountry(String merchantCountry) {
    this.merchantCountry = merchantCountry;
  }


  public DeprecatedCardRefund merchantDescriptor(String merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
    return this;
  }

  /**
   * 
   * @return merchantDescriptor
   */
  @javax.annotation.Nonnull
  public String getMerchantDescriptor() {
    return merchantDescriptor;
  }

  public void setMerchantDescriptor(String merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
  }


  public DeprecatedCardRefund merchantState(String merchantState) {
    this.merchantState = merchantState;
    return this;
  }

  /**
   * 
   * @return merchantState
   */
  @javax.annotation.Nullable
  public String getMerchantState() {
    return merchantState;
  }

  public void setMerchantState(String merchantState) {
    this.merchantState = merchantState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeprecatedCardRefund deprecatedCardRefund = (DeprecatedCardRefund) o;
    return Objects.equals(this.amount, deprecatedCardRefund.amount) &&
        Objects.equals(this.currency, deprecatedCardRefund.currency) &&
        Objects.equals(this.merchantAcceptorId, deprecatedCardRefund.merchantAcceptorId) &&
        Objects.equals(this.merchantCategoryCode, deprecatedCardRefund.merchantCategoryCode) &&
        Objects.equals(this.merchantCity, deprecatedCardRefund.merchantCity) &&
        Objects.equals(this.merchantCountry, deprecatedCardRefund.merchantCountry) &&
        Objects.equals(this.merchantDescriptor, deprecatedCardRefund.merchantDescriptor) &&
        Objects.equals(this.merchantState, deprecatedCardRefund.merchantState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, merchantState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeprecatedCardRefund {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    merchantAcceptorId: ").append(toIndentedString(merchantAcceptorId)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountry: ").append(toIndentedString(merchantCountry)).append("\n");
    sb.append("    merchantDescriptor: ").append(toIndentedString(merchantDescriptor)).append("\n");
    sb.append("    merchantState: ").append(toIndentedString(merchantState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("merchant_acceptor_id");
    openapiFields.add("merchant_category_code");
    openapiFields.add("merchant_city");
    openapiFields.add("merchant_country");
    openapiFields.add("merchant_descriptor");
    openapiFields.add("merchant_state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("merchant_acceptor_id");
    openapiRequiredFields.add("merchant_category_code");
    openapiRequiredFields.add("merchant_city");
    openapiRequiredFields.add("merchant_country");
    openapiRequiredFields.add("merchant_descriptor");
    openapiRequiredFields.add("merchant_state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeprecatedCardRefund
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeprecatedCardRefund.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeprecatedCardRefund is not found in the empty JSON string", DeprecatedCardRefund.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeprecatedCardRefund.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeprecatedCardRefund` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeprecatedCardRefund.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("merchant_acceptor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_acceptor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_acceptor_id").toString()));
      }
      if ((jsonObj.get("merchant_category_code") != null && !jsonObj.get("merchant_category_code").isJsonNull()) && !jsonObj.get("merchant_category_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_category_code").toString()));
      }
      if ((jsonObj.get("merchant_city") != null && !jsonObj.get("merchant_city").isJsonNull()) && !jsonObj.get("merchant_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_city").toString()));
      }
      if (!jsonObj.get("merchant_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_country").toString()));
      }
      if (!jsonObj.get("merchant_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_descriptor").toString()));
      }
      if ((jsonObj.get("merchant_state") != null && !jsonObj.get("merchant_state").isJsonNull()) && !jsonObj.get("merchant_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeprecatedCardRefund.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeprecatedCardRefund' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeprecatedCardRefund> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeprecatedCardRefund.class));

       return (TypeAdapter<T>) new TypeAdapter<DeprecatedCardRefund>() {
           @Override
           public void write(JsonWriter out, DeprecatedCardRefund value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeprecatedCardRefund read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeprecatedCardRefund given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeprecatedCardRefund
   * @throws IOException if the JSON string is invalid with respect to DeprecatedCardRefund
   */
  public static DeprecatedCardRefund fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeprecatedCardRefund.class);
  }

  /**
   * Convert an instance of DeprecatedCardRefund to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

