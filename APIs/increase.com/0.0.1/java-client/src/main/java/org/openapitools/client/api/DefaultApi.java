/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountList;
import org.openapitools.client.model.AccountNumber;
import org.openapitools.client.model.AccountNumberList;
import org.openapitools.client.model.AccountStatement;
import org.openapitools.client.model.AccountStatementList;
import org.openapitools.client.model.AccountTransfer;
import org.openapitools.client.model.AccountTransferList;
import org.openapitools.client.model.AchPrenotification;
import org.openapitools.client.model.AchPrenotificationList;
import org.openapitools.client.model.AchTransfer;
import org.openapitools.client.model.AchTransferList;
import org.openapitools.client.model.ActionARealTimeDecisionParameters;
import org.openapitools.client.model.BalanceLookup;
import org.openapitools.client.model.BookkeepingAccount;
import org.openapitools.client.model.BookkeepingAccountList;
import org.openapitools.client.model.BookkeepingEntryList;
import org.openapitools.client.model.BookkeepingEntrySet;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardDetails;
import org.openapitools.client.model.CardDispute;
import org.openapitools.client.model.CardDisputeList;
import org.openapitools.client.model.CardList;
import org.openapitools.client.model.CardProfile;
import org.openapitools.client.model.CardProfileList;
import org.openapitools.client.model.CheckDeposit;
import org.openapitools.client.model.CheckDepositList;
import org.openapitools.client.model.CheckTransfer;
import org.openapitools.client.model.CheckTransferList;
import org.openapitools.client.model.CompleteASandboxRealTimePaymentsTransferParameters;
import org.openapitools.client.model.CreateABookkeepingAccountParameters;
import org.openapitools.client.model.CreateABookkeepingEntrySetParameters;
import org.openapitools.client.model.CreateACardDisputeParameters;
import org.openapitools.client.model.CreateACardParameters;
import org.openapitools.client.model.CreateACardProfileParameters;
import org.openapitools.client.model.CreateACheckDepositParameters;
import org.openapitools.client.model.CreateACheckTransferParameters;
import org.openapitools.client.model.CreateALimitParameters;
import org.openapitools.client.model.CreateARealTimePaymentsTransferParameters;
import org.openapitools.client.model.CreateASupplementalDocumentForAnEntityParameters;
import org.openapitools.client.model.CreateAWireDrawdownRequestParameters;
import org.openapitools.client.model.CreateAWireTransferParameters;
import org.openapitools.client.model.CreateAnAccountNumberParameters;
import org.openapitools.client.model.CreateAnAccountParameters;
import org.openapitools.client.model.CreateAnAccountTransferParameters;
import org.openapitools.client.model.CreateAnAchPrenotificationParameters;
import org.openapitools.client.model.CreateAnAchReturnParameters;
import org.openapitools.client.model.CreateAnAchTransferParameters;
import org.openapitools.client.model.CreateAnEntityParameters;
import org.openapitools.client.model.CreateAnEventSubscriptionParameters;
import org.openapitools.client.model.CreateAnExportParameters;
import org.openapitools.client.model.CreateAnExternalAccountParameters;
import org.openapitools.client.model.DeclinedTransaction;
import org.openapitools.client.model.DeclinedTransactionList;
import org.openapitools.client.model.DigitalWalletToken;
import org.openapitools.client.model.DigitalWalletTokenList;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentList;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.EntityList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventList;
import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.EventSubscriptionList;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.ExportList;
import org.openapitools.client.model.ExternalAccount;
import org.openapitools.client.model.ExternalAccountList;
import java.io.File;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.InboundAchTransferReturn;
import org.openapitools.client.model.InboundAchTransferReturnList;
import org.openapitools.client.model.InboundAchTransferSimulationResult;
import org.openapitools.client.model.InboundCardAuthorizationSimulationResult;
import org.openapitools.client.model.InboundDigitalWalletTokenRequestSimulationResult;
import org.openapitools.client.model.InboundRealTimePaymentsTransferSimulationResult;
import org.openapitools.client.model.InboundWireDrawdownRequest;
import org.openapitools.client.model.InboundWireDrawdownRequestList;
import org.openapitools.client.model.InboundWireTransferSimulationResult;
import org.openapitools.client.model.InterestPaymentSimulationResult;
import org.openapitools.client.model.Limit;
import org.openapitools.client.model.LimitList;
import org.openapitools.client.model.LookUpTheBalanceForAnAccountParameters;
import org.openapitools.client.model.OauthConnection;
import org.openapitools.client.model.OauthConnectionList;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PendingTransaction;
import org.openapitools.client.model.PendingTransactionList;
import org.openapitools.client.model.Program;
import org.openapitools.client.model.ProgramList;
import org.openapitools.client.model.RealTimeDecision;
import org.openapitools.client.model.RealTimePaymentsTransfer;
import org.openapitools.client.model.RealTimePaymentsTransferList;
import org.openapitools.client.model.ReturnASandboxAchTransferParameters;
import org.openapitools.client.model.ReturnASandboxCheckTransferParameters;
import org.openapitools.client.model.RoutingNumberList;
import org.openapitools.client.model.SimulateARealTimePaymentsTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateARefundOnACardParameters;
import org.openapitools.client.model.SimulateATaxDocumentBeingCreatedParameters;
import org.openapitools.client.model.SimulateAWireTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateAnAccountStatementBeingCreatedParameters;
import org.openapitools.client.model.SimulateAnAchTransferToYourAccountParameters;
import org.openapitools.client.model.SimulateAnAuthorizationOnACardParameters;
import org.openapitools.client.model.SimulateAnInboundWireDrawdownRequestBeingCreatedParameters;
import org.openapitools.client.model.SimulateAnInterestPaymentToYourAccountParameters;
import org.openapitools.client.model.SimulateDigitalWalletProvisioningForACardParameters;
import org.openapitools.client.model.SimulateSettlingACardAuthorizationParameters;
import org.openapitools.client.model.SimulatesAdvancingTheStateOfACardDisputeParameters;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionList;
import org.openapitools.client.model.UpdateACardParameters;
import org.openapitools.client.model.UpdateALimitParameters;
import org.openapitools.client.model.UpdateAnAccountNumberParameters;
import org.openapitools.client.model.UpdateAnAccountParameters;
import org.openapitools.client.model.UpdateAnEventSubscriptionParameters;
import org.openapitools.client.model.UpdateAnExternalAccountParameters;
import org.openapitools.client.model.WireDrawdownRequest;
import org.openapitools.client.model.WireDrawdownRequestList;
import org.openapitools.client.model.WireTransfer;
import org.openapitools.client.model.WireTransferList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionARealTimeDecision
     * @param realTimeDecisionId  (required)
     * @param actionARealTimeDecisionParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionARealTimeDecisionCall(String realTimeDecisionId, ActionARealTimeDecisionParameters actionARealTimeDecisionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionARealTimeDecisionParameters;

        // create path and map variables
        String localVarPath = "/real_time_decisions/{real_time_decision_id}/action"
            .replace("{" + "real_time_decision_id" + "}", localVarApiClient.escapeString(realTimeDecisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionARealTimeDecisionValidateBeforeCall(String realTimeDecisionId, ActionARealTimeDecisionParameters actionARealTimeDecisionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realTimeDecisionId' is set
        if (realTimeDecisionId == null) {
            throw new ApiException("Missing the required parameter 'realTimeDecisionId' when calling actionARealTimeDecision(Async)");
        }

        // verify the required parameter 'actionARealTimeDecisionParameters' is set
        if (actionARealTimeDecisionParameters == null) {
            throw new ApiException("Missing the required parameter 'actionARealTimeDecisionParameters' when calling actionARealTimeDecision(Async)");
        }

        return actionARealTimeDecisionCall(realTimeDecisionId, actionARealTimeDecisionParameters, _callback);

    }

    /**
     * Action a Real-Time Decision
     * 
     * @param realTimeDecisionId  (required)
     * @param actionARealTimeDecisionParameters  (required)
     * @return RealTimeDecision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimeDecision actionARealTimeDecision(String realTimeDecisionId, ActionARealTimeDecisionParameters actionARealTimeDecisionParameters) throws ApiException {
        ApiResponse<RealTimeDecision> localVarResp = actionARealTimeDecisionWithHttpInfo(realTimeDecisionId, actionARealTimeDecisionParameters);
        return localVarResp.getData();
    }

    /**
     * Action a Real-Time Decision
     * 
     * @param realTimeDecisionId  (required)
     * @param actionARealTimeDecisionParameters  (required)
     * @return ApiResponse&lt;RealTimeDecision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimeDecision> actionARealTimeDecisionWithHttpInfo(String realTimeDecisionId, ActionARealTimeDecisionParameters actionARealTimeDecisionParameters) throws ApiException {
        okhttp3.Call localVarCall = actionARealTimeDecisionValidateBeforeCall(realTimeDecisionId, actionARealTimeDecisionParameters, null);
        Type localVarReturnType = new TypeToken<RealTimeDecision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action a Real-Time Decision (asynchronously)
     * 
     * @param realTimeDecisionId  (required)
     * @param actionARealTimeDecisionParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionARealTimeDecisionAsync(String realTimeDecisionId, ActionARealTimeDecisionParameters actionARealTimeDecisionParameters, final ApiCallback<RealTimeDecision> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionARealTimeDecisionValidateBeforeCall(realTimeDecisionId, actionARealTimeDecisionParameters, _callback);
        Type localVarReturnType = new TypeToken<RealTimeDecision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approveACheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveACheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_transfers/{check_transfer_id}/approve"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveACheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling approveACheckTransfer(Async)");
        }

        return approveACheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Approve a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer approveACheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = approveACheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Approve a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> approveACheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = approveACheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve a Check Transfer (asynchronously)
     * 
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveACheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveACheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approveAWireTransfer
     * @param wireTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAWireTransferCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_transfers/{wire_transfer_id}/approve"
            .replace("{" + "wire_transfer_id" + "}", localVarApiClient.escapeString(wireTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAWireTransferValidateBeforeCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireTransferId' is set
        if (wireTransferId == null) {
            throw new ApiException("Missing the required parameter 'wireTransferId' when calling approveAWireTransfer(Async)");
        }

        return approveAWireTransferCall(wireTransferId, _callback);

    }

    /**
     * Approve a Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer approveAWireTransfer(String wireTransferId) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = approveAWireTransferWithHttpInfo(wireTransferId);
        return localVarResp.getData();
    }

    /**
     * Approve a Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> approveAWireTransferWithHttpInfo(String wireTransferId) throws ApiException {
        okhttp3.Call localVarCall = approveAWireTransferValidateBeforeCall(wireTransferId, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve a Wire Transfer (asynchronously)
     * 
     * @param wireTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAWireTransferAsync(String wireTransferId, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAWireTransferValidateBeforeCall(wireTransferId, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approveAnAccountTransfer
     * @param accountTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAnAccountTransferCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_transfers/{account_transfer_id}/approve"
            .replace("{" + "account_transfer_id" + "}", localVarApiClient.escapeString(accountTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAnAccountTransferValidateBeforeCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountTransferId' is set
        if (accountTransferId == null) {
            throw new ApiException("Missing the required parameter 'accountTransferId' when calling approveAnAccountTransfer(Async)");
        }

        return approveAnAccountTransferCall(accountTransferId, _callback);

    }

    /**
     * Approve an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return AccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransfer approveAnAccountTransfer(String accountTransferId) throws ApiException {
        ApiResponse<AccountTransfer> localVarResp = approveAnAccountTransferWithHttpInfo(accountTransferId);
        return localVarResp.getData();
    }

    /**
     * Approve an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return ApiResponse&lt;AccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransfer> approveAnAccountTransferWithHttpInfo(String accountTransferId) throws ApiException {
        okhttp3.Call localVarCall = approveAnAccountTransferValidateBeforeCall(accountTransferId, null);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve an Account Transfer (asynchronously)
     * 
     * @param accountTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAnAccountTransferAsync(String accountTransferId, final ApiCallback<AccountTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAnAccountTransferValidateBeforeCall(accountTransferId, _callback);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for approveAnAchTransfer
     * @param achTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAnAchTransferCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_transfers/{ach_transfer_id}/approve"
            .replace("{" + "ach_transfer_id" + "}", localVarApiClient.escapeString(achTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAnAchTransferValidateBeforeCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achTransferId' is set
        if (achTransferId == null) {
            throw new ApiException("Missing the required parameter 'achTransferId' when calling approveAnAchTransfer(Async)");
        }

        return approveAnAchTransferCall(achTransferId, _callback);

    }

    /**
     * Approve an ACH Transfer
     * Approves an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer approveAnAchTransfer(String achTransferId) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = approveAnAchTransferWithHttpInfo(achTransferId);
        return localVarResp.getData();
    }

    /**
     * Approve an ACH Transfer
     * Approves an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> approveAnAchTransferWithHttpInfo(String achTransferId) throws ApiException {
        okhttp3.Call localVarCall = approveAnAchTransferValidateBeforeCall(achTransferId, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve an ACH Transfer (asynchronously)
     * Approves an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAnAchTransferAsync(String achTransferId, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAnAchTransferValidateBeforeCall(achTransferId, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelAPendingAchTransfer
     * @param achTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingAchTransferCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_transfers/{ach_transfer_id}/cancel"
            .replace("{" + "ach_transfer_id" + "}", localVarApiClient.escapeString(achTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAPendingAchTransferValidateBeforeCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achTransferId' is set
        if (achTransferId == null) {
            throw new ApiException("Missing the required parameter 'achTransferId' when calling cancelAPendingAchTransfer(Async)");
        }

        return cancelAPendingAchTransferCall(achTransferId, _callback);

    }

    /**
     * Cancel a pending ACH Transfer
     * Cancels an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer cancelAPendingAchTransfer(String achTransferId) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = cancelAPendingAchTransferWithHttpInfo(achTransferId);
        return localVarResp.getData();
    }

    /**
     * Cancel a pending ACH Transfer
     * Cancels an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> cancelAPendingAchTransferWithHttpInfo(String achTransferId) throws ApiException {
        okhttp3.Call localVarCall = cancelAPendingAchTransferValidateBeforeCall(achTransferId, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a pending ACH Transfer (asynchronously)
     * Cancels an ACH Transfer in a pending_approval state.
     * @param achTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingAchTransferAsync(String achTransferId, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAPendingAchTransferValidateBeforeCall(achTransferId, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelAPendingCheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingCheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_transfers/{check_transfer_id}/cancel"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAPendingCheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling cancelAPendingCheckTransfer(Async)");
        }

        return cancelAPendingCheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Cancel a pending Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer cancelAPendingCheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = cancelAPendingCheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Cancel a pending Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> cancelAPendingCheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = cancelAPendingCheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a pending Check Transfer (asynchronously)
     * 
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingCheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAPendingCheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelAPendingWireTransfer
     * @param wireTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingWireTransferCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_transfers/{wire_transfer_id}/cancel"
            .replace("{" + "wire_transfer_id" + "}", localVarApiClient.escapeString(wireTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAPendingWireTransferValidateBeforeCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireTransferId' is set
        if (wireTransferId == null) {
            throw new ApiException("Missing the required parameter 'wireTransferId' when calling cancelAPendingWireTransfer(Async)");
        }

        return cancelAPendingWireTransferCall(wireTransferId, _callback);

    }

    /**
     * Cancel a pending Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer cancelAPendingWireTransfer(String wireTransferId) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = cancelAPendingWireTransferWithHttpInfo(wireTransferId);
        return localVarResp.getData();
    }

    /**
     * Cancel a pending Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> cancelAPendingWireTransferWithHttpInfo(String wireTransferId) throws ApiException {
        okhttp3.Call localVarCall = cancelAPendingWireTransferValidateBeforeCall(wireTransferId, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a pending Wire Transfer (asynchronously)
     * 
     * @param wireTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAPendingWireTransferAsync(String wireTransferId, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAPendingWireTransferValidateBeforeCall(wireTransferId, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelAnAccountTransfer
     * @param accountTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAnAccountTransferCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_transfers/{account_transfer_id}/cancel"
            .replace("{" + "account_transfer_id" + "}", localVarApiClient.escapeString(accountTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAnAccountTransferValidateBeforeCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountTransferId' is set
        if (accountTransferId == null) {
            throw new ApiException("Missing the required parameter 'accountTransferId' when calling cancelAnAccountTransfer(Async)");
        }

        return cancelAnAccountTransferCall(accountTransferId, _callback);

    }

    /**
     * Cancel an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return AccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransfer cancelAnAccountTransfer(String accountTransferId) throws ApiException {
        ApiResponse<AccountTransfer> localVarResp = cancelAnAccountTransferWithHttpInfo(accountTransferId);
        return localVarResp.getData();
    }

    /**
     * Cancel an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return ApiResponse&lt;AccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransfer> cancelAnAccountTransferWithHttpInfo(String accountTransferId) throws ApiException {
        okhttp3.Call localVarCall = cancelAnAccountTransferValidateBeforeCall(accountTransferId, null);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel an Account Transfer (asynchronously)
     * 
     * @param accountTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAnAccountTransferAsync(String accountTransferId, final ApiCallback<AccountTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelAnAccountTransferValidateBeforeCall(accountTransferId, _callback);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closeAnAccount
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeAnAccountCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/close"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeAnAccountValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling closeAnAccount(Async)");
        }

        return closeAnAccountCall(accountId, _callback);

    }

    /**
     * Close an Account
     * 
     * @param accountId  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Account closeAnAccount(String accountId) throws ApiException {
        ApiResponse<Account> localVarResp = closeAnAccountWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Close an Account
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> closeAnAccountWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = closeAnAccountValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Close an Account (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeAnAccountAsync(String accountId, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeAnAccountValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeASandboxAccountTransfer
     * @param accountTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeASandboxAccountTransferCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/account_transfers/{account_transfer_id}/complete"
            .replace("{" + "account_transfer_id" + "}", localVarApiClient.escapeString(accountTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeASandboxAccountTransferValidateBeforeCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountTransferId' is set
        if (accountTransferId == null) {
            throw new ApiException("Missing the required parameter 'accountTransferId' when calling completeASandboxAccountTransfer(Async)");
        }

        return completeASandboxAccountTransferCall(accountTransferId, _callback);

    }

    /**
     * Complete a Sandbox Account Transfer
     * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60;.
     * @param accountTransferId  (required)
     * @return AccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransfer completeASandboxAccountTransfer(String accountTransferId) throws ApiException {
        ApiResponse<AccountTransfer> localVarResp = completeASandboxAccountTransferWithHttpInfo(accountTransferId);
        return localVarResp.getData();
    }

    /**
     * Complete a Sandbox Account Transfer
     * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60;.
     * @param accountTransferId  (required)
     * @return ApiResponse&lt;AccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransfer> completeASandboxAccountTransferWithHttpInfo(String accountTransferId) throws ApiException {
        okhttp3.Call localVarCall = completeASandboxAccountTransferValidateBeforeCall(accountTransferId, null);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete a Sandbox Account Transfer (asynchronously)
     * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60;.
     * @param accountTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeASandboxAccountTransferAsync(String accountTransferId, final ApiCallback<AccountTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeASandboxAccountTransferValidateBeforeCall(accountTransferId, _callback);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeASandboxRealTimePaymentsTransfer
     * @param realTimePaymentsTransferId  (required)
     * @param completeASandboxRealTimePaymentsTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeASandboxRealTimePaymentsTransferCall(String realTimePaymentsTransferId, CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeASandboxRealTimePaymentsTransferParameters;

        // create path and map variables
        String localVarPath = "/simulations/real_time_payments_transfers/{real_time_payments_transfer_id}/complete"
            .replace("{" + "real_time_payments_transfer_id" + "}", localVarApiClient.escapeString(realTimePaymentsTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeASandboxRealTimePaymentsTransferValidateBeforeCall(String realTimePaymentsTransferId, CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realTimePaymentsTransferId' is set
        if (realTimePaymentsTransferId == null) {
            throw new ApiException("Missing the required parameter 'realTimePaymentsTransferId' when calling completeASandboxRealTimePaymentsTransfer(Async)");
        }

        // verify the required parameter 'completeASandboxRealTimePaymentsTransferParameters' is set
        if (completeASandboxRealTimePaymentsTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'completeASandboxRealTimePaymentsTransferParameters' when calling completeASandboxRealTimePaymentsTransfer(Async)");
        }

        return completeASandboxRealTimePaymentsTransferCall(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters, _callback);

    }

    /**
     * Complete a Sandbox Real Time Payments Transfer
     * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a &#x60;status&#x60; of &#x60;pending_submission&#x60;.
     * @param realTimePaymentsTransferId  (required)
     * @param completeASandboxRealTimePaymentsTransferParameters  (required)
     * @return RealTimePaymentsTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimePaymentsTransfer completeASandboxRealTimePaymentsTransfer(String realTimePaymentsTransferId, CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters) throws ApiException {
        ApiResponse<RealTimePaymentsTransfer> localVarResp = completeASandboxRealTimePaymentsTransferWithHttpInfo(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Complete a Sandbox Real Time Payments Transfer
     * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a &#x60;status&#x60; of &#x60;pending_submission&#x60;.
     * @param realTimePaymentsTransferId  (required)
     * @param completeASandboxRealTimePaymentsTransferParameters  (required)
     * @return ApiResponse&lt;RealTimePaymentsTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimePaymentsTransfer> completeASandboxRealTimePaymentsTransferWithHttpInfo(String realTimePaymentsTransferId, CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = completeASandboxRealTimePaymentsTransferValidateBeforeCall(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters, null);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete a Sandbox Real Time Payments Transfer (asynchronously)
     * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a &#x60;status&#x60; of &#x60;pending_submission&#x60;.
     * @param realTimePaymentsTransferId  (required)
     * @param completeASandboxRealTimePaymentsTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeASandboxRealTimePaymentsTransferAsync(String realTimePaymentsTransferId, CompleteASandboxRealTimePaymentsTransferParameters completeASandboxRealTimePaymentsTransferParameters, final ApiCallback<RealTimePaymentsTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeASandboxRealTimePaymentsTransferValidateBeforeCall(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createABookkeepingAccount
     * @param createABookkeepingAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createABookkeepingAccountCall(CreateABookkeepingAccountParameters createABookkeepingAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createABookkeepingAccountParameters;

        // create path and map variables
        String localVarPath = "/bookkeeping_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createABookkeepingAccountValidateBeforeCall(CreateABookkeepingAccountParameters createABookkeepingAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createABookkeepingAccountParameters' is set
        if (createABookkeepingAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'createABookkeepingAccountParameters' when calling createABookkeepingAccount(Async)");
        }

        return createABookkeepingAccountCall(createABookkeepingAccountParameters, _callback);

    }

    /**
     * Create a Bookkeeping Account
     * 
     * @param createABookkeepingAccountParameters  (required)
     * @return BookkeepingAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BookkeepingAccount createABookkeepingAccount(CreateABookkeepingAccountParameters createABookkeepingAccountParameters) throws ApiException {
        ApiResponse<BookkeepingAccount> localVarResp = createABookkeepingAccountWithHttpInfo(createABookkeepingAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Bookkeeping Account
     * 
     * @param createABookkeepingAccountParameters  (required)
     * @return ApiResponse&lt;BookkeepingAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookkeepingAccount> createABookkeepingAccountWithHttpInfo(CreateABookkeepingAccountParameters createABookkeepingAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = createABookkeepingAccountValidateBeforeCall(createABookkeepingAccountParameters, null);
        Type localVarReturnType = new TypeToken<BookkeepingAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Bookkeeping Account (asynchronously)
     * 
     * @param createABookkeepingAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createABookkeepingAccountAsync(CreateABookkeepingAccountParameters createABookkeepingAccountParameters, final ApiCallback<BookkeepingAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createABookkeepingAccountValidateBeforeCall(createABookkeepingAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<BookkeepingAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createABookkeepingEntrySet
     * @param createABookkeepingEntrySetParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry Set </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createABookkeepingEntrySetCall(CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createABookkeepingEntrySetParameters;

        // create path and map variables
        String localVarPath = "/bookkeeping_entry_sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createABookkeepingEntrySetValidateBeforeCall(CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createABookkeepingEntrySetParameters' is set
        if (createABookkeepingEntrySetParameters == null) {
            throw new ApiException("Missing the required parameter 'createABookkeepingEntrySetParameters' when calling createABookkeepingEntrySet(Async)");
        }

        return createABookkeepingEntrySetCall(createABookkeepingEntrySetParameters, _callback);

    }

    /**
     * Create a Bookkeeping Entry Set
     * 
     * @param createABookkeepingEntrySetParameters  (required)
     * @return BookkeepingEntrySet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry Set </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BookkeepingEntrySet createABookkeepingEntrySet(CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters) throws ApiException {
        ApiResponse<BookkeepingEntrySet> localVarResp = createABookkeepingEntrySetWithHttpInfo(createABookkeepingEntrySetParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Bookkeeping Entry Set
     * 
     * @param createABookkeepingEntrySetParameters  (required)
     * @return ApiResponse&lt;BookkeepingEntrySet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry Set </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookkeepingEntrySet> createABookkeepingEntrySetWithHttpInfo(CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters) throws ApiException {
        okhttp3.Call localVarCall = createABookkeepingEntrySetValidateBeforeCall(createABookkeepingEntrySetParameters, null);
        Type localVarReturnType = new TypeToken<BookkeepingEntrySet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Bookkeeping Entry Set (asynchronously)
     * 
     * @param createABookkeepingEntrySetParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry Set </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createABookkeepingEntrySetAsync(CreateABookkeepingEntrySetParameters createABookkeepingEntrySetParameters, final ApiCallback<BookkeepingEntrySet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createABookkeepingEntrySetValidateBeforeCall(createABookkeepingEntrySetParameters, _callback);
        Type localVarReturnType = new TypeToken<BookkeepingEntrySet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACard
     * @param createACardParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardCall(CreateACardParameters createACardParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACardParameters;

        // create path and map variables
        String localVarPath = "/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACardValidateBeforeCall(CreateACardParameters createACardParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createACardParameters' is set
        if (createACardParameters == null) {
            throw new ApiException("Missing the required parameter 'createACardParameters' when calling createACard(Async)");
        }

        return createACardCall(createACardParameters, _callback);

    }

    /**
     * Create a Card
     * 
     * @param createACardParameters  (required)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Card createACard(CreateACardParameters createACardParameters) throws ApiException {
        ApiResponse<Card> localVarResp = createACardWithHttpInfo(createACardParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Card
     * 
     * @param createACardParameters  (required)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> createACardWithHttpInfo(CreateACardParameters createACardParameters) throws ApiException {
        okhttp3.Call localVarCall = createACardValidateBeforeCall(createACardParameters, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Card (asynchronously)
     * 
     * @param createACardParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardAsync(CreateACardParameters createACardParameters, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACardValidateBeforeCall(createACardParameters, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACardDispute
     * @param createACardDisputeParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardDisputeCall(CreateACardDisputeParameters createACardDisputeParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACardDisputeParameters;

        // create path and map variables
        String localVarPath = "/card_disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACardDisputeValidateBeforeCall(CreateACardDisputeParameters createACardDisputeParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createACardDisputeParameters' is set
        if (createACardDisputeParameters == null) {
            throw new ApiException("Missing the required parameter 'createACardDisputeParameters' when calling createACardDispute(Async)");
        }

        return createACardDisputeCall(createACardDisputeParameters, _callback);

    }

    /**
     * Create a Card Dispute
     * 
     * @param createACardDisputeParameters  (required)
     * @return CardDispute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardDispute createACardDispute(CreateACardDisputeParameters createACardDisputeParameters) throws ApiException {
        ApiResponse<CardDispute> localVarResp = createACardDisputeWithHttpInfo(createACardDisputeParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Card Dispute
     * 
     * @param createACardDisputeParameters  (required)
     * @return ApiResponse&lt;CardDispute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardDispute> createACardDisputeWithHttpInfo(CreateACardDisputeParameters createACardDisputeParameters) throws ApiException {
        okhttp3.Call localVarCall = createACardDisputeValidateBeforeCall(createACardDisputeParameters, null);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Card Dispute (asynchronously)
     * 
     * @param createACardDisputeParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardDisputeAsync(CreateACardDisputeParameters createACardDisputeParameters, final ApiCallback<CardDispute> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACardDisputeValidateBeforeCall(createACardDisputeParameters, _callback);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACardProfile
     * @param createACardProfileParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardProfileCall(CreateACardProfileParameters createACardProfileParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACardProfileParameters;

        // create path and map variables
        String localVarPath = "/card_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACardProfileValidateBeforeCall(CreateACardProfileParameters createACardProfileParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createACardProfileParameters' is set
        if (createACardProfileParameters == null) {
            throw new ApiException("Missing the required parameter 'createACardProfileParameters' when calling createACardProfile(Async)");
        }

        return createACardProfileCall(createACardProfileParameters, _callback);

    }

    /**
     * Create a Card Profile
     * 
     * @param createACardProfileParameters  (required)
     * @return CardProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardProfile createACardProfile(CreateACardProfileParameters createACardProfileParameters) throws ApiException {
        ApiResponse<CardProfile> localVarResp = createACardProfileWithHttpInfo(createACardProfileParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Card Profile
     * 
     * @param createACardProfileParameters  (required)
     * @return ApiResponse&lt;CardProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardProfile> createACardProfileWithHttpInfo(CreateACardProfileParameters createACardProfileParameters) throws ApiException {
        okhttp3.Call localVarCall = createACardProfileValidateBeforeCall(createACardProfileParameters, null);
        Type localVarReturnType = new TypeToken<CardProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Card Profile (asynchronously)
     * 
     * @param createACardProfileParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACardProfileAsync(CreateACardProfileParameters createACardProfileParameters, final ApiCallback<CardProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACardProfileValidateBeforeCall(createACardProfileParameters, _callback);
        Type localVarReturnType = new TypeToken<CardProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACheckDeposit
     * @param createACheckDepositParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACheckDepositCall(CreateACheckDepositParameters createACheckDepositParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACheckDepositParameters;

        // create path and map variables
        String localVarPath = "/check_deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACheckDepositValidateBeforeCall(CreateACheckDepositParameters createACheckDepositParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createACheckDepositParameters' is set
        if (createACheckDepositParameters == null) {
            throw new ApiException("Missing the required parameter 'createACheckDepositParameters' when calling createACheckDeposit(Async)");
        }

        return createACheckDepositCall(createACheckDepositParameters, _callback);

    }

    /**
     * Create a Check Deposit
     * 
     * @param createACheckDepositParameters  (required)
     * @return CheckDeposit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDeposit createACheckDeposit(CreateACheckDepositParameters createACheckDepositParameters) throws ApiException {
        ApiResponse<CheckDeposit> localVarResp = createACheckDepositWithHttpInfo(createACheckDepositParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Check Deposit
     * 
     * @param createACheckDepositParameters  (required)
     * @return ApiResponse&lt;CheckDeposit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDeposit> createACheckDepositWithHttpInfo(CreateACheckDepositParameters createACheckDepositParameters) throws ApiException {
        okhttp3.Call localVarCall = createACheckDepositValidateBeforeCall(createACheckDepositParameters, null);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Check Deposit (asynchronously)
     * 
     * @param createACheckDepositParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACheckDepositAsync(CreateACheckDepositParameters createACheckDepositParameters, final ApiCallback<CheckDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACheckDepositValidateBeforeCall(createACheckDepositParameters, _callback);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createACheckTransfer
     * @param createACheckTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACheckTransferCall(CreateACheckTransferParameters createACheckTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createACheckTransferParameters;

        // create path and map variables
        String localVarPath = "/check_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createACheckTransferValidateBeforeCall(CreateACheckTransferParameters createACheckTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createACheckTransferParameters' is set
        if (createACheckTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'createACheckTransferParameters' when calling createACheckTransfer(Async)");
        }

        return createACheckTransferCall(createACheckTransferParameters, _callback);

    }

    /**
     * Create a Check Transfer
     * 
     * @param createACheckTransferParameters  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer createACheckTransfer(CreateACheckTransferParameters createACheckTransferParameters) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = createACheckTransferWithHttpInfo(createACheckTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Check Transfer
     * 
     * @param createACheckTransferParameters  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> createACheckTransferWithHttpInfo(CreateACheckTransferParameters createACheckTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = createACheckTransferValidateBeforeCall(createACheckTransferParameters, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Check Transfer (asynchronously)
     * 
     * @param createACheckTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createACheckTransferAsync(CreateACheckTransferParameters createACheckTransferParameters, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createACheckTransferValidateBeforeCall(createACheckTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAFile
     * @param _file The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol. (required)
     * @param purpose What the File will be used for in Increase&#39;s systems. (required)
     * @param description The description you choose to give the File. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAFileCall(File _file, String purpose, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (purpose != null) {
            localVarFormParams.put("purpose", purpose);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAFileValidateBeforeCall(File _file, String purpose, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createAFile(Async)");
        }

        // verify the required parameter 'purpose' is set
        if (purpose == null) {
            throw new ApiException("Missing the required parameter 'purpose' when calling createAFile(Async)");
        }

        return createAFileCall(_file, purpose, description, _callback);

    }

    /**
     * Create a File
     * To upload a file to Increase, you&#39;ll need to send a request of Content-Type &#x60;multipart/form-data&#x60;. The request should contain the file you would like to upload, as well as the parameters for creating a file.
     * @param _file The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol. (required)
     * @param purpose What the File will be used for in Increase&#39;s systems. (required)
     * @param description The description you choose to give the File. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public File createAFile(File _file, String purpose, String description) throws ApiException {
        ApiResponse<File> localVarResp = createAFileWithHttpInfo(_file, purpose, description);
        return localVarResp.getData();
    }

    /**
     * Create a File
     * To upload a file to Increase, you&#39;ll need to send a request of Content-Type &#x60;multipart/form-data&#x60;. The request should contain the file you would like to upload, as well as the parameters for creating a file.
     * @param _file The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol. (required)
     * @param purpose What the File will be used for in Increase&#39;s systems. (required)
     * @param description The description you choose to give the File. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> createAFileWithHttpInfo(File _file, String purpose, String description) throws ApiException {
        okhttp3.Call localVarCall = createAFileValidateBeforeCall(_file, purpose, description, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a File (asynchronously)
     * To upload a file to Increase, you&#39;ll need to send a request of Content-Type &#x60;multipart/form-data&#x60;. The request should contain the file you would like to upload, as well as the parameters for creating a file.
     * @param _file The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol. (required)
     * @param purpose What the File will be used for in Increase&#39;s systems. (required)
     * @param description The description you choose to give the File. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAFileAsync(File _file, String purpose, String description, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAFileValidateBeforeCall(_file, purpose, description, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createALimit
     * @param createALimitParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createALimitCall(CreateALimitParameters createALimitParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createALimitParameters;

        // create path and map variables
        String localVarPath = "/limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createALimitValidateBeforeCall(CreateALimitParameters createALimitParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createALimitParameters' is set
        if (createALimitParameters == null) {
            throw new ApiException("Missing the required parameter 'createALimitParameters' when calling createALimit(Async)");
        }

        return createALimitCall(createALimitParameters, _callback);

    }

    /**
     * Create a Limit
     * 
     * @param createALimitParameters  (required)
     * @return Limit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Limit createALimit(CreateALimitParameters createALimitParameters) throws ApiException {
        ApiResponse<Limit> localVarResp = createALimitWithHttpInfo(createALimitParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Limit
     * 
     * @param createALimitParameters  (required)
     * @return ApiResponse&lt;Limit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Limit> createALimitWithHttpInfo(CreateALimitParameters createALimitParameters) throws ApiException {
        okhttp3.Call localVarCall = createALimitValidateBeforeCall(createALimitParameters, null);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Limit (asynchronously)
     * 
     * @param createALimitParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createALimitAsync(CreateALimitParameters createALimitParameters, final ApiCallback<Limit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createALimitValidateBeforeCall(createALimitParameters, _callback);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createARealTimePaymentsTransfer
     * @param createARealTimePaymentsTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createARealTimePaymentsTransferCall(CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createARealTimePaymentsTransferParameters;

        // create path and map variables
        String localVarPath = "/real_time_payments_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createARealTimePaymentsTransferValidateBeforeCall(CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createARealTimePaymentsTransferParameters' is set
        if (createARealTimePaymentsTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'createARealTimePaymentsTransferParameters' when calling createARealTimePaymentsTransfer(Async)");
        }

        return createARealTimePaymentsTransferCall(createARealTimePaymentsTransferParameters, _callback);

    }

    /**
     * Create a Real Time Payments Transfer
     * 
     * @param createARealTimePaymentsTransferParameters  (required)
     * @return RealTimePaymentsTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimePaymentsTransfer createARealTimePaymentsTransfer(CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters) throws ApiException {
        ApiResponse<RealTimePaymentsTransfer> localVarResp = createARealTimePaymentsTransferWithHttpInfo(createARealTimePaymentsTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Real Time Payments Transfer
     * 
     * @param createARealTimePaymentsTransferParameters  (required)
     * @return ApiResponse&lt;RealTimePaymentsTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimePaymentsTransfer> createARealTimePaymentsTransferWithHttpInfo(CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = createARealTimePaymentsTransferValidateBeforeCall(createARealTimePaymentsTransferParameters, null);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Real Time Payments Transfer (asynchronously)
     * 
     * @param createARealTimePaymentsTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createARealTimePaymentsTransferAsync(CreateARealTimePaymentsTransferParameters createARealTimePaymentsTransferParameters, final ApiCallback<RealTimePaymentsTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createARealTimePaymentsTransferValidateBeforeCall(createARealTimePaymentsTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createASupplementalDocumentForAnEntity
     * @param entityId  (required)
     * @param createASupplementalDocumentForAnEntityParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createASupplementalDocumentForAnEntityCall(String entityId, CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createASupplementalDocumentForAnEntityParameters;

        // create path and map variables
        String localVarPath = "/entities/{entity_id}/supplemental_documents"
            .replace("{" + "entity_id" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createASupplementalDocumentForAnEntityValidateBeforeCall(String entityId, CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling createASupplementalDocumentForAnEntity(Async)");
        }

        // verify the required parameter 'createASupplementalDocumentForAnEntityParameters' is set
        if (createASupplementalDocumentForAnEntityParameters == null) {
            throw new ApiException("Missing the required parameter 'createASupplementalDocumentForAnEntityParameters' when calling createASupplementalDocumentForAnEntity(Async)");
        }

        return createASupplementalDocumentForAnEntityCall(entityId, createASupplementalDocumentForAnEntityParameters, _callback);

    }

    /**
     * Create a supplemental document for an Entity
     * 
     * @param entityId  (required)
     * @param createASupplementalDocumentForAnEntityParameters  (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Entity createASupplementalDocumentForAnEntity(String entityId, CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters) throws ApiException {
        ApiResponse<Entity> localVarResp = createASupplementalDocumentForAnEntityWithHttpInfo(entityId, createASupplementalDocumentForAnEntityParameters);
        return localVarResp.getData();
    }

    /**
     * Create a supplemental document for an Entity
     * 
     * @param entityId  (required)
     * @param createASupplementalDocumentForAnEntityParameters  (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> createASupplementalDocumentForAnEntityWithHttpInfo(String entityId, CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters) throws ApiException {
        okhttp3.Call localVarCall = createASupplementalDocumentForAnEntityValidateBeforeCall(entityId, createASupplementalDocumentForAnEntityParameters, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a supplemental document for an Entity (asynchronously)
     * 
     * @param entityId  (required)
     * @param createASupplementalDocumentForAnEntityParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createASupplementalDocumentForAnEntityAsync(String entityId, CreateASupplementalDocumentForAnEntityParameters createASupplementalDocumentForAnEntityParameters, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createASupplementalDocumentForAnEntityValidateBeforeCall(entityId, createASupplementalDocumentForAnEntityParameters, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAWireDrawdownRequest
     * @param createAWireDrawdownRequestParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWireDrawdownRequestCall(CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAWireDrawdownRequestParameters;

        // create path and map variables
        String localVarPath = "/wire_drawdown_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAWireDrawdownRequestValidateBeforeCall(CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAWireDrawdownRequestParameters' is set
        if (createAWireDrawdownRequestParameters == null) {
            throw new ApiException("Missing the required parameter 'createAWireDrawdownRequestParameters' when calling createAWireDrawdownRequest(Async)");
        }

        return createAWireDrawdownRequestCall(createAWireDrawdownRequestParameters, _callback);

    }

    /**
     * Create a Wire Drawdown Request
     * 
     * @param createAWireDrawdownRequestParameters  (required)
     * @return WireDrawdownRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireDrawdownRequest createAWireDrawdownRequest(CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters) throws ApiException {
        ApiResponse<WireDrawdownRequest> localVarResp = createAWireDrawdownRequestWithHttpInfo(createAWireDrawdownRequestParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Wire Drawdown Request
     * 
     * @param createAWireDrawdownRequestParameters  (required)
     * @return ApiResponse&lt;WireDrawdownRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireDrawdownRequest> createAWireDrawdownRequestWithHttpInfo(CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters) throws ApiException {
        okhttp3.Call localVarCall = createAWireDrawdownRequestValidateBeforeCall(createAWireDrawdownRequestParameters, null);
        Type localVarReturnType = new TypeToken<WireDrawdownRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Wire Drawdown Request (asynchronously)
     * 
     * @param createAWireDrawdownRequestParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWireDrawdownRequestAsync(CreateAWireDrawdownRequestParameters createAWireDrawdownRequestParameters, final ApiCallback<WireDrawdownRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAWireDrawdownRequestValidateBeforeCall(createAWireDrawdownRequestParameters, _callback);
        Type localVarReturnType = new TypeToken<WireDrawdownRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAWireTransfer
     * @param createAWireTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWireTransferCall(CreateAWireTransferParameters createAWireTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAWireTransferParameters;

        // create path and map variables
        String localVarPath = "/wire_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAWireTransferValidateBeforeCall(CreateAWireTransferParameters createAWireTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAWireTransferParameters' is set
        if (createAWireTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'createAWireTransferParameters' when calling createAWireTransfer(Async)");
        }

        return createAWireTransferCall(createAWireTransferParameters, _callback);

    }

    /**
     * Create a Wire Transfer
     * 
     * @param createAWireTransferParameters  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer createAWireTransfer(CreateAWireTransferParameters createAWireTransferParameters) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = createAWireTransferWithHttpInfo(createAWireTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Wire Transfer
     * 
     * @param createAWireTransferParameters  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> createAWireTransferWithHttpInfo(CreateAWireTransferParameters createAWireTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = createAWireTransferValidateBeforeCall(createAWireTransferParameters, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Wire Transfer (asynchronously)
     * 
     * @param createAWireTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWireTransferAsync(CreateAWireTransferParameters createAWireTransferParameters, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAWireTransferValidateBeforeCall(createAWireTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAccount
     * @param createAnAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountCall(CreateAnAccountParameters createAnAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAccountParameters;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAccountValidateBeforeCall(CreateAnAccountParameters createAnAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAccountParameters' is set
        if (createAnAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAccountParameters' when calling createAnAccount(Async)");
        }

        return createAnAccountCall(createAnAccountParameters, _callback);

    }

    /**
     * Create an Account
     * 
     * @param createAnAccountParameters  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Account createAnAccount(CreateAnAccountParameters createAnAccountParameters) throws ApiException {
        ApiResponse<Account> localVarResp = createAnAccountWithHttpInfo(createAnAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Account
     * 
     * @param createAnAccountParameters  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> createAnAccountWithHttpInfo(CreateAnAccountParameters createAnAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAccountValidateBeforeCall(createAnAccountParameters, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Account (asynchronously)
     * 
     * @param createAnAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountAsync(CreateAnAccountParameters createAnAccountParameters, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAccountValidateBeforeCall(createAnAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAccountNumber
     * @param createAnAccountNumberParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountNumberCall(CreateAnAccountNumberParameters createAnAccountNumberParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAccountNumberParameters;

        // create path and map variables
        String localVarPath = "/account_numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAccountNumberValidateBeforeCall(CreateAnAccountNumberParameters createAnAccountNumberParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAccountNumberParameters' is set
        if (createAnAccountNumberParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAccountNumberParameters' when calling createAnAccountNumber(Async)");
        }

        return createAnAccountNumberCall(createAnAccountNumberParameters, _callback);

    }

    /**
     * Create an Account Number
     * 
     * @param createAnAccountNumberParameters  (required)
     * @return AccountNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountNumber createAnAccountNumber(CreateAnAccountNumberParameters createAnAccountNumberParameters) throws ApiException {
        ApiResponse<AccountNumber> localVarResp = createAnAccountNumberWithHttpInfo(createAnAccountNumberParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Account Number
     * 
     * @param createAnAccountNumberParameters  (required)
     * @return ApiResponse&lt;AccountNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountNumber> createAnAccountNumberWithHttpInfo(CreateAnAccountNumberParameters createAnAccountNumberParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAccountNumberValidateBeforeCall(createAnAccountNumberParameters, null);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Account Number (asynchronously)
     * 
     * @param createAnAccountNumberParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountNumberAsync(CreateAnAccountNumberParameters createAnAccountNumberParameters, final ApiCallback<AccountNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAccountNumberValidateBeforeCall(createAnAccountNumberParameters, _callback);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAccountTransfer
     * @param createAnAccountTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountTransferCall(CreateAnAccountTransferParameters createAnAccountTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAccountTransferParameters;

        // create path and map variables
        String localVarPath = "/account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAccountTransferValidateBeforeCall(CreateAnAccountTransferParameters createAnAccountTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAccountTransferParameters' is set
        if (createAnAccountTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAccountTransferParameters' when calling createAnAccountTransfer(Async)");
        }

        return createAnAccountTransferCall(createAnAccountTransferParameters, _callback);

    }

    /**
     * Create an Account Transfer
     * 
     * @param createAnAccountTransferParameters  (required)
     * @return AccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransfer createAnAccountTransfer(CreateAnAccountTransferParameters createAnAccountTransferParameters) throws ApiException {
        ApiResponse<AccountTransfer> localVarResp = createAnAccountTransferWithHttpInfo(createAnAccountTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Account Transfer
     * 
     * @param createAnAccountTransferParameters  (required)
     * @return ApiResponse&lt;AccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransfer> createAnAccountTransferWithHttpInfo(CreateAnAccountTransferParameters createAnAccountTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAccountTransferValidateBeforeCall(createAnAccountTransferParameters, null);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Account Transfer (asynchronously)
     * 
     * @param createAnAccountTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAccountTransferAsync(CreateAnAccountTransferParameters createAnAccountTransferParameters, final ApiCallback<AccountTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAccountTransferValidateBeforeCall(createAnAccountTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAchPrenotification
     * @param createAnAchPrenotificationParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchPrenotificationCall(CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAchPrenotificationParameters;

        // create path and map variables
        String localVarPath = "/ach_prenotifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAchPrenotificationValidateBeforeCall(CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAchPrenotificationParameters' is set
        if (createAnAchPrenotificationParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAchPrenotificationParameters' when calling createAnAchPrenotification(Async)");
        }

        return createAnAchPrenotificationCall(createAnAchPrenotificationParameters, _callback);

    }

    /**
     * Create an ACH Prenotification
     * 
     * @param createAnAchPrenotificationParameters  (required)
     * @return AchPrenotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchPrenotification createAnAchPrenotification(CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters) throws ApiException {
        ApiResponse<AchPrenotification> localVarResp = createAnAchPrenotificationWithHttpInfo(createAnAchPrenotificationParameters);
        return localVarResp.getData();
    }

    /**
     * Create an ACH Prenotification
     * 
     * @param createAnAchPrenotificationParameters  (required)
     * @return ApiResponse&lt;AchPrenotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchPrenotification> createAnAchPrenotificationWithHttpInfo(CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAchPrenotificationValidateBeforeCall(createAnAchPrenotificationParameters, null);
        Type localVarReturnType = new TypeToken<AchPrenotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an ACH Prenotification (asynchronously)
     * 
     * @param createAnAchPrenotificationParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchPrenotificationAsync(CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters, final ApiCallback<AchPrenotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAchPrenotificationValidateBeforeCall(createAnAchPrenotificationParameters, _callback);
        Type localVarReturnType = new TypeToken<AchPrenotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAchReturn
     * @param createAnAchReturnParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchReturnCall(CreateAnAchReturnParameters createAnAchReturnParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAchReturnParameters;

        // create path and map variables
        String localVarPath = "/inbound_ach_transfer_returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAchReturnValidateBeforeCall(CreateAnAchReturnParameters createAnAchReturnParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAchReturnParameters' is set
        if (createAnAchReturnParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAchReturnParameters' when calling createAnAchReturn(Async)");
        }

        return createAnAchReturnCall(createAnAchReturnParameters, _callback);

    }

    /**
     * Create an ACH Return
     * 
     * @param createAnAchReturnParameters  (required)
     * @return InboundAchTransferReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundAchTransferReturn createAnAchReturn(CreateAnAchReturnParameters createAnAchReturnParameters) throws ApiException {
        ApiResponse<InboundAchTransferReturn> localVarResp = createAnAchReturnWithHttpInfo(createAnAchReturnParameters);
        return localVarResp.getData();
    }

    /**
     * Create an ACH Return
     * 
     * @param createAnAchReturnParameters  (required)
     * @return ApiResponse&lt;InboundAchTransferReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundAchTransferReturn> createAnAchReturnWithHttpInfo(CreateAnAchReturnParameters createAnAchReturnParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAchReturnValidateBeforeCall(createAnAchReturnParameters, null);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an ACH Return (asynchronously)
     * 
     * @param createAnAchReturnParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchReturnAsync(CreateAnAchReturnParameters createAnAchReturnParameters, final ApiCallback<InboundAchTransferReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAchReturnValidateBeforeCall(createAnAchReturnParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnAchTransfer
     * @param createAnAchTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchTransferCall(CreateAnAchTransferParameters createAnAchTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnAchTransferParameters;

        // create path and map variables
        String localVarPath = "/ach_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnAchTransferValidateBeforeCall(CreateAnAchTransferParameters createAnAchTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnAchTransferParameters' is set
        if (createAnAchTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnAchTransferParameters' when calling createAnAchTransfer(Async)");
        }

        return createAnAchTransferCall(createAnAchTransferParameters, _callback);

    }

    /**
     * Create an ACH Transfer
     * 
     * @param createAnAchTransferParameters  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer createAnAchTransfer(CreateAnAchTransferParameters createAnAchTransferParameters) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = createAnAchTransferWithHttpInfo(createAnAchTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Create an ACH Transfer
     * 
     * @param createAnAchTransferParameters  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> createAnAchTransferWithHttpInfo(CreateAnAchTransferParameters createAnAchTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnAchTransferValidateBeforeCall(createAnAchTransferParameters, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an ACH Transfer (asynchronously)
     * 
     * @param createAnAchTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnAchTransferAsync(CreateAnAchTransferParameters createAnAchTransferParameters, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnAchTransferValidateBeforeCall(createAnAchTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnEntity
     * @param createAnEntityParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnEntityCall(CreateAnEntityParameters createAnEntityParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnEntityParameters;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnEntityValidateBeforeCall(CreateAnEntityParameters createAnEntityParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnEntityParameters' is set
        if (createAnEntityParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnEntityParameters' when calling createAnEntity(Async)");
        }

        return createAnEntityCall(createAnEntityParameters, _callback);

    }

    /**
     * Create an Entity
     * 
     * @param createAnEntityParameters  (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Entity createAnEntity(CreateAnEntityParameters createAnEntityParameters) throws ApiException {
        ApiResponse<Entity> localVarResp = createAnEntityWithHttpInfo(createAnEntityParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Entity
     * 
     * @param createAnEntityParameters  (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> createAnEntityWithHttpInfo(CreateAnEntityParameters createAnEntityParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnEntityValidateBeforeCall(createAnEntityParameters, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Entity (asynchronously)
     * 
     * @param createAnEntityParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnEntityAsync(CreateAnEntityParameters createAnEntityParameters, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnEntityValidateBeforeCall(createAnEntityParameters, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnEventSubscription
     * @param createAnEventSubscriptionParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnEventSubscriptionCall(CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnEventSubscriptionParameters;

        // create path and map variables
        String localVarPath = "/event_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnEventSubscriptionValidateBeforeCall(CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnEventSubscriptionParameters' is set
        if (createAnEventSubscriptionParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnEventSubscriptionParameters' when calling createAnEventSubscription(Async)");
        }

        return createAnEventSubscriptionCall(createAnEventSubscriptionParameters, _callback);

    }

    /**
     * Create an Event Subscription
     * 
     * @param createAnEventSubscriptionParameters  (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription createAnEventSubscription(CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = createAnEventSubscriptionWithHttpInfo(createAnEventSubscriptionParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Event Subscription
     * 
     * @param createAnEventSubscriptionParameters  (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> createAnEventSubscriptionWithHttpInfo(CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnEventSubscriptionValidateBeforeCall(createAnEventSubscriptionParameters, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Event Subscription (asynchronously)
     * 
     * @param createAnEventSubscriptionParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnEventSubscriptionAsync(CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnEventSubscriptionValidateBeforeCall(createAnEventSubscriptionParameters, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnExport
     * @param createAnExportParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExportCall(CreateAnExportParameters createAnExportParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnExportParameters;

        // create path and map variables
        String localVarPath = "/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnExportValidateBeforeCall(CreateAnExportParameters createAnExportParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnExportParameters' is set
        if (createAnExportParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnExportParameters' when calling createAnExport(Async)");
        }

        return createAnExportCall(createAnExportParameters, _callback);

    }

    /**
     * Create an Export
     * 
     * @param createAnExportParameters  (required)
     * @return Export
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Export createAnExport(CreateAnExportParameters createAnExportParameters) throws ApiException {
        ApiResponse<Export> localVarResp = createAnExportWithHttpInfo(createAnExportParameters);
        return localVarResp.getData();
    }

    /**
     * Create an Export
     * 
     * @param createAnExportParameters  (required)
     * @return ApiResponse&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Export> createAnExportWithHttpInfo(CreateAnExportParameters createAnExportParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnExportValidateBeforeCall(createAnExportParameters, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Export (asynchronously)
     * 
     * @param createAnExportParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExportAsync(CreateAnExportParameters createAnExportParameters, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnExportValidateBeforeCall(createAnExportParameters, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAnExternalAccount
     * @param createAnExternalAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExternalAccountCall(CreateAnExternalAccountParameters createAnExternalAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAnExternalAccountParameters;

        // create path and map variables
        String localVarPath = "/external_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnExternalAccountValidateBeforeCall(CreateAnExternalAccountParameters createAnExternalAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAnExternalAccountParameters' is set
        if (createAnExternalAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'createAnExternalAccountParameters' when calling createAnExternalAccount(Async)");
        }

        return createAnExternalAccountCall(createAnExternalAccountParameters, _callback);

    }

    /**
     * Create an External Account
     * 
     * @param createAnExternalAccountParameters  (required)
     * @return ExternalAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ExternalAccount createAnExternalAccount(CreateAnExternalAccountParameters createAnExternalAccountParameters) throws ApiException {
        ApiResponse<ExternalAccount> localVarResp = createAnExternalAccountWithHttpInfo(createAnExternalAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Create an External Account
     * 
     * @param createAnExternalAccountParameters  (required)
     * @return ApiResponse&lt;ExternalAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalAccount> createAnExternalAccountWithHttpInfo(CreateAnExternalAccountParameters createAnExternalAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = createAnExternalAccountValidateBeforeCall(createAnExternalAccountParameters, null);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an External Account (asynchronously)
     * 
     * @param createAnExternalAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnExternalAccountAsync(CreateAnExternalAccountParameters createAnExternalAccountParameters, final ApiCallback<ExternalAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnExternalAccountValidateBeforeCall(createAnExternalAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositASandboxCheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositASandboxCheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/check_transfers/{check_transfer_id}/deposit"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositASandboxCheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling depositASandboxCheckTransfer(Async)");
        }

        return depositASandboxCheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Deposit a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer depositASandboxCheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = depositASandboxCheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Deposit a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> depositASandboxCheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = depositASandboxCheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deposit a Sandbox Check Transfer (asynchronously)
     * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call depositASandboxCheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositASandboxCheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountNumbers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountNumbersCall(String cursor, Integer limit, String status, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountNumbersValidateBeforeCall(String cursor, Integer limit, String status, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAccountNumbersCall(cursor, limit, status, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Account Numbers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return AccountNumberList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountNumberList listAccountNumbers(String cursor, Integer limit, String status, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<AccountNumberList> localVarResp = listAccountNumbersWithHttpInfo(cursor, limit, status, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Account Numbers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;AccountNumberList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountNumberList> listAccountNumbersWithHttpInfo(String cursor, Integer limit, String status, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAccountNumbersValidateBeforeCall(cursor, limit, status, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AccountNumberList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Account Numbers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param status  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountNumbersAsync(String cursor, Integer limit, String status, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<AccountNumberList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountNumbersValidateBeforeCall(cursor, limit, status, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AccountNumberList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountStatements
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param statementPeriodStartAfter  (optional)
     * @param statementPeriodStartBefore  (optional)
     * @param statementPeriodStartOnOrAfter  (optional)
     * @param statementPeriodStartOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountStatementsCall(String cursor, Integer limit, String accountId, OffsetDateTime statementPeriodStartAfter, OffsetDateTime statementPeriodStartBefore, OffsetDateTime statementPeriodStartOnOrAfter, OffsetDateTime statementPeriodStartOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (statementPeriodStartAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statement_period_start.after", statementPeriodStartAfter));
        }

        if (statementPeriodStartBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statement_period_start.before", statementPeriodStartBefore));
        }

        if (statementPeriodStartOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statement_period_start.on_or_after", statementPeriodStartOnOrAfter));
        }

        if (statementPeriodStartOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statement_period_start.on_or_before", statementPeriodStartOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountStatementsValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime statementPeriodStartAfter, OffsetDateTime statementPeriodStartBefore, OffsetDateTime statementPeriodStartOnOrAfter, OffsetDateTime statementPeriodStartOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAccountStatementsCall(cursor, limit, accountId, statementPeriodStartAfter, statementPeriodStartBefore, statementPeriodStartOnOrAfter, statementPeriodStartOnOrBefore, _callback);

    }

    /**
     * List Account Statements
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param statementPeriodStartAfter  (optional)
     * @param statementPeriodStartBefore  (optional)
     * @param statementPeriodStartOnOrAfter  (optional)
     * @param statementPeriodStartOnOrBefore  (optional)
     * @return AccountStatementList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountStatementList listAccountStatements(String cursor, Integer limit, String accountId, OffsetDateTime statementPeriodStartAfter, OffsetDateTime statementPeriodStartBefore, OffsetDateTime statementPeriodStartOnOrAfter, OffsetDateTime statementPeriodStartOnOrBefore) throws ApiException {
        ApiResponse<AccountStatementList> localVarResp = listAccountStatementsWithHttpInfo(cursor, limit, accountId, statementPeriodStartAfter, statementPeriodStartBefore, statementPeriodStartOnOrAfter, statementPeriodStartOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Account Statements
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param statementPeriodStartAfter  (optional)
     * @param statementPeriodStartBefore  (optional)
     * @param statementPeriodStartOnOrAfter  (optional)
     * @param statementPeriodStartOnOrBefore  (optional)
     * @return ApiResponse&lt;AccountStatementList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStatementList> listAccountStatementsWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime statementPeriodStartAfter, OffsetDateTime statementPeriodStartBefore, OffsetDateTime statementPeriodStartOnOrAfter, OffsetDateTime statementPeriodStartOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAccountStatementsValidateBeforeCall(cursor, limit, accountId, statementPeriodStartAfter, statementPeriodStartBefore, statementPeriodStartOnOrAfter, statementPeriodStartOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AccountStatementList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Account Statements (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param statementPeriodStartAfter  (optional)
     * @param statementPeriodStartBefore  (optional)
     * @param statementPeriodStartOnOrAfter  (optional)
     * @param statementPeriodStartOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountStatementsAsync(String cursor, Integer limit, String accountId, OffsetDateTime statementPeriodStartAfter, OffsetDateTime statementPeriodStartBefore, OffsetDateTime statementPeriodStartOnOrAfter, OffsetDateTime statementPeriodStartOnOrBefore, final ApiCallback<AccountStatementList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountStatementsValidateBeforeCall(cursor, limit, accountId, statementPeriodStartAfter, statementPeriodStartBefore, statementPeriodStartOnOrAfter, statementPeriodStartOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AccountStatementList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountTransfers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountTransfersCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountTransfersValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAccountTransfersCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Account Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return AccountTransferList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransferList listAccountTransfers(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<AccountTransferList> localVarResp = listAccountTransfersWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Account Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;AccountTransferList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransferList> listAccountTransfersWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAccountTransfersValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AccountTransferList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Account Transfers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountTransfersAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<AccountTransferList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountTransfersValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AccountTransferList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccounts
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param status  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(String cursor, Integer limit, String entityId, String status, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(String cursor, Integer limit, String entityId, String status, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAccountsCall(cursor, limit, entityId, status, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param status  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return AccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountList listAccounts(String cursor, Integer limit, String entityId, String status, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<AccountList> localVarResp = listAccountsWithHttpInfo(cursor, limit, entityId, status, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param status  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;AccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountList> listAccountsWithHttpInfo(String cursor, Integer limit, String entityId, String status, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(cursor, limit, entityId, status, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Accounts (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param status  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(String cursor, Integer limit, String entityId, String status, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<AccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(cursor, limit, entityId, status, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAchPrenotifications
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAchPrenotificationsCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_prenotifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAchPrenotificationsValidateBeforeCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAchPrenotificationsCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List ACH Prenotifications
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return AchPrenotificationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchPrenotificationList listAchPrenotifications(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<AchPrenotificationList> localVarResp = listAchPrenotificationsWithHttpInfo(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List ACH Prenotifications
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;AchPrenotificationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchPrenotificationList> listAchPrenotificationsWithHttpInfo(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAchPrenotificationsValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AchPrenotificationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ACH Prenotifications (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAchPrenotificationsAsync(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<AchPrenotificationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAchPrenotificationsValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AchPrenotificationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAchTransfers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAchTransfersCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_account_id", externalAccountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAchTransfersValidateBeforeCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listAchTransfersCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List ACH Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return AchTransferList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransferList listAchTransfers(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<AchTransferList> localVarResp = listAchTransfersWithHttpInfo(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List ACH Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;AchTransferList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransferList> listAchTransfersWithHttpInfo(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listAchTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<AchTransferList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ACH Transfers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAchTransfersAsync(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<AchTransferList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAchTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<AchTransferList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBookkeepingAccounts
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookkeepingAccountsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookkeeping_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBookkeepingAccountsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listBookkeepingAccountsCall(cursor, limit, _callback);

    }

    /**
     * List Bookkeeping Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return BookkeepingAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BookkeepingAccountList listBookkeepingAccounts(String cursor, Integer limit) throws ApiException {
        ApiResponse<BookkeepingAccountList> localVarResp = listBookkeepingAccountsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Bookkeeping Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;BookkeepingAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookkeepingAccountList> listBookkeepingAccountsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listBookkeepingAccountsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<BookkeepingAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bookkeeping Accounts (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookkeepingAccountsAsync(String cursor, Integer limit, final ApiCallback<BookkeepingAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBookkeepingAccountsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<BookkeepingAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBookkeepingEntries
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookkeepingEntriesCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookkeeping_entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBookkeepingEntriesValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listBookkeepingEntriesCall(cursor, limit, _callback);

    }

    /**
     * List Bookkeeping Entries
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return BookkeepingEntryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BookkeepingEntryList listBookkeepingEntries(String cursor, Integer limit) throws ApiException {
        ApiResponse<BookkeepingEntryList> localVarResp = listBookkeepingEntriesWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Bookkeeping Entries
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;BookkeepingEntryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookkeepingEntryList> listBookkeepingEntriesWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listBookkeepingEntriesValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<BookkeepingEntryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bookkeeping Entries (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bookkeeping Entry List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookkeepingEntriesAsync(String cursor, Integer limit, final ApiCallback<BookkeepingEntryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBookkeepingEntriesValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<BookkeepingEntryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCardDisputes
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param statusIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardDisputesCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card_disputes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        if (statusIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status.in", statusIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardDisputesValidateBeforeCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        return listCardDisputesCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, statusIn, _callback);

    }

    /**
     * List Card Disputes
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param statusIn  (optional)
     * @return CardDisputeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardDisputeList listCardDisputes(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> statusIn) throws ApiException {
        ApiResponse<CardDisputeList> localVarResp = listCardDisputesWithHttpInfo(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, statusIn);
        return localVarResp.getData();
    }

    /**
     * List Card Disputes
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param statusIn  (optional)
     * @return ApiResponse&lt;CardDisputeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardDisputeList> listCardDisputesWithHttpInfo(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> statusIn) throws ApiException {
        okhttp3.Call localVarCall = listCardDisputesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, statusIn, null);
        Type localVarReturnType = new TypeToken<CardDisputeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Card Disputes (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param statusIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardDisputesAsync(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> statusIn, final ApiCallback<CardDisputeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardDisputesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, statusIn, _callback);
        Type localVarReturnType = new TypeToken<CardDisputeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCardProfiles
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardProfilesCall(String cursor, Integer limit, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card_profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (statusIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status.in", statusIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardProfilesValidateBeforeCall(String cursor, Integer limit, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        return listCardProfilesCall(cursor, limit, statusIn, _callback);

    }

    /**
     * List Card Profiles
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @return CardProfileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardProfileList listCardProfiles(String cursor, Integer limit, List<String> statusIn) throws ApiException {
        ApiResponse<CardProfileList> localVarResp = listCardProfilesWithHttpInfo(cursor, limit, statusIn);
        return localVarResp.getData();
    }

    /**
     * List Card Profiles
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @return ApiResponse&lt;CardProfileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardProfileList> listCardProfilesWithHttpInfo(String cursor, Integer limit, List<String> statusIn) throws ApiException {
        okhttp3.Call localVarCall = listCardProfilesValidateBeforeCall(cursor, limit, statusIn, null);
        Type localVarReturnType = new TypeToken<CardProfileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Card Profiles (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardProfilesAsync(String cursor, Integer limit, List<String> statusIn, final ApiCallback<CardProfileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardProfilesValidateBeforeCall(cursor, limit, statusIn, _callback);
        Type localVarReturnType = new TypeToken<CardProfileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCards
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardsCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCardsValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listCardsCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Cards
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return CardList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardList listCards(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<CardList> localVarResp = listCardsWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Cards
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;CardList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardList> listCardsWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listCardsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<CardList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Cards (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCardsAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<CardList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCardsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<CardList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCheckDeposits
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckDepositsCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCheckDepositsValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listCheckDepositsCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Check Deposits
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return CheckDepositList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDepositList listCheckDeposits(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<CheckDepositList> localVarResp = listCheckDepositsWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Check Deposits
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;CheckDepositList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDepositList> listCheckDepositsWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listCheckDepositsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<CheckDepositList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Check Deposits (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckDepositsAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<CheckDepositList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCheckDepositsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<CheckDepositList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCheckTransfers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckTransfersCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCheckTransfersValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listCheckTransfersCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Check Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return CheckTransferList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransferList listCheckTransfers(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<CheckTransferList> localVarResp = listCheckTransfersWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Check Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;CheckTransferList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransferList> listCheckTransfersWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listCheckTransfersValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<CheckTransferList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Check Transfers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCheckTransfersAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<CheckTransferList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCheckTransfersValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<CheckTransferList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDeclinedTransactions
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param routeId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeclinedTransactionsCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, String routeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/declined_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        if (routeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route_id", routeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeclinedTransactionsValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, String routeId, final ApiCallback _callback) throws ApiException {
        return listDeclinedTransactionsCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, routeId, _callback);

    }

    /**
     * List Declined Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param routeId  (optional)
     * @return DeclinedTransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeclinedTransactionList listDeclinedTransactions(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, String routeId) throws ApiException {
        ApiResponse<DeclinedTransactionList> localVarResp = listDeclinedTransactionsWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, routeId);
        return localVarResp.getData();
    }

    /**
     * List Declined Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param routeId  (optional)
     * @return ApiResponse&lt;DeclinedTransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeclinedTransactionList> listDeclinedTransactionsWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, String routeId) throws ApiException {
        okhttp3.Call localVarCall = listDeclinedTransactionsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, routeId, null);
        Type localVarReturnType = new TypeToken<DeclinedTransactionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Declined Transactions (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param routeId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDeclinedTransactionsAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, String routeId, final ApiCallback<DeclinedTransactionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDeclinedTransactionsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, routeId, _callback);
        Type localVarReturnType = new TypeToken<DeclinedTransactionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDigitalWalletTokens
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param cardId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDigitalWalletTokensCall(String cursor, Integer limit, String cardId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital_wallet_tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_id", cardId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDigitalWalletTokensValidateBeforeCall(String cursor, Integer limit, String cardId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listDigitalWalletTokensCall(cursor, limit, cardId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Digital Wallet Tokens
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param cardId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return DigitalWalletTokenList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWalletTokenList listDigitalWalletTokens(String cursor, Integer limit, String cardId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<DigitalWalletTokenList> localVarResp = listDigitalWalletTokensWithHttpInfo(cursor, limit, cardId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Digital Wallet Tokens
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param cardId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;DigitalWalletTokenList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWalletTokenList> listDigitalWalletTokensWithHttpInfo(String cursor, Integer limit, String cardId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listDigitalWalletTokensValidateBeforeCall(cursor, limit, cardId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<DigitalWalletTokenList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Digital Wallet Tokens (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param cardId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDigitalWalletTokensAsync(String cursor, Integer limit, String cardId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<DigitalWalletTokenList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDigitalWalletTokensValidateBeforeCall(cursor, limit, cardId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<DigitalWalletTokenList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDocuments
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param categoryIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentsCall(String cursor, Integer limit, String entityId, List<String> categoryIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (categoryIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category.in", categoryIn));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentsValidateBeforeCall(String cursor, Integer limit, String entityId, List<String> categoryIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listDocumentsCall(cursor, limit, entityId, categoryIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Documents
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param categoryIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList listDocuments(String cursor, Integer limit, String entityId, List<String> categoryIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<DocumentList> localVarResp = listDocumentsWithHttpInfo(cursor, limit, entityId, categoryIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Documents
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param categoryIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> listDocumentsWithHttpInfo(String cursor, Integer limit, String entityId, List<String> categoryIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(cursor, limit, entityId, categoryIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Documents (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param entityId  (optional)
     * @param categoryIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentsAsync(String cursor, Integer limit, String entityId, List<String> categoryIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(cursor, limit, entityId, categoryIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEntities
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEntitiesCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntitiesValidateBeforeCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listEntitiesCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Entities
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return EntityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EntityList listEntities(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<EntityList> localVarResp = listEntitiesWithHttpInfo(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Entities
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;EntityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityList> listEntitiesWithHttpInfo(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listEntitiesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<EntityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Entities (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEntitiesAsync(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<EntityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEntitiesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<EntityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEventSubscriptions
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventSubscriptionsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventSubscriptionsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listEventSubscriptionsCall(cursor, limit, _callback);

    }

    /**
     * List Event Subscriptions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return EventSubscriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionList listEventSubscriptions(String cursor, Integer limit) throws ApiException {
        ApiResponse<EventSubscriptionList> localVarResp = listEventSubscriptionsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Event Subscriptions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;EventSubscriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionList> listEventSubscriptionsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listEventSubscriptionsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Event Subscriptions (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventSubscriptionsAsync(String cursor, Integer limit, final ApiCallback<EventSubscriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventSubscriptionsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEvents
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param associatedObjectId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventsCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String associatedObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        if (categoryIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category.in", categoryIn));
        }

        if (associatedObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associated_object_id", associatedObjectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventsValidateBeforeCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String associatedObjectId, final ApiCallback _callback) throws ApiException {
        return listEventsCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, associatedObjectId, _callback);

    }

    /**
     * List Events
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param associatedObjectId  (optional)
     * @return EventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EventList listEvents(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String associatedObjectId) throws ApiException {
        ApiResponse<EventList> localVarResp = listEventsWithHttpInfo(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, associatedObjectId);
        return localVarResp.getData();
    }

    /**
     * List Events
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param associatedObjectId  (optional)
     * @return ApiResponse&lt;EventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventList> listEventsWithHttpInfo(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String associatedObjectId) throws ApiException {
        okhttp3.Call localVarCall = listEventsValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, associatedObjectId, null);
        Type localVarReturnType = new TypeToken<EventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Events (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param associatedObjectId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventsAsync(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String associatedObjectId, final ApiCallback<EventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventsValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, associatedObjectId, _callback);
        Type localVarReturnType = new TypeToken<EventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listExports
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExportsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExportsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listExportsCall(cursor, limit, _callback);

    }

    /**
     * List Exports
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ExportList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ExportList listExports(String cursor, Integer limit) throws ApiException {
        ApiResponse<ExportList> localVarResp = listExportsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Exports
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;ExportList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportList> listExportsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listExportsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<ExportList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Exports (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExportsAsync(String cursor, Integer limit, final ApiCallback<ExportList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExportsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ExportList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listExternalAccounts
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExternalAccountsCall(String cursor, Integer limit, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (statusIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status.in", statusIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExternalAccountsValidateBeforeCall(String cursor, Integer limit, List<String> statusIn, final ApiCallback _callback) throws ApiException {
        return listExternalAccountsCall(cursor, limit, statusIn, _callback);

    }

    /**
     * List External Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @return ExternalAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ExternalAccountList listExternalAccounts(String cursor, Integer limit, List<String> statusIn) throws ApiException {
        ApiResponse<ExternalAccountList> localVarResp = listExternalAccountsWithHttpInfo(cursor, limit, statusIn);
        return localVarResp.getData();
    }

    /**
     * List External Accounts
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @return ApiResponse&lt;ExternalAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalAccountList> listExternalAccountsWithHttpInfo(String cursor, Integer limit, List<String> statusIn) throws ApiException {
        okhttp3.Call localVarCall = listExternalAccountsValidateBeforeCall(cursor, limit, statusIn, null);
        Type localVarReturnType = new TypeToken<ExternalAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List External Accounts (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param statusIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExternalAccountsAsync(String cursor, Integer limit, List<String> statusIn, final ApiCallback<ExternalAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExternalAccountsValidateBeforeCall(cursor, limit, statusIn, _callback);
        Type localVarReturnType = new TypeToken<ExternalAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFiles
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param purposeIn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> purposeIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        if (purposeIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purpose.in", purposeIn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesValidateBeforeCall(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> purposeIn, final ApiCallback _callback) throws ApiException {
        return listFilesCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, purposeIn, _callback);

    }

    /**
     * List Files
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param purposeIn  (optional)
     * @return FileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public FileList listFiles(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> purposeIn) throws ApiException {
        ApiResponse<FileList> localVarResp = listFilesWithHttpInfo(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, purposeIn);
        return localVarResp.getData();
    }

    /**
     * List Files
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param purposeIn  (optional)
     * @return ApiResponse&lt;FileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileList> listFilesWithHttpInfo(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> purposeIn) throws ApiException {
        okhttp3.Call localVarCall = listFilesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, purposeIn, null);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param purposeIn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesAsync(String cursor, Integer limit, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> purposeIn, final ApiCallback<FileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesValidateBeforeCall(cursor, limit, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, purposeIn, _callback);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInboundAchTransferReturns
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundAchTransferReturnsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound_ach_transfer_returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboundAchTransferReturnsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listInboundAchTransferReturnsCall(cursor, limit, _callback);

    }

    /**
     * List Inbound ACH Transfer Returns
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return InboundAchTransferReturnList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundAchTransferReturnList listInboundAchTransferReturns(String cursor, Integer limit) throws ApiException {
        ApiResponse<InboundAchTransferReturnList> localVarResp = listInboundAchTransferReturnsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Inbound ACH Transfer Returns
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InboundAchTransferReturnList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundAchTransferReturnList> listInboundAchTransferReturnsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listInboundAchTransferReturnsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturnList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Inbound ACH Transfer Returns (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundAchTransferReturnsAsync(String cursor, Integer limit, final ApiCallback<InboundAchTransferReturnList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboundAchTransferReturnsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturnList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInboundWireDrawdownRequests
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundWireDrawdownRequestsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound_wire_drawdown_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboundWireDrawdownRequestsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listInboundWireDrawdownRequestsCall(cursor, limit, _callback);

    }

    /**
     * List Inbound Wire Drawdown Requests
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return InboundWireDrawdownRequestList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundWireDrawdownRequestList listInboundWireDrawdownRequests(String cursor, Integer limit) throws ApiException {
        ApiResponse<InboundWireDrawdownRequestList> localVarResp = listInboundWireDrawdownRequestsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Inbound Wire Drawdown Requests
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;InboundWireDrawdownRequestList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundWireDrawdownRequestList> listInboundWireDrawdownRequestsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listInboundWireDrawdownRequestsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequestList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Inbound Wire Drawdown Requests (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundWireDrawdownRequestsAsync(String cursor, Integer limit, final ApiCallback<InboundWireDrawdownRequestList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboundWireDrawdownRequestsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequestList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLimits
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param modelId  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLimitsCall(String cursor, Integer limit, String modelId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (modelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_id", modelId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLimitsValidateBeforeCall(String cursor, Integer limit, String modelId, String status, final ApiCallback _callback) throws ApiException {
        return listLimitsCall(cursor, limit, modelId, status, _callback);

    }

    /**
     * List Limits
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param modelId  (optional)
     * @param status  (optional)
     * @return LimitList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public LimitList listLimits(String cursor, Integer limit, String modelId, String status) throws ApiException {
        ApiResponse<LimitList> localVarResp = listLimitsWithHttpInfo(cursor, limit, modelId, status);
        return localVarResp.getData();
    }

    /**
     * List Limits
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param modelId  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;LimitList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LimitList> listLimitsWithHttpInfo(String cursor, Integer limit, String modelId, String status) throws ApiException {
        okhttp3.Call localVarCall = listLimitsValidateBeforeCall(cursor, limit, modelId, status, null);
        Type localVarReturnType = new TypeToken<LimitList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Limits (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param modelId  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listLimitsAsync(String cursor, Integer limit, String modelId, String status, final ApiCallback<LimitList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLimitsValidateBeforeCall(cursor, limit, modelId, status, _callback);
        Type localVarReturnType = new TypeToken<LimitList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOauthConnections
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOauthConnectionsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth_connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOauthConnectionsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listOauthConnectionsCall(cursor, limit, _callback);

    }

    /**
     * List OAuth Connections
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return OauthConnectionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OauthConnectionList listOauthConnections(String cursor, Integer limit) throws ApiException {
        ApiResponse<OauthConnectionList> localVarResp = listOauthConnectionsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List OAuth Connections
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;OauthConnectionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthConnectionList> listOauthConnectionsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOauthConnectionsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<OauthConnectionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List OAuth Connections (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOauthConnectionsAsync(String cursor, Integer limit, final ApiCallback<OauthConnectionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOauthConnectionsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<OauthConnectionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPendingTransactions
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param routeId  (optional)
     * @param sourceId  (optional)
     * @param statusIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPendingTransactionsCall(String cursor, Integer limit, String accountId, String routeId, String sourceId, List<String> statusIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pending_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (routeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route_id", routeId));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_id", sourceId));
        }

        if (statusIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status.in", statusIn));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPendingTransactionsValidateBeforeCall(String cursor, Integer limit, String accountId, String routeId, String sourceId, List<String> statusIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listPendingTransactionsCall(cursor, limit, accountId, routeId, sourceId, statusIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Pending Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param routeId  (optional)
     * @param sourceId  (optional)
     * @param statusIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return PendingTransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PendingTransactionList listPendingTransactions(String cursor, Integer limit, String accountId, String routeId, String sourceId, List<String> statusIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<PendingTransactionList> localVarResp = listPendingTransactionsWithHttpInfo(cursor, limit, accountId, routeId, sourceId, statusIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Pending Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param routeId  (optional)
     * @param sourceId  (optional)
     * @param statusIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;PendingTransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingTransactionList> listPendingTransactionsWithHttpInfo(String cursor, Integer limit, String accountId, String routeId, String sourceId, List<String> statusIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listPendingTransactionsValidateBeforeCall(cursor, limit, accountId, routeId, sourceId, statusIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<PendingTransactionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pending Transactions (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param routeId  (optional)
     * @param sourceId  (optional)
     * @param statusIn  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPendingTransactionsAsync(String cursor, Integer limit, String accountId, String routeId, String sourceId, List<String> statusIn, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<PendingTransactionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPendingTransactionsValidateBeforeCall(cursor, limit, accountId, routeId, sourceId, statusIn, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<PendingTransactionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPrograms
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProgramsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProgramsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listProgramsCall(cursor, limit, _callback);

    }

    /**
     * List Programs
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ProgramList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProgramList listPrograms(String cursor, Integer limit) throws ApiException {
        ApiResponse<ProgramList> localVarResp = listProgramsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Programs
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;ProgramList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgramList> listProgramsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listProgramsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<ProgramList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Programs (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProgramsAsync(String cursor, Integer limit, final ApiCallback<ProgramList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProgramsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ProgramList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRealTimePaymentsTransfers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealTimePaymentsTransfersCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/real_time_payments_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_account_id", externalAccountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRealTimePaymentsTransfersValidateBeforeCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listRealTimePaymentsTransfersCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Real Time Payments Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return RealTimePaymentsTransferList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimePaymentsTransferList listRealTimePaymentsTransfers(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<RealTimePaymentsTransferList> localVarResp = listRealTimePaymentsTransfersWithHttpInfo(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Real Time Payments Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;RealTimePaymentsTransferList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimePaymentsTransferList> listRealTimePaymentsTransfersWithHttpInfo(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listRealTimePaymentsTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransferList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Real Time Payments Transfers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRealTimePaymentsTransfersAsync(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<RealTimePaymentsTransferList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRealTimePaymentsTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransferList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoutingNumbers
     * @param routingNumber  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Routing Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoutingNumbersCall(String routingNumber, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/routing_numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (routingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routing_number", routingNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoutingNumbersValidateBeforeCall(String routingNumber, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routingNumber' is set
        if (routingNumber == null) {
            throw new ApiException("Missing the required parameter 'routingNumber' when calling listRoutingNumbers(Async)");
        }

        return listRoutingNumbersCall(routingNumber, cursor, limit, _callback);

    }

    /**
     * List Routing Numbers
     * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
     * @param routingNumber  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return RoutingNumberList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Routing Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingNumberList listRoutingNumbers(String routingNumber, String cursor, Integer limit) throws ApiException {
        ApiResponse<RoutingNumberList> localVarResp = listRoutingNumbersWithHttpInfo(routingNumber, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Routing Numbers
     * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
     * @param routingNumber  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;RoutingNumberList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Routing Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingNumberList> listRoutingNumbersWithHttpInfo(String routingNumber, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listRoutingNumbersValidateBeforeCall(routingNumber, cursor, limit, null);
        Type localVarReturnType = new TypeToken<RoutingNumberList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Routing Numbers (asynchronously)
     * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
     * @param routingNumber  (required)
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Routing Number List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoutingNumbersAsync(String routingNumber, String cursor, Integer limit, final ApiCallback<RoutingNumberList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoutingNumbersValidateBeforeCall(routingNumber, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<RoutingNumberList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTransactions
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param routeId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String routeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        if (categoryIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category.in", categoryIn));
        }

        if (routeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route_id", routeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String routeId, final ApiCallback _callback) throws ApiException {
        return listTransactionsCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, routeId, _callback);

    }

    /**
     * List Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param routeId  (optional)
     * @return TransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionList listTransactions(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String routeId) throws ApiException {
        ApiResponse<TransactionList> localVarResp = listTransactionsWithHttpInfo(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, routeId);
        return localVarResp.getData();
    }

    /**
     * List Transactions
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param routeId  (optional)
     * @return ApiResponse&lt;TransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionList> listTransactionsWithHttpInfo(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String routeId) throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, routeId, null);
        Type localVarReturnType = new TypeToken<TransactionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Transactions (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param categoryIn  (optional)
     * @param routeId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsAsync(String cursor, Integer limit, String accountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, List<String> categoryIn, String routeId, final ApiCallback<TransactionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(cursor, limit, accountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, categoryIn, routeId, _callback);
        Type localVarReturnType = new TypeToken<TransactionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWireDrawdownRequests
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWireDrawdownRequestsCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_drawdown_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWireDrawdownRequestsValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listWireDrawdownRequestsCall(cursor, limit, _callback);

    }

    /**
     * List Wire Drawdown Requests
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return WireDrawdownRequestList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireDrawdownRequestList listWireDrawdownRequests(String cursor, Integer limit) throws ApiException {
        ApiResponse<WireDrawdownRequestList> localVarResp = listWireDrawdownRequestsWithHttpInfo(cursor, limit);
        return localVarResp.getData();
    }

    /**
     * List Wire Drawdown Requests
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;WireDrawdownRequestList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireDrawdownRequestList> listWireDrawdownRequestsWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listWireDrawdownRequestsValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<WireDrawdownRequestList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Wire Drawdown Requests (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWireDrawdownRequestsAsync(String cursor, Integer limit, final ApiCallback<WireDrawdownRequestList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWireDrawdownRequestsValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<WireDrawdownRequestList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWireTransfers
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWireTransfersCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (externalAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_account_id", externalAccountId));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_after", createdAtOnOrAfter));
        }

        if (createdAtOnOrBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.on_or_before", createdAtOnOrBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWireTransfersValidateBeforeCall(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback _callback) throws ApiException {
        return listWireTransfersCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);

    }

    /**
     * List Wire Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return WireTransferList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransferList listWireTransfers(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        ApiResponse<WireTransferList> localVarResp = listWireTransfersWithHttpInfo(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore);
        return localVarResp.getData();
    }

    /**
     * List Wire Transfers
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @return ApiResponse&lt;WireTransferList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransferList> listWireTransfersWithHttpInfo(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore) throws ApiException {
        okhttp3.Call localVarCall = listWireTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, null);
        Type localVarReturnType = new TypeToken<WireTransferList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Wire Transfers (asynchronously)
     * 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @param accountId  (optional)
     * @param externalAccountId  (optional)
     * @param createdAtAfter  (optional)
     * @param createdAtBefore  (optional)
     * @param createdAtOnOrAfter  (optional)
     * @param createdAtOnOrBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer List </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWireTransfersAsync(String cursor, Integer limit, String accountId, String externalAccountId, OffsetDateTime createdAtAfter, OffsetDateTime createdAtBefore, OffsetDateTime createdAtOnOrAfter, OffsetDateTime createdAtOnOrBefore, final ApiCallback<WireTransferList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWireTransfersValidateBeforeCall(cursor, limit, accountId, externalAccountId, createdAtAfter, createdAtBefore, createdAtOnOrAfter, createdAtOnOrBefore, _callback);
        Type localVarReturnType = new TypeToken<WireTransferList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookUpTheBalanceForAnAccount
     * @param lookUpTheBalanceForAnAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookUpTheBalanceForAnAccountCall(LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookUpTheBalanceForAnAccountParameters;

        // create path and map variables
        String localVarPath = "/balance_lookups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookUpTheBalanceForAnAccountValidateBeforeCall(LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lookUpTheBalanceForAnAccountParameters' is set
        if (lookUpTheBalanceForAnAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'lookUpTheBalanceForAnAccountParameters' when calling lookUpTheBalanceForAnAccount(Async)");
        }

        return lookUpTheBalanceForAnAccountCall(lookUpTheBalanceForAnAccountParameters, _callback);

    }

    /**
     * Look up the balance for an Account
     * 
     * @param lookUpTheBalanceForAnAccountParameters  (required)
     * @return BalanceLookup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BalanceLookup lookUpTheBalanceForAnAccount(LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters) throws ApiException {
        ApiResponse<BalanceLookup> localVarResp = lookUpTheBalanceForAnAccountWithHttpInfo(lookUpTheBalanceForAnAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Look up the balance for an Account
     * 
     * @param lookUpTheBalanceForAnAccountParameters  (required)
     * @return ApiResponse&lt;BalanceLookup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceLookup> lookUpTheBalanceForAnAccountWithHttpInfo(LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = lookUpTheBalanceForAnAccountValidateBeforeCall(lookUpTheBalanceForAnAccountParameters, null);
        Type localVarReturnType = new TypeToken<BalanceLookup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Look up the balance for an Account (asynchronously)
     * 
     * @param lookUpTheBalanceForAnAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance Lookup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookUpTheBalanceForAnAccountAsync(LookUpTheBalanceForAnAccountParameters lookUpTheBalanceForAnAccountParameters, final ApiCallback<BalanceLookup> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookUpTheBalanceForAnAccountValidateBeforeCall(lookUpTheBalanceForAnAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<BalanceLookup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mailASandboxCheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mailASandboxCheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/check_transfers/{check_transfer_id}/mail"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mailASandboxCheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling mailASandboxCheckTransfer(Async)");
        }

        return mailASandboxCheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Mail a Sandbox Check Transfer
     * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;.
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer mailASandboxCheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = mailASandboxCheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Mail a Sandbox Check Transfer
     * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;.
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> mailASandboxCheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = mailASandboxCheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mail a Sandbox Check Transfer (asynchronously)
     * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;.
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mailASandboxCheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = mailASandboxCheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectASandboxCheckDeposit
     * @param checkDepositId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectASandboxCheckDepositCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/check_deposits/{check_deposit_id}/reject"
            .replace("{" + "check_deposit_id" + "}", localVarApiClient.escapeString(checkDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectASandboxCheckDepositValidateBeforeCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkDepositId' is set
        if (checkDepositId == null) {
            throw new ApiException("Missing the required parameter 'checkDepositId' when calling rejectASandboxCheckDeposit(Async)");
        }

        return rejectASandboxCheckDepositCall(checkDepositId, _callback);

    }

    /**
     * Reject a Sandbox Check Deposit
     * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @return CheckDeposit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDeposit rejectASandboxCheckDeposit(String checkDepositId) throws ApiException {
        ApiResponse<CheckDeposit> localVarResp = rejectASandboxCheckDepositWithHttpInfo(checkDepositId);
        return localVarResp.getData();
    }

    /**
     * Reject a Sandbox Check Deposit
     * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @return ApiResponse&lt;CheckDeposit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDeposit> rejectASandboxCheckDepositWithHttpInfo(String checkDepositId) throws ApiException {
        okhttp3.Call localVarCall = rejectASandboxCheckDepositValidateBeforeCall(checkDepositId, null);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject a Sandbox Check Deposit (asynchronously)
     * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectASandboxCheckDepositAsync(String checkDepositId, final ApiCallback<CheckDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectASandboxCheckDepositValidateBeforeCall(checkDepositId, _callback);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestAStopPaymentOnACheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAStopPaymentOnACheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_transfers/{check_transfer_id}/stop_payment"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAStopPaymentOnACheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling requestAStopPaymentOnACheckTransfer(Async)");
        }

        return requestAStopPaymentOnACheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Request a stop payment on a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer requestAStopPaymentOnACheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = requestAStopPaymentOnACheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Request a stop payment on a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> requestAStopPaymentOnACheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = requestAStopPaymentOnACheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a stop payment on a Check Transfer (asynchronously)
     * 
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAStopPaymentOnACheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAStopPaymentOnACheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveACard
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardCall(String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{card_id}"
            .replace("{" + "card_id" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveACardValidateBeforeCall(String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling retrieveACard(Async)");
        }

        return retrieveACardCall(cardId, _callback);

    }

    /**
     * Retrieve a Card
     * 
     * @param cardId  (required)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Card retrieveACard(String cardId) throws ApiException {
        ApiResponse<Card> localVarResp = retrieveACardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Card
     * 
     * @param cardId  (required)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> retrieveACardWithHttpInfo(String cardId) throws ApiException {
        okhttp3.Call localVarCall = retrieveACardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Card (asynchronously)
     * 
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardAsync(String cardId, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveACardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveACardDispute
     * @param cardDisputeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardDisputeCall(String cardDisputeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card_disputes/{card_dispute_id}"
            .replace("{" + "card_dispute_id" + "}", localVarApiClient.escapeString(cardDisputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveACardDisputeValidateBeforeCall(String cardDisputeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardDisputeId' is set
        if (cardDisputeId == null) {
            throw new ApiException("Missing the required parameter 'cardDisputeId' when calling retrieveACardDispute(Async)");
        }

        return retrieveACardDisputeCall(cardDisputeId, _callback);

    }

    /**
     * Retrieve a Card Dispute
     * 
     * @param cardDisputeId  (required)
     * @return CardDispute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardDispute retrieveACardDispute(String cardDisputeId) throws ApiException {
        ApiResponse<CardDispute> localVarResp = retrieveACardDisputeWithHttpInfo(cardDisputeId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Card Dispute
     * 
     * @param cardDisputeId  (required)
     * @return ApiResponse&lt;CardDispute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardDispute> retrieveACardDisputeWithHttpInfo(String cardDisputeId) throws ApiException {
        okhttp3.Call localVarCall = retrieveACardDisputeValidateBeforeCall(cardDisputeId, null);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Card Dispute (asynchronously)
     * 
     * @param cardDisputeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardDisputeAsync(String cardDisputeId, final ApiCallback<CardDispute> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveACardDisputeValidateBeforeCall(cardDisputeId, _callback);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveACardProfile
     * @param cardProfileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardProfileCall(String cardProfileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card_profiles/{card_profile_id}"
            .replace("{" + "card_profile_id" + "}", localVarApiClient.escapeString(cardProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveACardProfileValidateBeforeCall(String cardProfileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardProfileId' is set
        if (cardProfileId == null) {
            throw new ApiException("Missing the required parameter 'cardProfileId' when calling retrieveACardProfile(Async)");
        }

        return retrieveACardProfileCall(cardProfileId, _callback);

    }

    /**
     * Retrieve a Card Profile
     * 
     * @param cardProfileId  (required)
     * @return CardProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardProfile retrieveACardProfile(String cardProfileId) throws ApiException {
        ApiResponse<CardProfile> localVarResp = retrieveACardProfileWithHttpInfo(cardProfileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Card Profile
     * 
     * @param cardProfileId  (required)
     * @return ApiResponse&lt;CardProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardProfile> retrieveACardProfileWithHttpInfo(String cardProfileId) throws ApiException {
        okhttp3.Call localVarCall = retrieveACardProfileValidateBeforeCall(cardProfileId, null);
        Type localVarReturnType = new TypeToken<CardProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Card Profile (asynchronously)
     * 
     * @param cardProfileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Profile </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACardProfileAsync(String cardProfileId, final ApiCallback<CardProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveACardProfileValidateBeforeCall(cardProfileId, _callback);
        Type localVarReturnType = new TypeToken<CardProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveACheckDeposit
     * @param checkDepositId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACheckDepositCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_deposits/{check_deposit_id}"
            .replace("{" + "check_deposit_id" + "}", localVarApiClient.escapeString(checkDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveACheckDepositValidateBeforeCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkDepositId' is set
        if (checkDepositId == null) {
            throw new ApiException("Missing the required parameter 'checkDepositId' when calling retrieveACheckDeposit(Async)");
        }

        return retrieveACheckDepositCall(checkDepositId, _callback);

    }

    /**
     * Retrieve a Check Deposit
     * 
     * @param checkDepositId  (required)
     * @return CheckDeposit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDeposit retrieveACheckDeposit(String checkDepositId) throws ApiException {
        ApiResponse<CheckDeposit> localVarResp = retrieveACheckDepositWithHttpInfo(checkDepositId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Check Deposit
     * 
     * @param checkDepositId  (required)
     * @return ApiResponse&lt;CheckDeposit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDeposit> retrieveACheckDepositWithHttpInfo(String checkDepositId) throws ApiException {
        okhttp3.Call localVarCall = retrieveACheckDepositValidateBeforeCall(checkDepositId, null);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Check Deposit (asynchronously)
     * 
     * @param checkDepositId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACheckDepositAsync(String checkDepositId, final ApiCallback<CheckDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveACheckDepositValidateBeforeCall(checkDepositId, _callback);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveACheckTransfer
     * @param checkTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACheckTransferCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/check_transfers/{check_transfer_id}"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveACheckTransferValidateBeforeCall(String checkTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling retrieveACheckTransfer(Async)");
        }

        return retrieveACheckTransferCall(checkTransferId, _callback);

    }

    /**
     * Retrieve a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer retrieveACheckTransfer(String checkTransferId) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = retrieveACheckTransferWithHttpInfo(checkTransferId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Check Transfer
     * 
     * @param checkTransferId  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> retrieveACheckTransferWithHttpInfo(String checkTransferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveACheckTransferValidateBeforeCall(checkTransferId, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Check Transfer (asynchronously)
     * 
     * @param checkTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveACheckTransferAsync(String checkTransferId, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveACheckTransferValidateBeforeCall(checkTransferId, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveADeclinedTransaction
     * @param declinedTransactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADeclinedTransactionCall(String declinedTransactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/declined_transactions/{declined_transaction_id}"
            .replace("{" + "declined_transaction_id" + "}", localVarApiClient.escapeString(declinedTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveADeclinedTransactionValidateBeforeCall(String declinedTransactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'declinedTransactionId' is set
        if (declinedTransactionId == null) {
            throw new ApiException("Missing the required parameter 'declinedTransactionId' when calling retrieveADeclinedTransaction(Async)");
        }

        return retrieveADeclinedTransactionCall(declinedTransactionId, _callback);

    }

    /**
     * Retrieve a Declined Transaction
     * 
     * @param declinedTransactionId  (required)
     * @return DeclinedTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DeclinedTransaction retrieveADeclinedTransaction(String declinedTransactionId) throws ApiException {
        ApiResponse<DeclinedTransaction> localVarResp = retrieveADeclinedTransactionWithHttpInfo(declinedTransactionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Declined Transaction
     * 
     * @param declinedTransactionId  (required)
     * @return ApiResponse&lt;DeclinedTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeclinedTransaction> retrieveADeclinedTransactionWithHttpInfo(String declinedTransactionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveADeclinedTransactionValidateBeforeCall(declinedTransactionId, null);
        Type localVarReturnType = new TypeToken<DeclinedTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Declined Transaction (asynchronously)
     * 
     * @param declinedTransactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Declined Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADeclinedTransactionAsync(String declinedTransactionId, final ApiCallback<DeclinedTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveADeclinedTransactionValidateBeforeCall(declinedTransactionId, _callback);
        Type localVarReturnType = new TypeToken<DeclinedTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveADigitalWalletToken
     * @param digitalWalletTokenId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADigitalWalletTokenCall(String digitalWalletTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digital_wallet_tokens/{digital_wallet_token_id}"
            .replace("{" + "digital_wallet_token_id" + "}", localVarApiClient.escapeString(digitalWalletTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveADigitalWalletTokenValidateBeforeCall(String digitalWalletTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'digitalWalletTokenId' is set
        if (digitalWalletTokenId == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletTokenId' when calling retrieveADigitalWalletToken(Async)");
        }

        return retrieveADigitalWalletTokenCall(digitalWalletTokenId, _callback);

    }

    /**
     * Retrieve a Digital Wallet Token
     * 
     * @param digitalWalletTokenId  (required)
     * @return DigitalWalletToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DigitalWalletToken retrieveADigitalWalletToken(String digitalWalletTokenId) throws ApiException {
        ApiResponse<DigitalWalletToken> localVarResp = retrieveADigitalWalletTokenWithHttpInfo(digitalWalletTokenId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Digital Wallet Token
     * 
     * @param digitalWalletTokenId  (required)
     * @return ApiResponse&lt;DigitalWalletToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalWalletToken> retrieveADigitalWalletTokenWithHttpInfo(String digitalWalletTokenId) throws ApiException {
        okhttp3.Call localVarCall = retrieveADigitalWalletTokenValidateBeforeCall(digitalWalletTokenId, null);
        Type localVarReturnType = new TypeToken<DigitalWalletToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Digital Wallet Token (asynchronously)
     * 
     * @param digitalWalletTokenId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Digital Wallet Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADigitalWalletTokenAsync(String digitalWalletTokenId, final ApiCallback<DigitalWalletToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveADigitalWalletTokenValidateBeforeCall(digitalWalletTokenId, _callback);
        Type localVarReturnType = new TypeToken<DigitalWalletToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveADocument
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{document_id}"
            .replace("{" + "document_id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveADocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling retrieveADocument(Async)");
        }

        return retrieveADocumentCall(documentId, _callback);

    }

    /**
     * Retrieve a Document
     * 
     * @param documentId  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Document retrieveADocument(String documentId) throws ApiException {
        ApiResponse<Document> localVarResp = retrieveADocumentWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Document
     * 
     * @param documentId  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> retrieveADocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = retrieveADocumentValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Document (asynchronously)
     * 
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveADocumentAsync(String documentId, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveADocumentValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAFile
     * @param fileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{file_id}"
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling retrieveAFile(Async)");
        }

        return retrieveAFileCall(fileId, _callback);

    }

    /**
     * Retrieve a File
     * 
     * @param fileId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public File retrieveAFile(String fileId) throws ApiException {
        ApiResponse<File> localVarResp = retrieveAFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a File
     * 
     * @param fileId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> retrieveAFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a File (asynchronously)
     * 
     * @param fileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAFileAsync(String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveALimit
     * @param limitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveALimitCall(String limitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/limits/{limit_id}"
            .replace("{" + "limit_id" + "}", localVarApiClient.escapeString(limitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveALimitValidateBeforeCall(String limitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'limitId' is set
        if (limitId == null) {
            throw new ApiException("Missing the required parameter 'limitId' when calling retrieveALimit(Async)");
        }

        return retrieveALimitCall(limitId, _callback);

    }

    /**
     * Retrieve a Limit
     * 
     * @param limitId  (required)
     * @return Limit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Limit retrieveALimit(String limitId) throws ApiException {
        ApiResponse<Limit> localVarResp = retrieveALimitWithHttpInfo(limitId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Limit
     * 
     * @param limitId  (required)
     * @return ApiResponse&lt;Limit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Limit> retrieveALimitWithHttpInfo(String limitId) throws ApiException {
        okhttp3.Call localVarCall = retrieveALimitValidateBeforeCall(limitId, null);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Limit (asynchronously)
     * 
     * @param limitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveALimitAsync(String limitId, final ApiCallback<Limit> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveALimitValidateBeforeCall(limitId, _callback);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAPendingTransaction
     * @param pendingTransactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPendingTransactionCall(String pendingTransactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pending_transactions/{pending_transaction_id}"
            .replace("{" + "pending_transaction_id" + "}", localVarApiClient.escapeString(pendingTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAPendingTransactionValidateBeforeCall(String pendingTransactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pendingTransactionId' is set
        if (pendingTransactionId == null) {
            throw new ApiException("Missing the required parameter 'pendingTransactionId' when calling retrieveAPendingTransaction(Async)");
        }

        return retrieveAPendingTransactionCall(pendingTransactionId, _callback);

    }

    /**
     * Retrieve a Pending Transaction
     * 
     * @param pendingTransactionId  (required)
     * @return PendingTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public PendingTransaction retrieveAPendingTransaction(String pendingTransactionId) throws ApiException {
        ApiResponse<PendingTransaction> localVarResp = retrieveAPendingTransactionWithHttpInfo(pendingTransactionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Pending Transaction
     * 
     * @param pendingTransactionId  (required)
     * @return ApiResponse&lt;PendingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingTransaction> retrieveAPendingTransactionWithHttpInfo(String pendingTransactionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAPendingTransactionValidateBeforeCall(pendingTransactionId, null);
        Type localVarReturnType = new TypeToken<PendingTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Pending Transaction (asynchronously)
     * 
     * @param pendingTransactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAPendingTransactionAsync(String pendingTransactionId, final ApiCallback<PendingTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAPendingTransactionValidateBeforeCall(pendingTransactionId, _callback);
        Type localVarReturnType = new TypeToken<PendingTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAProgram
     * @param programId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProgramCall(String programId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{program_id}"
            .replace("{" + "program_id" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAProgramValidateBeforeCall(String programId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling retrieveAProgram(Async)");
        }

        return retrieveAProgramCall(programId, _callback);

    }

    /**
     * Retrieve a Program
     * 
     * @param programId  (required)
     * @return Program
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Program retrieveAProgram(String programId) throws ApiException {
        ApiResponse<Program> localVarResp = retrieveAProgramWithHttpInfo(programId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Program
     * 
     * @param programId  (required)
     * @return ApiResponse&lt;Program&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Program> retrieveAProgramWithHttpInfo(String programId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAProgramValidateBeforeCall(programId, null);
        Type localVarReturnType = new TypeToken<Program>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Program (asynchronously)
     * 
     * @param programId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Program </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAProgramAsync(String programId, final ApiCallback<Program> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAProgramValidateBeforeCall(programId, _callback);
        Type localVarReturnType = new TypeToken<Program>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveARealTimeDecision
     * @param realTimeDecisionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveARealTimeDecisionCall(String realTimeDecisionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/real_time_decisions/{real_time_decision_id}"
            .replace("{" + "real_time_decision_id" + "}", localVarApiClient.escapeString(realTimeDecisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveARealTimeDecisionValidateBeforeCall(String realTimeDecisionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realTimeDecisionId' is set
        if (realTimeDecisionId == null) {
            throw new ApiException("Missing the required parameter 'realTimeDecisionId' when calling retrieveARealTimeDecision(Async)");
        }

        return retrieveARealTimeDecisionCall(realTimeDecisionId, _callback);

    }

    /**
     * Retrieve a Real-Time Decision
     * 
     * @param realTimeDecisionId  (required)
     * @return RealTimeDecision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimeDecision retrieveARealTimeDecision(String realTimeDecisionId) throws ApiException {
        ApiResponse<RealTimeDecision> localVarResp = retrieveARealTimeDecisionWithHttpInfo(realTimeDecisionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Real-Time Decision
     * 
     * @param realTimeDecisionId  (required)
     * @return ApiResponse&lt;RealTimeDecision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimeDecision> retrieveARealTimeDecisionWithHttpInfo(String realTimeDecisionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveARealTimeDecisionValidateBeforeCall(realTimeDecisionId, null);
        Type localVarReturnType = new TypeToken<RealTimeDecision>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Real-Time Decision (asynchronously)
     * 
     * @param realTimeDecisionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real-Time Decision </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveARealTimeDecisionAsync(String realTimeDecisionId, final ApiCallback<RealTimeDecision> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveARealTimeDecisionValidateBeforeCall(realTimeDecisionId, _callback);
        Type localVarReturnType = new TypeToken<RealTimeDecision>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveARealTimePaymentsTransfer
     * @param realTimePaymentsTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveARealTimePaymentsTransferCall(String realTimePaymentsTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/real_time_payments_transfers/{real_time_payments_transfer_id}"
            .replace("{" + "real_time_payments_transfer_id" + "}", localVarApiClient.escapeString(realTimePaymentsTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveARealTimePaymentsTransferValidateBeforeCall(String realTimePaymentsTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'realTimePaymentsTransferId' is set
        if (realTimePaymentsTransferId == null) {
            throw new ApiException("Missing the required parameter 'realTimePaymentsTransferId' when calling retrieveARealTimePaymentsTransfer(Async)");
        }

        return retrieveARealTimePaymentsTransferCall(realTimePaymentsTransferId, _callback);

    }

    /**
     * Retrieve a Real Time Payments Transfer
     * 
     * @param realTimePaymentsTransferId  (required)
     * @return RealTimePaymentsTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public RealTimePaymentsTransfer retrieveARealTimePaymentsTransfer(String realTimePaymentsTransferId) throws ApiException {
        ApiResponse<RealTimePaymentsTransfer> localVarResp = retrieveARealTimePaymentsTransferWithHttpInfo(realTimePaymentsTransferId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Real Time Payments Transfer
     * 
     * @param realTimePaymentsTransferId  (required)
     * @return ApiResponse&lt;RealTimePaymentsTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealTimePaymentsTransfer> retrieveARealTimePaymentsTransferWithHttpInfo(String realTimePaymentsTransferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveARealTimePaymentsTransferValidateBeforeCall(realTimePaymentsTransferId, null);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Real Time Payments Transfer (asynchronously)
     * 
     * @param realTimePaymentsTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Real Time Payments Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveARealTimePaymentsTransferAsync(String realTimePaymentsTransferId, final ApiCallback<RealTimePaymentsTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveARealTimePaymentsTransferValidateBeforeCall(realTimePaymentsTransferId, _callback);
        Type localVarReturnType = new TypeToken<RealTimePaymentsTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveATransaction
     * @param transactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveATransactionCall(String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{transaction_id}"
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveATransactionValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling retrieveATransaction(Async)");
        }

        return retrieveATransactionCall(transactionId, _callback);

    }

    /**
     * Retrieve a Transaction
     * 
     * @param transactionId  (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction retrieveATransaction(String transactionId) throws ApiException {
        ApiResponse<Transaction> localVarResp = retrieveATransactionWithHttpInfo(transactionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Transaction
     * 
     * @param transactionId  (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> retrieveATransactionWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveATransactionValidateBeforeCall(transactionId, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Transaction (asynchronously)
     * 
     * @param transactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveATransactionAsync(String transactionId, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveATransactionValidateBeforeCall(transactionId, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAWireDrawdownRequest
     * @param wireDrawdownRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAWireDrawdownRequestCall(String wireDrawdownRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_drawdown_requests/{wire_drawdown_request_id}"
            .replace("{" + "wire_drawdown_request_id" + "}", localVarApiClient.escapeString(wireDrawdownRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAWireDrawdownRequestValidateBeforeCall(String wireDrawdownRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireDrawdownRequestId' is set
        if (wireDrawdownRequestId == null) {
            throw new ApiException("Missing the required parameter 'wireDrawdownRequestId' when calling retrieveAWireDrawdownRequest(Async)");
        }

        return retrieveAWireDrawdownRequestCall(wireDrawdownRequestId, _callback);

    }

    /**
     * Retrieve a Wire Drawdown Request
     * 
     * @param wireDrawdownRequestId  (required)
     * @return WireDrawdownRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireDrawdownRequest retrieveAWireDrawdownRequest(String wireDrawdownRequestId) throws ApiException {
        ApiResponse<WireDrawdownRequest> localVarResp = retrieveAWireDrawdownRequestWithHttpInfo(wireDrawdownRequestId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Wire Drawdown Request
     * 
     * @param wireDrawdownRequestId  (required)
     * @return ApiResponse&lt;WireDrawdownRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireDrawdownRequest> retrieveAWireDrawdownRequestWithHttpInfo(String wireDrawdownRequestId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAWireDrawdownRequestValidateBeforeCall(wireDrawdownRequestId, null);
        Type localVarReturnType = new TypeToken<WireDrawdownRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Wire Drawdown Request (asynchronously)
     * 
     * @param wireDrawdownRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAWireDrawdownRequestAsync(String wireDrawdownRequestId, final ApiCallback<WireDrawdownRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAWireDrawdownRequestValidateBeforeCall(wireDrawdownRequestId, _callback);
        Type localVarReturnType = new TypeToken<WireDrawdownRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAWireTransfer
     * @param wireTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAWireTransferCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wire_transfers/{wire_transfer_id}"
            .replace("{" + "wire_transfer_id" + "}", localVarApiClient.escapeString(wireTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAWireTransferValidateBeforeCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireTransferId' is set
        if (wireTransferId == null) {
            throw new ApiException("Missing the required parameter 'wireTransferId' when calling retrieveAWireTransfer(Async)");
        }

        return retrieveAWireTransferCall(wireTransferId, _callback);

    }

    /**
     * Retrieve a Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer retrieveAWireTransfer(String wireTransferId) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = retrieveAWireTransferWithHttpInfo(wireTransferId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Wire Transfer
     * 
     * @param wireTransferId  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> retrieveAWireTransferWithHttpInfo(String wireTransferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAWireTransferValidateBeforeCall(wireTransferId, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Wire Transfer (asynchronously)
     * 
     * @param wireTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAWireTransferAsync(String wireTransferId, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAWireTransferValidateBeforeCall(wireTransferId, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAccount
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAccountValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling retrieveAnAccount(Async)");
        }

        return retrieveAnAccountCall(accountId, _callback);

    }

    /**
     * Retrieve an Account
     * 
     * @param accountId  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Account retrieveAnAccount(String accountId) throws ApiException {
        ApiResponse<Account> localVarResp = retrieveAnAccountWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Account
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> retrieveAnAccountWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAccountValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Account (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountAsync(String accountId, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAccountValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAccountNumber
     * @param accountNumberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountNumberCall(String accountNumberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_numbers/{account_number_id}"
            .replace("{" + "account_number_id" + "}", localVarApiClient.escapeString(accountNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAccountNumberValidateBeforeCall(String accountNumberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumberId' is set
        if (accountNumberId == null) {
            throw new ApiException("Missing the required parameter 'accountNumberId' when calling retrieveAnAccountNumber(Async)");
        }

        return retrieveAnAccountNumberCall(accountNumberId, _callback);

    }

    /**
     * Retrieve an Account Number
     * 
     * @param accountNumberId  (required)
     * @return AccountNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountNumber retrieveAnAccountNumber(String accountNumberId) throws ApiException {
        ApiResponse<AccountNumber> localVarResp = retrieveAnAccountNumberWithHttpInfo(accountNumberId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Account Number
     * 
     * @param accountNumberId  (required)
     * @return ApiResponse&lt;AccountNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountNumber> retrieveAnAccountNumberWithHttpInfo(String accountNumberId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAccountNumberValidateBeforeCall(accountNumberId, null);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Account Number (asynchronously)
     * 
     * @param accountNumberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountNumberAsync(String accountNumberId, final ApiCallback<AccountNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAccountNumberValidateBeforeCall(accountNumberId, _callback);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAccountStatement
     * @param accountStatementId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountStatementCall(String accountStatementId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_statements/{account_statement_id}"
            .replace("{" + "account_statement_id" + "}", localVarApiClient.escapeString(accountStatementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAccountStatementValidateBeforeCall(String accountStatementId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountStatementId' is set
        if (accountStatementId == null) {
            throw new ApiException("Missing the required parameter 'accountStatementId' when calling retrieveAnAccountStatement(Async)");
        }

        return retrieveAnAccountStatementCall(accountStatementId, _callback);

    }

    /**
     * Retrieve an Account Statement
     * 
     * @param accountStatementId  (required)
     * @return AccountStatement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountStatement retrieveAnAccountStatement(String accountStatementId) throws ApiException {
        ApiResponse<AccountStatement> localVarResp = retrieveAnAccountStatementWithHttpInfo(accountStatementId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Account Statement
     * 
     * @param accountStatementId  (required)
     * @return ApiResponse&lt;AccountStatement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStatement> retrieveAnAccountStatementWithHttpInfo(String accountStatementId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAccountStatementValidateBeforeCall(accountStatementId, null);
        Type localVarReturnType = new TypeToken<AccountStatement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Account Statement (asynchronously)
     * 
     * @param accountStatementId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountStatementAsync(String accountStatementId, final ApiCallback<AccountStatement> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAccountStatementValidateBeforeCall(accountStatementId, _callback);
        Type localVarReturnType = new TypeToken<AccountStatement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAccountTransfer
     * @param accountTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountTransferCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account_transfers/{account_transfer_id}"
            .replace("{" + "account_transfer_id" + "}", localVarApiClient.escapeString(accountTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAccountTransferValidateBeforeCall(String accountTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountTransferId' is set
        if (accountTransferId == null) {
            throw new ApiException("Missing the required parameter 'accountTransferId' when calling retrieveAnAccountTransfer(Async)");
        }

        return retrieveAnAccountTransferCall(accountTransferId, _callback);

    }

    /**
     * Retrieve an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return AccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransfer retrieveAnAccountTransfer(String accountTransferId) throws ApiException {
        ApiResponse<AccountTransfer> localVarResp = retrieveAnAccountTransferWithHttpInfo(accountTransferId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Account Transfer
     * 
     * @param accountTransferId  (required)
     * @return ApiResponse&lt;AccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransfer> retrieveAnAccountTransferWithHttpInfo(String accountTransferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAccountTransferValidateBeforeCall(accountTransferId, null);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Account Transfer (asynchronously)
     * 
     * @param accountTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAccountTransferAsync(String accountTransferId, final ApiCallback<AccountTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAccountTransferValidateBeforeCall(accountTransferId, _callback);
        Type localVarReturnType = new TypeToken<AccountTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAchPrenotification
     * @param achPrenotificationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAchPrenotificationCall(String achPrenotificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_prenotifications/{ach_prenotification_id}"
            .replace("{" + "ach_prenotification_id" + "}", localVarApiClient.escapeString(achPrenotificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAchPrenotificationValidateBeforeCall(String achPrenotificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achPrenotificationId' is set
        if (achPrenotificationId == null) {
            throw new ApiException("Missing the required parameter 'achPrenotificationId' when calling retrieveAnAchPrenotification(Async)");
        }

        return retrieveAnAchPrenotificationCall(achPrenotificationId, _callback);

    }

    /**
     * Retrieve an ACH Prenotification
     * 
     * @param achPrenotificationId  (required)
     * @return AchPrenotification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchPrenotification retrieveAnAchPrenotification(String achPrenotificationId) throws ApiException {
        ApiResponse<AchPrenotification> localVarResp = retrieveAnAchPrenotificationWithHttpInfo(achPrenotificationId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an ACH Prenotification
     * 
     * @param achPrenotificationId  (required)
     * @return ApiResponse&lt;AchPrenotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchPrenotification> retrieveAnAchPrenotificationWithHttpInfo(String achPrenotificationId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAchPrenotificationValidateBeforeCall(achPrenotificationId, null);
        Type localVarReturnType = new TypeToken<AchPrenotification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an ACH Prenotification (asynchronously)
     * 
     * @param achPrenotificationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Prenotification </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAchPrenotificationAsync(String achPrenotificationId, final ApiCallback<AchPrenotification> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAchPrenotificationValidateBeforeCall(achPrenotificationId, _callback);
        Type localVarReturnType = new TypeToken<AchPrenotification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnAchTransfer
     * @param achTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAchTransferCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ach_transfers/{ach_transfer_id}"
            .replace("{" + "ach_transfer_id" + "}", localVarApiClient.escapeString(achTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnAchTransferValidateBeforeCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achTransferId' is set
        if (achTransferId == null) {
            throw new ApiException("Missing the required parameter 'achTransferId' when calling retrieveAnAchTransfer(Async)");
        }

        return retrieveAnAchTransferCall(achTransferId, _callback);

    }

    /**
     * Retrieve an ACH Transfer
     * 
     * @param achTransferId  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer retrieveAnAchTransfer(String achTransferId) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = retrieveAnAchTransferWithHttpInfo(achTransferId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an ACH Transfer
     * 
     * @param achTransferId  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> retrieveAnAchTransferWithHttpInfo(String achTransferId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnAchTransferValidateBeforeCall(achTransferId, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an ACH Transfer (asynchronously)
     * 
     * @param achTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnAchTransferAsync(String achTransferId, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnAchTransferValidateBeforeCall(achTransferId, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnEntity
     * @param entityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEntityCall(String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entity_id}"
            .replace("{" + "entity_id" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnEntityValidateBeforeCall(String entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling retrieveAnEntity(Async)");
        }

        return retrieveAnEntityCall(entityId, _callback);

    }

    /**
     * Retrieve an Entity
     * 
     * @param entityId  (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Entity retrieveAnEntity(String entityId) throws ApiException {
        ApiResponse<Entity> localVarResp = retrieveAnEntityWithHttpInfo(entityId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Entity
     * 
     * @param entityId  (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> retrieveAnEntityWithHttpInfo(String entityId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnEntityValidateBeforeCall(entityId, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Entity (asynchronously)
     * 
     * @param entityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEntityAsync(String entityId, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnEntityValidateBeforeCall(entityId, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnEvent
     * @param eventId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnEventValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling retrieveAnEvent(Async)");
        }

        return retrieveAnEventCall(eventId, _callback);

    }

    /**
     * Retrieve an Event
     * 
     * @param eventId  (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Event retrieveAnEvent(String eventId) throws ApiException {
        ApiResponse<Event> localVarResp = retrieveAnEventWithHttpInfo(eventId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Event
     * 
     * @param eventId  (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> retrieveAnEventWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnEventValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Event (asynchronously)
     * 
     * @param eventId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventAsync(String eventId, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnEventValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnEventSubscription
     * @param eventSubscriptionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventSubscriptionCall(String eventSubscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_subscriptions/{event_subscription_id}"
            .replace("{" + "event_subscription_id" + "}", localVarApiClient.escapeString(eventSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnEventSubscriptionValidateBeforeCall(String eventSubscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventSubscriptionId' is set
        if (eventSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionId' when calling retrieveAnEventSubscription(Async)");
        }

        return retrieveAnEventSubscriptionCall(eventSubscriptionId, _callback);

    }

    /**
     * Retrieve an Event Subscription
     * 
     * @param eventSubscriptionId  (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription retrieveAnEventSubscription(String eventSubscriptionId) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = retrieveAnEventSubscriptionWithHttpInfo(eventSubscriptionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Event Subscription
     * 
     * @param eventSubscriptionId  (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> retrieveAnEventSubscriptionWithHttpInfo(String eventSubscriptionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnEventSubscriptionValidateBeforeCall(eventSubscriptionId, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Event Subscription (asynchronously)
     * 
     * @param eventSubscriptionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnEventSubscriptionAsync(String eventSubscriptionId, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnEventSubscriptionValidateBeforeCall(eventSubscriptionId, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnExport
     * @param exportId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnExportCall(String exportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exports/{export_id}"
            .replace("{" + "export_id" + "}", localVarApiClient.escapeString(exportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnExportValidateBeforeCall(String exportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportId' is set
        if (exportId == null) {
            throw new ApiException("Missing the required parameter 'exportId' when calling retrieveAnExport(Async)");
        }

        return retrieveAnExportCall(exportId, _callback);

    }

    /**
     * Retrieve an Export
     * 
     * @param exportId  (required)
     * @return Export
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Export retrieveAnExport(String exportId) throws ApiException {
        ApiResponse<Export> localVarResp = retrieveAnExportWithHttpInfo(exportId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Export
     * 
     * @param exportId  (required)
     * @return ApiResponse&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Export> retrieveAnExportWithHttpInfo(String exportId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnExportValidateBeforeCall(exportId, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Export (asynchronously)
     * 
     * @param exportId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnExportAsync(String exportId, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnExportValidateBeforeCall(exportId, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnExternalAccount
     * @param externalAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnExternalAccountCall(String externalAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/external_accounts/{external_account_id}"
            .replace("{" + "external_account_id" + "}", localVarApiClient.escapeString(externalAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnExternalAccountValidateBeforeCall(String externalAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling retrieveAnExternalAccount(Async)");
        }

        return retrieveAnExternalAccountCall(externalAccountId, _callback);

    }

    /**
     * Retrieve an External Account
     * 
     * @param externalAccountId  (required)
     * @return ExternalAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ExternalAccount retrieveAnExternalAccount(String externalAccountId) throws ApiException {
        ApiResponse<ExternalAccount> localVarResp = retrieveAnExternalAccountWithHttpInfo(externalAccountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an External Account
     * 
     * @param externalAccountId  (required)
     * @return ApiResponse&lt;ExternalAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalAccount> retrieveAnExternalAccountWithHttpInfo(String externalAccountId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnExternalAccountValidateBeforeCall(externalAccountId, null);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an External Account (asynchronously)
     * 
     * @param externalAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnExternalAccountAsync(String externalAccountId, final ApiCallback<ExternalAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnExternalAccountValidateBeforeCall(externalAccountId, _callback);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnInboundAchTransferReturn
     * @param inboundAchTransferReturnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnInboundAchTransferReturnCall(String inboundAchTransferReturnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound_ach_transfer_returns/{inbound_ach_transfer_return_id}"
            .replace("{" + "inbound_ach_transfer_return_id" + "}", localVarApiClient.escapeString(inboundAchTransferReturnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnInboundAchTransferReturnValidateBeforeCall(String inboundAchTransferReturnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundAchTransferReturnId' is set
        if (inboundAchTransferReturnId == null) {
            throw new ApiException("Missing the required parameter 'inboundAchTransferReturnId' when calling retrieveAnInboundAchTransferReturn(Async)");
        }

        return retrieveAnInboundAchTransferReturnCall(inboundAchTransferReturnId, _callback);

    }

    /**
     * Retrieve an Inbound ACH Transfer Return
     * 
     * @param inboundAchTransferReturnId  (required)
     * @return InboundAchTransferReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundAchTransferReturn retrieveAnInboundAchTransferReturn(String inboundAchTransferReturnId) throws ApiException {
        ApiResponse<InboundAchTransferReturn> localVarResp = retrieveAnInboundAchTransferReturnWithHttpInfo(inboundAchTransferReturnId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Inbound ACH Transfer Return
     * 
     * @param inboundAchTransferReturnId  (required)
     * @return ApiResponse&lt;InboundAchTransferReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundAchTransferReturn> retrieveAnInboundAchTransferReturnWithHttpInfo(String inboundAchTransferReturnId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnInboundAchTransferReturnValidateBeforeCall(inboundAchTransferReturnId, null);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Inbound ACH Transfer Return (asynchronously)
     * 
     * @param inboundAchTransferReturnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Return </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnInboundAchTransferReturnAsync(String inboundAchTransferReturnId, final ApiCallback<InboundAchTransferReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnInboundAchTransferReturnValidateBeforeCall(inboundAchTransferReturnId, _callback);
        Type localVarReturnType = new TypeToken<InboundAchTransferReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnInboundWireDrawdownRequest
     * @param inboundWireDrawdownRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnInboundWireDrawdownRequestCall(String inboundWireDrawdownRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound_wire_drawdown_requests/{inbound_wire_drawdown_request_id}"
            .replace("{" + "inbound_wire_drawdown_request_id" + "}", localVarApiClient.escapeString(inboundWireDrawdownRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnInboundWireDrawdownRequestValidateBeforeCall(String inboundWireDrawdownRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboundWireDrawdownRequestId' is set
        if (inboundWireDrawdownRequestId == null) {
            throw new ApiException("Missing the required parameter 'inboundWireDrawdownRequestId' when calling retrieveAnInboundWireDrawdownRequest(Async)");
        }

        return retrieveAnInboundWireDrawdownRequestCall(inboundWireDrawdownRequestId, _callback);

    }

    /**
     * Retrieve an Inbound Wire Drawdown Request
     * 
     * @param inboundWireDrawdownRequestId  (required)
     * @return InboundWireDrawdownRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundWireDrawdownRequest retrieveAnInboundWireDrawdownRequest(String inboundWireDrawdownRequestId) throws ApiException {
        ApiResponse<InboundWireDrawdownRequest> localVarResp = retrieveAnInboundWireDrawdownRequestWithHttpInfo(inboundWireDrawdownRequestId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Inbound Wire Drawdown Request
     * 
     * @param inboundWireDrawdownRequestId  (required)
     * @return ApiResponse&lt;InboundWireDrawdownRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundWireDrawdownRequest> retrieveAnInboundWireDrawdownRequestWithHttpInfo(String inboundWireDrawdownRequestId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnInboundWireDrawdownRequestValidateBeforeCall(inboundWireDrawdownRequestId, null);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Inbound Wire Drawdown Request (asynchronously)
     * 
     * @param inboundWireDrawdownRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnInboundWireDrawdownRequestAsync(String inboundWireDrawdownRequestId, final ApiCallback<InboundWireDrawdownRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnInboundWireDrawdownRequestValidateBeforeCall(inboundWireDrawdownRequestId, _callback);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAnOauthConnection
     * @param oauthConnectionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOauthConnectionCall(String oauthConnectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth_connections/{oauth_connection_id}"
            .replace("{" + "oauth_connection_id" + "}", localVarApiClient.escapeString(oauthConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAnOauthConnectionValidateBeforeCall(String oauthConnectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthConnectionId' is set
        if (oauthConnectionId == null) {
            throw new ApiException("Missing the required parameter 'oauthConnectionId' when calling retrieveAnOauthConnection(Async)");
        }

        return retrieveAnOauthConnectionCall(oauthConnectionId, _callback);

    }

    /**
     * Retrieve an OAuth Connection
     * 
     * @param oauthConnectionId  (required)
     * @return OauthConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OauthConnection retrieveAnOauthConnection(String oauthConnectionId) throws ApiException {
        ApiResponse<OauthConnection> localVarResp = retrieveAnOauthConnectionWithHttpInfo(oauthConnectionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an OAuth Connection
     * 
     * @param oauthConnectionId  (required)
     * @return ApiResponse&lt;OauthConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OauthConnection> retrieveAnOauthConnectionWithHttpInfo(String oauthConnectionId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAnOauthConnectionValidateBeforeCall(oauthConnectionId, null);
        Type localVarReturnType = new TypeToken<OauthConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an OAuth Connection (asynchronously)
     * 
     * @param oauthConnectionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth Connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAnOauthConnectionAsync(String oauthConnectionId, final ApiCallback<OauthConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAnOauthConnectionValidateBeforeCall(oauthConnectionId, _callback);
        Type localVarReturnType = new TypeToken<OauthConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveGroupDetails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGroupDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveGroupDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retrieveGroupDetailsCall(_callback);

    }

    /**
     * Retrieve Group details
     * Returns details for the currently authenticated Group.
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Group retrieveGroupDetails() throws ApiException {
        ApiResponse<Group> localVarResp = retrieveGroupDetailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve Group details
     * Returns details for the currently authenticated Group.
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> retrieveGroupDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retrieveGroupDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Group details (asynchronously)
     * Returns details for the currently authenticated Group.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGroupDetailsAsync(final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveGroupDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveSensitiveDetailsForACard
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSensitiveDetailsForACardCall(String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{card_id}/details"
            .replace("{" + "card_id" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveSensitiveDetailsForACardValidateBeforeCall(String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling retrieveSensitiveDetailsForACard(Async)");
        }

        return retrieveSensitiveDetailsForACardCall(cardId, _callback);

    }

    /**
     * Retrieve sensitive details for a Card
     * 
     * @param cardId  (required)
     * @return CardDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardDetails retrieveSensitiveDetailsForACard(String cardId) throws ApiException {
        ApiResponse<CardDetails> localVarResp = retrieveSensitiveDetailsForACardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Retrieve sensitive details for a Card
     * 
     * @param cardId  (required)
     * @return ApiResponse&lt;CardDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardDetails> retrieveSensitiveDetailsForACardWithHttpInfo(String cardId) throws ApiException {
        okhttp3.Call localVarCall = retrieveSensitiveDetailsForACardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CardDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve sensitive details for a Card (asynchronously)
     * 
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSensitiveDetailsForACardAsync(String cardId, final ApiCallback<CardDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveSensitiveDetailsForACardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CardDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnASandboxAchTransfer
     * @param achTransferId  (required)
     * @param returnASandboxAchTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxAchTransferCall(String achTransferId, ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnASandboxAchTransferParameters;

        // create path and map variables
        String localVarPath = "/simulations/ach_transfers/{ach_transfer_id}/return"
            .replace("{" + "ach_transfer_id" + "}", localVarApiClient.escapeString(achTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnASandboxAchTransferValidateBeforeCall(String achTransferId, ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achTransferId' is set
        if (achTransferId == null) {
            throw new ApiException("Missing the required parameter 'achTransferId' when calling returnASandboxAchTransfer(Async)");
        }

        // verify the required parameter 'returnASandboxAchTransferParameters' is set
        if (returnASandboxAchTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'returnASandboxAchTransferParameters' when calling returnASandboxAchTransfer(Async)");
        }

        return returnASandboxAchTransferCall(achTransferId, returnASandboxAchTransferParameters, _callback);

    }

    /**
     * Return a Sandbox ACH Transfer
     * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @param returnASandboxAchTransferParameters  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer returnASandboxAchTransfer(String achTransferId, ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = returnASandboxAchTransferWithHttpInfo(achTransferId, returnASandboxAchTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Return a Sandbox ACH Transfer
     * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @param returnASandboxAchTransferParameters  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> returnASandboxAchTransferWithHttpInfo(String achTransferId, ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = returnASandboxAchTransferValidateBeforeCall(achTransferId, returnASandboxAchTransferParameters, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Sandbox ACH Transfer (asynchronously)
     * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @param returnASandboxAchTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxAchTransferAsync(String achTransferId, ReturnASandboxAchTransferParameters returnASandboxAchTransferParameters, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnASandboxAchTransferValidateBeforeCall(achTransferId, returnASandboxAchTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnASandboxCheckDeposit
     * @param checkDepositId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxCheckDepositCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/check_deposits/{check_deposit_id}/return"
            .replace("{" + "check_deposit_id" + "}", localVarApiClient.escapeString(checkDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnASandboxCheckDepositValidateBeforeCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkDepositId' is set
        if (checkDepositId == null) {
            throw new ApiException("Missing the required parameter 'checkDepositId' when calling returnASandboxCheckDeposit(Async)");
        }

        return returnASandboxCheckDepositCall(checkDepositId, _callback);

    }

    /**
     * Return a Sandbox Check Deposit
     * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param checkDepositId  (required)
     * @return CheckDeposit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDeposit returnASandboxCheckDeposit(String checkDepositId) throws ApiException {
        ApiResponse<CheckDeposit> localVarResp = returnASandboxCheckDepositWithHttpInfo(checkDepositId);
        return localVarResp.getData();
    }

    /**
     * Return a Sandbox Check Deposit
     * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param checkDepositId  (required)
     * @return ApiResponse&lt;CheckDeposit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDeposit> returnASandboxCheckDepositWithHttpInfo(String checkDepositId) throws ApiException {
        okhttp3.Call localVarCall = returnASandboxCheckDepositValidateBeforeCall(checkDepositId, null);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Sandbox Check Deposit (asynchronously)
     * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a &#x60;status&#x60; of &#x60;submitted&#x60;.
     * @param checkDepositId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxCheckDepositAsync(String checkDepositId, final ApiCallback<CheckDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnASandboxCheckDepositValidateBeforeCall(checkDepositId, _callback);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnASandboxCheckTransfer
     * @param checkTransferId  (required)
     * @param returnASandboxCheckTransferParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxCheckTransferCall(String checkTransferId, ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnASandboxCheckTransferParameters;

        // create path and map variables
        String localVarPath = "/simulations/check_transfers/{check_transfer_id}/return"
            .replace("{" + "check_transfer_id" + "}", localVarApiClient.escapeString(checkTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnASandboxCheckTransferValidateBeforeCall(String checkTransferId, ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkTransferId' is set
        if (checkTransferId == null) {
            throw new ApiException("Missing the required parameter 'checkTransferId' when calling returnASandboxCheckTransfer(Async)");
        }

        // verify the required parameter 'returnASandboxCheckTransferParameters' is set
        if (returnASandboxCheckTransferParameters == null) {
            throw new ApiException("Missing the required parameter 'returnASandboxCheckTransferParameters' when calling returnASandboxCheckTransfer(Async)");
        }

        return returnASandboxCheckTransferCall(checkTransferId, returnASandboxCheckTransferParameters, _callback);

    }

    /**
     * Return a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @param returnASandboxCheckTransferParameters  (required)
     * @return CheckTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckTransfer returnASandboxCheckTransfer(String checkTransferId, ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters) throws ApiException {
        ApiResponse<CheckTransfer> localVarResp = returnASandboxCheckTransferWithHttpInfo(checkTransferId, returnASandboxCheckTransferParameters);
        return localVarResp.getData();
    }

    /**
     * Return a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @param returnASandboxCheckTransferParameters  (required)
     * @return ApiResponse&lt;CheckTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckTransfer> returnASandboxCheckTransferWithHttpInfo(String checkTransferId, ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters) throws ApiException {
        okhttp3.Call localVarCall = returnASandboxCheckTransferValidateBeforeCall(checkTransferId, returnASandboxCheckTransferParameters, null);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a Sandbox Check Transfer (asynchronously)
     * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a &#x60;status&#x60; of &#x60;mailed&#x60;.
     * @param checkTransferId  (required)
     * @param returnASandboxCheckTransferParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnASandboxCheckTransferAsync(String checkTransferId, ReturnASandboxCheckTransferParameters returnASandboxCheckTransferParameters, final ApiCallback<CheckTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnASandboxCheckTransferValidateBeforeCall(checkTransferId, returnASandboxCheckTransferParameters, _callback);
        Type localVarReturnType = new TypeToken<CheckTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reverseASandboxWireTransfer
     * @param wireTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseASandboxWireTransferCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/wire_transfers/{wire_transfer_id}/reverse"
            .replace("{" + "wire_transfer_id" + "}", localVarApiClient.escapeString(wireTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseASandboxWireTransferValidateBeforeCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireTransferId' is set
        if (wireTransferId == null) {
            throw new ApiException("Missing the required parameter 'wireTransferId' when calling reverseASandboxWireTransfer(Async)");
        }

        return reverseASandboxWireTransferCall(wireTransferId, _callback);

    }

    /**
     * Reverse a Sandbox Wire Transfer
     * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a &#x60;status&#x60; of &#x60;complete&#x60;.&#39;
     * @param wireTransferId  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer reverseASandboxWireTransfer(String wireTransferId) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = reverseASandboxWireTransferWithHttpInfo(wireTransferId);
        return localVarResp.getData();
    }

    /**
     * Reverse a Sandbox Wire Transfer
     * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a &#x60;status&#x60; of &#x60;complete&#x60;.&#39;
     * @param wireTransferId  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> reverseASandboxWireTransferWithHttpInfo(String wireTransferId) throws ApiException {
        okhttp3.Call localVarCall = reverseASandboxWireTransferValidateBeforeCall(wireTransferId, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse a Sandbox Wire Transfer (asynchronously)
     * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a &#x60;status&#x60; of &#x60;complete&#x60;.&#39;
     * @param wireTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseASandboxWireTransferAsync(String wireTransferId, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseASandboxWireTransferValidateBeforeCall(wireTransferId, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateARealTimePaymentsTransferToYourAccount
     * @param simulateARealTimePaymentsTransferToYourAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Real Time Payments Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateARealTimePaymentsTransferToYourAccountCall(SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateARealTimePaymentsTransferToYourAccountParameters;

        // create path and map variables
        String localVarPath = "/simulations/inbound_real_time_payments_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateARealTimePaymentsTransferToYourAccountValidateBeforeCall(SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateARealTimePaymentsTransferToYourAccountParameters' is set
        if (simulateARealTimePaymentsTransferToYourAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateARealTimePaymentsTransferToYourAccountParameters' when calling simulateARealTimePaymentsTransferToYourAccount(Async)");
        }

        return simulateARealTimePaymentsTransferToYourAccountCall(simulateARealTimePaymentsTransferToYourAccountParameters, _callback);

    }

    /**
     * Simulate a Real Time Payments Transfer to your account
     * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
     * @param simulateARealTimePaymentsTransferToYourAccountParameters  (required)
     * @return InboundRealTimePaymentsTransferSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Real Time Payments Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundRealTimePaymentsTransferSimulationResult simulateARealTimePaymentsTransferToYourAccount(SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters) throws ApiException {
        ApiResponse<InboundRealTimePaymentsTransferSimulationResult> localVarResp = simulateARealTimePaymentsTransferToYourAccountWithHttpInfo(simulateARealTimePaymentsTransferToYourAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate a Real Time Payments Transfer to your account
     * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
     * @param simulateARealTimePaymentsTransferToYourAccountParameters  (required)
     * @return ApiResponse&lt;InboundRealTimePaymentsTransferSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Real Time Payments Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundRealTimePaymentsTransferSimulationResult> simulateARealTimePaymentsTransferToYourAccountWithHttpInfo(SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateARealTimePaymentsTransferToYourAccountValidateBeforeCall(simulateARealTimePaymentsTransferToYourAccountParameters, null);
        Type localVarReturnType = new TypeToken<InboundRealTimePaymentsTransferSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a Real Time Payments Transfer to your account (asynchronously)
     * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
     * @param simulateARealTimePaymentsTransferToYourAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Real Time Payments Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateARealTimePaymentsTransferToYourAccountAsync(SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters, final ApiCallback<InboundRealTimePaymentsTransferSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateARealTimePaymentsTransferToYourAccountValidateBeforeCall(simulateARealTimePaymentsTransferToYourAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundRealTimePaymentsTransferSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateARefundOnACard
     * @param simulateARefundOnACardParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateARefundOnACardCall(SimulateARefundOnACardParameters simulateARefundOnACardParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateARefundOnACardParameters;

        // create path and map variables
        String localVarPath = "/simulations/card_refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateARefundOnACardValidateBeforeCall(SimulateARefundOnACardParameters simulateARefundOnACardParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateARefundOnACardParameters' is set
        if (simulateARefundOnACardParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateARefundOnACardParameters' when calling simulateARefundOnACard(Async)");
        }

        return simulateARefundOnACardCall(simulateARefundOnACardParameters, _callback);

    }

    /**
     * Simulate a refund on a card
     * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
     * @param simulateARefundOnACardParameters  (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction simulateARefundOnACard(SimulateARefundOnACardParameters simulateARefundOnACardParameters) throws ApiException {
        ApiResponse<Transaction> localVarResp = simulateARefundOnACardWithHttpInfo(simulateARefundOnACardParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate a refund on a card
     * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
     * @param simulateARefundOnACardParameters  (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> simulateARefundOnACardWithHttpInfo(SimulateARefundOnACardParameters simulateARefundOnACardParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateARefundOnACardValidateBeforeCall(simulateARefundOnACardParameters, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a refund on a card (asynchronously)
     * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
     * @param simulateARefundOnACardParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateARefundOnACardAsync(SimulateARefundOnACardParameters simulateARefundOnACardParameters, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateARefundOnACardValidateBeforeCall(simulateARefundOnACardParameters, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateATaxDocumentBeingCreated
     * @param simulateATaxDocumentBeingCreatedParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateATaxDocumentBeingCreatedCall(SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateATaxDocumentBeingCreatedParameters;

        // create path and map variables
        String localVarPath = "/simulations/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateATaxDocumentBeingCreatedValidateBeforeCall(SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateATaxDocumentBeingCreatedParameters' is set
        if (simulateATaxDocumentBeingCreatedParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateATaxDocumentBeingCreatedParameters' when calling simulateATaxDocumentBeingCreated(Async)");
        }

        return simulateATaxDocumentBeingCreatedCall(simulateATaxDocumentBeingCreatedParameters, _callback);

    }

    /**
     * Simulate a tax document being created
     * Simulates an tax document being created for an account.
     * @param simulateATaxDocumentBeingCreatedParameters  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Document simulateATaxDocumentBeingCreated(SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters) throws ApiException {
        ApiResponse<Document> localVarResp = simulateATaxDocumentBeingCreatedWithHttpInfo(simulateATaxDocumentBeingCreatedParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate a tax document being created
     * Simulates an tax document being created for an account.
     * @param simulateATaxDocumentBeingCreatedParameters  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> simulateATaxDocumentBeingCreatedWithHttpInfo(SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateATaxDocumentBeingCreatedValidateBeforeCall(simulateATaxDocumentBeingCreatedParameters, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a tax document being created (asynchronously)
     * Simulates an tax document being created for an account.
     * @param simulateATaxDocumentBeingCreatedParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateATaxDocumentBeingCreatedAsync(SimulateATaxDocumentBeingCreatedParameters simulateATaxDocumentBeingCreatedParameters, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateATaxDocumentBeingCreatedValidateBeforeCall(simulateATaxDocumentBeingCreatedParameters, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAWireTransferToYourAccount
     * @param simulateAWireTransferToYourAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAWireTransferToYourAccountCall(SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAWireTransferToYourAccountParameters;

        // create path and map variables
        String localVarPath = "/simulations/inbound_wire_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAWireTransferToYourAccountValidateBeforeCall(SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAWireTransferToYourAccountParameters' is set
        if (simulateAWireTransferToYourAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAWireTransferToYourAccountParameters' when calling simulateAWireTransferToYourAccount(Async)");
        }

        return simulateAWireTransferToYourAccountCall(simulateAWireTransferToYourAccountParameters, _callback);

    }

    /**
     * Simulate a Wire Transfer to your account
     * Simulates an inbound Wire Transfer to your account.
     * @param simulateAWireTransferToYourAccountParameters  (required)
     * @return InboundWireTransferSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundWireTransferSimulationResult simulateAWireTransferToYourAccount(SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters) throws ApiException {
        ApiResponse<InboundWireTransferSimulationResult> localVarResp = simulateAWireTransferToYourAccountWithHttpInfo(simulateAWireTransferToYourAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate a Wire Transfer to your account
     * Simulates an inbound Wire Transfer to your account.
     * @param simulateAWireTransferToYourAccountParameters  (required)
     * @return ApiResponse&lt;InboundWireTransferSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundWireTransferSimulationResult> simulateAWireTransferToYourAccountWithHttpInfo(SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAWireTransferToYourAccountValidateBeforeCall(simulateAWireTransferToYourAccountParameters, null);
        Type localVarReturnType = new TypeToken<InboundWireTransferSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a Wire Transfer to your account (asynchronously)
     * Simulates an inbound Wire Transfer to your account.
     * @param simulateAWireTransferToYourAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAWireTransferToYourAccountAsync(SimulateAWireTransferToYourAccountParameters simulateAWireTransferToYourAccountParameters, final ApiCallback<InboundWireTransferSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAWireTransferToYourAccountValidateBeforeCall(simulateAWireTransferToYourAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundWireTransferSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAnAccountStatementBeingCreated
     * @param simulateAnAccountStatementBeingCreatedParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAccountStatementBeingCreatedCall(SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAnAccountStatementBeingCreatedParameters;

        // create path and map variables
        String localVarPath = "/simulations/account_statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAnAccountStatementBeingCreatedValidateBeforeCall(SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAnAccountStatementBeingCreatedParameters' is set
        if (simulateAnAccountStatementBeingCreatedParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAnAccountStatementBeingCreatedParameters' when calling simulateAnAccountStatementBeingCreated(Async)");
        }

        return simulateAnAccountStatementBeingCreatedCall(simulateAnAccountStatementBeingCreatedParameters, _callback);

    }

    /**
     * Simulate an Account Statement being created
     * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
     * @param simulateAnAccountStatementBeingCreatedParameters  (required)
     * @return AccountStatement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountStatement simulateAnAccountStatementBeingCreated(SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters) throws ApiException {
        ApiResponse<AccountStatement> localVarResp = simulateAnAccountStatementBeingCreatedWithHttpInfo(simulateAnAccountStatementBeingCreatedParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate an Account Statement being created
     * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
     * @param simulateAnAccountStatementBeingCreatedParameters  (required)
     * @return ApiResponse&lt;AccountStatement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStatement> simulateAnAccountStatementBeingCreatedWithHttpInfo(SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAnAccountStatementBeingCreatedValidateBeforeCall(simulateAnAccountStatementBeingCreatedParameters, null);
        Type localVarReturnType = new TypeToken<AccountStatement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an Account Statement being created (asynchronously)
     * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
     * @param simulateAnAccountStatementBeingCreatedParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Statement </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAccountStatementBeingCreatedAsync(SimulateAnAccountStatementBeingCreatedParameters simulateAnAccountStatementBeingCreatedParameters, final ApiCallback<AccountStatement> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAnAccountStatementBeingCreatedValidateBeforeCall(simulateAnAccountStatementBeingCreatedParameters, _callback);
        Type localVarReturnType = new TypeToken<AccountStatement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAnAchTransferToYourAccount
     * @param simulateAnAchTransferToYourAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAchTransferToYourAccountCall(SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAnAchTransferToYourAccountParameters;

        // create path and map variables
        String localVarPath = "/simulations/inbound_ach_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAnAchTransferToYourAccountValidateBeforeCall(SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAnAchTransferToYourAccountParameters' is set
        if (simulateAnAchTransferToYourAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAnAchTransferToYourAccountParameters' when calling simulateAnAchTransferToYourAccount(Async)");
        }

        return simulateAnAchTransferToYourAccountCall(simulateAnAchTransferToYourAccountParameters, _callback);

    }

    /**
     * Simulate an ACH Transfer to your account
     * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the &#x60;amount&#x60; is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
     * @param simulateAnAchTransferToYourAccountParameters  (required)
     * @return InboundAchTransferSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundAchTransferSimulationResult simulateAnAchTransferToYourAccount(SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters) throws ApiException {
        ApiResponse<InboundAchTransferSimulationResult> localVarResp = simulateAnAchTransferToYourAccountWithHttpInfo(simulateAnAchTransferToYourAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate an ACH Transfer to your account
     * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the &#x60;amount&#x60; is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
     * @param simulateAnAchTransferToYourAccountParameters  (required)
     * @return ApiResponse&lt;InboundAchTransferSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundAchTransferSimulationResult> simulateAnAchTransferToYourAccountWithHttpInfo(SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAnAchTransferToYourAccountValidateBeforeCall(simulateAnAchTransferToYourAccountParameters, null);
        Type localVarReturnType = new TypeToken<InboundAchTransferSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an ACH Transfer to your account (asynchronously)
     * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the &#x60;amount&#x60; is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
     * @param simulateAnAchTransferToYourAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound ACH Transfer Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAchTransferToYourAccountAsync(SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters, final ApiCallback<InboundAchTransferSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAnAchTransferToYourAccountValidateBeforeCall(simulateAnAchTransferToYourAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundAchTransferSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAnAuthorizationOnACard
     * @param simulateAnAuthorizationOnACardParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Card Authorization Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAuthorizationOnACardCall(SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAnAuthorizationOnACardParameters;

        // create path and map variables
        String localVarPath = "/simulations/card_authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAnAuthorizationOnACardValidateBeforeCall(SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAnAuthorizationOnACardParameters' is set
        if (simulateAnAuthorizationOnACardParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAnAuthorizationOnACardParameters' when calling simulateAnAuthorizationOnACard(Async)");
        }

        return simulateAnAuthorizationOnACardCall(simulateAnAuthorizationOnACardParameters, _callback);

    }

    /**
     * Simulate an authorization on a Card
     * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the &#x60;amount&#x60; submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type &#x60;card_authorization&#x60; or a [Declined Transaction](#declined-transactions) of type &#x60;card_decline&#x60;. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
     * @param simulateAnAuthorizationOnACardParameters  (required)
     * @return InboundCardAuthorizationSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Card Authorization Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundCardAuthorizationSimulationResult simulateAnAuthorizationOnACard(SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters) throws ApiException {
        ApiResponse<InboundCardAuthorizationSimulationResult> localVarResp = simulateAnAuthorizationOnACardWithHttpInfo(simulateAnAuthorizationOnACardParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate an authorization on a Card
     * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the &#x60;amount&#x60; submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type &#x60;card_authorization&#x60; or a [Declined Transaction](#declined-transactions) of type &#x60;card_decline&#x60;. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
     * @param simulateAnAuthorizationOnACardParameters  (required)
     * @return ApiResponse&lt;InboundCardAuthorizationSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Card Authorization Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundCardAuthorizationSimulationResult> simulateAnAuthorizationOnACardWithHttpInfo(SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAnAuthorizationOnACardValidateBeforeCall(simulateAnAuthorizationOnACardParameters, null);
        Type localVarReturnType = new TypeToken<InboundCardAuthorizationSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an authorization on a Card (asynchronously)
     * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the &#x60;amount&#x60; submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type &#x60;card_authorization&#x60; or a [Declined Transaction](#declined-transactions) of type &#x60;card_decline&#x60;. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
     * @param simulateAnAuthorizationOnACardParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Card Authorization Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnAuthorizationOnACardAsync(SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters, final ApiCallback<InboundCardAuthorizationSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAnAuthorizationOnACardValidateBeforeCall(simulateAnAuthorizationOnACardParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundCardAuthorizationSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAnInboundWireDrawdownRequestBeingCreated
     * @param simulateAnInboundWireDrawdownRequestBeingCreatedParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnInboundWireDrawdownRequestBeingCreatedCall(SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAnInboundWireDrawdownRequestBeingCreatedParameters;

        // create path and map variables
        String localVarPath = "/simulations/inbound_wire_drawdown_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAnInboundWireDrawdownRequestBeingCreatedValidateBeforeCall(SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAnInboundWireDrawdownRequestBeingCreatedParameters' is set
        if (simulateAnInboundWireDrawdownRequestBeingCreatedParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAnInboundWireDrawdownRequestBeingCreatedParameters' when calling simulateAnInboundWireDrawdownRequestBeingCreated(Async)");
        }

        return simulateAnInboundWireDrawdownRequestBeingCreatedCall(simulateAnInboundWireDrawdownRequestBeingCreatedParameters, _callback);

    }

    /**
     * Simulate an Inbound Wire Drawdown request being created
     * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
     * @param simulateAnInboundWireDrawdownRequestBeingCreatedParameters  (required)
     * @return InboundWireDrawdownRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundWireDrawdownRequest simulateAnInboundWireDrawdownRequestBeingCreated(SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters) throws ApiException {
        ApiResponse<InboundWireDrawdownRequest> localVarResp = simulateAnInboundWireDrawdownRequestBeingCreatedWithHttpInfo(simulateAnInboundWireDrawdownRequestBeingCreatedParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate an Inbound Wire Drawdown request being created
     * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
     * @param simulateAnInboundWireDrawdownRequestBeingCreatedParameters  (required)
     * @return ApiResponse&lt;InboundWireDrawdownRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundWireDrawdownRequest> simulateAnInboundWireDrawdownRequestBeingCreatedWithHttpInfo(SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAnInboundWireDrawdownRequestBeingCreatedValidateBeforeCall(simulateAnInboundWireDrawdownRequestBeingCreatedParameters, null);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an Inbound Wire Drawdown request being created (asynchronously)
     * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
     * @param simulateAnInboundWireDrawdownRequestBeingCreatedParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Wire Drawdown Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnInboundWireDrawdownRequestBeingCreatedAsync(SimulateAnInboundWireDrawdownRequestBeingCreatedParameters simulateAnInboundWireDrawdownRequestBeingCreatedParameters, final ApiCallback<InboundWireDrawdownRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAnInboundWireDrawdownRequestBeingCreatedValidateBeforeCall(simulateAnInboundWireDrawdownRequestBeingCreatedParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundWireDrawdownRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateAnInterestPaymentToYourAccount
     * @param simulateAnInterestPaymentToYourAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interest Payment Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnInterestPaymentToYourAccountCall(SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateAnInterestPaymentToYourAccountParameters;

        // create path and map variables
        String localVarPath = "/simulations/interest_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateAnInterestPaymentToYourAccountValidateBeforeCall(SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateAnInterestPaymentToYourAccountParameters' is set
        if (simulateAnInterestPaymentToYourAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateAnInterestPaymentToYourAccountParameters' when calling simulateAnInterestPaymentToYourAccount(Async)");
        }

        return simulateAnInterestPaymentToYourAccountCall(simulateAnInterestPaymentToYourAccountParameters, _callback);

    }

    /**
     * Simulate an Interest Payment to your account
     * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
     * @param simulateAnInterestPaymentToYourAccountParameters  (required)
     * @return InterestPaymentSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interest Payment Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InterestPaymentSimulationResult simulateAnInterestPaymentToYourAccount(SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters) throws ApiException {
        ApiResponse<InterestPaymentSimulationResult> localVarResp = simulateAnInterestPaymentToYourAccountWithHttpInfo(simulateAnInterestPaymentToYourAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate an Interest Payment to your account
     * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
     * @param simulateAnInterestPaymentToYourAccountParameters  (required)
     * @return ApiResponse&lt;InterestPaymentSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interest Payment Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterestPaymentSimulationResult> simulateAnInterestPaymentToYourAccountWithHttpInfo(SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateAnInterestPaymentToYourAccountValidateBeforeCall(simulateAnInterestPaymentToYourAccountParameters, null);
        Type localVarReturnType = new TypeToken<InterestPaymentSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate an Interest Payment to your account (asynchronously)
     * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
     * @param simulateAnInterestPaymentToYourAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interest Payment Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateAnInterestPaymentToYourAccountAsync(SimulateAnInterestPaymentToYourAccountParameters simulateAnInterestPaymentToYourAccountParameters, final ApiCallback<InterestPaymentSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateAnInterestPaymentToYourAccountValidateBeforeCall(simulateAnInterestPaymentToYourAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<InterestPaymentSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateDigitalWalletProvisioningForACard
     * @param simulateDigitalWalletProvisioningForACardParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Digital Wallet Token Request Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateDigitalWalletProvisioningForACardCall(SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateDigitalWalletProvisioningForACardParameters;

        // create path and map variables
        String localVarPath = "/simulations/digital_wallet_token_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateDigitalWalletProvisioningForACardValidateBeforeCall(SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateDigitalWalletProvisioningForACardParameters' is set
        if (simulateDigitalWalletProvisioningForACardParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateDigitalWalletProvisioningForACardParameters' when calling simulateDigitalWalletProvisioningForACard(Async)");
        }

        return simulateDigitalWalletProvisioningForACardCall(simulateDigitalWalletProvisioningForACardParameters, _callback);

    }

    /**
     * Simulate digital wallet provisioning for a card
     * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
     * @param simulateDigitalWalletProvisioningForACardParameters  (required)
     * @return InboundDigitalWalletTokenRequestSimulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Digital Wallet Token Request Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public InboundDigitalWalletTokenRequestSimulationResult simulateDigitalWalletProvisioningForACard(SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters) throws ApiException {
        ApiResponse<InboundDigitalWalletTokenRequestSimulationResult> localVarResp = simulateDigitalWalletProvisioningForACardWithHttpInfo(simulateDigitalWalletProvisioningForACardParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate digital wallet provisioning for a card
     * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
     * @param simulateDigitalWalletProvisioningForACardParameters  (required)
     * @return ApiResponse&lt;InboundDigitalWalletTokenRequestSimulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Digital Wallet Token Request Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundDigitalWalletTokenRequestSimulationResult> simulateDigitalWalletProvisioningForACardWithHttpInfo(SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateDigitalWalletProvisioningForACardValidateBeforeCall(simulateDigitalWalletProvisioningForACardParameters, null);
        Type localVarReturnType = new TypeToken<InboundDigitalWalletTokenRequestSimulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate digital wallet provisioning for a card (asynchronously)
     * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
     * @param simulateDigitalWalletProvisioningForACardParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inbound Digital Wallet Token Request Simulation Result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateDigitalWalletProvisioningForACardAsync(SimulateDigitalWalletProvisioningForACardParameters simulateDigitalWalletProvisioningForACardParameters, final ApiCallback<InboundDigitalWalletTokenRequestSimulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateDigitalWalletProvisioningForACardValidateBeforeCall(simulateDigitalWalletProvisioningForACardParameters, _callback);
        Type localVarReturnType = new TypeToken<InboundDigitalWalletTokenRequestSimulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulateSettlingACardAuthorization
     * @param simulateSettlingACardAuthorizationParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSettlingACardAuthorizationCall(SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulateSettlingACardAuthorizationParameters;

        // create path and map variables
        String localVarPath = "/simulations/card_settlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulateSettlingACardAuthorizationValidateBeforeCall(SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simulateSettlingACardAuthorizationParameters' is set
        if (simulateSettlingACardAuthorizationParameters == null) {
            throw new ApiException("Missing the required parameter 'simulateSettlingACardAuthorizationParameters' when calling simulateSettlingACardAuthorization(Async)");
        }

        return simulateSettlingACardAuthorizationCall(simulateSettlingACardAuthorizationParameters, _callback);

    }

    /**
     * Simulate settling a card authorization
     * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
     * @param simulateSettlingACardAuthorizationParameters  (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction simulateSettlingACardAuthorization(SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters) throws ApiException {
        ApiResponse<Transaction> localVarResp = simulateSettlingACardAuthorizationWithHttpInfo(simulateSettlingACardAuthorizationParameters);
        return localVarResp.getData();
    }

    /**
     * Simulate settling a card authorization
     * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
     * @param simulateSettlingACardAuthorizationParameters  (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> simulateSettlingACardAuthorizationWithHttpInfo(SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters) throws ApiException {
        okhttp3.Call localVarCall = simulateSettlingACardAuthorizationValidateBeforeCall(simulateSettlingACardAuthorizationParameters, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate settling a card authorization (asynchronously)
     * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
     * @param simulateSettlingACardAuthorizationParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulateSettlingACardAuthorizationAsync(SimulateSettlingACardAuthorizationParameters simulateSettlingACardAuthorizationParameters, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulateSettlingACardAuthorizationValidateBeforeCall(simulateSettlingACardAuthorizationParameters, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulatesAdvancingTheStateOfACardDispute
     * @param cardDisputeId  (required)
     * @param simulatesAdvancingTheStateOfACardDisputeParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulatesAdvancingTheStateOfACardDisputeCall(String cardDisputeId, SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simulatesAdvancingTheStateOfACardDisputeParameters;

        // create path and map variables
        String localVarPath = "/simulations/card_disputes/{card_dispute_id}/action"
            .replace("{" + "card_dispute_id" + "}", localVarApiClient.escapeString(cardDisputeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulatesAdvancingTheStateOfACardDisputeValidateBeforeCall(String cardDisputeId, SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardDisputeId' is set
        if (cardDisputeId == null) {
            throw new ApiException("Missing the required parameter 'cardDisputeId' when calling simulatesAdvancingTheStateOfACardDispute(Async)");
        }

        // verify the required parameter 'simulatesAdvancingTheStateOfACardDisputeParameters' is set
        if (simulatesAdvancingTheStateOfACardDisputeParameters == null) {
            throw new ApiException("Missing the required parameter 'simulatesAdvancingTheStateOfACardDisputeParameters' when calling simulatesAdvancingTheStateOfACardDispute(Async)");
        }

        return simulatesAdvancingTheStateOfACardDisputeCall(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters, _callback);

    }

    /**
     * Simulates advancing the state of a card dispute
     * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of &#x60;pending_reviewing&#x60;.
     * @param cardDisputeId  (required)
     * @param simulatesAdvancingTheStateOfACardDisputeParameters  (required)
     * @return CardDispute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CardDispute simulatesAdvancingTheStateOfACardDispute(String cardDisputeId, SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters) throws ApiException {
        ApiResponse<CardDispute> localVarResp = simulatesAdvancingTheStateOfACardDisputeWithHttpInfo(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters);
        return localVarResp.getData();
    }

    /**
     * Simulates advancing the state of a card dispute
     * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of &#x60;pending_reviewing&#x60;.
     * @param cardDisputeId  (required)
     * @param simulatesAdvancingTheStateOfACardDisputeParameters  (required)
     * @return ApiResponse&lt;CardDispute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardDispute> simulatesAdvancingTheStateOfACardDisputeWithHttpInfo(String cardDisputeId, SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters) throws ApiException {
        okhttp3.Call localVarCall = simulatesAdvancingTheStateOfACardDisputeValidateBeforeCall(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters, null);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulates advancing the state of a card dispute (asynchronously)
     * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of &#x60;pending_reviewing&#x60;.
     * @param cardDisputeId  (required)
     * @param simulatesAdvancingTheStateOfACardDisputeParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card Dispute </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulatesAdvancingTheStateOfACardDisputeAsync(String cardDisputeId, SimulatesAdvancingTheStateOfACardDisputeParameters simulatesAdvancingTheStateOfACardDisputeParameters, final ApiCallback<CardDispute> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulatesAdvancingTheStateOfACardDisputeValidateBeforeCall(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters, _callback);
        Type localVarReturnType = new TypeToken<CardDispute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitASandboxAchTransfer
     * @param achTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxAchTransferCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/ach_transfers/{ach_transfer_id}/submit"
            .replace("{" + "ach_transfer_id" + "}", localVarApiClient.escapeString(achTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitASandboxAchTransferValidateBeforeCall(String achTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'achTransferId' is set
        if (achTransferId == null) {
            throw new ApiException("Missing the required parameter 'achTransferId' when calling submitASandboxAchTransfer(Async)");
        }

        return submitASandboxAchTransferCall(achTransferId, _callback);

    }

    /**
     * Submit a Sandbox ACH Transfer
     * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @return AchTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AchTransfer submitASandboxAchTransfer(String achTransferId) throws ApiException {
        ApiResponse<AchTransfer> localVarResp = submitASandboxAchTransferWithHttpInfo(achTransferId);
        return localVarResp.getData();
    }

    /**
     * Submit a Sandbox ACH Transfer
     * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @return ApiResponse&lt;AchTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AchTransfer> submitASandboxAchTransferWithHttpInfo(String achTransferId) throws ApiException {
        okhttp3.Call localVarCall = submitASandboxAchTransferValidateBeforeCall(achTransferId, null);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Sandbox ACH Transfer (asynchronously)
     * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_submission&#x60;. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of &#x60;submitted&#x60;.
     * @param achTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ACH Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxAchTransferAsync(String achTransferId, final ApiCallback<AchTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitASandboxAchTransferValidateBeforeCall(achTransferId, _callback);
        Type localVarReturnType = new TypeToken<AchTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitASandboxCheckDeposit
     * @param checkDepositId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxCheckDepositCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/check_deposits/{check_deposit_id}/submit"
            .replace("{" + "check_deposit_id" + "}", localVarApiClient.escapeString(checkDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitASandboxCheckDepositValidateBeforeCall(String checkDepositId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkDepositId' is set
        if (checkDepositId == null) {
            throw new ApiException("Missing the required parameter 'checkDepositId' when calling submitASandboxCheckDeposit(Async)");
        }

        return submitASandboxCheckDepositCall(checkDepositId, _callback);

    }

    /**
     * Submit a Sandbox Check Deposit
     * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @return CheckDeposit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CheckDeposit submitASandboxCheckDeposit(String checkDepositId) throws ApiException {
        ApiResponse<CheckDeposit> localVarResp = submitASandboxCheckDepositWithHttpInfo(checkDepositId);
        return localVarResp.getData();
    }

    /**
     * Submit a Sandbox Check Deposit
     * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @return ApiResponse&lt;CheckDeposit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDeposit> submitASandboxCheckDepositWithHttpInfo(String checkDepositId) throws ApiException {
        okhttp3.Call localVarCall = submitASandboxCheckDepositValidateBeforeCall(checkDepositId, null);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Sandbox Check Deposit (asynchronously)
     * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a &#x60;status&#x60; of &#x60;pending&#x60;.
     * @param checkDepositId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check Deposit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxCheckDepositAsync(String checkDepositId, final ApiCallback<CheckDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitASandboxCheckDepositValidateBeforeCall(checkDepositId, _callback);
        Type localVarReturnType = new TypeToken<CheckDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitASandboxWireTransfer
     * @param wireTransferId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxWireTransferCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulations/wire_transfers/{wire_transfer_id}/submit"
            .replace("{" + "wire_transfer_id" + "}", localVarApiClient.escapeString(wireTransferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitASandboxWireTransferValidateBeforeCall(String wireTransferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wireTransferId' is set
        if (wireTransferId == null) {
            throw new ApiException("Missing the required parameter 'wireTransferId' when calling submitASandboxWireTransfer(Async)");
        }

        return submitASandboxWireTransferCall(wireTransferId, _callback);

    }

    /**
     * Submit a Sandbox Wire Transfer
     * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_creating&#x60;.
     * @param wireTransferId  (required)
     * @return WireTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WireTransfer submitASandboxWireTransfer(String wireTransferId) throws ApiException {
        ApiResponse<WireTransfer> localVarResp = submitASandboxWireTransferWithHttpInfo(wireTransferId);
        return localVarResp.getData();
    }

    /**
     * Submit a Sandbox Wire Transfer
     * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_creating&#x60;.
     * @param wireTransferId  (required)
     * @return ApiResponse&lt;WireTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireTransfer> submitASandboxWireTransferWithHttpInfo(String wireTransferId) throws ApiException {
        okhttp3.Call localVarCall = submitASandboxWireTransferValidateBeforeCall(wireTransferId, null);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Sandbox Wire Transfer (asynchronously)
     * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a &#x60;status&#x60; of &#x60;pending_approval&#x60; or &#x60;pending_creating&#x60;.
     * @param wireTransferId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wire Transfer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitASandboxWireTransferAsync(String wireTransferId, final ApiCallback<WireTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitASandboxWireTransferValidateBeforeCall(wireTransferId, _callback);
        Type localVarReturnType = new TypeToken<WireTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateACard
     * @param cardId  (required)
     * @param updateACardParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACardCall(String cardId, UpdateACardParameters updateACardParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateACardParameters;

        // create path and map variables
        String localVarPath = "/cards/{card_id}"
            .replace("{" + "card_id" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateACardValidateBeforeCall(String cardId, UpdateACardParameters updateACardParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling updateACard(Async)");
        }

        // verify the required parameter 'updateACardParameters' is set
        if (updateACardParameters == null) {
            throw new ApiException("Missing the required parameter 'updateACardParameters' when calling updateACard(Async)");
        }

        return updateACardCall(cardId, updateACardParameters, _callback);

    }

    /**
     * Update a Card
     * 
     * @param cardId  (required)
     * @param updateACardParameters  (required)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Card updateACard(String cardId, UpdateACardParameters updateACardParameters) throws ApiException {
        ApiResponse<Card> localVarResp = updateACardWithHttpInfo(cardId, updateACardParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Card
     * 
     * @param cardId  (required)
     * @param updateACardParameters  (required)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> updateACardWithHttpInfo(String cardId, UpdateACardParameters updateACardParameters) throws ApiException {
        okhttp3.Call localVarCall = updateACardValidateBeforeCall(cardId, updateACardParameters, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Card (asynchronously)
     * 
     * @param cardId  (required)
     * @param updateACardParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateACardAsync(String cardId, UpdateACardParameters updateACardParameters, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateACardValidateBeforeCall(cardId, updateACardParameters, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateALimit
     * @param limitId  (required)
     * @param updateALimitParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateALimitCall(String limitId, UpdateALimitParameters updateALimitParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateALimitParameters;

        // create path and map variables
        String localVarPath = "/limits/{limit_id}"
            .replace("{" + "limit_id" + "}", localVarApiClient.escapeString(limitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateALimitValidateBeforeCall(String limitId, UpdateALimitParameters updateALimitParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'limitId' is set
        if (limitId == null) {
            throw new ApiException("Missing the required parameter 'limitId' when calling updateALimit(Async)");
        }

        // verify the required parameter 'updateALimitParameters' is set
        if (updateALimitParameters == null) {
            throw new ApiException("Missing the required parameter 'updateALimitParameters' when calling updateALimit(Async)");
        }

        return updateALimitCall(limitId, updateALimitParameters, _callback);

    }

    /**
     * Update a Limit
     * 
     * @param limitId  (required)
     * @param updateALimitParameters  (required)
     * @return Limit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Limit updateALimit(String limitId, UpdateALimitParameters updateALimitParameters) throws ApiException {
        ApiResponse<Limit> localVarResp = updateALimitWithHttpInfo(limitId, updateALimitParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Limit
     * 
     * @param limitId  (required)
     * @param updateALimitParameters  (required)
     * @return ApiResponse&lt;Limit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Limit> updateALimitWithHttpInfo(String limitId, UpdateALimitParameters updateALimitParameters) throws ApiException {
        okhttp3.Call localVarCall = updateALimitValidateBeforeCall(limitId, updateALimitParameters, null);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Limit (asynchronously)
     * 
     * @param limitId  (required)
     * @param updateALimitParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Limit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateALimitAsync(String limitId, UpdateALimitParameters updateALimitParameters, final ApiCallback<Limit> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateALimitValidateBeforeCall(limitId, updateALimitParameters, _callback);
        Type localVarReturnType = new TypeToken<Limit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnAccount
     * @param accountId  (required)
     * @param updateAnAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnAccountCall(String accountId, UpdateAnAccountParameters updateAnAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnAccountParameters;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnAccountValidateBeforeCall(String accountId, UpdateAnAccountParameters updateAnAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAnAccount(Async)");
        }

        // verify the required parameter 'updateAnAccountParameters' is set
        if (updateAnAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'updateAnAccountParameters' when calling updateAnAccount(Async)");
        }

        return updateAnAccountCall(accountId, updateAnAccountParameters, _callback);

    }

    /**
     * Update an Account
     * 
     * @param accountId  (required)
     * @param updateAnAccountParameters  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Account updateAnAccount(String accountId, UpdateAnAccountParameters updateAnAccountParameters) throws ApiException {
        ApiResponse<Account> localVarResp = updateAnAccountWithHttpInfo(accountId, updateAnAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Update an Account
     * 
     * @param accountId  (required)
     * @param updateAnAccountParameters  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> updateAnAccountWithHttpInfo(String accountId, UpdateAnAccountParameters updateAnAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = updateAnAccountValidateBeforeCall(accountId, updateAnAccountParameters, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Account (asynchronously)
     * 
     * @param accountId  (required)
     * @param updateAnAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnAccountAsync(String accountId, UpdateAnAccountParameters updateAnAccountParameters, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnAccountValidateBeforeCall(accountId, updateAnAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnAccountNumber
     * @param accountNumberId  (required)
     * @param updateAnAccountNumberParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnAccountNumberCall(String accountNumberId, UpdateAnAccountNumberParameters updateAnAccountNumberParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnAccountNumberParameters;

        // create path and map variables
        String localVarPath = "/account_numbers/{account_number_id}"
            .replace("{" + "account_number_id" + "}", localVarApiClient.escapeString(accountNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnAccountNumberValidateBeforeCall(String accountNumberId, UpdateAnAccountNumberParameters updateAnAccountNumberParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumberId' is set
        if (accountNumberId == null) {
            throw new ApiException("Missing the required parameter 'accountNumberId' when calling updateAnAccountNumber(Async)");
        }

        // verify the required parameter 'updateAnAccountNumberParameters' is set
        if (updateAnAccountNumberParameters == null) {
            throw new ApiException("Missing the required parameter 'updateAnAccountNumberParameters' when calling updateAnAccountNumber(Async)");
        }

        return updateAnAccountNumberCall(accountNumberId, updateAnAccountNumberParameters, _callback);

    }

    /**
     * Update an Account Number
     * 
     * @param accountNumberId  (required)
     * @param updateAnAccountNumberParameters  (required)
     * @return AccountNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AccountNumber updateAnAccountNumber(String accountNumberId, UpdateAnAccountNumberParameters updateAnAccountNumberParameters) throws ApiException {
        ApiResponse<AccountNumber> localVarResp = updateAnAccountNumberWithHttpInfo(accountNumberId, updateAnAccountNumberParameters);
        return localVarResp.getData();
    }

    /**
     * Update an Account Number
     * 
     * @param accountNumberId  (required)
     * @param updateAnAccountNumberParameters  (required)
     * @return ApiResponse&lt;AccountNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountNumber> updateAnAccountNumberWithHttpInfo(String accountNumberId, UpdateAnAccountNumberParameters updateAnAccountNumberParameters) throws ApiException {
        okhttp3.Call localVarCall = updateAnAccountNumberValidateBeforeCall(accountNumberId, updateAnAccountNumberParameters, null);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Account Number (asynchronously)
     * 
     * @param accountNumberId  (required)
     * @param updateAnAccountNumberParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Number </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnAccountNumberAsync(String accountNumberId, UpdateAnAccountNumberParameters updateAnAccountNumberParameters, final ApiCallback<AccountNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnAccountNumberValidateBeforeCall(accountNumberId, updateAnAccountNumberParameters, _callback);
        Type localVarReturnType = new TypeToken<AccountNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnEventSubscription
     * @param eventSubscriptionId  (required)
     * @param updateAnEventSubscriptionParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnEventSubscriptionCall(String eventSubscriptionId, UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnEventSubscriptionParameters;

        // create path and map variables
        String localVarPath = "/event_subscriptions/{event_subscription_id}"
            .replace("{" + "event_subscription_id" + "}", localVarApiClient.escapeString(eventSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnEventSubscriptionValidateBeforeCall(String eventSubscriptionId, UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventSubscriptionId' is set
        if (eventSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionId' when calling updateAnEventSubscription(Async)");
        }

        // verify the required parameter 'updateAnEventSubscriptionParameters' is set
        if (updateAnEventSubscriptionParameters == null) {
            throw new ApiException("Missing the required parameter 'updateAnEventSubscriptionParameters' when calling updateAnEventSubscription(Async)");
        }

        return updateAnEventSubscriptionCall(eventSubscriptionId, updateAnEventSubscriptionParameters, _callback);

    }

    /**
     * Update an Event Subscription
     * 
     * @param eventSubscriptionId  (required)
     * @param updateAnEventSubscriptionParameters  (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription updateAnEventSubscription(String eventSubscriptionId, UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = updateAnEventSubscriptionWithHttpInfo(eventSubscriptionId, updateAnEventSubscriptionParameters);
        return localVarResp.getData();
    }

    /**
     * Update an Event Subscription
     * 
     * @param eventSubscriptionId  (required)
     * @param updateAnEventSubscriptionParameters  (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> updateAnEventSubscriptionWithHttpInfo(String eventSubscriptionId, UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters) throws ApiException {
        okhttp3.Call localVarCall = updateAnEventSubscriptionValidateBeforeCall(eventSubscriptionId, updateAnEventSubscriptionParameters, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Event Subscription (asynchronously)
     * 
     * @param eventSubscriptionId  (required)
     * @param updateAnEventSubscriptionParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Subscription </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnEventSubscriptionAsync(String eventSubscriptionId, UpdateAnEventSubscriptionParameters updateAnEventSubscriptionParameters, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnEventSubscriptionValidateBeforeCall(eventSubscriptionId, updateAnEventSubscriptionParameters, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnExternalAccount
     * @param externalAccountId  (required)
     * @param updateAnExternalAccountParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnExternalAccountCall(String externalAccountId, UpdateAnExternalAccountParameters updateAnExternalAccountParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAnExternalAccountParameters;

        // create path and map variables
        String localVarPath = "/external_accounts/{external_account_id}"
            .replace("{" + "external_account_id" + "}", localVarApiClient.escapeString(externalAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnExternalAccountValidateBeforeCall(String externalAccountId, UpdateAnExternalAccountParameters updateAnExternalAccountParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalAccountId' is set
        if (externalAccountId == null) {
            throw new ApiException("Missing the required parameter 'externalAccountId' when calling updateAnExternalAccount(Async)");
        }

        // verify the required parameter 'updateAnExternalAccountParameters' is set
        if (updateAnExternalAccountParameters == null) {
            throw new ApiException("Missing the required parameter 'updateAnExternalAccountParameters' when calling updateAnExternalAccount(Async)");
        }

        return updateAnExternalAccountCall(externalAccountId, updateAnExternalAccountParameters, _callback);

    }

    /**
     * Update an External Account
     * 
     * @param externalAccountId  (required)
     * @param updateAnExternalAccountParameters  (required)
     * @return ExternalAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ExternalAccount updateAnExternalAccount(String externalAccountId, UpdateAnExternalAccountParameters updateAnExternalAccountParameters) throws ApiException {
        ApiResponse<ExternalAccount> localVarResp = updateAnExternalAccountWithHttpInfo(externalAccountId, updateAnExternalAccountParameters);
        return localVarResp.getData();
    }

    /**
     * Update an External Account
     * 
     * @param externalAccountId  (required)
     * @param updateAnExternalAccountParameters  (required)
     * @return ApiResponse&lt;ExternalAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalAccount> updateAnExternalAccountWithHttpInfo(String externalAccountId, UpdateAnExternalAccountParameters updateAnExternalAccountParameters) throws ApiException {
        okhttp3.Call localVarCall = updateAnExternalAccountValidateBeforeCall(externalAccountId, updateAnExternalAccountParameters, null);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an External Account (asynchronously)
     * 
     * @param externalAccountId  (required)
     * @param updateAnExternalAccountParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> External Account </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnExternalAccountAsync(String externalAccountId, UpdateAnExternalAccountParameters updateAnExternalAccountParameters, final ApiCallback<ExternalAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnExternalAccountValidateBeforeCall(externalAccountId, updateAnExternalAccountParameters, _callback);
        Type localVarReturnType = new TypeToken<ExternalAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
