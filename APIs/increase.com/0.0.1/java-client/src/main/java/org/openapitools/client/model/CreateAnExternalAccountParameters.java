/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnExternalAccountParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnExternalAccountParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of the destination account. Defaults to &#x60;checking&#x60;.
   */
  @JsonAdapter(FundingEnum.Adapter.class)
  public enum FundingEnum {
    /**
     * A checking account.
     */
    CHECKING("checking"),
    
    /**
     * A savings account.
     */
    SAVINGS("savings"),
    
    /**
     * A different type of account.
     */
    OTHER("other");

    private String value;

    FundingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FundingEnum fromValue(String value) {
      for (FundingEnum b : FundingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FundingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FundingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FundingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FundingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FundingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private FundingEnum funding;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public CreateAnExternalAccountParameters() {
  }

  public CreateAnExternalAccountParameters accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the destination account.
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateAnExternalAccountParameters description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The name you choose for the Account.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateAnExternalAccountParameters funding(FundingEnum funding) {
    this.funding = funding;
    return this;
  }

  /**
   * The type of the destination account. Defaults to &#x60;checking&#x60;.
   * @return funding
   */
  @javax.annotation.Nullable
  public FundingEnum getFunding() {
    return funding;
  }

  public void setFunding(FundingEnum funding) {
    this.funding = funding;
  }


  public CreateAnExternalAccountParameters routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The American Bankers&#39; Association (ABA) Routing Transit Number (RTN) for the destination account.
   * @return routingNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnExternalAccountParameters createAnExternalAccountParameters = (CreateAnExternalAccountParameters) o;
    return Objects.equals(this.accountNumber, createAnExternalAccountParameters.accountNumber) &&
        Objects.equals(this.description, createAnExternalAccountParameters.description) &&
        Objects.equals(this.funding, createAnExternalAccountParameters.funding) &&
        Objects.equals(this.routingNumber, createAnExternalAccountParameters.routingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, description, funding, routingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnExternalAccountParameters {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("description");
    openapiFields.add("funding");
    openapiFields.add("routing_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("routing_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnExternalAccountParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnExternalAccountParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnExternalAccountParameters is not found in the empty JSON string", CreateAnExternalAccountParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnExternalAccountParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnExternalAccountParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnExternalAccountParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) && !jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // validate the optional field `funding`
      if (jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) {
        FundingEnum.validateJsonElement(jsonObj.get("funding"));
      }
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnExternalAccountParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnExternalAccountParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnExternalAccountParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnExternalAccountParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnExternalAccountParameters>() {
           @Override
           public void write(JsonWriter out, CreateAnExternalAccountParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnExternalAccountParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnExternalAccountParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnExternalAccountParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAnExternalAccountParameters
   */
  public static CreateAnExternalAccountParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnExternalAccountParameters.class);
  }

  /**
   * Convert an instance of CreateAnExternalAccountParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

