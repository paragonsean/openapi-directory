/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnAccountParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnAccountParameters {
  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_INFORMATIONAL_ENTITY_ID = "informational_entity_id";
  @SerializedName(SERIALIZED_NAME_INFORMATIONAL_ENTITY_ID)
  private String informationalEntityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "program_id";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private String programId;

  public CreateAnAccountParameters() {
  }

  public CreateAnAccountParameters entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The identifier for the Entity that will own the Account.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public CreateAnAccountParameters informationalEntityId(String informationalEntityId) {
    this.informationalEntityId = informationalEntityId;
    return this;
  }

  /**
   * The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be &#x60;informational&#x60;.
   * @return informationalEntityId
   */
  @javax.annotation.Nullable
  public String getInformationalEntityId() {
    return informationalEntityId;
  }

  public void setInformationalEntityId(String informationalEntityId) {
    this.informationalEntityId = informationalEntityId;
  }


  public CreateAnAccountParameters name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name you choose for the Account.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAnAccountParameters programId(String programId) {
    this.programId = programId;
    return this;
  }

  /**
   * The identifier for the Program that this Account falls under.
   * @return programId
   */
  @javax.annotation.Nullable
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnAccountParameters createAnAccountParameters = (CreateAnAccountParameters) o;
    return Objects.equals(this.entityId, createAnAccountParameters.entityId) &&
        Objects.equals(this.informationalEntityId, createAnAccountParameters.informationalEntityId) &&
        Objects.equals(this.name, createAnAccountParameters.name) &&
        Objects.equals(this.programId, createAnAccountParameters.programId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, informationalEntityId, name, programId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnAccountParameters {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    informationalEntityId: ").append(toIndentedString(informationalEntityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("informational_entity_id");
    openapiFields.add("name");
    openapiFields.add("program_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnAccountParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnAccountParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnAccountParameters is not found in the empty JSON string", CreateAnAccountParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnAccountParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnAccountParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnAccountParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if ((jsonObj.get("informational_entity_id") != null && !jsonObj.get("informational_entity_id").isJsonNull()) && !jsonObj.get("informational_entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `informational_entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("informational_entity_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("program_id") != null && !jsonObj.get("program_id").isJsonNull()) && !jsonObj.get("program_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnAccountParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnAccountParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnAccountParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnAccountParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnAccountParameters>() {
           @Override
           public void write(JsonWriter out, CreateAnAccountParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnAccountParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnAccountParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnAccountParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAnAccountParameters
   */
  public static CreateAnAccountParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnAccountParameters.class);
  }

  /**
   * Convert an instance of CreateAnAccountParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

