/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;wire_drawdown_payment_instruction&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WireDrawdownPaymentInstruction {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_MESSAGE_TO_RECIPIENT = "message_to_recipient";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_RECIPIENT)
  private String messageToRecipient;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public WireDrawdownPaymentInstruction() {
  }

  public WireDrawdownPaymentInstruction accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * 
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public WireDrawdownPaymentInstruction amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The pending amount in the minor unit of the transaction&#39;s currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public WireDrawdownPaymentInstruction messageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
    return this;
  }

  /**
   * 
   * @return messageToRecipient
   */
  @javax.annotation.Nonnull
  public String getMessageToRecipient() {
    return messageToRecipient;
  }

  public void setMessageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
  }


  public WireDrawdownPaymentInstruction routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * 
   * @return routingNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WireDrawdownPaymentInstruction wireDrawdownPaymentInstruction = (WireDrawdownPaymentInstruction) o;
    return Objects.equals(this.accountNumber, wireDrawdownPaymentInstruction.accountNumber) &&
        Objects.equals(this.amount, wireDrawdownPaymentInstruction.amount) &&
        Objects.equals(this.messageToRecipient, wireDrawdownPaymentInstruction.messageToRecipient) &&
        Objects.equals(this.routingNumber, wireDrawdownPaymentInstruction.routingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, amount, messageToRecipient, routingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WireDrawdownPaymentInstruction {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    messageToRecipient: ").append(toIndentedString(messageToRecipient)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("amount");
    openapiFields.add("message_to_recipient");
    openapiFields.add("routing_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("message_to_recipient");
    openapiRequiredFields.add("routing_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WireDrawdownPaymentInstruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WireDrawdownPaymentInstruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WireDrawdownPaymentInstruction is not found in the empty JSON string", WireDrawdownPaymentInstruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WireDrawdownPaymentInstruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WireDrawdownPaymentInstruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WireDrawdownPaymentInstruction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("message_to_recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_to_recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_to_recipient").toString()));
      }
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WireDrawdownPaymentInstruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WireDrawdownPaymentInstruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WireDrawdownPaymentInstruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WireDrawdownPaymentInstruction.class));

       return (TypeAdapter<T>) new TypeAdapter<WireDrawdownPaymentInstruction>() {
           @Override
           public void write(JsonWriter out, WireDrawdownPaymentInstruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WireDrawdownPaymentInstruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WireDrawdownPaymentInstruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WireDrawdownPaymentInstruction
   * @throws IOException if the JSON string is invalid with respect to WireDrawdownPaymentInstruction
   */
  public static WireDrawdownPaymentInstruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WireDrawdownPaymentInstruction.class);
  }

  /**
   * Convert an instance of WireDrawdownPaymentInstruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

