/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TextColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DigitalWallets {
  public static final String SERIALIZED_NAME_APP_ICON_FILE_ID = "app_icon_file_id";
  @SerializedName(SERIALIZED_NAME_APP_ICON_FILE_ID)
  private String appIconFileId;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE_FILE_ID = "background_image_file_id";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE_FILE_ID)
  private String backgroundImageFileId;

  public static final String SERIALIZED_NAME_CARD_DESCRIPTION = "card_description";
  @SerializedName(SERIALIZED_NAME_CARD_DESCRIPTION)
  private String cardDescription;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contact_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_PHONE = "contact_phone";
  @SerializedName(SERIALIZED_NAME_CONTACT_PHONE)
  private String contactPhone;

  public static final String SERIALIZED_NAME_CONTACT_WEBSITE = "contact_website";
  @SerializedName(SERIALIZED_NAME_CONTACT_WEBSITE)
  private String contactWebsite;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuer_name";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private TextColor textColor;

  public DigitalWallets() {
  }

  public DigitalWallets appIconFileId(String appIconFileId) {
    this.appIconFileId = appIconFileId;
    return this;
  }

  /**
   * The identifier of the File containing the card&#39;s icon image.
   * @return appIconFileId
   */
  @javax.annotation.Nonnull
  public String getAppIconFileId() {
    return appIconFileId;
  }

  public void setAppIconFileId(String appIconFileId) {
    this.appIconFileId = appIconFileId;
  }


  public DigitalWallets backgroundImageFileId(String backgroundImageFileId) {
    this.backgroundImageFileId = backgroundImageFileId;
    return this;
  }

  /**
   * The identifier of the File containing the card&#39;s front image.
   * @return backgroundImageFileId
   */
  @javax.annotation.Nonnull
  public String getBackgroundImageFileId() {
    return backgroundImageFileId;
  }

  public void setBackgroundImageFileId(String backgroundImageFileId) {
    this.backgroundImageFileId = backgroundImageFileId;
  }


  public DigitalWallets cardDescription(String cardDescription) {
    this.cardDescription = cardDescription;
    return this;
  }

  /**
   * A user-facing description for the card itself.
   * @return cardDescription
   */
  @javax.annotation.Nonnull
  public String getCardDescription() {
    return cardDescription;
  }

  public void setCardDescription(String cardDescription) {
    this.cardDescription = cardDescription;
  }


  public DigitalWallets contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * An email address the user can contact to receive support for their card.
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public DigitalWallets contactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
    return this;
  }

  /**
   * A phone number the user can contact to receive support for their card.
   * @return contactPhone
   */
  @javax.annotation.Nullable
  public String getContactPhone() {
    return contactPhone;
  }

  public void setContactPhone(String contactPhone) {
    this.contactPhone = contactPhone;
  }


  public DigitalWallets contactWebsite(String contactWebsite) {
    this.contactWebsite = contactWebsite;
    return this;
  }

  /**
   * A website the user can visit to view and receive support for their card.
   * @return contactWebsite
   */
  @javax.annotation.Nullable
  public String getContactWebsite() {
    return contactWebsite;
  }

  public void setContactWebsite(String contactWebsite) {
    this.contactWebsite = contactWebsite;
  }


  public DigitalWallets issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * A user-facing description for whoever is issuing the card.
   * @return issuerName
   */
  @javax.annotation.Nonnull
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  public DigitalWallets textColor(TextColor textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Get textColor
   * @return textColor
   */
  @javax.annotation.Nonnull
  public TextColor getTextColor() {
    return textColor;
  }

  public void setTextColor(TextColor textColor) {
    this.textColor = textColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalWallets digitalWallets = (DigitalWallets) o;
    return Objects.equals(this.appIconFileId, digitalWallets.appIconFileId) &&
        Objects.equals(this.backgroundImageFileId, digitalWallets.backgroundImageFileId) &&
        Objects.equals(this.cardDescription, digitalWallets.cardDescription) &&
        Objects.equals(this.contactEmail, digitalWallets.contactEmail) &&
        Objects.equals(this.contactPhone, digitalWallets.contactPhone) &&
        Objects.equals(this.contactWebsite, digitalWallets.contactWebsite) &&
        Objects.equals(this.issuerName, digitalWallets.issuerName) &&
        Objects.equals(this.textColor, digitalWallets.textColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appIconFileId, backgroundImageFileId, cardDescription, contactEmail, contactPhone, contactWebsite, issuerName, textColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalWallets {\n");
    sb.append("    appIconFileId: ").append(toIndentedString(appIconFileId)).append("\n");
    sb.append("    backgroundImageFileId: ").append(toIndentedString(backgroundImageFileId)).append("\n");
    sb.append("    cardDescription: ").append(toIndentedString(cardDescription)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactPhone: ").append(toIndentedString(contactPhone)).append("\n");
    sb.append("    contactWebsite: ").append(toIndentedString(contactWebsite)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_icon_file_id");
    openapiFields.add("background_image_file_id");
    openapiFields.add("card_description");
    openapiFields.add("contact_email");
    openapiFields.add("contact_phone");
    openapiFields.add("contact_website");
    openapiFields.add("issuer_name");
    openapiFields.add("text_color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_icon_file_id");
    openapiRequiredFields.add("background_image_file_id");
    openapiRequiredFields.add("card_description");
    openapiRequiredFields.add("contact_email");
    openapiRequiredFields.add("contact_phone");
    openapiRequiredFields.add("contact_website");
    openapiRequiredFields.add("issuer_name");
    openapiRequiredFields.add("text_color");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DigitalWallets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalWallets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalWallets is not found in the empty JSON string", DigitalWallets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalWallets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalWallets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalWallets.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_icon_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_icon_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_icon_file_id").toString()));
      }
      if (!jsonObj.get("background_image_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_image_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_image_file_id").toString()));
      }
      if (!jsonObj.get("card_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_description").toString()));
      }
      if ((jsonObj.get("contact_email") != null && !jsonObj.get("contact_email").isJsonNull()) && !jsonObj.get("contact_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_email").toString()));
      }
      if ((jsonObj.get("contact_phone") != null && !jsonObj.get("contact_phone").isJsonNull()) && !jsonObj.get("contact_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_phone").toString()));
      }
      if ((jsonObj.get("contact_website") != null && !jsonObj.get("contact_website").isJsonNull()) && !jsonObj.get("contact_website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_website").toString()));
      }
      if (!jsonObj.get("issuer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_name").toString()));
      }
      // validate the required field `text_color`
      TextColor.validateJsonElement(jsonObj.get("text_color"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalWallets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalWallets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalWallets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalWallets.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalWallets>() {
           @Override
           public void write(JsonWriter out, DigitalWallets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalWallets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DigitalWallets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DigitalWallets
   * @throws IOException if the JSON string is invalid with respect to DigitalWallets
   */
  public static DigitalWallets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalWallets.class);
  }

  /**
   * Convert an instance of DigitalWallets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

