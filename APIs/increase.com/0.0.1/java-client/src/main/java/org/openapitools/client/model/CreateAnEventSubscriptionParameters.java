/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnEventSubscriptionParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnEventSubscriptionParameters {
  /**
   * If specified, this subscription will only receive webhooks for Events with the specified &#x60;category&#x60;.
   */
  @JsonAdapter(SelectedEventCategoryEnum.Adapter.class)
  public enum SelectedEventCategoryEnum {
    /**
     * Occurs whenever an Account is created.
     */
    ACCOUNT_CREATED("account.created"),
    
    /**
     * Occurs whenever an Account is updated.
     */
    ACCOUNT_UPDATED("account.updated"),
    
    /**
     * Occurs whenever an Account Number is created.
     */
    ACCOUNT_NUMBER_CREATED("account_number.created"),
    
    /**
     * Occurs whenever an Account Number is updated.
     */
    ACCOUNT_NUMBER_UPDATED("account_number.updated"),
    
    /**
     * Occurs whenever an Account Statement is created.
     */
    ACCOUNT_STATEMENT_CREATED("account_statement.created"),
    
    /**
     * Occurs whenever an Account Transfer is created.
     */
    ACCOUNT_TRANSFER_CREATED("account_transfer.created"),
    
    /**
     * Occurs whenever an Account Transfer is updated.
     */
    ACCOUNT_TRANSFER_UPDATED("account_transfer.updated"),
    
    /**
     * Occurs whenever an ACH Prenotification is created.
     */
    ACH_PRENOTIFICATION_CREATED("ach_prenotification.created"),
    
    /**
     * Occurs whenever an ACH Prenotification is updated.
     */
    ACH_PRENOTIFICATION_UPDATED("ach_prenotification.updated"),
    
    /**
     * Occurs whenever an ACH Transfer is created.
     */
    ACH_TRANSFER_CREATED("ach_transfer.created"),
    
    /**
     * Occurs whenever an ACH Transfer is updated.
     */
    ACH_TRANSFER_UPDATED("ach_transfer.updated"),
    
    /**
     * Occurs whenever a Card is created.
     */
    CARD_CREATED("card.created"),
    
    /**
     * Occurs whenever a Card is updated.
     */
    CARD_UPDATED("card.updated"),
    
    /**
     * Occurs whenever a Card Payment is created.
     */
    CARD_PAYMENT_CREATED("card_payment.created"),
    
    /**
     * Occurs whenever a Card Payment is updated.
     */
    CARD_PAYMENT_UPDATED("card_payment.updated"),
    
    /**
     * Occurs whenever a Card Dispute is created.
     */
    CARD_DISPUTE_CREATED("card_dispute.created"),
    
    /**
     * Occurs whenever a Card Dispute is updated.
     */
    CARD_DISPUTE_UPDATED("card_dispute.updated"),
    
    /**
     * Occurs whenever a Check Deposit is created.
     */
    CHECK_DEPOSIT_CREATED("check_deposit.created"),
    
    /**
     * Occurs whenever a Check Deposit is updated.
     */
    CHECK_DEPOSIT_UPDATED("check_deposit.updated"),
    
    /**
     * Occurs whenever a Check Transfer is created.
     */
    CHECK_TRANSFER_CREATED("check_transfer.created"),
    
    /**
     * Occurs whenever a Check Transfer is updated.
     */
    CHECK_TRANSFER_UPDATED("check_transfer.updated"),
    
    /**
     * Occurs whenever a Declined Transaction is created.
     */
    DECLINED_TRANSACTION_CREATED("declined_transaction.created"),
    
    /**
     * Occurs whenever a Digital Wallet Token is created.
     */
    DIGITAL_WALLET_TOKEN_CREATED("digital_wallet_token.created"),
    
    /**
     * Occurs whenever a Digital Wallet Token is updated.
     */
    DIGITAL_WALLET_TOKEN_UPDATED("digital_wallet_token.updated"),
    
    /**
     * Occurs whenever a Document is created.
     */
    DOCUMENT_CREATED("document.created"),
    
    /**
     * Occurs whenever an Entity is created.
     */
    ENTITY_CREATED("entity.created"),
    
    /**
     * Occurs whenever an Entity is updated.
     */
    ENTITY_UPDATED("entity.updated"),
    
    /**
     * Occurs whenever an External Account is created.
     */
    EXTERNAL_ACCOUNT_CREATED("external_account.created"),
    
    /**
     * Occurs whenever a File is created.
     */
    FILE_CREATED("file.created"),
    
    /**
     * Occurs whenever a Group is updated.
     */
    GROUP_UPDATED("group.updated"),
    
    /**
     * Increase may send webhooks with this category to see if a webhook endpoint is working properly.
     */
    GROUP_HEARTBEAT("group.heartbeat"),
    
    /**
     * Occurs whenever an Inbound ACH Transfer Return is created.
     */
    INBOUND_ACH_TRANSFER_RETURN_CREATED("inbound_ach_transfer_return.created"),
    
    /**
     * Occurs whenever an Inbound ACH Transfer Return is updated.
     */
    INBOUND_ACH_TRANSFER_RETURN_UPDATED("inbound_ach_transfer_return.updated"),
    
    /**
     * Occurs whenever an Inbound Wire Drawdown Request is created.
     */
    INBOUND_WIRE_DRAWDOWN_REQUEST_CREATED("inbound_wire_drawdown_request.created"),
    
    /**
     * Occurs whenever an OAuth Connection is created.
     */
    OAUTH_CONNECTION_CREATED("oauth_connection.created"),
    
    /**
     * Occurs whenever an OAuth Connection is deactivated.
     */
    OAUTH_CONNECTION_DEACTIVATED("oauth_connection.deactivated"),
    
    /**
     * Occurs whenever a Pending Transaction is created.
     */
    PENDING_TRANSACTION_CREATED("pending_transaction.created"),
    
    /**
     * Occurs whenever a Pending Transaction is updated.
     */
    PENDING_TRANSACTION_UPDATED("pending_transaction.updated"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a card authorization.
     */
    REAL_TIME_DECISION_CARD_AUTHORIZATION_REQUESTED("real_time_decision.card_authorization_requested"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.
     */
    REAL_TIME_DECISION_DIGITAL_WALLET_TOKEN_REQUESTED("real_time_decision.digital_wallet_token_requested"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.
     */
    REAL_TIME_DECISION_DIGITAL_WALLET_AUTHENTICATION_REQUESTED("real_time_decision.digital_wallet_authentication_requested"),
    
    /**
     * Occurs whenever a Real Time Payments Transfer is created.
     */
    REAL_TIME_PAYMENTS_TRANSFER_CREATED("real_time_payments_transfer.created"),
    
    /**
     * Occurs whenever a Real Time Payments Transfer is updated.
     */
    REAL_TIME_PAYMENTS_TRANSFER_UPDATED("real_time_payments_transfer.updated"),
    
    /**
     * Occurs whenever a Real Time Payments Request for Payment is created.
     */
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_CREATED("real_time_payments_request_for_payment.created"),
    
    /**
     * Occurs whenever a Real Time Payments Request for Payment is updated.
     */
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_UPDATED("real_time_payments_request_for_payment.updated"),
    
    /**
     * Occurs whenever a Transaction is updated.
     */
    TRANSACTION_CREATED("transaction.created"),
    
    /**
     * Occurs whenever a Wire Drawdown Request is created.
     */
    WIRE_DRAWDOWN_REQUEST_CREATED("wire_drawdown_request.created"),
    
    /**
     * Occurs whenever a Wire Drawdown Request is updated.
     */
    WIRE_DRAWDOWN_REQUEST_UPDATED("wire_drawdown_request.updated"),
    
    /**
     * Occurs whenever a Wire Transfer is created.
     */
    WIRE_TRANSFER_CREATED("wire_transfer.created"),
    
    /**
     * Occurs whenever a Wire Transfer is updated.
     */
    WIRE_TRANSFER_UPDATED("wire_transfer.updated");

    private String value;

    SelectedEventCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelectedEventCategoryEnum fromValue(String value) {
      for (SelectedEventCategoryEnum b : SelectedEventCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelectedEventCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectedEventCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectedEventCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelectedEventCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelectedEventCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELECTED_EVENT_CATEGORY = "selected_event_category";
  @SerializedName(SERIALIZED_NAME_SELECTED_EVENT_CATEGORY)
  private SelectedEventCategoryEnum selectedEventCategory;

  public static final String SERIALIZED_NAME_SHARED_SECRET = "shared_secret";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET)
  private String sharedSecret;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CreateAnEventSubscriptionParameters() {
  }

  public CreateAnEventSubscriptionParameters selectedEventCategory(SelectedEventCategoryEnum selectedEventCategory) {
    this.selectedEventCategory = selectedEventCategory;
    return this;
  }

  /**
   * If specified, this subscription will only receive webhooks for Events with the specified &#x60;category&#x60;.
   * @return selectedEventCategory
   */
  @javax.annotation.Nullable
  public SelectedEventCategoryEnum getSelectedEventCategory() {
    return selectedEventCategory;
  }

  public void setSelectedEventCategory(SelectedEventCategoryEnum selectedEventCategory) {
    this.selectedEventCategory = selectedEventCategory;
  }


  public CreateAnEventSubscriptionParameters sharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
    return this;
  }

  /**
   * The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.
   * @return sharedSecret
   */
  @javax.annotation.Nullable
  public String getSharedSecret() {
    return sharedSecret;
  }

  public void setSharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
  }


  public CreateAnEventSubscriptionParameters url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL you&#39;d like us to send webhooks to.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnEventSubscriptionParameters createAnEventSubscriptionParameters = (CreateAnEventSubscriptionParameters) o;
    return Objects.equals(this.selectedEventCategory, createAnEventSubscriptionParameters.selectedEventCategory) &&
        Objects.equals(this.sharedSecret, createAnEventSubscriptionParameters.sharedSecret) &&
        Objects.equals(this.url, createAnEventSubscriptionParameters.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectedEventCategory, sharedSecret, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnEventSubscriptionParameters {\n");
    sb.append("    selectedEventCategory: ").append(toIndentedString(selectedEventCategory)).append("\n");
    sb.append("    sharedSecret: ").append(toIndentedString(sharedSecret)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("selected_event_category");
    openapiFields.add("shared_secret");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnEventSubscriptionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnEventSubscriptionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnEventSubscriptionParameters is not found in the empty JSON string", CreateAnEventSubscriptionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnEventSubscriptionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnEventSubscriptionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnEventSubscriptionParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("selected_event_category") != null && !jsonObj.get("selected_event_category").isJsonNull()) && !jsonObj.get("selected_event_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_event_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selected_event_category").toString()));
      }
      // validate the optional field `selected_event_category`
      if (jsonObj.get("selected_event_category") != null && !jsonObj.get("selected_event_category").isJsonNull()) {
        SelectedEventCategoryEnum.validateJsonElement(jsonObj.get("selected_event_category"));
      }
      if ((jsonObj.get("shared_secret") != null && !jsonObj.get("shared_secret").isJsonNull()) && !jsonObj.get("shared_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_secret").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnEventSubscriptionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnEventSubscriptionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnEventSubscriptionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnEventSubscriptionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnEventSubscriptionParameters>() {
           @Override
           public void write(JsonWriter out, CreateAnEventSubscriptionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnEventSubscriptionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnEventSubscriptionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnEventSubscriptionParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAnEventSubscriptionParameters
   */
  public static CreateAnEventSubscriptionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnEventSubscriptionParameters.class);
  }

  /**
   * Convert an instance of CreateAnEventSubscriptionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

