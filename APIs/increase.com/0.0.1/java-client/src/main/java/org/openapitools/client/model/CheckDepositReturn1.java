/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Check Deposit Return object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;check_deposit_return&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckDepositReturn1 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CHECK_DEPOSIT_ID = "check_deposit_id";
  @SerializedName(SERIALIZED_NAME_CHECK_DEPOSIT_ID)
  private String checkDepositId;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction&#39;s currency.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  /**
   * 
   */
  @JsonAdapter(ReturnReasonEnum.Adapter.class)
  public enum ReturnReasonEnum {
    /**
     * The check doesn&#39;t allow ACH conversion.
     */
    ACH_CONVERSION_NOT_SUPPORTED("ach_conversion_not_supported"),
    
    /**
     * The account is closed.
     */
    CLOSED_ACCOUNT("closed_account"),
    
    /**
     * The check has already been deposited.
     */
    DUPLICATE_SUBMISSION("duplicate_submission"),
    
    /**
     * Insufficient funds
     */
    INSUFFICIENT_FUNDS("insufficient_funds"),
    
    /**
     * No account was found matching the check details.
     */
    NO_ACCOUNT("no_account"),
    
    /**
     * The check was not authorized.
     */
    NOT_AUTHORIZED("not_authorized"),
    
    /**
     * The check is too old.
     */
    STALE_DATED("stale_dated"),
    
    /**
     * The payment has been stopped by the account holder.
     */
    STOP_PAYMENT("stop_payment"),
    
    /**
     * The reason for the return is unknown.
     */
    UNKNOWN_REASON("unknown_reason"),
    
    /**
     * The image doesn&#39;t match the details submitted.
     */
    UNMATCHED_DETAILS("unmatched_details"),
    
    /**
     * The image could not be read.
     */
    UNREADABLE_IMAGE("unreadable_image");

    private String value;

    ReturnReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnReasonEnum fromValue(String value) {
      for (ReturnReasonEnum b : ReturnReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_REASON = "return_reason";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON)
  private ReturnReasonEnum returnReason;

  public static final String SERIALIZED_NAME_RETURNED_AT = "returned_at";
  @SerializedName(SERIALIZED_NAME_RETURNED_AT)
  private OffsetDateTime returnedAt;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public CheckDepositReturn1() {
  }

  public CheckDepositReturn1 amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount in the minor unit of the transaction&#39;s currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CheckDepositReturn1 checkDepositId(String checkDepositId) {
    this.checkDepositId = checkDepositId;
    return this;
  }

  /**
   * The identifier of the Check Deposit that was returned.
   * @return checkDepositId
   */
  @javax.annotation.Nonnull
  public String getCheckDepositId() {
    return checkDepositId;
  }

  public void setCheckDepositId(String checkDepositId) {
    this.checkDepositId = checkDepositId;
  }


  public CheckDepositReturn1 currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction&#39;s currency.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public CheckDepositReturn1 returnReason(ReturnReasonEnum returnReason) {
    this.returnReason = returnReason;
    return this;
  }

  /**
   * 
   * @return returnReason
   */
  @javax.annotation.Nonnull
  public ReturnReasonEnum getReturnReason() {
    return returnReason;
  }

  public void setReturnReason(ReturnReasonEnum returnReason) {
    this.returnReason = returnReason;
  }


  public CheckDepositReturn1 returnedAt(OffsetDateTime returnedAt) {
    this.returnedAt = returnedAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
   * @return returnedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getReturnedAt() {
    return returnedAt;
  }

  public void setReturnedAt(OffsetDateTime returnedAt) {
    this.returnedAt = returnedAt;
  }


  public CheckDepositReturn1 transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The identifier of the transaction that reversed the original check deposit transaction.
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckDepositReturn1 checkDepositReturn1 = (CheckDepositReturn1) o;
    return Objects.equals(this.amount, checkDepositReturn1.amount) &&
        Objects.equals(this.checkDepositId, checkDepositReturn1.checkDepositId) &&
        Objects.equals(this.currency, checkDepositReturn1.currency) &&
        Objects.equals(this.returnReason, checkDepositReturn1.returnReason) &&
        Objects.equals(this.returnedAt, checkDepositReturn1.returnedAt) &&
        Objects.equals(this.transactionId, checkDepositReturn1.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, checkDepositId, currency, returnReason, returnedAt, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckDepositReturn1 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    checkDepositId: ").append(toIndentedString(checkDepositId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    returnReason: ").append(toIndentedString(returnReason)).append("\n");
    sb.append("    returnedAt: ").append(toIndentedString(returnedAt)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("check_deposit_id");
    openapiFields.add("currency");
    openapiFields.add("return_reason");
    openapiFields.add("returned_at");
    openapiFields.add("transaction_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("check_deposit_id");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("return_reason");
    openapiRequiredFields.add("returned_at");
    openapiRequiredFields.add("transaction_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckDepositReturn1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckDepositReturn1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckDepositReturn1 is not found in the empty JSON string", CheckDepositReturn1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckDepositReturn1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckDepositReturn1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckDepositReturn1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("check_deposit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_deposit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_deposit_id").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("return_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_reason").toString()));
      }
      // validate the required field `return_reason`
      ReturnReasonEnum.validateJsonElement(jsonObj.get("return_reason"));
      if (!jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckDepositReturn1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckDepositReturn1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckDepositReturn1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckDepositReturn1.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckDepositReturn1>() {
           @Override
           public void write(JsonWriter out, CheckDepositReturn1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckDepositReturn1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckDepositReturn1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckDepositReturn1
   * @throws IOException if the JSON string is invalid with respect to CheckDepositReturn1
   */
  public static CheckDepositReturn1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckDepositReturn1.class);
  }

  /**
   * Convert an instance of CheckDepositReturn1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

