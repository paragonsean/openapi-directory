/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address2;
import org.openapitools.client.model.Individual3;
import org.openapitools.client.model.TrusteesElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the trust entity. Will be present if &#x60;structure&#x60; is equal to &#x60;trust&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trust {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address2 address;

  /**
   * Whether the trust is &#x60;revocable&#x60; or &#x60;irrevocable&#x60;.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * The trust is revocable by the grantor.
     */
    REVOCABLE("revocable"),
    
    /**
     * The trust cannot be revoked.
     */
    IRREVOCABLE("irrevocable");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_FORMATION_DOCUMENT_FILE_ID = "formation_document_file_id";
  @SerializedName(SERIALIZED_NAME_FORMATION_DOCUMENT_FILE_ID)
  private String formationDocumentFileId;

  public static final String SERIALIZED_NAME_FORMATION_STATE = "formation_state";
  @SerializedName(SERIALIZED_NAME_FORMATION_STATE)
  private String formationState;

  public static final String SERIALIZED_NAME_GRANTOR = "grantor";
  @SerializedName(SERIALIZED_NAME_GRANTOR)
  private Individual3 grantor;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIER = "tax_identifier";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIER)
  private String taxIdentifier;

  public static final String SERIALIZED_NAME_TRUSTEES = "trustees";
  @SerializedName(SERIALIZED_NAME_TRUSTEES)
  private List<TrusteesElement> trustees = new ArrayList<>();

  public Trust() {
  }

  public Trust address(Address2 address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address2 getAddress() {
    return address;
  }

  public void setAddress(Address2 address) {
    this.address = address;
  }


  public Trust category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Whether the trust is &#x60;revocable&#x60; or &#x60;irrevocable&#x60;.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Trust formationDocumentFileId(String formationDocumentFileId) {
    this.formationDocumentFileId = formationDocumentFileId;
    return this;
  }

  /**
   * The ID for the File containing the formation document of the trust.
   * @return formationDocumentFileId
   */
  @javax.annotation.Nullable
  public String getFormationDocumentFileId() {
    return formationDocumentFileId;
  }

  public void setFormationDocumentFileId(String formationDocumentFileId) {
    this.formationDocumentFileId = formationDocumentFileId;
  }


  public Trust formationState(String formationState) {
    this.formationState = formationState;
    return this;
  }

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
   * @return formationState
   */
  @javax.annotation.Nullable
  public String getFormationState() {
    return formationState;
  }

  public void setFormationState(String formationState) {
    this.formationState = formationState;
  }


  public Trust grantor(Individual3 grantor) {
    this.grantor = grantor;
    return this;
  }

  /**
   * Get grantor
   * @return grantor
   */
  @javax.annotation.Nullable
  public Individual3 getGrantor() {
    return grantor;
  }

  public void setGrantor(Individual3 grantor) {
    this.grantor = grantor;
  }


  public Trust name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The trust&#39;s name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Trust taxIdentifier(String taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
    return this;
  }

  /**
   * The Employer Identification Number (EIN) of the trust itself.
   * @return taxIdentifier
   */
  @javax.annotation.Nullable
  public String getTaxIdentifier() {
    return taxIdentifier;
  }

  public void setTaxIdentifier(String taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
  }


  public Trust trustees(List<TrusteesElement> trustees) {
    this.trustees = trustees;
    return this;
  }

  public Trust addTrusteesItem(TrusteesElement trusteesItem) {
    if (this.trustees == null) {
      this.trustees = new ArrayList<>();
    }
    this.trustees.add(trusteesItem);
    return this;
  }

  /**
   * The trustees of the trust.
   * @return trustees
   */
  @javax.annotation.Nonnull
  public List<TrusteesElement> getTrustees() {
    return trustees;
  }

  public void setTrustees(List<TrusteesElement> trustees) {
    this.trustees = trustees;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trust trust = (Trust) o;
    return Objects.equals(this.address, trust.address) &&
        Objects.equals(this.category, trust.category) &&
        Objects.equals(this.formationDocumentFileId, trust.formationDocumentFileId) &&
        Objects.equals(this.formationState, trust.formationState) &&
        Objects.equals(this.grantor, trust.grantor) &&
        Objects.equals(this.name, trust.name) &&
        Objects.equals(this.taxIdentifier, trust.taxIdentifier) &&
        Objects.equals(this.trustees, trust.trustees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, category, formationDocumentFileId, formationState, grantor, name, taxIdentifier, trustees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trust {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    formationDocumentFileId: ").append(toIndentedString(formationDocumentFileId)).append("\n");
    sb.append("    formationState: ").append(toIndentedString(formationState)).append("\n");
    sb.append("    grantor: ").append(toIndentedString(grantor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taxIdentifier: ").append(toIndentedString(taxIdentifier)).append("\n");
    sb.append("    trustees: ").append(toIndentedString(trustees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("category");
    openapiFields.add("formation_document_file_id");
    openapiFields.add("formation_state");
    openapiFields.add("grantor");
    openapiFields.add("name");
    openapiFields.add("tax_identifier");
    openapiFields.add("trustees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("formation_document_file_id");
    openapiRequiredFields.add("formation_state");
    openapiRequiredFields.add("grantor");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tax_identifier");
    openapiRequiredFields.add("trustees");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trust
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trust.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trust is not found in the empty JSON string", Trust.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trust.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trust` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Trust.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      Address2.validateJsonElement(jsonObj.get("address"));
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      if ((jsonObj.get("formation_document_file_id") != null && !jsonObj.get("formation_document_file_id").isJsonNull()) && !jsonObj.get("formation_document_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formation_document_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formation_document_file_id").toString()));
      }
      if ((jsonObj.get("formation_state") != null && !jsonObj.get("formation_state").isJsonNull()) && !jsonObj.get("formation_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formation_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formation_state").toString()));
      }
      // validate the required field `grantor`
      Individual3.validateJsonElement(jsonObj.get("grantor"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tax_identifier") != null && !jsonObj.get("tax_identifier").isJsonNull()) && !jsonObj.get("tax_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_identifier").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("trustees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustees` to be an array in the JSON string but got `%s`", jsonObj.get("trustees").toString()));
      }

      JsonArray jsonArraytrustees = jsonObj.getAsJsonArray("trustees");
      // validate the required field `trustees` (array)
      for (int i = 0; i < jsonArraytrustees.size(); i++) {
        TrusteesElement.validateJsonElement(jsonArraytrustees.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trust.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trust' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trust> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trust.class));

       return (TypeAdapter<T>) new TypeAdapter<Trust>() {
           @Override
           public void write(JsonWriter out, Trust value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trust read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trust given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trust
   * @throws IOException if the JSON string is invalid with respect to Trust
   */
  public static Trust fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trust.class);
  }

  /**
   * Convert an instance of Trust to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

