/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulateAnAuthorizationOnACardParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulateAnAuthorizationOnACardParameters {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_DIGITAL_WALLET_TOKEN_ID = "digital_wallet_token_id";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET_TOKEN_ID)
  private String digitalWalletTokenId;

  public static final String SERIALIZED_NAME_EVENT_SUBSCRIPTION_ID = "event_subscription_id";
  @SerializedName(SERIALIZED_NAME_EVENT_SUBSCRIPTION_ID)
  private String eventSubscriptionId;

  public SimulateAnAuthorizationOnACardParameters() {
  }

  public SimulateAnAuthorizationOnACardParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The authorization amount in cents.
   * minimum: 1
   * maximum: 1000000000
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public SimulateAnAuthorizationOnACardParameters cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The identifier of the Card to be authorized.
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public SimulateAnAuthorizationOnACardParameters digitalWalletTokenId(String digitalWalletTokenId) {
    this.digitalWalletTokenId = digitalWalletTokenId;
    return this;
  }

  /**
   * The identifier of the Digital Wallet Token to be authorized.
   * @return digitalWalletTokenId
   */
  @javax.annotation.Nullable
  public String getDigitalWalletTokenId() {
    return digitalWalletTokenId;
  }

  public void setDigitalWalletTokenId(String digitalWalletTokenId) {
    this.digitalWalletTokenId = digitalWalletTokenId;
  }


  public SimulateAnAuthorizationOnACardParameters eventSubscriptionId(String eventSubscriptionId) {
    this.eventSubscriptionId = eventSubscriptionId;
    return this;
  }

  /**
   * The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes.
   * @return eventSubscriptionId
   */
  @javax.annotation.Nullable
  public String getEventSubscriptionId() {
    return eventSubscriptionId;
  }

  public void setEventSubscriptionId(String eventSubscriptionId) {
    this.eventSubscriptionId = eventSubscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateAnAuthorizationOnACardParameters simulateAnAuthorizationOnACardParameters = (SimulateAnAuthorizationOnACardParameters) o;
    return Objects.equals(this.amount, simulateAnAuthorizationOnACardParameters.amount) &&
        Objects.equals(this.cardId, simulateAnAuthorizationOnACardParameters.cardId) &&
        Objects.equals(this.digitalWalletTokenId, simulateAnAuthorizationOnACardParameters.digitalWalletTokenId) &&
        Objects.equals(this.eventSubscriptionId, simulateAnAuthorizationOnACardParameters.eventSubscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, cardId, digitalWalletTokenId, eventSubscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateAnAuthorizationOnACardParameters {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    digitalWalletTokenId: ").append(toIndentedString(digitalWalletTokenId)).append("\n");
    sb.append("    eventSubscriptionId: ").append(toIndentedString(eventSubscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("card_id");
    openapiFields.add("digital_wallet_token_id");
    openapiFields.add("event_subscription_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulateAnAuthorizationOnACardParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulateAnAuthorizationOnACardParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulateAnAuthorizationOnACardParameters is not found in the empty JSON string", SimulateAnAuthorizationOnACardParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulateAnAuthorizationOnACardParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulateAnAuthorizationOnACardParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulateAnAuthorizationOnACardParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("digital_wallet_token_id") != null && !jsonObj.get("digital_wallet_token_id").isJsonNull()) && !jsonObj.get("digital_wallet_token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_wallet_token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_wallet_token_id").toString()));
      }
      if ((jsonObj.get("event_subscription_id") != null && !jsonObj.get("event_subscription_id").isJsonNull()) && !jsonObj.get("event_subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_subscription_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulateAnAuthorizationOnACardParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulateAnAuthorizationOnACardParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulateAnAuthorizationOnACardParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulateAnAuthorizationOnACardParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulateAnAuthorizationOnACardParameters>() {
           @Override
           public void write(JsonWriter out, SimulateAnAuthorizationOnACardParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulateAnAuthorizationOnACardParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulateAnAuthorizationOnACardParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulateAnAuthorizationOnACardParameters
   * @throws IOException if the JSON string is invalid with respect to SimulateAnAuthorizationOnACardParameters
   */
  public static SimulateAnAuthorizationOnACardParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulateAnAuthorizationOnACardParameters.class);
  }

  /**
   * Convert an instance of SimulateAnAuthorizationOnACardParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

