/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnEntityParametersCorporationBeneficialOwnersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnEntityParametersCorporationBeneficialOwnersInner {
  public static final String SERIALIZED_NAME_COMPANY_TITLE = "company_title";
  @SerializedName(SERIALIZED_NAME_COMPANY_TITLE)
  private String companyTitle;

  public static final String SERIALIZED_NAME_INDIVIDUAL = "individual";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL)
  private CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual individual;

  /**
   * Why this person is considered a beneficial owner of the entity.
   */
  @JsonAdapter(ProngEnum.Adapter.class)
  public enum ProngEnum {
    /**
     * A person with 25% or greater direct or indirect ownership of the entity.
     */
    OWNERSHIP("ownership"),
    
    /**
     * A person who manages, directs, or has significant control of the entity.
     */
    CONTROL("control");

    private String value;

    ProngEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProngEnum fromValue(String value) {
      for (ProngEnum b : ProngEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProngEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProngEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProngEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProngEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProngEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRONG = "prong";
  @SerializedName(SERIALIZED_NAME_PRONG)
  private ProngEnum prong;

  public CreateAnEntityParametersCorporationBeneficialOwnersInner() {
  }

  public CreateAnEntityParametersCorporationBeneficialOwnersInner companyTitle(String companyTitle) {
    this.companyTitle = companyTitle;
    return this;
  }

  /**
   * This person&#39;s role or title within the entity.
   * @return companyTitle
   */
  @javax.annotation.Nullable
  public String getCompanyTitle() {
    return companyTitle;
  }

  public void setCompanyTitle(String companyTitle) {
    this.companyTitle = companyTitle;
  }


  public CreateAnEntityParametersCorporationBeneficialOwnersInner individual(CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual individual) {
    this.individual = individual;
    return this;
  }

  /**
   * Get individual
   * @return individual
   */
  @javax.annotation.Nonnull
  public CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual getIndividual() {
    return individual;
  }

  public void setIndividual(CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual individual) {
    this.individual = individual;
  }


  public CreateAnEntityParametersCorporationBeneficialOwnersInner prong(ProngEnum prong) {
    this.prong = prong;
    return this;
  }

  /**
   * Why this person is considered a beneficial owner of the entity.
   * @return prong
   */
  @javax.annotation.Nonnull
  public ProngEnum getProng() {
    return prong;
  }

  public void setProng(ProngEnum prong) {
    this.prong = prong;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnEntityParametersCorporationBeneficialOwnersInner createAnEntityParametersCorporationBeneficialOwnersInner = (CreateAnEntityParametersCorporationBeneficialOwnersInner) o;
    return Objects.equals(this.companyTitle, createAnEntityParametersCorporationBeneficialOwnersInner.companyTitle) &&
        Objects.equals(this.individual, createAnEntityParametersCorporationBeneficialOwnersInner.individual) &&
        Objects.equals(this.prong, createAnEntityParametersCorporationBeneficialOwnersInner.prong);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyTitle, individual, prong);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnEntityParametersCorporationBeneficialOwnersInner {\n");
    sb.append("    companyTitle: ").append(toIndentedString(companyTitle)).append("\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    prong: ").append(toIndentedString(prong)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_title");
    openapiFields.add("individual");
    openapiFields.add("prong");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("individual");
    openapiRequiredFields.add("prong");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnEntityParametersCorporationBeneficialOwnersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnEntityParametersCorporationBeneficialOwnersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnEntityParametersCorporationBeneficialOwnersInner is not found in the empty JSON string", CreateAnEntityParametersCorporationBeneficialOwnersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnEntityParametersCorporationBeneficialOwnersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnEntityParametersCorporationBeneficialOwnersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnEntityParametersCorporationBeneficialOwnersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("company_title") != null && !jsonObj.get("company_title").isJsonNull()) && !jsonObj.get("company_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_title").toString()));
      }
      // validate the required field `individual`
      CreateAnEntityParametersCorporationBeneficialOwnersInnerIndividual.validateJsonElement(jsonObj.get("individual"));
      if (!jsonObj.get("prong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prong").toString()));
      }
      // validate the required field `prong`
      ProngEnum.validateJsonElement(jsonObj.get("prong"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnEntityParametersCorporationBeneficialOwnersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnEntityParametersCorporationBeneficialOwnersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnEntityParametersCorporationBeneficialOwnersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnEntityParametersCorporationBeneficialOwnersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnEntityParametersCorporationBeneficialOwnersInner>() {
           @Override
           public void write(JsonWriter out, CreateAnEntityParametersCorporationBeneficialOwnersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnEntityParametersCorporationBeneficialOwnersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnEntityParametersCorporationBeneficialOwnersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnEntityParametersCorporationBeneficialOwnersInner
   * @throws IOException if the JSON string is invalid with respect to CreateAnEntityParametersCorporationBeneficialOwnersInner
   */
  public static CreateAnEntityParametersCorporationBeneficialOwnersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnEntityParametersCorporationBeneficialOwnersInner.class);
  }

  /**
   * Convert an instance of CreateAnEntityParametersCorporationBeneficialOwnersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

