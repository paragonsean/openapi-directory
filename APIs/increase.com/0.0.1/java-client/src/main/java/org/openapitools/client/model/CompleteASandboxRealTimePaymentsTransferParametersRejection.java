/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If set, the simulation will reject the transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompleteASandboxRealTimePaymentsTransferParametersRejection {
  /**
   * The reason code that the simulated rejection will have.
   */
  @JsonAdapter(RejectReasonCodeEnum.Adapter.class)
  public enum RejectReasonCodeEnum {
    /**
     * The destination account is closed. Corresponds to the Real Time Payments reason code &#x60;AC04&#x60;.
     */
    ACCOUNT_CLOSED("account_closed"),
    
    /**
     * The destination account is currently blocked from receiving transactions. Corresponds to the Real Time Payments reason code &#x60;AC06&#x60;.
     */
    ACCOUNT_BLOCKED("account_blocked"),
    
    /**
     * The destination account is ineligible to receive Real Time Payments transfers. Corresponds to the Real Time Payments reason code &#x60;AC14&#x60;.
     */
    INVALID_CREDITOR_ACCOUNT_TYPE("invalid_creditor_account_type"),
    
    /**
     * The destination account does not exist. Corresponds to the Real Time Payments reason code &#x60;AC03&#x60;.
     */
    INVALID_CREDITOR_ACCOUNT_NUMBER("invalid_creditor_account_number"),
    
    /**
     * The destination routing number is invalid. Corresponds to the Real Time Payments reason code &#x60;RC04&#x60;.
     */
    INVALID_CREDITOR_FINANCIAL_INSTITUTION_IDENTIFIER("invalid_creditor_financial_institution_identifier"),
    
    /**
     * The destination account holder is deceased. Corresponds to the Real Time Payments reason code &#x60;MD07&#x60;.
     */
    END_CUSTOMER_DECEASED("end_customer_deceased"),
    
    /**
     * The reason is provided as narrative information in the additional information field.
     */
    NARRATIVE("narrative"),
    
    /**
     * Real Time Payments transfers are not allowed to the destination account. Corresponds to the Real Time Payments reason code &#x60;AG01&#x60;.
     */
    TRANSACTION_FORBIDDEN("transaction_forbidden"),
    
    /**
     * Real Time Payments transfers are not enabled for the destination account. Corresponds to the Real Time Payments reason code &#x60;AG03&#x60;.
     */
    TRANSACTION_TYPE_NOT_SUPPORTED("transaction_type_not_supported"),
    
    /**
     * The amount of the transfer is different than expected by the recipient. Corresponds to the Real Time Payments reason code &#x60;AM09&#x60;.
     */
    UNEXPECTED_AMOUNT("unexpected_amount"),
    
    /**
     * The amount is higher than the recipient is authorized to send or receive. Corresponds to the Real Time Payments reason code &#x60;AM14&#x60;.
     */
    AMOUNT_EXCEEDS_BANK_LIMITS("amount_exceeds_bank_limits"),
    
    /**
     * The creditor&#39;s address is required, but missing or invalid. Corresponds to the Real Time Payments reason code &#x60;BE04&#x60;.
     */
    INVALID_CREDITOR_ADDRESS("invalid_creditor_address"),
    
    /**
     * The specified creditor is unknown. Corresponds to the Real Time Payments reason code &#x60;BE06&#x60;.
     */
    UNKNOWN_END_CUSTOMER("unknown_end_customer"),
    
    /**
     * The debtor&#39;s address is required, but missing or invalid. Corresponds to the Real Time Payments reason code &#x60;BE07&#x60;.
     */
    INVALID_DEBTOR_ADDRESS("invalid_debtor_address"),
    
    /**
     * There was a timeout processing the transfer. Corresponds to the Real Time Payments reason code &#x60;DS24&#x60;.
     */
    TIMEOUT("timeout"),
    
    /**
     * Real Time Payments transfers are not enabled for the destination account. Corresponds to the Real Time Payments reason code &#x60;NOAT&#x60;.
     */
    UNSUPPORTED_MESSAGE_FOR_RECIPIENT("unsupported_message_for_recipient"),
    
    /**
     * The destination financial institution is currently not connected to Real Time Payments. Corresponds to the Real Time Payments reason code &#x60;9912&#x60;.
     */
    RECIPIENT_CONNECTION_NOT_AVAILABLE("recipient_connection_not_available"),
    
    /**
     * Real Time Payments is currently unavailable. Corresponds to the Real Time Payments reason code &#x60;9948&#x60;.
     */
    REAL_TIME_PAYMENTS_SUSPENDED("real_time_payments_suspended"),
    
    /**
     * The destination financial institution is currently signed off of Real Time Payments. Corresponds to the Real Time Payments reason code &#x60;9910&#x60;.
     */
    INSTRUCTED_AGENT_SIGNED_OFF("instructed_agent_signed_off"),
    
    /**
     * The transfer was rejected due to an internal Increase issue. We have been notified.
     */
    PROCESSING_ERROR("processing_error"),
    
    /**
     * Some other error or issue has occurred.
     */
    OTHER("other");

    private String value;

    RejectReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectReasonCodeEnum fromValue(String value) {
      for (RejectReasonCodeEnum b : RejectReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RejectReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RejectReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RejectReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REJECT_REASON_CODE = "reject_reason_code";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON_CODE)
  private RejectReasonCodeEnum rejectReasonCode;

  public CompleteASandboxRealTimePaymentsTransferParametersRejection() {
  }

  public CompleteASandboxRealTimePaymentsTransferParametersRejection rejectReasonCode(RejectReasonCodeEnum rejectReasonCode) {
    this.rejectReasonCode = rejectReasonCode;
    return this;
  }

  /**
   * The reason code that the simulated rejection will have.
   * @return rejectReasonCode
   */
  @javax.annotation.Nonnull
  public RejectReasonCodeEnum getRejectReasonCode() {
    return rejectReasonCode;
  }

  public void setRejectReasonCode(RejectReasonCodeEnum rejectReasonCode) {
    this.rejectReasonCode = rejectReasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteASandboxRealTimePaymentsTransferParametersRejection completeASandboxRealTimePaymentsTransferParametersRejection = (CompleteASandboxRealTimePaymentsTransferParametersRejection) o;
    return Objects.equals(this.rejectReasonCode, completeASandboxRealTimePaymentsTransferParametersRejection.rejectReasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rejectReasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteASandboxRealTimePaymentsTransferParametersRejection {\n");
    sb.append("    rejectReasonCode: ").append(toIndentedString(rejectReasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reject_reason_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reject_reason_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompleteASandboxRealTimePaymentsTransferParametersRejection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompleteASandboxRealTimePaymentsTransferParametersRejection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteASandboxRealTimePaymentsTransferParametersRejection is not found in the empty JSON string", CompleteASandboxRealTimePaymentsTransferParametersRejection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompleteASandboxRealTimePaymentsTransferParametersRejection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteASandboxRealTimePaymentsTransferParametersRejection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompleteASandboxRealTimePaymentsTransferParametersRejection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("reject_reason_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reject_reason_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reject_reason_code").toString()));
      }
      // validate the required field `reject_reason_code`
      RejectReasonCodeEnum.validateJsonElement(jsonObj.get("reject_reason_code"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompleteASandboxRealTimePaymentsTransferParametersRejection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompleteASandboxRealTimePaymentsTransferParametersRejection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompleteASandboxRealTimePaymentsTransferParametersRejection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompleteASandboxRealTimePaymentsTransferParametersRejection.class));

       return (TypeAdapter<T>) new TypeAdapter<CompleteASandboxRealTimePaymentsTransferParametersRejection>() {
           @Override
           public void write(JsonWriter out, CompleteASandboxRealTimePaymentsTransferParametersRejection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompleteASandboxRealTimePaymentsTransferParametersRejection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompleteASandboxRealTimePaymentsTransferParametersRejection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompleteASandboxRealTimePaymentsTransferParametersRejection
   * @throws IOException if the JSON string is invalid with respect to CompleteASandboxRealTimePaymentsTransferParametersRejection
   */
  public static CompleteASandboxRealTimePaymentsTransferParametersRejection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompleteASandboxRealTimePaymentsTransferParametersRejection.class);
  }

  /**
   * Convert an instance of CompleteASandboxRealTimePaymentsTransferParametersRejection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

