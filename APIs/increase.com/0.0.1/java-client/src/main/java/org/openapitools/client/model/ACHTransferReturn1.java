/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ACH Transfer Return object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;ach_transfer_return&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ACHTransferReturn1 {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Why the ACH Transfer was returned.
   */
  @JsonAdapter(ReturnReasonCodeEnum.Adapter.class)
  public enum ReturnReasonCodeEnum {
    /**
     * Insufficient funds in the source account.
     */
    INSUFFICIENT_FUND("insufficient_fund"),
    
    /**
     * The account does not exist or the receiving bank was unable to locate it.
     */
    NO_ACCOUNT("no_account"),
    
    /**
     * The account is closed.
     */
    ACCOUNT_CLOSED("account_closed"),
    
    /**
     * The account number is invalid at the receiving bank.
     */
    INVALID_ACCOUNT_NUMBER_STRUCTURE("invalid_account_number_structure"),
    
    /**
     * The account was frozen per the Office of Foreign Assets Control.
     */
    ACCOUNT_FROZEN_ENTRY_RETURNED_PER_OFAC_INSTRUCTION("account_frozen_entry_returned_per_ofac_instruction"),
    
    /**
     * The receiving bank account refused a credit transfer.
     */
    CREDIT_ENTRY_REFUSED_BY_RECEIVER("credit_entry_refused_by_receiver"),
    
    /**
     * The receiving bank rejected because of an incorrect Standard Entry Class code.
     */
    UNAUTHORIZED_DEBIT_TO_CONSUMER_ACCOUNT_USING_CORPORATE_SEC_CODE("unauthorized_debit_to_consumer_account_using_corporate_sec_code"),
    
    /**
     * The corporate customer reversed the transfer.
     */
    CORPORATE_CUSTOMER_ADVISED_NOT_AUTHORIZED("corporate_customer_advised_not_authorized"),
    
    /**
     * The receiving bank stopped payment on this transfer.
     */
    PAYMENT_STOPPED("payment_stopped"),
    
    /**
     * The receiving bank account does not perform transfers.
     */
    NON_TRANSACTION_ACCOUNT("non_transaction_account"),
    
    /**
     * The receiving bank account does not have enough available balance for the transfer.
     */
    UNCOLLECTED_FUNDS("uncollected_funds"),
    
    /**
     * The routing number is incorrect.
     */
    ROUTING_NUMBER_CHECK_DIGIT_ERROR("routing_number_check_digit_error"),
    
    /**
     * The customer reversed the transfer.
     */
    CUSTOMER_ADVISED_UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE("customer_advised_unauthorized_improper_ineligible_or_incomplete"),
    
    /**
     * The amount field is incorrect or too large.
     */
    AMOUNT_FIELD_ERROR("amount_field_error"),
    
    /**
     * The customer who initiated the transfer revoked authorization.
     */
    AUTHORIZATION_REVOKED_BY_CUSTOMER("authorization_revoked_by_customer"),
    
    /**
     * The routing number is invalid.
     */
    INVALID_ACH_ROUTING_NUMBER("invalid_ach_routing_number"),
    
    /**
     * The receiving bank is unable to process a field in the transfer.
     */
    FILE_RECORD_EDIT_CRITERIA("file_record_edit_criteria"),
    
    /**
     * The individual name field was invalid.
     */
    ENR_INVALID_INDIVIDUAL_NAME("enr_invalid_individual_name"),
    
    /**
     * The originating financial institution reversed the transfer.
     */
    RETURNED_PER_ODFI_REQUEST("returned_per_odfi_request"),
    
    /**
     * The addenda record is incorrect or missing.
     */
    ADDENDA_ERROR("addenda_error"),
    
    /**
     * The receiving bank&#39;s regulatory supervisor has limited their participation.
     */
    LIMITED_PARTICIPATION_DFI("limited_participation_dfi"),
    
    /**
     * The outbound international ACH transfer was incorrect.
     */
    INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT("incorrectly_coded_outbound_international_payment"),
    
    /**
     * Any other ACH return reason.
     */
    OTHER("other");

    private String value;

    ReturnReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnReasonCodeEnum fromValue(String value) {
      for (ReturnReasonCodeEnum b : ReturnReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_REASON_CODE = "return_reason_code";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON_CODE)
  private ReturnReasonCodeEnum returnReasonCode;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSFER_ID = "transfer_id";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ID)
  private String transferId;

  public ACHTransferReturn1() {
  }

  public ACHTransferReturn1 createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ACHTransferReturn1 returnReasonCode(ReturnReasonCodeEnum returnReasonCode) {
    this.returnReasonCode = returnReasonCode;
    return this;
  }

  /**
   * Why the ACH Transfer was returned.
   * @return returnReasonCode
   */
  @javax.annotation.Nonnull
  public ReturnReasonCodeEnum getReturnReasonCode() {
    return returnReasonCode;
  }

  public void setReturnReasonCode(ReturnReasonCodeEnum returnReasonCode) {
    this.returnReasonCode = returnReasonCode;
  }


  public ACHTransferReturn1 transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The identifier of the Tranasaction associated with this return.
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public ACHTransferReturn1 transferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

  /**
   * The identifier of the ACH Transfer associated with this return.
   * @return transferId
   */
  @javax.annotation.Nonnull
  public String getTransferId() {
    return transferId;
  }

  public void setTransferId(String transferId) {
    this.transferId = transferId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ACHTransferReturn1 acHTransferReturn1 = (ACHTransferReturn1) o;
    return Objects.equals(this.createdAt, acHTransferReturn1.createdAt) &&
        Objects.equals(this.returnReasonCode, acHTransferReturn1.returnReasonCode) &&
        Objects.equals(this.transactionId, acHTransferReturn1.transactionId) &&
        Objects.equals(this.transferId, acHTransferReturn1.transferId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, returnReasonCode, transactionId, transferId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ACHTransferReturn1 {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    returnReasonCode: ").append(toIndentedString(returnReasonCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transferId: ").append(toIndentedString(transferId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("return_reason_code");
    openapiFields.add("transaction_id");
    openapiFields.add("transfer_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("return_reason_code");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("transfer_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ACHTransferReturn1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ACHTransferReturn1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ACHTransferReturn1 is not found in the empty JSON string", ACHTransferReturn1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ACHTransferReturn1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ACHTransferReturn1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ACHTransferReturn1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("return_reason_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_reason_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_reason_code").toString()));
      }
      // validate the required field `return_reason_code`
      ReturnReasonCodeEnum.validateJsonElement(jsonObj.get("return_reason_code"));
      if (!jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("transfer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ACHTransferReturn1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ACHTransferReturn1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ACHTransferReturn1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ACHTransferReturn1.class));

       return (TypeAdapter<T>) new TypeAdapter<ACHTransferReturn1>() {
           @Override
           public void write(JsonWriter out, ACHTransferReturn1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ACHTransferReturn1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ACHTransferReturn1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ACHTransferReturn1
   * @throws IOException if the JSON string is invalid with respect to ACHTransferReturn1
   */
  public static ACHTransferReturn1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ACHTransferReturn1.class);
  }

  /**
   * Convert an instance of ACHTransferReturn1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

