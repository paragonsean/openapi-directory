/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnAchPrenotificationParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnAchPrenotificationParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ADDENDUM = "addendum";
  @SerializedName(SERIALIZED_NAME_ADDENDUM)
  private String addendum;

  public static final String SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE = "company_descriptive_date";
  @SerializedName(SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE)
  private String companyDescriptiveDate;

  public static final String SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA = "company_discretionary_data";
  @SerializedName(SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA)
  private String companyDiscretionaryData;

  public static final String SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION = "company_entry_description";
  @SerializedName(SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION)
  private String companyEntryDescription;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  /**
   * Whether the Prenotification is for a future debit or credit.
   */
  @JsonAdapter(CreditDebitIndicatorEnum.Adapter.class)
  public enum CreditDebitIndicatorEnum {
    /**
     * The Prenotification is for an anticipated credit.
     */
    CREDIT("credit"),
    
    /**
     * The Prenotification is for an anticipated debit.
     */
    DEBIT("debit");

    private String value;

    CreditDebitIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditDebitIndicatorEnum fromValue(String value) {
      for (CreditDebitIndicatorEnum b : CreditDebitIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreditDebitIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditDebitIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditDebitIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreditDebitIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreditDebitIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREDIT_DEBIT_INDICATOR = "credit_debit_indicator";
  @SerializedName(SERIALIZED_NAME_CREDIT_DEBIT_INDICATOR)
  private CreditDebitIndicatorEnum creditDebitIndicator;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ID = "individual_id";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ID)
  private String individualId;

  public static final String SERIALIZED_NAME_INDIVIDUAL_NAME = "individual_name";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_NAME)
  private String individualName;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  /**
   * The Standard Entry Class (SEC) code to use for the ACH Prenotification.
   */
  @JsonAdapter(StandardEntryClassCodeEnum.Adapter.class)
  public enum StandardEntryClassCodeEnum {
    /**
     * Corporate Credit and Debit (CCD).
     */
    CORPORATE_CREDIT_OR_DEBIT("corporate_credit_or_debit"),
    
    /**
     * Prearranged Payments and Deposits (PPD).
     */
    PREARRANGED_PAYMENTS_AND_DEPOSIT("prearranged_payments_and_deposit"),
    
    /**
     * Internet Initiated (WEB).
     */
    INTERNET_INITIATED("internet_initiated");

    private String value;

    StandardEntryClassCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardEntryClassCodeEnum fromValue(String value) {
      for (StandardEntryClassCodeEnum b : StandardEntryClassCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StandardEntryClassCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardEntryClassCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardEntryClassCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StandardEntryClassCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StandardEntryClassCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE = "standard_entry_class_code";
  @SerializedName(SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE)
  private StandardEntryClassCodeEnum standardEntryClassCode;

  public CreateAnAchPrenotificationParameters() {
  }

  public CreateAnAchPrenotificationParameters accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the destination account.
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateAnAchPrenotificationParameters addendum(String addendum) {
    this.addendum = addendum;
    return this;
  }

  /**
   * Additional information that will be sent to the recipient.
   * @return addendum
   */
  @javax.annotation.Nullable
  public String getAddendum() {
    return addendum;
  }

  public void setAddendum(String addendum) {
    this.addendum = addendum;
  }


  public CreateAnAchPrenotificationParameters companyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
    return this;
  }

  /**
   * The description of the date of the transfer.
   * @return companyDescriptiveDate
   */
  @javax.annotation.Nullable
  public String getCompanyDescriptiveDate() {
    return companyDescriptiveDate;
  }

  public void setCompanyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
  }


  public CreateAnAchPrenotificationParameters companyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
    return this;
  }

  /**
   * The data you choose to associate with the transfer.
   * @return companyDiscretionaryData
   */
  @javax.annotation.Nullable
  public String getCompanyDiscretionaryData() {
    return companyDiscretionaryData;
  }

  public void setCompanyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
  }


  public CreateAnAchPrenotificationParameters companyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
    return this;
  }

  /**
   * The description of the transfer you wish to be shown to the recipient.
   * @return companyEntryDescription
   */
  @javax.annotation.Nullable
  public String getCompanyEntryDescription() {
    return companyEntryDescription;
  }

  public void setCompanyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
  }


  public CreateAnAchPrenotificationParameters companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name by which the recipient knows you.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CreateAnAchPrenotificationParameters creditDebitIndicator(CreditDebitIndicatorEnum creditDebitIndicator) {
    this.creditDebitIndicator = creditDebitIndicator;
    return this;
  }

  /**
   * Whether the Prenotification is for a future debit or credit.
   * @return creditDebitIndicator
   */
  @javax.annotation.Nullable
  public CreditDebitIndicatorEnum getCreditDebitIndicator() {
    return creditDebitIndicator;
  }

  public void setCreditDebitIndicator(CreditDebitIndicatorEnum creditDebitIndicator) {
    this.creditDebitIndicator = creditDebitIndicator;
  }


  public CreateAnAchPrenotificationParameters effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public CreateAnAchPrenotificationParameters individualId(String individualId) {
    this.individualId = individualId;
    return this;
  }

  /**
   * Your identifer for the transfer recipient.
   * @return individualId
   */
  @javax.annotation.Nullable
  public String getIndividualId() {
    return individualId;
  }

  public void setIndividualId(String individualId) {
    this.individualId = individualId;
  }


  public CreateAnAchPrenotificationParameters individualName(String individualName) {
    this.individualName = individualName;
    return this;
  }

  /**
   * The name of the transfer recipient. This value is information and not verified by the recipient&#39;s bank.
   * @return individualName
   */
  @javax.annotation.Nullable
  public String getIndividualName() {
    return individualName;
  }

  public void setIndividualName(String individualName) {
    this.individualName = individualName;
  }


  public CreateAnAchPrenotificationParameters routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The American Bankers&#39; Association (ABA) Routing Transit Number (RTN) for the destination account.
   * @return routingNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public CreateAnAchPrenotificationParameters standardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
    return this;
  }

  /**
   * The Standard Entry Class (SEC) code to use for the ACH Prenotification.
   * @return standardEntryClassCode
   */
  @javax.annotation.Nullable
  public StandardEntryClassCodeEnum getStandardEntryClassCode() {
    return standardEntryClassCode;
  }

  public void setStandardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnAchPrenotificationParameters createAnAchPrenotificationParameters = (CreateAnAchPrenotificationParameters) o;
    return Objects.equals(this.accountNumber, createAnAchPrenotificationParameters.accountNumber) &&
        Objects.equals(this.addendum, createAnAchPrenotificationParameters.addendum) &&
        Objects.equals(this.companyDescriptiveDate, createAnAchPrenotificationParameters.companyDescriptiveDate) &&
        Objects.equals(this.companyDiscretionaryData, createAnAchPrenotificationParameters.companyDiscretionaryData) &&
        Objects.equals(this.companyEntryDescription, createAnAchPrenotificationParameters.companyEntryDescription) &&
        Objects.equals(this.companyName, createAnAchPrenotificationParameters.companyName) &&
        Objects.equals(this.creditDebitIndicator, createAnAchPrenotificationParameters.creditDebitIndicator) &&
        Objects.equals(this.effectiveDate, createAnAchPrenotificationParameters.effectiveDate) &&
        Objects.equals(this.individualId, createAnAchPrenotificationParameters.individualId) &&
        Objects.equals(this.individualName, createAnAchPrenotificationParameters.individualName) &&
        Objects.equals(this.routingNumber, createAnAchPrenotificationParameters.routingNumber) &&
        Objects.equals(this.standardEntryClassCode, createAnAchPrenotificationParameters.standardEntryClassCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, addendum, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, creditDebitIndicator, effectiveDate, individualId, individualName, routingNumber, standardEntryClassCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnAchPrenotificationParameters {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    addendum: ").append(toIndentedString(addendum)).append("\n");
    sb.append("    companyDescriptiveDate: ").append(toIndentedString(companyDescriptiveDate)).append("\n");
    sb.append("    companyDiscretionaryData: ").append(toIndentedString(companyDiscretionaryData)).append("\n");
    sb.append("    companyEntryDescription: ").append(toIndentedString(companyEntryDescription)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    creditDebitIndicator: ").append(toIndentedString(creditDebitIndicator)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    individualId: ").append(toIndentedString(individualId)).append("\n");
    sb.append("    individualName: ").append(toIndentedString(individualName)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    standardEntryClassCode: ").append(toIndentedString(standardEntryClassCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("addendum");
    openapiFields.add("company_descriptive_date");
    openapiFields.add("company_discretionary_data");
    openapiFields.add("company_entry_description");
    openapiFields.add("company_name");
    openapiFields.add("credit_debit_indicator");
    openapiFields.add("effective_date");
    openapiFields.add("individual_id");
    openapiFields.add("individual_name");
    openapiFields.add("routing_number");
    openapiFields.add("standard_entry_class_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("routing_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnAchPrenotificationParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnAchPrenotificationParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnAchPrenotificationParameters is not found in the empty JSON string", CreateAnAchPrenotificationParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnAchPrenotificationParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnAchPrenotificationParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnAchPrenotificationParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("addendum") != null && !jsonObj.get("addendum").isJsonNull()) && !jsonObj.get("addendum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addendum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addendum").toString()));
      }
      if ((jsonObj.get("company_descriptive_date") != null && !jsonObj.get("company_descriptive_date").isJsonNull()) && !jsonObj.get("company_descriptive_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_descriptive_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_descriptive_date").toString()));
      }
      if ((jsonObj.get("company_discretionary_data") != null && !jsonObj.get("company_discretionary_data").isJsonNull()) && !jsonObj.get("company_discretionary_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_discretionary_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_discretionary_data").toString()));
      }
      if ((jsonObj.get("company_entry_description") != null && !jsonObj.get("company_entry_description").isJsonNull()) && !jsonObj.get("company_entry_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_entry_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_entry_description").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("credit_debit_indicator") != null && !jsonObj.get("credit_debit_indicator").isJsonNull()) && !jsonObj.get("credit_debit_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit_debit_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credit_debit_indicator").toString()));
      }
      // validate the optional field `credit_debit_indicator`
      if (jsonObj.get("credit_debit_indicator") != null && !jsonObj.get("credit_debit_indicator").isJsonNull()) {
        CreditDebitIndicatorEnum.validateJsonElement(jsonObj.get("credit_debit_indicator"));
      }
      if ((jsonObj.get("individual_id") != null && !jsonObj.get("individual_id").isJsonNull()) && !jsonObj.get("individual_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_id").toString()));
      }
      if ((jsonObj.get("individual_name") != null && !jsonObj.get("individual_name").isJsonNull()) && !jsonObj.get("individual_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_name").toString()));
      }
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if ((jsonObj.get("standard_entry_class_code") != null && !jsonObj.get("standard_entry_class_code").isJsonNull()) && !jsonObj.get("standard_entry_class_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_entry_class_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_entry_class_code").toString()));
      }
      // validate the optional field `standard_entry_class_code`
      if (jsonObj.get("standard_entry_class_code") != null && !jsonObj.get("standard_entry_class_code").isJsonNull()) {
        StandardEntryClassCodeEnum.validateJsonElement(jsonObj.get("standard_entry_class_code"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnAchPrenotificationParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnAchPrenotificationParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnAchPrenotificationParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnAchPrenotificationParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnAchPrenotificationParameters>() {
           @Override
           public void write(JsonWriter out, CreateAnAchPrenotificationParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnAchPrenotificationParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnAchPrenotificationParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnAchPrenotificationParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAnAchPrenotificationParameters
   */
  public static CreateAnAchPrenotificationParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnAchPrenotificationParameters.class);
  }

  /**
   * Convert an instance of CreateAnAchPrenotificationParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

