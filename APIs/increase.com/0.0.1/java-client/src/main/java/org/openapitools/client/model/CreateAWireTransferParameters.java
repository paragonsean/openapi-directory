/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAWireTransferParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAWireTransferParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE1 = "beneficiary_address_line1";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE1)
  private String beneficiaryAddressLine1;

  public static final String SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE2 = "beneficiary_address_line2";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE2)
  private String beneficiaryAddressLine2;

  public static final String SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE3 = "beneficiary_address_line3";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADDRESS_LINE3)
  private String beneficiaryAddressLine3;

  public static final String SERIALIZED_NAME_BENEFICIARY_NAME = "beneficiary_name";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_NAME)
  private String beneficiaryName;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "external_account_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_MESSAGE_TO_RECIPIENT = "message_to_recipient";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TO_RECIPIENT)
  private String messageToRecipient;

  public static final String SERIALIZED_NAME_REQUIRE_APPROVAL = "require_approval";
  @SerializedName(SERIALIZED_NAME_REQUIRE_APPROVAL)
  private Boolean requireApproval;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public CreateAWireTransferParameters() {
  }

  public CreateAWireTransferParameters accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The identifier for the account that will send the transfer.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateAWireTransferParameters accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the destination account.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateAWireTransferParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in cents.
   * minimum: 1
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CreateAWireTransferParameters beneficiaryAddressLine1(String beneficiaryAddressLine1) {
    this.beneficiaryAddressLine1 = beneficiaryAddressLine1;
    return this;
  }

  /**
   * The beneficiary&#39;s address line 1.
   * @return beneficiaryAddressLine1
   */
  @javax.annotation.Nullable
  public String getBeneficiaryAddressLine1() {
    return beneficiaryAddressLine1;
  }

  public void setBeneficiaryAddressLine1(String beneficiaryAddressLine1) {
    this.beneficiaryAddressLine1 = beneficiaryAddressLine1;
  }


  public CreateAWireTransferParameters beneficiaryAddressLine2(String beneficiaryAddressLine2) {
    this.beneficiaryAddressLine2 = beneficiaryAddressLine2;
    return this;
  }

  /**
   * The beneficiary&#39;s address line 2.
   * @return beneficiaryAddressLine2
   */
  @javax.annotation.Nullable
  public String getBeneficiaryAddressLine2() {
    return beneficiaryAddressLine2;
  }

  public void setBeneficiaryAddressLine2(String beneficiaryAddressLine2) {
    this.beneficiaryAddressLine2 = beneficiaryAddressLine2;
  }


  public CreateAWireTransferParameters beneficiaryAddressLine3(String beneficiaryAddressLine3) {
    this.beneficiaryAddressLine3 = beneficiaryAddressLine3;
    return this;
  }

  /**
   * The beneficiary&#39;s address line 3.
   * @return beneficiaryAddressLine3
   */
  @javax.annotation.Nullable
  public String getBeneficiaryAddressLine3() {
    return beneficiaryAddressLine3;
  }

  public void setBeneficiaryAddressLine3(String beneficiaryAddressLine3) {
    this.beneficiaryAddressLine3 = beneficiaryAddressLine3;
  }


  public CreateAWireTransferParameters beneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

  /**
   * The beneficiary&#39;s name.
   * @return beneficiaryName
   */
  @javax.annotation.Nonnull
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }


  public CreateAWireTransferParameters externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * The ID of an External Account to initiate a transfer to. If this parameter is provided, &#x60;account_number&#x60; and &#x60;routing_number&#x60; must be absent.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public CreateAWireTransferParameters messageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
    return this;
  }

  /**
   * The message that will show on the recipient&#39;s bank statement.
   * @return messageToRecipient
   */
  @javax.annotation.Nonnull
  public String getMessageToRecipient() {
    return messageToRecipient;
  }

  public void setMessageToRecipient(String messageToRecipient) {
    this.messageToRecipient = messageToRecipient;
  }


  public CreateAWireTransferParameters requireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
    return this;
  }

  /**
   * Whether the transfer requires explicit approval via the dashboard or API.
   * @return requireApproval
   */
  @javax.annotation.Nullable
  public Boolean getRequireApproval() {
    return requireApproval;
  }

  public void setRequireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
  }


  public CreateAWireTransferParameters routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The American Bankers&#39; Association (ABA) Routing Transit Number (RTN) for the destination account.
   * @return routingNumber
   */
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAWireTransferParameters createAWireTransferParameters = (CreateAWireTransferParameters) o;
    return Objects.equals(this.accountId, createAWireTransferParameters.accountId) &&
        Objects.equals(this.accountNumber, createAWireTransferParameters.accountNumber) &&
        Objects.equals(this.amount, createAWireTransferParameters.amount) &&
        Objects.equals(this.beneficiaryAddressLine1, createAWireTransferParameters.beneficiaryAddressLine1) &&
        Objects.equals(this.beneficiaryAddressLine2, createAWireTransferParameters.beneficiaryAddressLine2) &&
        Objects.equals(this.beneficiaryAddressLine3, createAWireTransferParameters.beneficiaryAddressLine3) &&
        Objects.equals(this.beneficiaryName, createAWireTransferParameters.beneficiaryName) &&
        Objects.equals(this.externalAccountId, createAWireTransferParameters.externalAccountId) &&
        Objects.equals(this.messageToRecipient, createAWireTransferParameters.messageToRecipient) &&
        Objects.equals(this.requireApproval, createAWireTransferParameters.requireApproval) &&
        Objects.equals(this.routingNumber, createAWireTransferParameters.routingNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountNumber, amount, beneficiaryAddressLine1, beneficiaryAddressLine2, beneficiaryAddressLine3, beneficiaryName, externalAccountId, messageToRecipient, requireApproval, routingNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAWireTransferParameters {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    beneficiaryAddressLine1: ").append(toIndentedString(beneficiaryAddressLine1)).append("\n");
    sb.append("    beneficiaryAddressLine2: ").append(toIndentedString(beneficiaryAddressLine2)).append("\n");
    sb.append("    beneficiaryAddressLine3: ").append(toIndentedString(beneficiaryAddressLine3)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    messageToRecipient: ").append(toIndentedString(messageToRecipient)).append("\n");
    sb.append("    requireApproval: ").append(toIndentedString(requireApproval)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("account_number");
    openapiFields.add("amount");
    openapiFields.add("beneficiary_address_line1");
    openapiFields.add("beneficiary_address_line2");
    openapiFields.add("beneficiary_address_line3");
    openapiFields.add("beneficiary_name");
    openapiFields.add("external_account_id");
    openapiFields.add("message_to_recipient");
    openapiFields.add("require_approval");
    openapiFields.add("routing_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("beneficiary_name");
    openapiRequiredFields.add("message_to_recipient");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAWireTransferParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAWireTransferParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAWireTransferParameters is not found in the empty JSON string", CreateAWireTransferParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAWireTransferParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAWireTransferParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAWireTransferParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("beneficiary_address_line1") != null && !jsonObj.get("beneficiary_address_line1").isJsonNull()) && !jsonObj.get("beneficiary_address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiary_address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiary_address_line1").toString()));
      }
      if ((jsonObj.get("beneficiary_address_line2") != null && !jsonObj.get("beneficiary_address_line2").isJsonNull()) && !jsonObj.get("beneficiary_address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiary_address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiary_address_line2").toString()));
      }
      if ((jsonObj.get("beneficiary_address_line3") != null && !jsonObj.get("beneficiary_address_line3").isJsonNull()) && !jsonObj.get("beneficiary_address_line3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiary_address_line3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiary_address_line3").toString()));
      }
      if (!jsonObj.get("beneficiary_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiary_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiary_name").toString()));
      }
      if ((jsonObj.get("external_account_id") != null && !jsonObj.get("external_account_id").isJsonNull()) && !jsonObj.get("external_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_id").toString()));
      }
      if (!jsonObj.get("message_to_recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_to_recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_to_recipient").toString()));
      }
      if ((jsonObj.get("routing_number") != null && !jsonObj.get("routing_number").isJsonNull()) && !jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAWireTransferParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAWireTransferParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAWireTransferParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAWireTransferParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAWireTransferParameters>() {
           @Override
           public void write(JsonWriter out, CreateAWireTransferParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAWireTransferParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAWireTransferParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAWireTransferParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAWireTransferParameters
   */
  public static CreateAWireTransferParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAWireTransferParameters.class);
  }

  /**
   * Convert an instance of CreateAWireTransferParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

