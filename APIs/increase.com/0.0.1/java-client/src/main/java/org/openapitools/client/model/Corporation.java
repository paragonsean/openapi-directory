/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BeneficialOwnersElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the corporation entity. Will be present if &#x60;structure&#x60; is equal to &#x60;corporation&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Corporation {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BENEFICIAL_OWNERS = "beneficial_owners";
  @SerializedName(SERIALIZED_NAME_BENEFICIAL_OWNERS)
  private List<BeneficialOwnersElement> beneficialOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCORPORATION_STATE = "incorporation_state";
  @SerializedName(SERIALIZED_NAME_INCORPORATION_STATE)
  private String incorporationState;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIER = "tax_identifier";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIER)
  private String taxIdentifier;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Corporation() {
  }

  public Corporation address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Corporation beneficialOwners(List<BeneficialOwnersElement> beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
    return this;
  }

  public Corporation addBeneficialOwnersItem(BeneficialOwnersElement beneficialOwnersItem) {
    if (this.beneficialOwners == null) {
      this.beneficialOwners = new ArrayList<>();
    }
    this.beneficialOwners.add(beneficialOwnersItem);
    return this;
  }

  /**
   * The identifying details of anyone controlling or owning 25% or more of the corporation.
   * @return beneficialOwners
   */
  @javax.annotation.Nonnull
  public List<BeneficialOwnersElement> getBeneficialOwners() {
    return beneficialOwners;
  }

  public void setBeneficialOwners(List<BeneficialOwnersElement> beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
  }


  public Corporation incorporationState(String incorporationState) {
    this.incorporationState = incorporationState;
    return this;
  }

  /**
   * The two-letter United States Postal Service (USPS) abbreviation for the corporation&#39;s state of incorporation.
   * @return incorporationState
   */
  @javax.annotation.Nullable
  public String getIncorporationState() {
    return incorporationState;
  }

  public void setIncorporationState(String incorporationState) {
    this.incorporationState = incorporationState;
  }


  public Corporation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The legal name of the corporation.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Corporation taxIdentifier(String taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
    return this;
  }

  /**
   * The Employer Identification Number (EIN) for the corporation.
   * @return taxIdentifier
   */
  @javax.annotation.Nullable
  public String getTaxIdentifier() {
    return taxIdentifier;
  }

  public void setTaxIdentifier(String taxIdentifier) {
    this.taxIdentifier = taxIdentifier;
  }


  public Corporation website(String website) {
    this.website = website;
    return this;
  }

  /**
   * The website of the corporation.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Corporation corporation = (Corporation) o;
    return Objects.equals(this.address, corporation.address) &&
        Objects.equals(this.beneficialOwners, corporation.beneficialOwners) &&
        Objects.equals(this.incorporationState, corporation.incorporationState) &&
        Objects.equals(this.name, corporation.name) &&
        Objects.equals(this.taxIdentifier, corporation.taxIdentifier) &&
        Objects.equals(this.website, corporation.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, beneficialOwners, incorporationState, name, taxIdentifier, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Corporation {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    beneficialOwners: ").append(toIndentedString(beneficialOwners)).append("\n");
    sb.append("    incorporationState: ").append(toIndentedString(incorporationState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taxIdentifier: ").append(toIndentedString(taxIdentifier)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("beneficial_owners");
    openapiFields.add("incorporation_state");
    openapiFields.add("name");
    openapiFields.add("tax_identifier");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("beneficial_owners");
    openapiRequiredFields.add("incorporation_state");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tax_identifier");
    openapiRequiredFields.add("website");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Corporation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Corporation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Corporation is not found in the empty JSON string", Corporation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Corporation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Corporation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Corporation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      // ensure the json data is an array
      if (!jsonObj.get("beneficial_owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficial_owners` to be an array in the JSON string but got `%s`", jsonObj.get("beneficial_owners").toString()));
      }

      JsonArray jsonArraybeneficialOwners = jsonObj.getAsJsonArray("beneficial_owners");
      // validate the required field `beneficial_owners` (array)
      for (int i = 0; i < jsonArraybeneficialOwners.size(); i++) {
        BeneficialOwnersElement.validateJsonElement(jsonArraybeneficialOwners.get(i));
      };
      if ((jsonObj.get("incorporation_state") != null && !jsonObj.get("incorporation_state").isJsonNull()) && !jsonObj.get("incorporation_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incorporation_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incorporation_state").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tax_identifier") != null && !jsonObj.get("tax_identifier").isJsonNull()) && !jsonObj.get("tax_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_identifier").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Corporation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Corporation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Corporation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Corporation.class));

       return (TypeAdapter<T>) new TypeAdapter<Corporation>() {
           @Override
           public void write(JsonWriter out, Corporation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Corporation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Corporation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Corporation
   * @throws IOException if the JSON string is invalid with respect to Corporation
   */
  public static Corporation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Corporation.class);
  }

  /**
   * Convert an instance of Corporation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

