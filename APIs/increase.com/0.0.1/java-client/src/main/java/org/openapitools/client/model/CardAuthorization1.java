/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields related to a card authorization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardAuthorization1 {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  /**
   * Whether or not the authorization was approved.
   */
  @JsonAdapter(DecisionEnum.Adapter.class)
  public enum DecisionEnum {
    /**
     * Approve the authorization.
     */
    APPROVE("approve"),
    
    /**
     * Decline the authorization.
     */
    DECLINE("decline");

    private String value;

    DecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DecisionEnum fromValue(String value) {
      for (DecisionEnum b : DecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DecisionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DecisionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECISION = "decision";
  @SerializedName(SERIALIZED_NAME_DECISION)
  private DecisionEnum decision;

  public static final String SERIALIZED_NAME_MERCHANT_ACCEPTOR_ID = "merchant_acceptor_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCEPTOR_ID)
  private String merchantAcceptorId;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchant_category_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_CITY = "merchant_city";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CITY)
  private String merchantCity;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY = "merchant_country";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY)
  private String merchantCountry;

  public static final String SERIALIZED_NAME_MERCHANT_DESCRIPTOR = "merchant_descriptor";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DESCRIPTOR)
  private String merchantDescriptor;

  /**
   * The payment network used to process this card authorization
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    /**
     * Visa
     */
    VISA("visa");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  public static final String SERIALIZED_NAME_NETWORK_DETAILS = "network_details";
  @SerializedName(SERIALIZED_NAME_NETWORK_DETAILS)
  private NetworkDetails networkDetails;

  public static final String SERIALIZED_NAME_PRESENTMENT_AMOUNT = "presentment_amount";
  @SerializedName(SERIALIZED_NAME_PRESENTMENT_AMOUNT)
  private Integer presentmentAmount;

  public static final String SERIALIZED_NAME_PRESENTMENT_CURRENCY = "presentment_currency";
  @SerializedName(SERIALIZED_NAME_PRESENTMENT_CURRENCY)
  private String presentmentCurrency;

  public static final String SERIALIZED_NAME_SETTLEMENT_AMOUNT = "settlement_amount";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_AMOUNT)
  private Integer settlementAmount;

  public static final String SERIALIZED_NAME_SETTLEMENT_CURRENCY = "settlement_currency";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_CURRENCY)
  private String settlementCurrency;

  public CardAuthorization1() {
  }

  public CardAuthorization1 accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The identifier of the Account the authorization will debit.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CardAuthorization1 cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The identifier of the Card that is being authorized.
   * @return cardId
   */
  @javax.annotation.Nonnull
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public CardAuthorization1 decision(DecisionEnum decision) {
    this.decision = decision;
    return this;
  }

  /**
   * Whether or not the authorization was approved.
   * @return decision
   */
  @javax.annotation.Nullable
  public DecisionEnum getDecision() {
    return decision;
  }

  public void setDecision(DecisionEnum decision) {
    this.decision = decision;
  }


  public CardAuthorization1 merchantAcceptorId(String merchantAcceptorId) {
    this.merchantAcceptorId = merchantAcceptorId;
    return this;
  }

  /**
   * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
   * @return merchantAcceptorId
   */
  @javax.annotation.Nonnull
  public String getMerchantAcceptorId() {
    return merchantAcceptorId;
  }

  public void setMerchantAcceptorId(String merchantAcceptorId) {
    this.merchantAcceptorId = merchantAcceptorId;
  }


  public CardAuthorization1 merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public CardAuthorization1 merchantCity(String merchantCity) {
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * The city the merchant resides in.
   * @return merchantCity
   */
  @javax.annotation.Nullable
  public String getMerchantCity() {
    return merchantCity;
  }

  public void setMerchantCity(String merchantCity) {
    this.merchantCity = merchantCity;
  }


  public CardAuthorization1 merchantCountry(String merchantCountry) {
    this.merchantCountry = merchantCountry;
    return this;
  }

  /**
   * The country the merchant resides in.
   * @return merchantCountry
   */
  @javax.annotation.Nullable
  public String getMerchantCountry() {
    return merchantCountry;
  }

  public void setMerchantCountry(String merchantCountry) {
    this.merchantCountry = merchantCountry;
  }


  public CardAuthorization1 merchantDescriptor(String merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
    return this;
  }

  /**
   * The merchant descriptor of the merchant the card is transacting with.
   * @return merchantDescriptor
   */
  @javax.annotation.Nonnull
  public String getMerchantDescriptor() {
    return merchantDescriptor;
  }

  public void setMerchantDescriptor(String merchantDescriptor) {
    this.merchantDescriptor = merchantDescriptor;
  }


  public CardAuthorization1 network(NetworkEnum network) {
    this.network = network;
    return this;
  }

  /**
   * The payment network used to process this card authorization
   * @return network
   */
  @javax.annotation.Nonnull
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public CardAuthorization1 networkDetails(NetworkDetails networkDetails) {
    this.networkDetails = networkDetails;
    return this;
  }

  /**
   * Get networkDetails
   * @return networkDetails
   */
  @javax.annotation.Nonnull
  public NetworkDetails getNetworkDetails() {
    return networkDetails;
  }

  public void setNetworkDetails(NetworkDetails networkDetails) {
    this.networkDetails = networkDetails;
  }


  public CardAuthorization1 presentmentAmount(Integer presentmentAmount) {
    this.presentmentAmount = presentmentAmount;
    return this;
  }

  /**
   * The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
   * @return presentmentAmount
   */
  @javax.annotation.Nonnull
  public Integer getPresentmentAmount() {
    return presentmentAmount;
  }

  public void setPresentmentAmount(Integer presentmentAmount) {
    this.presentmentAmount = presentmentAmount;
  }


  public CardAuthorization1 presentmentCurrency(String presentmentCurrency) {
    this.presentmentCurrency = presentmentCurrency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
   * @return presentmentCurrency
   */
  @javax.annotation.Nonnull
  public String getPresentmentCurrency() {
    return presentmentCurrency;
  }

  public void setPresentmentCurrency(String presentmentCurrency) {
    this.presentmentCurrency = presentmentCurrency;
  }


  public CardAuthorization1 settlementAmount(Integer settlementAmount) {
    this.settlementAmount = settlementAmount;
    return this;
  }

  /**
   * The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
   * @return settlementAmount
   */
  @javax.annotation.Nonnull
  public Integer getSettlementAmount() {
    return settlementAmount;
  }

  public void setSettlementAmount(Integer settlementAmount) {
    this.settlementAmount = settlementAmount;
  }


  public CardAuthorization1 settlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
   * @return settlementCurrency
   */
  @javax.annotation.Nonnull
  public String getSettlementCurrency() {
    return settlementCurrency;
  }

  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardAuthorization1 cardAuthorization1 = (CardAuthorization1) o;
    return Objects.equals(this.accountId, cardAuthorization1.accountId) &&
        Objects.equals(this.cardId, cardAuthorization1.cardId) &&
        Objects.equals(this.decision, cardAuthorization1.decision) &&
        Objects.equals(this.merchantAcceptorId, cardAuthorization1.merchantAcceptorId) &&
        Objects.equals(this.merchantCategoryCode, cardAuthorization1.merchantCategoryCode) &&
        Objects.equals(this.merchantCity, cardAuthorization1.merchantCity) &&
        Objects.equals(this.merchantCountry, cardAuthorization1.merchantCountry) &&
        Objects.equals(this.merchantDescriptor, cardAuthorization1.merchantDescriptor) &&
        Objects.equals(this.network, cardAuthorization1.network) &&
        Objects.equals(this.networkDetails, cardAuthorization1.networkDetails) &&
        Objects.equals(this.presentmentAmount, cardAuthorization1.presentmentAmount) &&
        Objects.equals(this.presentmentCurrency, cardAuthorization1.presentmentCurrency) &&
        Objects.equals(this.settlementAmount, cardAuthorization1.settlementAmount) &&
        Objects.equals(this.settlementCurrency, cardAuthorization1.settlementCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, cardId, decision, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, presentmentAmount, presentmentCurrency, settlementAmount, settlementCurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardAuthorization1 {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    decision: ").append(toIndentedString(decision)).append("\n");
    sb.append("    merchantAcceptorId: ").append(toIndentedString(merchantAcceptorId)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountry: ").append(toIndentedString(merchantCountry)).append("\n");
    sb.append("    merchantDescriptor: ").append(toIndentedString(merchantDescriptor)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkDetails: ").append(toIndentedString(networkDetails)).append("\n");
    sb.append("    presentmentAmount: ").append(toIndentedString(presentmentAmount)).append("\n");
    sb.append("    presentmentCurrency: ").append(toIndentedString(presentmentCurrency)).append("\n");
    sb.append("    settlementAmount: ").append(toIndentedString(settlementAmount)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("card_id");
    openapiFields.add("decision");
    openapiFields.add("merchant_acceptor_id");
    openapiFields.add("merchant_category_code");
    openapiFields.add("merchant_city");
    openapiFields.add("merchant_country");
    openapiFields.add("merchant_descriptor");
    openapiFields.add("network");
    openapiFields.add("network_details");
    openapiFields.add("presentment_amount");
    openapiFields.add("presentment_currency");
    openapiFields.add("settlement_amount");
    openapiFields.add("settlement_currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("card_id");
    openapiRequiredFields.add("decision");
    openapiRequiredFields.add("merchant_acceptor_id");
    openapiRequiredFields.add("merchant_category_code");
    openapiRequiredFields.add("merchant_city");
    openapiRequiredFields.add("merchant_country");
    openapiRequiredFields.add("merchant_descriptor");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("network_details");
    openapiRequiredFields.add("presentment_amount");
    openapiRequiredFields.add("presentment_currency");
    openapiRequiredFields.add("settlement_amount");
    openapiRequiredFields.add("settlement_currency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardAuthorization1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardAuthorization1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardAuthorization1 is not found in the empty JSON string", CardAuthorization1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardAuthorization1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardAuthorization1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardAuthorization1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("decision") != null && !jsonObj.get("decision").isJsonNull()) && !jsonObj.get("decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decision").toString()));
      }
      // validate the required field `decision`
      DecisionEnum.validateJsonElement(jsonObj.get("decision"));
      if (!jsonObj.get("merchant_acceptor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_acceptor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_acceptor_id").toString()));
      }
      if ((jsonObj.get("merchant_category_code") != null && !jsonObj.get("merchant_category_code").isJsonNull()) && !jsonObj.get("merchant_category_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_category_code").toString()));
      }
      if ((jsonObj.get("merchant_city") != null && !jsonObj.get("merchant_city").isJsonNull()) && !jsonObj.get("merchant_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_city").toString()));
      }
      if ((jsonObj.get("merchant_country") != null && !jsonObj.get("merchant_country").isJsonNull()) && !jsonObj.get("merchant_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_country").toString()));
      }
      if (!jsonObj.get("merchant_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_descriptor").toString()));
      }
      if (!jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the required field `network`
      NetworkEnum.validateJsonElement(jsonObj.get("network"));
      // validate the required field `network_details`
      NetworkDetails.validateJsonElement(jsonObj.get("network_details"));
      if (!jsonObj.get("presentment_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentment_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentment_currency").toString()));
      }
      if (!jsonObj.get("settlement_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlement_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlement_currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardAuthorization1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardAuthorization1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardAuthorization1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardAuthorization1.class));

       return (TypeAdapter<T>) new TypeAdapter<CardAuthorization1>() {
           @Override
           public void write(JsonWriter out, CardAuthorization1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardAuthorization1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardAuthorization1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardAuthorization1
   * @throws IOException if the JSON string is invalid with respect to CardAuthorization1
   */
  public static CardAuthorization1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardAuthorization1.class);
  }

  /**
   * Convert an instance of CardAuthorization1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

