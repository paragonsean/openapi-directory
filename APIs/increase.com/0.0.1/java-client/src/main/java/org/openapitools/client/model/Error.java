/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorAnyOf;
import org.openapitools.client.model.ErrorAnyOf1;
import org.openapitools.client.model.ErrorAnyOf10;
import org.openapitools.client.model.ErrorAnyOf11;
import org.openapitools.client.model.ErrorAnyOf12;
import org.openapitools.client.model.ErrorAnyOf2;
import org.openapitools.client.model.ErrorAnyOf3;
import org.openapitools.client.model.ErrorAnyOf4;
import org.openapitools.client.model.ErrorAnyOf5;
import org.openapitools.client.model.ErrorAnyOf6;
import org.openapitools.client.model.ErrorAnyOf7;
import org.openapitools.client.model.ErrorAnyOf8;
import org.openapitools.client.model.ErrorAnyOf9;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Error extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Error.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Error.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Error' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ErrorAnyOf> adapterErrorAnyOf = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf.class));
            final TypeAdapter<ErrorAnyOf1> adapterErrorAnyOf1 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf1.class));
            final TypeAdapter<ErrorAnyOf2> adapterErrorAnyOf2 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf2.class));
            final TypeAdapter<ErrorAnyOf3> adapterErrorAnyOf3 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf3.class));
            final TypeAdapter<ErrorAnyOf4> adapterErrorAnyOf4 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf4.class));
            final TypeAdapter<ErrorAnyOf5> adapterErrorAnyOf5 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf5.class));
            final TypeAdapter<ErrorAnyOf6> adapterErrorAnyOf6 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf6.class));
            final TypeAdapter<ErrorAnyOf7> adapterErrorAnyOf7 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf7.class));
            final TypeAdapter<ErrorAnyOf8> adapterErrorAnyOf8 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf8.class));
            final TypeAdapter<ErrorAnyOf9> adapterErrorAnyOf9 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf9.class));
            final TypeAdapter<ErrorAnyOf10> adapterErrorAnyOf10 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf10.class));
            final TypeAdapter<ErrorAnyOf11> adapterErrorAnyOf11 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf11.class));
            final TypeAdapter<ErrorAnyOf12> adapterErrorAnyOf12 = gson.getDelegateAdapter(this, TypeToken.get(ErrorAnyOf12.class));

            return (TypeAdapter<T>) new TypeAdapter<Error>() {
                @Override
                public void write(JsonWriter out, Error value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ErrorAnyOf`
                    if (value.getActualInstance() instanceof ErrorAnyOf) {
                        JsonElement element = adapterErrorAnyOf.toJsonTree((ErrorAnyOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf1`
                    if (value.getActualInstance() instanceof ErrorAnyOf1) {
                        JsonElement element = adapterErrorAnyOf1.toJsonTree((ErrorAnyOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf2`
                    if (value.getActualInstance() instanceof ErrorAnyOf2) {
                        JsonElement element = adapterErrorAnyOf2.toJsonTree((ErrorAnyOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf3`
                    if (value.getActualInstance() instanceof ErrorAnyOf3) {
                        JsonElement element = adapterErrorAnyOf3.toJsonTree((ErrorAnyOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf4`
                    if (value.getActualInstance() instanceof ErrorAnyOf4) {
                        JsonElement element = adapterErrorAnyOf4.toJsonTree((ErrorAnyOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf5`
                    if (value.getActualInstance() instanceof ErrorAnyOf5) {
                        JsonElement element = adapterErrorAnyOf5.toJsonTree((ErrorAnyOf5)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf6`
                    if (value.getActualInstance() instanceof ErrorAnyOf6) {
                        JsonElement element = adapterErrorAnyOf6.toJsonTree((ErrorAnyOf6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf7`
                    if (value.getActualInstance() instanceof ErrorAnyOf7) {
                        JsonElement element = adapterErrorAnyOf7.toJsonTree((ErrorAnyOf7)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf8`
                    if (value.getActualInstance() instanceof ErrorAnyOf8) {
                        JsonElement element = adapterErrorAnyOf8.toJsonTree((ErrorAnyOf8)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf9`
                    if (value.getActualInstance() instanceof ErrorAnyOf9) {
                        JsonElement element = adapterErrorAnyOf9.toJsonTree((ErrorAnyOf9)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf10`
                    if (value.getActualInstance() instanceof ErrorAnyOf10) {
                        JsonElement element = adapterErrorAnyOf10.toJsonTree((ErrorAnyOf10)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf11`
                    if (value.getActualInstance() instanceof ErrorAnyOf11) {
                        JsonElement element = adapterErrorAnyOf11.toJsonTree((ErrorAnyOf11)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ErrorAnyOf12`
                    if (value.getActualInstance() instanceof ErrorAnyOf12) {
                        JsonElement element = adapterErrorAnyOf12.toJsonTree((ErrorAnyOf12)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9");
                }

                @Override
                public Error read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ErrorAnyOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf'", e);
                    }
                    // deserialize ErrorAnyOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf1;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf1'", e);
                    }
                    // deserialize ErrorAnyOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf2;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf2'", e);
                    }
                    // deserialize ErrorAnyOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf3;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf3'", e);
                    }
                    // deserialize ErrorAnyOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf4;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf4'", e);
                    }
                    // deserialize ErrorAnyOf5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf5.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf5;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf5 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf5'", e);
                    }
                    // deserialize ErrorAnyOf6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf6.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf6;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf6'", e);
                    }
                    // deserialize ErrorAnyOf7
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf7.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf7;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf7 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf7'", e);
                    }
                    // deserialize ErrorAnyOf8
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf8.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf8;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf8 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf8'", e);
                    }
                    // deserialize ErrorAnyOf9
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf9.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf9;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf9 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf9'", e);
                    }
                    // deserialize ErrorAnyOf10
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf10.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf10;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf10 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf10'", e);
                    }
                    // deserialize ErrorAnyOf11
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf11.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf11;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf11 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf11'", e);
                    }
                    // deserialize ErrorAnyOf12
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ErrorAnyOf12.validateJsonElement(jsonElement);
                        actualAdapter = adapterErrorAnyOf12;
                        Error ret = new Error();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ErrorAnyOf12 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ErrorAnyOf12'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for Error: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Error() {
        super("anyOf", Boolean.FALSE);
    }

    public Error(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ErrorAnyOf", ErrorAnyOf.class);
        schemas.put("ErrorAnyOf1", ErrorAnyOf1.class);
        schemas.put("ErrorAnyOf2", ErrorAnyOf2.class);
        schemas.put("ErrorAnyOf3", ErrorAnyOf3.class);
        schemas.put("ErrorAnyOf4", ErrorAnyOf4.class);
        schemas.put("ErrorAnyOf5", ErrorAnyOf5.class);
        schemas.put("ErrorAnyOf6", ErrorAnyOf6.class);
        schemas.put("ErrorAnyOf7", ErrorAnyOf7.class);
        schemas.put("ErrorAnyOf8", ErrorAnyOf8.class);
        schemas.put("ErrorAnyOf9", ErrorAnyOf9.class);
        schemas.put("ErrorAnyOf10", ErrorAnyOf10.class);
        schemas.put("ErrorAnyOf11", ErrorAnyOf11.class);
        schemas.put("ErrorAnyOf12", ErrorAnyOf12.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Error.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ErrorAnyOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf5) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf6) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf7) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf8) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf9) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf10) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf11) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ErrorAnyOf12) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9
     *
     * @return The actual instance (ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ErrorAnyOf`. If the actual instance is not `ErrorAnyOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf`
     * @throws ClassCastException if the instance is not `ErrorAnyOf`
     */
    public ErrorAnyOf getErrorAnyOf() throws ClassCastException {
        return (ErrorAnyOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf1`. If the actual instance is not `ErrorAnyOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf1`
     * @throws ClassCastException if the instance is not `ErrorAnyOf1`
     */
    public ErrorAnyOf1 getErrorAnyOf1() throws ClassCastException {
        return (ErrorAnyOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf2`. If the actual instance is not `ErrorAnyOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf2`
     * @throws ClassCastException if the instance is not `ErrorAnyOf2`
     */
    public ErrorAnyOf2 getErrorAnyOf2() throws ClassCastException {
        return (ErrorAnyOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf3`. If the actual instance is not `ErrorAnyOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf3`
     * @throws ClassCastException if the instance is not `ErrorAnyOf3`
     */
    public ErrorAnyOf3 getErrorAnyOf3() throws ClassCastException {
        return (ErrorAnyOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf4`. If the actual instance is not `ErrorAnyOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf4`
     * @throws ClassCastException if the instance is not `ErrorAnyOf4`
     */
    public ErrorAnyOf4 getErrorAnyOf4() throws ClassCastException {
        return (ErrorAnyOf4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf5`. If the actual instance is not `ErrorAnyOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf5`
     * @throws ClassCastException if the instance is not `ErrorAnyOf5`
     */
    public ErrorAnyOf5 getErrorAnyOf5() throws ClassCastException {
        return (ErrorAnyOf5)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf6`. If the actual instance is not `ErrorAnyOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf6`
     * @throws ClassCastException if the instance is not `ErrorAnyOf6`
     */
    public ErrorAnyOf6 getErrorAnyOf6() throws ClassCastException {
        return (ErrorAnyOf6)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf7`. If the actual instance is not `ErrorAnyOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf7`
     * @throws ClassCastException if the instance is not `ErrorAnyOf7`
     */
    public ErrorAnyOf7 getErrorAnyOf7() throws ClassCastException {
        return (ErrorAnyOf7)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf8`. If the actual instance is not `ErrorAnyOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf8`
     * @throws ClassCastException if the instance is not `ErrorAnyOf8`
     */
    public ErrorAnyOf8 getErrorAnyOf8() throws ClassCastException {
        return (ErrorAnyOf8)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf9`. If the actual instance is not `ErrorAnyOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf9`
     * @throws ClassCastException if the instance is not `ErrorAnyOf9`
     */
    public ErrorAnyOf9 getErrorAnyOf9() throws ClassCastException {
        return (ErrorAnyOf9)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf10`. If the actual instance is not `ErrorAnyOf10`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf10`
     * @throws ClassCastException if the instance is not `ErrorAnyOf10`
     */
    public ErrorAnyOf10 getErrorAnyOf10() throws ClassCastException {
        return (ErrorAnyOf10)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf11`. If the actual instance is not `ErrorAnyOf11`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf11`
     * @throws ClassCastException if the instance is not `ErrorAnyOf11`
     */
    public ErrorAnyOf11 getErrorAnyOf11() throws ClassCastException {
        return (ErrorAnyOf11)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ErrorAnyOf12`. If the actual instance is not `ErrorAnyOf12`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ErrorAnyOf12`
     * @throws ClassCastException if the instance is not `ErrorAnyOf12`
     */
    public ErrorAnyOf12 getErrorAnyOf12() throws ClassCastException {
        return (ErrorAnyOf12)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Error
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ErrorAnyOf
        try {
            ErrorAnyOf.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf1
        try {
            ErrorAnyOf1.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf2
        try {
            ErrorAnyOf2.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf3
        try {
            ErrorAnyOf3.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf4
        try {
            ErrorAnyOf4.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf5
        try {
            ErrorAnyOf5.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf5 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf6
        try {
            ErrorAnyOf6.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf7
        try {
            ErrorAnyOf7.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf7 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf8
        try {
            ErrorAnyOf8.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf8 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf9
        try {
            ErrorAnyOf9.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf9 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf10
        try {
            ErrorAnyOf10.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf10 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf11
        try {
            ErrorAnyOf11.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf11 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ErrorAnyOf12
        try {
            ErrorAnyOf12.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ErrorAnyOf12 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for Error with anyOf schemas: ErrorAnyOf, ErrorAnyOf1, ErrorAnyOf10, ErrorAnyOf11, ErrorAnyOf12, ErrorAnyOf2, ErrorAnyOf3, ErrorAnyOf4, ErrorAnyOf5, ErrorAnyOf6, ErrorAnyOf7, ErrorAnyOf8, ErrorAnyOf9. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of Error given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Error
     * @throws IOException if the JSON string is invalid with respect to Error
     */
    public static Error fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Error.class);
    }

    /**
     * Convert an instance of Error to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

