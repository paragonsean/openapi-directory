/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields specific to the &#x60;visa&#x60; network
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Visa {
  /**
   * For electronic commerce transactions, this identifies the level of security used in obtaining the customer&#39;s payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
   */
  @JsonAdapter(ElectronicCommerceIndicatorEnum.Adapter.class)
  public enum ElectronicCommerceIndicatorEnum {
    /**
     * Single transaction of a mail/phone order: Use to indicate that the transaction is a mail/phone order purchase, not a recurring transaction or installment payment. For domestic transactions in the US region, this value may also indicate one bill payment transaction in the card-present or card-absent environments.
     */
    MAIL_PHONE_ORDER("mail_phone_order"),
    
    /**
     * Recurring transaction: Payment indicator used to indicate a recurring transaction that originates from an acquirer in the US region.
     */
    RECURRING("recurring"),
    
    /**
     * Installment payment: Payment indicator used to indicate one purchase of goods or services that is billed to the account in multiple charges over a period of time agreed upon by the cardholder and merchant from transactions that originate from an acquirer in the US region.
     */
    INSTALLMENT("installment"),
    
    /**
     * Unknown classification: other mail order: Use to indicate that the type of mail/telephone order is unknown.
     */
    UNKNOWN_MAIL_PHONE_ORDER("unknown_mail_phone_order"),
    
    /**
     * Secure electronic commerce transaction: Use to indicate that the electronic commerce transaction has been authenticated using e.g., 3-D Secure
     */
    SECURE_ELECTRONIC_COMMERCE("secure_electronic_commerce"),
    
    /**
     * Non-authenticated security transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D Secure: Use to identify an electronic commerce transaction where the merchant attempted to authenticate the cardholder using 3-D Secure, but was unable to complete the authentication because the issuer or cardholder does not participate in the 3-D Secure program.
     */
    NON_AUTHENTICATED_SECURITY_TRANSACTION_AT_3DS_CAPABLE_MERCHANT("non_authenticated_security_transaction_at_3ds_capable_merchant"),
    
    /**
     * Non-authenticated security transaction: Use to identify an electronic commerce transaction that uses data encryption for security however , cardholder authentication is not performed using 3-D Secure.
     */
    NON_AUTHENTICATED_SECURITY_TRANSACTION("non_authenticated_security_transaction"),
    
    /**
     * Non-secure transaction: Use to identify an electronic commerce transaction that has no data protection.
     */
    NON_SECURE_TRANSACTION("non_secure_transaction");

    private String value;

    ElectronicCommerceIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ElectronicCommerceIndicatorEnum fromValue(String value) {
      for (ElectronicCommerceIndicatorEnum b : ElectronicCommerceIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ElectronicCommerceIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ElectronicCommerceIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ElectronicCommerceIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ElectronicCommerceIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ElectronicCommerceIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELECTRONIC_COMMERCE_INDICATOR = "electronic_commerce_indicator";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_COMMERCE_INDICATOR)
  private ElectronicCommerceIndicatorEnum electronicCommerceIndicator;

  /**
   * The method used to enter the cardholder&#39;s primary account number and card expiration date
   */
  @JsonAdapter(PointOfServiceEntryModeEnum.Adapter.class)
  public enum PointOfServiceEntryModeEnum {
    /**
     * Manual key entry
     */
    MANUAL("manual"),
    
    /**
     * Magnetic stripe read, without card verification value
     */
    MAGNETIC_STRIPE_NO_CVV("magnetic_stripe_no_cvv"),
    
    /**
     * Optical code
     */
    OPTICAL_CODE("optical_code"),
    
    /**
     * Contact chip card
     */
    INTEGRATED_CIRCUIT_CARD("integrated_circuit_card"),
    
    /**
     * Contactless read of chip card
     */
    CONTACTLESS("contactless"),
    
    /**
     * Transaction iniated using a credential that has previously been stored on file
     */
    CREDENTIAL_ON_FILE("credential_on_file"),
    
    /**
     * Magnetic stripe read
     */
    MAGNETIC_STRIPE("magnetic_stripe"),
    
    /**
     * Contactless read of magnetic stripe data
     */
    CONTACTLESS_MAGNETIC_STRIPE("contactless_magnetic_stripe"),
    
    /**
     * Contact chip card, without card verification value
     */
    INTEGRATED_CIRCUIT_CARD_NO_CVV("integrated_circuit_card_no_cvv");

    private String value;

    PointOfServiceEntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PointOfServiceEntryModeEnum fromValue(String value) {
      for (PointOfServiceEntryModeEnum b : PointOfServiceEntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PointOfServiceEntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PointOfServiceEntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PointOfServiceEntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PointOfServiceEntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PointOfServiceEntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POINT_OF_SERVICE_ENTRY_MODE = "point_of_service_entry_mode";
  @SerializedName(SERIALIZED_NAME_POINT_OF_SERVICE_ENTRY_MODE)
  private PointOfServiceEntryModeEnum pointOfServiceEntryMode;

  public Visa() {
  }

  public Visa electronicCommerceIndicator(ElectronicCommerceIndicatorEnum electronicCommerceIndicator) {
    this.electronicCommerceIndicator = electronicCommerceIndicator;
    return this;
  }

  /**
   * For electronic commerce transactions, this identifies the level of security used in obtaining the customer&#39;s payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
   * @return electronicCommerceIndicator
   */
  @javax.annotation.Nullable
  public ElectronicCommerceIndicatorEnum getElectronicCommerceIndicator() {
    return electronicCommerceIndicator;
  }

  public void setElectronicCommerceIndicator(ElectronicCommerceIndicatorEnum electronicCommerceIndicator) {
    this.electronicCommerceIndicator = electronicCommerceIndicator;
  }


  public Visa pointOfServiceEntryMode(PointOfServiceEntryModeEnum pointOfServiceEntryMode) {
    this.pointOfServiceEntryMode = pointOfServiceEntryMode;
    return this;
  }

  /**
   * The method used to enter the cardholder&#39;s primary account number and card expiration date
   * @return pointOfServiceEntryMode
   */
  @javax.annotation.Nullable
  public PointOfServiceEntryModeEnum getPointOfServiceEntryMode() {
    return pointOfServiceEntryMode;
  }

  public void setPointOfServiceEntryMode(PointOfServiceEntryModeEnum pointOfServiceEntryMode) {
    this.pointOfServiceEntryMode = pointOfServiceEntryMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Visa visa = (Visa) o;
    return Objects.equals(this.electronicCommerceIndicator, visa.electronicCommerceIndicator) &&
        Objects.equals(this.pointOfServiceEntryMode, visa.pointOfServiceEntryMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(electronicCommerceIndicator, pointOfServiceEntryMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visa {\n");
    sb.append("    electronicCommerceIndicator: ").append(toIndentedString(electronicCommerceIndicator)).append("\n");
    sb.append("    pointOfServiceEntryMode: ").append(toIndentedString(pointOfServiceEntryMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("electronic_commerce_indicator");
    openapiFields.add("point_of_service_entry_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("electronic_commerce_indicator");
    openapiRequiredFields.add("point_of_service_entry_mode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Visa
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Visa.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Visa is not found in the empty JSON string", Visa.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Visa.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Visa` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Visa.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("electronic_commerce_indicator") != null && !jsonObj.get("electronic_commerce_indicator").isJsonNull()) && !jsonObj.get("electronic_commerce_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronic_commerce_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronic_commerce_indicator").toString()));
      }
      // validate the required field `electronic_commerce_indicator`
      ElectronicCommerceIndicatorEnum.validateJsonElement(jsonObj.get("electronic_commerce_indicator"));
      if ((jsonObj.get("point_of_service_entry_mode") != null && !jsonObj.get("point_of_service_entry_mode").isJsonNull()) && !jsonObj.get("point_of_service_entry_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `point_of_service_entry_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("point_of_service_entry_mode").toString()));
      }
      // validate the required field `point_of_service_entry_mode`
      PointOfServiceEntryModeEnum.validateJsonElement(jsonObj.get("point_of_service_entry_mode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Visa.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Visa' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Visa> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Visa.class));

       return (TypeAdapter<T>) new TypeAdapter<Visa>() {
           @Override
           public void write(JsonWriter out, Visa value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Visa read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Visa given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Visa
   * @throws IOException if the JSON string is invalid with respect to Visa
   */
  public static Visa fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Visa.class);
  }

  /**
   * Convert an instance of Visa to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

