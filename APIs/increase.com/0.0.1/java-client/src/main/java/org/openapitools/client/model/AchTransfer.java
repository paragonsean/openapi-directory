/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ACHNotificationOfChange;
import org.openapitools.client.model.ACHTransferReturn;
import org.openapitools.client.model.ACHTransferSubmission;
import org.openapitools.client.model.TransferApproval;
import org.openapitools.client.model.TransferCancellation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchTransfer {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ADDENDUM = "addendum";
  @SerializedName(SERIALIZED_NAME_ADDENDUM)
  private String addendum;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private TransferApproval approval;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private TransferCancellation cancellation;

  public static final String SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE = "company_descriptive_date";
  @SerializedName(SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE)
  private String companyDescriptiveDate;

  public static final String SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA = "company_discretionary_data";
  @SerializedName(SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA)
  private String companyDiscretionaryData;

  public static final String SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION = "company_entry_description";
  @SerializedName(SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION)
  private String companyEntryDescription;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer&#39;s currency. For ACH transfers this is always equal to &#x60;usd&#x60;.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "external_account_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  /**
   * The type of the account to which the transfer will be sent.
   */
  @JsonAdapter(FundingEnum.Adapter.class)
  public enum FundingEnum {
    /**
     * A checking account.
     */
    CHECKING("checking"),
    
    /**
     * A savings account.
     */
    SAVINGS("savings");

    private String value;

    FundingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FundingEnum fromValue(String value) {
      for (FundingEnum b : FundingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FundingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FundingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FundingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FundingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FundingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private FundingEnum funding;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ID = "individual_id";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ID)
  private String individualId;

  public static final String SERIALIZED_NAME_INDIVIDUAL_NAME = "individual_name";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_NAME)
  private String individualName;

  /**
   * The transfer&#39;s network.
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    ACH("ach");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_OF_CHANGE = "notifications_of_change";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_OF_CHANGE)
  private List<ACHNotificationOfChange> notificationsOfChange = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN = "return";
  @SerializedName(SERIALIZED_NAME_RETURN)
  private ACHTransferReturn _return;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  /**
   * The Standard Entry Class (SEC) code to use for the transfer.
   */
  @JsonAdapter(StandardEntryClassCodeEnum.Adapter.class)
  public enum StandardEntryClassCodeEnum {
    /**
     * Corporate Credit and Debit (CCD).
     */
    CORPORATE_CREDIT_OR_DEBIT("corporate_credit_or_debit"),
    
    /**
     * Prearranged Payments and Deposits (PPD).
     */
    PREARRANGED_PAYMENTS_AND_DEPOSIT("prearranged_payments_and_deposit"),
    
    /**
     * Internet Initiated (WEB).
     */
    INTERNET_INITIATED("internet_initiated");

    private String value;

    StandardEntryClassCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardEntryClassCodeEnum fromValue(String value) {
      for (StandardEntryClassCodeEnum b : StandardEntryClassCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StandardEntryClassCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardEntryClassCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardEntryClassCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StandardEntryClassCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StandardEntryClassCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE = "standard_entry_class_code";
  @SerializedName(SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE)
  private StandardEntryClassCodeEnum standardEntryClassCode;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private String statementDescriptor;

  /**
   * The lifecycle status of the transfer.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The transfer is pending approval.
     */
    PENDING_APPROVAL("pending_approval"),
    
    /**
     * The transfer has been canceled.
     */
    CANCELED("canceled"),
    
    /**
     * The transfer is pending review by Increase.
     */
    PENDING_REVIEWING("pending_reviewing"),
    
    /**
     * The transfer is pending submission to the Federal Reserve.
     */
    PENDING_SUBMISSION("pending_submission"),
    
    /**
     * The transfer is complete.
     */
    SUBMITTED("submitted"),
    
    /**
     * The transfer has been returned.
     */
    RETURNED("returned"),
    
    /**
     * The transfer requires your attention.
     */
    REQUIRES_ATTENTION("requires_attention"),
    
    /**
     * The transfer has been rejected.
     */
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private ACHTransferSubmission submission;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;ach_transfer&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACH_TRANSFER("ach_transfer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AchTransfer() {
  }

  public AchTransfer accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The Account to which the transfer belongs.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AchTransfer accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The destination account number.
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public AchTransfer addendum(String addendum) {
    this.addendum = addendum;
    return this;
  }

  /**
   * Additional information that will be sent to the recipient.
   * @return addendum
   */
  @javax.annotation.Nullable
  public String getAddendum() {
    return addendum;
  }

  public void setAddendum(String addendum) {
    this.addendum = addendum;
  }


  public AchTransfer amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public AchTransfer approval(TransferApproval approval) {
    this.approval = approval;
    return this;
  }

  /**
   * Get approval
   * @return approval
   */
  @javax.annotation.Nullable
  public TransferApproval getApproval() {
    return approval;
  }

  public void setApproval(TransferApproval approval) {
    this.approval = approval;
  }


  public AchTransfer cancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public TransferCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public AchTransfer companyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
    return this;
  }

  /**
   * The description of the date of the transfer.
   * @return companyDescriptiveDate
   */
  @javax.annotation.Nullable
  public String getCompanyDescriptiveDate() {
    return companyDescriptiveDate;
  }

  public void setCompanyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
  }


  public AchTransfer companyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
    return this;
  }

  /**
   * The data you chose to associate with the transfer.
   * @return companyDiscretionaryData
   */
  @javax.annotation.Nullable
  public String getCompanyDiscretionaryData() {
    return companyDiscretionaryData;
  }

  public void setCompanyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
  }


  public AchTransfer companyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
    return this;
  }

  /**
   * The description of the transfer you set to be shown to the recipient.
   * @return companyEntryDescription
   */
  @javax.annotation.Nullable
  public String getCompanyEntryDescription() {
    return companyEntryDescription;
  }

  public void setCompanyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
  }


  public AchTransfer companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name by which the recipient knows you.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public AchTransfer createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AchTransfer currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer&#39;s currency. For ACH transfers this is always equal to &#x60;usd&#x60;.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public AchTransfer effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public AchTransfer externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * The identifier of the External Account the transfer was made to, if any.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public AchTransfer funding(FundingEnum funding) {
    this.funding = funding;
    return this;
  }

  /**
   * The type of the account to which the transfer will be sent.
   * @return funding
   */
  @javax.annotation.Nonnull
  public FundingEnum getFunding() {
    return funding;
  }

  public void setFunding(FundingEnum funding) {
    this.funding = funding;
  }


  public AchTransfer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ACH transfer&#39;s identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AchTransfer individualId(String individualId) {
    this.individualId = individualId;
    return this;
  }

  /**
   * Your identifer for the transfer recipient.
   * @return individualId
   */
  @javax.annotation.Nullable
  public String getIndividualId() {
    return individualId;
  }

  public void setIndividualId(String individualId) {
    this.individualId = individualId;
  }


  public AchTransfer individualName(String individualName) {
    this.individualName = individualName;
    return this;
  }

  /**
   * The name of the transfer recipient. This value is information and not verified by the recipient&#39;s bank.
   * @return individualName
   */
  @javax.annotation.Nullable
  public String getIndividualName() {
    return individualName;
  }

  public void setIndividualName(String individualName) {
    this.individualName = individualName;
  }


  public AchTransfer network(NetworkEnum network) {
    this.network = network;
    return this;
  }

  /**
   * The transfer&#39;s network.
   * @return network
   */
  @javax.annotation.Nonnull
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public AchTransfer notificationsOfChange(List<ACHNotificationOfChange> notificationsOfChange) {
    this.notificationsOfChange = notificationsOfChange;
    return this;
  }

  public AchTransfer addNotificationsOfChangeItem(ACHNotificationOfChange notificationsOfChangeItem) {
    if (this.notificationsOfChange == null) {
      this.notificationsOfChange = new ArrayList<>();
    }
    this.notificationsOfChange.add(notificationsOfChangeItem);
    return this;
  }

  /**
   * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
   * @return notificationsOfChange
   */
  @javax.annotation.Nonnull
  public List<ACHNotificationOfChange> getNotificationsOfChange() {
    return notificationsOfChange;
  }

  public void setNotificationsOfChange(List<ACHNotificationOfChange> notificationsOfChange) {
    this.notificationsOfChange = notificationsOfChange;
  }


  public AchTransfer _return(ACHTransferReturn _return) {
    this._return = _return;
    return this;
  }

  /**
   * Get _return
   * @return _return
   */
  @javax.annotation.Nullable
  public ACHTransferReturn getReturn() {
    return _return;
  }

  public void setReturn(ACHTransferReturn _return) {
    this._return = _return;
  }


  public AchTransfer routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The American Bankers&#39; Association (ABA) Routing Transit Number (RTN).
   * @return routingNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public AchTransfer standardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
    return this;
  }

  /**
   * The Standard Entry Class (SEC) code to use for the transfer.
   * @return standardEntryClassCode
   */
  @javax.annotation.Nonnull
  public StandardEntryClassCodeEnum getStandardEntryClassCode() {
    return standardEntryClassCode;
  }

  public void setStandardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
  }


  public AchTransfer statementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
    return this;
  }

  /**
   * The descriptor that will show on the recipient&#39;s bank statement.
   * @return statementDescriptor
   */
  @javax.annotation.Nonnull
  public String getStatementDescriptor() {
    return statementDescriptor;
  }

  public void setStatementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public AchTransfer status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The lifecycle status of the transfer.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AchTransfer submission(ACHTransferSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public ACHTransferSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(ACHTransferSubmission submission) {
    this.submission = submission;
  }


  public AchTransfer transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The ID for the transaction funding the transfer.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public AchTransfer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;ach_transfer&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchTransfer achTransfer = (AchTransfer) o;
    return Objects.equals(this.accountId, achTransfer.accountId) &&
        Objects.equals(this.accountNumber, achTransfer.accountNumber) &&
        Objects.equals(this.addendum, achTransfer.addendum) &&
        Objects.equals(this.amount, achTransfer.amount) &&
        Objects.equals(this.approval, achTransfer.approval) &&
        Objects.equals(this.cancellation, achTransfer.cancellation) &&
        Objects.equals(this.companyDescriptiveDate, achTransfer.companyDescriptiveDate) &&
        Objects.equals(this.companyDiscretionaryData, achTransfer.companyDiscretionaryData) &&
        Objects.equals(this.companyEntryDescription, achTransfer.companyEntryDescription) &&
        Objects.equals(this.companyName, achTransfer.companyName) &&
        Objects.equals(this.createdAt, achTransfer.createdAt) &&
        Objects.equals(this.currency, achTransfer.currency) &&
        Objects.equals(this.effectiveDate, achTransfer.effectiveDate) &&
        Objects.equals(this.externalAccountId, achTransfer.externalAccountId) &&
        Objects.equals(this.funding, achTransfer.funding) &&
        Objects.equals(this.id, achTransfer.id) &&
        Objects.equals(this.individualId, achTransfer.individualId) &&
        Objects.equals(this.individualName, achTransfer.individualName) &&
        Objects.equals(this.network, achTransfer.network) &&
        Objects.equals(this.notificationsOfChange, achTransfer.notificationsOfChange) &&
        Objects.equals(this._return, achTransfer._return) &&
        Objects.equals(this.routingNumber, achTransfer.routingNumber) &&
        Objects.equals(this.standardEntryClassCode, achTransfer.standardEntryClassCode) &&
        Objects.equals(this.statementDescriptor, achTransfer.statementDescriptor) &&
        Objects.equals(this.status, achTransfer.status) &&
        Objects.equals(this.submission, achTransfer.submission) &&
        Objects.equals(this.transactionId, achTransfer.transactionId) &&
        Objects.equals(this.type, achTransfer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountNumber, addendum, amount, approval, cancellation, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, createdAt, currency, effectiveDate, externalAccountId, funding, id, individualId, individualName, network, notificationsOfChange, _return, routingNumber, standardEntryClassCode, statementDescriptor, status, submission, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchTransfer {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    addendum: ").append(toIndentedString(addendum)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    companyDescriptiveDate: ").append(toIndentedString(companyDescriptiveDate)).append("\n");
    sb.append("    companyDiscretionaryData: ").append(toIndentedString(companyDiscretionaryData)).append("\n");
    sb.append("    companyEntryDescription: ").append(toIndentedString(companyEntryDescription)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    individualId: ").append(toIndentedString(individualId)).append("\n");
    sb.append("    individualName: ").append(toIndentedString(individualName)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    notificationsOfChange: ").append(toIndentedString(notificationsOfChange)).append("\n");
    sb.append("    _return: ").append(toIndentedString(_return)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    standardEntryClassCode: ").append(toIndentedString(standardEntryClassCode)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("account_number");
    openapiFields.add("addendum");
    openapiFields.add("amount");
    openapiFields.add("approval");
    openapiFields.add("cancellation");
    openapiFields.add("company_descriptive_date");
    openapiFields.add("company_discretionary_data");
    openapiFields.add("company_entry_description");
    openapiFields.add("company_name");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("effective_date");
    openapiFields.add("external_account_id");
    openapiFields.add("funding");
    openapiFields.add("id");
    openapiFields.add("individual_id");
    openapiFields.add("individual_name");
    openapiFields.add("network");
    openapiFields.add("notifications_of_change");
    openapiFields.add("return");
    openapiFields.add("routing_number");
    openapiFields.add("standard_entry_class_code");
    openapiFields.add("statement_descriptor");
    openapiFields.add("status");
    openapiFields.add("submission");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("addendum");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("approval");
    openapiRequiredFields.add("cancellation");
    openapiRequiredFields.add("company_descriptive_date");
    openapiRequiredFields.add("company_discretionary_data");
    openapiRequiredFields.add("company_entry_description");
    openapiRequiredFields.add("company_name");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("effective_date");
    openapiRequiredFields.add("external_account_id");
    openapiRequiredFields.add("funding");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("individual_id");
    openapiRequiredFields.add("individual_name");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("notifications_of_change");
    openapiRequiredFields.add("return");
    openapiRequiredFields.add("routing_number");
    openapiRequiredFields.add("standard_entry_class_code");
    openapiRequiredFields.add("statement_descriptor");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchTransfer is not found in the empty JSON string", AchTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AchTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("addendum") != null && !jsonObj.get("addendum").isJsonNull()) && !jsonObj.get("addendum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addendum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addendum").toString()));
      }
      // validate the required field `approval`
      TransferApproval.validateJsonElement(jsonObj.get("approval"));
      // validate the required field `cancellation`
      TransferCancellation.validateJsonElement(jsonObj.get("cancellation"));
      if ((jsonObj.get("company_descriptive_date") != null && !jsonObj.get("company_descriptive_date").isJsonNull()) && !jsonObj.get("company_descriptive_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_descriptive_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_descriptive_date").toString()));
      }
      if ((jsonObj.get("company_discretionary_data") != null && !jsonObj.get("company_discretionary_data").isJsonNull()) && !jsonObj.get("company_discretionary_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_discretionary_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_discretionary_data").toString()));
      }
      if ((jsonObj.get("company_entry_description") != null && !jsonObj.get("company_entry_description").isJsonNull()) && !jsonObj.get("company_entry_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_entry_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_entry_description").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if ((jsonObj.get("external_account_id") != null && !jsonObj.get("external_account_id").isJsonNull()) && !jsonObj.get("external_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_id").toString()));
      }
      if (!jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // validate the required field `funding`
      FundingEnum.validateJsonElement(jsonObj.get("funding"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("individual_id") != null && !jsonObj.get("individual_id").isJsonNull()) && !jsonObj.get("individual_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_id").toString()));
      }
      if ((jsonObj.get("individual_name") != null && !jsonObj.get("individual_name").isJsonNull()) && !jsonObj.get("individual_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_name").toString()));
      }
      if (!jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the required field `network`
      NetworkEnum.validateJsonElement(jsonObj.get("network"));
      // ensure the json data is an array
      if (!jsonObj.get("notifications_of_change").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_of_change` to be an array in the JSON string but got `%s`", jsonObj.get("notifications_of_change").toString()));
      }

      JsonArray jsonArraynotificationsOfChange = jsonObj.getAsJsonArray("notifications_of_change");
      // validate the required field `notifications_of_change` (array)
      for (int i = 0; i < jsonArraynotificationsOfChange.size(); i++) {
        ACHNotificationOfChange.validateJsonElement(jsonArraynotificationsOfChange.get(i));
      };
      // validate the required field `return`
      ACHTransferReturn.validateJsonElement(jsonObj.get("return"));
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if (!jsonObj.get("standard_entry_class_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_entry_class_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_entry_class_code").toString()));
      }
      // validate the required field `standard_entry_class_code`
      StandardEntryClassCodeEnum.validateJsonElement(jsonObj.get("standard_entry_class_code"));
      if (!jsonObj.get("statement_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_descriptor").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `submission`
      ACHTransferSubmission.validateJsonElement(jsonObj.get("submission"));
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<AchTransfer>() {
           @Override
           public void write(JsonWriter out, AchTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchTransfer
   * @throws IOException if the JSON string is invalid with respect to AchTransfer
   */
  public static AchTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchTransfer.class);
  }

  /**
   * Convert an instance of AchTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

