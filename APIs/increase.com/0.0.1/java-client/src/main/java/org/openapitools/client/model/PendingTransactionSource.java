/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ACHTransferInstruction;
import org.openapitools.client.model.AccountTransferInstruction;
import org.openapitools.client.model.CardAuthorization;
import org.openapitools.client.model.CheckDepositInstruction;
import org.openapitools.client.model.CheckTransferInstruction;
import org.openapitools.client.model.DeprecatedCardAuthorization;
import org.openapitools.client.model.InboundFundsHold;
import org.openapitools.client.model.RealTimePaymentsTransferInstruction;
import org.openapitools.client.model.WireDrawdownPaymentInstruction;
import org.openapitools.client.model.WireTransferInstruction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant&#39;s industry and location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PendingTransactionSource {
  public static final String SERIALIZED_NAME_ACCOUNT_TRANSFER_INSTRUCTION = "account_transfer_instruction";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TRANSFER_INSTRUCTION)
  private AccountTransferInstruction accountTransferInstruction;

  public static final String SERIALIZED_NAME_ACH_TRANSFER_INSTRUCTION = "ach_transfer_instruction";
  @SerializedName(SERIALIZED_NAME_ACH_TRANSFER_INSTRUCTION)
  private ACHTransferInstruction achTransferInstruction;

  public static final String SERIALIZED_NAME_CARD_AUTHORIZATION = "card_authorization";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHORIZATION)
  private CardAuthorization cardAuthorization;

  public static final String SERIALIZED_NAME_CARD_ROUTE_AUTHORIZATION = "card_route_authorization";
  @SerializedName(SERIALIZED_NAME_CARD_ROUTE_AUTHORIZATION)
  private DeprecatedCardAuthorization cardRouteAuthorization;

  /**
   * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * The Pending Transaction was created by a Account Transfer Instruction object. Details will be under the &#x60;account_transfer_instruction&#x60; object.
     */
    ACCOUNT_TRANSFER_INSTRUCTION("account_transfer_instruction"),
    
    /**
     * The Pending Transaction was created by a ACH Transfer Instruction object. Details will be under the &#x60;ach_transfer_instruction&#x60; object.
     */
    ACH_TRANSFER_INSTRUCTION("ach_transfer_instruction"),
    
    /**
     * The Pending Transaction was created by a Card Authorization object. Details will be under the &#x60;card_authorization&#x60; object.
     */
    CARD_AUTHORIZATION("card_authorization"),
    
    /**
     * The Pending Transaction was created by a Check Deposit Instruction object. Details will be under the &#x60;check_deposit_instruction&#x60; object.
     */
    CHECK_DEPOSIT_INSTRUCTION("check_deposit_instruction"),
    
    /**
     * The Pending Transaction was created by a Check Transfer Instruction object. Details will be under the &#x60;check_transfer_instruction&#x60; object.
     */
    CHECK_TRANSFER_INSTRUCTION("check_transfer_instruction"),
    
    /**
     * The Pending Transaction was created by a Inbound Funds Hold object. Details will be under the &#x60;inbound_funds_hold&#x60; object.
     */
    INBOUND_FUNDS_HOLD("inbound_funds_hold"),
    
    /**
     * The Pending Transaction was created by a Deprecated Card Authorization object. Details will be under the &#x60;card_route_authorization&#x60; object.
     */
    CARD_ROUTE_AUTHORIZATION("card_route_authorization"),
    
    /**
     * The Pending Transaction was created by a Real Time Payments Transfer Instruction object. Details will be under the &#x60;real_time_payments_transfer_instruction&#x60; object.
     */
    REAL_TIME_PAYMENTS_TRANSFER_INSTRUCTION("real_time_payments_transfer_instruction"),
    
    /**
     * The Pending Transaction was created by a Wire Drawdown Payment Instruction object. Details will be under the &#x60;wire_drawdown_payment_instruction&#x60; object.
     */
    WIRE_DRAWDOWN_PAYMENT_INSTRUCTION("wire_drawdown_payment_instruction"),
    
    /**
     * The Pending Transaction was created by a Wire Transfer Instruction object. Details will be under the &#x60;wire_transfer_instruction&#x60; object.
     */
    WIRE_TRANSFER_INSTRUCTION("wire_transfer_instruction"),
    
    /**
     * The Pending Transaction was made for an undocumented or deprecated reason.
     */
    OTHER("other");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CHECK_DEPOSIT_INSTRUCTION = "check_deposit_instruction";
  @SerializedName(SERIALIZED_NAME_CHECK_DEPOSIT_INSTRUCTION)
  private CheckDepositInstruction checkDepositInstruction;

  public static final String SERIALIZED_NAME_CHECK_TRANSFER_INSTRUCTION = "check_transfer_instruction";
  @SerializedName(SERIALIZED_NAME_CHECK_TRANSFER_INSTRUCTION)
  private CheckTransferInstruction checkTransferInstruction;

  public static final String SERIALIZED_NAME_INBOUND_FUNDS_HOLD = "inbound_funds_hold";
  @SerializedName(SERIALIZED_NAME_INBOUND_FUNDS_HOLD)
  private InboundFundsHold inboundFundsHold;

  public static final String SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFER_INSTRUCTION = "real_time_payments_transfer_instruction";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFER_INSTRUCTION)
  private RealTimePaymentsTransferInstruction realTimePaymentsTransferInstruction;

  public static final String SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_INSTRUCTION = "wire_drawdown_payment_instruction";
  @SerializedName(SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_INSTRUCTION)
  private WireDrawdownPaymentInstruction wireDrawdownPaymentInstruction;

  public static final String SERIALIZED_NAME_WIRE_TRANSFER_INSTRUCTION = "wire_transfer_instruction";
  @SerializedName(SERIALIZED_NAME_WIRE_TRANSFER_INSTRUCTION)
  private WireTransferInstruction wireTransferInstruction;

  public PendingTransactionSource() {
  }

  public PendingTransactionSource accountTransferInstruction(AccountTransferInstruction accountTransferInstruction) {
    this.accountTransferInstruction = accountTransferInstruction;
    return this;
  }

  /**
   * Get accountTransferInstruction
   * @return accountTransferInstruction
   */
  @javax.annotation.Nullable
  public AccountTransferInstruction getAccountTransferInstruction() {
    return accountTransferInstruction;
  }

  public void setAccountTransferInstruction(AccountTransferInstruction accountTransferInstruction) {
    this.accountTransferInstruction = accountTransferInstruction;
  }


  public PendingTransactionSource achTransferInstruction(ACHTransferInstruction achTransferInstruction) {
    this.achTransferInstruction = achTransferInstruction;
    return this;
  }

  /**
   * Get achTransferInstruction
   * @return achTransferInstruction
   */
  @javax.annotation.Nullable
  public ACHTransferInstruction getAchTransferInstruction() {
    return achTransferInstruction;
  }

  public void setAchTransferInstruction(ACHTransferInstruction achTransferInstruction) {
    this.achTransferInstruction = achTransferInstruction;
  }


  public PendingTransactionSource cardAuthorization(CardAuthorization cardAuthorization) {
    this.cardAuthorization = cardAuthorization;
    return this;
  }

  /**
   * Get cardAuthorization
   * @return cardAuthorization
   */
  @javax.annotation.Nullable
  public CardAuthorization getCardAuthorization() {
    return cardAuthorization;
  }

  public void setCardAuthorization(CardAuthorization cardAuthorization) {
    this.cardAuthorization = cardAuthorization;
  }


  public PendingTransactionSource cardRouteAuthorization(DeprecatedCardAuthorization cardRouteAuthorization) {
    this.cardRouteAuthorization = cardRouteAuthorization;
    return this;
  }

  /**
   * Get cardRouteAuthorization
   * @return cardRouteAuthorization
   */
  @javax.annotation.Nullable
  public DeprecatedCardAuthorization getCardRouteAuthorization() {
    return cardRouteAuthorization;
  }

  public void setCardRouteAuthorization(DeprecatedCardAuthorization cardRouteAuthorization) {
    this.cardRouteAuthorization = cardRouteAuthorization;
  }


  public PendingTransactionSource category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public PendingTransactionSource checkDepositInstruction(CheckDepositInstruction checkDepositInstruction) {
    this.checkDepositInstruction = checkDepositInstruction;
    return this;
  }

  /**
   * Get checkDepositInstruction
   * @return checkDepositInstruction
   */
  @javax.annotation.Nullable
  public CheckDepositInstruction getCheckDepositInstruction() {
    return checkDepositInstruction;
  }

  public void setCheckDepositInstruction(CheckDepositInstruction checkDepositInstruction) {
    this.checkDepositInstruction = checkDepositInstruction;
  }


  public PendingTransactionSource checkTransferInstruction(CheckTransferInstruction checkTransferInstruction) {
    this.checkTransferInstruction = checkTransferInstruction;
    return this;
  }

  /**
   * Get checkTransferInstruction
   * @return checkTransferInstruction
   */
  @javax.annotation.Nullable
  public CheckTransferInstruction getCheckTransferInstruction() {
    return checkTransferInstruction;
  }

  public void setCheckTransferInstruction(CheckTransferInstruction checkTransferInstruction) {
    this.checkTransferInstruction = checkTransferInstruction;
  }


  public PendingTransactionSource inboundFundsHold(InboundFundsHold inboundFundsHold) {
    this.inboundFundsHold = inboundFundsHold;
    return this;
  }

  /**
   * Get inboundFundsHold
   * @return inboundFundsHold
   */
  @javax.annotation.Nullable
  public InboundFundsHold getInboundFundsHold() {
    return inboundFundsHold;
  }

  public void setInboundFundsHold(InboundFundsHold inboundFundsHold) {
    this.inboundFundsHold = inboundFundsHold;
  }


  public PendingTransactionSource realTimePaymentsTransferInstruction(RealTimePaymentsTransferInstruction realTimePaymentsTransferInstruction) {
    this.realTimePaymentsTransferInstruction = realTimePaymentsTransferInstruction;
    return this;
  }

  /**
   * Get realTimePaymentsTransferInstruction
   * @return realTimePaymentsTransferInstruction
   */
  @javax.annotation.Nullable
  public RealTimePaymentsTransferInstruction getRealTimePaymentsTransferInstruction() {
    return realTimePaymentsTransferInstruction;
  }

  public void setRealTimePaymentsTransferInstruction(RealTimePaymentsTransferInstruction realTimePaymentsTransferInstruction) {
    this.realTimePaymentsTransferInstruction = realTimePaymentsTransferInstruction;
  }


  public PendingTransactionSource wireDrawdownPaymentInstruction(WireDrawdownPaymentInstruction wireDrawdownPaymentInstruction) {
    this.wireDrawdownPaymentInstruction = wireDrawdownPaymentInstruction;
    return this;
  }

  /**
   * Get wireDrawdownPaymentInstruction
   * @return wireDrawdownPaymentInstruction
   */
  @javax.annotation.Nullable
  public WireDrawdownPaymentInstruction getWireDrawdownPaymentInstruction() {
    return wireDrawdownPaymentInstruction;
  }

  public void setWireDrawdownPaymentInstruction(WireDrawdownPaymentInstruction wireDrawdownPaymentInstruction) {
    this.wireDrawdownPaymentInstruction = wireDrawdownPaymentInstruction;
  }


  public PendingTransactionSource wireTransferInstruction(WireTransferInstruction wireTransferInstruction) {
    this.wireTransferInstruction = wireTransferInstruction;
    return this;
  }

  /**
   * Get wireTransferInstruction
   * @return wireTransferInstruction
   */
  @javax.annotation.Nullable
  public WireTransferInstruction getWireTransferInstruction() {
    return wireTransferInstruction;
  }

  public void setWireTransferInstruction(WireTransferInstruction wireTransferInstruction) {
    this.wireTransferInstruction = wireTransferInstruction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingTransactionSource pendingTransactionSource = (PendingTransactionSource) o;
    return Objects.equals(this.accountTransferInstruction, pendingTransactionSource.accountTransferInstruction) &&
        Objects.equals(this.achTransferInstruction, pendingTransactionSource.achTransferInstruction) &&
        Objects.equals(this.cardAuthorization, pendingTransactionSource.cardAuthorization) &&
        Objects.equals(this.cardRouteAuthorization, pendingTransactionSource.cardRouteAuthorization) &&
        Objects.equals(this.category, pendingTransactionSource.category) &&
        Objects.equals(this.checkDepositInstruction, pendingTransactionSource.checkDepositInstruction) &&
        Objects.equals(this.checkTransferInstruction, pendingTransactionSource.checkTransferInstruction) &&
        Objects.equals(this.inboundFundsHold, pendingTransactionSource.inboundFundsHold) &&
        Objects.equals(this.realTimePaymentsTransferInstruction, pendingTransactionSource.realTimePaymentsTransferInstruction) &&
        Objects.equals(this.wireDrawdownPaymentInstruction, pendingTransactionSource.wireDrawdownPaymentInstruction) &&
        Objects.equals(this.wireTransferInstruction, pendingTransactionSource.wireTransferInstruction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTransferInstruction, achTransferInstruction, cardAuthorization, cardRouteAuthorization, category, checkDepositInstruction, checkTransferInstruction, inboundFundsHold, realTimePaymentsTransferInstruction, wireDrawdownPaymentInstruction, wireTransferInstruction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingTransactionSource {\n");
    sb.append("    accountTransferInstruction: ").append(toIndentedString(accountTransferInstruction)).append("\n");
    sb.append("    achTransferInstruction: ").append(toIndentedString(achTransferInstruction)).append("\n");
    sb.append("    cardAuthorization: ").append(toIndentedString(cardAuthorization)).append("\n");
    sb.append("    cardRouteAuthorization: ").append(toIndentedString(cardRouteAuthorization)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    checkDepositInstruction: ").append(toIndentedString(checkDepositInstruction)).append("\n");
    sb.append("    checkTransferInstruction: ").append(toIndentedString(checkTransferInstruction)).append("\n");
    sb.append("    inboundFundsHold: ").append(toIndentedString(inboundFundsHold)).append("\n");
    sb.append("    realTimePaymentsTransferInstruction: ").append(toIndentedString(realTimePaymentsTransferInstruction)).append("\n");
    sb.append("    wireDrawdownPaymentInstruction: ").append(toIndentedString(wireDrawdownPaymentInstruction)).append("\n");
    sb.append("    wireTransferInstruction: ").append(toIndentedString(wireTransferInstruction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_transfer_instruction");
    openapiFields.add("ach_transfer_instruction");
    openapiFields.add("card_authorization");
    openapiFields.add("card_route_authorization");
    openapiFields.add("category");
    openapiFields.add("check_deposit_instruction");
    openapiFields.add("check_transfer_instruction");
    openapiFields.add("inbound_funds_hold");
    openapiFields.add("real_time_payments_transfer_instruction");
    openapiFields.add("wire_drawdown_payment_instruction");
    openapiFields.add("wire_transfer_instruction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_transfer_instruction");
    openapiRequiredFields.add("ach_transfer_instruction");
    openapiRequiredFields.add("card_authorization");
    openapiRequiredFields.add("card_route_authorization");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("check_deposit_instruction");
    openapiRequiredFields.add("check_transfer_instruction");
    openapiRequiredFields.add("inbound_funds_hold");
    openapiRequiredFields.add("real_time_payments_transfer_instruction");
    openapiRequiredFields.add("wire_drawdown_payment_instruction");
    openapiRequiredFields.add("wire_transfer_instruction");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingTransactionSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingTransactionSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingTransactionSource is not found in the empty JSON string", PendingTransactionSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingTransactionSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingTransactionSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PendingTransactionSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `account_transfer_instruction`
      AccountTransferInstruction.validateJsonElement(jsonObj.get("account_transfer_instruction"));
      // validate the required field `ach_transfer_instruction`
      ACHTransferInstruction.validateJsonElement(jsonObj.get("ach_transfer_instruction"));
      // validate the required field `card_authorization`
      CardAuthorization.validateJsonElement(jsonObj.get("card_authorization"));
      // validate the required field `card_route_authorization`
      DeprecatedCardAuthorization.validateJsonElement(jsonObj.get("card_route_authorization"));
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      // validate the required field `check_deposit_instruction`
      CheckDepositInstruction.validateJsonElement(jsonObj.get("check_deposit_instruction"));
      // validate the required field `check_transfer_instruction`
      CheckTransferInstruction.validateJsonElement(jsonObj.get("check_transfer_instruction"));
      // validate the required field `inbound_funds_hold`
      InboundFundsHold.validateJsonElement(jsonObj.get("inbound_funds_hold"));
      // validate the required field `real_time_payments_transfer_instruction`
      RealTimePaymentsTransferInstruction.validateJsonElement(jsonObj.get("real_time_payments_transfer_instruction"));
      // validate the required field `wire_drawdown_payment_instruction`
      WireDrawdownPaymentInstruction.validateJsonElement(jsonObj.get("wire_drawdown_payment_instruction"));
      // validate the required field `wire_transfer_instruction`
      WireTransferInstruction.validateJsonElement(jsonObj.get("wire_transfer_instruction"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingTransactionSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingTransactionSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingTransactionSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingTransactionSource.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingTransactionSource>() {
           @Override
           public void write(JsonWriter out, PendingTransactionSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingTransactionSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingTransactionSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingTransactionSource
   * @throws IOException if the JSON string is invalid with respect to PendingTransactionSource
   */
  public static PendingTransactionSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingTransactionSource.class);
  }

  /**
   * Convert an instance of PendingTransactionSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

