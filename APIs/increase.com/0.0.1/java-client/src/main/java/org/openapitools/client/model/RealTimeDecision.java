/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CardAuthorization1;
import org.openapitools.client.model.DigitalWalletAuthentication;
import org.openapitools.client.model.DigitalWalletToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you&#39;re interested in trying them out!
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RealTimeDecision {
  public static final String SERIALIZED_NAME_CARD_AUTHORIZATION = "card_authorization";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHORIZATION)
  private CardAuthorization1 cardAuthorization;

  /**
   * The category of the Real-Time Decision.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * A card is being authorized.
     */
    CARD_AUTHORIZATION_REQUESTED("card_authorization_requested"),
    
    /**
     * A card is being loaded into a digital wallet.
     */
    DIGITAL_WALLET_TOKEN_REQUESTED("digital_wallet_token_requested"),
    
    /**
     * A card is being loaded into a digital wallet and requires cardholder authentication.
     */
    DIGITAL_WALLET_AUTHENTICATION_REQUESTED("digital_wallet_authentication_requested");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DIGITAL_WALLET_AUTHENTICATION = "digital_wallet_authentication";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET_AUTHENTICATION)
  private DigitalWalletAuthentication digitalWalletAuthentication;

  public static final String SERIALIZED_NAME_DIGITAL_WALLET_TOKEN = "digital_wallet_token";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET_TOKEN)
  private DigitalWalletToken digitalWalletToken;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the Real-Time Decision.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The decision is pending action via real-time webhook.
     */
    PENDING("pending"),
    
    /**
     * Your webhook actioned the real-time decision.
     */
    RESPONDED("responded"),
    
    /**
     * Your webhook failed to respond to the authorization in time.
     */
    TIMED_OUT("timed_out");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIMEOUT_AT = "timeout_at";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_AT)
  private OffsetDateTime timeoutAt;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;real_time_decision&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REAL_TIME_DECISION("real_time_decision");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public RealTimeDecision() {
  }

  public RealTimeDecision cardAuthorization(CardAuthorization1 cardAuthorization) {
    this.cardAuthorization = cardAuthorization;
    return this;
  }

  /**
   * Get cardAuthorization
   * @return cardAuthorization
   */
  @javax.annotation.Nullable
  public CardAuthorization1 getCardAuthorization() {
    return cardAuthorization;
  }

  public void setCardAuthorization(CardAuthorization1 cardAuthorization) {
    this.cardAuthorization = cardAuthorization;
  }


  public RealTimeDecision category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the Real-Time Decision.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public RealTimeDecision createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RealTimeDecision digitalWalletAuthentication(DigitalWalletAuthentication digitalWalletAuthentication) {
    this.digitalWalletAuthentication = digitalWalletAuthentication;
    return this;
  }

  /**
   * Get digitalWalletAuthentication
   * @return digitalWalletAuthentication
   */
  @javax.annotation.Nullable
  public DigitalWalletAuthentication getDigitalWalletAuthentication() {
    return digitalWalletAuthentication;
  }

  public void setDigitalWalletAuthentication(DigitalWalletAuthentication digitalWalletAuthentication) {
    this.digitalWalletAuthentication = digitalWalletAuthentication;
  }


  public RealTimeDecision digitalWalletToken(DigitalWalletToken digitalWalletToken) {
    this.digitalWalletToken = digitalWalletToken;
    return this;
  }

  /**
   * Get digitalWalletToken
   * @return digitalWalletToken
   */
  @javax.annotation.Nullable
  public DigitalWalletToken getDigitalWalletToken() {
    return digitalWalletToken;
  }

  public void setDigitalWalletToken(DigitalWalletToken digitalWalletToken) {
    this.digitalWalletToken = digitalWalletToken;
  }


  public RealTimeDecision id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Real-Time Decision identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RealTimeDecision status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the Real-Time Decision.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RealTimeDecision timeoutAt(OffsetDateTime timeoutAt) {
    this.timeoutAt = timeoutAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
   * @return timeoutAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeoutAt() {
    return timeoutAt;
  }

  public void setTimeoutAt(OffsetDateTime timeoutAt) {
    this.timeoutAt = timeoutAt;
  }


  public RealTimeDecision type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;real_time_decision&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealTimeDecision realTimeDecision = (RealTimeDecision) o;
    return Objects.equals(this.cardAuthorization, realTimeDecision.cardAuthorization) &&
        Objects.equals(this.category, realTimeDecision.category) &&
        Objects.equals(this.createdAt, realTimeDecision.createdAt) &&
        Objects.equals(this.digitalWalletAuthentication, realTimeDecision.digitalWalletAuthentication) &&
        Objects.equals(this.digitalWalletToken, realTimeDecision.digitalWalletToken) &&
        Objects.equals(this.id, realTimeDecision.id) &&
        Objects.equals(this.status, realTimeDecision.status) &&
        Objects.equals(this.timeoutAt, realTimeDecision.timeoutAt) &&
        Objects.equals(this.type, realTimeDecision.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAuthorization, category, createdAt, digitalWalletAuthentication, digitalWalletToken, id, status, timeoutAt, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealTimeDecision {\n");
    sb.append("    cardAuthorization: ").append(toIndentedString(cardAuthorization)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    digitalWalletAuthentication: ").append(toIndentedString(digitalWalletAuthentication)).append("\n");
    sb.append("    digitalWalletToken: ").append(toIndentedString(digitalWalletToken)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeoutAt: ").append(toIndentedString(timeoutAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_authorization");
    openapiFields.add("category");
    openapiFields.add("created_at");
    openapiFields.add("digital_wallet_authentication");
    openapiFields.add("digital_wallet_token");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("timeout_at");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("card_authorization");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("digital_wallet_authentication");
    openapiRequiredFields.add("digital_wallet_token");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timeout_at");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealTimeDecision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealTimeDecision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealTimeDecision is not found in the empty JSON string", RealTimeDecision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealTimeDecision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealTimeDecision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RealTimeDecision.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `card_authorization`
      CardAuthorization1.validateJsonElement(jsonObj.get("card_authorization"));
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      // validate the required field `digital_wallet_authentication`
      DigitalWalletAuthentication.validateJsonElement(jsonObj.get("digital_wallet_authentication"));
      // validate the required field `digital_wallet_token`
      DigitalWalletToken.validateJsonElement(jsonObj.get("digital_wallet_token"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealTimeDecision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealTimeDecision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealTimeDecision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealTimeDecision.class));

       return (TypeAdapter<T>) new TypeAdapter<RealTimeDecision>() {
           @Override
           public void write(JsonWriter out, RealTimeDecision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealTimeDecision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealTimeDecision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealTimeDecision
   * @throws IOException if the JSON string is invalid with respect to RealTimeDecision
   */
  public static RealTimeDecision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealTimeDecision.class);
  }

  /**
   * Convert an instance of RealTimeDecision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

