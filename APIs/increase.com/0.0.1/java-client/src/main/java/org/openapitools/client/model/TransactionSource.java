/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ACHCheckConversion;
import org.openapitools.client.model.ACHCheckConversionReturn;
import org.openapitools.client.model.ACHTransferIntention;
import org.openapitools.client.model.ACHTransferRejection;
import org.openapitools.client.model.ACHTransferReturn1;
import org.openapitools.client.model.AccountTransferIntention;
import org.openapitools.client.model.CardDisputeAcceptance1;
import org.openapitools.client.model.CardRefund;
import org.openapitools.client.model.CardRevenuePayment;
import org.openapitools.client.model.CardSettlement;
import org.openapitools.client.model.CheckDepositAcceptance1;
import org.openapitools.client.model.CheckDepositReturn1;
import org.openapitools.client.model.CheckTransferIntention;
import org.openapitools.client.model.CheckTransferRejection;
import org.openapitools.client.model.CheckTransferReturn1;
import org.openapitools.client.model.CheckTransferStopPaymentRequest1;
import org.openapitools.client.model.DeprecatedCardRefund;
import org.openapitools.client.model.DeprecatedCardSettlement;
import org.openapitools.client.model.DisputeResolution;
import org.openapitools.client.model.EmpyrealCashDeposit;
import org.openapitools.client.model.FeePayment;
import org.openapitools.client.model.InboundACHTransfer;
import org.openapitools.client.model.InboundCheck;
import org.openapitools.client.model.InboundInternationalACHTransfer;
import org.openapitools.client.model.InboundRealTimePaymentsTransferConfirmation;
import org.openapitools.client.model.InboundWireDrawdownPayment;
import org.openapitools.client.model.InboundWireDrawdownPaymentReversal;
import org.openapitools.client.model.InboundWireReversal;
import org.openapitools.client.model.InboundWireTransfer;
import org.openapitools.client.model.InterestPayment;
import org.openapitools.client.model.InternalSource;
import org.openapitools.client.model.RealTimePaymentsTransferAcknowledgement;
import org.openapitools.client.model.SampleFunds;
import org.openapitools.client.model.WireDrawdownPaymentIntention;
import org.openapitools.client.model.WireDrawdownPaymentRejection;
import org.openapitools.client.model.WireTransferIntention;
import org.openapitools.client.model.WireTransferRejection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionSource {
  public static final String SERIALIZED_NAME_ACCOUNT_TRANSFER_INTENTION = "account_transfer_intention";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TRANSFER_INTENTION)
  private AccountTransferIntention accountTransferIntention;

  public static final String SERIALIZED_NAME_ACH_CHECK_CONVERSION = "ach_check_conversion";
  @SerializedName(SERIALIZED_NAME_ACH_CHECK_CONVERSION)
  private ACHCheckConversion achCheckConversion;

  public static final String SERIALIZED_NAME_ACH_CHECK_CONVERSION_RETURN = "ach_check_conversion_return";
  @SerializedName(SERIALIZED_NAME_ACH_CHECK_CONVERSION_RETURN)
  private ACHCheckConversionReturn achCheckConversionReturn;

  public static final String SERIALIZED_NAME_ACH_TRANSFER_INTENTION = "ach_transfer_intention";
  @SerializedName(SERIALIZED_NAME_ACH_TRANSFER_INTENTION)
  private ACHTransferIntention achTransferIntention;

  public static final String SERIALIZED_NAME_ACH_TRANSFER_REJECTION = "ach_transfer_rejection";
  @SerializedName(SERIALIZED_NAME_ACH_TRANSFER_REJECTION)
  private ACHTransferRejection achTransferRejection;

  public static final String SERIALIZED_NAME_ACH_TRANSFER_RETURN = "ach_transfer_return";
  @SerializedName(SERIALIZED_NAME_ACH_TRANSFER_RETURN)
  private ACHTransferReturn1 achTransferReturn;

  public static final String SERIALIZED_NAME_CARD_DISPUTE_ACCEPTANCE = "card_dispute_acceptance";
  @SerializedName(SERIALIZED_NAME_CARD_DISPUTE_ACCEPTANCE)
  private CardDisputeAcceptance1 cardDisputeAcceptance;

  public static final String SERIALIZED_NAME_CARD_REFUND = "card_refund";
  @SerializedName(SERIALIZED_NAME_CARD_REFUND)
  private CardRefund cardRefund;

  public static final String SERIALIZED_NAME_CARD_REVENUE_PAYMENT = "card_revenue_payment";
  @SerializedName(SERIALIZED_NAME_CARD_REVENUE_PAYMENT)
  private CardRevenuePayment cardRevenuePayment;

  public static final String SERIALIZED_NAME_CARD_ROUTE_REFUND = "card_route_refund";
  @SerializedName(SERIALIZED_NAME_CARD_ROUTE_REFUND)
  private DeprecatedCardRefund cardRouteRefund;

  public static final String SERIALIZED_NAME_CARD_ROUTE_SETTLEMENT = "card_route_settlement";
  @SerializedName(SERIALIZED_NAME_CARD_ROUTE_SETTLEMENT)
  private DeprecatedCardSettlement cardRouteSettlement;

  public static final String SERIALIZED_NAME_CARD_SETTLEMENT = "card_settlement";
  @SerializedName(SERIALIZED_NAME_CARD_SETTLEMENT)
  private CardSettlement cardSettlement;

  /**
   * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * The Transaction was created by a Account Transfer Intention object. Details will be under the &#x60;account_transfer_intention&#x60; object.
     */
    ACCOUNT_TRANSFER_INTENTION("account_transfer_intention"),
    
    /**
     * The Transaction was created by a ACH Check Conversion Return object. Details will be under the &#x60;ach_check_conversion_return&#x60; object.
     */
    ACH_CHECK_CONVERSION_RETURN("ach_check_conversion_return"),
    
    /**
     * The Transaction was created by a ACH Check Conversion object. Details will be under the &#x60;ach_check_conversion&#x60; object.
     */
    ACH_CHECK_CONVERSION("ach_check_conversion"),
    
    /**
     * The Transaction was created by a ACH Transfer Intention object. Details will be under the &#x60;ach_transfer_intention&#x60; object.
     */
    ACH_TRANSFER_INTENTION("ach_transfer_intention"),
    
    /**
     * The Transaction was created by a ACH Transfer Rejection object. Details will be under the &#x60;ach_transfer_rejection&#x60; object.
     */
    ACH_TRANSFER_REJECTION("ach_transfer_rejection"),
    
    /**
     * The Transaction was created by a ACH Transfer Return object. Details will be under the &#x60;ach_transfer_return&#x60; object.
     */
    ACH_TRANSFER_RETURN("ach_transfer_return"),
    
    /**
     * The Transaction was created by a Card Dispute Acceptance object. Details will be under the &#x60;card_dispute_acceptance&#x60; object.
     */
    CARD_DISPUTE_ACCEPTANCE("card_dispute_acceptance"),
    
    /**
     * The Transaction was created by a Card Refund object. Details will be under the &#x60;card_refund&#x60; object.
     */
    CARD_REFUND("card_refund"),
    
    /**
     * The Transaction was created by a Card Settlement object. Details will be under the &#x60;card_settlement&#x60; object.
     */
    CARD_SETTLEMENT("card_settlement"),
    
    /**
     * The Transaction was created by a Card Revenue Payment object. Details will be under the &#x60;card_revenue_payment&#x60; object.
     */
    CARD_REVENUE_PAYMENT("card_revenue_payment"),
    
    /**
     * The Transaction was created by a Check Deposit Acceptance object. Details will be under the &#x60;check_deposit_acceptance&#x60; object.
     */
    CHECK_DEPOSIT_ACCEPTANCE("check_deposit_acceptance"),
    
    /**
     * The Transaction was created by a Check Deposit Return object. Details will be under the &#x60;check_deposit_return&#x60; object.
     */
    CHECK_DEPOSIT_RETURN("check_deposit_return"),
    
    /**
     * The Transaction was created by a Check Transfer Intention object. Details will be under the &#x60;check_transfer_intention&#x60; object.
     */
    CHECK_TRANSFER_INTENTION("check_transfer_intention"),
    
    /**
     * The Transaction was created by a Check Transfer Return object. Details will be under the &#x60;check_transfer_return&#x60; object.
     */
    CHECK_TRANSFER_RETURN("check_transfer_return"),
    
    /**
     * The Transaction was created by a Check Transfer Rejection object. Details will be under the &#x60;check_transfer_rejection&#x60; object.
     */
    CHECK_TRANSFER_REJECTION("check_transfer_rejection"),
    
    /**
     * The Transaction was created by a Check Transfer Stop Payment Request object. Details will be under the &#x60;check_transfer_stop_payment_request&#x60; object.
     */
    CHECK_TRANSFER_STOP_PAYMENT_REQUEST("check_transfer_stop_payment_request"),
    
    /**
     * The Transaction was created by a Dispute Resolution object. Details will be under the &#x60;dispute_resolution&#x60; object.
     */
    DISPUTE_RESOLUTION("dispute_resolution"),
    
    /**
     * The Transaction was created by a Empyreal Cash Deposit object. Details will be under the &#x60;empyreal_cash_deposit&#x60; object.
     */
    EMPYREAL_CASH_DEPOSIT("empyreal_cash_deposit"),
    
    /**
     * The Transaction was created by a Fee Payment object. Details will be under the &#x60;fee_payment&#x60; object.
     */
    FEE_PAYMENT("fee_payment"),
    
    /**
     * The Transaction was created by a Inbound ACH Transfer object. Details will be under the &#x60;inbound_ach_transfer&#x60; object.
     */
    INBOUND_ACH_TRANSFER("inbound_ach_transfer"),
    
    /**
     * The Transaction was created by a Inbound ACH Transfer Return Intention object. Details will be under the &#x60;inbound_ach_transfer_return_intention&#x60; object.
     */
    INBOUND_ACH_TRANSFER_RETURN_INTENTION("inbound_ach_transfer_return_intention"),
    
    /**
     * The Transaction was created by a Inbound Check object. Details will be under the &#x60;inbound_check&#x60; object.
     */
    INBOUND_CHECK("inbound_check"),
    
    /**
     * The Transaction was created by a Inbound International ACH Transfer object. Details will be under the &#x60;inbound_international_ach_transfer&#x60; object.
     */
    INBOUND_INTERNATIONAL_ACH_TRANSFER("inbound_international_ach_transfer"),
    
    /**
     * The Transaction was created by a Inbound Real Time Payments Transfer Confirmation object. Details will be under the &#x60;inbound_real_time_payments_transfer_confirmation&#x60; object.
     */
    INBOUND_REAL_TIME_PAYMENTS_TRANSFER_CONFIRMATION("inbound_real_time_payments_transfer_confirmation"),
    
    /**
     * The Transaction was created by a Inbound Wire Drawdown Payment Reversal object. Details will be under the &#x60;inbound_wire_drawdown_payment_reversal&#x60; object.
     */
    INBOUND_WIRE_DRAWDOWN_PAYMENT_REVERSAL("inbound_wire_drawdown_payment_reversal"),
    
    /**
     * The Transaction was created by a Inbound Wire Drawdown Payment object. Details will be under the &#x60;inbound_wire_drawdown_payment&#x60; object.
     */
    INBOUND_WIRE_DRAWDOWN_PAYMENT("inbound_wire_drawdown_payment"),
    
    /**
     * The Transaction was created by a Inbound Wire Reversal object. Details will be under the &#x60;inbound_wire_reversal&#x60; object.
     */
    INBOUND_WIRE_REVERSAL("inbound_wire_reversal"),
    
    /**
     * The Transaction was created by a Inbound Wire Transfer object. Details will be under the &#x60;inbound_wire_transfer&#x60; object.
     */
    INBOUND_WIRE_TRANSFER("inbound_wire_transfer"),
    
    /**
     * The Transaction was created by a Interest Payment object. Details will be under the &#x60;interest_payment&#x60; object.
     */
    INTEREST_PAYMENT("interest_payment"),
    
    /**
     * The Transaction was created by a Internal General Ledger Transaction object. Details will be under the &#x60;internal_general_ledger_transaction&#x60; object.
     */
    INTERNAL_GENERAL_LEDGER_TRANSACTION("internal_general_ledger_transaction"),
    
    /**
     * The Transaction was created by a Internal Source object. Details will be under the &#x60;internal_source&#x60; object.
     */
    INTERNAL_SOURCE("internal_source"),
    
    /**
     * The Transaction was created by a Deprecated Card Refund object. Details will be under the &#x60;card_route_refund&#x60; object.
     */
    CARD_ROUTE_REFUND("card_route_refund"),
    
    /**
     * The Transaction was created by a Deprecated Card Settlement object. Details will be under the &#x60;card_route_settlement&#x60; object.
     */
    CARD_ROUTE_SETTLEMENT("card_route_settlement"),
    
    /**
     * The Transaction was created by a Real Time Payments Transfer Acknowledgement object. Details will be under the &#x60;real_time_payments_transfer_acknowledgement&#x60; object.
     */
    REAL_TIME_PAYMENTS_TRANSFER_ACKNOWLEDGEMENT("real_time_payments_transfer_acknowledgement"),
    
    /**
     * The Transaction was created by a Sample Funds object. Details will be under the &#x60;sample_funds&#x60; object.
     */
    SAMPLE_FUNDS("sample_funds"),
    
    /**
     * The Transaction was created by a Wire Drawdown Payment Intention object. Details will be under the &#x60;wire_drawdown_payment_intention&#x60; object.
     */
    WIRE_DRAWDOWN_PAYMENT_INTENTION("wire_drawdown_payment_intention"),
    
    /**
     * The Transaction was created by a Wire Drawdown Payment Rejection object. Details will be under the &#x60;wire_drawdown_payment_rejection&#x60; object.
     */
    WIRE_DRAWDOWN_PAYMENT_REJECTION("wire_drawdown_payment_rejection"),
    
    /**
     * The Transaction was created by a Wire Transfer Intention object. Details will be under the &#x60;wire_transfer_intention&#x60; object.
     */
    WIRE_TRANSFER_INTENTION("wire_transfer_intention"),
    
    /**
     * The Transaction was created by a Wire Transfer Rejection object. Details will be under the &#x60;wire_transfer_rejection&#x60; object.
     */
    WIRE_TRANSFER_REJECTION("wire_transfer_rejection"),
    
    /**
     * The Transaction was made for an undocumented or deprecated reason.
     */
    OTHER("other");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CHECK_DEPOSIT_ACCEPTANCE = "check_deposit_acceptance";
  @SerializedName(SERIALIZED_NAME_CHECK_DEPOSIT_ACCEPTANCE)
  private CheckDepositAcceptance1 checkDepositAcceptance;

  public static final String SERIALIZED_NAME_CHECK_DEPOSIT_RETURN = "check_deposit_return";
  @SerializedName(SERIALIZED_NAME_CHECK_DEPOSIT_RETURN)
  private CheckDepositReturn1 checkDepositReturn;

  public static final String SERIALIZED_NAME_CHECK_TRANSFER_INTENTION = "check_transfer_intention";
  @SerializedName(SERIALIZED_NAME_CHECK_TRANSFER_INTENTION)
  private CheckTransferIntention checkTransferIntention;

  public static final String SERIALIZED_NAME_CHECK_TRANSFER_REJECTION = "check_transfer_rejection";
  @SerializedName(SERIALIZED_NAME_CHECK_TRANSFER_REJECTION)
  private CheckTransferRejection checkTransferRejection;

  public static final String SERIALIZED_NAME_CHECK_TRANSFER_RETURN = "check_transfer_return";
  @SerializedName(SERIALIZED_NAME_CHECK_TRANSFER_RETURN)
  private CheckTransferReturn1 checkTransferReturn;

  public static final String SERIALIZED_NAME_CHECK_TRANSFER_STOP_PAYMENT_REQUEST = "check_transfer_stop_payment_request";
  @SerializedName(SERIALIZED_NAME_CHECK_TRANSFER_STOP_PAYMENT_REQUEST)
  private CheckTransferStopPaymentRequest1 checkTransferStopPaymentRequest;

  public static final String SERIALIZED_NAME_DISPUTE_RESOLUTION = "dispute_resolution";
  @SerializedName(SERIALIZED_NAME_DISPUTE_RESOLUTION)
  private DisputeResolution disputeResolution;

  public static final String SERIALIZED_NAME_EMPYREAL_CASH_DEPOSIT = "empyreal_cash_deposit";
  @SerializedName(SERIALIZED_NAME_EMPYREAL_CASH_DEPOSIT)
  private EmpyrealCashDeposit empyrealCashDeposit;

  public static final String SERIALIZED_NAME_FEE_PAYMENT = "fee_payment";
  @SerializedName(SERIALIZED_NAME_FEE_PAYMENT)
  private FeePayment feePayment;

  public static final String SERIALIZED_NAME_INBOUND_ACH_TRANSFER = "inbound_ach_transfer";
  @SerializedName(SERIALIZED_NAME_INBOUND_ACH_TRANSFER)
  private InboundACHTransfer inboundAchTransfer;

  public static final String SERIALIZED_NAME_INBOUND_CHECK = "inbound_check";
  @SerializedName(SERIALIZED_NAME_INBOUND_CHECK)
  private InboundCheck inboundCheck;

  public static final String SERIALIZED_NAME_INBOUND_INTERNATIONAL_ACH_TRANSFER = "inbound_international_ach_transfer";
  @SerializedName(SERIALIZED_NAME_INBOUND_INTERNATIONAL_ACH_TRANSFER)
  private InboundInternationalACHTransfer inboundInternationalAchTransfer;

  public static final String SERIALIZED_NAME_INBOUND_REAL_TIME_PAYMENTS_TRANSFER_CONFIRMATION = "inbound_real_time_payments_transfer_confirmation";
  @SerializedName(SERIALIZED_NAME_INBOUND_REAL_TIME_PAYMENTS_TRANSFER_CONFIRMATION)
  private InboundRealTimePaymentsTransferConfirmation inboundRealTimePaymentsTransferConfirmation;

  public static final String SERIALIZED_NAME_INBOUND_WIRE_DRAWDOWN_PAYMENT = "inbound_wire_drawdown_payment";
  @SerializedName(SERIALIZED_NAME_INBOUND_WIRE_DRAWDOWN_PAYMENT)
  private InboundWireDrawdownPayment inboundWireDrawdownPayment;

  public static final String SERIALIZED_NAME_INBOUND_WIRE_DRAWDOWN_PAYMENT_REVERSAL = "inbound_wire_drawdown_payment_reversal";
  @SerializedName(SERIALIZED_NAME_INBOUND_WIRE_DRAWDOWN_PAYMENT_REVERSAL)
  private InboundWireDrawdownPaymentReversal inboundWireDrawdownPaymentReversal;

  public static final String SERIALIZED_NAME_INBOUND_WIRE_REVERSAL = "inbound_wire_reversal";
  @SerializedName(SERIALIZED_NAME_INBOUND_WIRE_REVERSAL)
  private InboundWireReversal inboundWireReversal;

  public static final String SERIALIZED_NAME_INBOUND_WIRE_TRANSFER = "inbound_wire_transfer";
  @SerializedName(SERIALIZED_NAME_INBOUND_WIRE_TRANSFER)
  private InboundWireTransfer inboundWireTransfer;

  public static final String SERIALIZED_NAME_INTEREST_PAYMENT = "interest_payment";
  @SerializedName(SERIALIZED_NAME_INTEREST_PAYMENT)
  private InterestPayment interestPayment;

  public static final String SERIALIZED_NAME_INTERNAL_SOURCE = "internal_source";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SOURCE)
  private InternalSource internalSource;

  public static final String SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFER_ACKNOWLEDGEMENT = "real_time_payments_transfer_acknowledgement";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFER_ACKNOWLEDGEMENT)
  private RealTimePaymentsTransferAcknowledgement realTimePaymentsTransferAcknowledgement;

  public static final String SERIALIZED_NAME_SAMPLE_FUNDS = "sample_funds";
  @SerializedName(SERIALIZED_NAME_SAMPLE_FUNDS)
  private SampleFunds sampleFunds;

  public static final String SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_INTENTION = "wire_drawdown_payment_intention";
  @SerializedName(SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_INTENTION)
  private WireDrawdownPaymentIntention wireDrawdownPaymentIntention;

  public static final String SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_REJECTION = "wire_drawdown_payment_rejection";
  @SerializedName(SERIALIZED_NAME_WIRE_DRAWDOWN_PAYMENT_REJECTION)
  private WireDrawdownPaymentRejection wireDrawdownPaymentRejection;

  public static final String SERIALIZED_NAME_WIRE_TRANSFER_INTENTION = "wire_transfer_intention";
  @SerializedName(SERIALIZED_NAME_WIRE_TRANSFER_INTENTION)
  private WireTransferIntention wireTransferIntention;

  public static final String SERIALIZED_NAME_WIRE_TRANSFER_REJECTION = "wire_transfer_rejection";
  @SerializedName(SERIALIZED_NAME_WIRE_TRANSFER_REJECTION)
  private WireTransferRejection wireTransferRejection;

  public TransactionSource() {
  }

  public TransactionSource accountTransferIntention(AccountTransferIntention accountTransferIntention) {
    this.accountTransferIntention = accountTransferIntention;
    return this;
  }

  /**
   * Get accountTransferIntention
   * @return accountTransferIntention
   */
  @javax.annotation.Nullable
  public AccountTransferIntention getAccountTransferIntention() {
    return accountTransferIntention;
  }

  public void setAccountTransferIntention(AccountTransferIntention accountTransferIntention) {
    this.accountTransferIntention = accountTransferIntention;
  }


  public TransactionSource achCheckConversion(ACHCheckConversion achCheckConversion) {
    this.achCheckConversion = achCheckConversion;
    return this;
  }

  /**
   * Get achCheckConversion
   * @return achCheckConversion
   */
  @javax.annotation.Nullable
  public ACHCheckConversion getAchCheckConversion() {
    return achCheckConversion;
  }

  public void setAchCheckConversion(ACHCheckConversion achCheckConversion) {
    this.achCheckConversion = achCheckConversion;
  }


  public TransactionSource achCheckConversionReturn(ACHCheckConversionReturn achCheckConversionReturn) {
    this.achCheckConversionReturn = achCheckConversionReturn;
    return this;
  }

  /**
   * Get achCheckConversionReturn
   * @return achCheckConversionReturn
   */
  @javax.annotation.Nullable
  public ACHCheckConversionReturn getAchCheckConversionReturn() {
    return achCheckConversionReturn;
  }

  public void setAchCheckConversionReturn(ACHCheckConversionReturn achCheckConversionReturn) {
    this.achCheckConversionReturn = achCheckConversionReturn;
  }


  public TransactionSource achTransferIntention(ACHTransferIntention achTransferIntention) {
    this.achTransferIntention = achTransferIntention;
    return this;
  }

  /**
   * Get achTransferIntention
   * @return achTransferIntention
   */
  @javax.annotation.Nullable
  public ACHTransferIntention getAchTransferIntention() {
    return achTransferIntention;
  }

  public void setAchTransferIntention(ACHTransferIntention achTransferIntention) {
    this.achTransferIntention = achTransferIntention;
  }


  public TransactionSource achTransferRejection(ACHTransferRejection achTransferRejection) {
    this.achTransferRejection = achTransferRejection;
    return this;
  }

  /**
   * Get achTransferRejection
   * @return achTransferRejection
   */
  @javax.annotation.Nullable
  public ACHTransferRejection getAchTransferRejection() {
    return achTransferRejection;
  }

  public void setAchTransferRejection(ACHTransferRejection achTransferRejection) {
    this.achTransferRejection = achTransferRejection;
  }


  public TransactionSource achTransferReturn(ACHTransferReturn1 achTransferReturn) {
    this.achTransferReturn = achTransferReturn;
    return this;
  }

  /**
   * Get achTransferReturn
   * @return achTransferReturn
   */
  @javax.annotation.Nullable
  public ACHTransferReturn1 getAchTransferReturn() {
    return achTransferReturn;
  }

  public void setAchTransferReturn(ACHTransferReturn1 achTransferReturn) {
    this.achTransferReturn = achTransferReturn;
  }


  public TransactionSource cardDisputeAcceptance(CardDisputeAcceptance1 cardDisputeAcceptance) {
    this.cardDisputeAcceptance = cardDisputeAcceptance;
    return this;
  }

  /**
   * Get cardDisputeAcceptance
   * @return cardDisputeAcceptance
   */
  @javax.annotation.Nullable
  public CardDisputeAcceptance1 getCardDisputeAcceptance() {
    return cardDisputeAcceptance;
  }

  public void setCardDisputeAcceptance(CardDisputeAcceptance1 cardDisputeAcceptance) {
    this.cardDisputeAcceptance = cardDisputeAcceptance;
  }


  public TransactionSource cardRefund(CardRefund cardRefund) {
    this.cardRefund = cardRefund;
    return this;
  }

  /**
   * Get cardRefund
   * @return cardRefund
   */
  @javax.annotation.Nullable
  public CardRefund getCardRefund() {
    return cardRefund;
  }

  public void setCardRefund(CardRefund cardRefund) {
    this.cardRefund = cardRefund;
  }


  public TransactionSource cardRevenuePayment(CardRevenuePayment cardRevenuePayment) {
    this.cardRevenuePayment = cardRevenuePayment;
    return this;
  }

  /**
   * Get cardRevenuePayment
   * @return cardRevenuePayment
   */
  @javax.annotation.Nullable
  public CardRevenuePayment getCardRevenuePayment() {
    return cardRevenuePayment;
  }

  public void setCardRevenuePayment(CardRevenuePayment cardRevenuePayment) {
    this.cardRevenuePayment = cardRevenuePayment;
  }


  public TransactionSource cardRouteRefund(DeprecatedCardRefund cardRouteRefund) {
    this.cardRouteRefund = cardRouteRefund;
    return this;
  }

  /**
   * Get cardRouteRefund
   * @return cardRouteRefund
   */
  @javax.annotation.Nullable
  public DeprecatedCardRefund getCardRouteRefund() {
    return cardRouteRefund;
  }

  public void setCardRouteRefund(DeprecatedCardRefund cardRouteRefund) {
    this.cardRouteRefund = cardRouteRefund;
  }


  public TransactionSource cardRouteSettlement(DeprecatedCardSettlement cardRouteSettlement) {
    this.cardRouteSettlement = cardRouteSettlement;
    return this;
  }

  /**
   * Get cardRouteSettlement
   * @return cardRouteSettlement
   */
  @javax.annotation.Nullable
  public DeprecatedCardSettlement getCardRouteSettlement() {
    return cardRouteSettlement;
  }

  public void setCardRouteSettlement(DeprecatedCardSettlement cardRouteSettlement) {
    this.cardRouteSettlement = cardRouteSettlement;
  }


  public TransactionSource cardSettlement(CardSettlement cardSettlement) {
    this.cardSettlement = cardSettlement;
    return this;
  }

  /**
   * Get cardSettlement
   * @return cardSettlement
   */
  @javax.annotation.Nullable
  public CardSettlement getCardSettlement() {
    return cardSettlement;
  }

  public void setCardSettlement(CardSettlement cardSettlement) {
    this.cardSettlement = cardSettlement;
  }


  public TransactionSource category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public TransactionSource checkDepositAcceptance(CheckDepositAcceptance1 checkDepositAcceptance) {
    this.checkDepositAcceptance = checkDepositAcceptance;
    return this;
  }

  /**
   * Get checkDepositAcceptance
   * @return checkDepositAcceptance
   */
  @javax.annotation.Nullable
  public CheckDepositAcceptance1 getCheckDepositAcceptance() {
    return checkDepositAcceptance;
  }

  public void setCheckDepositAcceptance(CheckDepositAcceptance1 checkDepositAcceptance) {
    this.checkDepositAcceptance = checkDepositAcceptance;
  }


  public TransactionSource checkDepositReturn(CheckDepositReturn1 checkDepositReturn) {
    this.checkDepositReturn = checkDepositReturn;
    return this;
  }

  /**
   * Get checkDepositReturn
   * @return checkDepositReturn
   */
  @javax.annotation.Nullable
  public CheckDepositReturn1 getCheckDepositReturn() {
    return checkDepositReturn;
  }

  public void setCheckDepositReturn(CheckDepositReturn1 checkDepositReturn) {
    this.checkDepositReturn = checkDepositReturn;
  }


  public TransactionSource checkTransferIntention(CheckTransferIntention checkTransferIntention) {
    this.checkTransferIntention = checkTransferIntention;
    return this;
  }

  /**
   * Get checkTransferIntention
   * @return checkTransferIntention
   */
  @javax.annotation.Nullable
  public CheckTransferIntention getCheckTransferIntention() {
    return checkTransferIntention;
  }

  public void setCheckTransferIntention(CheckTransferIntention checkTransferIntention) {
    this.checkTransferIntention = checkTransferIntention;
  }


  public TransactionSource checkTransferRejection(CheckTransferRejection checkTransferRejection) {
    this.checkTransferRejection = checkTransferRejection;
    return this;
  }

  /**
   * Get checkTransferRejection
   * @return checkTransferRejection
   */
  @javax.annotation.Nullable
  public CheckTransferRejection getCheckTransferRejection() {
    return checkTransferRejection;
  }

  public void setCheckTransferRejection(CheckTransferRejection checkTransferRejection) {
    this.checkTransferRejection = checkTransferRejection;
  }


  public TransactionSource checkTransferReturn(CheckTransferReturn1 checkTransferReturn) {
    this.checkTransferReturn = checkTransferReturn;
    return this;
  }

  /**
   * Get checkTransferReturn
   * @return checkTransferReturn
   */
  @javax.annotation.Nullable
  public CheckTransferReturn1 getCheckTransferReturn() {
    return checkTransferReturn;
  }

  public void setCheckTransferReturn(CheckTransferReturn1 checkTransferReturn) {
    this.checkTransferReturn = checkTransferReturn;
  }


  public TransactionSource checkTransferStopPaymentRequest(CheckTransferStopPaymentRequest1 checkTransferStopPaymentRequest) {
    this.checkTransferStopPaymentRequest = checkTransferStopPaymentRequest;
    return this;
  }

  /**
   * Get checkTransferStopPaymentRequest
   * @return checkTransferStopPaymentRequest
   */
  @javax.annotation.Nullable
  public CheckTransferStopPaymentRequest1 getCheckTransferStopPaymentRequest() {
    return checkTransferStopPaymentRequest;
  }

  public void setCheckTransferStopPaymentRequest(CheckTransferStopPaymentRequest1 checkTransferStopPaymentRequest) {
    this.checkTransferStopPaymentRequest = checkTransferStopPaymentRequest;
  }


  public TransactionSource disputeResolution(DisputeResolution disputeResolution) {
    this.disputeResolution = disputeResolution;
    return this;
  }

  /**
   * Get disputeResolution
   * @return disputeResolution
   */
  @javax.annotation.Nullable
  public DisputeResolution getDisputeResolution() {
    return disputeResolution;
  }

  public void setDisputeResolution(DisputeResolution disputeResolution) {
    this.disputeResolution = disputeResolution;
  }


  public TransactionSource empyrealCashDeposit(EmpyrealCashDeposit empyrealCashDeposit) {
    this.empyrealCashDeposit = empyrealCashDeposit;
    return this;
  }

  /**
   * Get empyrealCashDeposit
   * @return empyrealCashDeposit
   */
  @javax.annotation.Nullable
  public EmpyrealCashDeposit getEmpyrealCashDeposit() {
    return empyrealCashDeposit;
  }

  public void setEmpyrealCashDeposit(EmpyrealCashDeposit empyrealCashDeposit) {
    this.empyrealCashDeposit = empyrealCashDeposit;
  }


  public TransactionSource feePayment(FeePayment feePayment) {
    this.feePayment = feePayment;
    return this;
  }

  /**
   * Get feePayment
   * @return feePayment
   */
  @javax.annotation.Nullable
  public FeePayment getFeePayment() {
    return feePayment;
  }

  public void setFeePayment(FeePayment feePayment) {
    this.feePayment = feePayment;
  }


  public TransactionSource inboundAchTransfer(InboundACHTransfer inboundAchTransfer) {
    this.inboundAchTransfer = inboundAchTransfer;
    return this;
  }

  /**
   * Get inboundAchTransfer
   * @return inboundAchTransfer
   */
  @javax.annotation.Nullable
  public InboundACHTransfer getInboundAchTransfer() {
    return inboundAchTransfer;
  }

  public void setInboundAchTransfer(InboundACHTransfer inboundAchTransfer) {
    this.inboundAchTransfer = inboundAchTransfer;
  }


  public TransactionSource inboundCheck(InboundCheck inboundCheck) {
    this.inboundCheck = inboundCheck;
    return this;
  }

  /**
   * Get inboundCheck
   * @return inboundCheck
   */
  @javax.annotation.Nullable
  public InboundCheck getInboundCheck() {
    return inboundCheck;
  }

  public void setInboundCheck(InboundCheck inboundCheck) {
    this.inboundCheck = inboundCheck;
  }


  public TransactionSource inboundInternationalAchTransfer(InboundInternationalACHTransfer inboundInternationalAchTransfer) {
    this.inboundInternationalAchTransfer = inboundInternationalAchTransfer;
    return this;
  }

  /**
   * Get inboundInternationalAchTransfer
   * @return inboundInternationalAchTransfer
   */
  @javax.annotation.Nullable
  public InboundInternationalACHTransfer getInboundInternationalAchTransfer() {
    return inboundInternationalAchTransfer;
  }

  public void setInboundInternationalAchTransfer(InboundInternationalACHTransfer inboundInternationalAchTransfer) {
    this.inboundInternationalAchTransfer = inboundInternationalAchTransfer;
  }


  public TransactionSource inboundRealTimePaymentsTransferConfirmation(InboundRealTimePaymentsTransferConfirmation inboundRealTimePaymentsTransferConfirmation) {
    this.inboundRealTimePaymentsTransferConfirmation = inboundRealTimePaymentsTransferConfirmation;
    return this;
  }

  /**
   * Get inboundRealTimePaymentsTransferConfirmation
   * @return inboundRealTimePaymentsTransferConfirmation
   */
  @javax.annotation.Nullable
  public InboundRealTimePaymentsTransferConfirmation getInboundRealTimePaymentsTransferConfirmation() {
    return inboundRealTimePaymentsTransferConfirmation;
  }

  public void setInboundRealTimePaymentsTransferConfirmation(InboundRealTimePaymentsTransferConfirmation inboundRealTimePaymentsTransferConfirmation) {
    this.inboundRealTimePaymentsTransferConfirmation = inboundRealTimePaymentsTransferConfirmation;
  }


  public TransactionSource inboundWireDrawdownPayment(InboundWireDrawdownPayment inboundWireDrawdownPayment) {
    this.inboundWireDrawdownPayment = inboundWireDrawdownPayment;
    return this;
  }

  /**
   * Get inboundWireDrawdownPayment
   * @return inboundWireDrawdownPayment
   */
  @javax.annotation.Nullable
  public InboundWireDrawdownPayment getInboundWireDrawdownPayment() {
    return inboundWireDrawdownPayment;
  }

  public void setInboundWireDrawdownPayment(InboundWireDrawdownPayment inboundWireDrawdownPayment) {
    this.inboundWireDrawdownPayment = inboundWireDrawdownPayment;
  }


  public TransactionSource inboundWireDrawdownPaymentReversal(InboundWireDrawdownPaymentReversal inboundWireDrawdownPaymentReversal) {
    this.inboundWireDrawdownPaymentReversal = inboundWireDrawdownPaymentReversal;
    return this;
  }

  /**
   * Get inboundWireDrawdownPaymentReversal
   * @return inboundWireDrawdownPaymentReversal
   */
  @javax.annotation.Nullable
  public InboundWireDrawdownPaymentReversal getInboundWireDrawdownPaymentReversal() {
    return inboundWireDrawdownPaymentReversal;
  }

  public void setInboundWireDrawdownPaymentReversal(InboundWireDrawdownPaymentReversal inboundWireDrawdownPaymentReversal) {
    this.inboundWireDrawdownPaymentReversal = inboundWireDrawdownPaymentReversal;
  }


  public TransactionSource inboundWireReversal(InboundWireReversal inboundWireReversal) {
    this.inboundWireReversal = inboundWireReversal;
    return this;
  }

  /**
   * Get inboundWireReversal
   * @return inboundWireReversal
   */
  @javax.annotation.Nullable
  public InboundWireReversal getInboundWireReversal() {
    return inboundWireReversal;
  }

  public void setInboundWireReversal(InboundWireReversal inboundWireReversal) {
    this.inboundWireReversal = inboundWireReversal;
  }


  public TransactionSource inboundWireTransfer(InboundWireTransfer inboundWireTransfer) {
    this.inboundWireTransfer = inboundWireTransfer;
    return this;
  }

  /**
   * Get inboundWireTransfer
   * @return inboundWireTransfer
   */
  @javax.annotation.Nullable
  public InboundWireTransfer getInboundWireTransfer() {
    return inboundWireTransfer;
  }

  public void setInboundWireTransfer(InboundWireTransfer inboundWireTransfer) {
    this.inboundWireTransfer = inboundWireTransfer;
  }


  public TransactionSource interestPayment(InterestPayment interestPayment) {
    this.interestPayment = interestPayment;
    return this;
  }

  /**
   * Get interestPayment
   * @return interestPayment
   */
  @javax.annotation.Nullable
  public InterestPayment getInterestPayment() {
    return interestPayment;
  }

  public void setInterestPayment(InterestPayment interestPayment) {
    this.interestPayment = interestPayment;
  }


  public TransactionSource internalSource(InternalSource internalSource) {
    this.internalSource = internalSource;
    return this;
  }

  /**
   * Get internalSource
   * @return internalSource
   */
  @javax.annotation.Nullable
  public InternalSource getInternalSource() {
    return internalSource;
  }

  public void setInternalSource(InternalSource internalSource) {
    this.internalSource = internalSource;
  }


  public TransactionSource realTimePaymentsTransferAcknowledgement(RealTimePaymentsTransferAcknowledgement realTimePaymentsTransferAcknowledgement) {
    this.realTimePaymentsTransferAcknowledgement = realTimePaymentsTransferAcknowledgement;
    return this;
  }

  /**
   * Get realTimePaymentsTransferAcknowledgement
   * @return realTimePaymentsTransferAcknowledgement
   */
  @javax.annotation.Nullable
  public RealTimePaymentsTransferAcknowledgement getRealTimePaymentsTransferAcknowledgement() {
    return realTimePaymentsTransferAcknowledgement;
  }

  public void setRealTimePaymentsTransferAcknowledgement(RealTimePaymentsTransferAcknowledgement realTimePaymentsTransferAcknowledgement) {
    this.realTimePaymentsTransferAcknowledgement = realTimePaymentsTransferAcknowledgement;
  }


  public TransactionSource sampleFunds(SampleFunds sampleFunds) {
    this.sampleFunds = sampleFunds;
    return this;
  }

  /**
   * Get sampleFunds
   * @return sampleFunds
   */
  @javax.annotation.Nullable
  public SampleFunds getSampleFunds() {
    return sampleFunds;
  }

  public void setSampleFunds(SampleFunds sampleFunds) {
    this.sampleFunds = sampleFunds;
  }


  public TransactionSource wireDrawdownPaymentIntention(WireDrawdownPaymentIntention wireDrawdownPaymentIntention) {
    this.wireDrawdownPaymentIntention = wireDrawdownPaymentIntention;
    return this;
  }

  /**
   * Get wireDrawdownPaymentIntention
   * @return wireDrawdownPaymentIntention
   */
  @javax.annotation.Nullable
  public WireDrawdownPaymentIntention getWireDrawdownPaymentIntention() {
    return wireDrawdownPaymentIntention;
  }

  public void setWireDrawdownPaymentIntention(WireDrawdownPaymentIntention wireDrawdownPaymentIntention) {
    this.wireDrawdownPaymentIntention = wireDrawdownPaymentIntention;
  }


  public TransactionSource wireDrawdownPaymentRejection(WireDrawdownPaymentRejection wireDrawdownPaymentRejection) {
    this.wireDrawdownPaymentRejection = wireDrawdownPaymentRejection;
    return this;
  }

  /**
   * Get wireDrawdownPaymentRejection
   * @return wireDrawdownPaymentRejection
   */
  @javax.annotation.Nullable
  public WireDrawdownPaymentRejection getWireDrawdownPaymentRejection() {
    return wireDrawdownPaymentRejection;
  }

  public void setWireDrawdownPaymentRejection(WireDrawdownPaymentRejection wireDrawdownPaymentRejection) {
    this.wireDrawdownPaymentRejection = wireDrawdownPaymentRejection;
  }


  public TransactionSource wireTransferIntention(WireTransferIntention wireTransferIntention) {
    this.wireTransferIntention = wireTransferIntention;
    return this;
  }

  /**
   * Get wireTransferIntention
   * @return wireTransferIntention
   */
  @javax.annotation.Nullable
  public WireTransferIntention getWireTransferIntention() {
    return wireTransferIntention;
  }

  public void setWireTransferIntention(WireTransferIntention wireTransferIntention) {
    this.wireTransferIntention = wireTransferIntention;
  }


  public TransactionSource wireTransferRejection(WireTransferRejection wireTransferRejection) {
    this.wireTransferRejection = wireTransferRejection;
    return this;
  }

  /**
   * Get wireTransferRejection
   * @return wireTransferRejection
   */
  @javax.annotation.Nullable
  public WireTransferRejection getWireTransferRejection() {
    return wireTransferRejection;
  }

  public void setWireTransferRejection(WireTransferRejection wireTransferRejection) {
    this.wireTransferRejection = wireTransferRejection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSource transactionSource = (TransactionSource) o;
    return Objects.equals(this.accountTransferIntention, transactionSource.accountTransferIntention) &&
        Objects.equals(this.achCheckConversion, transactionSource.achCheckConversion) &&
        Objects.equals(this.achCheckConversionReturn, transactionSource.achCheckConversionReturn) &&
        Objects.equals(this.achTransferIntention, transactionSource.achTransferIntention) &&
        Objects.equals(this.achTransferRejection, transactionSource.achTransferRejection) &&
        Objects.equals(this.achTransferReturn, transactionSource.achTransferReturn) &&
        Objects.equals(this.cardDisputeAcceptance, transactionSource.cardDisputeAcceptance) &&
        Objects.equals(this.cardRefund, transactionSource.cardRefund) &&
        Objects.equals(this.cardRevenuePayment, transactionSource.cardRevenuePayment) &&
        Objects.equals(this.cardRouteRefund, transactionSource.cardRouteRefund) &&
        Objects.equals(this.cardRouteSettlement, transactionSource.cardRouteSettlement) &&
        Objects.equals(this.cardSettlement, transactionSource.cardSettlement) &&
        Objects.equals(this.category, transactionSource.category) &&
        Objects.equals(this.checkDepositAcceptance, transactionSource.checkDepositAcceptance) &&
        Objects.equals(this.checkDepositReturn, transactionSource.checkDepositReturn) &&
        Objects.equals(this.checkTransferIntention, transactionSource.checkTransferIntention) &&
        Objects.equals(this.checkTransferRejection, transactionSource.checkTransferRejection) &&
        Objects.equals(this.checkTransferReturn, transactionSource.checkTransferReturn) &&
        Objects.equals(this.checkTransferStopPaymentRequest, transactionSource.checkTransferStopPaymentRequest) &&
        Objects.equals(this.disputeResolution, transactionSource.disputeResolution) &&
        Objects.equals(this.empyrealCashDeposit, transactionSource.empyrealCashDeposit) &&
        Objects.equals(this.feePayment, transactionSource.feePayment) &&
        Objects.equals(this.inboundAchTransfer, transactionSource.inboundAchTransfer) &&
        Objects.equals(this.inboundCheck, transactionSource.inboundCheck) &&
        Objects.equals(this.inboundInternationalAchTransfer, transactionSource.inboundInternationalAchTransfer) &&
        Objects.equals(this.inboundRealTimePaymentsTransferConfirmation, transactionSource.inboundRealTimePaymentsTransferConfirmation) &&
        Objects.equals(this.inboundWireDrawdownPayment, transactionSource.inboundWireDrawdownPayment) &&
        Objects.equals(this.inboundWireDrawdownPaymentReversal, transactionSource.inboundWireDrawdownPaymentReversal) &&
        Objects.equals(this.inboundWireReversal, transactionSource.inboundWireReversal) &&
        Objects.equals(this.inboundWireTransfer, transactionSource.inboundWireTransfer) &&
        Objects.equals(this.interestPayment, transactionSource.interestPayment) &&
        Objects.equals(this.internalSource, transactionSource.internalSource) &&
        Objects.equals(this.realTimePaymentsTransferAcknowledgement, transactionSource.realTimePaymentsTransferAcknowledgement) &&
        Objects.equals(this.sampleFunds, transactionSource.sampleFunds) &&
        Objects.equals(this.wireDrawdownPaymentIntention, transactionSource.wireDrawdownPaymentIntention) &&
        Objects.equals(this.wireDrawdownPaymentRejection, transactionSource.wireDrawdownPaymentRejection) &&
        Objects.equals(this.wireTransferIntention, transactionSource.wireTransferIntention) &&
        Objects.equals(this.wireTransferRejection, transactionSource.wireTransferRejection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTransferIntention, achCheckConversion, achCheckConversionReturn, achTransferIntention, achTransferRejection, achTransferReturn, cardDisputeAcceptance, cardRefund, cardRevenuePayment, cardRouteRefund, cardRouteSettlement, cardSettlement, category, checkDepositAcceptance, checkDepositReturn, checkTransferIntention, checkTransferRejection, checkTransferReturn, checkTransferStopPaymentRequest, disputeResolution, empyrealCashDeposit, feePayment, inboundAchTransfer, inboundCheck, inboundInternationalAchTransfer, inboundRealTimePaymentsTransferConfirmation, inboundWireDrawdownPayment, inboundWireDrawdownPaymentReversal, inboundWireReversal, inboundWireTransfer, interestPayment, internalSource, realTimePaymentsTransferAcknowledgement, sampleFunds, wireDrawdownPaymentIntention, wireDrawdownPaymentRejection, wireTransferIntention, wireTransferRejection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSource {\n");
    sb.append("    accountTransferIntention: ").append(toIndentedString(accountTransferIntention)).append("\n");
    sb.append("    achCheckConversion: ").append(toIndentedString(achCheckConversion)).append("\n");
    sb.append("    achCheckConversionReturn: ").append(toIndentedString(achCheckConversionReturn)).append("\n");
    sb.append("    achTransferIntention: ").append(toIndentedString(achTransferIntention)).append("\n");
    sb.append("    achTransferRejection: ").append(toIndentedString(achTransferRejection)).append("\n");
    sb.append("    achTransferReturn: ").append(toIndentedString(achTransferReturn)).append("\n");
    sb.append("    cardDisputeAcceptance: ").append(toIndentedString(cardDisputeAcceptance)).append("\n");
    sb.append("    cardRefund: ").append(toIndentedString(cardRefund)).append("\n");
    sb.append("    cardRevenuePayment: ").append(toIndentedString(cardRevenuePayment)).append("\n");
    sb.append("    cardRouteRefund: ").append(toIndentedString(cardRouteRefund)).append("\n");
    sb.append("    cardRouteSettlement: ").append(toIndentedString(cardRouteSettlement)).append("\n");
    sb.append("    cardSettlement: ").append(toIndentedString(cardSettlement)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    checkDepositAcceptance: ").append(toIndentedString(checkDepositAcceptance)).append("\n");
    sb.append("    checkDepositReturn: ").append(toIndentedString(checkDepositReturn)).append("\n");
    sb.append("    checkTransferIntention: ").append(toIndentedString(checkTransferIntention)).append("\n");
    sb.append("    checkTransferRejection: ").append(toIndentedString(checkTransferRejection)).append("\n");
    sb.append("    checkTransferReturn: ").append(toIndentedString(checkTransferReturn)).append("\n");
    sb.append("    checkTransferStopPaymentRequest: ").append(toIndentedString(checkTransferStopPaymentRequest)).append("\n");
    sb.append("    disputeResolution: ").append(toIndentedString(disputeResolution)).append("\n");
    sb.append("    empyrealCashDeposit: ").append(toIndentedString(empyrealCashDeposit)).append("\n");
    sb.append("    feePayment: ").append(toIndentedString(feePayment)).append("\n");
    sb.append("    inboundAchTransfer: ").append(toIndentedString(inboundAchTransfer)).append("\n");
    sb.append("    inboundCheck: ").append(toIndentedString(inboundCheck)).append("\n");
    sb.append("    inboundInternationalAchTransfer: ").append(toIndentedString(inboundInternationalAchTransfer)).append("\n");
    sb.append("    inboundRealTimePaymentsTransferConfirmation: ").append(toIndentedString(inboundRealTimePaymentsTransferConfirmation)).append("\n");
    sb.append("    inboundWireDrawdownPayment: ").append(toIndentedString(inboundWireDrawdownPayment)).append("\n");
    sb.append("    inboundWireDrawdownPaymentReversal: ").append(toIndentedString(inboundWireDrawdownPaymentReversal)).append("\n");
    sb.append("    inboundWireReversal: ").append(toIndentedString(inboundWireReversal)).append("\n");
    sb.append("    inboundWireTransfer: ").append(toIndentedString(inboundWireTransfer)).append("\n");
    sb.append("    interestPayment: ").append(toIndentedString(interestPayment)).append("\n");
    sb.append("    internalSource: ").append(toIndentedString(internalSource)).append("\n");
    sb.append("    realTimePaymentsTransferAcknowledgement: ").append(toIndentedString(realTimePaymentsTransferAcknowledgement)).append("\n");
    sb.append("    sampleFunds: ").append(toIndentedString(sampleFunds)).append("\n");
    sb.append("    wireDrawdownPaymentIntention: ").append(toIndentedString(wireDrawdownPaymentIntention)).append("\n");
    sb.append("    wireDrawdownPaymentRejection: ").append(toIndentedString(wireDrawdownPaymentRejection)).append("\n");
    sb.append("    wireTransferIntention: ").append(toIndentedString(wireTransferIntention)).append("\n");
    sb.append("    wireTransferRejection: ").append(toIndentedString(wireTransferRejection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_transfer_intention");
    openapiFields.add("ach_check_conversion");
    openapiFields.add("ach_check_conversion_return");
    openapiFields.add("ach_transfer_intention");
    openapiFields.add("ach_transfer_rejection");
    openapiFields.add("ach_transfer_return");
    openapiFields.add("card_dispute_acceptance");
    openapiFields.add("card_refund");
    openapiFields.add("card_revenue_payment");
    openapiFields.add("card_route_refund");
    openapiFields.add("card_route_settlement");
    openapiFields.add("card_settlement");
    openapiFields.add("category");
    openapiFields.add("check_deposit_acceptance");
    openapiFields.add("check_deposit_return");
    openapiFields.add("check_transfer_intention");
    openapiFields.add("check_transfer_rejection");
    openapiFields.add("check_transfer_return");
    openapiFields.add("check_transfer_stop_payment_request");
    openapiFields.add("dispute_resolution");
    openapiFields.add("empyreal_cash_deposit");
    openapiFields.add("fee_payment");
    openapiFields.add("inbound_ach_transfer");
    openapiFields.add("inbound_check");
    openapiFields.add("inbound_international_ach_transfer");
    openapiFields.add("inbound_real_time_payments_transfer_confirmation");
    openapiFields.add("inbound_wire_drawdown_payment");
    openapiFields.add("inbound_wire_drawdown_payment_reversal");
    openapiFields.add("inbound_wire_reversal");
    openapiFields.add("inbound_wire_transfer");
    openapiFields.add("interest_payment");
    openapiFields.add("internal_source");
    openapiFields.add("real_time_payments_transfer_acknowledgement");
    openapiFields.add("sample_funds");
    openapiFields.add("wire_drawdown_payment_intention");
    openapiFields.add("wire_drawdown_payment_rejection");
    openapiFields.add("wire_transfer_intention");
    openapiFields.add("wire_transfer_rejection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_transfer_intention");
    openapiRequiredFields.add("ach_check_conversion");
    openapiRequiredFields.add("ach_check_conversion_return");
    openapiRequiredFields.add("ach_transfer_intention");
    openapiRequiredFields.add("ach_transfer_rejection");
    openapiRequiredFields.add("ach_transfer_return");
    openapiRequiredFields.add("card_dispute_acceptance");
    openapiRequiredFields.add("card_refund");
    openapiRequiredFields.add("card_revenue_payment");
    openapiRequiredFields.add("card_route_refund");
    openapiRequiredFields.add("card_route_settlement");
    openapiRequiredFields.add("card_settlement");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("check_deposit_acceptance");
    openapiRequiredFields.add("check_deposit_return");
    openapiRequiredFields.add("check_transfer_intention");
    openapiRequiredFields.add("check_transfer_rejection");
    openapiRequiredFields.add("check_transfer_return");
    openapiRequiredFields.add("check_transfer_stop_payment_request");
    openapiRequiredFields.add("dispute_resolution");
    openapiRequiredFields.add("empyreal_cash_deposit");
    openapiRequiredFields.add("fee_payment");
    openapiRequiredFields.add("inbound_ach_transfer");
    openapiRequiredFields.add("inbound_check");
    openapiRequiredFields.add("inbound_international_ach_transfer");
    openapiRequiredFields.add("inbound_real_time_payments_transfer_confirmation");
    openapiRequiredFields.add("inbound_wire_drawdown_payment");
    openapiRequiredFields.add("inbound_wire_drawdown_payment_reversal");
    openapiRequiredFields.add("inbound_wire_reversal");
    openapiRequiredFields.add("inbound_wire_transfer");
    openapiRequiredFields.add("interest_payment");
    openapiRequiredFields.add("internal_source");
    openapiRequiredFields.add("real_time_payments_transfer_acknowledgement");
    openapiRequiredFields.add("sample_funds");
    openapiRequiredFields.add("wire_drawdown_payment_intention");
    openapiRequiredFields.add("wire_drawdown_payment_rejection");
    openapiRequiredFields.add("wire_transfer_intention");
    openapiRequiredFields.add("wire_transfer_rejection");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionSource is not found in the empty JSON string", TransactionSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `account_transfer_intention`
      AccountTransferIntention.validateJsonElement(jsonObj.get("account_transfer_intention"));
      // validate the required field `ach_check_conversion`
      ACHCheckConversion.validateJsonElement(jsonObj.get("ach_check_conversion"));
      // validate the required field `ach_check_conversion_return`
      ACHCheckConversionReturn.validateJsonElement(jsonObj.get("ach_check_conversion_return"));
      // validate the required field `ach_transfer_intention`
      ACHTransferIntention.validateJsonElement(jsonObj.get("ach_transfer_intention"));
      // validate the required field `ach_transfer_rejection`
      ACHTransferRejection.validateJsonElement(jsonObj.get("ach_transfer_rejection"));
      // validate the required field `ach_transfer_return`
      ACHTransferReturn1.validateJsonElement(jsonObj.get("ach_transfer_return"));
      // validate the required field `card_dispute_acceptance`
      CardDisputeAcceptance1.validateJsonElement(jsonObj.get("card_dispute_acceptance"));
      // validate the required field `card_refund`
      CardRefund.validateJsonElement(jsonObj.get("card_refund"));
      // validate the required field `card_revenue_payment`
      CardRevenuePayment.validateJsonElement(jsonObj.get("card_revenue_payment"));
      // validate the required field `card_route_refund`
      DeprecatedCardRefund.validateJsonElement(jsonObj.get("card_route_refund"));
      // validate the required field `card_route_settlement`
      DeprecatedCardSettlement.validateJsonElement(jsonObj.get("card_route_settlement"));
      // validate the required field `card_settlement`
      CardSettlement.validateJsonElement(jsonObj.get("card_settlement"));
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      // validate the required field `check_deposit_acceptance`
      CheckDepositAcceptance1.validateJsonElement(jsonObj.get("check_deposit_acceptance"));
      // validate the required field `check_deposit_return`
      CheckDepositReturn1.validateJsonElement(jsonObj.get("check_deposit_return"));
      // validate the required field `check_transfer_intention`
      CheckTransferIntention.validateJsonElement(jsonObj.get("check_transfer_intention"));
      // validate the required field `check_transfer_rejection`
      CheckTransferRejection.validateJsonElement(jsonObj.get("check_transfer_rejection"));
      // validate the required field `check_transfer_return`
      CheckTransferReturn1.validateJsonElement(jsonObj.get("check_transfer_return"));
      // validate the required field `check_transfer_stop_payment_request`
      CheckTransferStopPaymentRequest1.validateJsonElement(jsonObj.get("check_transfer_stop_payment_request"));
      // validate the required field `dispute_resolution`
      DisputeResolution.validateJsonElement(jsonObj.get("dispute_resolution"));
      // validate the required field `empyreal_cash_deposit`
      EmpyrealCashDeposit.validateJsonElement(jsonObj.get("empyreal_cash_deposit"));
      // validate the required field `fee_payment`
      FeePayment.validateJsonElement(jsonObj.get("fee_payment"));
      // validate the required field `inbound_ach_transfer`
      InboundACHTransfer.validateJsonElement(jsonObj.get("inbound_ach_transfer"));
      // validate the required field `inbound_check`
      InboundCheck.validateJsonElement(jsonObj.get("inbound_check"));
      // validate the required field `inbound_international_ach_transfer`
      InboundInternationalACHTransfer.validateJsonElement(jsonObj.get("inbound_international_ach_transfer"));
      // validate the required field `inbound_real_time_payments_transfer_confirmation`
      InboundRealTimePaymentsTransferConfirmation.validateJsonElement(jsonObj.get("inbound_real_time_payments_transfer_confirmation"));
      // validate the required field `inbound_wire_drawdown_payment`
      InboundWireDrawdownPayment.validateJsonElement(jsonObj.get("inbound_wire_drawdown_payment"));
      // validate the required field `inbound_wire_drawdown_payment_reversal`
      InboundWireDrawdownPaymentReversal.validateJsonElement(jsonObj.get("inbound_wire_drawdown_payment_reversal"));
      // validate the required field `inbound_wire_reversal`
      InboundWireReversal.validateJsonElement(jsonObj.get("inbound_wire_reversal"));
      // validate the required field `inbound_wire_transfer`
      InboundWireTransfer.validateJsonElement(jsonObj.get("inbound_wire_transfer"));
      // validate the required field `interest_payment`
      InterestPayment.validateJsonElement(jsonObj.get("interest_payment"));
      // validate the required field `internal_source`
      InternalSource.validateJsonElement(jsonObj.get("internal_source"));
      // validate the required field `real_time_payments_transfer_acknowledgement`
      RealTimePaymentsTransferAcknowledgement.validateJsonElement(jsonObj.get("real_time_payments_transfer_acknowledgement"));
      // validate the required field `sample_funds`
      SampleFunds.validateJsonElement(jsonObj.get("sample_funds"));
      // validate the required field `wire_drawdown_payment_intention`
      WireDrawdownPaymentIntention.validateJsonElement(jsonObj.get("wire_drawdown_payment_intention"));
      // validate the required field `wire_drawdown_payment_rejection`
      WireDrawdownPaymentRejection.validateJsonElement(jsonObj.get("wire_drawdown_payment_rejection"));
      // validate the required field `wire_transfer_intention`
      WireTransferIntention.validateJsonElement(jsonObj.get("wire_transfer_intention"));
      // validate the required field `wire_transfer_rejection`
      WireTransferRejection.validateJsonElement(jsonObj.get("wire_transfer_rejection"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionSource.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionSource>() {
           @Override
           public void write(JsonWriter out, TransactionSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionSource
   * @throws IOException if the JSON string is invalid with respect to TransactionSource
   */
  public static TransactionSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionSource.class);
  }

  /**
   * Convert an instance of TransactionSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

