/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulateARealTimePaymentsTransferToYourAccountParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulateARealTimePaymentsTransferToYourAccountParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_ID = "account_number_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_ID)
  private String accountNumberId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_DEBTOR_ACCOUNT_NUMBER = "debtor_account_number";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ACCOUNT_NUMBER)
  private String debtorAccountNumber;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtor_name";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  private String debtorName;

  public static final String SERIALIZED_NAME_DEBTOR_ROUTING_NUMBER = "debtor_routing_number";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ROUTING_NUMBER)
  private String debtorRoutingNumber;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION = "remittance_information";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION)
  private String remittanceInformation;

  public static final String SERIALIZED_NAME_REQUEST_FOR_PAYMENT_ID = "request_for_payment_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_FOR_PAYMENT_ID)
  private String requestForPaymentId;

  public SimulateARealTimePaymentsTransferToYourAccountParameters() {
  }

  public SimulateARealTimePaymentsTransferToYourAccountParameters accountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
    return this;
  }

  /**
   * The identifier of the Account Number the inbound Real Time Payments Transfer is for.
   * @return accountNumberId
   */
  @javax.annotation.Nonnull
  public String getAccountNumberId() {
    return accountNumberId;
  }

  public void setAccountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in USD cents. Must be positive.
   * minimum: 1
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters debtorAccountNumber(String debtorAccountNumber) {
    this.debtorAccountNumber = debtorAccountNumber;
    return this;
  }

  /**
   * The account number of the account that sent the transfer.
   * @return debtorAccountNumber
   */
  @javax.annotation.Nullable
  public String getDebtorAccountNumber() {
    return debtorAccountNumber;
  }

  public void setDebtorAccountNumber(String debtorAccountNumber) {
    this.debtorAccountNumber = debtorAccountNumber;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters debtorName(String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * The name provided by the sender of the transfer.
   * @return debtorName
   */
  @javax.annotation.Nullable
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(String debtorName) {
    this.debtorName = debtorName;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters debtorRoutingNumber(String debtorRoutingNumber) {
    this.debtorRoutingNumber = debtorRoutingNumber;
    return this;
  }

  /**
   * The routing number of the account that sent the transfer.
   * @return debtorRoutingNumber
   */
  @javax.annotation.Nullable
  public String getDebtorRoutingNumber() {
    return debtorRoutingNumber;
  }

  public void setDebtorRoutingNumber(String debtorRoutingNumber) {
    this.debtorRoutingNumber = debtorRoutingNumber;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters remittanceInformation(String remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
    return this;
  }

  /**
   * Additional information included with the transfer.
   * @return remittanceInformation
   */
  @javax.annotation.Nullable
  public String getRemittanceInformation() {
    return remittanceInformation;
  }

  public void setRemittanceInformation(String remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
  }


  public SimulateARealTimePaymentsTransferToYourAccountParameters requestForPaymentId(String requestForPaymentId) {
    this.requestForPaymentId = requestForPaymentId;
    return this;
  }

  /**
   * The identifier of a pending Request for Payment that this transfer will fulfill.
   * @return requestForPaymentId
   */
  @javax.annotation.Nullable
  public String getRequestForPaymentId() {
    return requestForPaymentId;
  }

  public void setRequestForPaymentId(String requestForPaymentId) {
    this.requestForPaymentId = requestForPaymentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateARealTimePaymentsTransferToYourAccountParameters simulateARealTimePaymentsTransferToYourAccountParameters = (SimulateARealTimePaymentsTransferToYourAccountParameters) o;
    return Objects.equals(this.accountNumberId, simulateARealTimePaymentsTransferToYourAccountParameters.accountNumberId) &&
        Objects.equals(this.amount, simulateARealTimePaymentsTransferToYourAccountParameters.amount) &&
        Objects.equals(this.debtorAccountNumber, simulateARealTimePaymentsTransferToYourAccountParameters.debtorAccountNumber) &&
        Objects.equals(this.debtorName, simulateARealTimePaymentsTransferToYourAccountParameters.debtorName) &&
        Objects.equals(this.debtorRoutingNumber, simulateARealTimePaymentsTransferToYourAccountParameters.debtorRoutingNumber) &&
        Objects.equals(this.remittanceInformation, simulateARealTimePaymentsTransferToYourAccountParameters.remittanceInformation) &&
        Objects.equals(this.requestForPaymentId, simulateARealTimePaymentsTransferToYourAccountParameters.requestForPaymentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumberId, amount, debtorAccountNumber, debtorName, debtorRoutingNumber, remittanceInformation, requestForPaymentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateARealTimePaymentsTransferToYourAccountParameters {\n");
    sb.append("    accountNumberId: ").append(toIndentedString(accountNumberId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    debtorAccountNumber: ").append(toIndentedString(debtorAccountNumber)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    debtorRoutingNumber: ").append(toIndentedString(debtorRoutingNumber)).append("\n");
    sb.append("    remittanceInformation: ").append(toIndentedString(remittanceInformation)).append("\n");
    sb.append("    requestForPaymentId: ").append(toIndentedString(requestForPaymentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number_id");
    openapiFields.add("amount");
    openapiFields.add("debtor_account_number");
    openapiFields.add("debtor_name");
    openapiFields.add("debtor_routing_number");
    openapiFields.add("remittance_information");
    openapiFields.add("request_for_payment_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number_id");
    openapiRequiredFields.add("amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulateARealTimePaymentsTransferToYourAccountParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulateARealTimePaymentsTransferToYourAccountParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulateARealTimePaymentsTransferToYourAccountParameters is not found in the empty JSON string", SimulateARealTimePaymentsTransferToYourAccountParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulateARealTimePaymentsTransferToYourAccountParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulateARealTimePaymentsTransferToYourAccountParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulateARealTimePaymentsTransferToYourAccountParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number_id").toString()));
      }
      if ((jsonObj.get("debtor_account_number") != null && !jsonObj.get("debtor_account_number").isJsonNull()) && !jsonObj.get("debtor_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtor_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtor_account_number").toString()));
      }
      if ((jsonObj.get("debtor_name") != null && !jsonObj.get("debtor_name").isJsonNull()) && !jsonObj.get("debtor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtor_name").toString()));
      }
      if ((jsonObj.get("debtor_routing_number") != null && !jsonObj.get("debtor_routing_number").isJsonNull()) && !jsonObj.get("debtor_routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtor_routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtor_routing_number").toString()));
      }
      if ((jsonObj.get("remittance_information") != null && !jsonObj.get("remittance_information").isJsonNull()) && !jsonObj.get("remittance_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittance_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittance_information").toString()));
      }
      if ((jsonObj.get("request_for_payment_id") != null && !jsonObj.get("request_for_payment_id").isJsonNull()) && !jsonObj.get("request_for_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_for_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_for_payment_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulateARealTimePaymentsTransferToYourAccountParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulateARealTimePaymentsTransferToYourAccountParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulateARealTimePaymentsTransferToYourAccountParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulateARealTimePaymentsTransferToYourAccountParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulateARealTimePaymentsTransferToYourAccountParameters>() {
           @Override
           public void write(JsonWriter out, SimulateARealTimePaymentsTransferToYourAccountParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulateARealTimePaymentsTransferToYourAccountParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulateARealTimePaymentsTransferToYourAccountParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulateARealTimePaymentsTransferToYourAccountParameters
   * @throws IOException if the JSON string is invalid with respect to SimulateARealTimePaymentsTransferToYourAccountParameters
   */
  public static SimulateARealTimePaymentsTransferToYourAccountParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulateARealTimePaymentsTransferToYourAccountParameters.class);
  }

  /**
   * Convert an instance of SimulateARealTimePaymentsTransferToYourAccountParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

