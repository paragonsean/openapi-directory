/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CheckTransferDeposit;
import org.openapitools.client.model.CheckTransferReturn;
import org.openapitools.client.model.CheckTransferStopPaymentRequest;
import org.openapitools.client.model.CheckTransferSubmission;
import org.openapitools.client.model.ReturnAddress;
import org.openapitools.client.model.TransferApproval;
import org.openapitools.client.model.TransferCancellation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Check Transfers move funds from your Increase account by mailing a physical check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckTransfer {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private TransferApproval approval;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private TransferCancellation cancellation;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check&#39;s currency.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DEPOSIT = "deposit";
  @SerializedName(SERIALIZED_NAME_DEPOSIT)
  private CheckTransferDeposit deposit;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAILED_AT = "mailed_at";
  @SerializedName(SERIALIZED_NAME_MAILED_AT)
  private OffsetDateTime mailedAt;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "return_address";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private ReturnAddress returnAddress;

  public static final String SERIALIZED_NAME_RETURN_DETAILS = "return_details";
  @SerializedName(SERIALIZED_NAME_RETURN_DETAILS)
  private CheckTransferReturn returnDetails;

  /**
   * The lifecycle status of the transfer.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The transfer is awaiting approval.
     */
    PENDING_APPROVAL("pending_approval"),
    
    /**
     * The transfer is pending submission.
     */
    PENDING_SUBMISSION("pending_submission"),
    
    /**
     * The transfer is complete.
     */
    SUBMITTED("submitted"),
    
    /**
     * The check is queued for mailing.
     */
    PENDING_MAILING("pending_mailing"),
    
    /**
     * The check has been mailed.
     */
    MAILED("mailed"),
    
    /**
     * The transfer has been canceled.
     */
    CANCELED("canceled"),
    
    /**
     * The check has been deposited.
     */
    DEPOSITED("deposited"),
    
    /**
     * A stop-payment was requested for this check.
     */
    STOPPED("stopped"),
    
    /**
     * The transfer has been returned.
     */
    RETURNED("returned"),
    
    /**
     * The transfer has been rejected.
     */
    REJECTED("rejected"),
    
    /**
     * The transfer requires your attention.
     */
    REQUIRES_ATTENTION("requires_attention");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STOP_PAYMENT_REQUEST = "stop_payment_request";
  @SerializedName(SERIALIZED_NAME_STOP_PAYMENT_REQUEST)
  private CheckTransferStopPaymentRequest stopPaymentRequest;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private CheckTransferSubmission submission;

  public static final String SERIALIZED_NAME_SUBMITTED_AT = "submitted_at";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AT)
  private OffsetDateTime submittedAt;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;check_transfer&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHECK_TRANSFER("check_transfer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CheckTransfer() {
  }

  public CheckTransfer accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The identifier of the Account from which funds will be transferred.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CheckTransfer addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * The city of the check&#39;s destination.
   * @return addressCity
   */
  @javax.annotation.Nonnull
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public CheckTransfer addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * The street address of the check&#39;s destination.
   * @return addressLine1
   */
  @javax.annotation.Nonnull
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public CheckTransfer addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * The second line of the address of the check&#39;s destination.
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public CheckTransfer addressState(String addressState) {
    this.addressState = addressState;
    return this;
  }

  /**
   * The state of the check&#39;s destination.
   * @return addressState
   */
  @javax.annotation.Nonnull
  public String getAddressState() {
    return addressState;
  }

  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public CheckTransfer addressZip(String addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  /**
   * The postal code of the check&#39;s destination.
   * @return addressZip
   */
  @javax.annotation.Nonnull
  public String getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }


  public CheckTransfer amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in USD cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CheckTransfer approval(TransferApproval approval) {
    this.approval = approval;
    return this;
  }

  /**
   * Get approval
   * @return approval
   */
  @javax.annotation.Nullable
  public TransferApproval getApproval() {
    return approval;
  }

  public void setApproval(TransferApproval approval) {
    this.approval = approval;
  }


  public CheckTransfer cancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public TransferCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(TransferCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public CheckTransfer createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CheckTransfer currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check&#39;s currency.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public CheckTransfer deposit(CheckTransferDeposit deposit) {
    this.deposit = deposit;
    return this;
  }

  /**
   * Get deposit
   * @return deposit
   */
  @javax.annotation.Nullable
  public CheckTransferDeposit getDeposit() {
    return deposit;
  }

  public void setDeposit(CheckTransferDeposit deposit) {
    this.deposit = deposit;
  }


  public CheckTransfer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Check transfer&#39;s identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CheckTransfer mailedAt(OffsetDateTime mailedAt) {
    this.mailedAt = mailedAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
   * @return mailedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMailedAt() {
    return mailedAt;
  }

  public void setMailedAt(OffsetDateTime mailedAt) {
    this.mailedAt = mailedAt;
  }


  public CheckTransfer message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The descriptor that will be printed on the memo field on the check.
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CheckTransfer note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The descriptor that will be printed on the letter included with the check.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CheckTransfer recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * The name that will be printed on the check.
   * @return recipientName
   */
  @javax.annotation.Nonnull
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public CheckTransfer returnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public ReturnAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
  }


  public CheckTransfer returnDetails(CheckTransferReturn returnDetails) {
    this.returnDetails = returnDetails;
    return this;
  }

  /**
   * Get returnDetails
   * @return returnDetails
   */
  @javax.annotation.Nullable
  public CheckTransferReturn getReturnDetails() {
    return returnDetails;
  }

  public void setReturnDetails(CheckTransferReturn returnDetails) {
    this.returnDetails = returnDetails;
  }


  public CheckTransfer status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The lifecycle status of the transfer.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CheckTransfer stopPaymentRequest(CheckTransferStopPaymentRequest stopPaymentRequest) {
    this.stopPaymentRequest = stopPaymentRequest;
    return this;
  }

  /**
   * Get stopPaymentRequest
   * @return stopPaymentRequest
   */
  @javax.annotation.Nullable
  public CheckTransferStopPaymentRequest getStopPaymentRequest() {
    return stopPaymentRequest;
  }

  public void setStopPaymentRequest(CheckTransferStopPaymentRequest stopPaymentRequest) {
    this.stopPaymentRequest = stopPaymentRequest;
  }


  public CheckTransfer submission(CheckTransferSubmission submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Get submission
   * @return submission
   */
  @javax.annotation.Nullable
  public CheckTransferSubmission getSubmission() {
    return submission;
  }

  public void setSubmission(CheckTransferSubmission submission) {
    this.submission = submission;
  }


  public CheckTransfer submittedAt(OffsetDateTime submittedAt) {
    this.submittedAt = submittedAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
   * @return submittedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedAt() {
    return submittedAt;
  }

  public void setSubmittedAt(OffsetDateTime submittedAt) {
    this.submittedAt = submittedAt;
  }


  public CheckTransfer transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The ID for the transaction caused by the transfer.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public CheckTransfer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;check_transfer&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckTransfer checkTransfer = (CheckTransfer) o;
    return Objects.equals(this.accountId, checkTransfer.accountId) &&
        Objects.equals(this.addressCity, checkTransfer.addressCity) &&
        Objects.equals(this.addressLine1, checkTransfer.addressLine1) &&
        Objects.equals(this.addressLine2, checkTransfer.addressLine2) &&
        Objects.equals(this.addressState, checkTransfer.addressState) &&
        Objects.equals(this.addressZip, checkTransfer.addressZip) &&
        Objects.equals(this.amount, checkTransfer.amount) &&
        Objects.equals(this.approval, checkTransfer.approval) &&
        Objects.equals(this.cancellation, checkTransfer.cancellation) &&
        Objects.equals(this.createdAt, checkTransfer.createdAt) &&
        Objects.equals(this.currency, checkTransfer.currency) &&
        Objects.equals(this.deposit, checkTransfer.deposit) &&
        Objects.equals(this.id, checkTransfer.id) &&
        Objects.equals(this.mailedAt, checkTransfer.mailedAt) &&
        Objects.equals(this.message, checkTransfer.message) &&
        Objects.equals(this.note, checkTransfer.note) &&
        Objects.equals(this.recipientName, checkTransfer.recipientName) &&
        Objects.equals(this.returnAddress, checkTransfer.returnAddress) &&
        Objects.equals(this.returnDetails, checkTransfer.returnDetails) &&
        Objects.equals(this.status, checkTransfer.status) &&
        Objects.equals(this.stopPaymentRequest, checkTransfer.stopPaymentRequest) &&
        Objects.equals(this.submission, checkTransfer.submission) &&
        Objects.equals(this.submittedAt, checkTransfer.submittedAt) &&
        Objects.equals(this.transactionId, checkTransfer.transactionId) &&
        Objects.equals(this.type, checkTransfer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, addressCity, addressLine1, addressLine2, addressState, addressZip, amount, approval, cancellation, createdAt, currency, deposit, id, mailedAt, message, note, recipientName, returnAddress, returnDetails, status, stopPaymentRequest, submission, submittedAt, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckTransfer {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mailedAt: ").append(toIndentedString(mailedAt)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("    returnDetails: ").append(toIndentedString(returnDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stopPaymentRequest: ").append(toIndentedString(stopPaymentRequest)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    submittedAt: ").append(toIndentedString(submittedAt)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("address_city");
    openapiFields.add("address_line1");
    openapiFields.add("address_line2");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("amount");
    openapiFields.add("approval");
    openapiFields.add("cancellation");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("deposit");
    openapiFields.add("id");
    openapiFields.add("mailed_at");
    openapiFields.add("message");
    openapiFields.add("note");
    openapiFields.add("recipient_name");
    openapiFields.add("return_address");
    openapiFields.add("return_details");
    openapiFields.add("status");
    openapiFields.add("stop_payment_request");
    openapiFields.add("submission");
    openapiFields.add("submitted_at");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("address_city");
    openapiRequiredFields.add("address_line1");
    openapiRequiredFields.add("address_line2");
    openapiRequiredFields.add("address_state");
    openapiRequiredFields.add("address_zip");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("approval");
    openapiRequiredFields.add("cancellation");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("deposit");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mailed_at");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("recipient_name");
    openapiRequiredFields.add("return_address");
    openapiRequiredFields.add("return_details");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("stop_payment_request");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("submitted_at");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckTransfer is not found in the empty JSON string", CheckTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if (!jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull()) && !jsonObj.get("address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      if (!jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if (!jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      // validate the required field `approval`
      TransferApproval.validateJsonElement(jsonObj.get("approval"));
      // validate the required field `cancellation`
      TransferCancellation.validateJsonElement(jsonObj.get("cancellation"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      // validate the required field `deposit`
      CheckTransferDeposit.validateJsonElement(jsonObj.get("deposit"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      // validate the required field `return_address`
      ReturnAddress.validateJsonElement(jsonObj.get("return_address"));
      // validate the required field `return_details`
      CheckTransferReturn.validateJsonElement(jsonObj.get("return_details"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // validate the required field `stop_payment_request`
      CheckTransferStopPaymentRequest.validateJsonElement(jsonObj.get("stop_payment_request"));
      // validate the required field `submission`
      CheckTransferSubmission.validateJsonElement(jsonObj.get("submission"));
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckTransfer>() {
           @Override
           public void write(JsonWriter out, CheckTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckTransfer
   * @throws IOException if the JSON string is invalid with respect to CheckTransfer
   */
  public static CheckTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckTransfer.class);
  }

  /**
   * Convert an instance of CheckTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

