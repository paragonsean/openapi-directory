/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Events are records of things that happened to objects in the API. They also result in webhooks being generated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_ASSOCIATED_OBJECT_ID = "associated_object_id";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_OBJECT_ID)
  private String associatedObjectId;

  public static final String SERIALIZED_NAME_ASSOCIATED_OBJECT_TYPE = "associated_object_type";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_OBJECT_TYPE)
  private String associatedObjectType;

  /**
   * The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    /**
     * Occurs whenever an Account is created.
     */
    ACCOUNT_CREATED("account.created"),
    
    /**
     * Occurs whenever an Account is updated.
     */
    ACCOUNT_UPDATED("account.updated"),
    
    /**
     * Occurs whenever an Account Number is created.
     */
    ACCOUNT_NUMBER_CREATED("account_number.created"),
    
    /**
     * Occurs whenever an Account Number is updated.
     */
    ACCOUNT_NUMBER_UPDATED("account_number.updated"),
    
    /**
     * Occurs whenever an Account Statement is created.
     */
    ACCOUNT_STATEMENT_CREATED("account_statement.created"),
    
    /**
     * Occurs whenever an Account Transfer is created.
     */
    ACCOUNT_TRANSFER_CREATED("account_transfer.created"),
    
    /**
     * Occurs whenever an Account Transfer is updated.
     */
    ACCOUNT_TRANSFER_UPDATED("account_transfer.updated"),
    
    /**
     * Occurs whenever an ACH Prenotification is created.
     */
    ACH_PRENOTIFICATION_CREATED("ach_prenotification.created"),
    
    /**
     * Occurs whenever an ACH Prenotification is updated.
     */
    ACH_PRENOTIFICATION_UPDATED("ach_prenotification.updated"),
    
    /**
     * Occurs whenever an ACH Transfer is created.
     */
    ACH_TRANSFER_CREATED("ach_transfer.created"),
    
    /**
     * Occurs whenever an ACH Transfer is updated.
     */
    ACH_TRANSFER_UPDATED("ach_transfer.updated"),
    
    /**
     * Occurs whenever a Card is created.
     */
    CARD_CREATED("card.created"),
    
    /**
     * Occurs whenever a Card is updated.
     */
    CARD_UPDATED("card.updated"),
    
    /**
     * Occurs whenever a Card Payment is created.
     */
    CARD_PAYMENT_CREATED("card_payment.created"),
    
    /**
     * Occurs whenever a Card Payment is updated.
     */
    CARD_PAYMENT_UPDATED("card_payment.updated"),
    
    /**
     * Occurs whenever a Card Dispute is created.
     */
    CARD_DISPUTE_CREATED("card_dispute.created"),
    
    /**
     * Occurs whenever a Card Dispute is updated.
     */
    CARD_DISPUTE_UPDATED("card_dispute.updated"),
    
    /**
     * Occurs whenever a Check Deposit is created.
     */
    CHECK_DEPOSIT_CREATED("check_deposit.created"),
    
    /**
     * Occurs whenever a Check Deposit is updated.
     */
    CHECK_DEPOSIT_UPDATED("check_deposit.updated"),
    
    /**
     * Occurs whenever a Check Transfer is created.
     */
    CHECK_TRANSFER_CREATED("check_transfer.created"),
    
    /**
     * Occurs whenever a Check Transfer is updated.
     */
    CHECK_TRANSFER_UPDATED("check_transfer.updated"),
    
    /**
     * Occurs whenever a Declined Transaction is created.
     */
    DECLINED_TRANSACTION_CREATED("declined_transaction.created"),
    
    /**
     * Occurs whenever a Digital Wallet Token is created.
     */
    DIGITAL_WALLET_TOKEN_CREATED("digital_wallet_token.created"),
    
    /**
     * Occurs whenever a Digital Wallet Token is updated.
     */
    DIGITAL_WALLET_TOKEN_UPDATED("digital_wallet_token.updated"),
    
    /**
     * Occurs whenever a Document is created.
     */
    DOCUMENT_CREATED("document.created"),
    
    /**
     * Occurs whenever an Entity is created.
     */
    ENTITY_CREATED("entity.created"),
    
    /**
     * Occurs whenever an Entity is updated.
     */
    ENTITY_UPDATED("entity.updated"),
    
    /**
     * Occurs whenever an External Account is created.
     */
    EXTERNAL_ACCOUNT_CREATED("external_account.created"),
    
    /**
     * Occurs whenever a File is created.
     */
    FILE_CREATED("file.created"),
    
    /**
     * Occurs whenever a Group is updated.
     */
    GROUP_UPDATED("group.updated"),
    
    /**
     * Increase may send webhooks with this category to see if a webhook endpoint is working properly.
     */
    GROUP_HEARTBEAT("group.heartbeat"),
    
    /**
     * Occurs whenever an Inbound ACH Transfer Return is created.
     */
    INBOUND_ACH_TRANSFER_RETURN_CREATED("inbound_ach_transfer_return.created"),
    
    /**
     * Occurs whenever an Inbound ACH Transfer Return is updated.
     */
    INBOUND_ACH_TRANSFER_RETURN_UPDATED("inbound_ach_transfer_return.updated"),
    
    /**
     * Occurs whenever an Inbound Wire Drawdown Request is created.
     */
    INBOUND_WIRE_DRAWDOWN_REQUEST_CREATED("inbound_wire_drawdown_request.created"),
    
    /**
     * Occurs whenever an OAuth Connection is created.
     */
    OAUTH_CONNECTION_CREATED("oauth_connection.created"),
    
    /**
     * Occurs whenever an OAuth Connection is deactivated.
     */
    OAUTH_CONNECTION_DEACTIVATED("oauth_connection.deactivated"),
    
    /**
     * Occurs whenever a Pending Transaction is created.
     */
    PENDING_TRANSACTION_CREATED("pending_transaction.created"),
    
    /**
     * Occurs whenever a Pending Transaction is updated.
     */
    PENDING_TRANSACTION_UPDATED("pending_transaction.updated"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a card authorization.
     */
    REAL_TIME_DECISION_CARD_AUTHORIZATION_REQUESTED("real_time_decision.card_authorization_requested"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a digital wallet provisioning attempt.
     */
    REAL_TIME_DECISION_DIGITAL_WALLET_TOKEN_REQUESTED("real_time_decision.digital_wallet_token_requested"),
    
    /**
     * Occurs whenever a Real-Time Decision is created in response to a digital wallet requiring two-factor authentication.
     */
    REAL_TIME_DECISION_DIGITAL_WALLET_AUTHENTICATION_REQUESTED("real_time_decision.digital_wallet_authentication_requested"),
    
    /**
     * Occurs whenever a Real Time Payments Transfer is created.
     */
    REAL_TIME_PAYMENTS_TRANSFER_CREATED("real_time_payments_transfer.created"),
    
    /**
     * Occurs whenever a Real Time Payments Transfer is updated.
     */
    REAL_TIME_PAYMENTS_TRANSFER_UPDATED("real_time_payments_transfer.updated"),
    
    /**
     * Occurs whenever a Real Time Payments Request for Payment is created.
     */
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_CREATED("real_time_payments_request_for_payment.created"),
    
    /**
     * Occurs whenever a Real Time Payments Request for Payment is updated.
     */
    REAL_TIME_PAYMENTS_REQUEST_FOR_PAYMENT_UPDATED("real_time_payments_request_for_payment.updated"),
    
    /**
     * Occurs whenever a Transaction is updated.
     */
    TRANSACTION_CREATED("transaction.created"),
    
    /**
     * Occurs whenever a Wire Drawdown Request is created.
     */
    WIRE_DRAWDOWN_REQUEST_CREATED("wire_drawdown_request.created"),
    
    /**
     * Occurs whenever a Wire Drawdown Request is updated.
     */
    WIRE_DRAWDOWN_REQUEST_UPDATED("wire_drawdown_request.updated"),
    
    /**
     * Occurs whenever a Wire Transfer is created.
     */
    WIRE_TRANSFER_CREATED("wire_transfer.created"),
    
    /**
     * Occurs whenever a Wire Transfer is updated.
     */
    WIRE_TRANSFER_UPDATED("wire_transfer.updated");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;event&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT("event");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Event() {
  }

  public Event associatedObjectId(String associatedObjectId) {
    this.associatedObjectId = associatedObjectId;
    return this;
  }

  /**
   * The identifier of the object that generated this Event.
   * @return associatedObjectId
   */
  @javax.annotation.Nonnull
  public String getAssociatedObjectId() {
    return associatedObjectId;
  }

  public void setAssociatedObjectId(String associatedObjectId) {
    this.associatedObjectId = associatedObjectId;
  }


  public Event associatedObjectType(String associatedObjectType) {
    this.associatedObjectType = associatedObjectType;
    return this;
  }

  /**
   * The type of the object that generated this Event.
   * @return associatedObjectType
   */
  @javax.annotation.Nonnull
  public String getAssociatedObjectType() {
    return associatedObjectType;
  }

  public void setAssociatedObjectType(String associatedObjectType) {
    this.associatedObjectType = associatedObjectType;
  }


  public Event category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Event createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time the Event was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Event id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Event identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Event type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;event&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.associatedObjectId, event.associatedObjectId) &&
        Objects.equals(this.associatedObjectType, event.associatedObjectType) &&
        Objects.equals(this.category, event.category) &&
        Objects.equals(this.createdAt, event.createdAt) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.type, event.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedObjectId, associatedObjectType, category, createdAt, id, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    associatedObjectId: ").append(toIndentedString(associatedObjectId)).append("\n");
    sb.append("    associatedObjectType: ").append(toIndentedString(associatedObjectType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associated_object_id");
    openapiFields.add("associated_object_type");
    openapiFields.add("category");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("associated_object_id");
    openapiRequiredFields.add("associated_object_type");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("associated_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associated_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associated_object_id").toString()));
      }
      if (!jsonObj.get("associated_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associated_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associated_object_type").toString()));
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

