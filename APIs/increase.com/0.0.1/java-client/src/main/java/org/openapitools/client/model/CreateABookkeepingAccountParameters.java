/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateABookkeepingAccountParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateABookkeepingAccountParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  /**
   * The account compliance category.
   */
  @JsonAdapter(ComplianceCategoryEnum.Adapter.class)
  public enum ComplianceCategoryEnum {
    /**
     * A cash in an commingled Increase Account.
     */
    COMMINGLED_CASH("commingled_cash"),
    
    /**
     * A customer balance.
     */
    CUSTOMER_BALANCE("customer_balance");

    private String value;

    ComplianceCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplianceCategoryEnum fromValue(String value) {
      for (ComplianceCategoryEnum b : ComplianceCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplianceCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplianceCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplianceCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplianceCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplianceCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLIANCE_CATEGORY = "compliance_category";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_CATEGORY)
  private ComplianceCategoryEnum complianceCategory;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CreateABookkeepingAccountParameters() {
  }

  public CreateABookkeepingAccountParameters accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The entity, if &#x60;compliance_category&#x60; is &#x60;commingled_cash&#x60;.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateABookkeepingAccountParameters complianceCategory(ComplianceCategoryEnum complianceCategory) {
    this.complianceCategory = complianceCategory;
    return this;
  }

  /**
   * The account compliance category.
   * @return complianceCategory
   */
  @javax.annotation.Nullable
  public ComplianceCategoryEnum getComplianceCategory() {
    return complianceCategory;
  }

  public void setComplianceCategory(ComplianceCategoryEnum complianceCategory) {
    this.complianceCategory = complianceCategory;
  }


  public CreateABookkeepingAccountParameters entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The entity, if &#x60;compliance_category&#x60; is &#x60;customer_balance&#x60;.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public CreateABookkeepingAccountParameters name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name you choose for the account.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateABookkeepingAccountParameters createABookkeepingAccountParameters = (CreateABookkeepingAccountParameters) o;
    return Objects.equals(this.accountId, createABookkeepingAccountParameters.accountId) &&
        Objects.equals(this.complianceCategory, createABookkeepingAccountParameters.complianceCategory) &&
        Objects.equals(this.entityId, createABookkeepingAccountParameters.entityId) &&
        Objects.equals(this.name, createABookkeepingAccountParameters.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, complianceCategory, entityId, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateABookkeepingAccountParameters {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    complianceCategory: ").append(toIndentedString(complianceCategory)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("compliance_category");
    openapiFields.add("entity_id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateABookkeepingAccountParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateABookkeepingAccountParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateABookkeepingAccountParameters is not found in the empty JSON string", CreateABookkeepingAccountParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateABookkeepingAccountParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateABookkeepingAccountParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateABookkeepingAccountParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("compliance_category") != null && !jsonObj.get("compliance_category").isJsonNull()) && !jsonObj.get("compliance_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compliance_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compliance_category").toString()));
      }
      // validate the optional field `compliance_category`
      if (jsonObj.get("compliance_category") != null && !jsonObj.get("compliance_category").isJsonNull()) {
        ComplianceCategoryEnum.validateJsonElement(jsonObj.get("compliance_category"));
      }
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateABookkeepingAccountParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateABookkeepingAccountParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateABookkeepingAccountParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateABookkeepingAccountParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateABookkeepingAccountParameters>() {
           @Override
           public void write(JsonWriter out, CreateABookkeepingAccountParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateABookkeepingAccountParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateABookkeepingAccountParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateABookkeepingAccountParameters
   * @throws IOException if the JSON string is invalid with respect to CreateABookkeepingAccountParameters
   */
  public static CreateABookkeepingAccountParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateABookkeepingAccountParameters.class);
  }

  /**
   * Convert an instance of CreateABookkeepingAccountParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

