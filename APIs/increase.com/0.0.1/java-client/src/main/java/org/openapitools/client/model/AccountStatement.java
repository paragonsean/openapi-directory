/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account Statements are generated monthly for every active Account. You can access the statement&#39;s data via the API or retrieve a PDF with its details via its associated File.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountStatement {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ENDING_BALANCE = "ending_balance";
  @SerializedName(SERIALIZED_NAME_ENDING_BALANCE)
  private Integer endingBalance;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STARTING_BALANCE = "starting_balance";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE)
  private Integer startingBalance;

  public static final String SERIALIZED_NAME_STATEMENT_PERIOD_END = "statement_period_end";
  @SerializedName(SERIALIZED_NAME_STATEMENT_PERIOD_END)
  private OffsetDateTime statementPeriodEnd;

  public static final String SERIALIZED_NAME_STATEMENT_PERIOD_START = "statement_period_start";
  @SerializedName(SERIALIZED_NAME_STATEMENT_PERIOD_START)
  private OffsetDateTime statementPeriodStart;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;account_statement&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCOUNT_STATEMENT("account_statement");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AccountStatement() {
  }

  public AccountStatement accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The identifier for the Account this Account Statement belongs to.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AccountStatement createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AccountStatement endingBalance(Integer endingBalance) {
    this.endingBalance = endingBalance;
    return this;
  }

  /**
   * The Account&#39;s balance at the start of its statement period.
   * @return endingBalance
   */
  @javax.annotation.Nonnull
  public Integer getEndingBalance() {
    return endingBalance;
  }

  public void setEndingBalance(Integer endingBalance) {
    this.endingBalance = endingBalance;
  }


  public AccountStatement fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * The identifier of the File containing a PDF of the statement.
   * @return fileId
   */
  @javax.annotation.Nonnull
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public AccountStatement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Account Statement identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountStatement startingBalance(Integer startingBalance) {
    this.startingBalance = startingBalance;
    return this;
  }

  /**
   * The Account&#39;s balance at the start of its statement period.
   * @return startingBalance
   */
  @javax.annotation.Nonnull
  public Integer getStartingBalance() {
    return startingBalance;
  }

  public void setStartingBalance(Integer startingBalance) {
    this.startingBalance = startingBalance;
  }


  public AccountStatement statementPeriodEnd(OffsetDateTime statementPeriodEnd) {
    this.statementPeriodEnd = statementPeriodEnd;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
   * @return statementPeriodEnd
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStatementPeriodEnd() {
    return statementPeriodEnd;
  }

  public void setStatementPeriodEnd(OffsetDateTime statementPeriodEnd) {
    this.statementPeriodEnd = statementPeriodEnd;
  }


  public AccountStatement statementPeriodStart(OffsetDateTime statementPeriodStart) {
    this.statementPeriodStart = statementPeriodStart;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
   * @return statementPeriodStart
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStatementPeriodStart() {
    return statementPeriodStart;
  }

  public void setStatementPeriodStart(OffsetDateTime statementPeriodStart) {
    this.statementPeriodStart = statementPeriodStart;
  }


  public AccountStatement type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;account_statement&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountStatement accountStatement = (AccountStatement) o;
    return Objects.equals(this.accountId, accountStatement.accountId) &&
        Objects.equals(this.createdAt, accountStatement.createdAt) &&
        Objects.equals(this.endingBalance, accountStatement.endingBalance) &&
        Objects.equals(this.fileId, accountStatement.fileId) &&
        Objects.equals(this.id, accountStatement.id) &&
        Objects.equals(this.startingBalance, accountStatement.startingBalance) &&
        Objects.equals(this.statementPeriodEnd, accountStatement.statementPeriodEnd) &&
        Objects.equals(this.statementPeriodStart, accountStatement.statementPeriodStart) &&
        Objects.equals(this.type, accountStatement.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, createdAt, endingBalance, fileId, id, startingBalance, statementPeriodEnd, statementPeriodStart, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountStatement {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    endingBalance: ").append(toIndentedString(endingBalance)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startingBalance: ").append(toIndentedString(startingBalance)).append("\n");
    sb.append("    statementPeriodEnd: ").append(toIndentedString(statementPeriodEnd)).append("\n");
    sb.append("    statementPeriodStart: ").append(toIndentedString(statementPeriodStart)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("created_at");
    openapiFields.add("ending_balance");
    openapiFields.add("file_id");
    openapiFields.add("id");
    openapiFields.add("starting_balance");
    openapiFields.add("statement_period_end");
    openapiFields.add("statement_period_start");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("ending_balance");
    openapiRequiredFields.add("file_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("starting_balance");
    openapiRequiredFields.add("statement_period_end");
    openapiRequiredFields.add("statement_period_start");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountStatement is not found in the empty JSON string", AccountStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountStatement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountStatement>() {
           @Override
           public void write(JsonWriter out, AccountStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountStatement
   * @throws IOException if the JSON string is invalid with respect to AccountStatement
   */
  public static AccountStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountStatement.class);
  }

  /**
   * Convert an instance of AccountStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

