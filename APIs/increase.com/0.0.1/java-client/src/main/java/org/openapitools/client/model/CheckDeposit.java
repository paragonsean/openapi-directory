/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CheckDepositAcceptance;
import org.openapitools.client.model.CheckDepositRejection;
import org.openapitools.client.model.CheckDepositReturn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Check Deposits allow you to deposit images of paper checks into your account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckDeposit {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_BACK_IMAGE_FILE_ID = "back_image_file_id";
  @SerializedName(SERIALIZED_NAME_BACK_IMAGE_FILE_ID)
  private String backImageFileId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DEPOSIT_ACCEPTANCE = "deposit_acceptance";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_ACCEPTANCE)
  private CheckDepositAcceptance depositAcceptance;

  public static final String SERIALIZED_NAME_DEPOSIT_REJECTION = "deposit_rejection";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_REJECTION)
  private CheckDepositRejection depositRejection;

  public static final String SERIALIZED_NAME_DEPOSIT_RETURN = "deposit_return";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_RETURN)
  private CheckDepositReturn depositReturn;

  public static final String SERIALIZED_NAME_FRONT_IMAGE_FILE_ID = "front_image_file_id";
  @SerializedName(SERIALIZED_NAME_FRONT_IMAGE_FILE_ID)
  private String frontImageFileId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the Check Deposit.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The Check Deposit is pending review.
     */
    PENDING("pending"),
    
    /**
     * The Check Deposit has been deposited.
     */
    SUBMITTED("submitted"),
    
    /**
     * The Check Deposit has been rejected.
     */
    REJECTED("rejected"),
    
    /**
     * The Check Deposit has been returned.
     */
    RETURNED("returned");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;check_deposit&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHECK_DEPOSIT("check_deposit");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CheckDeposit() {
  }

  public CheckDeposit accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The Account the check was deposited into.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CheckDeposit amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CheckDeposit backImageFileId(String backImageFileId) {
    this.backImageFileId = backImageFileId;
    return this;
  }

  /**
   * The ID for the File containing the image of the back of the check.
   * @return backImageFileId
   */
  @javax.annotation.Nullable
  public String getBackImageFileId() {
    return backImageFileId;
  }

  public void setBackImageFileId(String backImageFileId) {
    this.backImageFileId = backImageFileId;
  }


  public CheckDeposit createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CheckDeposit currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public CheckDeposit depositAcceptance(CheckDepositAcceptance depositAcceptance) {
    this.depositAcceptance = depositAcceptance;
    return this;
  }

  /**
   * Get depositAcceptance
   * @return depositAcceptance
   */
  @javax.annotation.Nullable
  public CheckDepositAcceptance getDepositAcceptance() {
    return depositAcceptance;
  }

  public void setDepositAcceptance(CheckDepositAcceptance depositAcceptance) {
    this.depositAcceptance = depositAcceptance;
  }


  public CheckDeposit depositRejection(CheckDepositRejection depositRejection) {
    this.depositRejection = depositRejection;
    return this;
  }

  /**
   * Get depositRejection
   * @return depositRejection
   */
  @javax.annotation.Nullable
  public CheckDepositRejection getDepositRejection() {
    return depositRejection;
  }

  public void setDepositRejection(CheckDepositRejection depositRejection) {
    this.depositRejection = depositRejection;
  }


  public CheckDeposit depositReturn(CheckDepositReturn depositReturn) {
    this.depositReturn = depositReturn;
    return this;
  }

  /**
   * Get depositReturn
   * @return depositReturn
   */
  @javax.annotation.Nullable
  public CheckDepositReturn getDepositReturn() {
    return depositReturn;
  }

  public void setDepositReturn(CheckDepositReturn depositReturn) {
    this.depositReturn = depositReturn;
  }


  public CheckDeposit frontImageFileId(String frontImageFileId) {
    this.frontImageFileId = frontImageFileId;
    return this;
  }

  /**
   * The ID for the File containing the image of the front of the check.
   * @return frontImageFileId
   */
  @javax.annotation.Nonnull
  public String getFrontImageFileId() {
    return frontImageFileId;
  }

  public void setFrontImageFileId(String frontImageFileId) {
    this.frontImageFileId = frontImageFileId;
  }


  public CheckDeposit id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The deposit&#39;s identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CheckDeposit status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the Check Deposit.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CheckDeposit transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The ID for the Transaction created by the deposit.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public CheckDeposit type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;check_deposit&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckDeposit checkDeposit = (CheckDeposit) o;
    return Objects.equals(this.accountId, checkDeposit.accountId) &&
        Objects.equals(this.amount, checkDeposit.amount) &&
        Objects.equals(this.backImageFileId, checkDeposit.backImageFileId) &&
        Objects.equals(this.createdAt, checkDeposit.createdAt) &&
        Objects.equals(this.currency, checkDeposit.currency) &&
        Objects.equals(this.depositAcceptance, checkDeposit.depositAcceptance) &&
        Objects.equals(this.depositRejection, checkDeposit.depositRejection) &&
        Objects.equals(this.depositReturn, checkDeposit.depositReturn) &&
        Objects.equals(this.frontImageFileId, checkDeposit.frontImageFileId) &&
        Objects.equals(this.id, checkDeposit.id) &&
        Objects.equals(this.status, checkDeposit.status) &&
        Objects.equals(this.transactionId, checkDeposit.transactionId) &&
        Objects.equals(this.type, checkDeposit.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, amount, backImageFileId, createdAt, currency, depositAcceptance, depositRejection, depositReturn, frontImageFileId, id, status, transactionId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckDeposit {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    backImageFileId: ").append(toIndentedString(backImageFileId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    depositAcceptance: ").append(toIndentedString(depositAcceptance)).append("\n");
    sb.append("    depositRejection: ").append(toIndentedString(depositRejection)).append("\n");
    sb.append("    depositReturn: ").append(toIndentedString(depositReturn)).append("\n");
    sb.append("    frontImageFileId: ").append(toIndentedString(frontImageFileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("amount");
    openapiFields.add("back_image_file_id");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("deposit_acceptance");
    openapiFields.add("deposit_rejection");
    openapiFields.add("deposit_return");
    openapiFields.add("front_image_file_id");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("transaction_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("back_image_file_id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("deposit_acceptance");
    openapiRequiredFields.add("deposit_rejection");
    openapiRequiredFields.add("deposit_return");
    openapiRequiredFields.add("front_image_file_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckDeposit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckDeposit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckDeposit is not found in the empty JSON string", CheckDeposit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckDeposit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckDeposit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckDeposit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("back_image_file_id") != null && !jsonObj.get("back_image_file_id").isJsonNull()) && !jsonObj.get("back_image_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `back_image_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("back_image_file_id").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      // validate the required field `deposit_acceptance`
      CheckDepositAcceptance.validateJsonElement(jsonObj.get("deposit_acceptance"));
      // validate the required field `deposit_rejection`
      CheckDepositRejection.validateJsonElement(jsonObj.get("deposit_rejection"));
      // validate the required field `deposit_return`
      CheckDepositReturn.validateJsonElement(jsonObj.get("deposit_return"));
      if (!jsonObj.get("front_image_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_image_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_image_file_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckDeposit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckDeposit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckDeposit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckDeposit.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckDeposit>() {
           @Override
           public void write(JsonWriter out, CheckDeposit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckDeposit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckDeposit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckDeposit
   * @throws IOException if the JSON string is invalid with respect to CheckDeposit
   */
  public static CheckDeposit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckDeposit.class);
  }

  /**
   * Convert an instance of CheckDeposit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

