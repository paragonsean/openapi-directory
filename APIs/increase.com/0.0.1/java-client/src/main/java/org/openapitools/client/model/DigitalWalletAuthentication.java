/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields related to a digital wallet authentication attempt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DigitalWalletAuthentication {
  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  /**
   * The channel to send the card user their one-time passcode.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    /**
     * Send one-time passcodes over SMS.
     */
    SMS("sms"),
    
    /**
     * Send one-time passcodes over email.
     */
    EMAIL("email");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  /**
   * The digital wallet app being used.
   */
  @JsonAdapter(DigitalWalletEnum.Adapter.class)
  public enum DigitalWalletEnum {
    /**
     * Apple Pay
     */
    APPLE_PAY("apple_pay"),
    
    /**
     * Google Pay
     */
    GOOGLE_PAY("google_pay");

    private String value;

    DigitalWalletEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DigitalWalletEnum fromValue(String value) {
      for (DigitalWalletEnum b : DigitalWalletEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DigitalWalletEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DigitalWalletEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DigitalWalletEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DigitalWalletEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DigitalWalletEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIGITAL_WALLET = "digital_wallet";
  @SerializedName(SERIALIZED_NAME_DIGITAL_WALLET)
  private DigitalWalletEnum digitalWallet;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ONE_TIME_PASSCODE = "one_time_passcode";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_PASSCODE)
  private String oneTimePasscode;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  /**
   * Whether your application successfully delivered the one-time passcode.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    /**
     * Your application successfully delivered the one-time passcode to the cardholder.
     */
    SUCCESS("success"),
    
    /**
     * Your application failed to deliver the one-time passcode to the cardholder.
     */
    FAILURE("failure");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public DigitalWalletAuthentication() {
  }

  public DigitalWalletAuthentication cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * The identifier of the Card that is being tokenized.
   * @return cardId
   */
  @javax.annotation.Nonnull
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public DigitalWalletAuthentication channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The channel to send the card user their one-time passcode.
   * @return channel
   */
  @javax.annotation.Nonnull
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public DigitalWalletAuthentication digitalWallet(DigitalWalletEnum digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

  /**
   * The digital wallet app being used.
   * @return digitalWallet
   */
  @javax.annotation.Nonnull
  public DigitalWalletEnum getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(DigitalWalletEnum digitalWallet) {
    this.digitalWallet = digitalWallet;
  }


  public DigitalWalletAuthentication email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email to send the one-time passcode to if &#x60;channel&#x60; is equal to &#x60;email&#x60;.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DigitalWalletAuthentication oneTimePasscode(String oneTimePasscode) {
    this.oneTimePasscode = oneTimePasscode;
    return this;
  }

  /**
   * The one-time passcode to send the card user.
   * @return oneTimePasscode
   */
  @javax.annotation.Nonnull
  public String getOneTimePasscode() {
    return oneTimePasscode;
  }

  public void setOneTimePasscode(String oneTimePasscode) {
    this.oneTimePasscode = oneTimePasscode;
  }


  public DigitalWalletAuthentication phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The phone number to send the one-time passcode to if &#x60;channel&#x60; is equal to &#x60;sms&#x60;.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public DigitalWalletAuthentication result(ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * Whether your application successfully delivered the one-time passcode.
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalWalletAuthentication digitalWalletAuthentication = (DigitalWalletAuthentication) o;
    return Objects.equals(this.cardId, digitalWalletAuthentication.cardId) &&
        Objects.equals(this.channel, digitalWalletAuthentication.channel) &&
        Objects.equals(this.digitalWallet, digitalWalletAuthentication.digitalWallet) &&
        Objects.equals(this.email, digitalWalletAuthentication.email) &&
        Objects.equals(this.oneTimePasscode, digitalWalletAuthentication.oneTimePasscode) &&
        Objects.equals(this.phone, digitalWalletAuthentication.phone) &&
        Objects.equals(this.result, digitalWalletAuthentication.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, channel, digitalWallet, email, oneTimePasscode, phone, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalWalletAuthentication {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    oneTimePasscode: ").append(toIndentedString(oneTimePasscode)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_id");
    openapiFields.add("channel");
    openapiFields.add("digital_wallet");
    openapiFields.add("email");
    openapiFields.add("one_time_passcode");
    openapiFields.add("phone");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("card_id");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("digital_wallet");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("one_time_passcode");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("result");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DigitalWalletAuthentication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalWalletAuthentication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalWalletAuthentication is not found in the empty JSON string", DigitalWalletAuthentication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalWalletAuthentication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalWalletAuthentication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalWalletAuthentication.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the required field `channel`
      ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      if (!jsonObj.get("digital_wallet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_wallet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_wallet").toString()));
      }
      // validate the required field `digital_wallet`
      DigitalWalletEnum.validateJsonElement(jsonObj.get("digital_wallet"));
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("one_time_passcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `one_time_passcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("one_time_passcode").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the required field `result`
      ResultEnum.validateJsonElement(jsonObj.get("result"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalWalletAuthentication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalWalletAuthentication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalWalletAuthentication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalWalletAuthentication.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalWalletAuthentication>() {
           @Override
           public void write(JsonWriter out, DigitalWalletAuthentication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalWalletAuthentication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DigitalWalletAuthentication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DigitalWalletAuthentication
   * @throws IOException if the JSON string is invalid with respect to DigitalWalletAuthentication
   */
  public static DigitalWalletAuthentication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalWalletAuthentication.class);
  }

  /**
   * Convert an instance of DigitalWalletAuthentication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

