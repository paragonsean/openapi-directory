/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulateAnAchTransferToYourAccountParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulateAnAchTransferToYourAccountParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_ID = "account_number_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_ID)
  private String accountNumberId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE = "company_descriptive_date";
  @SerializedName(SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE)
  private String companyDescriptiveDate;

  public static final String SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA = "company_discretionary_data";
  @SerializedName(SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA)
  private String companyDiscretionaryData;

  public static final String SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION = "company_entry_description";
  @SerializedName(SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION)
  private String companyEntryDescription;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public SimulateAnAchTransferToYourAccountParameters() {
  }

  public SimulateAnAchTransferToYourAccountParameters accountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
    return this;
  }

  /**
   * The identifier of the Account Number the inbound ACH Transfer is for.
   * @return accountNumberId
   */
  @javax.annotation.Nonnull
  public String getAccountNumberId() {
    return accountNumberId;
  }

  public void setAccountNumberId(String accountNumberId) {
    this.accountNumberId = accountNumberId;
  }


  public SimulateAnAchTransferToYourAccountParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public SimulateAnAchTransferToYourAccountParameters companyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
    return this;
  }

  /**
   * The description of the date of the transfer.
   * @return companyDescriptiveDate
   */
  @javax.annotation.Nullable
  public String getCompanyDescriptiveDate() {
    return companyDescriptiveDate;
  }

  public void setCompanyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
  }


  public SimulateAnAchTransferToYourAccountParameters companyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
    return this;
  }

  /**
   * Data associated with the transfer set by the sender.
   * @return companyDiscretionaryData
   */
  @javax.annotation.Nullable
  public String getCompanyDiscretionaryData() {
    return companyDiscretionaryData;
  }

  public void setCompanyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
  }


  public SimulateAnAchTransferToYourAccountParameters companyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
    return this;
  }

  /**
   * The description of the transfer set by the sender.
   * @return companyEntryDescription
   */
  @javax.annotation.Nullable
  public String getCompanyEntryDescription() {
    return companyEntryDescription;
  }

  public void setCompanyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
  }


  public SimulateAnAchTransferToYourAccountParameters companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * The sender&#39;s company id.
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public SimulateAnAchTransferToYourAccountParameters companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name of the sender.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateAnAchTransferToYourAccountParameters simulateAnAchTransferToYourAccountParameters = (SimulateAnAchTransferToYourAccountParameters) o;
    return Objects.equals(this.accountNumberId, simulateAnAchTransferToYourAccountParameters.accountNumberId) &&
        Objects.equals(this.amount, simulateAnAchTransferToYourAccountParameters.amount) &&
        Objects.equals(this.companyDescriptiveDate, simulateAnAchTransferToYourAccountParameters.companyDescriptiveDate) &&
        Objects.equals(this.companyDiscretionaryData, simulateAnAchTransferToYourAccountParameters.companyDiscretionaryData) &&
        Objects.equals(this.companyEntryDescription, simulateAnAchTransferToYourAccountParameters.companyEntryDescription) &&
        Objects.equals(this.companyId, simulateAnAchTransferToYourAccountParameters.companyId) &&
        Objects.equals(this.companyName, simulateAnAchTransferToYourAccountParameters.companyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumberId, amount, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyId, companyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateAnAchTransferToYourAccountParameters {\n");
    sb.append("    accountNumberId: ").append(toIndentedString(accountNumberId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    companyDescriptiveDate: ").append(toIndentedString(companyDescriptiveDate)).append("\n");
    sb.append("    companyDiscretionaryData: ").append(toIndentedString(companyDiscretionaryData)).append("\n");
    sb.append("    companyEntryDescription: ").append(toIndentedString(companyEntryDescription)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number_id");
    openapiFields.add("amount");
    openapiFields.add("company_descriptive_date");
    openapiFields.add("company_discretionary_data");
    openapiFields.add("company_entry_description");
    openapiFields.add("company_id");
    openapiFields.add("company_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number_id");
    openapiRequiredFields.add("amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulateAnAchTransferToYourAccountParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulateAnAchTransferToYourAccountParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulateAnAchTransferToYourAccountParameters is not found in the empty JSON string", SimulateAnAchTransferToYourAccountParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulateAnAchTransferToYourAccountParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulateAnAchTransferToYourAccountParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulateAnAchTransferToYourAccountParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_number_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number_id").toString()));
      }
      if ((jsonObj.get("company_descriptive_date") != null && !jsonObj.get("company_descriptive_date").isJsonNull()) && !jsonObj.get("company_descriptive_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_descriptive_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_descriptive_date").toString()));
      }
      if ((jsonObj.get("company_discretionary_data") != null && !jsonObj.get("company_discretionary_data").isJsonNull()) && !jsonObj.get("company_discretionary_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_discretionary_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_discretionary_data").toString()));
      }
      if ((jsonObj.get("company_entry_description") != null && !jsonObj.get("company_entry_description").isJsonNull()) && !jsonObj.get("company_entry_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_entry_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_entry_description").toString()));
      }
      if ((jsonObj.get("company_id") != null && !jsonObj.get("company_id").isJsonNull()) && !jsonObj.get("company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_id").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulateAnAchTransferToYourAccountParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulateAnAchTransferToYourAccountParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulateAnAchTransferToYourAccountParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulateAnAchTransferToYourAccountParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulateAnAchTransferToYourAccountParameters>() {
           @Override
           public void write(JsonWriter out, SimulateAnAchTransferToYourAccountParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulateAnAchTransferToYourAccountParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulateAnAchTransferToYourAccountParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulateAnAchTransferToYourAccountParameters
   * @throws IOException if the JSON string is invalid with respect to SimulateAnAchTransferToYourAccountParameters
   */
  public static SimulateAnAchTransferToYourAccountParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulateAnAchTransferToYourAccountParameters.class);
  }

  /**
   * Convert an instance of SimulateAnAchTransferToYourAccountParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

