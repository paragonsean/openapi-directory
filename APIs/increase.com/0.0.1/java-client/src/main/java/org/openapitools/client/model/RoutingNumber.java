/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Routing numbers are used to identify your bank in a financial transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingNumber {
  /**
   * This routing number&#39;s support for ACH Transfers.
   */
  @JsonAdapter(AchTransfersEnum.Adapter.class)
  public enum AchTransfersEnum {
    /**
     * The routing number can receive this transfer type.
     */
    SUPPORTED("supported"),
    
    /**
     * The routing number cannot receive this transfer type.
     */
    NOT_SUPPORTED("not_supported");

    private String value;

    AchTransfersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AchTransfersEnum fromValue(String value) {
      for (AchTransfersEnum b : AchTransfersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AchTransfersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AchTransfersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AchTransfersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AchTransfersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AchTransfersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACH_TRANSFERS = "ach_transfers";
  @SerializedName(SERIALIZED_NAME_ACH_TRANSFERS)
  private AchTransfersEnum achTransfers;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * This routing number&#39;s support for Real Time Payments Transfers.
   */
  @JsonAdapter(RealTimePaymentsTransfersEnum.Adapter.class)
  public enum RealTimePaymentsTransfersEnum {
    /**
     * The routing number can receive this transfer type.
     */
    SUPPORTED("supported"),
    
    /**
     * The routing number cannot receive this transfer type.
     */
    NOT_SUPPORTED("not_supported");

    private String value;

    RealTimePaymentsTransfersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RealTimePaymentsTransfersEnum fromValue(String value) {
      for (RealTimePaymentsTransfersEnum b : RealTimePaymentsTransfersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RealTimePaymentsTransfersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RealTimePaymentsTransfersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RealTimePaymentsTransfersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RealTimePaymentsTransfersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RealTimePaymentsTransfersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFERS = "real_time_payments_transfers";
  @SerializedName(SERIALIZED_NAME_REAL_TIME_PAYMENTS_TRANSFERS)
  private RealTimePaymentsTransfersEnum realTimePaymentsTransfers;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;routing_number&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ROUTING_NUMBER("routing_number");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * This routing number&#39;s support for Wire Transfers.
   */
  @JsonAdapter(WireTransfersEnum.Adapter.class)
  public enum WireTransfersEnum {
    /**
     * The routing number can receive this transfer type.
     */
    SUPPORTED("supported"),
    
    /**
     * The routing number cannot receive this transfer type.
     */
    NOT_SUPPORTED("not_supported");

    private String value;

    WireTransfersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WireTransfersEnum fromValue(String value) {
      for (WireTransfersEnum b : WireTransfersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WireTransfersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WireTransfersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WireTransfersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WireTransfersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WireTransfersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WIRE_TRANSFERS = "wire_transfers";
  @SerializedName(SERIALIZED_NAME_WIRE_TRANSFERS)
  private WireTransfersEnum wireTransfers;

  public RoutingNumber() {
  }

  public RoutingNumber achTransfers(AchTransfersEnum achTransfers) {
    this.achTransfers = achTransfers;
    return this;
  }

  /**
   * This routing number&#39;s support for ACH Transfers.
   * @return achTransfers
   */
  @javax.annotation.Nonnull
  public AchTransfersEnum getAchTransfers() {
    return achTransfers;
  }

  public void setAchTransfers(AchTransfersEnum achTransfers) {
    this.achTransfers = achTransfers;
  }


  public RoutingNumber name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the financial institution belonging to a routing number.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoutingNumber realTimePaymentsTransfers(RealTimePaymentsTransfersEnum realTimePaymentsTransfers) {
    this.realTimePaymentsTransfers = realTimePaymentsTransfers;
    return this;
  }

  /**
   * This routing number&#39;s support for Real Time Payments Transfers.
   * @return realTimePaymentsTransfers
   */
  @javax.annotation.Nonnull
  public RealTimePaymentsTransfersEnum getRealTimePaymentsTransfers() {
    return realTimePaymentsTransfers;
  }

  public void setRealTimePaymentsTransfers(RealTimePaymentsTransfersEnum realTimePaymentsTransfers) {
    this.realTimePaymentsTransfers = realTimePaymentsTransfers;
  }


  public RoutingNumber routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The nine digit routing number identifier.
   * @return routingNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public RoutingNumber type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;routing_number&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RoutingNumber wireTransfers(WireTransfersEnum wireTransfers) {
    this.wireTransfers = wireTransfers;
    return this;
  }

  /**
   * This routing number&#39;s support for Wire Transfers.
   * @return wireTransfers
   */
  @javax.annotation.Nonnull
  public WireTransfersEnum getWireTransfers() {
    return wireTransfers;
  }

  public void setWireTransfers(WireTransfersEnum wireTransfers) {
    this.wireTransfers = wireTransfers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingNumber routingNumber = (RoutingNumber) o;
    return Objects.equals(this.achTransfers, routingNumber.achTransfers) &&
        Objects.equals(this.name, routingNumber.name) &&
        Objects.equals(this.realTimePaymentsTransfers, routingNumber.realTimePaymentsTransfers) &&
        Objects.equals(this.routingNumber, routingNumber.routingNumber) &&
        Objects.equals(this.type, routingNumber.type) &&
        Objects.equals(this.wireTransfers, routingNumber.wireTransfers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achTransfers, name, realTimePaymentsTransfers, routingNumber, type, wireTransfers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingNumber {\n");
    sb.append("    achTransfers: ").append(toIndentedString(achTransfers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    realTimePaymentsTransfers: ").append(toIndentedString(realTimePaymentsTransfers)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wireTransfers: ").append(toIndentedString(wireTransfers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ach_transfers");
    openapiFields.add("name");
    openapiFields.add("real_time_payments_transfers");
    openapiFields.add("routing_number");
    openapiFields.add("type");
    openapiFields.add("wire_transfers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ach_transfers");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("real_time_payments_transfers");
    openapiRequiredFields.add("routing_number");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("wire_transfers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingNumber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingNumber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingNumber is not found in the empty JSON string", RoutingNumber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingNumber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingNumber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutingNumber.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ach_transfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ach_transfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ach_transfers").toString()));
      }
      // validate the required field `ach_transfers`
      AchTransfersEnum.validateJsonElement(jsonObj.get("ach_transfers"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("real_time_payments_transfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `real_time_payments_transfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("real_time_payments_transfers").toString()));
      }
      // validate the required field `real_time_payments_transfers`
      RealTimePaymentsTransfersEnum.validateJsonElement(jsonObj.get("real_time_payments_transfers"));
      if (!jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("wire_transfers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wire_transfers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wire_transfers").toString()));
      }
      // validate the required field `wire_transfers`
      WireTransfersEnum.validateJsonElement(jsonObj.get("wire_transfers"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingNumber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingNumber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingNumber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingNumber.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingNumber>() {
           @Override
           public void write(JsonWriter out, RoutingNumber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingNumber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingNumber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingNumber
   * @throws IOException if the JSON string is invalid with respect to RoutingNumber
   */
  public static RoutingNumber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingNumber.class);
  }

  /**
   * Convert an instance of RoutingNumber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

