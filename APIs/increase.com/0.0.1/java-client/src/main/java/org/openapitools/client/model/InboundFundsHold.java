/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Inbound Funds Hold object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;inbound_funds_hold&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundFundsHold {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_AUTOMATICALLY_RELEASES_AT = "automatically_releases_at";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_RELEASES_AT)
  private OffsetDateTime automaticallyReleasesAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold&#39;s currency.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    /**
     * Canadian Dollar (CAD)
     */
    CAD("CAD"),
    
    /**
     * Swiss Franc (CHF)
     */
    CHF("CHF"),
    
    /**
     * Euro (EUR)
     */
    EUR("EUR"),
    
    /**
     * British Pound (GBP)
     */
    GBP("GBP"),
    
    /**
     * Japanese Yen (JPY)
     */
    JPY("JPY"),
    
    /**
     * US Dollar (USD)
     */
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_HELD_TRANSACTION_ID = "held_transaction_id";
  @SerializedName(SERIALIZED_NAME_HELD_TRANSACTION_ID)
  private String heldTransactionId;

  public static final String SERIALIZED_NAME_PENDING_TRANSACTION_ID = "pending_transaction_id";
  @SerializedName(SERIALIZED_NAME_PENDING_TRANSACTION_ID)
  private String pendingTransactionId;

  public static final String SERIALIZED_NAME_RELEASED_AT = "released_at";
  @SerializedName(SERIALIZED_NAME_RELEASED_AT)
  private OffsetDateTime releasedAt;

  /**
   * The status of the hold.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * Funds are still being held.
     */
    HELD("held"),
    
    /**
     * Funds have been released.
     */
    COMPLETE("complete");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public InboundFundsHold() {
  }

  public InboundFundsHold amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The held amount in the minor unit of the account&#39;s currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public InboundFundsHold automaticallyReleasesAt(OffsetDateTime automaticallyReleasesAt) {
    this.automaticallyReleasesAt = automaticallyReleasesAt;
    return this;
  }

  /**
   * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
   * @return automaticallyReleasesAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAutomaticallyReleasesAt() {
    return automaticallyReleasesAt;
  }

  public void setAutomaticallyReleasesAt(OffsetDateTime automaticallyReleasesAt) {
    this.automaticallyReleasesAt = automaticallyReleasesAt;
  }


  public InboundFundsHold createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InboundFundsHold currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold&#39;s currency.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public InboundFundsHold heldTransactionId(String heldTransactionId) {
    this.heldTransactionId = heldTransactionId;
    return this;
  }

  /**
   * The ID of the Transaction for which funds were held.
   * @return heldTransactionId
   */
  @javax.annotation.Nullable
  public String getHeldTransactionId() {
    return heldTransactionId;
  }

  public void setHeldTransactionId(String heldTransactionId) {
    this.heldTransactionId = heldTransactionId;
  }


  public InboundFundsHold pendingTransactionId(String pendingTransactionId) {
    this.pendingTransactionId = pendingTransactionId;
    return this;
  }

  /**
   * The ID of the Pending Transaction representing the held funds.
   * @return pendingTransactionId
   */
  @javax.annotation.Nullable
  public String getPendingTransactionId() {
    return pendingTransactionId;
  }

  public void setPendingTransactionId(String pendingTransactionId) {
    this.pendingTransactionId = pendingTransactionId;
  }


  public InboundFundsHold releasedAt(OffsetDateTime releasedAt) {
    this.releasedAt = releasedAt;
    return this;
  }

  /**
   * When the hold was released (if it has been released).
   * @return releasedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReleasedAt() {
    return releasedAt;
  }

  public void setReleasedAt(OffsetDateTime releasedAt) {
    this.releasedAt = releasedAt;
  }


  public InboundFundsHold status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the hold.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundFundsHold inboundFundsHold = (InboundFundsHold) o;
    return Objects.equals(this.amount, inboundFundsHold.amount) &&
        Objects.equals(this.automaticallyReleasesAt, inboundFundsHold.automaticallyReleasesAt) &&
        Objects.equals(this.createdAt, inboundFundsHold.createdAt) &&
        Objects.equals(this.currency, inboundFundsHold.currency) &&
        Objects.equals(this.heldTransactionId, inboundFundsHold.heldTransactionId) &&
        Objects.equals(this.pendingTransactionId, inboundFundsHold.pendingTransactionId) &&
        Objects.equals(this.releasedAt, inboundFundsHold.releasedAt) &&
        Objects.equals(this.status, inboundFundsHold.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, automaticallyReleasesAt, createdAt, currency, heldTransactionId, pendingTransactionId, releasedAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundFundsHold {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    automaticallyReleasesAt: ").append(toIndentedString(automaticallyReleasesAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    heldTransactionId: ").append(toIndentedString(heldTransactionId)).append("\n");
    sb.append("    pendingTransactionId: ").append(toIndentedString(pendingTransactionId)).append("\n");
    sb.append("    releasedAt: ").append(toIndentedString(releasedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("automatically_releases_at");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("held_transaction_id");
    openapiFields.add("pending_transaction_id");
    openapiFields.add("released_at");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("automatically_releases_at");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("held_transaction_id");
    openapiRequiredFields.add("pending_transaction_id");
    openapiRequiredFields.add("released_at");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundFundsHold
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundFundsHold.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundFundsHold is not found in the empty JSON string", InboundFundsHold.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundFundsHold.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundFundsHold` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundFundsHold.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if ((jsonObj.get("held_transaction_id") != null && !jsonObj.get("held_transaction_id").isJsonNull()) && !jsonObj.get("held_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `held_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("held_transaction_id").toString()));
      }
      if ((jsonObj.get("pending_transaction_id") != null && !jsonObj.get("pending_transaction_id").isJsonNull()) && !jsonObj.get("pending_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pending_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pending_transaction_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundFundsHold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundFundsHold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundFundsHold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundFundsHold.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundFundsHold>() {
           @Override
           public void write(JsonWriter out, InboundFundsHold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundFundsHold read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundFundsHold given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundFundsHold
   * @throws IOException if the JSON string is invalid with respect to InboundFundsHold
   */
  public static InboundFundsHold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundFundsHold.class);
  }

  /**
   * Convert an instance of InboundFundsHold to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

