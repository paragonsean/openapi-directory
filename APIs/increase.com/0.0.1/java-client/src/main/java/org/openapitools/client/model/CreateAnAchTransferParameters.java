/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnAchTransferParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnAchTransferParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ADDENDUM = "addendum";
  @SerializedName(SERIALIZED_NAME_ADDENDUM)
  private String addendum;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE = "company_descriptive_date";
  @SerializedName(SERIALIZED_NAME_COMPANY_DESCRIPTIVE_DATE)
  private String companyDescriptiveDate;

  public static final String SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA = "company_discretionary_data";
  @SerializedName(SERIALIZED_NAME_COMPANY_DISCRETIONARY_DATA)
  private String companyDiscretionaryData;

  public static final String SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION = "company_entry_description";
  @SerializedName(SERIALIZED_NAME_COMPANY_ENTRY_DESCRIPTION)
  private String companyEntryDescription;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "external_account_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  /**
   * The type of the account to which the transfer will be sent.
   */
  @JsonAdapter(FundingEnum.Adapter.class)
  public enum FundingEnum {
    /**
     * A checking account.
     */
    CHECKING("checking"),
    
    /**
     * A savings account.
     */
    SAVINGS("savings");

    private String value;

    FundingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FundingEnum fromValue(String value) {
      for (FundingEnum b : FundingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FundingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FundingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FundingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FundingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FundingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private FundingEnum funding;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ID = "individual_id";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ID)
  private String individualId;

  public static final String SERIALIZED_NAME_INDIVIDUAL_NAME = "individual_name";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_NAME)
  private String individualName;

  public static final String SERIALIZED_NAME_REQUIRE_APPROVAL = "require_approval";
  @SerializedName(SERIALIZED_NAME_REQUIRE_APPROVAL)
  private Boolean requireApproval;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  /**
   * The Standard Entry Class (SEC) code to use for the transfer.
   */
  @JsonAdapter(StandardEntryClassCodeEnum.Adapter.class)
  public enum StandardEntryClassCodeEnum {
    /**
     * Corporate Credit and Debit (CCD).
     */
    CORPORATE_CREDIT_OR_DEBIT("corporate_credit_or_debit"),
    
    /**
     * Prearranged Payments and Deposits (PPD).
     */
    PREARRANGED_PAYMENTS_AND_DEPOSIT("prearranged_payments_and_deposit"),
    
    /**
     * Internet Initiated (WEB).
     */
    INTERNET_INITIATED("internet_initiated");

    private String value;

    StandardEntryClassCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardEntryClassCodeEnum fromValue(String value) {
      for (StandardEntryClassCodeEnum b : StandardEntryClassCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StandardEntryClassCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardEntryClassCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardEntryClassCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StandardEntryClassCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StandardEntryClassCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE = "standard_entry_class_code";
  @SerializedName(SERIALIZED_NAME_STANDARD_ENTRY_CLASS_CODE)
  private StandardEntryClassCodeEnum standardEntryClassCode;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private String statementDescriptor;

  public CreateAnAchTransferParameters() {
  }

  public CreateAnAchTransferParameters accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The Increase identifier for the account that will send the transfer.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateAnAchTransferParameters accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * The account number for the destination account.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateAnAchTransferParameters addendum(String addendum) {
    this.addendum = addendum;
    return this;
  }

  /**
   * Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.
   * @return addendum
   */
  @javax.annotation.Nullable
  public String getAddendum() {
    return addendum;
  }

  public void setAddendum(String addendum) {
    this.addendum = addendum;
  }


  public CreateAnAchTransferParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CreateAnAchTransferParameters companyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
    return this;
  }

  /**
   * The description of the date of the transfer, usually in the format &#x60;YYMMDD&#x60;. This is included in the transfer data sent to the receiving bank.
   * @return companyDescriptiveDate
   */
  @javax.annotation.Nullable
  public String getCompanyDescriptiveDate() {
    return companyDescriptiveDate;
  }

  public void setCompanyDescriptiveDate(String companyDescriptiveDate) {
    this.companyDescriptiveDate = companyDescriptiveDate;
  }


  public CreateAnAchTransferParameters companyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
    return this;
  }

  /**
   * The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.
   * @return companyDiscretionaryData
   */
  @javax.annotation.Nullable
  public String getCompanyDiscretionaryData() {
    return companyDiscretionaryData;
  }

  public void setCompanyDiscretionaryData(String companyDiscretionaryData) {
    this.companyDiscretionaryData = companyDiscretionaryData;
  }


  public CreateAnAchTransferParameters companyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
    return this;
  }

  /**
   * A description of the transfer. This is included in the transfer data sent to the receiving bank.
   * @return companyEntryDescription
   */
  @javax.annotation.Nullable
  public String getCompanyEntryDescription() {
    return companyEntryDescription;
  }

  public void setCompanyEntryDescription(String companyEntryDescription) {
    this.companyEntryDescription = companyEntryDescription;
  }


  public CreateAnAchTransferParameters companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CreateAnAchTransferParameters effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public CreateAnAchTransferParameters externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * The ID of an External Account to initiate a transfer to. If this parameter is provided, &#x60;account_number&#x60;, &#x60;routing_number&#x60;, and &#x60;funding&#x60; must be absent.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public CreateAnAchTransferParameters funding(FundingEnum funding) {
    this.funding = funding;
    return this;
  }

  /**
   * The type of the account to which the transfer will be sent.
   * @return funding
   */
  @javax.annotation.Nullable
  public FundingEnum getFunding() {
    return funding;
  }

  public void setFunding(FundingEnum funding) {
    this.funding = funding;
  }


  public CreateAnAchTransferParameters individualId(String individualId) {
    this.individualId = individualId;
    return this;
  }

  /**
   * Your identifer for the transfer recipient.
   * @return individualId
   */
  @javax.annotation.Nullable
  public String getIndividualId() {
    return individualId;
  }

  public void setIndividualId(String individualId) {
    this.individualId = individualId;
  }


  public CreateAnAchTransferParameters individualName(String individualName) {
    this.individualName = individualName;
    return this;
  }

  /**
   * The name of the transfer recipient. This value is informational and not verified by the recipient&#39;s bank.
   * @return individualName
   */
  @javax.annotation.Nullable
  public String getIndividualName() {
    return individualName;
  }

  public void setIndividualName(String individualName) {
    this.individualName = individualName;
  }


  public CreateAnAchTransferParameters requireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
    return this;
  }

  /**
   * Whether the transfer requires explicit approval via the dashboard or API.
   * @return requireApproval
   */
  @javax.annotation.Nullable
  public Boolean getRequireApproval() {
    return requireApproval;
  }

  public void setRequireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
  }


  public CreateAnAchTransferParameters routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * The American Bankers&#39; Association (ABA) Routing Transit Number (RTN) for the destination account.
   * @return routingNumber
   */
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public CreateAnAchTransferParameters standardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
    return this;
  }

  /**
   * The Standard Entry Class (SEC) code to use for the transfer.
   * @return standardEntryClassCode
   */
  @javax.annotation.Nullable
  public StandardEntryClassCodeEnum getStandardEntryClassCode() {
    return standardEntryClassCode;
  }

  public void setStandardEntryClassCode(StandardEntryClassCodeEnum standardEntryClassCode) {
    this.standardEntryClassCode = standardEntryClassCode;
  }


  public CreateAnAchTransferParameters statementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
    return this;
  }

  /**
   * A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If &#x60;individual_name&#x60; and &#x60;company_name&#x60; are not explicitly set by this API, the &#x60;statement_descriptor&#x60; will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass &#x60;individual_name&#x60; and &#x60;company_name&#x60; instead of relying on this fallback.
   * @return statementDescriptor
   */
  @javax.annotation.Nonnull
  public String getStatementDescriptor() {
    return statementDescriptor;
  }

  public void setStatementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnAchTransferParameters createAnAchTransferParameters = (CreateAnAchTransferParameters) o;
    return Objects.equals(this.accountId, createAnAchTransferParameters.accountId) &&
        Objects.equals(this.accountNumber, createAnAchTransferParameters.accountNumber) &&
        Objects.equals(this.addendum, createAnAchTransferParameters.addendum) &&
        Objects.equals(this.amount, createAnAchTransferParameters.amount) &&
        Objects.equals(this.companyDescriptiveDate, createAnAchTransferParameters.companyDescriptiveDate) &&
        Objects.equals(this.companyDiscretionaryData, createAnAchTransferParameters.companyDiscretionaryData) &&
        Objects.equals(this.companyEntryDescription, createAnAchTransferParameters.companyEntryDescription) &&
        Objects.equals(this.companyName, createAnAchTransferParameters.companyName) &&
        Objects.equals(this.effectiveDate, createAnAchTransferParameters.effectiveDate) &&
        Objects.equals(this.externalAccountId, createAnAchTransferParameters.externalAccountId) &&
        Objects.equals(this.funding, createAnAchTransferParameters.funding) &&
        Objects.equals(this.individualId, createAnAchTransferParameters.individualId) &&
        Objects.equals(this.individualName, createAnAchTransferParameters.individualName) &&
        Objects.equals(this.requireApproval, createAnAchTransferParameters.requireApproval) &&
        Objects.equals(this.routingNumber, createAnAchTransferParameters.routingNumber) &&
        Objects.equals(this.standardEntryClassCode, createAnAchTransferParameters.standardEntryClassCode) &&
        Objects.equals(this.statementDescriptor, createAnAchTransferParameters.statementDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountNumber, addendum, amount, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, effectiveDate, externalAccountId, funding, individualId, individualName, requireApproval, routingNumber, standardEntryClassCode, statementDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnAchTransferParameters {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    addendum: ").append(toIndentedString(addendum)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    companyDescriptiveDate: ").append(toIndentedString(companyDescriptiveDate)).append("\n");
    sb.append("    companyDiscretionaryData: ").append(toIndentedString(companyDiscretionaryData)).append("\n");
    sb.append("    companyEntryDescription: ").append(toIndentedString(companyEntryDescription)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    individualId: ").append(toIndentedString(individualId)).append("\n");
    sb.append("    individualName: ").append(toIndentedString(individualName)).append("\n");
    sb.append("    requireApproval: ").append(toIndentedString(requireApproval)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    standardEntryClassCode: ").append(toIndentedString(standardEntryClassCode)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("account_number");
    openapiFields.add("addendum");
    openapiFields.add("amount");
    openapiFields.add("company_descriptive_date");
    openapiFields.add("company_discretionary_data");
    openapiFields.add("company_entry_description");
    openapiFields.add("company_name");
    openapiFields.add("effective_date");
    openapiFields.add("external_account_id");
    openapiFields.add("funding");
    openapiFields.add("individual_id");
    openapiFields.add("individual_name");
    openapiFields.add("require_approval");
    openapiFields.add("routing_number");
    openapiFields.add("standard_entry_class_code");
    openapiFields.add("statement_descriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("statement_descriptor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnAchTransferParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnAchTransferParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnAchTransferParameters is not found in the empty JSON string", CreateAnAchTransferParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnAchTransferParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnAchTransferParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnAchTransferParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("addendum") != null && !jsonObj.get("addendum").isJsonNull()) && !jsonObj.get("addendum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addendum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addendum").toString()));
      }
      if ((jsonObj.get("company_descriptive_date") != null && !jsonObj.get("company_descriptive_date").isJsonNull()) && !jsonObj.get("company_descriptive_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_descriptive_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_descriptive_date").toString()));
      }
      if ((jsonObj.get("company_discretionary_data") != null && !jsonObj.get("company_discretionary_data").isJsonNull()) && !jsonObj.get("company_discretionary_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_discretionary_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_discretionary_data").toString()));
      }
      if ((jsonObj.get("company_entry_description") != null && !jsonObj.get("company_entry_description").isJsonNull()) && !jsonObj.get("company_entry_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_entry_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_entry_description").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("external_account_id") != null && !jsonObj.get("external_account_id").isJsonNull()) && !jsonObj.get("external_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_id").toString()));
      }
      if ((jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) && !jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // validate the optional field `funding`
      if (jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) {
        FundingEnum.validateJsonElement(jsonObj.get("funding"));
      }
      if ((jsonObj.get("individual_id") != null && !jsonObj.get("individual_id").isJsonNull()) && !jsonObj.get("individual_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_id").toString()));
      }
      if ((jsonObj.get("individual_name") != null && !jsonObj.get("individual_name").isJsonNull()) && !jsonObj.get("individual_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individual_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individual_name").toString()));
      }
      if ((jsonObj.get("routing_number") != null && !jsonObj.get("routing_number").isJsonNull()) && !jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if ((jsonObj.get("standard_entry_class_code") != null && !jsonObj.get("standard_entry_class_code").isJsonNull()) && !jsonObj.get("standard_entry_class_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_entry_class_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_entry_class_code").toString()));
      }
      // validate the optional field `standard_entry_class_code`
      if (jsonObj.get("standard_entry_class_code") != null && !jsonObj.get("standard_entry_class_code").isJsonNull()) {
        StandardEntryClassCodeEnum.validateJsonElement(jsonObj.get("standard_entry_class_code"));
      }
      if (!jsonObj.get("statement_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_descriptor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnAchTransferParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnAchTransferParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnAchTransferParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnAchTransferParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnAchTransferParameters>() {
           @Override
           public void write(JsonWriter out, CreateAnAchTransferParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnAchTransferParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnAchTransferParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnAchTransferParameters
   * @throws IOException if the JSON string is invalid with respect to CreateAnAchTransferParameters
   */
  public static CreateAnAchTransferParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnAchTransferParameters.class);
  }

  /**
   * Convert an instance of CreateAnAchTransferParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

