/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Corporation;
import org.openapitools.client.model.Individual2;
import org.openapitools.client.model.Joint;
import org.openapitools.client.model.SupplementalDocumentsElement;
import org.openapitools.client.model.Trust;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Entity {
  public static final String SERIALIZED_NAME_CORPORATION = "corporation";
  @SerializedName(SERIALIZED_NAME_CORPORATION)
  private Corporation corporation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOINT = "joint";
  @SerializedName(SERIALIZED_NAME_JOINT)
  private Joint joint;

  public static final String SERIALIZED_NAME_NATURAL_PERSON = "natural_person";
  @SerializedName(SERIALIZED_NAME_NATURAL_PERSON)
  private Individual2 naturalPerson;

  /**
   * The relationship between your group and the entity.
   */
  @JsonAdapter(RelationshipEnum.Adapter.class)
  public enum RelationshipEnum {
    /**
     * The entity is controlled by your group.
     */
    AFFILIATED("affiliated"),
    
    /**
     * The entity is for informational purposes only.
     */
    INFORMATIONAL("informational"),
    
    /**
     * The entity is not controlled by your group, but can still directly open accounts.
     */
    UNAFFILIATED("unaffiliated");

    private String value;

    RelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipEnum fromValue(String value) {
      for (RelationshipEnum b : RelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private RelationshipEnum relationship;

  /**
   * The entity&#39;s legal structure.
   */
  @JsonAdapter(StructureEnum.Adapter.class)
  public enum StructureEnum {
    /**
     * A corporation.
     */
    CORPORATION("corporation"),
    
    /**
     * An individual person.
     */
    NATURAL_PERSON("natural_person"),
    
    /**
     * Multiple individual people.
     */
    JOINT("joint"),
    
    /**
     * A trust.
     */
    TRUST("trust");

    private String value;

    StructureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StructureEnum fromValue(String value) {
      for (StructureEnum b : StructureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StructureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StructureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StructureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StructureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StructureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STRUCTURE = "structure";
  @SerializedName(SERIALIZED_NAME_STRUCTURE)
  private StructureEnum structure;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_DOCUMENTS = "supplemental_documents";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_DOCUMENTS)
  private List<SupplementalDocumentsElement> supplementalDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRUST = "trust";
  @SerializedName(SERIALIZED_NAME_TRUST)
  private Trust trust;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;entity&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ENTITY("entity");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Entity() {
  }

  public Entity corporation(Corporation corporation) {
    this.corporation = corporation;
    return this;
  }

  /**
   * Get corporation
   * @return corporation
   */
  @javax.annotation.Nullable
  public Corporation getCorporation() {
    return corporation;
  }

  public void setCorporation(Corporation corporation) {
    this.corporation = corporation;
  }


  public Entity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The entity&#39;s description for display purposes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Entity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The entity&#39;s identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Entity joint(Joint joint) {
    this.joint = joint;
    return this;
  }

  /**
   * Get joint
   * @return joint
   */
  @javax.annotation.Nullable
  public Joint getJoint() {
    return joint;
  }

  public void setJoint(Joint joint) {
    this.joint = joint;
  }


  public Entity naturalPerson(Individual2 naturalPerson) {
    this.naturalPerson = naturalPerson;
    return this;
  }

  /**
   * Get naturalPerson
   * @return naturalPerson
   */
  @javax.annotation.Nullable
  public Individual2 getNaturalPerson() {
    return naturalPerson;
  }

  public void setNaturalPerson(Individual2 naturalPerson) {
    this.naturalPerson = naturalPerson;
  }


  public Entity relationship(RelationshipEnum relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * The relationship between your group and the entity.
   * @return relationship
   */
  @javax.annotation.Nonnull
  public RelationshipEnum getRelationship() {
    return relationship;
  }

  public void setRelationship(RelationshipEnum relationship) {
    this.relationship = relationship;
  }


  public Entity structure(StructureEnum structure) {
    this.structure = structure;
    return this;
  }

  /**
   * The entity&#39;s legal structure.
   * @return structure
   */
  @javax.annotation.Nonnull
  public StructureEnum getStructure() {
    return structure;
  }

  public void setStructure(StructureEnum structure) {
    this.structure = structure;
  }


  public Entity supplementalDocuments(List<SupplementalDocumentsElement> supplementalDocuments) {
    this.supplementalDocuments = supplementalDocuments;
    return this;
  }

  public Entity addSupplementalDocumentsItem(SupplementalDocumentsElement supplementalDocumentsItem) {
    if (this.supplementalDocuments == null) {
      this.supplementalDocuments = new ArrayList<>();
    }
    this.supplementalDocuments.add(supplementalDocumentsItem);
    return this;
  }

  /**
   * Additional documentation associated with the entity.
   * @return supplementalDocuments
   */
  @javax.annotation.Nonnull
  public List<SupplementalDocumentsElement> getSupplementalDocuments() {
    return supplementalDocuments;
  }

  public void setSupplementalDocuments(List<SupplementalDocumentsElement> supplementalDocuments) {
    this.supplementalDocuments = supplementalDocuments;
  }


  public Entity trust(Trust trust) {
    this.trust = trust;
    return this;
  }

  /**
   * Get trust
   * @return trust
   */
  @javax.annotation.Nullable
  public Trust getTrust() {
    return trust;
  }

  public void setTrust(Trust trust) {
    this.trust = trust;
  }


  public Entity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;entity&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entity entity = (Entity) o;
    return Objects.equals(this.corporation, entity.corporation) &&
        Objects.equals(this.description, entity.description) &&
        Objects.equals(this.id, entity.id) &&
        Objects.equals(this.joint, entity.joint) &&
        Objects.equals(this.naturalPerson, entity.naturalPerson) &&
        Objects.equals(this.relationship, entity.relationship) &&
        Objects.equals(this.structure, entity.structure) &&
        Objects.equals(this.supplementalDocuments, entity.supplementalDocuments) &&
        Objects.equals(this.trust, entity.trust) &&
        Objects.equals(this.type, entity.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corporation, description, id, joint, naturalPerson, relationship, structure, supplementalDocuments, trust, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entity {\n");
    sb.append("    corporation: ").append(toIndentedString(corporation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    joint: ").append(toIndentedString(joint)).append("\n");
    sb.append("    naturalPerson: ").append(toIndentedString(naturalPerson)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
    sb.append("    supplementalDocuments: ").append(toIndentedString(supplementalDocuments)).append("\n");
    sb.append("    trust: ").append(toIndentedString(trust)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corporation");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("joint");
    openapiFields.add("natural_person");
    openapiFields.add("relationship");
    openapiFields.add("structure");
    openapiFields.add("supplemental_documents");
    openapiFields.add("trust");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("corporation");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("joint");
    openapiRequiredFields.add("natural_person");
    openapiRequiredFields.add("relationship");
    openapiRequiredFields.add("structure");
    openapiRequiredFields.add("supplemental_documents");
    openapiRequiredFields.add("trust");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Entity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Entity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entity is not found in the empty JSON string", Entity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Entity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Entity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Entity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `corporation`
      Corporation.validateJsonElement(jsonObj.get("corporation"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `joint`
      Joint.validateJsonElement(jsonObj.get("joint"));
      // validate the required field `natural_person`
      Individual2.validateJsonElement(jsonObj.get("natural_person"));
      if (!jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      // validate the required field `relationship`
      RelationshipEnum.validateJsonElement(jsonObj.get("relationship"));
      if (!jsonObj.get("structure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `structure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("structure").toString()));
      }
      // validate the required field `structure`
      StructureEnum.validateJsonElement(jsonObj.get("structure"));
      // ensure the json data is an array
      if (!jsonObj.get("supplemental_documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplemental_documents` to be an array in the JSON string but got `%s`", jsonObj.get("supplemental_documents").toString()));
      }

      JsonArray jsonArraysupplementalDocuments = jsonObj.getAsJsonArray("supplemental_documents");
      // validate the required field `supplemental_documents` (array)
      for (int i = 0; i < jsonArraysupplementalDocuments.size(); i++) {
        SupplementalDocumentsElement.validateJsonElement(jsonArraysupplementalDocuments.get(i));
      };
      // validate the required field `trust`
      Trust.validateJsonElement(jsonObj.get("trust"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entity.class));

       return (TypeAdapter<T>) new TypeAdapter<Entity>() {
           @Override
           public void write(JsonWriter out, Entity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Entity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Entity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Entity
   * @throws IOException if the JSON string is invalid with respect to Entity
   */
  public static Entity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entity.class);
  }

  /**
   * Convert an instance of Entity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

