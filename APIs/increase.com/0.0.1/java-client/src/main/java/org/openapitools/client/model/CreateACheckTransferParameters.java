/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateACheckTransferParametersReturnAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateACheckTransferParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateACheckTransferParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "address_line2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_REQUIRE_APPROVAL = "require_approval";
  @SerializedName(SERIALIZED_NAME_REQUIRE_APPROVAL)
  private Boolean requireApproval;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "return_address";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private CreateACheckTransferParametersReturnAddress returnAddress;

  public CreateACheckTransferParameters() {
  }

  public CreateACheckTransferParameters accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The identifier for the account that will send the transfer.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateACheckTransferParameters addressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  /**
   * The city of the check&#39;s destination.
   * @return addressCity
   */
  @javax.annotation.Nonnull
  public String getAddressCity() {
    return addressCity;
  }

  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public CreateACheckTransferParameters addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * The street address of the check&#39;s destination.
   * @return addressLine1
   */
  @javax.annotation.Nonnull
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public CreateACheckTransferParameters addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * The second line of the address of the check&#39;s destination.
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public CreateACheckTransferParameters addressState(String addressState) {
    this.addressState = addressState;
    return this;
  }

  /**
   * The state of the check&#39;s destination.
   * @return addressState
   */
  @javax.annotation.Nonnull
  public String getAddressState() {
    return addressState;
  }

  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public CreateACheckTransferParameters addressZip(String addressZip) {
    this.addressZip = addressZip;
    return this;
  }

  /**
   * The postal code of the check&#39;s destination.
   * @return addressZip
   */
  @javax.annotation.Nonnull
  public String getAddressZip() {
    return addressZip;
  }

  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }


  public CreateACheckTransferParameters amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The transfer amount in cents.
   * minimum: 1
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public CreateACheckTransferParameters message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The descriptor that will be printed on the memo field on the check.
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CreateACheckTransferParameters note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The descriptor that will be printed on the letter included with the check.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CreateACheckTransferParameters recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * The name that will be printed on the check.
   * @return recipientName
   */
  @javax.annotation.Nonnull
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public CreateACheckTransferParameters requireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
    return this;
  }

  /**
   * Whether the transfer requires explicit approval via the dashboard or API.
   * @return requireApproval
   */
  @javax.annotation.Nullable
  public Boolean getRequireApproval() {
    return requireApproval;
  }

  public void setRequireApproval(Boolean requireApproval) {
    this.requireApproval = requireApproval;
  }


  public CreateACheckTransferParameters returnAddress(CreateACheckTransferParametersReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public CreateACheckTransferParametersReturnAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(CreateACheckTransferParametersReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateACheckTransferParameters createACheckTransferParameters = (CreateACheckTransferParameters) o;
    return Objects.equals(this.accountId, createACheckTransferParameters.accountId) &&
        Objects.equals(this.addressCity, createACheckTransferParameters.addressCity) &&
        Objects.equals(this.addressLine1, createACheckTransferParameters.addressLine1) &&
        Objects.equals(this.addressLine2, createACheckTransferParameters.addressLine2) &&
        Objects.equals(this.addressState, createACheckTransferParameters.addressState) &&
        Objects.equals(this.addressZip, createACheckTransferParameters.addressZip) &&
        Objects.equals(this.amount, createACheckTransferParameters.amount) &&
        Objects.equals(this.message, createACheckTransferParameters.message) &&
        Objects.equals(this.note, createACheckTransferParameters.note) &&
        Objects.equals(this.recipientName, createACheckTransferParameters.recipientName) &&
        Objects.equals(this.requireApproval, createACheckTransferParameters.requireApproval) &&
        Objects.equals(this.returnAddress, createACheckTransferParameters.returnAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, addressCity, addressLine1, addressLine2, addressState, addressZip, amount, message, note, recipientName, requireApproval, returnAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateACheckTransferParameters {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    requireApproval: ").append(toIndentedString(requireApproval)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("address_city");
    openapiFields.add("address_line1");
    openapiFields.add("address_line2");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");
    openapiFields.add("amount");
    openapiFields.add("message");
    openapiFields.add("note");
    openapiFields.add("recipient_name");
    openapiFields.add("require_approval");
    openapiFields.add("return_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("address_city");
    openapiRequiredFields.add("address_line1");
    openapiRequiredFields.add("address_state");
    openapiRequiredFields.add("address_zip");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("recipient_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateACheckTransferParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateACheckTransferParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateACheckTransferParameters is not found in the empty JSON string", CreateACheckTransferParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateACheckTransferParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateACheckTransferParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateACheckTransferParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if (!jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_line2") != null && !jsonObj.get("address_line2").isJsonNull()) && !jsonObj.get("address_line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line2").toString()));
      }
      if (!jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if (!jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      // validate the optional field `return_address`
      if (jsonObj.get("return_address") != null && !jsonObj.get("return_address").isJsonNull()) {
        CreateACheckTransferParametersReturnAddress.validateJsonElement(jsonObj.get("return_address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateACheckTransferParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateACheckTransferParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateACheckTransferParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateACheckTransferParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateACheckTransferParameters>() {
           @Override
           public void write(JsonWriter out, CreateACheckTransferParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateACheckTransferParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateACheckTransferParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateACheckTransferParameters
   * @throws IOException if the JSON string is invalid with respect to CreateACheckTransferParameters
   */
  public static CreateACheckTransferParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateACheckTransferParameters.class);
  }

  /**
   * Convert an instance of CreateACheckTransferParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

