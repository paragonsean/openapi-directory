/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;inbound_international_ach_transfer&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundInternationalACHTransfer {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_DESTINATION_COUNTRY_CODE = "destination_country_code";
  @SerializedName(SERIALIZED_NAME_DESTINATION_COUNTRY_CODE)
  private String destinationCountryCode;

  public static final String SERIALIZED_NAME_DESTINATION_CURRENCY_CODE = "destination_currency_code";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CURRENCY_CODE)
  private String destinationCurrencyCode;

  public static final String SERIALIZED_NAME_FOREIGN_EXCHANGE_INDICATOR = "foreign_exchange_indicator";
  @SerializedName(SERIALIZED_NAME_FOREIGN_EXCHANGE_INDICATOR)
  private String foreignExchangeIndicator;

  public static final String SERIALIZED_NAME_FOREIGN_EXCHANGE_REFERENCE = "foreign_exchange_reference";
  @SerializedName(SERIALIZED_NAME_FOREIGN_EXCHANGE_REFERENCE)
  private String foreignExchangeReference;

  public static final String SERIALIZED_NAME_FOREIGN_EXCHANGE_REFERENCE_INDICATOR = "foreign_exchange_reference_indicator";
  @SerializedName(SERIALIZED_NAME_FOREIGN_EXCHANGE_REFERENCE_INDICATOR)
  private String foreignExchangeReferenceIndicator;

  public static final String SERIALIZED_NAME_FOREIGN_PAYMENT_AMOUNT = "foreign_payment_amount";
  @SerializedName(SERIALIZED_NAME_FOREIGN_PAYMENT_AMOUNT)
  private Integer foreignPaymentAmount;

  public static final String SERIALIZED_NAME_FOREIGN_TRACE_NUMBER = "foreign_trace_number";
  @SerializedName(SERIALIZED_NAME_FOREIGN_TRACE_NUMBER)
  private String foreignTraceNumber;

  public static final String SERIALIZED_NAME_INTERNATIONAL_TRANSACTION_TYPE_CODE = "international_transaction_type_code";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_TRANSACTION_TYPE_CODE)
  private String internationalTransactionTypeCode;

  public static final String SERIALIZED_NAME_ORIGINATING_CURRENCY_CODE = "originating_currency_code";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_CURRENCY_CODE)
  private String originatingCurrencyCode;

  public static final String SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_BRANCH_COUNTRY = "originating_depository_financial_institution_branch_country";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_BRANCH_COUNTRY)
  private String originatingDepositoryFinancialInstitutionBranchCountry;

  public static final String SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_ID = "originating_depository_financial_institution_id";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_ID)
  private String originatingDepositoryFinancialInstitutionId;

  public static final String SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_ID_QUALIFIER = "originating_depository_financial_institution_id_qualifier";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_ID_QUALIFIER)
  private String originatingDepositoryFinancialInstitutionIdQualifier;

  public static final String SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_NAME = "originating_depository_financial_institution_name";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_DEPOSITORY_FINANCIAL_INSTITUTION_NAME)
  private String originatingDepositoryFinancialInstitutionName;

  public static final String SERIALIZED_NAME_ORIGINATOR_CITY = "originator_city";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_CITY)
  private String originatorCity;

  public static final String SERIALIZED_NAME_ORIGINATOR_COMPANY_ENTRY_DESCRIPTION = "originator_company_entry_description";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_COMPANY_ENTRY_DESCRIPTION)
  private String originatorCompanyEntryDescription;

  public static final String SERIALIZED_NAME_ORIGINATOR_COUNTRY = "originator_country";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_COUNTRY)
  private String originatorCountry;

  public static final String SERIALIZED_NAME_ORIGINATOR_IDENTIFICATION = "originator_identification";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_IDENTIFICATION)
  private String originatorIdentification;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originator_name";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_POSTAL_CODE = "originator_postal_code";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_POSTAL_CODE)
  private String originatorPostalCode;

  public static final String SERIALIZED_NAME_ORIGINATOR_STATE_OR_PROVINCE = "originator_state_or_province";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_STATE_OR_PROVINCE)
  private String originatorStateOrProvince;

  public static final String SERIALIZED_NAME_ORIGINATOR_STREET_ADDRESS = "originator_street_address";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_STREET_ADDRESS)
  private String originatorStreetAddress;

  public static final String SERIALIZED_NAME_PAYMENT_RELATED_INFORMATION = "payment_related_information";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RELATED_INFORMATION)
  private String paymentRelatedInformation;

  public static final String SERIALIZED_NAME_PAYMENT_RELATED_INFORMATION2 = "payment_related_information2";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RELATED_INFORMATION2)
  private String paymentRelatedInformation2;

  public static final String SERIALIZED_NAME_RECEIVER_CITY = "receiver_city";
  @SerializedName(SERIALIZED_NAME_RECEIVER_CITY)
  private String receiverCity;

  public static final String SERIALIZED_NAME_RECEIVER_COUNTRY = "receiver_country";
  @SerializedName(SERIALIZED_NAME_RECEIVER_COUNTRY)
  private String receiverCountry;

  public static final String SERIALIZED_NAME_RECEIVER_IDENTIFICATION_NUMBER = "receiver_identification_number";
  @SerializedName(SERIALIZED_NAME_RECEIVER_IDENTIFICATION_NUMBER)
  private String receiverIdentificationNumber;

  public static final String SERIALIZED_NAME_RECEIVER_POSTAL_CODE = "receiver_postal_code";
  @SerializedName(SERIALIZED_NAME_RECEIVER_POSTAL_CODE)
  private String receiverPostalCode;

  public static final String SERIALIZED_NAME_RECEIVER_STATE_OR_PROVINCE = "receiver_state_or_province";
  @SerializedName(SERIALIZED_NAME_RECEIVER_STATE_OR_PROVINCE)
  private String receiverStateOrProvince;

  public static final String SERIALIZED_NAME_RECEIVER_STREET_ADDRESS = "receiver_street_address";
  @SerializedName(SERIALIZED_NAME_RECEIVER_STREET_ADDRESS)
  private String receiverStreetAddress;

  public static final String SERIALIZED_NAME_RECEIVING_COMPANY_OR_INDIVIDUAL_NAME = "receiving_company_or_individual_name";
  @SerializedName(SERIALIZED_NAME_RECEIVING_COMPANY_OR_INDIVIDUAL_NAME)
  private String receivingCompanyOrIndividualName;

  public static final String SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_COUNTRY = "receiving_depository_financial_institution_country";
  @SerializedName(SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_COUNTRY)
  private String receivingDepositoryFinancialInstitutionCountry;

  public static final String SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_ID = "receiving_depository_financial_institution_id";
  @SerializedName(SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_ID)
  private String receivingDepositoryFinancialInstitutionId;

  public static final String SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_ID_QUALIFIER = "receiving_depository_financial_institution_id_qualifier";
  @SerializedName(SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_ID_QUALIFIER)
  private String receivingDepositoryFinancialInstitutionIdQualifier;

  public static final String SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_NAME = "receiving_depository_financial_institution_name";
  @SerializedName(SERIALIZED_NAME_RECEIVING_DEPOSITORY_FINANCIAL_INSTITUTION_NAME)
  private String receivingDepositoryFinancialInstitutionName;

  public static final String SERIALIZED_NAME_TRACE_NUMBER = "trace_number";
  @SerializedName(SERIALIZED_NAME_TRACE_NUMBER)
  private String traceNumber;

  public InboundInternationalACHTransfer() {
  }

  public InboundInternationalACHTransfer amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   * @return amount
   */
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public InboundInternationalACHTransfer destinationCountryCode(String destinationCountryCode) {
    this.destinationCountryCode = destinationCountryCode;
    return this;
  }

  /**
   * 
   * @return destinationCountryCode
   */
  @javax.annotation.Nonnull
  public String getDestinationCountryCode() {
    return destinationCountryCode;
  }

  public void setDestinationCountryCode(String destinationCountryCode) {
    this.destinationCountryCode = destinationCountryCode;
  }


  public InboundInternationalACHTransfer destinationCurrencyCode(String destinationCurrencyCode) {
    this.destinationCurrencyCode = destinationCurrencyCode;
    return this;
  }

  /**
   * 
   * @return destinationCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getDestinationCurrencyCode() {
    return destinationCurrencyCode;
  }

  public void setDestinationCurrencyCode(String destinationCurrencyCode) {
    this.destinationCurrencyCode = destinationCurrencyCode;
  }


  public InboundInternationalACHTransfer foreignExchangeIndicator(String foreignExchangeIndicator) {
    this.foreignExchangeIndicator = foreignExchangeIndicator;
    return this;
  }

  /**
   * 
   * @return foreignExchangeIndicator
   */
  @javax.annotation.Nonnull
  public String getForeignExchangeIndicator() {
    return foreignExchangeIndicator;
  }

  public void setForeignExchangeIndicator(String foreignExchangeIndicator) {
    this.foreignExchangeIndicator = foreignExchangeIndicator;
  }


  public InboundInternationalACHTransfer foreignExchangeReference(String foreignExchangeReference) {
    this.foreignExchangeReference = foreignExchangeReference;
    return this;
  }

  /**
   * 
   * @return foreignExchangeReference
   */
  @javax.annotation.Nullable
  public String getForeignExchangeReference() {
    return foreignExchangeReference;
  }

  public void setForeignExchangeReference(String foreignExchangeReference) {
    this.foreignExchangeReference = foreignExchangeReference;
  }


  public InboundInternationalACHTransfer foreignExchangeReferenceIndicator(String foreignExchangeReferenceIndicator) {
    this.foreignExchangeReferenceIndicator = foreignExchangeReferenceIndicator;
    return this;
  }

  /**
   * 
   * @return foreignExchangeReferenceIndicator
   */
  @javax.annotation.Nonnull
  public String getForeignExchangeReferenceIndicator() {
    return foreignExchangeReferenceIndicator;
  }

  public void setForeignExchangeReferenceIndicator(String foreignExchangeReferenceIndicator) {
    this.foreignExchangeReferenceIndicator = foreignExchangeReferenceIndicator;
  }


  public InboundInternationalACHTransfer foreignPaymentAmount(Integer foreignPaymentAmount) {
    this.foreignPaymentAmount = foreignPaymentAmount;
    return this;
  }

  /**
   * 
   * @return foreignPaymentAmount
   */
  @javax.annotation.Nonnull
  public Integer getForeignPaymentAmount() {
    return foreignPaymentAmount;
  }

  public void setForeignPaymentAmount(Integer foreignPaymentAmount) {
    this.foreignPaymentAmount = foreignPaymentAmount;
  }


  public InboundInternationalACHTransfer foreignTraceNumber(String foreignTraceNumber) {
    this.foreignTraceNumber = foreignTraceNumber;
    return this;
  }

  /**
   * 
   * @return foreignTraceNumber
   */
  @javax.annotation.Nullable
  public String getForeignTraceNumber() {
    return foreignTraceNumber;
  }

  public void setForeignTraceNumber(String foreignTraceNumber) {
    this.foreignTraceNumber = foreignTraceNumber;
  }


  public InboundInternationalACHTransfer internationalTransactionTypeCode(String internationalTransactionTypeCode) {
    this.internationalTransactionTypeCode = internationalTransactionTypeCode;
    return this;
  }

  /**
   * 
   * @return internationalTransactionTypeCode
   */
  @javax.annotation.Nonnull
  public String getInternationalTransactionTypeCode() {
    return internationalTransactionTypeCode;
  }

  public void setInternationalTransactionTypeCode(String internationalTransactionTypeCode) {
    this.internationalTransactionTypeCode = internationalTransactionTypeCode;
  }


  public InboundInternationalACHTransfer originatingCurrencyCode(String originatingCurrencyCode) {
    this.originatingCurrencyCode = originatingCurrencyCode;
    return this;
  }

  /**
   * 
   * @return originatingCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getOriginatingCurrencyCode() {
    return originatingCurrencyCode;
  }

  public void setOriginatingCurrencyCode(String originatingCurrencyCode) {
    this.originatingCurrencyCode = originatingCurrencyCode;
  }


  public InboundInternationalACHTransfer originatingDepositoryFinancialInstitutionBranchCountry(String originatingDepositoryFinancialInstitutionBranchCountry) {
    this.originatingDepositoryFinancialInstitutionBranchCountry = originatingDepositoryFinancialInstitutionBranchCountry;
    return this;
  }

  /**
   * 
   * @return originatingDepositoryFinancialInstitutionBranchCountry
   */
  @javax.annotation.Nonnull
  public String getOriginatingDepositoryFinancialInstitutionBranchCountry() {
    return originatingDepositoryFinancialInstitutionBranchCountry;
  }

  public void setOriginatingDepositoryFinancialInstitutionBranchCountry(String originatingDepositoryFinancialInstitutionBranchCountry) {
    this.originatingDepositoryFinancialInstitutionBranchCountry = originatingDepositoryFinancialInstitutionBranchCountry;
  }


  public InboundInternationalACHTransfer originatingDepositoryFinancialInstitutionId(String originatingDepositoryFinancialInstitutionId) {
    this.originatingDepositoryFinancialInstitutionId = originatingDepositoryFinancialInstitutionId;
    return this;
  }

  /**
   * 
   * @return originatingDepositoryFinancialInstitutionId
   */
  @javax.annotation.Nonnull
  public String getOriginatingDepositoryFinancialInstitutionId() {
    return originatingDepositoryFinancialInstitutionId;
  }

  public void setOriginatingDepositoryFinancialInstitutionId(String originatingDepositoryFinancialInstitutionId) {
    this.originatingDepositoryFinancialInstitutionId = originatingDepositoryFinancialInstitutionId;
  }


  public InboundInternationalACHTransfer originatingDepositoryFinancialInstitutionIdQualifier(String originatingDepositoryFinancialInstitutionIdQualifier) {
    this.originatingDepositoryFinancialInstitutionIdQualifier = originatingDepositoryFinancialInstitutionIdQualifier;
    return this;
  }

  /**
   * 
   * @return originatingDepositoryFinancialInstitutionIdQualifier
   */
  @javax.annotation.Nonnull
  public String getOriginatingDepositoryFinancialInstitutionIdQualifier() {
    return originatingDepositoryFinancialInstitutionIdQualifier;
  }

  public void setOriginatingDepositoryFinancialInstitutionIdQualifier(String originatingDepositoryFinancialInstitutionIdQualifier) {
    this.originatingDepositoryFinancialInstitutionIdQualifier = originatingDepositoryFinancialInstitutionIdQualifier;
  }


  public InboundInternationalACHTransfer originatingDepositoryFinancialInstitutionName(String originatingDepositoryFinancialInstitutionName) {
    this.originatingDepositoryFinancialInstitutionName = originatingDepositoryFinancialInstitutionName;
    return this;
  }

  /**
   * 
   * @return originatingDepositoryFinancialInstitutionName
   */
  @javax.annotation.Nonnull
  public String getOriginatingDepositoryFinancialInstitutionName() {
    return originatingDepositoryFinancialInstitutionName;
  }

  public void setOriginatingDepositoryFinancialInstitutionName(String originatingDepositoryFinancialInstitutionName) {
    this.originatingDepositoryFinancialInstitutionName = originatingDepositoryFinancialInstitutionName;
  }


  public InboundInternationalACHTransfer originatorCity(String originatorCity) {
    this.originatorCity = originatorCity;
    return this;
  }

  /**
   * 
   * @return originatorCity
   */
  @javax.annotation.Nonnull
  public String getOriginatorCity() {
    return originatorCity;
  }

  public void setOriginatorCity(String originatorCity) {
    this.originatorCity = originatorCity;
  }


  public InboundInternationalACHTransfer originatorCompanyEntryDescription(String originatorCompanyEntryDescription) {
    this.originatorCompanyEntryDescription = originatorCompanyEntryDescription;
    return this;
  }

  /**
   * 
   * @return originatorCompanyEntryDescription
   */
  @javax.annotation.Nonnull
  public String getOriginatorCompanyEntryDescription() {
    return originatorCompanyEntryDescription;
  }

  public void setOriginatorCompanyEntryDescription(String originatorCompanyEntryDescription) {
    this.originatorCompanyEntryDescription = originatorCompanyEntryDescription;
  }


  public InboundInternationalACHTransfer originatorCountry(String originatorCountry) {
    this.originatorCountry = originatorCountry;
    return this;
  }

  /**
   * 
   * @return originatorCountry
   */
  @javax.annotation.Nonnull
  public String getOriginatorCountry() {
    return originatorCountry;
  }

  public void setOriginatorCountry(String originatorCountry) {
    this.originatorCountry = originatorCountry;
  }


  public InboundInternationalACHTransfer originatorIdentification(String originatorIdentification) {
    this.originatorIdentification = originatorIdentification;
    return this;
  }

  /**
   * 
   * @return originatorIdentification
   */
  @javax.annotation.Nonnull
  public String getOriginatorIdentification() {
    return originatorIdentification;
  }

  public void setOriginatorIdentification(String originatorIdentification) {
    this.originatorIdentification = originatorIdentification;
  }


  public InboundInternationalACHTransfer originatorName(String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * 
   * @return originatorName
   */
  @javax.annotation.Nonnull
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(String originatorName) {
    this.originatorName = originatorName;
  }


  public InboundInternationalACHTransfer originatorPostalCode(String originatorPostalCode) {
    this.originatorPostalCode = originatorPostalCode;
    return this;
  }

  /**
   * 
   * @return originatorPostalCode
   */
  @javax.annotation.Nullable
  public String getOriginatorPostalCode() {
    return originatorPostalCode;
  }

  public void setOriginatorPostalCode(String originatorPostalCode) {
    this.originatorPostalCode = originatorPostalCode;
  }


  public InboundInternationalACHTransfer originatorStateOrProvince(String originatorStateOrProvince) {
    this.originatorStateOrProvince = originatorStateOrProvince;
    return this;
  }

  /**
   * 
   * @return originatorStateOrProvince
   */
  @javax.annotation.Nullable
  public String getOriginatorStateOrProvince() {
    return originatorStateOrProvince;
  }

  public void setOriginatorStateOrProvince(String originatorStateOrProvince) {
    this.originatorStateOrProvince = originatorStateOrProvince;
  }


  public InboundInternationalACHTransfer originatorStreetAddress(String originatorStreetAddress) {
    this.originatorStreetAddress = originatorStreetAddress;
    return this;
  }

  /**
   * 
   * @return originatorStreetAddress
   */
  @javax.annotation.Nonnull
  public String getOriginatorStreetAddress() {
    return originatorStreetAddress;
  }

  public void setOriginatorStreetAddress(String originatorStreetAddress) {
    this.originatorStreetAddress = originatorStreetAddress;
  }


  public InboundInternationalACHTransfer paymentRelatedInformation(String paymentRelatedInformation) {
    this.paymentRelatedInformation = paymentRelatedInformation;
    return this;
  }

  /**
   * 
   * @return paymentRelatedInformation
   */
  @javax.annotation.Nullable
  public String getPaymentRelatedInformation() {
    return paymentRelatedInformation;
  }

  public void setPaymentRelatedInformation(String paymentRelatedInformation) {
    this.paymentRelatedInformation = paymentRelatedInformation;
  }


  public InboundInternationalACHTransfer paymentRelatedInformation2(String paymentRelatedInformation2) {
    this.paymentRelatedInformation2 = paymentRelatedInformation2;
    return this;
  }

  /**
   * 
   * @return paymentRelatedInformation2
   */
  @javax.annotation.Nullable
  public String getPaymentRelatedInformation2() {
    return paymentRelatedInformation2;
  }

  public void setPaymentRelatedInformation2(String paymentRelatedInformation2) {
    this.paymentRelatedInformation2 = paymentRelatedInformation2;
  }


  public InboundInternationalACHTransfer receiverCity(String receiverCity) {
    this.receiverCity = receiverCity;
    return this;
  }

  /**
   * 
   * @return receiverCity
   */
  @javax.annotation.Nonnull
  public String getReceiverCity() {
    return receiverCity;
  }

  public void setReceiverCity(String receiverCity) {
    this.receiverCity = receiverCity;
  }


  public InboundInternationalACHTransfer receiverCountry(String receiverCountry) {
    this.receiverCountry = receiverCountry;
    return this;
  }

  /**
   * 
   * @return receiverCountry
   */
  @javax.annotation.Nonnull
  public String getReceiverCountry() {
    return receiverCountry;
  }

  public void setReceiverCountry(String receiverCountry) {
    this.receiverCountry = receiverCountry;
  }


  public InboundInternationalACHTransfer receiverIdentificationNumber(String receiverIdentificationNumber) {
    this.receiverIdentificationNumber = receiverIdentificationNumber;
    return this;
  }

  /**
   * 
   * @return receiverIdentificationNumber
   */
  @javax.annotation.Nullable
  public String getReceiverIdentificationNumber() {
    return receiverIdentificationNumber;
  }

  public void setReceiverIdentificationNumber(String receiverIdentificationNumber) {
    this.receiverIdentificationNumber = receiverIdentificationNumber;
  }


  public InboundInternationalACHTransfer receiverPostalCode(String receiverPostalCode) {
    this.receiverPostalCode = receiverPostalCode;
    return this;
  }

  /**
   * 
   * @return receiverPostalCode
   */
  @javax.annotation.Nullable
  public String getReceiverPostalCode() {
    return receiverPostalCode;
  }

  public void setReceiverPostalCode(String receiverPostalCode) {
    this.receiverPostalCode = receiverPostalCode;
  }


  public InboundInternationalACHTransfer receiverStateOrProvince(String receiverStateOrProvince) {
    this.receiverStateOrProvince = receiverStateOrProvince;
    return this;
  }

  /**
   * 
   * @return receiverStateOrProvince
   */
  @javax.annotation.Nullable
  public String getReceiverStateOrProvince() {
    return receiverStateOrProvince;
  }

  public void setReceiverStateOrProvince(String receiverStateOrProvince) {
    this.receiverStateOrProvince = receiverStateOrProvince;
  }


  public InboundInternationalACHTransfer receiverStreetAddress(String receiverStreetAddress) {
    this.receiverStreetAddress = receiverStreetAddress;
    return this;
  }

  /**
   * 
   * @return receiverStreetAddress
   */
  @javax.annotation.Nonnull
  public String getReceiverStreetAddress() {
    return receiverStreetAddress;
  }

  public void setReceiverStreetAddress(String receiverStreetAddress) {
    this.receiverStreetAddress = receiverStreetAddress;
  }


  public InboundInternationalACHTransfer receivingCompanyOrIndividualName(String receivingCompanyOrIndividualName) {
    this.receivingCompanyOrIndividualName = receivingCompanyOrIndividualName;
    return this;
  }

  /**
   * 
   * @return receivingCompanyOrIndividualName
   */
  @javax.annotation.Nonnull
  public String getReceivingCompanyOrIndividualName() {
    return receivingCompanyOrIndividualName;
  }

  public void setReceivingCompanyOrIndividualName(String receivingCompanyOrIndividualName) {
    this.receivingCompanyOrIndividualName = receivingCompanyOrIndividualName;
  }


  public InboundInternationalACHTransfer receivingDepositoryFinancialInstitutionCountry(String receivingDepositoryFinancialInstitutionCountry) {
    this.receivingDepositoryFinancialInstitutionCountry = receivingDepositoryFinancialInstitutionCountry;
    return this;
  }

  /**
   * 
   * @return receivingDepositoryFinancialInstitutionCountry
   */
  @javax.annotation.Nonnull
  public String getReceivingDepositoryFinancialInstitutionCountry() {
    return receivingDepositoryFinancialInstitutionCountry;
  }

  public void setReceivingDepositoryFinancialInstitutionCountry(String receivingDepositoryFinancialInstitutionCountry) {
    this.receivingDepositoryFinancialInstitutionCountry = receivingDepositoryFinancialInstitutionCountry;
  }


  public InboundInternationalACHTransfer receivingDepositoryFinancialInstitutionId(String receivingDepositoryFinancialInstitutionId) {
    this.receivingDepositoryFinancialInstitutionId = receivingDepositoryFinancialInstitutionId;
    return this;
  }

  /**
   * 
   * @return receivingDepositoryFinancialInstitutionId
   */
  @javax.annotation.Nonnull
  public String getReceivingDepositoryFinancialInstitutionId() {
    return receivingDepositoryFinancialInstitutionId;
  }

  public void setReceivingDepositoryFinancialInstitutionId(String receivingDepositoryFinancialInstitutionId) {
    this.receivingDepositoryFinancialInstitutionId = receivingDepositoryFinancialInstitutionId;
  }


  public InboundInternationalACHTransfer receivingDepositoryFinancialInstitutionIdQualifier(String receivingDepositoryFinancialInstitutionIdQualifier) {
    this.receivingDepositoryFinancialInstitutionIdQualifier = receivingDepositoryFinancialInstitutionIdQualifier;
    return this;
  }

  /**
   * 
   * @return receivingDepositoryFinancialInstitutionIdQualifier
   */
  @javax.annotation.Nonnull
  public String getReceivingDepositoryFinancialInstitutionIdQualifier() {
    return receivingDepositoryFinancialInstitutionIdQualifier;
  }

  public void setReceivingDepositoryFinancialInstitutionIdQualifier(String receivingDepositoryFinancialInstitutionIdQualifier) {
    this.receivingDepositoryFinancialInstitutionIdQualifier = receivingDepositoryFinancialInstitutionIdQualifier;
  }


  public InboundInternationalACHTransfer receivingDepositoryFinancialInstitutionName(String receivingDepositoryFinancialInstitutionName) {
    this.receivingDepositoryFinancialInstitutionName = receivingDepositoryFinancialInstitutionName;
    return this;
  }

  /**
   * 
   * @return receivingDepositoryFinancialInstitutionName
   */
  @javax.annotation.Nonnull
  public String getReceivingDepositoryFinancialInstitutionName() {
    return receivingDepositoryFinancialInstitutionName;
  }

  public void setReceivingDepositoryFinancialInstitutionName(String receivingDepositoryFinancialInstitutionName) {
    this.receivingDepositoryFinancialInstitutionName = receivingDepositoryFinancialInstitutionName;
  }


  public InboundInternationalACHTransfer traceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
    return this;
  }

  /**
   * 
   * @return traceNumber
   */
  @javax.annotation.Nonnull
  public String getTraceNumber() {
    return traceNumber;
  }

  public void setTraceNumber(String traceNumber) {
    this.traceNumber = traceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundInternationalACHTransfer inboundInternationalACHTransfer = (InboundInternationalACHTransfer) o;
    return Objects.equals(this.amount, inboundInternationalACHTransfer.amount) &&
        Objects.equals(this.destinationCountryCode, inboundInternationalACHTransfer.destinationCountryCode) &&
        Objects.equals(this.destinationCurrencyCode, inboundInternationalACHTransfer.destinationCurrencyCode) &&
        Objects.equals(this.foreignExchangeIndicator, inboundInternationalACHTransfer.foreignExchangeIndicator) &&
        Objects.equals(this.foreignExchangeReference, inboundInternationalACHTransfer.foreignExchangeReference) &&
        Objects.equals(this.foreignExchangeReferenceIndicator, inboundInternationalACHTransfer.foreignExchangeReferenceIndicator) &&
        Objects.equals(this.foreignPaymentAmount, inboundInternationalACHTransfer.foreignPaymentAmount) &&
        Objects.equals(this.foreignTraceNumber, inboundInternationalACHTransfer.foreignTraceNumber) &&
        Objects.equals(this.internationalTransactionTypeCode, inboundInternationalACHTransfer.internationalTransactionTypeCode) &&
        Objects.equals(this.originatingCurrencyCode, inboundInternationalACHTransfer.originatingCurrencyCode) &&
        Objects.equals(this.originatingDepositoryFinancialInstitutionBranchCountry, inboundInternationalACHTransfer.originatingDepositoryFinancialInstitutionBranchCountry) &&
        Objects.equals(this.originatingDepositoryFinancialInstitutionId, inboundInternationalACHTransfer.originatingDepositoryFinancialInstitutionId) &&
        Objects.equals(this.originatingDepositoryFinancialInstitutionIdQualifier, inboundInternationalACHTransfer.originatingDepositoryFinancialInstitutionIdQualifier) &&
        Objects.equals(this.originatingDepositoryFinancialInstitutionName, inboundInternationalACHTransfer.originatingDepositoryFinancialInstitutionName) &&
        Objects.equals(this.originatorCity, inboundInternationalACHTransfer.originatorCity) &&
        Objects.equals(this.originatorCompanyEntryDescription, inboundInternationalACHTransfer.originatorCompanyEntryDescription) &&
        Objects.equals(this.originatorCountry, inboundInternationalACHTransfer.originatorCountry) &&
        Objects.equals(this.originatorIdentification, inboundInternationalACHTransfer.originatorIdentification) &&
        Objects.equals(this.originatorName, inboundInternationalACHTransfer.originatorName) &&
        Objects.equals(this.originatorPostalCode, inboundInternationalACHTransfer.originatorPostalCode) &&
        Objects.equals(this.originatorStateOrProvince, inboundInternationalACHTransfer.originatorStateOrProvince) &&
        Objects.equals(this.originatorStreetAddress, inboundInternationalACHTransfer.originatorStreetAddress) &&
        Objects.equals(this.paymentRelatedInformation, inboundInternationalACHTransfer.paymentRelatedInformation) &&
        Objects.equals(this.paymentRelatedInformation2, inboundInternationalACHTransfer.paymentRelatedInformation2) &&
        Objects.equals(this.receiverCity, inboundInternationalACHTransfer.receiverCity) &&
        Objects.equals(this.receiverCountry, inboundInternationalACHTransfer.receiverCountry) &&
        Objects.equals(this.receiverIdentificationNumber, inboundInternationalACHTransfer.receiverIdentificationNumber) &&
        Objects.equals(this.receiverPostalCode, inboundInternationalACHTransfer.receiverPostalCode) &&
        Objects.equals(this.receiverStateOrProvince, inboundInternationalACHTransfer.receiverStateOrProvince) &&
        Objects.equals(this.receiverStreetAddress, inboundInternationalACHTransfer.receiverStreetAddress) &&
        Objects.equals(this.receivingCompanyOrIndividualName, inboundInternationalACHTransfer.receivingCompanyOrIndividualName) &&
        Objects.equals(this.receivingDepositoryFinancialInstitutionCountry, inboundInternationalACHTransfer.receivingDepositoryFinancialInstitutionCountry) &&
        Objects.equals(this.receivingDepositoryFinancialInstitutionId, inboundInternationalACHTransfer.receivingDepositoryFinancialInstitutionId) &&
        Objects.equals(this.receivingDepositoryFinancialInstitutionIdQualifier, inboundInternationalACHTransfer.receivingDepositoryFinancialInstitutionIdQualifier) &&
        Objects.equals(this.receivingDepositoryFinancialInstitutionName, inboundInternationalACHTransfer.receivingDepositoryFinancialInstitutionName) &&
        Objects.equals(this.traceNumber, inboundInternationalACHTransfer.traceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, destinationCountryCode, destinationCurrencyCode, foreignExchangeIndicator, foreignExchangeReference, foreignExchangeReferenceIndicator, foreignPaymentAmount, foreignTraceNumber, internationalTransactionTypeCode, originatingCurrencyCode, originatingDepositoryFinancialInstitutionBranchCountry, originatingDepositoryFinancialInstitutionId, originatingDepositoryFinancialInstitutionIdQualifier, originatingDepositoryFinancialInstitutionName, originatorCity, originatorCompanyEntryDescription, originatorCountry, originatorIdentification, originatorName, originatorPostalCode, originatorStateOrProvince, originatorStreetAddress, paymentRelatedInformation, paymentRelatedInformation2, receiverCity, receiverCountry, receiverIdentificationNumber, receiverPostalCode, receiverStateOrProvince, receiverStreetAddress, receivingCompanyOrIndividualName, receivingDepositoryFinancialInstitutionCountry, receivingDepositoryFinancialInstitutionId, receivingDepositoryFinancialInstitutionIdQualifier, receivingDepositoryFinancialInstitutionName, traceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundInternationalACHTransfer {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    destinationCountryCode: ").append(toIndentedString(destinationCountryCode)).append("\n");
    sb.append("    destinationCurrencyCode: ").append(toIndentedString(destinationCurrencyCode)).append("\n");
    sb.append("    foreignExchangeIndicator: ").append(toIndentedString(foreignExchangeIndicator)).append("\n");
    sb.append("    foreignExchangeReference: ").append(toIndentedString(foreignExchangeReference)).append("\n");
    sb.append("    foreignExchangeReferenceIndicator: ").append(toIndentedString(foreignExchangeReferenceIndicator)).append("\n");
    sb.append("    foreignPaymentAmount: ").append(toIndentedString(foreignPaymentAmount)).append("\n");
    sb.append("    foreignTraceNumber: ").append(toIndentedString(foreignTraceNumber)).append("\n");
    sb.append("    internationalTransactionTypeCode: ").append(toIndentedString(internationalTransactionTypeCode)).append("\n");
    sb.append("    originatingCurrencyCode: ").append(toIndentedString(originatingCurrencyCode)).append("\n");
    sb.append("    originatingDepositoryFinancialInstitutionBranchCountry: ").append(toIndentedString(originatingDepositoryFinancialInstitutionBranchCountry)).append("\n");
    sb.append("    originatingDepositoryFinancialInstitutionId: ").append(toIndentedString(originatingDepositoryFinancialInstitutionId)).append("\n");
    sb.append("    originatingDepositoryFinancialInstitutionIdQualifier: ").append(toIndentedString(originatingDepositoryFinancialInstitutionIdQualifier)).append("\n");
    sb.append("    originatingDepositoryFinancialInstitutionName: ").append(toIndentedString(originatingDepositoryFinancialInstitutionName)).append("\n");
    sb.append("    originatorCity: ").append(toIndentedString(originatorCity)).append("\n");
    sb.append("    originatorCompanyEntryDescription: ").append(toIndentedString(originatorCompanyEntryDescription)).append("\n");
    sb.append("    originatorCountry: ").append(toIndentedString(originatorCountry)).append("\n");
    sb.append("    originatorIdentification: ").append(toIndentedString(originatorIdentification)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorPostalCode: ").append(toIndentedString(originatorPostalCode)).append("\n");
    sb.append("    originatorStateOrProvince: ").append(toIndentedString(originatorStateOrProvince)).append("\n");
    sb.append("    originatorStreetAddress: ").append(toIndentedString(originatorStreetAddress)).append("\n");
    sb.append("    paymentRelatedInformation: ").append(toIndentedString(paymentRelatedInformation)).append("\n");
    sb.append("    paymentRelatedInformation2: ").append(toIndentedString(paymentRelatedInformation2)).append("\n");
    sb.append("    receiverCity: ").append(toIndentedString(receiverCity)).append("\n");
    sb.append("    receiverCountry: ").append(toIndentedString(receiverCountry)).append("\n");
    sb.append("    receiverIdentificationNumber: ").append(toIndentedString(receiverIdentificationNumber)).append("\n");
    sb.append("    receiverPostalCode: ").append(toIndentedString(receiverPostalCode)).append("\n");
    sb.append("    receiverStateOrProvince: ").append(toIndentedString(receiverStateOrProvince)).append("\n");
    sb.append("    receiverStreetAddress: ").append(toIndentedString(receiverStreetAddress)).append("\n");
    sb.append("    receivingCompanyOrIndividualName: ").append(toIndentedString(receivingCompanyOrIndividualName)).append("\n");
    sb.append("    receivingDepositoryFinancialInstitutionCountry: ").append(toIndentedString(receivingDepositoryFinancialInstitutionCountry)).append("\n");
    sb.append("    receivingDepositoryFinancialInstitutionId: ").append(toIndentedString(receivingDepositoryFinancialInstitutionId)).append("\n");
    sb.append("    receivingDepositoryFinancialInstitutionIdQualifier: ").append(toIndentedString(receivingDepositoryFinancialInstitutionIdQualifier)).append("\n");
    sb.append("    receivingDepositoryFinancialInstitutionName: ").append(toIndentedString(receivingDepositoryFinancialInstitutionName)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("destination_country_code");
    openapiFields.add("destination_currency_code");
    openapiFields.add("foreign_exchange_indicator");
    openapiFields.add("foreign_exchange_reference");
    openapiFields.add("foreign_exchange_reference_indicator");
    openapiFields.add("foreign_payment_amount");
    openapiFields.add("foreign_trace_number");
    openapiFields.add("international_transaction_type_code");
    openapiFields.add("originating_currency_code");
    openapiFields.add("originating_depository_financial_institution_branch_country");
    openapiFields.add("originating_depository_financial_institution_id");
    openapiFields.add("originating_depository_financial_institution_id_qualifier");
    openapiFields.add("originating_depository_financial_institution_name");
    openapiFields.add("originator_city");
    openapiFields.add("originator_company_entry_description");
    openapiFields.add("originator_country");
    openapiFields.add("originator_identification");
    openapiFields.add("originator_name");
    openapiFields.add("originator_postal_code");
    openapiFields.add("originator_state_or_province");
    openapiFields.add("originator_street_address");
    openapiFields.add("payment_related_information");
    openapiFields.add("payment_related_information2");
    openapiFields.add("receiver_city");
    openapiFields.add("receiver_country");
    openapiFields.add("receiver_identification_number");
    openapiFields.add("receiver_postal_code");
    openapiFields.add("receiver_state_or_province");
    openapiFields.add("receiver_street_address");
    openapiFields.add("receiving_company_or_individual_name");
    openapiFields.add("receiving_depository_financial_institution_country");
    openapiFields.add("receiving_depository_financial_institution_id");
    openapiFields.add("receiving_depository_financial_institution_id_qualifier");
    openapiFields.add("receiving_depository_financial_institution_name");
    openapiFields.add("trace_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("destination_country_code");
    openapiRequiredFields.add("destination_currency_code");
    openapiRequiredFields.add("foreign_exchange_indicator");
    openapiRequiredFields.add("foreign_exchange_reference");
    openapiRequiredFields.add("foreign_exchange_reference_indicator");
    openapiRequiredFields.add("foreign_payment_amount");
    openapiRequiredFields.add("foreign_trace_number");
    openapiRequiredFields.add("international_transaction_type_code");
    openapiRequiredFields.add("originating_currency_code");
    openapiRequiredFields.add("originating_depository_financial_institution_branch_country");
    openapiRequiredFields.add("originating_depository_financial_institution_id");
    openapiRequiredFields.add("originating_depository_financial_institution_id_qualifier");
    openapiRequiredFields.add("originating_depository_financial_institution_name");
    openapiRequiredFields.add("originator_city");
    openapiRequiredFields.add("originator_company_entry_description");
    openapiRequiredFields.add("originator_country");
    openapiRequiredFields.add("originator_identification");
    openapiRequiredFields.add("originator_name");
    openapiRequiredFields.add("originator_postal_code");
    openapiRequiredFields.add("originator_state_or_province");
    openapiRequiredFields.add("originator_street_address");
    openapiRequiredFields.add("payment_related_information");
    openapiRequiredFields.add("payment_related_information2");
    openapiRequiredFields.add("receiver_city");
    openapiRequiredFields.add("receiver_country");
    openapiRequiredFields.add("receiver_identification_number");
    openapiRequiredFields.add("receiver_postal_code");
    openapiRequiredFields.add("receiver_state_or_province");
    openapiRequiredFields.add("receiver_street_address");
    openapiRequiredFields.add("receiving_company_or_individual_name");
    openapiRequiredFields.add("receiving_depository_financial_institution_country");
    openapiRequiredFields.add("receiving_depository_financial_institution_id");
    openapiRequiredFields.add("receiving_depository_financial_institution_id_qualifier");
    openapiRequiredFields.add("receiving_depository_financial_institution_name");
    openapiRequiredFields.add("trace_number");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundInternationalACHTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundInternationalACHTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundInternationalACHTransfer is not found in the empty JSON string", InboundInternationalACHTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundInternationalACHTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundInternationalACHTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundInternationalACHTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destination_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_country_code").toString()));
      }
      if (!jsonObj.get("destination_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_currency_code").toString()));
      }
      if (!jsonObj.get("foreign_exchange_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_exchange_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_exchange_indicator").toString()));
      }
      if ((jsonObj.get("foreign_exchange_reference") != null && !jsonObj.get("foreign_exchange_reference").isJsonNull()) && !jsonObj.get("foreign_exchange_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_exchange_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_exchange_reference").toString()));
      }
      if (!jsonObj.get("foreign_exchange_reference_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_exchange_reference_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_exchange_reference_indicator").toString()));
      }
      if ((jsonObj.get("foreign_trace_number") != null && !jsonObj.get("foreign_trace_number").isJsonNull()) && !jsonObj.get("foreign_trace_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreign_trace_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreign_trace_number").toString()));
      }
      if (!jsonObj.get("international_transaction_type_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `international_transaction_type_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("international_transaction_type_code").toString()));
      }
      if (!jsonObj.get("originating_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originating_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originating_currency_code").toString()));
      }
      if (!jsonObj.get("originating_depository_financial_institution_branch_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originating_depository_financial_institution_branch_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originating_depository_financial_institution_branch_country").toString()));
      }
      if (!jsonObj.get("originating_depository_financial_institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originating_depository_financial_institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originating_depository_financial_institution_id").toString()));
      }
      if (!jsonObj.get("originating_depository_financial_institution_id_qualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originating_depository_financial_institution_id_qualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originating_depository_financial_institution_id_qualifier").toString()));
      }
      if (!jsonObj.get("originating_depository_financial_institution_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originating_depository_financial_institution_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originating_depository_financial_institution_name").toString()));
      }
      if (!jsonObj.get("originator_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_city").toString()));
      }
      if (!jsonObj.get("originator_company_entry_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_company_entry_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_company_entry_description").toString()));
      }
      if (!jsonObj.get("originator_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_country").toString()));
      }
      if (!jsonObj.get("originator_identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_identification").toString()));
      }
      if (!jsonObj.get("originator_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_name").toString()));
      }
      if ((jsonObj.get("originator_postal_code") != null && !jsonObj.get("originator_postal_code").isJsonNull()) && !jsonObj.get("originator_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_postal_code").toString()));
      }
      if ((jsonObj.get("originator_state_or_province") != null && !jsonObj.get("originator_state_or_province").isJsonNull()) && !jsonObj.get("originator_state_or_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_state_or_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_state_or_province").toString()));
      }
      if (!jsonObj.get("originator_street_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator_street_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator_street_address").toString()));
      }
      if ((jsonObj.get("payment_related_information") != null && !jsonObj.get("payment_related_information").isJsonNull()) && !jsonObj.get("payment_related_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_related_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_related_information").toString()));
      }
      if ((jsonObj.get("payment_related_information2") != null && !jsonObj.get("payment_related_information2").isJsonNull()) && !jsonObj.get("payment_related_information2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_related_information2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_related_information2").toString()));
      }
      if (!jsonObj.get("receiver_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_city").toString()));
      }
      if (!jsonObj.get("receiver_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_country").toString()));
      }
      if ((jsonObj.get("receiver_identification_number") != null && !jsonObj.get("receiver_identification_number").isJsonNull()) && !jsonObj.get("receiver_identification_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_identification_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_identification_number").toString()));
      }
      if ((jsonObj.get("receiver_postal_code") != null && !jsonObj.get("receiver_postal_code").isJsonNull()) && !jsonObj.get("receiver_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_postal_code").toString()));
      }
      if ((jsonObj.get("receiver_state_or_province") != null && !jsonObj.get("receiver_state_or_province").isJsonNull()) && !jsonObj.get("receiver_state_or_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_state_or_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_state_or_province").toString()));
      }
      if (!jsonObj.get("receiver_street_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_street_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_street_address").toString()));
      }
      if (!jsonObj.get("receiving_company_or_individual_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_company_or_individual_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_company_or_individual_name").toString()));
      }
      if (!jsonObj.get("receiving_depository_financial_institution_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_depository_financial_institution_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_depository_financial_institution_country").toString()));
      }
      if (!jsonObj.get("receiving_depository_financial_institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_depository_financial_institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_depository_financial_institution_id").toString()));
      }
      if (!jsonObj.get("receiving_depository_financial_institution_id_qualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_depository_financial_institution_id_qualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_depository_financial_institution_id_qualifier").toString()));
      }
      if (!jsonObj.get("receiving_depository_financial_institution_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_depository_financial_institution_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_depository_financial_institution_name").toString()));
      }
      if (!jsonObj.get("trace_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundInternationalACHTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundInternationalACHTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundInternationalACHTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundInternationalACHTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundInternationalACHTransfer>() {
           @Override
           public void write(JsonWriter out, InboundInternationalACHTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundInternationalACHTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundInternationalACHTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundInternationalACHTransfer
   * @throws IOException if the JSON string is invalid with respect to InboundInternationalACHTransfer
   */
  public static InboundInternationalACHTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundInternationalACHTransfer.class);
  }

  /**
   * Convert an instance of InboundInternationalACHTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

