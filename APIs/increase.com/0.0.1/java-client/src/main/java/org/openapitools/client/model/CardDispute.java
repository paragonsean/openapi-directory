/*
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CardDisputeAcceptance;
import org.openapitools.client.model.CardDisputeRejection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If unauthorized activity occurs on a card, you can create a Card Dispute and we&#39;ll return the funds if appropriate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:15.306647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardDispute {
  public static final String SERIALIZED_NAME_ACCEPTANCE = "acceptance";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE)
  private CardDisputeAcceptance acceptance;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISPUTED_TRANSACTION_ID = "disputed_transaction_id";
  @SerializedName(SERIALIZED_NAME_DISPUTED_TRANSACTION_ID)
  private String disputedTransactionId;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REJECTION = "rejection";
  @SerializedName(SERIALIZED_NAME_REJECTION)
  private CardDisputeRejection rejection;

  /**
   * The results of the Dispute investigation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    /**
     * The Card Dispute is pending review.
     */
    PENDING_REVIEWING("pending_reviewing"),
    
    /**
     * The Card Dispute has been accepted and your funds have been returned.
     */
    ACCEPTED("accepted"),
    
    /**
     * The Card Dispute has been rejected.
     */
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;card_dispute&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CARD_DISPUTE("card_dispute");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CardDispute() {
  }

  public CardDispute acceptance(CardDisputeAcceptance acceptance) {
    this.acceptance = acceptance;
    return this;
  }

  /**
   * Get acceptance
   * @return acceptance
   */
  @javax.annotation.Nullable
  public CardDisputeAcceptance getAcceptance() {
    return acceptance;
  }

  public void setAcceptance(CardDisputeAcceptance acceptance) {
    this.acceptance = acceptance;
  }


  public CardDispute createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CardDispute disputedTransactionId(String disputedTransactionId) {
    this.disputedTransactionId = disputedTransactionId;
    return this;
  }

  /**
   * The identifier of the Transaction that was disputed.
   * @return disputedTransactionId
   */
  @javax.annotation.Nonnull
  public String getDisputedTransactionId() {
    return disputedTransactionId;
  }

  public void setDisputedTransactionId(String disputedTransactionId) {
    this.disputedTransactionId = disputedTransactionId;
  }


  public CardDispute explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Why you disputed the Transaction in question.
   * @return explanation
   */
  @javax.annotation.Nonnull
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public CardDispute id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Card Dispute identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CardDispute rejection(CardDisputeRejection rejection) {
    this.rejection = rejection;
    return this;
  }

  /**
   * Get rejection
   * @return rejection
   */
  @javax.annotation.Nullable
  public CardDisputeRejection getRejection() {
    return rejection;
  }

  public void setRejection(CardDisputeRejection rejection) {
    this.rejection = rejection;
  }


  public CardDispute status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The results of the Dispute investigation.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CardDispute type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * A constant representing the object&#39;s type. For this resource it will always be &#x60;card_dispute&#x60;.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardDispute cardDispute = (CardDispute) o;
    return Objects.equals(this.acceptance, cardDispute.acceptance) &&
        Objects.equals(this.createdAt, cardDispute.createdAt) &&
        Objects.equals(this.disputedTransactionId, cardDispute.disputedTransactionId) &&
        Objects.equals(this.explanation, cardDispute.explanation) &&
        Objects.equals(this.id, cardDispute.id) &&
        Objects.equals(this.rejection, cardDispute.rejection) &&
        Objects.equals(this.status, cardDispute.status) &&
        Objects.equals(this.type, cardDispute.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptance, createdAt, disputedTransactionId, explanation, id, rejection, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardDispute {\n");
    sb.append("    acceptance: ").append(toIndentedString(acceptance)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disputedTransactionId: ").append(toIndentedString(disputedTransactionId)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rejection: ").append(toIndentedString(rejection)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptance");
    openapiFields.add("created_at");
    openapiFields.add("disputed_transaction_id");
    openapiFields.add("explanation");
    openapiFields.add("id");
    openapiFields.add("rejection");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acceptance");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("disputed_transaction_id");
    openapiRequiredFields.add("explanation");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("rejection");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardDispute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardDispute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardDispute is not found in the empty JSON string", CardDispute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardDispute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardDispute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardDispute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `acceptance`
      CardDisputeAcceptance.validateJsonElement(jsonObj.get("acceptance"));
      if (!jsonObj.get("disputed_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disputed_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disputed_transaction_id").toString()));
      }
      if (!jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `rejection`
      CardDisputeRejection.validateJsonElement(jsonObj.get("rejection"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardDispute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardDispute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardDispute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardDispute.class));

       return (TypeAdapter<T>) new TypeAdapter<CardDispute>() {
           @Override
           public void write(JsonWriter out, CardDispute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardDispute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardDispute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardDispute
   * @throws IOException if the JSON string is invalid with respect to CardDispute
   */
  public static CardDispute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardDispute.class);
  }

  /**
   * Convert an instance of CardDispute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

