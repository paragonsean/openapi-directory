/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InboundRealTimePaymentsTransferConfirmation model module.
 * @module model/InboundRealTimePaymentsTransferConfirmation
 * @version 0.0.1
 */
class InboundRealTimePaymentsTransferConfirmation {
    /**
     * Constructs a new <code>InboundRealTimePaymentsTransferConfirmation</code>.
     * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;inbound_real_time_payments_transfer_confirmation&#x60;.
     * @alias module:model/InboundRealTimePaymentsTransferConfirmation
     * @param amount {Number} The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
     * @param creditorName {String} The name the sender of the transfer specified as the recipient of the transfer.
     * @param currency {module:model/InboundRealTimePaymentsTransferConfirmation.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real Time Payments transfer.
     * @param debtorAccountNumber {String} The account number of the account that sent the transfer.
     * @param debtorName {String} The name provided by the sender of the transfer.
     * @param debtorRoutingNumber {String} The routing number of the account that sent the transfer.
     * @param remittanceInformation {String} Additional information included with the transfer.
     * @param transactionIdentification {String} The Real Time Payments network identification of the transfer
     */
    constructor(amount, creditorName, currency, debtorAccountNumber, debtorName, debtorRoutingNumber, remittanceInformation, transactionIdentification) { 
        
        InboundRealTimePaymentsTransferConfirmation.initialize(this, amount, creditorName, currency, debtorAccountNumber, debtorName, debtorRoutingNumber, remittanceInformation, transactionIdentification);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, creditorName, currency, debtorAccountNumber, debtorName, debtorRoutingNumber, remittanceInformation, transactionIdentification) { 
        obj['amount'] = amount;
        obj['creditor_name'] = creditorName;
        obj['currency'] = currency;
        obj['debtor_account_number'] = debtorAccountNumber;
        obj['debtor_name'] = debtorName;
        obj['debtor_routing_number'] = debtorRoutingNumber;
        obj['remittance_information'] = remittanceInformation;
        obj['transaction_identification'] = transactionIdentification;
    }

    /**
     * Constructs a <code>InboundRealTimePaymentsTransferConfirmation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundRealTimePaymentsTransferConfirmation} obj Optional instance to populate.
     * @return {module:model/InboundRealTimePaymentsTransferConfirmation} The populated <code>InboundRealTimePaymentsTransferConfirmation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundRealTimePaymentsTransferConfirmation();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('creditor_name')) {
                obj['creditor_name'] = ApiClient.convertToType(data['creditor_name'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('debtor_account_number')) {
                obj['debtor_account_number'] = ApiClient.convertToType(data['debtor_account_number'], 'String');
            }
            if (data.hasOwnProperty('debtor_name')) {
                obj['debtor_name'] = ApiClient.convertToType(data['debtor_name'], 'String');
            }
            if (data.hasOwnProperty('debtor_routing_number')) {
                obj['debtor_routing_number'] = ApiClient.convertToType(data['debtor_routing_number'], 'String');
            }
            if (data.hasOwnProperty('remittance_information')) {
                obj['remittance_information'] = ApiClient.convertToType(data['remittance_information'], 'String');
            }
            if (data.hasOwnProperty('transaction_identification')) {
                obj['transaction_identification'] = ApiClient.convertToType(data['transaction_identification'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundRealTimePaymentsTransferConfirmation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundRealTimePaymentsTransferConfirmation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InboundRealTimePaymentsTransferConfirmation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creditor_name'] && !(typeof data['creditor_name'] === 'string' || data['creditor_name'] instanceof String)) {
            throw new Error("Expected the field `creditor_name` to be a primitive type in the JSON string but got " + data['creditor_name']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['debtor_account_number'] && !(typeof data['debtor_account_number'] === 'string' || data['debtor_account_number'] instanceof String)) {
            throw new Error("Expected the field `debtor_account_number` to be a primitive type in the JSON string but got " + data['debtor_account_number']);
        }
        // ensure the json data is a string
        if (data['debtor_name'] && !(typeof data['debtor_name'] === 'string' || data['debtor_name'] instanceof String)) {
            throw new Error("Expected the field `debtor_name` to be a primitive type in the JSON string but got " + data['debtor_name']);
        }
        // ensure the json data is a string
        if (data['debtor_routing_number'] && !(typeof data['debtor_routing_number'] === 'string' || data['debtor_routing_number'] instanceof String)) {
            throw new Error("Expected the field `debtor_routing_number` to be a primitive type in the JSON string but got " + data['debtor_routing_number']);
        }
        // ensure the json data is a string
        if (data['remittance_information'] && !(typeof data['remittance_information'] === 'string' || data['remittance_information'] instanceof String)) {
            throw new Error("Expected the field `remittance_information` to be a primitive type in the JSON string but got " + data['remittance_information']);
        }
        // ensure the json data is a string
        if (data['transaction_identification'] && !(typeof data['transaction_identification'] === 'string' || data['transaction_identification'] instanceof String)) {
            throw new Error("Expected the field `transaction_identification` to be a primitive type in the JSON string but got " + data['transaction_identification']);
        }

        return true;
    }


}

InboundRealTimePaymentsTransferConfirmation.RequiredProperties = ["amount", "creditor_name", "currency", "debtor_account_number", "debtor_name", "debtor_routing_number", "remittance_information", "transaction_identification"];

/**
 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
InboundRealTimePaymentsTransferConfirmation.prototype['amount'] = undefined;

/**
 * The name the sender of the transfer specified as the recipient of the transfer.
 * @member {String} creditor_name
 */
InboundRealTimePaymentsTransferConfirmation.prototype['creditor_name'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be \"USD\" for a Real Time Payments transfer.
 * @member {module:model/InboundRealTimePaymentsTransferConfirmation.CurrencyEnum} currency
 */
InboundRealTimePaymentsTransferConfirmation.prototype['currency'] = undefined;

/**
 * The account number of the account that sent the transfer.
 * @member {String} debtor_account_number
 */
InboundRealTimePaymentsTransferConfirmation.prototype['debtor_account_number'] = undefined;

/**
 * The name provided by the sender of the transfer.
 * @member {String} debtor_name
 */
InboundRealTimePaymentsTransferConfirmation.prototype['debtor_name'] = undefined;

/**
 * The routing number of the account that sent the transfer.
 * @member {String} debtor_routing_number
 */
InboundRealTimePaymentsTransferConfirmation.prototype['debtor_routing_number'] = undefined;

/**
 * Additional information included with the transfer.
 * @member {String} remittance_information
 */
InboundRealTimePaymentsTransferConfirmation.prototype['remittance_information'] = undefined;

/**
 * The Real Time Payments network identification of the transfer
 * @member {String} transaction_identification
 */
InboundRealTimePaymentsTransferConfirmation.prototype['transaction_identification'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
InboundRealTimePaymentsTransferConfirmation['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default InboundRealTimePaymentsTransferConfirmation;

