/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address2 from './Address2';
import Individual3 from './Individual3';
import TrusteesElement from './TrusteesElement';

/**
 * The Trust model module.
 * @module model/Trust
 * @version 0.0.1
 */
class Trust {
    /**
     * Constructs a new <code>Trust</code>.
     * Details of the trust entity. Will be present if &#x60;structure&#x60; is equal to &#x60;trust&#x60;.
     * @alias module:model/Trust
     * @param address {module:model/Address2} 
     * @param category {module:model/Trust.CategoryEnum} Whether the trust is `revocable` or `irrevocable`.
     * @param formationDocumentFileId {String} The ID for the File containing the formation document of the trust.
     * @param formationState {String} The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
     * @param grantor {module:model/Individual3} 
     * @param name {String} The trust's name
     * @param taxIdentifier {String} The Employer Identification Number (EIN) of the trust itself.
     * @param trustees {Array.<module:model/TrusteesElement>} The trustees of the trust.
     */
    constructor(address, category, formationDocumentFileId, formationState, grantor, name, taxIdentifier, trustees) { 
        
        Trust.initialize(this, address, category, formationDocumentFileId, formationState, grantor, name, taxIdentifier, trustees);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, category, formationDocumentFileId, formationState, grantor, name, taxIdentifier, trustees) { 
        obj['address'] = address;
        obj['category'] = category;
        obj['formation_document_file_id'] = formationDocumentFileId;
        obj['formation_state'] = formationState;
        obj['grantor'] = grantor;
        obj['name'] = name;
        obj['tax_identifier'] = taxIdentifier;
        obj['trustees'] = trustees;
    }

    /**
     * Constructs a <code>Trust</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trust} obj Optional instance to populate.
     * @return {module:model/Trust} The populated <code>Trust</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trust();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address2.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('formation_document_file_id')) {
                obj['formation_document_file_id'] = ApiClient.convertToType(data['formation_document_file_id'], 'String');
            }
            if (data.hasOwnProperty('formation_state')) {
                obj['formation_state'] = ApiClient.convertToType(data['formation_state'], 'String');
            }
            if (data.hasOwnProperty('grantor')) {
                obj['grantor'] = Individual3.constructFromObject(data['grantor']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tax_identifier')) {
                obj['tax_identifier'] = ApiClient.convertToType(data['tax_identifier'], 'String');
            }
            if (data.hasOwnProperty('trustees')) {
                obj['trustees'] = ApiClient.convertToType(data['trustees'], [TrusteesElement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trust</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trust</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Trust.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address2.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['formation_document_file_id'] && !(typeof data['formation_document_file_id'] === 'string' || data['formation_document_file_id'] instanceof String)) {
            throw new Error("Expected the field `formation_document_file_id` to be a primitive type in the JSON string but got " + data['formation_document_file_id']);
        }
        // ensure the json data is a string
        if (data['formation_state'] && !(typeof data['formation_state'] === 'string' || data['formation_state'] instanceof String)) {
            throw new Error("Expected the field `formation_state` to be a primitive type in the JSON string but got " + data['formation_state']);
        }
        // validate the optional field `grantor`
        if (data['grantor']) { // data not null
          Individual3.validateJSON(data['grantor']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tax_identifier'] && !(typeof data['tax_identifier'] === 'string' || data['tax_identifier'] instanceof String)) {
            throw new Error("Expected the field `tax_identifier` to be a primitive type in the JSON string but got " + data['tax_identifier']);
        }
        if (data['trustees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustees'])) {
                throw new Error("Expected the field `trustees` to be an array in the JSON data but got " + data['trustees']);
            }
            // validate the optional field `trustees` (array)
            for (const item of data['trustees']) {
                TrusteesElement.validateJSON(item);
            };
        }

        return true;
    }


}

Trust.RequiredProperties = ["address", "category", "formation_document_file_id", "formation_state", "grantor", "name", "tax_identifier", "trustees"];

/**
 * @member {module:model/Address2} address
 */
Trust.prototype['address'] = undefined;

/**
 * Whether the trust is `revocable` or `irrevocable`.
 * @member {module:model/Trust.CategoryEnum} category
 */
Trust.prototype['category'] = undefined;

/**
 * The ID for the File containing the formation document of the trust.
 * @member {String} formation_document_file_id
 */
Trust.prototype['formation_document_file_id'] = undefined;

/**
 * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
 * @member {String} formation_state
 */
Trust.prototype['formation_state'] = undefined;

/**
 * @member {module:model/Individual3} grantor
 */
Trust.prototype['grantor'] = undefined;

/**
 * The trust's name
 * @member {String} name
 */
Trust.prototype['name'] = undefined;

/**
 * The Employer Identification Number (EIN) of the trust itself.
 * @member {String} tax_identifier
 */
Trust.prototype['tax_identifier'] = undefined;

/**
 * The trustees of the trust.
 * @member {Array.<module:model/TrusteesElement>} trustees
 */
Trust.prototype['trustees'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Trust['CategoryEnum'] = {

    /**
     * value: "revocable"
     * @const
     */
    "revocable": "revocable",

    /**
     * value: "irrevocable"
     * @const
     */
    "irrevocable": "irrevocable"
};



export default Trust;

