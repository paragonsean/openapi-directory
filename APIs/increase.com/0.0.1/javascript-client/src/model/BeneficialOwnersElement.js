/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Individual from './Individual';

/**
 * The BeneficialOwnersElement model module.
 * @module model/BeneficialOwnersElement
 * @version 0.0.1
 */
class BeneficialOwnersElement {
    /**
     * Constructs a new <code>BeneficialOwnersElement</code>.
     * @alias module:model/BeneficialOwnersElement
     * @param companyTitle {String} This person's role or title within the entity.
     * @param individual {module:model/Individual} 
     * @param prong {module:model/BeneficialOwnersElement.ProngEnum} Why this person is considered a beneficial owner of the entity.
     */
    constructor(companyTitle, individual, prong) { 
        
        BeneficialOwnersElement.initialize(this, companyTitle, individual, prong);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyTitle, individual, prong) { 
        obj['company_title'] = companyTitle;
        obj['individual'] = individual;
        obj['prong'] = prong;
    }

    /**
     * Constructs a <code>BeneficialOwnersElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BeneficialOwnersElement} obj Optional instance to populate.
     * @return {module:model/BeneficialOwnersElement} The populated <code>BeneficialOwnersElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BeneficialOwnersElement();

            if (data.hasOwnProperty('company_title')) {
                obj['company_title'] = ApiClient.convertToType(data['company_title'], 'String');
            }
            if (data.hasOwnProperty('individual')) {
                obj['individual'] = Individual.constructFromObject(data['individual']);
            }
            if (data.hasOwnProperty('prong')) {
                obj['prong'] = ApiClient.convertToType(data['prong'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BeneficialOwnersElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BeneficialOwnersElement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BeneficialOwnersElement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['company_title'] && !(typeof data['company_title'] === 'string' || data['company_title'] instanceof String)) {
            throw new Error("Expected the field `company_title` to be a primitive type in the JSON string but got " + data['company_title']);
        }
        // validate the optional field `individual`
        if (data['individual']) { // data not null
          Individual.validateJSON(data['individual']);
        }
        // ensure the json data is a string
        if (data['prong'] && !(typeof data['prong'] === 'string' || data['prong'] instanceof String)) {
            throw new Error("Expected the field `prong` to be a primitive type in the JSON string but got " + data['prong']);
        }

        return true;
    }


}

BeneficialOwnersElement.RequiredProperties = ["company_title", "individual", "prong"];

/**
 * This person's role or title within the entity.
 * @member {String} company_title
 */
BeneficialOwnersElement.prototype['company_title'] = undefined;

/**
 * @member {module:model/Individual} individual
 */
BeneficialOwnersElement.prototype['individual'] = undefined;

/**
 * Why this person is considered a beneficial owner of the entity.
 * @member {module:model/BeneficialOwnersElement.ProngEnum} prong
 */
BeneficialOwnersElement.prototype['prong'] = undefined;





/**
 * Allowed values for the <code>prong</code> property.
 * @enum {String}
 * @readonly
 */
BeneficialOwnersElement['ProngEnum'] = {

    /**
     * value: "ownership"
     * @const
     */
    "ownership": "ownership",

    /**
     * value: "control"
     * @const
     */
    "control": "control"
};



export default BeneficialOwnersElement;

