/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RealTimePaymentsTransferRejection from './RealTimePaymentsTransferRejection';
import RealTimePaymentsTransferSubmission from './RealTimePaymentsTransferSubmission';
import TransferApproval from './TransferApproval';
import TransferCancellation from './TransferCancellation';

/**
 * The RealTimePaymentsTransfer model module.
 * @module model/RealTimePaymentsTransfer
 * @version 0.0.1
 */
class RealTimePaymentsTransfer {
    /**
     * Constructs a new <code>RealTimePaymentsTransfer</code>.
     * Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network.
     * @alias module:model/RealTimePaymentsTransfer
     * @param accountId {String} The Account from which the transfer was sent.
     * @param amount {Number} The transfer amount in USD cents.
     * @param approval {module:model/TransferApproval} 
     * @param cancellation {module:model/TransferCancellation} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param creditorName {String} The name of the transfer's recipient as provided by the sender.
     * @param currency {module:model/RealTimePaymentsTransfer.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
     * @param destinationAccountNumber {String} The destination account number.
     * @param destinationRoutingNumber {String} The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
     * @param externalAccountId {String} The identifier of the External Account the transfer was made to, if any.
     * @param id {String} The Real Time Payments Transfer's identifier.
     * @param rejection {module:model/RealTimePaymentsTransferRejection} 
     * @param remittanceInformation {String} Unstructured information that will show on the recipient's bank statement.
     * @param sourceAccountNumberId {String} The Account Number the recipient will see as having sent the transfer.
     * @param status {module:model/RealTimePaymentsTransfer.StatusEnum} The lifecycle status of the transfer.
     * @param submission {module:model/RealTimePaymentsTransferSubmission} 
     * @param transactionId {String} The Transaction funding the transfer once it is complete.
     * @param type {module:model/RealTimePaymentsTransfer.TypeEnum} A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
     */
    constructor(accountId, amount, approval, cancellation, createdAt, creditorName, currency, destinationAccountNumber, destinationRoutingNumber, externalAccountId, id, rejection, remittanceInformation, sourceAccountNumberId, status, submission, transactionId, type) { 
        
        RealTimePaymentsTransfer.initialize(this, accountId, amount, approval, cancellation, createdAt, creditorName, currency, destinationAccountNumber, destinationRoutingNumber, externalAccountId, id, rejection, remittanceInformation, sourceAccountNumberId, status, submission, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, approval, cancellation, createdAt, creditorName, currency, destinationAccountNumber, destinationRoutingNumber, externalAccountId, id, rejection, remittanceInformation, sourceAccountNumberId, status, submission, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['approval'] = approval;
        obj['cancellation'] = cancellation;
        obj['created_at'] = createdAt;
        obj['creditor_name'] = creditorName;
        obj['currency'] = currency;
        obj['destination_account_number'] = destinationAccountNumber;
        obj['destination_routing_number'] = destinationRoutingNumber;
        obj['external_account_id'] = externalAccountId;
        obj['id'] = id;
        obj['rejection'] = rejection;
        obj['remittance_information'] = remittanceInformation;
        obj['source_account_number_id'] = sourceAccountNumberId;
        obj['status'] = status;
        obj['submission'] = submission;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RealTimePaymentsTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RealTimePaymentsTransfer} obj Optional instance to populate.
     * @return {module:model/RealTimePaymentsTransfer} The populated <code>RealTimePaymentsTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RealTimePaymentsTransfer();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = TransferApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = TransferCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creditor_name')) {
                obj['creditor_name'] = ApiClient.convertToType(data['creditor_name'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('destination_account_number')) {
                obj['destination_account_number'] = ApiClient.convertToType(data['destination_account_number'], 'String');
            }
            if (data.hasOwnProperty('destination_routing_number')) {
                obj['destination_routing_number'] = ApiClient.convertToType(data['destination_routing_number'], 'String');
            }
            if (data.hasOwnProperty('external_account_id')) {
                obj['external_account_id'] = ApiClient.convertToType(data['external_account_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rejection')) {
                obj['rejection'] = RealTimePaymentsTransferRejection.constructFromObject(data['rejection']);
            }
            if (data.hasOwnProperty('remittance_information')) {
                obj['remittance_information'] = ApiClient.convertToType(data['remittance_information'], 'String');
            }
            if (data.hasOwnProperty('source_account_number_id')) {
                obj['source_account_number_id'] = ApiClient.convertToType(data['source_account_number_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = RealTimePaymentsTransferSubmission.constructFromObject(data['submission']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RealTimePaymentsTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RealTimePaymentsTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RealTimePaymentsTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          TransferApproval.validateJSON(data['approval']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          TransferCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['creditor_name'] && !(typeof data['creditor_name'] === 'string' || data['creditor_name'] instanceof String)) {
            throw new Error("Expected the field `creditor_name` to be a primitive type in the JSON string but got " + data['creditor_name']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['destination_account_number'] && !(typeof data['destination_account_number'] === 'string' || data['destination_account_number'] instanceof String)) {
            throw new Error("Expected the field `destination_account_number` to be a primitive type in the JSON string but got " + data['destination_account_number']);
        }
        // ensure the json data is a string
        if (data['destination_routing_number'] && !(typeof data['destination_routing_number'] === 'string' || data['destination_routing_number'] instanceof String)) {
            throw new Error("Expected the field `destination_routing_number` to be a primitive type in the JSON string but got " + data['destination_routing_number']);
        }
        // ensure the json data is a string
        if (data['external_account_id'] && !(typeof data['external_account_id'] === 'string' || data['external_account_id'] instanceof String)) {
            throw new Error("Expected the field `external_account_id` to be a primitive type in the JSON string but got " + data['external_account_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `rejection`
        if (data['rejection']) { // data not null
          RealTimePaymentsTransferRejection.validateJSON(data['rejection']);
        }
        // ensure the json data is a string
        if (data['remittance_information'] && !(typeof data['remittance_information'] === 'string' || data['remittance_information'] instanceof String)) {
            throw new Error("Expected the field `remittance_information` to be a primitive type in the JSON string but got " + data['remittance_information']);
        }
        // ensure the json data is a string
        if (data['source_account_number_id'] && !(typeof data['source_account_number_id'] === 'string' || data['source_account_number_id'] instanceof String)) {
            throw new Error("Expected the field `source_account_number_id` to be a primitive type in the JSON string but got " + data['source_account_number_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `submission`
        if (data['submission']) { // data not null
          RealTimePaymentsTransferSubmission.validateJSON(data['submission']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RealTimePaymentsTransfer.RequiredProperties = ["account_id", "amount", "approval", "cancellation", "created_at", "creditor_name", "currency", "destination_account_number", "destination_routing_number", "external_account_id", "id", "rejection", "remittance_information", "source_account_number_id", "status", "submission", "transaction_id", "type"];

/**
 * The Account from which the transfer was sent.
 * @member {String} account_id
 */
RealTimePaymentsTransfer.prototype['account_id'] = undefined;

/**
 * The transfer amount in USD cents.
 * @member {Number} amount
 */
RealTimePaymentsTransfer.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferApproval} approval
 */
RealTimePaymentsTransfer.prototype['approval'] = undefined;

/**
 * @member {module:model/TransferCancellation} cancellation
 */
RealTimePaymentsTransfer.prototype['cancellation'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
RealTimePaymentsTransfer.prototype['created_at'] = undefined;

/**
 * The name of the transfer's recipient as provided by the sender.
 * @member {String} creditor_name
 */
RealTimePaymentsTransfer.prototype['creditor_name'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
 * @member {module:model/RealTimePaymentsTransfer.CurrencyEnum} currency
 */
RealTimePaymentsTransfer.prototype['currency'] = undefined;

/**
 * The destination account number.
 * @member {String} destination_account_number
 */
RealTimePaymentsTransfer.prototype['destination_account_number'] = undefined;

/**
 * The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
 * @member {String} destination_routing_number
 */
RealTimePaymentsTransfer.prototype['destination_routing_number'] = undefined;

/**
 * The identifier of the External Account the transfer was made to, if any.
 * @member {String} external_account_id
 */
RealTimePaymentsTransfer.prototype['external_account_id'] = undefined;

/**
 * The Real Time Payments Transfer's identifier.
 * @member {String} id
 */
RealTimePaymentsTransfer.prototype['id'] = undefined;

/**
 * @member {module:model/RealTimePaymentsTransferRejection} rejection
 */
RealTimePaymentsTransfer.prototype['rejection'] = undefined;

/**
 * Unstructured information that will show on the recipient's bank statement.
 * @member {String} remittance_information
 */
RealTimePaymentsTransfer.prototype['remittance_information'] = undefined;

/**
 * The Account Number the recipient will see as having sent the transfer.
 * @member {String} source_account_number_id
 */
RealTimePaymentsTransfer.prototype['source_account_number_id'] = undefined;

/**
 * The lifecycle status of the transfer.
 * @member {module:model/RealTimePaymentsTransfer.StatusEnum} status
 */
RealTimePaymentsTransfer.prototype['status'] = undefined;

/**
 * @member {module:model/RealTimePaymentsTransferSubmission} submission
 */
RealTimePaymentsTransfer.prototype['submission'] = undefined;

/**
 * The Transaction funding the transfer once it is complete.
 * @member {String} transaction_id
 */
RealTimePaymentsTransfer.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
 * @member {module:model/RealTimePaymentsTransfer.TypeEnum} type
 */
RealTimePaymentsTransfer.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
RealTimePaymentsTransfer['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RealTimePaymentsTransfer['StatusEnum'] = {

    /**
     * value: "pending_approval"
     * @const
     */
    "pending_approval": "pending_approval",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "pending_submission"
     * @const
     */
    "pending_submission": "pending_submission",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "requires_attention"
     * @const
     */
    "requires_attention": "requires_attention"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RealTimePaymentsTransfer['TypeEnum'] = {

    /**
     * value: "real_time_payments_transfer"
     * @const
     */
    "real_time_payments_transfer": "real_time_payments_transfer"
};



export default RealTimePaymentsTransfer;

