/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckTransferDeposit model module.
 * @module model/CheckTransferDeposit
 * @version 0.0.1
 */
class CheckTransferDeposit {
    /**
     * Constructs a new <code>CheckTransferDeposit</code>.
     * After a check transfer is deposited, this will contain supplemental details.
     * @alias module:model/CheckTransferDeposit
     * @param backImageFileId {String} The ID for the File containing the image of the rear of the check.
     * @param depositedAt {Date} When the check was deposited.
     * @param frontImageFileId {String} The ID for the File containing the image of the front of the check.
     * @param type {module:model/CheckTransferDeposit.TypeEnum} A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
     */
    constructor(backImageFileId, depositedAt, frontImageFileId, type) { 
        
        CheckTransferDeposit.initialize(this, backImageFileId, depositedAt, frontImageFileId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backImageFileId, depositedAt, frontImageFileId, type) { 
        obj['back_image_file_id'] = backImageFileId;
        obj['deposited_at'] = depositedAt;
        obj['front_image_file_id'] = frontImageFileId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CheckTransferDeposit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckTransferDeposit} obj Optional instance to populate.
     * @return {module:model/CheckTransferDeposit} The populated <code>CheckTransferDeposit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckTransferDeposit();

            if (data.hasOwnProperty('back_image_file_id')) {
                obj['back_image_file_id'] = ApiClient.convertToType(data['back_image_file_id'], 'String');
            }
            if (data.hasOwnProperty('deposited_at')) {
                obj['deposited_at'] = ApiClient.convertToType(data['deposited_at'], 'Date');
            }
            if (data.hasOwnProperty('front_image_file_id')) {
                obj['front_image_file_id'] = ApiClient.convertToType(data['front_image_file_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckTransferDeposit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckTransferDeposit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckTransferDeposit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['back_image_file_id'] && !(typeof data['back_image_file_id'] === 'string' || data['back_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `back_image_file_id` to be a primitive type in the JSON string but got " + data['back_image_file_id']);
        }
        // ensure the json data is a string
        if (data['front_image_file_id'] && !(typeof data['front_image_file_id'] === 'string' || data['front_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `front_image_file_id` to be a primitive type in the JSON string but got " + data['front_image_file_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CheckTransferDeposit.RequiredProperties = ["back_image_file_id", "deposited_at", "front_image_file_id", "type"];

/**
 * The ID for the File containing the image of the rear of the check.
 * @member {String} back_image_file_id
 */
CheckTransferDeposit.prototype['back_image_file_id'] = undefined;

/**
 * When the check was deposited.
 * @member {Date} deposited_at
 */
CheckTransferDeposit.prototype['deposited_at'] = undefined;

/**
 * The ID for the File containing the image of the front of the check.
 * @member {String} front_image_file_id
 */
CheckTransferDeposit.prototype['front_image_file_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
 * @member {module:model/CheckTransferDeposit.TypeEnum} type
 */
CheckTransferDeposit.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CheckTransferDeposit['TypeEnum'] = {

    /**
     * value: "check_transfer_deposit"
     * @const
     */
    "check_transfer_deposit": "check_transfer_deposit"
};



export default CheckTransferDeposit;

