/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferApproval from './TransferApproval';
import TransferCancellation from './TransferCancellation';

/**
 * The AccountTransfer model module.
 * @module model/AccountTransfer
 * @version 0.0.1
 */
class AccountTransfer {
    /**
     * Constructs a new <code>AccountTransfer</code>.
     * Account transfers move funds between your own accounts at Increase.
     * @alias module:model/AccountTransfer
     * @param accountId {String} The Account to which the transfer belongs.
     * @param amount {Number} The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
     * @param approval {module:model/TransferApproval} 
     * @param cancellation {module:model/TransferCancellation} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param currency {module:model/AccountTransfer.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
     * @param description {String} The description that will show on the transactions.
     * @param destinationAccountId {String} The destination account's identifier.
     * @param destinationTransactionId {String} The ID for the transaction receiving the transfer.
     * @param id {String} The account transfer's identifier.
     * @param network {module:model/AccountTransfer.NetworkEnum} The transfer's network.
     * @param status {module:model/AccountTransfer.StatusEnum} The lifecycle status of the transfer.
     * @param transactionId {String} The ID for the transaction funding the transfer.
     * @param type {module:model/AccountTransfer.TypeEnum} A constant representing the object's type. For this resource it will always be `account_transfer`.
     */
    constructor(accountId, amount, approval, cancellation, createdAt, currency, description, destinationAccountId, destinationTransactionId, id, network, status, transactionId, type) { 
        
        AccountTransfer.initialize(this, accountId, amount, approval, cancellation, createdAt, currency, description, destinationAccountId, destinationTransactionId, id, network, status, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, approval, cancellation, createdAt, currency, description, destinationAccountId, destinationTransactionId, id, network, status, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['approval'] = approval;
        obj['cancellation'] = cancellation;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['destination_account_id'] = destinationAccountId;
        obj['destination_transaction_id'] = destinationTransactionId;
        obj['id'] = id;
        obj['network'] = network;
        obj['status'] = status;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AccountTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountTransfer} obj Optional instance to populate.
     * @return {module:model/AccountTransfer} The populated <code>AccountTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountTransfer();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = TransferApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = TransferCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination_account_id')) {
                obj['destination_account_id'] = ApiClient.convertToType(data['destination_account_id'], 'String');
            }
            if (data.hasOwnProperty('destination_transaction_id')) {
                obj['destination_transaction_id'] = ApiClient.convertToType(data['destination_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          TransferApproval.validateJSON(data['approval']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          TransferCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['destination_account_id'] && !(typeof data['destination_account_id'] === 'string' || data['destination_account_id'] instanceof String)) {
            throw new Error("Expected the field `destination_account_id` to be a primitive type in the JSON string but got " + data['destination_account_id']);
        }
        // ensure the json data is a string
        if (data['destination_transaction_id'] && !(typeof data['destination_transaction_id'] === 'string' || data['destination_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `destination_transaction_id` to be a primitive type in the JSON string but got " + data['destination_transaction_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AccountTransfer.RequiredProperties = ["account_id", "amount", "approval", "cancellation", "created_at", "currency", "description", "destination_account_id", "destination_transaction_id", "id", "network", "status", "transaction_id", "type"];

/**
 * The Account to which the transfer belongs.
 * @member {String} account_id
 */
AccountTransfer.prototype['account_id'] = undefined;

/**
 * The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
AccountTransfer.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferApproval} approval
 */
AccountTransfer.prototype['approval'] = undefined;

/**
 * @member {module:model/TransferCancellation} cancellation
 */
AccountTransfer.prototype['cancellation'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
AccountTransfer.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 * @member {module:model/AccountTransfer.CurrencyEnum} currency
 */
AccountTransfer.prototype['currency'] = undefined;

/**
 * The description that will show on the transactions.
 * @member {String} description
 */
AccountTransfer.prototype['description'] = undefined;

/**
 * The destination account's identifier.
 * @member {String} destination_account_id
 */
AccountTransfer.prototype['destination_account_id'] = undefined;

/**
 * The ID for the transaction receiving the transfer.
 * @member {String} destination_transaction_id
 */
AccountTransfer.prototype['destination_transaction_id'] = undefined;

/**
 * The account transfer's identifier.
 * @member {String} id
 */
AccountTransfer.prototype['id'] = undefined;

/**
 * The transfer's network.
 * @member {module:model/AccountTransfer.NetworkEnum} network
 */
AccountTransfer.prototype['network'] = undefined;

/**
 * The lifecycle status of the transfer.
 * @member {module:model/AccountTransfer.StatusEnum} status
 */
AccountTransfer.prototype['status'] = undefined;

/**
 * The ID for the transaction funding the transfer.
 * @member {String} transaction_id
 */
AccountTransfer.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `account_transfer`.
 * @member {module:model/AccountTransfer.TypeEnum} type
 */
AccountTransfer.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
AccountTransfer['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
AccountTransfer['NetworkEnum'] = {

    /**
     * value: "account"
     * @const
     */
    "account": "account"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AccountTransfer['StatusEnum'] = {

    /**
     * value: "pending_approval"
     * @const
     */
    "pending_approval": "pending_approval",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AccountTransfer['TypeEnum'] = {

    /**
     * value: "account_transfer"
     * @const
     */
    "account_transfer": "account_transfer"
};



export default AccountTransfer;

