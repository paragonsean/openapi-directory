/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BookkeepingEntry model module.
 * @module model/BookkeepingEntry
 * @version 0.0.1
 */
class BookkeepingEntry {
    /**
     * Constructs a new <code>BookkeepingEntry</code>.
     * Entries are T-account entries recording debits and credits.
     * @alias module:model/BookkeepingEntry
     * @param accountId {String} The identifier for the Account the Entry belongs to.
     * @param amount {Number} The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.
     * @param entrySetId {String} The identifier for the Account the Entry belongs to.
     * @param id {String} The entry identifier.
     * @param type {module:model/BookkeepingEntry.TypeEnum} A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.
     */
    constructor(accountId, amount, entrySetId, id, type) { 
        
        BookkeepingEntry.initialize(this, accountId, amount, entrySetId, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, entrySetId, id, type) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['entry_set_id'] = entrySetId;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BookkeepingEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookkeepingEntry} obj Optional instance to populate.
     * @return {module:model/BookkeepingEntry} The populated <code>BookkeepingEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookkeepingEntry();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('entry_set_id')) {
                obj['entry_set_id'] = ApiClient.convertToType(data['entry_set_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookkeepingEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookkeepingEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BookkeepingEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['entry_set_id'] && !(typeof data['entry_set_id'] === 'string' || data['entry_set_id'] instanceof String)) {
            throw new Error("Expected the field `entry_set_id` to be a primitive type in the JSON string but got " + data['entry_set_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BookkeepingEntry.RequiredProperties = ["account_id", "amount", "entry_set_id", "id", "type"];

/**
 * The identifier for the Account the Entry belongs to.
 * @member {String} account_id
 */
BookkeepingEntry.prototype['account_id'] = undefined;

/**
 * The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
BookkeepingEntry.prototype['amount'] = undefined;

/**
 * The identifier for the Account the Entry belongs to.
 * @member {String} entry_set_id
 */
BookkeepingEntry.prototype['entry_set_id'] = undefined;

/**
 * The entry identifier.
 * @member {String} id
 */
BookkeepingEntry.prototype['id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.
 * @member {module:model/BookkeepingEntry.TypeEnum} type
 */
BookkeepingEntry.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BookkeepingEntry['TypeEnum'] = {

    /**
     * value: "bookkeeping_entry"
     * @const
     */
    "bookkeeping_entry": "bookkeeping_entry"
};



export default BookkeepingEntry;

