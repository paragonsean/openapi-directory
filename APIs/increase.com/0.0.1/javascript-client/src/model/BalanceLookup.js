/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BalanceLookup model module.
 * @module model/BalanceLookup
 * @version 0.0.1
 */
class BalanceLookup {
    /**
     * Constructs a new <code>BalanceLookup</code>.
     * Represents a request to lookup the balance of an Account at a given point in time.
     * @alias module:model/BalanceLookup
     * @param accountId {String} The identifier for the account for which the balance was queried.
     * @param availableBalance {Number} The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
     * @param currentBalance {Number} The Account's current balance, representing the sum of all posted Transactions on the Account.
     * @param type {module:model/BalanceLookup.TypeEnum} A constant representing the object's type. For this resource it will always be `balance_lookup`.
     */
    constructor(accountId, availableBalance, currentBalance, type) { 
        
        BalanceLookup.initialize(this, accountId, availableBalance, currentBalance, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, availableBalance, currentBalance, type) { 
        obj['account_id'] = accountId;
        obj['available_balance'] = availableBalance;
        obj['current_balance'] = currentBalance;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BalanceLookup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceLookup} obj Optional instance to populate.
     * @return {module:model/BalanceLookup} The populated <code>BalanceLookup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceLookup();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('available_balance')) {
                obj['available_balance'] = ApiClient.convertToType(data['available_balance'], 'Number');
            }
            if (data.hasOwnProperty('current_balance')) {
                obj['current_balance'] = ApiClient.convertToType(data['current_balance'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceLookup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceLookup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BalanceLookup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BalanceLookup.RequiredProperties = ["account_id", "available_balance", "current_balance", "type"];

/**
 * The identifier for the account for which the balance was queried.
 * @member {String} account_id
 */
BalanceLookup.prototype['account_id'] = undefined;

/**
 * The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
 * @member {Number} available_balance
 */
BalanceLookup.prototype['available_balance'] = undefined;

/**
 * The Account's current balance, representing the sum of all posted Transactions on the Account.
 * @member {Number} current_balance
 */
BalanceLookup.prototype['current_balance'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `balance_lookup`.
 * @member {module:model/BalanceLookup.TypeEnum} type
 */
BalanceLookup.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BalanceLookup['TypeEnum'] = {

    /**
     * value: "balance_lookup"
     * @const
     */
    "balance_lookup": "balance_lookup"
};



export default BalanceLookup;

