/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateALimitParameters model module.
 * @module model/CreateALimitParameters
 * @version 0.0.1
 */
class CreateALimitParameters {
    /**
     * Constructs a new <code>CreateALimitParameters</code>.
     * @alias module:model/CreateALimitParameters
     * @param metric {module:model/CreateALimitParameters.MetricEnum} The metric for the limit.
     * @param modelId {String} The identifier of the Account or Account Number you wish to associate the limit with.
     * @param value {Number} The value to test the limit against.
     */
    constructor(metric, modelId, value) { 
        
        CreateALimitParameters.initialize(this, metric, modelId, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metric, modelId, value) { 
        obj['metric'] = metric;
        obj['model_id'] = modelId;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>CreateALimitParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateALimitParameters} obj Optional instance to populate.
     * @return {module:model/CreateALimitParameters} The populated <code>CreateALimitParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateALimitParameters();

            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('model_id')) {
                obj['model_id'] = ApiClient.convertToType(data['model_id'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateALimitParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateALimitParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateALimitParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // ensure the json data is a string
        if (data['model_id'] && !(typeof data['model_id'] === 'string' || data['model_id'] instanceof String)) {
            throw new Error("Expected the field `model_id` to be a primitive type in the JSON string but got " + data['model_id']);
        }

        return true;
    }


}

CreateALimitParameters.RequiredProperties = ["metric", "model_id", "value"];

/**
 * The interval for the metric. Required if `metric` is `count` or `volume`.
 * @member {module:model/CreateALimitParameters.IntervalEnum} interval
 */
CreateALimitParameters.prototype['interval'] = undefined;

/**
 * The metric for the limit.
 * @member {module:model/CreateALimitParameters.MetricEnum} metric
 */
CreateALimitParameters.prototype['metric'] = undefined;

/**
 * The identifier of the Account or Account Number you wish to associate the limit with.
 * @member {String} model_id
 */
CreateALimitParameters.prototype['model_id'] = undefined;

/**
 * The value to test the limit against.
 * @member {Number} value
 */
CreateALimitParameters.prototype['value'] = undefined;





/**
 * Allowed values for the <code>interval</code> property.
 * @enum {String}
 * @readonly
 */
CreateALimitParameters['IntervalEnum'] = {

    /**
     * value: "transaction"
     * @const
     */
    "transaction": "transaction",

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "all_time"
     * @const
     */
    "all_time": "all_time"
};


/**
 * Allowed values for the <code>metric</code> property.
 * @enum {String}
 * @readonly
 */
CreateALimitParameters['MetricEnum'] = {

    /**
     * value: "count"
     * @const
     */
    "count": "count",

    /**
     * value: "volume"
     * @const
     */
    "volume": "volume"
};



export default CreateALimitParameters;

