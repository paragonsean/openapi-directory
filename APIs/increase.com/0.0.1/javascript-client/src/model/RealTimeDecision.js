/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardAuthorization1 from './CardAuthorization1';
import DigitalWalletAuthentication from './DigitalWalletAuthentication';
import DigitalWalletToken from './DigitalWalletToken';

/**
 * The RealTimeDecision model module.
 * @module model/RealTimeDecision
 * @version 0.0.1
 */
class RealTimeDecision {
    /**
     * Constructs a new <code>RealTimeDecision</code>.
     * Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you&#39;re interested in trying them out!
     * @alias module:model/RealTimeDecision
     * @param cardAuthorization {module:model/CardAuthorization1} 
     * @param category {module:model/RealTimeDecision.CategoryEnum} The category of the Real-Time Decision.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
     * @param digitalWalletAuthentication {module:model/DigitalWalletAuthentication} 
     * @param digitalWalletToken {module:model/DigitalWalletToken} 
     * @param id {String} The Real-Time Decision identifier.
     * @param status {module:model/RealTimeDecision.StatusEnum} The status of the Real-Time Decision.
     * @param timeoutAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
     * @param type {module:model/RealTimeDecision.TypeEnum} A constant representing the object's type. For this resource it will always be `real_time_decision`.
     */
    constructor(cardAuthorization, category, createdAt, digitalWalletAuthentication, digitalWalletToken, id, status, timeoutAt, type) { 
        
        RealTimeDecision.initialize(this, cardAuthorization, category, createdAt, digitalWalletAuthentication, digitalWalletToken, id, status, timeoutAt, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardAuthorization, category, createdAt, digitalWalletAuthentication, digitalWalletToken, id, status, timeoutAt, type) { 
        obj['card_authorization'] = cardAuthorization;
        obj['category'] = category;
        obj['created_at'] = createdAt;
        obj['digital_wallet_authentication'] = digitalWalletAuthentication;
        obj['digital_wallet_token'] = digitalWalletToken;
        obj['id'] = id;
        obj['status'] = status;
        obj['timeout_at'] = timeoutAt;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RealTimeDecision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RealTimeDecision} obj Optional instance to populate.
     * @return {module:model/RealTimeDecision} The populated <code>RealTimeDecision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RealTimeDecision();

            if (data.hasOwnProperty('card_authorization')) {
                obj['card_authorization'] = CardAuthorization1.constructFromObject(data['card_authorization']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('digital_wallet_authentication')) {
                obj['digital_wallet_authentication'] = DigitalWalletAuthentication.constructFromObject(data['digital_wallet_authentication']);
            }
            if (data.hasOwnProperty('digital_wallet_token')) {
                obj['digital_wallet_token'] = DigitalWalletToken.constructFromObject(data['digital_wallet_token']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeout_at')) {
                obj['timeout_at'] = ApiClient.convertToType(data['timeout_at'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RealTimeDecision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RealTimeDecision</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RealTimeDecision.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `card_authorization`
        if (data['card_authorization']) { // data not null
          CardAuthorization1.validateJSON(data['card_authorization']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `digital_wallet_authentication`
        if (data['digital_wallet_authentication']) { // data not null
          DigitalWalletAuthentication.validateJSON(data['digital_wallet_authentication']);
        }
        // validate the optional field `digital_wallet_token`
        if (data['digital_wallet_token']) { // data not null
          DigitalWalletToken.validateJSON(data['digital_wallet_token']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RealTimeDecision.RequiredProperties = ["card_authorization", "category", "created_at", "digital_wallet_authentication", "digital_wallet_token", "id", "status", "timeout_at", "type"];

/**
 * @member {module:model/CardAuthorization1} card_authorization
 */
RealTimeDecision.prototype['card_authorization'] = undefined;

/**
 * The category of the Real-Time Decision.
 * @member {module:model/RealTimeDecision.CategoryEnum} category
 */
RealTimeDecision.prototype['category'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
 * @member {Date} created_at
 */
RealTimeDecision.prototype['created_at'] = undefined;

/**
 * @member {module:model/DigitalWalletAuthentication} digital_wallet_authentication
 */
RealTimeDecision.prototype['digital_wallet_authentication'] = undefined;

/**
 * @member {module:model/DigitalWalletToken} digital_wallet_token
 */
RealTimeDecision.prototype['digital_wallet_token'] = undefined;

/**
 * The Real-Time Decision identifier.
 * @member {String} id
 */
RealTimeDecision.prototype['id'] = undefined;

/**
 * The status of the Real-Time Decision.
 * @member {module:model/RealTimeDecision.StatusEnum} status
 */
RealTimeDecision.prototype['status'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
 * @member {Date} timeout_at
 */
RealTimeDecision.prototype['timeout_at'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `real_time_decision`.
 * @member {module:model/RealTimeDecision.TypeEnum} type
 */
RealTimeDecision.prototype['type'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
RealTimeDecision['CategoryEnum'] = {

    /**
     * value: "card_authorization_requested"
     * @const
     */
    "card_authorization_requested": "card_authorization_requested",

    /**
     * value: "digital_wallet_token_requested"
     * @const
     */
    "digital_wallet_token_requested": "digital_wallet_token_requested",

    /**
     * value: "digital_wallet_authentication_requested"
     * @const
     */
    "digital_wallet_authentication_requested": "digital_wallet_authentication_requested"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RealTimeDecision['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "responded"
     * @const
     */
    "responded": "responded",

    /**
     * value: "timed_out"
     * @const
     */
    "timed_out": "timed_out"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RealTimeDecision['TypeEnum'] = {

    /**
     * value: "real_time_decision"
     * @const
     */
    "real_time_decision": "real_time_decision"
};



export default RealTimeDecision;

