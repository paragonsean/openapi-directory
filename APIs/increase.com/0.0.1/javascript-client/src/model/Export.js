/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Export model module.
 * @module model/Export
 * @version 0.0.1
 */
class Export {
    /**
     * Constructs a new <code>Export</code>.
     * Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports).
     * @alias module:model/Export
     * @param category {module:model/Export.CategoryEnum} The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.
     * @param createdAt {Date} The time the Export was created.
     * @param fileDownloadUrl {String} A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.
     * @param fileId {String} The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.
     * @param id {String} The Export identifier.
     * @param status {module:model/Export.StatusEnum} The status of the Export.
     * @param type {module:model/Export.TypeEnum} A constant representing the object's type. For this resource it will always be `export`.
     */
    constructor(category, createdAt, fileDownloadUrl, fileId, id, status, type) { 
        
        Export.initialize(this, category, createdAt, fileDownloadUrl, fileId, id, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, createdAt, fileDownloadUrl, fileId, id, status, type) { 
        obj['category'] = category;
        obj['created_at'] = createdAt;
        obj['file_download_url'] = fileDownloadUrl;
        obj['file_id'] = fileId;
        obj['id'] = id;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Export</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Export} obj Optional instance to populate.
     * @return {module:model/Export} The populated <code>Export</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Export();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('file_download_url')) {
                obj['file_download_url'] = ApiClient.convertToType(data['file_download_url'], 'String');
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Export</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Export</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Export.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['file_download_url'] && !(typeof data['file_download_url'] === 'string' || data['file_download_url'] instanceof String)) {
            throw new Error("Expected the field `file_download_url` to be a primitive type in the JSON string but got " + data['file_download_url']);
        }
        // ensure the json data is a string
        if (data['file_id'] && !(typeof data['file_id'] === 'string' || data['file_id'] instanceof String)) {
            throw new Error("Expected the field `file_id` to be a primitive type in the JSON string but got " + data['file_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Export.RequiredProperties = ["category", "created_at", "file_download_url", "file_id", "id", "status", "type"];

/**
 * The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.
 * @member {module:model/Export.CategoryEnum} category
 */
Export.prototype['category'] = undefined;

/**
 * The time the Export was created.
 * @member {Date} created_at
 */
Export.prototype['created_at'] = undefined;

/**
 * A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.
 * @member {String} file_download_url
 */
Export.prototype['file_download_url'] = undefined;

/**
 * The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.
 * @member {String} file_id
 */
Export.prototype['file_id'] = undefined;

/**
 * The Export identifier.
 * @member {String} id
 */
Export.prototype['id'] = undefined;

/**
 * The status of the Export.
 * @member {module:model/Export.StatusEnum} status
 */
Export.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `export`.
 * @member {module:model/Export.TypeEnum} type
 */
Export.prototype['type'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Export['CategoryEnum'] = {

    /**
     * value: "transaction_csv"
     * @const
     */
    "transaction_csv": "transaction_csv",

    /**
     * value: "balance_csv"
     * @const
     */
    "balance_csv": "balance_csv"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Export['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Export['TypeEnum'] = {

    /**
     * value: "export"
     * @const
     */
    "export": "export"
};



export default Export;

