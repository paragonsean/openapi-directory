/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The File model module.
 * @module model/File
 * @version 0.0.1
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * Files are objects that represent a file hosted on Increase&#39;s servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF).
     * @alias module:model/File
     * @param createdAt {Date} The time the File was created.
     * @param description {String} A description of the File.
     * @param direction {module:model/File.DirectionEnum} Whether the File was generated by Increase or by you and sent to Increase.
     * @param downloadUrl {String} A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
     * @param filename {String} The filename that was provided upon upload or generated by Increase.
     * @param id {String} The File's identifier.
     * @param purpose {module:model/File.PurposeEnum} What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
     * @param type {module:model/File.TypeEnum} A constant representing the object's type. For this resource it will always be `file`.
     */
    constructor(createdAt, description, direction, downloadUrl, filename, id, purpose, type) { 
        
        File.initialize(this, createdAt, description, direction, downloadUrl, filename, id, purpose, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, description, direction, downloadUrl, filename, id, purpose, type) { 
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['direction'] = direction;
        obj['download_url'] = downloadUrl;
        obj['filename'] = filename;
        obj['id'] = id;
        obj['purpose'] = purpose;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of File.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

File.RequiredProperties = ["created_at", "description", "direction", "download_url", "filename", "id", "purpose", "type"];

/**
 * The time the File was created.
 * @member {Date} created_at
 */
File.prototype['created_at'] = undefined;

/**
 * A description of the File.
 * @member {String} description
 */
File.prototype['description'] = undefined;

/**
 * Whether the File was generated by Increase or by you and sent to Increase.
 * @member {module:model/File.DirectionEnum} direction
 */
File.prototype['direction'] = undefined;

/**
 * A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
 * @member {String} download_url
 */
File.prototype['download_url'] = undefined;

/**
 * The filename that was provided upon upload or generated by Increase.
 * @member {String} filename
 */
File.prototype['filename'] = undefined;

/**
 * The File's identifier.
 * @member {String} id
 */
File.prototype['id'] = undefined;

/**
 * What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 * @member {module:model/File.PurposeEnum} purpose
 */
File.prototype['purpose'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `file`.
 * @member {module:model/File.TypeEnum} type
 */
File.prototype['type'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
File['DirectionEnum'] = {

    /**
     * value: "to_increase"
     * @const
     */
    "to_increase": "to_increase",

    /**
     * value: "from_increase"
     * @const
     */
    "from_increase": "from_increase"
};


/**
 * Allowed values for the <code>purpose</code> property.
 * @enum {String}
 * @readonly
 */
File['PurposeEnum'] = {

    /**
     * value: "check_image_front"
     * @const
     */
    "check_image_front": "check_image_front",

    /**
     * value: "check_image_back"
     * @const
     */
    "check_image_back": "check_image_back",

    /**
     * value: "form_1099_int"
     * @const
     */
    "form_1099_int": "form_1099_int",

    /**
     * value: "form_ss_4"
     * @const
     */
    "form_ss_4": "form_ss_4",

    /**
     * value: "identity_document"
     * @const
     */
    "identity_document": "identity_document",

    /**
     * value: "increase_statement"
     * @const
     */
    "increase_statement": "increase_statement",

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "trust_formation_document"
     * @const
     */
    "trust_formation_document": "trust_formation_document",

    /**
     * value: "digital_wallet_artwork"
     * @const
     */
    "digital_wallet_artwork": "digital_wallet_artwork",

    /**
     * value: "digital_wallet_app_icon"
     * @const
     */
    "digital_wallet_app_icon": "digital_wallet_app_icon",

    /**
     * value: "document_request"
     * @const
     */
    "document_request": "document_request",

    /**
     * value: "entity_supplemental_document"
     * @const
     */
    "entity_supplemental_document": "entity_supplemental_document",

    /**
     * value: "export"
     * @const
     */
    "export": "export"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
File['TypeEnum'] = {

    /**
     * value: "file"
     * @const
     */
    "file": "file"
};



export default File;

