/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHNotificationOfChange from './ACHNotificationOfChange';
import ACHTransferReturn from './ACHTransferReturn';
import ACHTransferSubmission from './ACHTransferSubmission';
import TransferApproval from './TransferApproval';
import TransferCancellation from './TransferCancellation';

/**
 * The AchTransfer model module.
 * @module model/AchTransfer
 * @version 0.0.1
 */
class AchTransfer {
    /**
     * Constructs a new <code>AchTransfer</code>.
     * ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
     * @alias module:model/AchTransfer
     * @param accountId {String} The Account to which the transfer belongs.
     * @param accountNumber {String} The destination account number.
     * @param addendum {String} Additional information that will be sent to the recipient.
     * @param amount {Number} The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
     * @param approval {module:model/TransferApproval} 
     * @param cancellation {module:model/TransferCancellation} 
     * @param companyDescriptiveDate {String} The description of the date of the transfer.
     * @param companyDiscretionaryData {String} The data you chose to associate with the transfer.
     * @param companyEntryDescription {String} The description of the transfer you set to be shown to the recipient.
     * @param companyName {String} The name by which the recipient knows you.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param currency {module:model/AchTransfer.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
     * @param effectiveDate {Date} The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param externalAccountId {String} The identifier of the External Account the transfer was made to, if any.
     * @param funding {module:model/AchTransfer.FundingEnum} The type of the account to which the transfer will be sent.
     * @param id {String} The ACH transfer's identifier.
     * @param individualId {String} Your identifer for the transfer recipient.
     * @param individualName {String} The name of the transfer recipient. This value is information and not verified by the recipient's bank.
     * @param network {module:model/AchTransfer.NetworkEnum} The transfer's network.
     * @param notificationsOfChange {Array.<module:model/ACHNotificationOfChange>} If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
     * @param _return {module:model/ACHTransferReturn} 
     * @param routingNumber {String} The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * @param standardEntryClassCode {module:model/AchTransfer.StandardEntryClassCodeEnum} The Standard Entry Class (SEC) code to use for the transfer.
     * @param statementDescriptor {String} The descriptor that will show on the recipient's bank statement.
     * @param status {module:model/AchTransfer.StatusEnum} The lifecycle status of the transfer.
     * @param submission {module:model/ACHTransferSubmission} 
     * @param transactionId {String} The ID for the transaction funding the transfer.
     * @param type {module:model/AchTransfer.TypeEnum} A constant representing the object's type. For this resource it will always be `ach_transfer`.
     */
    constructor(accountId, accountNumber, addendum, amount, approval, cancellation, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, createdAt, currency, effectiveDate, externalAccountId, funding, id, individualId, individualName, network, notificationsOfChange, _return, routingNumber, standardEntryClassCode, statementDescriptor, status, submission, transactionId, type) { 
        
        AchTransfer.initialize(this, accountId, accountNumber, addendum, amount, approval, cancellation, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, createdAt, currency, effectiveDate, externalAccountId, funding, id, individualId, individualName, network, notificationsOfChange, _return, routingNumber, standardEntryClassCode, statementDescriptor, status, submission, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountNumber, addendum, amount, approval, cancellation, companyDescriptiveDate, companyDiscretionaryData, companyEntryDescription, companyName, createdAt, currency, effectiveDate, externalAccountId, funding, id, individualId, individualName, network, notificationsOfChange, _return, routingNumber, standardEntryClassCode, statementDescriptor, status, submission, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['account_number'] = accountNumber;
        obj['addendum'] = addendum;
        obj['amount'] = amount;
        obj['approval'] = approval;
        obj['cancellation'] = cancellation;
        obj['company_descriptive_date'] = companyDescriptiveDate;
        obj['company_discretionary_data'] = companyDiscretionaryData;
        obj['company_entry_description'] = companyEntryDescription;
        obj['company_name'] = companyName;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['effective_date'] = effectiveDate;
        obj['external_account_id'] = externalAccountId;
        obj['funding'] = funding;
        obj['id'] = id;
        obj['individual_id'] = individualId;
        obj['individual_name'] = individualName;
        obj['network'] = network;
        obj['notifications_of_change'] = notificationsOfChange;
        obj['return'] = _return;
        obj['routing_number'] = routingNumber;
        obj['standard_entry_class_code'] = standardEntryClassCode;
        obj['statement_descriptor'] = statementDescriptor;
        obj['status'] = status;
        obj['submission'] = submission;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AchTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchTransfer} obj Optional instance to populate.
     * @return {module:model/AchTransfer} The populated <code>AchTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchTransfer();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('addendum')) {
                obj['addendum'] = ApiClient.convertToType(data['addendum'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = TransferApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = TransferCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('company_descriptive_date')) {
                obj['company_descriptive_date'] = ApiClient.convertToType(data['company_descriptive_date'], 'String');
            }
            if (data.hasOwnProperty('company_discretionary_data')) {
                obj['company_discretionary_data'] = ApiClient.convertToType(data['company_discretionary_data'], 'String');
            }
            if (data.hasOwnProperty('company_entry_description')) {
                obj['company_entry_description'] = ApiClient.convertToType(data['company_entry_description'], 'String');
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('effective_date')) {
                obj['effective_date'] = ApiClient.convertToType(data['effective_date'], 'Date');
            }
            if (data.hasOwnProperty('external_account_id')) {
                obj['external_account_id'] = ApiClient.convertToType(data['external_account_id'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('individual_id')) {
                obj['individual_id'] = ApiClient.convertToType(data['individual_id'], 'String');
            }
            if (data.hasOwnProperty('individual_name')) {
                obj['individual_name'] = ApiClient.convertToType(data['individual_name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('notifications_of_change')) {
                obj['notifications_of_change'] = ApiClient.convertToType(data['notifications_of_change'], [ACHNotificationOfChange]);
            }
            if (data.hasOwnProperty('return')) {
                obj['return'] = ACHTransferReturn.constructFromObject(data['return']);
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('standard_entry_class_code')) {
                obj['standard_entry_class_code'] = ApiClient.convertToType(data['standard_entry_class_code'], 'String');
            }
            if (data.hasOwnProperty('statement_descriptor')) {
                obj['statement_descriptor'] = ApiClient.convertToType(data['statement_descriptor'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = ACHTransferSubmission.constructFromObject(data['submission']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AchTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AchTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AchTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['addendum'] && !(typeof data['addendum'] === 'string' || data['addendum'] instanceof String)) {
            throw new Error("Expected the field `addendum` to be a primitive type in the JSON string but got " + data['addendum']);
        }
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          TransferApproval.validateJSON(data['approval']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          TransferCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['company_descriptive_date'] && !(typeof data['company_descriptive_date'] === 'string' || data['company_descriptive_date'] instanceof String)) {
            throw new Error("Expected the field `company_descriptive_date` to be a primitive type in the JSON string but got " + data['company_descriptive_date']);
        }
        // ensure the json data is a string
        if (data['company_discretionary_data'] && !(typeof data['company_discretionary_data'] === 'string' || data['company_discretionary_data'] instanceof String)) {
            throw new Error("Expected the field `company_discretionary_data` to be a primitive type in the JSON string but got " + data['company_discretionary_data']);
        }
        // ensure the json data is a string
        if (data['company_entry_description'] && !(typeof data['company_entry_description'] === 'string' || data['company_entry_description'] instanceof String)) {
            throw new Error("Expected the field `company_entry_description` to be a primitive type in the JSON string but got " + data['company_entry_description']);
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['external_account_id'] && !(typeof data['external_account_id'] === 'string' || data['external_account_id'] instanceof String)) {
            throw new Error("Expected the field `external_account_id` to be a primitive type in the JSON string but got " + data['external_account_id']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['individual_id'] && !(typeof data['individual_id'] === 'string' || data['individual_id'] instanceof String)) {
            throw new Error("Expected the field `individual_id` to be a primitive type in the JSON string but got " + data['individual_id']);
        }
        // ensure the json data is a string
        if (data['individual_name'] && !(typeof data['individual_name'] === 'string' || data['individual_name'] instanceof String)) {
            throw new Error("Expected the field `individual_name` to be a primitive type in the JSON string but got " + data['individual_name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        if (data['notifications_of_change']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notifications_of_change'])) {
                throw new Error("Expected the field `notifications_of_change` to be an array in the JSON data but got " + data['notifications_of_change']);
            }
            // validate the optional field `notifications_of_change` (array)
            for (const item of data['notifications_of_change']) {
                ACHNotificationOfChange.validateJSON(item);
            };
        }
        // validate the optional field `return`
        if (data['return']) { // data not null
          ACHTransferReturn.validateJSON(data['return']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['standard_entry_class_code'] && !(typeof data['standard_entry_class_code'] === 'string' || data['standard_entry_class_code'] instanceof String)) {
            throw new Error("Expected the field `standard_entry_class_code` to be a primitive type in the JSON string but got " + data['standard_entry_class_code']);
        }
        // ensure the json data is a string
        if (data['statement_descriptor'] && !(typeof data['statement_descriptor'] === 'string' || data['statement_descriptor'] instanceof String)) {
            throw new Error("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got " + data['statement_descriptor']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `submission`
        if (data['submission']) { // data not null
          ACHTransferSubmission.validateJSON(data['submission']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AchTransfer.RequiredProperties = ["account_id", "account_number", "addendum", "amount", "approval", "cancellation", "company_descriptive_date", "company_discretionary_data", "company_entry_description", "company_name", "created_at", "currency", "effective_date", "external_account_id", "funding", "id", "individual_id", "individual_name", "network", "notifications_of_change", "return", "routing_number", "standard_entry_class_code", "statement_descriptor", "status", "submission", "transaction_id", "type"];

/**
 * The Account to which the transfer belongs.
 * @member {String} account_id
 */
AchTransfer.prototype['account_id'] = undefined;

/**
 * The destination account number.
 * @member {String} account_number
 */
AchTransfer.prototype['account_number'] = undefined;

/**
 * Additional information that will be sent to the recipient.
 * @member {String} addendum
 */
AchTransfer.prototype['addendum'] = undefined;

/**
 * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
 * @member {Number} amount
 */
AchTransfer.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferApproval} approval
 */
AchTransfer.prototype['approval'] = undefined;

/**
 * @member {module:model/TransferCancellation} cancellation
 */
AchTransfer.prototype['cancellation'] = undefined;

/**
 * The description of the date of the transfer.
 * @member {String} company_descriptive_date
 */
AchTransfer.prototype['company_descriptive_date'] = undefined;

/**
 * The data you chose to associate with the transfer.
 * @member {String} company_discretionary_data
 */
AchTransfer.prototype['company_discretionary_data'] = undefined;

/**
 * The description of the transfer you set to be shown to the recipient.
 * @member {String} company_entry_description
 */
AchTransfer.prototype['company_entry_description'] = undefined;

/**
 * The name by which the recipient knows you.
 * @member {String} company_name
 */
AchTransfer.prototype['company_name'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
AchTransfer.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
 * @member {module:model/AchTransfer.CurrencyEnum} currency
 */
AchTransfer.prototype['currency'] = undefined;

/**
 * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} effective_date
 */
AchTransfer.prototype['effective_date'] = undefined;

/**
 * The identifier of the External Account the transfer was made to, if any.
 * @member {String} external_account_id
 */
AchTransfer.prototype['external_account_id'] = undefined;

/**
 * The type of the account to which the transfer will be sent.
 * @member {module:model/AchTransfer.FundingEnum} funding
 */
AchTransfer.prototype['funding'] = undefined;

/**
 * The ACH transfer's identifier.
 * @member {String} id
 */
AchTransfer.prototype['id'] = undefined;

/**
 * Your identifer for the transfer recipient.
 * @member {String} individual_id
 */
AchTransfer.prototype['individual_id'] = undefined;

/**
 * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
 * @member {String} individual_name
 */
AchTransfer.prototype['individual_name'] = undefined;

/**
 * The transfer's network.
 * @member {module:model/AchTransfer.NetworkEnum} network
 */
AchTransfer.prototype['network'] = undefined;

/**
 * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
 * @member {Array.<module:model/ACHNotificationOfChange>} notifications_of_change
 */
AchTransfer.prototype['notifications_of_change'] = undefined;

/**
 * @member {module:model/ACHTransferReturn} return
 */
AchTransfer.prototype['return'] = undefined;

/**
 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
 * @member {String} routing_number
 */
AchTransfer.prototype['routing_number'] = undefined;

/**
 * The Standard Entry Class (SEC) code to use for the transfer.
 * @member {module:model/AchTransfer.StandardEntryClassCodeEnum} standard_entry_class_code
 */
AchTransfer.prototype['standard_entry_class_code'] = undefined;

/**
 * The descriptor that will show on the recipient's bank statement.
 * @member {String} statement_descriptor
 */
AchTransfer.prototype['statement_descriptor'] = undefined;

/**
 * The lifecycle status of the transfer.
 * @member {module:model/AchTransfer.StatusEnum} status
 */
AchTransfer.prototype['status'] = undefined;

/**
 * @member {module:model/ACHTransferSubmission} submission
 */
AchTransfer.prototype['submission'] = undefined;

/**
 * The ID for the transaction funding the transfer.
 * @member {String} transaction_id
 */
AchTransfer.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `ach_transfer`.
 * @member {module:model/AchTransfer.TypeEnum} type
 */
AchTransfer.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>funding</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['FundingEnum'] = {

    /**
     * value: "checking"
     * @const
     */
    "checking": "checking",

    /**
     * value: "savings"
     * @const
     */
    "savings": "savings"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['NetworkEnum'] = {

    /**
     * value: "ach"
     * @const
     */
    "ach": "ach"
};


/**
 * Allowed values for the <code>standard_entry_class_code</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['StandardEntryClassCodeEnum'] = {

    /**
     * value: "corporate_credit_or_debit"
     * @const
     */
    "corporate_credit_or_debit": "corporate_credit_or_debit",

    /**
     * value: "prearranged_payments_and_deposit"
     * @const
     */
    "prearranged_payments_and_deposit": "prearranged_payments_and_deposit",

    /**
     * value: "internet_initiated"
     * @const
     */
    "internet_initiated": "internet_initiated"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['StatusEnum'] = {

    /**
     * value: "pending_approval"
     * @const
     */
    "pending_approval": "pending_approval",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "pending_reviewing"
     * @const
     */
    "pending_reviewing": "pending_reviewing",

    /**
     * value: "pending_submission"
     * @const
     */
    "pending_submission": "pending_submission",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "returned"
     * @const
     */
    "returned": "returned",

    /**
     * value: "requires_attention"
     * @const
     */
    "requires_attention": "requires_attention",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AchTransfer['TypeEnum'] = {

    /**
     * value: "ach_transfer"
     * @const
     */
    "ach_transfer": "ach_transfer"
};



export default AchTransfer;

