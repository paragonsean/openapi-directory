/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateACheckTransferParametersReturnAddress from './CreateACheckTransferParametersReturnAddress';

/**
 * The CreateACheckTransferParameters model module.
 * @module model/CreateACheckTransferParameters
 * @version 0.0.1
 */
class CreateACheckTransferParameters {
    /**
     * Constructs a new <code>CreateACheckTransferParameters</code>.
     * @alias module:model/CreateACheckTransferParameters
     * @param accountId {String} The identifier for the account that will send the transfer.
     * @param addressCity {String} The city of the check's destination.
     * @param addressLine1 {String} The street address of the check's destination.
     * @param addressState {String} The state of the check's destination.
     * @param addressZip {String} The postal code of the check's destination.
     * @param amount {Number} The transfer amount in cents.
     * @param message {String} The descriptor that will be printed on the memo field on the check.
     * @param recipientName {String} The name that will be printed on the check.
     */
    constructor(accountId, addressCity, addressLine1, addressState, addressZip, amount, message, recipientName) { 
        
        CreateACheckTransferParameters.initialize(this, accountId, addressCity, addressLine1, addressState, addressZip, amount, message, recipientName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, addressCity, addressLine1, addressState, addressZip, amount, message, recipientName) { 
        obj['account_id'] = accountId;
        obj['address_city'] = addressCity;
        obj['address_line1'] = addressLine1;
        obj['address_state'] = addressState;
        obj['address_zip'] = addressZip;
        obj['amount'] = amount;
        obj['message'] = message;
        obj['recipient_name'] = recipientName;
    }

    /**
     * Constructs a <code>CreateACheckTransferParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateACheckTransferParameters} obj Optional instance to populate.
     * @return {module:model/CreateACheckTransferParameters} The populated <code>CreateACheckTransferParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateACheckTransferParameters();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], 'String');
            }
            if (data.hasOwnProperty('address_line1')) {
                obj['address_line1'] = ApiClient.convertToType(data['address_line1'], 'String');
            }
            if (data.hasOwnProperty('address_line2')) {
                obj['address_line2'] = ApiClient.convertToType(data['address_line2'], 'String');
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], 'String');
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('recipient_name')) {
                obj['recipient_name'] = ApiClient.convertToType(data['recipient_name'], 'String');
            }
            if (data.hasOwnProperty('require_approval')) {
                obj['require_approval'] = ApiClient.convertToType(data['require_approval'], 'Boolean');
            }
            if (data.hasOwnProperty('return_address')) {
                obj['return_address'] = CreateACheckTransferParametersReturnAddress.constructFromObject(data['return_address']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateACheckTransferParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateACheckTransferParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateACheckTransferParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['address_city'] && !(typeof data['address_city'] === 'string' || data['address_city'] instanceof String)) {
            throw new Error("Expected the field `address_city` to be a primitive type in the JSON string but got " + data['address_city']);
        }
        // ensure the json data is a string
        if (data['address_line1'] && !(typeof data['address_line1'] === 'string' || data['address_line1'] instanceof String)) {
            throw new Error("Expected the field `address_line1` to be a primitive type in the JSON string but got " + data['address_line1']);
        }
        // ensure the json data is a string
        if (data['address_line2'] && !(typeof data['address_line2'] === 'string' || data['address_line2'] instanceof String)) {
            throw new Error("Expected the field `address_line2` to be a primitive type in the JSON string but got " + data['address_line2']);
        }
        // ensure the json data is a string
        if (data['address_state'] && !(typeof data['address_state'] === 'string' || data['address_state'] instanceof String)) {
            throw new Error("Expected the field `address_state` to be a primitive type in the JSON string but got " + data['address_state']);
        }
        // ensure the json data is a string
        if (data['address_zip'] && !(typeof data['address_zip'] === 'string' || data['address_zip'] instanceof String)) {
            throw new Error("Expected the field `address_zip` to be a primitive type in the JSON string but got " + data['address_zip']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['recipient_name'] && !(typeof data['recipient_name'] === 'string' || data['recipient_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_name` to be a primitive type in the JSON string but got " + data['recipient_name']);
        }
        // validate the optional field `return_address`
        if (data['return_address']) { // data not null
          CreateACheckTransferParametersReturnAddress.validateJSON(data['return_address']);
        }

        return true;
    }


}

CreateACheckTransferParameters.RequiredProperties = ["account_id", "address_city", "address_line1", "address_state", "address_zip", "amount", "message", "recipient_name"];

/**
 * The identifier for the account that will send the transfer.
 * @member {String} account_id
 */
CreateACheckTransferParameters.prototype['account_id'] = undefined;

/**
 * The city of the check's destination.
 * @member {String} address_city
 */
CreateACheckTransferParameters.prototype['address_city'] = undefined;

/**
 * The street address of the check's destination.
 * @member {String} address_line1
 */
CreateACheckTransferParameters.prototype['address_line1'] = undefined;

/**
 * The second line of the address of the check's destination.
 * @member {String} address_line2
 */
CreateACheckTransferParameters.prototype['address_line2'] = undefined;

/**
 * The state of the check's destination.
 * @member {String} address_state
 */
CreateACheckTransferParameters.prototype['address_state'] = undefined;

/**
 * The postal code of the check's destination.
 * @member {String} address_zip
 */
CreateACheckTransferParameters.prototype['address_zip'] = undefined;

/**
 * The transfer amount in cents.
 * @member {Number} amount
 */
CreateACheckTransferParameters.prototype['amount'] = undefined;

/**
 * The descriptor that will be printed on the memo field on the check.
 * @member {String} message
 */
CreateACheckTransferParameters.prototype['message'] = undefined;

/**
 * The descriptor that will be printed on the letter included with the check.
 * @member {String} note
 */
CreateACheckTransferParameters.prototype['note'] = undefined;

/**
 * The name that will be printed on the check.
 * @member {String} recipient_name
 */
CreateACheckTransferParameters.prototype['recipient_name'] = undefined;

/**
 * Whether the transfer requires explicit approval via the dashboard or API.
 * @member {Boolean} require_approval
 */
CreateACheckTransferParameters.prototype['require_approval'] = undefined;

/**
 * @member {module:model/CreateACheckTransferParametersReturnAddress} return_address
 */
CreateACheckTransferParameters.prototype['return_address'] = undefined;






export default CreateACheckTransferParameters;

