/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferCancellation model module.
 * @module model/TransferCancellation
 * @version 0.0.1
 */
class TransferCancellation {
    /**
     * Constructs a new <code>TransferCancellation</code>.
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     * @alias module:model/TransferCancellation
     * @param canceledAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
     * @param canceledBy {String} If the Transfer was canceled by a user in the dashboard, the email address of that user.
     */
    constructor(canceledAt, canceledBy) { 
        
        TransferCancellation.initialize(this, canceledAt, canceledBy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, canceledAt, canceledBy) { 
        obj['canceled_at'] = canceledAt;
        obj['canceled_by'] = canceledBy;
    }

    /**
     * Constructs a <code>TransferCancellation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferCancellation} obj Optional instance to populate.
     * @return {module:model/TransferCancellation} The populated <code>TransferCancellation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferCancellation();

            if (data.hasOwnProperty('canceled_at')) {
                obj['canceled_at'] = ApiClient.convertToType(data['canceled_at'], 'Date');
            }
            if (data.hasOwnProperty('canceled_by')) {
                obj['canceled_by'] = ApiClient.convertToType(data['canceled_by'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferCancellation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferCancellation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferCancellation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canceled_by'] && !(typeof data['canceled_by'] === 'string' || data['canceled_by'] instanceof String)) {
            throw new Error("Expected the field `canceled_by` to be a primitive type in the JSON string but got " + data['canceled_by']);
        }

        return true;
    }


}

TransferCancellation.RequiredProperties = ["canceled_at", "canceled_by"];

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
 * @member {Date} canceled_at
 */
TransferCancellation.prototype['canceled_at'] = undefined;

/**
 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
 * @member {String} canceled_by
 */
TransferCancellation.prototype['canceled_by'] = undefined;






export default TransferCancellation;

