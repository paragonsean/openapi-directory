/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkDetails from './NetworkDetails';

/**
 * The CardAuthorization model module.
 * @module model/CardAuthorization
 * @version 0.0.1
 */
class CardAuthorization {
    /**
     * Constructs a new <code>CardAuthorization</code>.
     * A Card Authorization object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;card_authorization&#x60;.
     * @alias module:model/CardAuthorization
     * @param amount {Number} The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param currency {module:model/CardAuthorization.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
     * @param digitalWalletTokenId {String} If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
     * @param id {String} The Card Authorization identifier.
     * @param merchantAcceptorId {String} The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
     * @param merchantCategoryCode {String} The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
     * @param merchantCity {String} The city the merchant resides in.
     * @param merchantCountry {String} The country the merchant resides in.
     * @param merchantDescriptor {String} The merchant descriptor of the merchant the card is transacting with.
     * @param network {module:model/CardAuthorization.NetworkEnum} The payment network used to process this card authorization
     * @param networkDetails {module:model/NetworkDetails} 
     * @param realTimeDecisionId {String} The identifier of the Real-Time Decision sent to approve or decline this transaction.
     * @param type {module:model/CardAuthorization.TypeEnum} A constant representing the object's type. For this resource it will always be `card_authorization`.
     */
    constructor(amount, currency, digitalWalletTokenId, id, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, realTimeDecisionId, type) { 
        
        CardAuthorization.initialize(this, amount, currency, digitalWalletTokenId, id, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, realTimeDecisionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, currency, digitalWalletTokenId, id, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, realTimeDecisionId, type) { 
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['digital_wallet_token_id'] = digitalWalletTokenId;
        obj['id'] = id;
        obj['merchant_acceptor_id'] = merchantAcceptorId;
        obj['merchant_category_code'] = merchantCategoryCode;
        obj['merchant_city'] = merchantCity;
        obj['merchant_country'] = merchantCountry;
        obj['merchant_descriptor'] = merchantDescriptor;
        obj['network'] = network;
        obj['network_details'] = networkDetails;
        obj['real_time_decision_id'] = realTimeDecisionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CardAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardAuthorization} obj Optional instance to populate.
     * @return {module:model/CardAuthorization} The populated <code>CardAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardAuthorization();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('digital_wallet_token_id')) {
                obj['digital_wallet_token_id'] = ApiClient.convertToType(data['digital_wallet_token_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merchant_acceptor_id')) {
                obj['merchant_acceptor_id'] = ApiClient.convertToType(data['merchant_acceptor_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_category_code')) {
                obj['merchant_category_code'] = ApiClient.convertToType(data['merchant_category_code'], 'String');
            }
            if (data.hasOwnProperty('merchant_city')) {
                obj['merchant_city'] = ApiClient.convertToType(data['merchant_city'], 'String');
            }
            if (data.hasOwnProperty('merchant_country')) {
                obj['merchant_country'] = ApiClient.convertToType(data['merchant_country'], 'String');
            }
            if (data.hasOwnProperty('merchant_descriptor')) {
                obj['merchant_descriptor'] = ApiClient.convertToType(data['merchant_descriptor'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('network_details')) {
                obj['network_details'] = NetworkDetails.constructFromObject(data['network_details']);
            }
            if (data.hasOwnProperty('real_time_decision_id')) {
                obj['real_time_decision_id'] = ApiClient.convertToType(data['real_time_decision_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardAuthorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardAuthorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['digital_wallet_token_id'] && !(typeof data['digital_wallet_token_id'] === 'string' || data['digital_wallet_token_id'] instanceof String)) {
            throw new Error("Expected the field `digital_wallet_token_id` to be a primitive type in the JSON string but got " + data['digital_wallet_token_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merchant_acceptor_id'] && !(typeof data['merchant_acceptor_id'] === 'string' || data['merchant_acceptor_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_acceptor_id` to be a primitive type in the JSON string but got " + data['merchant_acceptor_id']);
        }
        // ensure the json data is a string
        if (data['merchant_category_code'] && !(typeof data['merchant_category_code'] === 'string' || data['merchant_category_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got " + data['merchant_category_code']);
        }
        // ensure the json data is a string
        if (data['merchant_city'] && !(typeof data['merchant_city'] === 'string' || data['merchant_city'] instanceof String)) {
            throw new Error("Expected the field `merchant_city` to be a primitive type in the JSON string but got " + data['merchant_city']);
        }
        // ensure the json data is a string
        if (data['merchant_country'] && !(typeof data['merchant_country'] === 'string' || data['merchant_country'] instanceof String)) {
            throw new Error("Expected the field `merchant_country` to be a primitive type in the JSON string but got " + data['merchant_country']);
        }
        // ensure the json data is a string
        if (data['merchant_descriptor'] && !(typeof data['merchant_descriptor'] === 'string' || data['merchant_descriptor'] instanceof String)) {
            throw new Error("Expected the field `merchant_descriptor` to be a primitive type in the JSON string but got " + data['merchant_descriptor']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `network_details`
        if (data['network_details']) { // data not null
          NetworkDetails.validateJSON(data['network_details']);
        }
        // ensure the json data is a string
        if (data['real_time_decision_id'] && !(typeof data['real_time_decision_id'] === 'string' || data['real_time_decision_id'] instanceof String)) {
            throw new Error("Expected the field `real_time_decision_id` to be a primitive type in the JSON string but got " + data['real_time_decision_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CardAuthorization.RequiredProperties = ["amount", "currency", "digital_wallet_token_id", "id", "merchant_acceptor_id", "merchant_category_code", "merchant_city", "merchant_country", "merchant_descriptor", "network", "network_details", "real_time_decision_id", "type"];

/**
 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
CardAuthorization.prototype['amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 * @member {module:model/CardAuthorization.CurrencyEnum} currency
 */
CardAuthorization.prototype['currency'] = undefined;

/**
 * If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
 * @member {String} digital_wallet_token_id
 */
CardAuthorization.prototype['digital_wallet_token_id'] = undefined;

/**
 * The Card Authorization identifier.
 * @member {String} id
 */
CardAuthorization.prototype['id'] = undefined;

/**
 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
 * @member {String} merchant_acceptor_id
 */
CardAuthorization.prototype['merchant_acceptor_id'] = undefined;

/**
 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
 * @member {String} merchant_category_code
 */
CardAuthorization.prototype['merchant_category_code'] = undefined;

/**
 * The city the merchant resides in.
 * @member {String} merchant_city
 */
CardAuthorization.prototype['merchant_city'] = undefined;

/**
 * The country the merchant resides in.
 * @member {String} merchant_country
 */
CardAuthorization.prototype['merchant_country'] = undefined;

/**
 * The merchant descriptor of the merchant the card is transacting with.
 * @member {String} merchant_descriptor
 */
CardAuthorization.prototype['merchant_descriptor'] = undefined;

/**
 * The payment network used to process this card authorization
 * @member {module:model/CardAuthorization.NetworkEnum} network
 */
CardAuthorization.prototype['network'] = undefined;

/**
 * @member {module:model/NetworkDetails} network_details
 */
CardAuthorization.prototype['network_details'] = undefined;

/**
 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
 * @member {String} real_time_decision_id
 */
CardAuthorization.prototype['real_time_decision_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `card_authorization`.
 * @member {module:model/CardAuthorization.TypeEnum} type
 */
CardAuthorization.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
CardAuthorization['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
CardAuthorization['NetworkEnum'] = {

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CardAuthorization['TypeEnum'] = {

    /**
     * value: "card_authorization"
     * @const
     */
    "card_authorization": "card_authorization"
};



export default CardAuthorization;

