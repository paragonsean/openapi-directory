/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckDepositAcceptance model module.
 * @module model/CheckDepositAcceptance
 * @version 0.0.1
 */
class CheckDepositAcceptance {
    /**
     * Constructs a new <code>CheckDepositAcceptance</code>.
     * If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
     * @alias module:model/CheckDepositAcceptance
     * @param accountNumber {String} The account number printed on the check.
     * @param amount {Number} The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param auxiliaryOnUs {String} An additional line of metadata printed on the check. This typically includes the check number for business checks.
     * @param checkDepositId {String} The ID of the Check Deposit that was accepted.
     * @param currency {module:model/CheckDepositAcceptance.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
     * @param routingNumber {String} The routing number printed on the check.
     * @param serialNumber {String} The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
     */
    constructor(accountNumber, amount, auxiliaryOnUs, checkDepositId, currency, routingNumber, serialNumber) { 
        
        CheckDepositAcceptance.initialize(this, accountNumber, amount, auxiliaryOnUs, checkDepositId, currency, routingNumber, serialNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountNumber, amount, auxiliaryOnUs, checkDepositId, currency, routingNumber, serialNumber) { 
        obj['account_number'] = accountNumber;
        obj['amount'] = amount;
        obj['auxiliary_on_us'] = auxiliaryOnUs;
        obj['check_deposit_id'] = checkDepositId;
        obj['currency'] = currency;
        obj['routing_number'] = routingNumber;
        obj['serial_number'] = serialNumber;
    }

    /**
     * Constructs a <code>CheckDepositAcceptance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckDepositAcceptance} obj Optional instance to populate.
     * @return {module:model/CheckDepositAcceptance} The populated <code>CheckDepositAcceptance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckDepositAcceptance();

            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('auxiliary_on_us')) {
                obj['auxiliary_on_us'] = ApiClient.convertToType(data['auxiliary_on_us'], 'String');
            }
            if (data.hasOwnProperty('check_deposit_id')) {
                obj['check_deposit_id'] = ApiClient.convertToType(data['check_deposit_id'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('serial_number')) {
                obj['serial_number'] = ApiClient.convertToType(data['serial_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckDepositAcceptance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckDepositAcceptance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckDepositAcceptance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['auxiliary_on_us'] && !(typeof data['auxiliary_on_us'] === 'string' || data['auxiliary_on_us'] instanceof String)) {
            throw new Error("Expected the field `auxiliary_on_us` to be a primitive type in the JSON string but got " + data['auxiliary_on_us']);
        }
        // ensure the json data is a string
        if (data['check_deposit_id'] && !(typeof data['check_deposit_id'] === 'string' || data['check_deposit_id'] instanceof String)) {
            throw new Error("Expected the field `check_deposit_id` to be a primitive type in the JSON string but got " + data['check_deposit_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['serial_number'] && !(typeof data['serial_number'] === 'string' || data['serial_number'] instanceof String)) {
            throw new Error("Expected the field `serial_number` to be a primitive type in the JSON string but got " + data['serial_number']);
        }

        return true;
    }


}

CheckDepositAcceptance.RequiredProperties = ["account_number", "amount", "auxiliary_on_us", "check_deposit_id", "currency", "routing_number", "serial_number"];

/**
 * The account number printed on the check.
 * @member {String} account_number
 */
CheckDepositAcceptance.prototype['account_number'] = undefined;

/**
 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
CheckDepositAcceptance.prototype['amount'] = undefined;

/**
 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
 * @member {String} auxiliary_on_us
 */
CheckDepositAcceptance.prototype['auxiliary_on_us'] = undefined;

/**
 * The ID of the Check Deposit that was accepted.
 * @member {String} check_deposit_id
 */
CheckDepositAcceptance.prototype['check_deposit_id'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 * @member {module:model/CheckDepositAcceptance.CurrencyEnum} currency
 */
CheckDepositAcceptance.prototype['currency'] = undefined;

/**
 * The routing number printed on the check.
 * @member {String} routing_number
 */
CheckDepositAcceptance.prototype['routing_number'] = undefined;

/**
 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
 * @member {String} serial_number
 */
CheckDepositAcceptance.prototype['serial_number'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
CheckDepositAcceptance['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default CheckDepositAcceptance;

