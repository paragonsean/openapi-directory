/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BeneficialOwnersElement from './BeneficialOwnersElement';

/**
 * The Corporation model module.
 * @module model/Corporation
 * @version 0.0.1
 */
class Corporation {
    /**
     * Constructs a new <code>Corporation</code>.
     * Details of the corporation entity. Will be present if &#x60;structure&#x60; is equal to &#x60;corporation&#x60;.
     * @alias module:model/Corporation
     * @param address {module:model/Address} 
     * @param beneficialOwners {Array.<module:model/BeneficialOwnersElement>} The identifying details of anyone controlling or owning 25% or more of the corporation.
     * @param incorporationState {String} The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
     * @param name {String} The legal name of the corporation.
     * @param taxIdentifier {String} The Employer Identification Number (EIN) for the corporation.
     * @param website {String} The website of the corporation.
     */
    constructor(address, beneficialOwners, incorporationState, name, taxIdentifier, website) { 
        
        Corporation.initialize(this, address, beneficialOwners, incorporationState, name, taxIdentifier, website);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, beneficialOwners, incorporationState, name, taxIdentifier, website) { 
        obj['address'] = address;
        obj['beneficial_owners'] = beneficialOwners;
        obj['incorporation_state'] = incorporationState;
        obj['name'] = name;
        obj['tax_identifier'] = taxIdentifier;
        obj['website'] = website;
    }

    /**
     * Constructs a <code>Corporation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Corporation} obj Optional instance to populate.
     * @return {module:model/Corporation} The populated <code>Corporation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Corporation();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('beneficial_owners')) {
                obj['beneficial_owners'] = ApiClient.convertToType(data['beneficial_owners'], [BeneficialOwnersElement]);
            }
            if (data.hasOwnProperty('incorporation_state')) {
                obj['incorporation_state'] = ApiClient.convertToType(data['incorporation_state'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tax_identifier')) {
                obj['tax_identifier'] = ApiClient.convertToType(data['tax_identifier'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Corporation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Corporation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Corporation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        if (data['beneficial_owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['beneficial_owners'])) {
                throw new Error("Expected the field `beneficial_owners` to be an array in the JSON data but got " + data['beneficial_owners']);
            }
            // validate the optional field `beneficial_owners` (array)
            for (const item of data['beneficial_owners']) {
                BeneficialOwnersElement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['incorporation_state'] && !(typeof data['incorporation_state'] === 'string' || data['incorporation_state'] instanceof String)) {
            throw new Error("Expected the field `incorporation_state` to be a primitive type in the JSON string but got " + data['incorporation_state']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tax_identifier'] && !(typeof data['tax_identifier'] === 'string' || data['tax_identifier'] instanceof String)) {
            throw new Error("Expected the field `tax_identifier` to be a primitive type in the JSON string but got " + data['tax_identifier']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Corporation.RequiredProperties = ["address", "beneficial_owners", "incorporation_state", "name", "tax_identifier", "website"];

/**
 * @member {module:model/Address} address
 */
Corporation.prototype['address'] = undefined;

/**
 * The identifying details of anyone controlling or owning 25% or more of the corporation.
 * @member {Array.<module:model/BeneficialOwnersElement>} beneficial_owners
 */
Corporation.prototype['beneficial_owners'] = undefined;

/**
 * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
 * @member {String} incorporation_state
 */
Corporation.prototype['incorporation_state'] = undefined;

/**
 * The legal name of the corporation.
 * @member {String} name
 */
Corporation.prototype['name'] = undefined;

/**
 * The Employer Identification Number (EIN) for the corporation.
 * @member {String} tax_identifier
 */
Corporation.prototype['tax_identifier'] = undefined;

/**
 * The website of the corporation.
 * @member {String} website
 */
Corporation.prototype['website'] = undefined;






export default Corporation;

