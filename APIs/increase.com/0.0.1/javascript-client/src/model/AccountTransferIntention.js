/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountTransferIntention model module.
 * @module model/AccountTransferIntention
 * @version 0.0.1
 */
class AccountTransferIntention {
    /**
     * Constructs a new <code>AccountTransferIntention</code>.
     * A Account Transfer Intention object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;account_transfer_intention&#x60;.
     * @alias module:model/AccountTransferIntention
     * @param amount {Number} The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param currency {module:model/AccountTransferIntention.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
     * @param description {String} The description you chose to give the transfer.
     * @param destinationAccountId {String} The identifier of the Account to where the Account Transfer was sent.
     * @param sourceAccountId {String} The identifier of the Account from where the Account Transfer was sent.
     * @param transferId {String} The identifier of the Account Transfer that led to this Pending Transaction.
     */
    constructor(amount, currency, description, destinationAccountId, sourceAccountId, transferId) { 
        
        AccountTransferIntention.initialize(this, amount, currency, description, destinationAccountId, sourceAccountId, transferId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, currency, description, destinationAccountId, sourceAccountId, transferId) { 
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['destination_account_id'] = destinationAccountId;
        obj['source_account_id'] = sourceAccountId;
        obj['transfer_id'] = transferId;
    }

    /**
     * Constructs a <code>AccountTransferIntention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountTransferIntention} obj Optional instance to populate.
     * @return {module:model/AccountTransferIntention} The populated <code>AccountTransferIntention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountTransferIntention();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination_account_id')) {
                obj['destination_account_id'] = ApiClient.convertToType(data['destination_account_id'], 'String');
            }
            if (data.hasOwnProperty('source_account_id')) {
                obj['source_account_id'] = ApiClient.convertToType(data['source_account_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_id')) {
                obj['transfer_id'] = ApiClient.convertToType(data['transfer_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountTransferIntention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountTransferIntention</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountTransferIntention.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['destination_account_id'] && !(typeof data['destination_account_id'] === 'string' || data['destination_account_id'] instanceof String)) {
            throw new Error("Expected the field `destination_account_id` to be a primitive type in the JSON string but got " + data['destination_account_id']);
        }
        // ensure the json data is a string
        if (data['source_account_id'] && !(typeof data['source_account_id'] === 'string' || data['source_account_id'] instanceof String)) {
            throw new Error("Expected the field `source_account_id` to be a primitive type in the JSON string but got " + data['source_account_id']);
        }
        // ensure the json data is a string
        if (data['transfer_id'] && !(typeof data['transfer_id'] === 'string' || data['transfer_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_id` to be a primitive type in the JSON string but got " + data['transfer_id']);
        }

        return true;
    }


}

AccountTransferIntention.RequiredProperties = ["amount", "currency", "description", "destination_account_id", "source_account_id", "transfer_id"];

/**
 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
AccountTransferIntention.prototype['amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 * @member {module:model/AccountTransferIntention.CurrencyEnum} currency
 */
AccountTransferIntention.prototype['currency'] = undefined;

/**
 * The description you chose to give the transfer.
 * @member {String} description
 */
AccountTransferIntention.prototype['description'] = undefined;

/**
 * The identifier of the Account to where the Account Transfer was sent.
 * @member {String} destination_account_id
 */
AccountTransferIntention.prototype['destination_account_id'] = undefined;

/**
 * The identifier of the Account from where the Account Transfer was sent.
 * @member {String} source_account_id
 */
AccountTransferIntention.prototype['source_account_id'] = undefined;

/**
 * The identifier of the Account Transfer that led to this Pending Transaction.
 * @member {String} transfer_id
 */
AccountTransferIntention.prototype['transfer_id'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
AccountTransferIntention['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default AccountTransferIntention;

