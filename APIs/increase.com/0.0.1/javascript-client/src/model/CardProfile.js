/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DigitalWallets from './DigitalWallets';

/**
 * The CardProfile model module.
 * @module model/CardProfile
 * @version 0.0.1
 */
class CardProfile {
    /**
     * Constructs a new <code>CardProfile</code>.
     * This contains artwork and metadata relating to a Card&#39;s appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art)
     * @alias module:model/CardProfile
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
     * @param description {String} A description you can use to identify the Card Profile.
     * @param digitalWallets {module:model/DigitalWallets} 
     * @param id {String} The Card Profile identifier.
     * @param status {module:model/CardProfile.StatusEnum} The status of the Card Profile.
     * @param type {module:model/CardProfile.TypeEnum} A constant representing the object's type. For this resource it will always be `card_profile`.
     */
    constructor(createdAt, description, digitalWallets, id, status, type) { 
        
        CardProfile.initialize(this, createdAt, description, digitalWallets, id, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, description, digitalWallets, id, status, type) { 
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['digital_wallets'] = digitalWallets;
        obj['id'] = id;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CardProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardProfile} obj Optional instance to populate.
     * @return {module:model/CardProfile} The populated <code>CardProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardProfile();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('digital_wallets')) {
                obj['digital_wallets'] = DigitalWallets.constructFromObject(data['digital_wallets']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardProfile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardProfile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `digital_wallets`
        if (data['digital_wallets']) { // data not null
          DigitalWallets.validateJSON(data['digital_wallets']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CardProfile.RequiredProperties = ["created_at", "description", "digital_wallets", "id", "status", "type"];

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
 * @member {Date} created_at
 */
CardProfile.prototype['created_at'] = undefined;

/**
 * A description you can use to identify the Card Profile.
 * @member {String} description
 */
CardProfile.prototype['description'] = undefined;

/**
 * @member {module:model/DigitalWallets} digital_wallets
 */
CardProfile.prototype['digital_wallets'] = undefined;

/**
 * The Card Profile identifier.
 * @member {String} id
 */
CardProfile.prototype['id'] = undefined;

/**
 * The status of the Card Profile.
 * @member {module:model/CardProfile.StatusEnum} status
 */
CardProfile.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `card_profile`.
 * @member {module:model/CardProfile.TypeEnum} type
 */
CardProfile.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CardProfile['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CardProfile['TypeEnum'] = {

    /**
     * value: "card_profile"
     * @const
     */
    "card_profile": "card_profile"
};



export default CardProfile;

