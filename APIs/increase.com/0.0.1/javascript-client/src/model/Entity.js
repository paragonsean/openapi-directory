/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Corporation from './Corporation';
import Individual2 from './Individual2';
import Joint from './Joint';
import SupplementalDocumentsElement from './SupplementalDocumentsElement';
import Trust from './Trust';

/**
 * The Entity model module.
 * @module model/Entity
 * @version 0.0.1
 */
class Entity {
    /**
     * Constructs a new <code>Entity</code>.
     * Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
     * @alias module:model/Entity
     * @param corporation {module:model/Corporation} 
     * @param description {String} The entity's description for display purposes.
     * @param id {String} The entity's identifier.
     * @param joint {module:model/Joint} 
     * @param naturalPerson {module:model/Individual2} 
     * @param relationship {module:model/Entity.RelationshipEnum} The relationship between your group and the entity.
     * @param structure {module:model/Entity.StructureEnum} The entity's legal structure.
     * @param supplementalDocuments {Array.<module:model/SupplementalDocumentsElement>} Additional documentation associated with the entity.
     * @param trust {module:model/Trust} 
     * @param type {module:model/Entity.TypeEnum} A constant representing the object's type. For this resource it will always be `entity`.
     */
    constructor(corporation, description, id, joint, naturalPerson, relationship, structure, supplementalDocuments, trust, type) { 
        
        Entity.initialize(this, corporation, description, id, joint, naturalPerson, relationship, structure, supplementalDocuments, trust, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, corporation, description, id, joint, naturalPerson, relationship, structure, supplementalDocuments, trust, type) { 
        obj['corporation'] = corporation;
        obj['description'] = description;
        obj['id'] = id;
        obj['joint'] = joint;
        obj['natural_person'] = naturalPerson;
        obj['relationship'] = relationship;
        obj['structure'] = structure;
        obj['supplemental_documents'] = supplementalDocuments;
        obj['trust'] = trust;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Entity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entity} obj Optional instance to populate.
     * @return {module:model/Entity} The populated <code>Entity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entity();

            if (data.hasOwnProperty('corporation')) {
                obj['corporation'] = Corporation.constructFromObject(data['corporation']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('joint')) {
                obj['joint'] = Joint.constructFromObject(data['joint']);
            }
            if (data.hasOwnProperty('natural_person')) {
                obj['natural_person'] = Individual2.constructFromObject(data['natural_person']);
            }
            if (data.hasOwnProperty('relationship')) {
                obj['relationship'] = ApiClient.convertToType(data['relationship'], 'String');
            }
            if (data.hasOwnProperty('structure')) {
                obj['structure'] = ApiClient.convertToType(data['structure'], 'String');
            }
            if (data.hasOwnProperty('supplemental_documents')) {
                obj['supplemental_documents'] = ApiClient.convertToType(data['supplemental_documents'], [SupplementalDocumentsElement]);
            }
            if (data.hasOwnProperty('trust')) {
                obj['trust'] = Trust.constructFromObject(data['trust']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Entity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `corporation`
        if (data['corporation']) { // data not null
          Corporation.validateJSON(data['corporation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `joint`
        if (data['joint']) { // data not null
          Joint.validateJSON(data['joint']);
        }
        // validate the optional field `natural_person`
        if (data['natural_person']) { // data not null
          Individual2.validateJSON(data['natural_person']);
        }
        // ensure the json data is a string
        if (data['relationship'] && !(typeof data['relationship'] === 'string' || data['relationship'] instanceof String)) {
            throw new Error("Expected the field `relationship` to be a primitive type in the JSON string but got " + data['relationship']);
        }
        // ensure the json data is a string
        if (data['structure'] && !(typeof data['structure'] === 'string' || data['structure'] instanceof String)) {
            throw new Error("Expected the field `structure` to be a primitive type in the JSON string but got " + data['structure']);
        }
        if (data['supplemental_documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supplemental_documents'])) {
                throw new Error("Expected the field `supplemental_documents` to be an array in the JSON data but got " + data['supplemental_documents']);
            }
            // validate the optional field `supplemental_documents` (array)
            for (const item of data['supplemental_documents']) {
                SupplementalDocumentsElement.validateJSON(item);
            };
        }
        // validate the optional field `trust`
        if (data['trust']) { // data not null
          Trust.validateJSON(data['trust']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Entity.RequiredProperties = ["corporation", "description", "id", "joint", "natural_person", "relationship", "structure", "supplemental_documents", "trust", "type"];

/**
 * @member {module:model/Corporation} corporation
 */
Entity.prototype['corporation'] = undefined;

/**
 * The entity's description for display purposes.
 * @member {String} description
 */
Entity.prototype['description'] = undefined;

/**
 * The entity's identifier.
 * @member {String} id
 */
Entity.prototype['id'] = undefined;

/**
 * @member {module:model/Joint} joint
 */
Entity.prototype['joint'] = undefined;

/**
 * @member {module:model/Individual2} natural_person
 */
Entity.prototype['natural_person'] = undefined;

/**
 * The relationship between your group and the entity.
 * @member {module:model/Entity.RelationshipEnum} relationship
 */
Entity.prototype['relationship'] = undefined;

/**
 * The entity's legal structure.
 * @member {module:model/Entity.StructureEnum} structure
 */
Entity.prototype['structure'] = undefined;

/**
 * Additional documentation associated with the entity.
 * @member {Array.<module:model/SupplementalDocumentsElement>} supplemental_documents
 */
Entity.prototype['supplemental_documents'] = undefined;

/**
 * @member {module:model/Trust} trust
 */
Entity.prototype['trust'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `entity`.
 * @member {module:model/Entity.TypeEnum} type
 */
Entity.prototype['type'] = undefined;





/**
 * Allowed values for the <code>relationship</code> property.
 * @enum {String}
 * @readonly
 */
Entity['RelationshipEnum'] = {

    /**
     * value: "affiliated"
     * @const
     */
    "affiliated": "affiliated",

    /**
     * value: "informational"
     * @const
     */
    "informational": "informational",

    /**
     * value: "unaffiliated"
     * @const
     */
    "unaffiliated": "unaffiliated"
};


/**
 * Allowed values for the <code>structure</code> property.
 * @enum {String}
 * @readonly
 */
Entity['StructureEnum'] = {

    /**
     * value: "corporation"
     * @const
     */
    "corporation": "corporation",

    /**
     * value: "natural_person"
     * @const
     */
    "natural_person": "natural_person",

    /**
     * value: "joint"
     * @const
     */
    "joint": "joint",

    /**
     * value: "trust"
     * @const
     */
    "trust": "trust"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Entity['TypeEnum'] = {

    /**
     * value: "entity"
     * @const
     */
    "entity": "entity"
};



export default Entity;

