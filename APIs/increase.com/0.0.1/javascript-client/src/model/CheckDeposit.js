/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckDepositAcceptance from './CheckDepositAcceptance';
import CheckDepositRejection from './CheckDepositRejection';
import CheckDepositReturn from './CheckDepositReturn';

/**
 * The CheckDeposit model module.
 * @module model/CheckDeposit
 * @version 0.0.1
 */
class CheckDeposit {
    /**
     * Constructs a new <code>CheckDeposit</code>.
     * Check Deposits allow you to deposit images of paper checks into your account.
     * @alias module:model/CheckDeposit
     * @param accountId {String} The Account the check was deposited into.
     * @param amount {Number} The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
     * @param backImageFileId {String} The ID for the File containing the image of the back of the check.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param currency {module:model/CheckDeposit.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
     * @param depositAcceptance {module:model/CheckDepositAcceptance} 
     * @param depositRejection {module:model/CheckDepositRejection} 
     * @param depositReturn {module:model/CheckDepositReturn} 
     * @param frontImageFileId {String} The ID for the File containing the image of the front of the check.
     * @param id {String} The deposit's identifier.
     * @param status {module:model/CheckDeposit.StatusEnum} The status of the Check Deposit.
     * @param transactionId {String} The ID for the Transaction created by the deposit.
     * @param type {module:model/CheckDeposit.TypeEnum} A constant representing the object's type. For this resource it will always be `check_deposit`.
     */
    constructor(accountId, amount, backImageFileId, createdAt, currency, depositAcceptance, depositRejection, depositReturn, frontImageFileId, id, status, transactionId, type) { 
        
        CheckDeposit.initialize(this, accountId, amount, backImageFileId, createdAt, currency, depositAcceptance, depositRejection, depositReturn, frontImageFileId, id, status, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, backImageFileId, createdAt, currency, depositAcceptance, depositRejection, depositReturn, frontImageFileId, id, status, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['back_image_file_id'] = backImageFileId;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['deposit_acceptance'] = depositAcceptance;
        obj['deposit_rejection'] = depositRejection;
        obj['deposit_return'] = depositReturn;
        obj['front_image_file_id'] = frontImageFileId;
        obj['id'] = id;
        obj['status'] = status;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CheckDeposit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckDeposit} obj Optional instance to populate.
     * @return {module:model/CheckDeposit} The populated <code>CheckDeposit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckDeposit();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('back_image_file_id')) {
                obj['back_image_file_id'] = ApiClient.convertToType(data['back_image_file_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deposit_acceptance')) {
                obj['deposit_acceptance'] = CheckDepositAcceptance.constructFromObject(data['deposit_acceptance']);
            }
            if (data.hasOwnProperty('deposit_rejection')) {
                obj['deposit_rejection'] = CheckDepositRejection.constructFromObject(data['deposit_rejection']);
            }
            if (data.hasOwnProperty('deposit_return')) {
                obj['deposit_return'] = CheckDepositReturn.constructFromObject(data['deposit_return']);
            }
            if (data.hasOwnProperty('front_image_file_id')) {
                obj['front_image_file_id'] = ApiClient.convertToType(data['front_image_file_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckDeposit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckDeposit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckDeposit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['back_image_file_id'] && !(typeof data['back_image_file_id'] === 'string' || data['back_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `back_image_file_id` to be a primitive type in the JSON string but got " + data['back_image_file_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `deposit_acceptance`
        if (data['deposit_acceptance']) { // data not null
          CheckDepositAcceptance.validateJSON(data['deposit_acceptance']);
        }
        // validate the optional field `deposit_rejection`
        if (data['deposit_rejection']) { // data not null
          CheckDepositRejection.validateJSON(data['deposit_rejection']);
        }
        // validate the optional field `deposit_return`
        if (data['deposit_return']) { // data not null
          CheckDepositReturn.validateJSON(data['deposit_return']);
        }
        // ensure the json data is a string
        if (data['front_image_file_id'] && !(typeof data['front_image_file_id'] === 'string' || data['front_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `front_image_file_id` to be a primitive type in the JSON string but got " + data['front_image_file_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CheckDeposit.RequiredProperties = ["account_id", "amount", "back_image_file_id", "created_at", "currency", "deposit_acceptance", "deposit_rejection", "deposit_return", "front_image_file_id", "id", "status", "transaction_id", "type"];

/**
 * The Account the check was deposited into.
 * @member {String} account_id
 */
CheckDeposit.prototype['account_id'] = undefined;

/**
 * The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
CheckDeposit.prototype['amount'] = undefined;

/**
 * The ID for the File containing the image of the back of the check.
 * @member {String} back_image_file_id
 */
CheckDeposit.prototype['back_image_file_id'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
CheckDeposit.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
 * @member {module:model/CheckDeposit.CurrencyEnum} currency
 */
CheckDeposit.prototype['currency'] = undefined;

/**
 * @member {module:model/CheckDepositAcceptance} deposit_acceptance
 */
CheckDeposit.prototype['deposit_acceptance'] = undefined;

/**
 * @member {module:model/CheckDepositRejection} deposit_rejection
 */
CheckDeposit.prototype['deposit_rejection'] = undefined;

/**
 * @member {module:model/CheckDepositReturn} deposit_return
 */
CheckDeposit.prototype['deposit_return'] = undefined;

/**
 * The ID for the File containing the image of the front of the check.
 * @member {String} front_image_file_id
 */
CheckDeposit.prototype['front_image_file_id'] = undefined;

/**
 * The deposit's identifier.
 * @member {String} id
 */
CheckDeposit.prototype['id'] = undefined;

/**
 * The status of the Check Deposit.
 * @member {module:model/CheckDeposit.StatusEnum} status
 */
CheckDeposit.prototype['status'] = undefined;

/**
 * The ID for the Transaction created by the deposit.
 * @member {String} transaction_id
 */
CheckDeposit.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `check_deposit`.
 * @member {module:model/CheckDeposit.TypeEnum} type
 */
CheckDeposit.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
CheckDeposit['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CheckDeposit['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "returned"
     * @const
     */
    "returned": "returned"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CheckDeposit['TypeEnum'] = {

    /**
     * value: "check_deposit"
     * @const
     */
    "check_deposit": "check_deposit"
};



export default CheckDeposit;

