/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountStatement model module.
 * @module model/AccountStatement
 * @version 0.0.1
 */
class AccountStatement {
    /**
     * Constructs a new <code>AccountStatement</code>.
     * Account Statements are generated monthly for every active Account. You can access the statement&#39;s data via the API or retrieve a PDF with its details via its associated File.
     * @alias module:model/AccountStatement
     * @param accountId {String} The identifier for the Account this Account Statement belongs to.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
     * @param endingBalance {Number} The Account's balance at the start of its statement period.
     * @param fileId {String} The identifier of the File containing a PDF of the statement.
     * @param id {String} The Account Statement identifier.
     * @param startingBalance {Number} The Account's balance at the start of its statement period.
     * @param statementPeriodEnd {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
     * @param statementPeriodStart {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
     * @param type {module:model/AccountStatement.TypeEnum} A constant representing the object's type. For this resource it will always be `account_statement`.
     */
    constructor(accountId, createdAt, endingBalance, fileId, id, startingBalance, statementPeriodEnd, statementPeriodStart, type) { 
        
        AccountStatement.initialize(this, accountId, createdAt, endingBalance, fileId, id, startingBalance, statementPeriodEnd, statementPeriodStart, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, createdAt, endingBalance, fileId, id, startingBalance, statementPeriodEnd, statementPeriodStart, type) { 
        obj['account_id'] = accountId;
        obj['created_at'] = createdAt;
        obj['ending_balance'] = endingBalance;
        obj['file_id'] = fileId;
        obj['id'] = id;
        obj['starting_balance'] = startingBalance;
        obj['statement_period_end'] = statementPeriodEnd;
        obj['statement_period_start'] = statementPeriodStart;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AccountStatement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountStatement} obj Optional instance to populate.
     * @return {module:model/AccountStatement} The populated <code>AccountStatement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountStatement();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('ending_balance')) {
                obj['ending_balance'] = ApiClient.convertToType(data['ending_balance'], 'Number');
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('starting_balance')) {
                obj['starting_balance'] = ApiClient.convertToType(data['starting_balance'], 'Number');
            }
            if (data.hasOwnProperty('statement_period_end')) {
                obj['statement_period_end'] = ApiClient.convertToType(data['statement_period_end'], 'Date');
            }
            if (data.hasOwnProperty('statement_period_start')) {
                obj['statement_period_start'] = ApiClient.convertToType(data['statement_period_start'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountStatement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountStatement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountStatement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['file_id'] && !(typeof data['file_id'] === 'string' || data['file_id'] instanceof String)) {
            throw new Error("Expected the field `file_id` to be a primitive type in the JSON string but got " + data['file_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AccountStatement.RequiredProperties = ["account_id", "created_at", "ending_balance", "file_id", "id", "starting_balance", "statement_period_end", "statement_period_start", "type"];

/**
 * The identifier for the Account this Account Statement belongs to.
 * @member {String} account_id
 */
AccountStatement.prototype['account_id'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
 * @member {Date} created_at
 */
AccountStatement.prototype['created_at'] = undefined;

/**
 * The Account's balance at the start of its statement period.
 * @member {Number} ending_balance
 */
AccountStatement.prototype['ending_balance'] = undefined;

/**
 * The identifier of the File containing a PDF of the statement.
 * @member {String} file_id
 */
AccountStatement.prototype['file_id'] = undefined;

/**
 * The Account Statement identifier.
 * @member {String} id
 */
AccountStatement.prototype['id'] = undefined;

/**
 * The Account's balance at the start of its statement period.
 * @member {Number} starting_balance
 */
AccountStatement.prototype['starting_balance'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
 * @member {Date} statement_period_end
 */
AccountStatement.prototype['statement_period_end'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
 * @member {Date} statement_period_start
 */
AccountStatement.prototype['statement_period_start'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `account_statement`.
 * @member {module:model/AccountStatement.TypeEnum} type
 */
AccountStatement.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AccountStatement['TypeEnum'] = {

    /**
     * value: "account_statement"
     * @const
     */
    "account_statement": "account_statement"
};



export default AccountStatement;

