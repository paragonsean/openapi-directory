/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardDetails model module.
 * @module model/CardDetails
 * @version 0.0.1
 */
class CardDetails {
    /**
     * Constructs a new <code>CardDetails</code>.
     * An object containing the sensitive details (card number, cvc, etc) for a Card.
     * @alias module:model/CardDetails
     * @param cardId {String} The identifier for the Card for which sensitive details have been returned.
     * @param expirationMonth {Number} The month the card expires in M format (e.g., August is 8).
     * @param expirationYear {Number} The year the card expires in YYYY format (e.g., 2025).
     * @param primaryAccountNumber {String} The card number.
     * @param type {module:model/CardDetails.TypeEnum} A constant representing the object's type. For this resource it will always be `card_details`.
     * @param verificationCode {String} The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).
     */
    constructor(cardId, expirationMonth, expirationYear, primaryAccountNumber, type, verificationCode) { 
        
        CardDetails.initialize(this, cardId, expirationMonth, expirationYear, primaryAccountNumber, type, verificationCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardId, expirationMonth, expirationYear, primaryAccountNumber, type, verificationCode) { 
        obj['card_id'] = cardId;
        obj['expiration_month'] = expirationMonth;
        obj['expiration_year'] = expirationYear;
        obj['primary_account_number'] = primaryAccountNumber;
        obj['type'] = type;
        obj['verification_code'] = verificationCode;
    }

    /**
     * Constructs a <code>CardDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardDetails} obj Optional instance to populate.
     * @return {module:model/CardDetails} The populated <code>CardDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardDetails();

            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('expiration_month')) {
                obj['expiration_month'] = ApiClient.convertToType(data['expiration_month'], 'Number');
            }
            if (data.hasOwnProperty('expiration_year')) {
                obj['expiration_year'] = ApiClient.convertToType(data['expiration_year'], 'Number');
            }
            if (data.hasOwnProperty('primary_account_number')) {
                obj['primary_account_number'] = ApiClient.convertToType(data['primary_account_number'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('verification_code')) {
                obj['verification_code'] = ApiClient.convertToType(data['verification_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['primary_account_number'] && !(typeof data['primary_account_number'] === 'string' || data['primary_account_number'] instanceof String)) {
            throw new Error("Expected the field `primary_account_number` to be a primitive type in the JSON string but got " + data['primary_account_number']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['verification_code'] && !(typeof data['verification_code'] === 'string' || data['verification_code'] instanceof String)) {
            throw new Error("Expected the field `verification_code` to be a primitive type in the JSON string but got " + data['verification_code']);
        }

        return true;
    }


}

CardDetails.RequiredProperties = ["card_id", "expiration_month", "expiration_year", "primary_account_number", "type", "verification_code"];

/**
 * The identifier for the Card for which sensitive details have been returned.
 * @member {String} card_id
 */
CardDetails.prototype['card_id'] = undefined;

/**
 * The month the card expires in M format (e.g., August is 8).
 * @member {Number} expiration_month
 */
CardDetails.prototype['expiration_month'] = undefined;

/**
 * The year the card expires in YYYY format (e.g., 2025).
 * @member {Number} expiration_year
 */
CardDetails.prototype['expiration_year'] = undefined;

/**
 * The card number.
 * @member {String} primary_account_number
 */
CardDetails.prototype['primary_account_number'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `card_details`.
 * @member {module:model/CardDetails.TypeEnum} type
 */
CardDetails.prototype['type'] = undefined;

/**
 * The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).
 * @member {String} verification_code
 */
CardDetails.prototype['verification_code'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CardDetails['TypeEnum'] = {

    /**
     * value: "card_details"
     * @const
     */
    "card_details": "card_details"
};



export default CardDetails;

