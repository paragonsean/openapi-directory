/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Program model module.
 * @module model/Program
 * @version 0.0.1
 */
class Program {
    /**
     * Constructs a new <code>Program</code>.
     * Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you.
     * @alias module:model/Program
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.
     * @param id {String} The Program identifier.
     * @param name {String} The name of the Program.
     * @param type {module:model/Program.TypeEnum} A constant representing the object's type. For this resource it will always be `program`.
     * @param updatedAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.
     */
    constructor(createdAt, id, name, type, updatedAt) { 
        
        Program.initialize(this, createdAt, id, name, type, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, name, type, updatedAt) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = type;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Program</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Program} obj Optional instance to populate.
     * @return {module:model/Program} The populated <code>Program</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Program();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Program</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Program</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Program.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Program.RequiredProperties = ["created_at", "id", "name", "type", "updated_at"];

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.
 * @member {Date} created_at
 */
Program.prototype['created_at'] = undefined;

/**
 * The Program identifier.
 * @member {String} id
 */
Program.prototype['id'] = undefined;

/**
 * The name of the Program.
 * @member {String} name
 */
Program.prototype['name'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `program`.
 * @member {module:model/Program.TypeEnum} type
 */
Program.prototype['type'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.
 * @member {Date} updated_at
 */
Program.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Program['TypeEnum'] = {

    /**
     * value: "program"
     * @const
     */
    "program": "program"
};



export default Program;

