/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InboundWireReversal1 from './InboundWireReversal1';
import TransferApproval from './TransferApproval';
import TransferCancellation from './TransferCancellation';
import WireTransferSubmission from './WireTransferSubmission';

/**
 * The WireTransfer model module.
 * @module model/WireTransfer
 * @version 0.0.1
 */
class WireTransfer {
    /**
     * Constructs a new <code>WireTransfer</code>.
     * Wire transfers move funds between your Increase account and any other account accessible by Fedwire.
     * @alias module:model/WireTransfer
     * @param accountId {String} The Account to which the transfer belongs.
     * @param accountNumber {String} The destination account number.
     * @param amount {Number} The transfer amount in USD cents.
     * @param approval {module:model/TransferApproval} 
     * @param beneficiaryAddressLine1 {String} The beneficiary's address line 1.
     * @param beneficiaryAddressLine2 {String} The beneficiary's address line 2.
     * @param beneficiaryAddressLine3 {String} The beneficiary's address line 3.
     * @param beneficiaryName {String} The beneficiary's name.
     * @param cancellation {module:model/TransferCancellation} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param currency {module:model/WireTransfer.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
     * @param externalAccountId {String} The identifier of the External Account the transfer was made to, if any.
     * @param id {String} The wire transfer's identifier.
     * @param messageToRecipient {String} The message that will show on the recipient's bank statement.
     * @param network {module:model/WireTransfer.NetworkEnum} The transfer's network.
     * @param reversal {module:model/InboundWireReversal1} 
     * @param routingNumber {String} The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * @param status {module:model/WireTransfer.StatusEnum} The lifecycle status of the transfer.
     * @param submission {module:model/WireTransferSubmission} 
     * @param transactionId {String} The ID for the transaction funding the transfer.
     * @param type {module:model/WireTransfer.TypeEnum} A constant representing the object's type. For this resource it will always be `wire_transfer`.
     */
    constructor(accountId, accountNumber, amount, approval, beneficiaryAddressLine1, beneficiaryAddressLine2, beneficiaryAddressLine3, beneficiaryName, cancellation, createdAt, currency, externalAccountId, id, messageToRecipient, network, reversal, routingNumber, status, submission, transactionId, type) { 
        
        WireTransfer.initialize(this, accountId, accountNumber, amount, approval, beneficiaryAddressLine1, beneficiaryAddressLine2, beneficiaryAddressLine3, beneficiaryName, cancellation, createdAt, currency, externalAccountId, id, messageToRecipient, network, reversal, routingNumber, status, submission, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountNumber, amount, approval, beneficiaryAddressLine1, beneficiaryAddressLine2, beneficiaryAddressLine3, beneficiaryName, cancellation, createdAt, currency, externalAccountId, id, messageToRecipient, network, reversal, routingNumber, status, submission, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['account_number'] = accountNumber;
        obj['amount'] = amount;
        obj['approval'] = approval;
        obj['beneficiary_address_line1'] = beneficiaryAddressLine1;
        obj['beneficiary_address_line2'] = beneficiaryAddressLine2;
        obj['beneficiary_address_line3'] = beneficiaryAddressLine3;
        obj['beneficiary_name'] = beneficiaryName;
        obj['cancellation'] = cancellation;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['external_account_id'] = externalAccountId;
        obj['id'] = id;
        obj['message_to_recipient'] = messageToRecipient;
        obj['network'] = network;
        obj['reversal'] = reversal;
        obj['routing_number'] = routingNumber;
        obj['status'] = status;
        obj['submission'] = submission;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>WireTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WireTransfer} obj Optional instance to populate.
     * @return {module:model/WireTransfer} The populated <code>WireTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WireTransfer();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = TransferApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('beneficiary_address_line1')) {
                obj['beneficiary_address_line1'] = ApiClient.convertToType(data['beneficiary_address_line1'], 'String');
            }
            if (data.hasOwnProperty('beneficiary_address_line2')) {
                obj['beneficiary_address_line2'] = ApiClient.convertToType(data['beneficiary_address_line2'], 'String');
            }
            if (data.hasOwnProperty('beneficiary_address_line3')) {
                obj['beneficiary_address_line3'] = ApiClient.convertToType(data['beneficiary_address_line3'], 'String');
            }
            if (data.hasOwnProperty('beneficiary_name')) {
                obj['beneficiary_name'] = ApiClient.convertToType(data['beneficiary_name'], 'String');
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = TransferCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('external_account_id')) {
                obj['external_account_id'] = ApiClient.convertToType(data['external_account_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message_to_recipient')) {
                obj['message_to_recipient'] = ApiClient.convertToType(data['message_to_recipient'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('reversal')) {
                obj['reversal'] = InboundWireReversal1.constructFromObject(data['reversal']);
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = WireTransferSubmission.constructFromObject(data['submission']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WireTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WireTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WireTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          TransferApproval.validateJSON(data['approval']);
        }
        // ensure the json data is a string
        if (data['beneficiary_address_line1'] && !(typeof data['beneficiary_address_line1'] === 'string' || data['beneficiary_address_line1'] instanceof String)) {
            throw new Error("Expected the field `beneficiary_address_line1` to be a primitive type in the JSON string but got " + data['beneficiary_address_line1']);
        }
        // ensure the json data is a string
        if (data['beneficiary_address_line2'] && !(typeof data['beneficiary_address_line2'] === 'string' || data['beneficiary_address_line2'] instanceof String)) {
            throw new Error("Expected the field `beneficiary_address_line2` to be a primitive type in the JSON string but got " + data['beneficiary_address_line2']);
        }
        // ensure the json data is a string
        if (data['beneficiary_address_line3'] && !(typeof data['beneficiary_address_line3'] === 'string' || data['beneficiary_address_line3'] instanceof String)) {
            throw new Error("Expected the field `beneficiary_address_line3` to be a primitive type in the JSON string but got " + data['beneficiary_address_line3']);
        }
        // ensure the json data is a string
        if (data['beneficiary_name'] && !(typeof data['beneficiary_name'] === 'string' || data['beneficiary_name'] instanceof String)) {
            throw new Error("Expected the field `beneficiary_name` to be a primitive type in the JSON string but got " + data['beneficiary_name']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          TransferCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['external_account_id'] && !(typeof data['external_account_id'] === 'string' || data['external_account_id'] instanceof String)) {
            throw new Error("Expected the field `external_account_id` to be a primitive type in the JSON string but got " + data['external_account_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message_to_recipient'] && !(typeof data['message_to_recipient'] === 'string' || data['message_to_recipient'] instanceof String)) {
            throw new Error("Expected the field `message_to_recipient` to be a primitive type in the JSON string but got " + data['message_to_recipient']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `reversal`
        if (data['reversal']) { // data not null
          InboundWireReversal1.validateJSON(data['reversal']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `submission`
        if (data['submission']) { // data not null
          WireTransferSubmission.validateJSON(data['submission']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WireTransfer.RequiredProperties = ["account_id", "account_number", "amount", "approval", "beneficiary_address_line1", "beneficiary_address_line2", "beneficiary_address_line3", "beneficiary_name", "cancellation", "created_at", "currency", "external_account_id", "id", "message_to_recipient", "network", "reversal", "routing_number", "status", "submission", "transaction_id", "type"];

/**
 * The Account to which the transfer belongs.
 * @member {String} account_id
 */
WireTransfer.prototype['account_id'] = undefined;

/**
 * The destination account number.
 * @member {String} account_number
 */
WireTransfer.prototype['account_number'] = undefined;

/**
 * The transfer amount in USD cents.
 * @member {Number} amount
 */
WireTransfer.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferApproval} approval
 */
WireTransfer.prototype['approval'] = undefined;

/**
 * The beneficiary's address line 1.
 * @member {String} beneficiary_address_line1
 */
WireTransfer.prototype['beneficiary_address_line1'] = undefined;

/**
 * The beneficiary's address line 2.
 * @member {String} beneficiary_address_line2
 */
WireTransfer.prototype['beneficiary_address_line2'] = undefined;

/**
 * The beneficiary's address line 3.
 * @member {String} beneficiary_address_line3
 */
WireTransfer.prototype['beneficiary_address_line3'] = undefined;

/**
 * The beneficiary's name.
 * @member {String} beneficiary_name
 */
WireTransfer.prototype['beneficiary_name'] = undefined;

/**
 * @member {module:model/TransferCancellation} cancellation
 */
WireTransfer.prototype['cancellation'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
WireTransfer.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
 * @member {module:model/WireTransfer.CurrencyEnum} currency
 */
WireTransfer.prototype['currency'] = undefined;

/**
 * The identifier of the External Account the transfer was made to, if any.
 * @member {String} external_account_id
 */
WireTransfer.prototype['external_account_id'] = undefined;

/**
 * The wire transfer's identifier.
 * @member {String} id
 */
WireTransfer.prototype['id'] = undefined;

/**
 * The message that will show on the recipient's bank statement.
 * @member {String} message_to_recipient
 */
WireTransfer.prototype['message_to_recipient'] = undefined;

/**
 * The transfer's network.
 * @member {module:model/WireTransfer.NetworkEnum} network
 */
WireTransfer.prototype['network'] = undefined;

/**
 * @member {module:model/InboundWireReversal1} reversal
 */
WireTransfer.prototype['reversal'] = undefined;

/**
 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
 * @member {String} routing_number
 */
WireTransfer.prototype['routing_number'] = undefined;

/**
 * The lifecycle status of the transfer.
 * @member {module:model/WireTransfer.StatusEnum} status
 */
WireTransfer.prototype['status'] = undefined;

/**
 * @member {module:model/WireTransferSubmission} submission
 */
WireTransfer.prototype['submission'] = undefined;

/**
 * The ID for the transaction funding the transfer.
 * @member {String} transaction_id
 */
WireTransfer.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `wire_transfer`.
 * @member {module:model/WireTransfer.TypeEnum} type
 */
WireTransfer.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
WireTransfer['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
WireTransfer['NetworkEnum'] = {

    /**
     * value: "wire"
     * @const
     */
    "wire": "wire"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WireTransfer['StatusEnum'] = {

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "requires_attention"
     * @const
     */
    "requires_attention": "requires_attention",

    /**
     * value: "pending_approval"
     * @const
     */
    "pending_approval": "pending_approval",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "reversed"
     * @const
     */
    "reversed": "reversed",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "pending_creating"
     * @const
     */
    "pending_creating": "pending_creating"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WireTransfer['TypeEnum'] = {

    /**
     * value: "wire_transfer"
     * @const
     */
    "wire_transfer": "wire_transfer"
};



export default WireTransfer;

