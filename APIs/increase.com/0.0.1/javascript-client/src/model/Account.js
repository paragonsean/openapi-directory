/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 * @version 0.0.1
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance.
     * @alias module:model/Account
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
     * @param currency {module:model/Account.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
     * @param entityId {String} The identifier for the Entity the Account belongs to.
     * @param id {String} The Account identifier.
     * @param informationalEntityId {String} The identifier of an Entity that, while not owning the Account, is associated with its activity.
     * @param interestAccrued {String} The interest accrued but not yet paid, expressed as a string containing a floating-point value.
     * @param interestAccruedAt {Date} The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
     * @param name {String} The name you choose for the Account.
     * @param status {module:model/Account.StatusEnum} The status of the Account.
     * @param type {module:model/Account.TypeEnum} A constant representing the object's type. For this resource it will always be `account`.
     */
    constructor(createdAt, currency, entityId, id, informationalEntityId, interestAccrued, interestAccruedAt, name, status, type) { 
        
        Account.initialize(this, createdAt, currency, entityId, id, informationalEntityId, interestAccrued, interestAccruedAt, name, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, currency, entityId, id, informationalEntityId, interestAccrued, interestAccruedAt, name, status, type) { 
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['entity_id'] = entityId;
        obj['id'] = id;
        obj['informational_entity_id'] = informationalEntityId;
        obj['interest_accrued'] = interestAccrued;
        obj['interest_accrued_at'] = interestAccruedAt;
        obj['name'] = name;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('informational_entity_id')) {
                obj['informational_entity_id'] = ApiClient.convertToType(data['informational_entity_id'], 'String');
            }
            if (data.hasOwnProperty('interest_accrued')) {
                obj['interest_accrued'] = ApiClient.convertToType(data['interest_accrued'], 'String');
            }
            if (data.hasOwnProperty('interest_accrued_at')) {
                obj['interest_accrued_at'] = ApiClient.convertToType(data['interest_accrued_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['informational_entity_id'] && !(typeof data['informational_entity_id'] === 'string' || data['informational_entity_id'] instanceof String)) {
            throw new Error("Expected the field `informational_entity_id` to be a primitive type in the JSON string but got " + data['informational_entity_id']);
        }
        // ensure the json data is a string
        if (data['interest_accrued'] && !(typeof data['interest_accrued'] === 'string' || data['interest_accrued'] instanceof String)) {
            throw new Error("Expected the field `interest_accrued` to be a primitive type in the JSON string but got " + data['interest_accrued']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Account.RequiredProperties = ["created_at", "currency", "entity_id", "id", "informational_entity_id", "interest_accrued", "interest_accrued_at", "name", "status", "type"];

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
 * @member {Date} created_at
 */
Account.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
 * @member {module:model/Account.CurrencyEnum} currency
 */
Account.prototype['currency'] = undefined;

/**
 * The identifier for the Entity the Account belongs to.
 * @member {String} entity_id
 */
Account.prototype['entity_id'] = undefined;

/**
 * The Account identifier.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * The identifier of an Entity that, while not owning the Account, is associated with its activity.
 * @member {String} informational_entity_id
 */
Account.prototype['informational_entity_id'] = undefined;

/**
 * The interest accrued but not yet paid, expressed as a string containing a floating-point value.
 * @member {String} interest_accrued
 */
Account.prototype['interest_accrued'] = undefined;

/**
 * The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
 * @member {Date} interest_accrued_at
 */
Account.prototype['interest_accrued_at'] = undefined;

/**
 * The name you choose for the Account.
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * The status of the Account.
 * @member {module:model/Account.StatusEnum} status
 */
Account.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `account`.
 * @member {module:model/Account.TypeEnum} type
 */
Account.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Account['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Account['StatusEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Account['TypeEnum'] = {

    /**
     * value: "account"
     * @const
     */
    "account": "account"
};



export default Account;

