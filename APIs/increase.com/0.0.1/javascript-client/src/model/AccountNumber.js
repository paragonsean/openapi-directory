/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountNumber model module.
 * @module model/AccountNumber
 * @version 0.0.1
 */
class AccountNumber {
    /**
     * Constructs a new <code>AccountNumber</code>.
     * Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment.
     * @alias module:model/AccountNumber
     * @param accountId {String} The identifier for the account this Account Number belongs to.
     * @param accountNumber {String} The account number.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.
     * @param id {String} The Account Number identifier.
     * @param name {String} The name you choose for the Account Number.
     * @param routingNumber {String} The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * @param status {module:model/AccountNumber.StatusEnum} This indicates if payments can be made to the Account Number.
     * @param type {module:model/AccountNumber.TypeEnum} A constant representing the object's type. For this resource it will always be `account_number`.
     */
    constructor(accountId, accountNumber, createdAt, id, name, routingNumber, status, type) { 
        
        AccountNumber.initialize(this, accountId, accountNumber, createdAt, id, name, routingNumber, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountNumber, createdAt, id, name, routingNumber, status, type) { 
        obj['account_id'] = accountId;
        obj['account_number'] = accountNumber;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['name'] = name;
        obj['routing_number'] = routingNumber;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AccountNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountNumber} obj Optional instance to populate.
     * @return {module:model/AccountNumber} The populated <code>AccountNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountNumber();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountNumber</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountNumber.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AccountNumber.RequiredProperties = ["account_id", "account_number", "created_at", "id", "name", "routing_number", "status", "type"];

/**
 * The identifier for the account this Account Number belongs to.
 * @member {String} account_id
 */
AccountNumber.prototype['account_id'] = undefined;

/**
 * The account number.
 * @member {String} account_number
 */
AccountNumber.prototype['account_number'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.
 * @member {Date} created_at
 */
AccountNumber.prototype['created_at'] = undefined;

/**
 * The Account Number identifier.
 * @member {String} id
 */
AccountNumber.prototype['id'] = undefined;

/**
 * The name you choose for the Account Number.
 * @member {String} name
 */
AccountNumber.prototype['name'] = undefined;

/**
 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
 * @member {String} routing_number
 */
AccountNumber.prototype['routing_number'] = undefined;

/**
 * This indicates if payments can be made to the Account Number.
 * @member {module:model/AccountNumber.StatusEnum} status
 */
AccountNumber.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `account_number`.
 * @member {module:model/AccountNumber.TypeEnum} type
 */
AccountNumber.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AccountNumber['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AccountNumber['TypeEnum'] = {

    /**
     * value: "account_number"
     * @const
     */
    "account_number": "account_number"
};



export default AccountNumber;

