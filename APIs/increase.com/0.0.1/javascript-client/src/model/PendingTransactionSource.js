/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHTransferInstruction from './ACHTransferInstruction';
import AccountTransferInstruction from './AccountTransferInstruction';
import CardAuthorization from './CardAuthorization';
import CheckDepositInstruction from './CheckDepositInstruction';
import CheckTransferInstruction from './CheckTransferInstruction';
import DeprecatedCardAuthorization from './DeprecatedCardAuthorization';
import InboundFundsHold from './InboundFundsHold';
import RealTimePaymentsTransferInstruction from './RealTimePaymentsTransferInstruction';
import WireDrawdownPaymentInstruction from './WireDrawdownPaymentInstruction';
import WireTransferInstruction from './WireTransferInstruction';

/**
 * The PendingTransactionSource model module.
 * @module model/PendingTransactionSource
 * @version 0.0.1
 */
class PendingTransactionSource {
    /**
     * Constructs a new <code>PendingTransactionSource</code>.
     * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant&#39;s industry and location.
     * @alias module:model/PendingTransactionSource
     * @param accountTransferInstruction {module:model/AccountTransferInstruction} 
     * @param achTransferInstruction {module:model/ACHTransferInstruction} 
     * @param cardAuthorization {module:model/CardAuthorization} 
     * @param cardRouteAuthorization {module:model/DeprecatedCardAuthorization} 
     * @param category {module:model/PendingTransactionSource.CategoryEnum} The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
     * @param checkDepositInstruction {module:model/CheckDepositInstruction} 
     * @param checkTransferInstruction {module:model/CheckTransferInstruction} 
     * @param inboundFundsHold {module:model/InboundFundsHold} 
     * @param realTimePaymentsTransferInstruction {module:model/RealTimePaymentsTransferInstruction} 
     * @param wireDrawdownPaymentInstruction {module:model/WireDrawdownPaymentInstruction} 
     * @param wireTransferInstruction {module:model/WireTransferInstruction} 
     */
    constructor(accountTransferInstruction, achTransferInstruction, cardAuthorization, cardRouteAuthorization, category, checkDepositInstruction, checkTransferInstruction, inboundFundsHold, realTimePaymentsTransferInstruction, wireDrawdownPaymentInstruction, wireTransferInstruction) { 
        
        PendingTransactionSource.initialize(this, accountTransferInstruction, achTransferInstruction, cardAuthorization, cardRouteAuthorization, category, checkDepositInstruction, checkTransferInstruction, inboundFundsHold, realTimePaymentsTransferInstruction, wireDrawdownPaymentInstruction, wireTransferInstruction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountTransferInstruction, achTransferInstruction, cardAuthorization, cardRouteAuthorization, category, checkDepositInstruction, checkTransferInstruction, inboundFundsHold, realTimePaymentsTransferInstruction, wireDrawdownPaymentInstruction, wireTransferInstruction) { 
        obj['account_transfer_instruction'] = accountTransferInstruction;
        obj['ach_transfer_instruction'] = achTransferInstruction;
        obj['card_authorization'] = cardAuthorization;
        obj['card_route_authorization'] = cardRouteAuthorization;
        obj['category'] = category;
        obj['check_deposit_instruction'] = checkDepositInstruction;
        obj['check_transfer_instruction'] = checkTransferInstruction;
        obj['inbound_funds_hold'] = inboundFundsHold;
        obj['real_time_payments_transfer_instruction'] = realTimePaymentsTransferInstruction;
        obj['wire_drawdown_payment_instruction'] = wireDrawdownPaymentInstruction;
        obj['wire_transfer_instruction'] = wireTransferInstruction;
    }

    /**
     * Constructs a <code>PendingTransactionSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingTransactionSource} obj Optional instance to populate.
     * @return {module:model/PendingTransactionSource} The populated <code>PendingTransactionSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingTransactionSource();

            if (data.hasOwnProperty('account_transfer_instruction')) {
                obj['account_transfer_instruction'] = AccountTransferInstruction.constructFromObject(data['account_transfer_instruction']);
            }
            if (data.hasOwnProperty('ach_transfer_instruction')) {
                obj['ach_transfer_instruction'] = ACHTransferInstruction.constructFromObject(data['ach_transfer_instruction']);
            }
            if (data.hasOwnProperty('card_authorization')) {
                obj['card_authorization'] = CardAuthorization.constructFromObject(data['card_authorization']);
            }
            if (data.hasOwnProperty('card_route_authorization')) {
                obj['card_route_authorization'] = DeprecatedCardAuthorization.constructFromObject(data['card_route_authorization']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('check_deposit_instruction')) {
                obj['check_deposit_instruction'] = CheckDepositInstruction.constructFromObject(data['check_deposit_instruction']);
            }
            if (data.hasOwnProperty('check_transfer_instruction')) {
                obj['check_transfer_instruction'] = CheckTransferInstruction.constructFromObject(data['check_transfer_instruction']);
            }
            if (data.hasOwnProperty('inbound_funds_hold')) {
                obj['inbound_funds_hold'] = InboundFundsHold.constructFromObject(data['inbound_funds_hold']);
            }
            if (data.hasOwnProperty('real_time_payments_transfer_instruction')) {
                obj['real_time_payments_transfer_instruction'] = RealTimePaymentsTransferInstruction.constructFromObject(data['real_time_payments_transfer_instruction']);
            }
            if (data.hasOwnProperty('wire_drawdown_payment_instruction')) {
                obj['wire_drawdown_payment_instruction'] = WireDrawdownPaymentInstruction.constructFromObject(data['wire_drawdown_payment_instruction']);
            }
            if (data.hasOwnProperty('wire_transfer_instruction')) {
                obj['wire_transfer_instruction'] = WireTransferInstruction.constructFromObject(data['wire_transfer_instruction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PendingTransactionSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PendingTransactionSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PendingTransactionSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account_transfer_instruction`
        if (data['account_transfer_instruction']) { // data not null
          AccountTransferInstruction.validateJSON(data['account_transfer_instruction']);
        }
        // validate the optional field `ach_transfer_instruction`
        if (data['ach_transfer_instruction']) { // data not null
          ACHTransferInstruction.validateJSON(data['ach_transfer_instruction']);
        }
        // validate the optional field `card_authorization`
        if (data['card_authorization']) { // data not null
          CardAuthorization.validateJSON(data['card_authorization']);
        }
        // validate the optional field `card_route_authorization`
        if (data['card_route_authorization']) { // data not null
          DeprecatedCardAuthorization.validateJSON(data['card_route_authorization']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `check_deposit_instruction`
        if (data['check_deposit_instruction']) { // data not null
          CheckDepositInstruction.validateJSON(data['check_deposit_instruction']);
        }
        // validate the optional field `check_transfer_instruction`
        if (data['check_transfer_instruction']) { // data not null
          CheckTransferInstruction.validateJSON(data['check_transfer_instruction']);
        }
        // validate the optional field `inbound_funds_hold`
        if (data['inbound_funds_hold']) { // data not null
          InboundFundsHold.validateJSON(data['inbound_funds_hold']);
        }
        // validate the optional field `real_time_payments_transfer_instruction`
        if (data['real_time_payments_transfer_instruction']) { // data not null
          RealTimePaymentsTransferInstruction.validateJSON(data['real_time_payments_transfer_instruction']);
        }
        // validate the optional field `wire_drawdown_payment_instruction`
        if (data['wire_drawdown_payment_instruction']) { // data not null
          WireDrawdownPaymentInstruction.validateJSON(data['wire_drawdown_payment_instruction']);
        }
        // validate the optional field `wire_transfer_instruction`
        if (data['wire_transfer_instruction']) { // data not null
          WireTransferInstruction.validateJSON(data['wire_transfer_instruction']);
        }

        return true;
    }


}

PendingTransactionSource.RequiredProperties = ["account_transfer_instruction", "ach_transfer_instruction", "card_authorization", "card_route_authorization", "category", "check_deposit_instruction", "check_transfer_instruction", "inbound_funds_hold", "real_time_payments_transfer_instruction", "wire_drawdown_payment_instruction", "wire_transfer_instruction"];

/**
 * @member {module:model/AccountTransferInstruction} account_transfer_instruction
 */
PendingTransactionSource.prototype['account_transfer_instruction'] = undefined;

/**
 * @member {module:model/ACHTransferInstruction} ach_transfer_instruction
 */
PendingTransactionSource.prototype['ach_transfer_instruction'] = undefined;

/**
 * @member {module:model/CardAuthorization} card_authorization
 */
PendingTransactionSource.prototype['card_authorization'] = undefined;

/**
 * @member {module:model/DeprecatedCardAuthorization} card_route_authorization
 */
PendingTransactionSource.prototype['card_route_authorization'] = undefined;

/**
 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 * @member {module:model/PendingTransactionSource.CategoryEnum} category
 */
PendingTransactionSource.prototype['category'] = undefined;

/**
 * @member {module:model/CheckDepositInstruction} check_deposit_instruction
 */
PendingTransactionSource.prototype['check_deposit_instruction'] = undefined;

/**
 * @member {module:model/CheckTransferInstruction} check_transfer_instruction
 */
PendingTransactionSource.prototype['check_transfer_instruction'] = undefined;

/**
 * @member {module:model/InboundFundsHold} inbound_funds_hold
 */
PendingTransactionSource.prototype['inbound_funds_hold'] = undefined;

/**
 * @member {module:model/RealTimePaymentsTransferInstruction} real_time_payments_transfer_instruction
 */
PendingTransactionSource.prototype['real_time_payments_transfer_instruction'] = undefined;

/**
 * @member {module:model/WireDrawdownPaymentInstruction} wire_drawdown_payment_instruction
 */
PendingTransactionSource.prototype['wire_drawdown_payment_instruction'] = undefined;

/**
 * @member {module:model/WireTransferInstruction} wire_transfer_instruction
 */
PendingTransactionSource.prototype['wire_transfer_instruction'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
PendingTransactionSource['CategoryEnum'] = {

    /**
     * value: "account_transfer_instruction"
     * @const
     */
    "account_transfer_instruction": "account_transfer_instruction",

    /**
     * value: "ach_transfer_instruction"
     * @const
     */
    "ach_transfer_instruction": "ach_transfer_instruction",

    /**
     * value: "card_authorization"
     * @const
     */
    "card_authorization": "card_authorization",

    /**
     * value: "check_deposit_instruction"
     * @const
     */
    "check_deposit_instruction": "check_deposit_instruction",

    /**
     * value: "check_transfer_instruction"
     * @const
     */
    "check_transfer_instruction": "check_transfer_instruction",

    /**
     * value: "inbound_funds_hold"
     * @const
     */
    "inbound_funds_hold": "inbound_funds_hold",

    /**
     * value: "card_route_authorization"
     * @const
     */
    "card_route_authorization": "card_route_authorization",

    /**
     * value: "real_time_payments_transfer_instruction"
     * @const
     */
    "real_time_payments_transfer_instruction": "real_time_payments_transfer_instruction",

    /**
     * value: "wire_drawdown_payment_instruction"
     * @const
     */
    "wire_drawdown_payment_instruction": "wire_drawdown_payment_instruction",

    /**
     * value: "wire_transfer_instruction"
     * @const
     */
    "wire_transfer_instruction": "wire_transfer_instruction",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default PendingTransactionSource;

