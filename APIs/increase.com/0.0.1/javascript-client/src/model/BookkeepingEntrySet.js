/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntriesElement from './EntriesElement';

/**
 * The BookkeepingEntrySet model module.
 * @module model/BookkeepingEntrySet
 * @version 0.0.1
 */
class BookkeepingEntrySet {
    /**
     * Constructs a new <code>BookkeepingEntrySet</code>.
     * Entry Sets are accounting entries that are transactionally applied.
     * @alias module:model/BookkeepingEntrySet
     * @param date {Date} The timestamp of the entry set.
     * @param entries {Array.<module:model/EntriesElement>} The entries
     * @param id {String} The entry set identifier.
     * @param transactionId {String} The transaction identifier, if any.
     * @param type {module:model/BookkeepingEntrySet.TypeEnum} A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.
     */
    constructor(date, entries, id, transactionId, type) { 
        
        BookkeepingEntrySet.initialize(this, date, entries, id, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date, entries, id, transactionId, type) { 
        obj['date'] = date;
        obj['entries'] = entries;
        obj['id'] = id;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BookkeepingEntrySet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookkeepingEntrySet} obj Optional instance to populate.
     * @return {module:model/BookkeepingEntrySet} The populated <code>BookkeepingEntrySet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookkeepingEntrySet();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [EntriesElement]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookkeepingEntrySet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookkeepingEntrySet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BookkeepingEntrySet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                EntriesElement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BookkeepingEntrySet.RequiredProperties = ["date", "entries", "id", "transaction_id", "type"];

/**
 * The timestamp of the entry set.
 * @member {Date} date
 */
BookkeepingEntrySet.prototype['date'] = undefined;

/**
 * The entries
 * @member {Array.<module:model/EntriesElement>} entries
 */
BookkeepingEntrySet.prototype['entries'] = undefined;

/**
 * The entry set identifier.
 * @member {String} id
 */
BookkeepingEntrySet.prototype['id'] = undefined;

/**
 * The transaction identifier, if any.
 * @member {String} transaction_id
 */
BookkeepingEntrySet.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.
 * @member {module:model/BookkeepingEntrySet.TypeEnum} type
 */
BookkeepingEntrySet.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BookkeepingEntrySet['TypeEnum'] = {

    /**
     * value: "bookkeeping_entry_set"
     * @const
     */
    "bookkeeping_entry_set": "bookkeeping_entry_set"
};



export default BookkeepingEntrySet;

