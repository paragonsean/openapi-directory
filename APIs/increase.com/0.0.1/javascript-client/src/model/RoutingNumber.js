/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoutingNumber model module.
 * @module model/RoutingNumber
 * @version 0.0.1
 */
class RoutingNumber {
    /**
     * Constructs a new <code>RoutingNumber</code>.
     * Routing numbers are used to identify your bank in a financial transaction.
     * @alias module:model/RoutingNumber
     * @param achTransfers {module:model/RoutingNumber.AchTransfersEnum} This routing number's support for ACH Transfers.
     * @param name {String} The name of the financial institution belonging to a routing number.
     * @param realTimePaymentsTransfers {module:model/RoutingNumber.RealTimePaymentsTransfersEnum} This routing number's support for Real Time Payments Transfers.
     * @param routingNumber {String} The nine digit routing number identifier.
     * @param type {module:model/RoutingNumber.TypeEnum} A constant representing the object's type. For this resource it will always be `routing_number`.
     * @param wireTransfers {module:model/RoutingNumber.WireTransfersEnum} This routing number's support for Wire Transfers.
     */
    constructor(achTransfers, name, realTimePaymentsTransfers, routingNumber, type, wireTransfers) { 
        
        RoutingNumber.initialize(this, achTransfers, name, realTimePaymentsTransfers, routingNumber, type, wireTransfers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, achTransfers, name, realTimePaymentsTransfers, routingNumber, type, wireTransfers) { 
        obj['ach_transfers'] = achTransfers;
        obj['name'] = name;
        obj['real_time_payments_transfers'] = realTimePaymentsTransfers;
        obj['routing_number'] = routingNumber;
        obj['type'] = type;
        obj['wire_transfers'] = wireTransfers;
    }

    /**
     * Constructs a <code>RoutingNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoutingNumber} obj Optional instance to populate.
     * @return {module:model/RoutingNumber} The populated <code>RoutingNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoutingNumber();

            if (data.hasOwnProperty('ach_transfers')) {
                obj['ach_transfers'] = ApiClient.convertToType(data['ach_transfers'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('real_time_payments_transfers')) {
                obj['real_time_payments_transfers'] = ApiClient.convertToType(data['real_time_payments_transfers'], 'String');
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('wire_transfers')) {
                obj['wire_transfers'] = ApiClient.convertToType(data['wire_transfers'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoutingNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoutingNumber</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoutingNumber.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ach_transfers'] && !(typeof data['ach_transfers'] === 'string' || data['ach_transfers'] instanceof String)) {
            throw new Error("Expected the field `ach_transfers` to be a primitive type in the JSON string but got " + data['ach_transfers']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['real_time_payments_transfers'] && !(typeof data['real_time_payments_transfers'] === 'string' || data['real_time_payments_transfers'] instanceof String)) {
            throw new Error("Expected the field `real_time_payments_transfers` to be a primitive type in the JSON string but got " + data['real_time_payments_transfers']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['wire_transfers'] && !(typeof data['wire_transfers'] === 'string' || data['wire_transfers'] instanceof String)) {
            throw new Error("Expected the field `wire_transfers` to be a primitive type in the JSON string but got " + data['wire_transfers']);
        }

        return true;
    }


}

RoutingNumber.RequiredProperties = ["ach_transfers", "name", "real_time_payments_transfers", "routing_number", "type", "wire_transfers"];

/**
 * This routing number's support for ACH Transfers.
 * @member {module:model/RoutingNumber.AchTransfersEnum} ach_transfers
 */
RoutingNumber.prototype['ach_transfers'] = undefined;

/**
 * The name of the financial institution belonging to a routing number.
 * @member {String} name
 */
RoutingNumber.prototype['name'] = undefined;

/**
 * This routing number's support for Real Time Payments Transfers.
 * @member {module:model/RoutingNumber.RealTimePaymentsTransfersEnum} real_time_payments_transfers
 */
RoutingNumber.prototype['real_time_payments_transfers'] = undefined;

/**
 * The nine digit routing number identifier.
 * @member {String} routing_number
 */
RoutingNumber.prototype['routing_number'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `routing_number`.
 * @member {module:model/RoutingNumber.TypeEnum} type
 */
RoutingNumber.prototype['type'] = undefined;

/**
 * This routing number's support for Wire Transfers.
 * @member {module:model/RoutingNumber.WireTransfersEnum} wire_transfers
 */
RoutingNumber.prototype['wire_transfers'] = undefined;





/**
 * Allowed values for the <code>ach_transfers</code> property.
 * @enum {String}
 * @readonly
 */
RoutingNumber['AchTransfersEnum'] = {

    /**
     * value: "supported"
     * @const
     */
    "supported": "supported",

    /**
     * value: "not_supported"
     * @const
     */
    "not_supported": "not_supported"
};


/**
 * Allowed values for the <code>real_time_payments_transfers</code> property.
 * @enum {String}
 * @readonly
 */
RoutingNumber['RealTimePaymentsTransfersEnum'] = {

    /**
     * value: "supported"
     * @const
     */
    "supported": "supported",

    /**
     * value: "not_supported"
     * @const
     */
    "not_supported": "not_supported"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RoutingNumber['TypeEnum'] = {

    /**
     * value: "routing_number"
     * @const
     */
    "routing_number": "routing_number"
};


/**
 * Allowed values for the <code>wire_transfers</code> property.
 * @enum {String}
 * @readonly
 */
RoutingNumber['WireTransfersEnum'] = {

    /**
     * value: "supported"
     * @const
     */
    "supported": "supported",

    /**
     * value: "not_supported"
     * @const
     */
    "not_supported": "not_supported"
};



export default RoutingNumber;

