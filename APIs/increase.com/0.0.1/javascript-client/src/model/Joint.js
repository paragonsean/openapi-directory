/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Individual1 from './Individual1';

/**
 * The Joint model module.
 * @module model/Joint
 * @version 0.0.1
 */
class Joint {
    /**
     * Constructs a new <code>Joint</code>.
     * Details of the joint entity. Will be present if &#x60;structure&#x60; is equal to &#x60;joint&#x60;.
     * @alias module:model/Joint
     * @param individuals {Array.<module:model/Individual1>} The two individuals that share control of the entity.
     * @param name {String} The entity's name.
     */
    constructor(individuals, name) { 
        
        Joint.initialize(this, individuals, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, individuals, name) { 
        obj['individuals'] = individuals;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Joint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Joint} obj Optional instance to populate.
     * @return {module:model/Joint} The populated <code>Joint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Joint();

            if (data.hasOwnProperty('individuals')) {
                obj['individuals'] = ApiClient.convertToType(data['individuals'], [Individual1]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Joint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Joint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Joint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['individuals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['individuals'])) {
                throw new Error("Expected the field `individuals` to be an array in the JSON data but got " + data['individuals']);
            }
            // validate the optional field `individuals` (array)
            for (const item of data['individuals']) {
                Individual1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Joint.RequiredProperties = ["individuals", "name"];

/**
 * The two individuals that share control of the entity.
 * @member {Array.<module:model/Individual1>} individuals
 */
Joint.prototype['individuals'] = undefined;

/**
 * The entity's name.
 * @member {String} name
 */
Joint.prototype['name'] = undefined;






export default Joint;

