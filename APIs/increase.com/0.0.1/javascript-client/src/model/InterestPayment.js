/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InterestPayment model module.
 * @module model/InterestPayment
 * @version 0.0.1
 */
class InterestPayment {
    /**
     * Constructs a new <code>InterestPayment</code>.
     * A Interest Payment object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;interest_payment&#x60;.
     * @alias module:model/InterestPayment
     * @param accruedOnAccountId {String} The account on which the interest was accrued.
     * @param amount {Number} The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param currency {module:model/InterestPayment.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
     * @param periodEnd {Date} The end of the period for which this transaction paid interest.
     * @param periodStart {Date} The start of the period for which this transaction paid interest.
     */
    constructor(accruedOnAccountId, amount, currency, periodEnd, periodStart) { 
        
        InterestPayment.initialize(this, accruedOnAccountId, amount, currency, periodEnd, periodStart);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accruedOnAccountId, amount, currency, periodEnd, periodStart) { 
        obj['accrued_on_account_id'] = accruedOnAccountId;
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['period_end'] = periodEnd;
        obj['period_start'] = periodStart;
    }

    /**
     * Constructs a <code>InterestPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterestPayment} obj Optional instance to populate.
     * @return {module:model/InterestPayment} The populated <code>InterestPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterestPayment();

            if (data.hasOwnProperty('accrued_on_account_id')) {
                obj['accrued_on_account_id'] = ApiClient.convertToType(data['accrued_on_account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'Date');
            }
            if (data.hasOwnProperty('period_start')) {
                obj['period_start'] = ApiClient.convertToType(data['period_start'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterestPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterestPayment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InterestPayment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accrued_on_account_id'] && !(typeof data['accrued_on_account_id'] === 'string' || data['accrued_on_account_id'] instanceof String)) {
            throw new Error("Expected the field `accrued_on_account_id` to be a primitive type in the JSON string but got " + data['accrued_on_account_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }

        return true;
    }


}

InterestPayment.RequiredProperties = ["accrued_on_account_id", "amount", "currency", "period_end", "period_start"];

/**
 * The account on which the interest was accrued.
 * @member {String} accrued_on_account_id
 */
InterestPayment.prototype['accrued_on_account_id'] = undefined;

/**
 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
InterestPayment.prototype['amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
 * @member {module:model/InterestPayment.CurrencyEnum} currency
 */
InterestPayment.prototype['currency'] = undefined;

/**
 * The end of the period for which this transaction paid interest.
 * @member {Date} period_end
 */
InterestPayment.prototype['period_end'] = undefined;

/**
 * The start of the period for which this transaction paid interest.
 * @member {Date} period_start
 */
InterestPayment.prototype['period_start'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
InterestPayment['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default InterestPayment;

