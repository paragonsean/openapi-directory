/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address1 from './Address1';
import Identification from './Identification';

/**
 * The Individual2 model module.
 * @module model/Individual2
 * @version 0.0.1
 */
class Individual2 {
    /**
     * Constructs a new <code>Individual2</code>.
     * Details of the natural person entity. Will be present if &#x60;structure&#x60; is equal to &#x60;natural_person&#x60;.
     * @alias module:model/Individual2
     * @param address {module:model/Address1} 
     * @param dateOfBirth {Date} The person's date of birth in YYYY-MM-DD format.
     * @param identification {module:model/Identification} 
     * @param name {String} The person's legal name.
     */
    constructor(address, dateOfBirth, identification, name) { 
        
        Individual2.initialize(this, address, dateOfBirth, identification, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, dateOfBirth, identification, name) { 
        obj['address'] = address;
        obj['date_of_birth'] = dateOfBirth;
        obj['identification'] = identification;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Individual2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Individual2} obj Optional instance to populate.
     * @return {module:model/Individual2} The populated <code>Individual2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Individual2();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address1.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('date_of_birth')) {
                obj['date_of_birth'] = ApiClient.convertToType(data['date_of_birth'], 'Date');
            }
            if (data.hasOwnProperty('identification')) {
                obj['identification'] = Identification.constructFromObject(data['identification']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Individual2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Individual2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Individual2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address1.validateJSON(data['address']);
        }
        // validate the optional field `identification`
        if (data['identification']) { // data not null
          Identification.validateJSON(data['identification']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Individual2.RequiredProperties = ["address", "date_of_birth", "identification", "name"];

/**
 * @member {module:model/Address1} address
 */
Individual2.prototype['address'] = undefined;

/**
 * The person's date of birth in YYYY-MM-DD format.
 * @member {Date} date_of_birth
 */
Individual2.prototype['date_of_birth'] = undefined;

/**
 * @member {module:model/Identification} identification
 */
Individual2.prototype['identification'] = undefined;

/**
 * The person's legal name.
 * @member {String} name
 */
Individual2.prototype['name'] = undefined;






export default Individual2;

