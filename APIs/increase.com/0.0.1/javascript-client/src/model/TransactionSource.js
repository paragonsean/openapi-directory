/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHCheckConversion from './ACHCheckConversion';
import ACHCheckConversionReturn from './ACHCheckConversionReturn';
import ACHTransferIntention from './ACHTransferIntention';
import ACHTransferRejection from './ACHTransferRejection';
import ACHTransferReturn1 from './ACHTransferReturn1';
import AccountTransferIntention from './AccountTransferIntention';
import CardDisputeAcceptance1 from './CardDisputeAcceptance1';
import CardRefund from './CardRefund';
import CardRevenuePayment from './CardRevenuePayment';
import CardSettlement from './CardSettlement';
import CheckDepositAcceptance1 from './CheckDepositAcceptance1';
import CheckDepositReturn1 from './CheckDepositReturn1';
import CheckTransferIntention from './CheckTransferIntention';
import CheckTransferRejection from './CheckTransferRejection';
import CheckTransferReturn1 from './CheckTransferReturn1';
import CheckTransferStopPaymentRequest1 from './CheckTransferStopPaymentRequest1';
import DeprecatedCardRefund from './DeprecatedCardRefund';
import DeprecatedCardSettlement from './DeprecatedCardSettlement';
import DisputeResolution from './DisputeResolution';
import EmpyrealCashDeposit from './EmpyrealCashDeposit';
import FeePayment from './FeePayment';
import InboundACHTransfer from './InboundACHTransfer';
import InboundCheck from './InboundCheck';
import InboundInternationalACHTransfer from './InboundInternationalACHTransfer';
import InboundRealTimePaymentsTransferConfirmation from './InboundRealTimePaymentsTransferConfirmation';
import InboundWireDrawdownPayment from './InboundWireDrawdownPayment';
import InboundWireDrawdownPaymentReversal from './InboundWireDrawdownPaymentReversal';
import InboundWireReversal from './InboundWireReversal';
import InboundWireTransfer from './InboundWireTransfer';
import InterestPayment from './InterestPayment';
import InternalSource from './InternalSource';
import RealTimePaymentsTransferAcknowledgement from './RealTimePaymentsTransferAcknowledgement';
import SampleFunds from './SampleFunds';
import WireDrawdownPaymentIntention from './WireDrawdownPaymentIntention';
import WireDrawdownPaymentRejection from './WireDrawdownPaymentRejection';
import WireTransferIntention from './WireTransferIntention';
import WireTransferRejection from './WireTransferRejection';

/**
 * The TransactionSource model module.
 * @module model/TransactionSource
 * @version 0.0.1
 */
class TransactionSource {
    /**
     * Constructs a new <code>TransactionSource</code>.
     * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
     * @alias module:model/TransactionSource
     * @param accountTransferIntention {module:model/AccountTransferIntention} 
     * @param achCheckConversion {module:model/ACHCheckConversion} 
     * @param achCheckConversionReturn {module:model/ACHCheckConversionReturn} 
     * @param achTransferIntention {module:model/ACHTransferIntention} 
     * @param achTransferRejection {module:model/ACHTransferRejection} 
     * @param achTransferReturn {module:model/ACHTransferReturn1} 
     * @param cardDisputeAcceptance {module:model/CardDisputeAcceptance1} 
     * @param cardRefund {module:model/CardRefund} 
     * @param cardRevenuePayment {module:model/CardRevenuePayment} 
     * @param cardRouteRefund {module:model/DeprecatedCardRefund} 
     * @param cardRouteSettlement {module:model/DeprecatedCardSettlement} 
     * @param cardSettlement {module:model/CardSettlement} 
     * @param category {module:model/TransactionSource.CategoryEnum} The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
     * @param checkDepositAcceptance {module:model/CheckDepositAcceptance1} 
     * @param checkDepositReturn {module:model/CheckDepositReturn1} 
     * @param checkTransferIntention {module:model/CheckTransferIntention} 
     * @param checkTransferRejection {module:model/CheckTransferRejection} 
     * @param checkTransferReturn {module:model/CheckTransferReturn1} 
     * @param checkTransferStopPaymentRequest {module:model/CheckTransferStopPaymentRequest1} 
     * @param disputeResolution {module:model/DisputeResolution} 
     * @param empyrealCashDeposit {module:model/EmpyrealCashDeposit} 
     * @param feePayment {module:model/FeePayment} 
     * @param inboundAchTransfer {module:model/InboundACHTransfer} 
     * @param inboundCheck {module:model/InboundCheck} 
     * @param inboundInternationalAchTransfer {module:model/InboundInternationalACHTransfer} 
     * @param inboundRealTimePaymentsTransferConfirmation {module:model/InboundRealTimePaymentsTransferConfirmation} 
     * @param inboundWireDrawdownPayment {module:model/InboundWireDrawdownPayment} 
     * @param inboundWireDrawdownPaymentReversal {module:model/InboundWireDrawdownPaymentReversal} 
     * @param inboundWireReversal {module:model/InboundWireReversal} 
     * @param inboundWireTransfer {module:model/InboundWireTransfer} 
     * @param interestPayment {module:model/InterestPayment} 
     * @param internalSource {module:model/InternalSource} 
     * @param realTimePaymentsTransferAcknowledgement {module:model/RealTimePaymentsTransferAcknowledgement} 
     * @param sampleFunds {module:model/SampleFunds} 
     * @param wireDrawdownPaymentIntention {module:model/WireDrawdownPaymentIntention} 
     * @param wireDrawdownPaymentRejection {module:model/WireDrawdownPaymentRejection} 
     * @param wireTransferIntention {module:model/WireTransferIntention} 
     * @param wireTransferRejection {module:model/WireTransferRejection} 
     */
    constructor(accountTransferIntention, achCheckConversion, achCheckConversionReturn, achTransferIntention, achTransferRejection, achTransferReturn, cardDisputeAcceptance, cardRefund, cardRevenuePayment, cardRouteRefund, cardRouteSettlement, cardSettlement, category, checkDepositAcceptance, checkDepositReturn, checkTransferIntention, checkTransferRejection, checkTransferReturn, checkTransferStopPaymentRequest, disputeResolution, empyrealCashDeposit, feePayment, inboundAchTransfer, inboundCheck, inboundInternationalAchTransfer, inboundRealTimePaymentsTransferConfirmation, inboundWireDrawdownPayment, inboundWireDrawdownPaymentReversal, inboundWireReversal, inboundWireTransfer, interestPayment, internalSource, realTimePaymentsTransferAcknowledgement, sampleFunds, wireDrawdownPaymentIntention, wireDrawdownPaymentRejection, wireTransferIntention, wireTransferRejection) { 
        
        TransactionSource.initialize(this, accountTransferIntention, achCheckConversion, achCheckConversionReturn, achTransferIntention, achTransferRejection, achTransferReturn, cardDisputeAcceptance, cardRefund, cardRevenuePayment, cardRouteRefund, cardRouteSettlement, cardSettlement, category, checkDepositAcceptance, checkDepositReturn, checkTransferIntention, checkTransferRejection, checkTransferReturn, checkTransferStopPaymentRequest, disputeResolution, empyrealCashDeposit, feePayment, inboundAchTransfer, inboundCheck, inboundInternationalAchTransfer, inboundRealTimePaymentsTransferConfirmation, inboundWireDrawdownPayment, inboundWireDrawdownPaymentReversal, inboundWireReversal, inboundWireTransfer, interestPayment, internalSource, realTimePaymentsTransferAcknowledgement, sampleFunds, wireDrawdownPaymentIntention, wireDrawdownPaymentRejection, wireTransferIntention, wireTransferRejection);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountTransferIntention, achCheckConversion, achCheckConversionReturn, achTransferIntention, achTransferRejection, achTransferReturn, cardDisputeAcceptance, cardRefund, cardRevenuePayment, cardRouteRefund, cardRouteSettlement, cardSettlement, category, checkDepositAcceptance, checkDepositReturn, checkTransferIntention, checkTransferRejection, checkTransferReturn, checkTransferStopPaymentRequest, disputeResolution, empyrealCashDeposit, feePayment, inboundAchTransfer, inboundCheck, inboundInternationalAchTransfer, inboundRealTimePaymentsTransferConfirmation, inboundWireDrawdownPayment, inboundWireDrawdownPaymentReversal, inboundWireReversal, inboundWireTransfer, interestPayment, internalSource, realTimePaymentsTransferAcknowledgement, sampleFunds, wireDrawdownPaymentIntention, wireDrawdownPaymentRejection, wireTransferIntention, wireTransferRejection) { 
        obj['account_transfer_intention'] = accountTransferIntention;
        obj['ach_check_conversion'] = achCheckConversion;
        obj['ach_check_conversion_return'] = achCheckConversionReturn;
        obj['ach_transfer_intention'] = achTransferIntention;
        obj['ach_transfer_rejection'] = achTransferRejection;
        obj['ach_transfer_return'] = achTransferReturn;
        obj['card_dispute_acceptance'] = cardDisputeAcceptance;
        obj['card_refund'] = cardRefund;
        obj['card_revenue_payment'] = cardRevenuePayment;
        obj['card_route_refund'] = cardRouteRefund;
        obj['card_route_settlement'] = cardRouteSettlement;
        obj['card_settlement'] = cardSettlement;
        obj['category'] = category;
        obj['check_deposit_acceptance'] = checkDepositAcceptance;
        obj['check_deposit_return'] = checkDepositReturn;
        obj['check_transfer_intention'] = checkTransferIntention;
        obj['check_transfer_rejection'] = checkTransferRejection;
        obj['check_transfer_return'] = checkTransferReturn;
        obj['check_transfer_stop_payment_request'] = checkTransferStopPaymentRequest;
        obj['dispute_resolution'] = disputeResolution;
        obj['empyreal_cash_deposit'] = empyrealCashDeposit;
        obj['fee_payment'] = feePayment;
        obj['inbound_ach_transfer'] = inboundAchTransfer;
        obj['inbound_check'] = inboundCheck;
        obj['inbound_international_ach_transfer'] = inboundInternationalAchTransfer;
        obj['inbound_real_time_payments_transfer_confirmation'] = inboundRealTimePaymentsTransferConfirmation;
        obj['inbound_wire_drawdown_payment'] = inboundWireDrawdownPayment;
        obj['inbound_wire_drawdown_payment_reversal'] = inboundWireDrawdownPaymentReversal;
        obj['inbound_wire_reversal'] = inboundWireReversal;
        obj['inbound_wire_transfer'] = inboundWireTransfer;
        obj['interest_payment'] = interestPayment;
        obj['internal_source'] = internalSource;
        obj['real_time_payments_transfer_acknowledgement'] = realTimePaymentsTransferAcknowledgement;
        obj['sample_funds'] = sampleFunds;
        obj['wire_drawdown_payment_intention'] = wireDrawdownPaymentIntention;
        obj['wire_drawdown_payment_rejection'] = wireDrawdownPaymentRejection;
        obj['wire_transfer_intention'] = wireTransferIntention;
        obj['wire_transfer_rejection'] = wireTransferRejection;
    }

    /**
     * Constructs a <code>TransactionSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSource} obj Optional instance to populate.
     * @return {module:model/TransactionSource} The populated <code>TransactionSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionSource();

            if (data.hasOwnProperty('account_transfer_intention')) {
                obj['account_transfer_intention'] = AccountTransferIntention.constructFromObject(data['account_transfer_intention']);
            }
            if (data.hasOwnProperty('ach_check_conversion')) {
                obj['ach_check_conversion'] = ACHCheckConversion.constructFromObject(data['ach_check_conversion']);
            }
            if (data.hasOwnProperty('ach_check_conversion_return')) {
                obj['ach_check_conversion_return'] = ACHCheckConversionReturn.constructFromObject(data['ach_check_conversion_return']);
            }
            if (data.hasOwnProperty('ach_transfer_intention')) {
                obj['ach_transfer_intention'] = ACHTransferIntention.constructFromObject(data['ach_transfer_intention']);
            }
            if (data.hasOwnProperty('ach_transfer_rejection')) {
                obj['ach_transfer_rejection'] = ACHTransferRejection.constructFromObject(data['ach_transfer_rejection']);
            }
            if (data.hasOwnProperty('ach_transfer_return')) {
                obj['ach_transfer_return'] = ACHTransferReturn1.constructFromObject(data['ach_transfer_return']);
            }
            if (data.hasOwnProperty('card_dispute_acceptance')) {
                obj['card_dispute_acceptance'] = CardDisputeAcceptance1.constructFromObject(data['card_dispute_acceptance']);
            }
            if (data.hasOwnProperty('card_refund')) {
                obj['card_refund'] = CardRefund.constructFromObject(data['card_refund']);
            }
            if (data.hasOwnProperty('card_revenue_payment')) {
                obj['card_revenue_payment'] = CardRevenuePayment.constructFromObject(data['card_revenue_payment']);
            }
            if (data.hasOwnProperty('card_route_refund')) {
                obj['card_route_refund'] = DeprecatedCardRefund.constructFromObject(data['card_route_refund']);
            }
            if (data.hasOwnProperty('card_route_settlement')) {
                obj['card_route_settlement'] = DeprecatedCardSettlement.constructFromObject(data['card_route_settlement']);
            }
            if (data.hasOwnProperty('card_settlement')) {
                obj['card_settlement'] = CardSettlement.constructFromObject(data['card_settlement']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('check_deposit_acceptance')) {
                obj['check_deposit_acceptance'] = CheckDepositAcceptance1.constructFromObject(data['check_deposit_acceptance']);
            }
            if (data.hasOwnProperty('check_deposit_return')) {
                obj['check_deposit_return'] = CheckDepositReturn1.constructFromObject(data['check_deposit_return']);
            }
            if (data.hasOwnProperty('check_transfer_intention')) {
                obj['check_transfer_intention'] = CheckTransferIntention.constructFromObject(data['check_transfer_intention']);
            }
            if (data.hasOwnProperty('check_transfer_rejection')) {
                obj['check_transfer_rejection'] = CheckTransferRejection.constructFromObject(data['check_transfer_rejection']);
            }
            if (data.hasOwnProperty('check_transfer_return')) {
                obj['check_transfer_return'] = CheckTransferReturn1.constructFromObject(data['check_transfer_return']);
            }
            if (data.hasOwnProperty('check_transfer_stop_payment_request')) {
                obj['check_transfer_stop_payment_request'] = CheckTransferStopPaymentRequest1.constructFromObject(data['check_transfer_stop_payment_request']);
            }
            if (data.hasOwnProperty('dispute_resolution')) {
                obj['dispute_resolution'] = DisputeResolution.constructFromObject(data['dispute_resolution']);
            }
            if (data.hasOwnProperty('empyreal_cash_deposit')) {
                obj['empyreal_cash_deposit'] = EmpyrealCashDeposit.constructFromObject(data['empyreal_cash_deposit']);
            }
            if (data.hasOwnProperty('fee_payment')) {
                obj['fee_payment'] = FeePayment.constructFromObject(data['fee_payment']);
            }
            if (data.hasOwnProperty('inbound_ach_transfer')) {
                obj['inbound_ach_transfer'] = InboundACHTransfer.constructFromObject(data['inbound_ach_transfer']);
            }
            if (data.hasOwnProperty('inbound_check')) {
                obj['inbound_check'] = InboundCheck.constructFromObject(data['inbound_check']);
            }
            if (data.hasOwnProperty('inbound_international_ach_transfer')) {
                obj['inbound_international_ach_transfer'] = InboundInternationalACHTransfer.constructFromObject(data['inbound_international_ach_transfer']);
            }
            if (data.hasOwnProperty('inbound_real_time_payments_transfer_confirmation')) {
                obj['inbound_real_time_payments_transfer_confirmation'] = InboundRealTimePaymentsTransferConfirmation.constructFromObject(data['inbound_real_time_payments_transfer_confirmation']);
            }
            if (data.hasOwnProperty('inbound_wire_drawdown_payment')) {
                obj['inbound_wire_drawdown_payment'] = InboundWireDrawdownPayment.constructFromObject(data['inbound_wire_drawdown_payment']);
            }
            if (data.hasOwnProperty('inbound_wire_drawdown_payment_reversal')) {
                obj['inbound_wire_drawdown_payment_reversal'] = InboundWireDrawdownPaymentReversal.constructFromObject(data['inbound_wire_drawdown_payment_reversal']);
            }
            if (data.hasOwnProperty('inbound_wire_reversal')) {
                obj['inbound_wire_reversal'] = InboundWireReversal.constructFromObject(data['inbound_wire_reversal']);
            }
            if (data.hasOwnProperty('inbound_wire_transfer')) {
                obj['inbound_wire_transfer'] = InboundWireTransfer.constructFromObject(data['inbound_wire_transfer']);
            }
            if (data.hasOwnProperty('interest_payment')) {
                obj['interest_payment'] = InterestPayment.constructFromObject(data['interest_payment']);
            }
            if (data.hasOwnProperty('internal_source')) {
                obj['internal_source'] = InternalSource.constructFromObject(data['internal_source']);
            }
            if (data.hasOwnProperty('real_time_payments_transfer_acknowledgement')) {
                obj['real_time_payments_transfer_acknowledgement'] = RealTimePaymentsTransferAcknowledgement.constructFromObject(data['real_time_payments_transfer_acknowledgement']);
            }
            if (data.hasOwnProperty('sample_funds')) {
                obj['sample_funds'] = SampleFunds.constructFromObject(data['sample_funds']);
            }
            if (data.hasOwnProperty('wire_drawdown_payment_intention')) {
                obj['wire_drawdown_payment_intention'] = WireDrawdownPaymentIntention.constructFromObject(data['wire_drawdown_payment_intention']);
            }
            if (data.hasOwnProperty('wire_drawdown_payment_rejection')) {
                obj['wire_drawdown_payment_rejection'] = WireDrawdownPaymentRejection.constructFromObject(data['wire_drawdown_payment_rejection']);
            }
            if (data.hasOwnProperty('wire_transfer_intention')) {
                obj['wire_transfer_intention'] = WireTransferIntention.constructFromObject(data['wire_transfer_intention']);
            }
            if (data.hasOwnProperty('wire_transfer_rejection')) {
                obj['wire_transfer_rejection'] = WireTransferRejection.constructFromObject(data['wire_transfer_rejection']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account_transfer_intention`
        if (data['account_transfer_intention']) { // data not null
          AccountTransferIntention.validateJSON(data['account_transfer_intention']);
        }
        // validate the optional field `ach_check_conversion`
        if (data['ach_check_conversion']) { // data not null
          ACHCheckConversion.validateJSON(data['ach_check_conversion']);
        }
        // validate the optional field `ach_check_conversion_return`
        if (data['ach_check_conversion_return']) { // data not null
          ACHCheckConversionReturn.validateJSON(data['ach_check_conversion_return']);
        }
        // validate the optional field `ach_transfer_intention`
        if (data['ach_transfer_intention']) { // data not null
          ACHTransferIntention.validateJSON(data['ach_transfer_intention']);
        }
        // validate the optional field `ach_transfer_rejection`
        if (data['ach_transfer_rejection']) { // data not null
          ACHTransferRejection.validateJSON(data['ach_transfer_rejection']);
        }
        // validate the optional field `ach_transfer_return`
        if (data['ach_transfer_return']) { // data not null
          ACHTransferReturn1.validateJSON(data['ach_transfer_return']);
        }
        // validate the optional field `card_dispute_acceptance`
        if (data['card_dispute_acceptance']) { // data not null
          CardDisputeAcceptance1.validateJSON(data['card_dispute_acceptance']);
        }
        // validate the optional field `card_refund`
        if (data['card_refund']) { // data not null
          CardRefund.validateJSON(data['card_refund']);
        }
        // validate the optional field `card_revenue_payment`
        if (data['card_revenue_payment']) { // data not null
          CardRevenuePayment.validateJSON(data['card_revenue_payment']);
        }
        // validate the optional field `card_route_refund`
        if (data['card_route_refund']) { // data not null
          DeprecatedCardRefund.validateJSON(data['card_route_refund']);
        }
        // validate the optional field `card_route_settlement`
        if (data['card_route_settlement']) { // data not null
          DeprecatedCardSettlement.validateJSON(data['card_route_settlement']);
        }
        // validate the optional field `card_settlement`
        if (data['card_settlement']) { // data not null
          CardSettlement.validateJSON(data['card_settlement']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `check_deposit_acceptance`
        if (data['check_deposit_acceptance']) { // data not null
          CheckDepositAcceptance1.validateJSON(data['check_deposit_acceptance']);
        }
        // validate the optional field `check_deposit_return`
        if (data['check_deposit_return']) { // data not null
          CheckDepositReturn1.validateJSON(data['check_deposit_return']);
        }
        // validate the optional field `check_transfer_intention`
        if (data['check_transfer_intention']) { // data not null
          CheckTransferIntention.validateJSON(data['check_transfer_intention']);
        }
        // validate the optional field `check_transfer_rejection`
        if (data['check_transfer_rejection']) { // data not null
          CheckTransferRejection.validateJSON(data['check_transfer_rejection']);
        }
        // validate the optional field `check_transfer_return`
        if (data['check_transfer_return']) { // data not null
          CheckTransferReturn1.validateJSON(data['check_transfer_return']);
        }
        // validate the optional field `check_transfer_stop_payment_request`
        if (data['check_transfer_stop_payment_request']) { // data not null
          CheckTransferStopPaymentRequest1.validateJSON(data['check_transfer_stop_payment_request']);
        }
        // validate the optional field `dispute_resolution`
        if (data['dispute_resolution']) { // data not null
          DisputeResolution.validateJSON(data['dispute_resolution']);
        }
        // validate the optional field `empyreal_cash_deposit`
        if (data['empyreal_cash_deposit']) { // data not null
          EmpyrealCashDeposit.validateJSON(data['empyreal_cash_deposit']);
        }
        // validate the optional field `fee_payment`
        if (data['fee_payment']) { // data not null
          FeePayment.validateJSON(data['fee_payment']);
        }
        // validate the optional field `inbound_ach_transfer`
        if (data['inbound_ach_transfer']) { // data not null
          InboundACHTransfer.validateJSON(data['inbound_ach_transfer']);
        }
        // validate the optional field `inbound_check`
        if (data['inbound_check']) { // data not null
          InboundCheck.validateJSON(data['inbound_check']);
        }
        // validate the optional field `inbound_international_ach_transfer`
        if (data['inbound_international_ach_transfer']) { // data not null
          InboundInternationalACHTransfer.validateJSON(data['inbound_international_ach_transfer']);
        }
        // validate the optional field `inbound_real_time_payments_transfer_confirmation`
        if (data['inbound_real_time_payments_transfer_confirmation']) { // data not null
          InboundRealTimePaymentsTransferConfirmation.validateJSON(data['inbound_real_time_payments_transfer_confirmation']);
        }
        // validate the optional field `inbound_wire_drawdown_payment`
        if (data['inbound_wire_drawdown_payment']) { // data not null
          InboundWireDrawdownPayment.validateJSON(data['inbound_wire_drawdown_payment']);
        }
        // validate the optional field `inbound_wire_drawdown_payment_reversal`
        if (data['inbound_wire_drawdown_payment_reversal']) { // data not null
          InboundWireDrawdownPaymentReversal.validateJSON(data['inbound_wire_drawdown_payment_reversal']);
        }
        // validate the optional field `inbound_wire_reversal`
        if (data['inbound_wire_reversal']) { // data not null
          InboundWireReversal.validateJSON(data['inbound_wire_reversal']);
        }
        // validate the optional field `inbound_wire_transfer`
        if (data['inbound_wire_transfer']) { // data not null
          InboundWireTransfer.validateJSON(data['inbound_wire_transfer']);
        }
        // validate the optional field `interest_payment`
        if (data['interest_payment']) { // data not null
          InterestPayment.validateJSON(data['interest_payment']);
        }
        // validate the optional field `internal_source`
        if (data['internal_source']) { // data not null
          InternalSource.validateJSON(data['internal_source']);
        }
        // validate the optional field `real_time_payments_transfer_acknowledgement`
        if (data['real_time_payments_transfer_acknowledgement']) { // data not null
          RealTimePaymentsTransferAcknowledgement.validateJSON(data['real_time_payments_transfer_acknowledgement']);
        }
        // validate the optional field `sample_funds`
        if (data['sample_funds']) { // data not null
          SampleFunds.validateJSON(data['sample_funds']);
        }
        // validate the optional field `wire_drawdown_payment_intention`
        if (data['wire_drawdown_payment_intention']) { // data not null
          WireDrawdownPaymentIntention.validateJSON(data['wire_drawdown_payment_intention']);
        }
        // validate the optional field `wire_drawdown_payment_rejection`
        if (data['wire_drawdown_payment_rejection']) { // data not null
          WireDrawdownPaymentRejection.validateJSON(data['wire_drawdown_payment_rejection']);
        }
        // validate the optional field `wire_transfer_intention`
        if (data['wire_transfer_intention']) { // data not null
          WireTransferIntention.validateJSON(data['wire_transfer_intention']);
        }
        // validate the optional field `wire_transfer_rejection`
        if (data['wire_transfer_rejection']) { // data not null
          WireTransferRejection.validateJSON(data['wire_transfer_rejection']);
        }

        return true;
    }


}

TransactionSource.RequiredProperties = ["account_transfer_intention", "ach_check_conversion", "ach_check_conversion_return", "ach_transfer_intention", "ach_transfer_rejection", "ach_transfer_return", "card_dispute_acceptance", "card_refund", "card_revenue_payment", "card_route_refund", "card_route_settlement", "card_settlement", "category", "check_deposit_acceptance", "check_deposit_return", "check_transfer_intention", "check_transfer_rejection", "check_transfer_return", "check_transfer_stop_payment_request", "dispute_resolution", "empyreal_cash_deposit", "fee_payment", "inbound_ach_transfer", "inbound_check", "inbound_international_ach_transfer", "inbound_real_time_payments_transfer_confirmation", "inbound_wire_drawdown_payment", "inbound_wire_drawdown_payment_reversal", "inbound_wire_reversal", "inbound_wire_transfer", "interest_payment", "internal_source", "real_time_payments_transfer_acknowledgement", "sample_funds", "wire_drawdown_payment_intention", "wire_drawdown_payment_rejection", "wire_transfer_intention", "wire_transfer_rejection"];

/**
 * @member {module:model/AccountTransferIntention} account_transfer_intention
 */
TransactionSource.prototype['account_transfer_intention'] = undefined;

/**
 * @member {module:model/ACHCheckConversion} ach_check_conversion
 */
TransactionSource.prototype['ach_check_conversion'] = undefined;

/**
 * @member {module:model/ACHCheckConversionReturn} ach_check_conversion_return
 */
TransactionSource.prototype['ach_check_conversion_return'] = undefined;

/**
 * @member {module:model/ACHTransferIntention} ach_transfer_intention
 */
TransactionSource.prototype['ach_transfer_intention'] = undefined;

/**
 * @member {module:model/ACHTransferRejection} ach_transfer_rejection
 */
TransactionSource.prototype['ach_transfer_rejection'] = undefined;

/**
 * @member {module:model/ACHTransferReturn1} ach_transfer_return
 */
TransactionSource.prototype['ach_transfer_return'] = undefined;

/**
 * @member {module:model/CardDisputeAcceptance1} card_dispute_acceptance
 */
TransactionSource.prototype['card_dispute_acceptance'] = undefined;

/**
 * @member {module:model/CardRefund} card_refund
 */
TransactionSource.prototype['card_refund'] = undefined;

/**
 * @member {module:model/CardRevenuePayment} card_revenue_payment
 */
TransactionSource.prototype['card_revenue_payment'] = undefined;

/**
 * @member {module:model/DeprecatedCardRefund} card_route_refund
 */
TransactionSource.prototype['card_route_refund'] = undefined;

/**
 * @member {module:model/DeprecatedCardSettlement} card_route_settlement
 */
TransactionSource.prototype['card_route_settlement'] = undefined;

/**
 * @member {module:model/CardSettlement} card_settlement
 */
TransactionSource.prototype['card_settlement'] = undefined;

/**
 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 * @member {module:model/TransactionSource.CategoryEnum} category
 */
TransactionSource.prototype['category'] = undefined;

/**
 * @member {module:model/CheckDepositAcceptance1} check_deposit_acceptance
 */
TransactionSource.prototype['check_deposit_acceptance'] = undefined;

/**
 * @member {module:model/CheckDepositReturn1} check_deposit_return
 */
TransactionSource.prototype['check_deposit_return'] = undefined;

/**
 * @member {module:model/CheckTransferIntention} check_transfer_intention
 */
TransactionSource.prototype['check_transfer_intention'] = undefined;

/**
 * @member {module:model/CheckTransferRejection} check_transfer_rejection
 */
TransactionSource.prototype['check_transfer_rejection'] = undefined;

/**
 * @member {module:model/CheckTransferReturn1} check_transfer_return
 */
TransactionSource.prototype['check_transfer_return'] = undefined;

/**
 * @member {module:model/CheckTransferStopPaymentRequest1} check_transfer_stop_payment_request
 */
TransactionSource.prototype['check_transfer_stop_payment_request'] = undefined;

/**
 * @member {module:model/DisputeResolution} dispute_resolution
 */
TransactionSource.prototype['dispute_resolution'] = undefined;

/**
 * @member {module:model/EmpyrealCashDeposit} empyreal_cash_deposit
 */
TransactionSource.prototype['empyreal_cash_deposit'] = undefined;

/**
 * @member {module:model/FeePayment} fee_payment
 */
TransactionSource.prototype['fee_payment'] = undefined;

/**
 * @member {module:model/InboundACHTransfer} inbound_ach_transfer
 */
TransactionSource.prototype['inbound_ach_transfer'] = undefined;

/**
 * @member {module:model/InboundCheck} inbound_check
 */
TransactionSource.prototype['inbound_check'] = undefined;

/**
 * @member {module:model/InboundInternationalACHTransfer} inbound_international_ach_transfer
 */
TransactionSource.prototype['inbound_international_ach_transfer'] = undefined;

/**
 * @member {module:model/InboundRealTimePaymentsTransferConfirmation} inbound_real_time_payments_transfer_confirmation
 */
TransactionSource.prototype['inbound_real_time_payments_transfer_confirmation'] = undefined;

/**
 * @member {module:model/InboundWireDrawdownPayment} inbound_wire_drawdown_payment
 */
TransactionSource.prototype['inbound_wire_drawdown_payment'] = undefined;

/**
 * @member {module:model/InboundWireDrawdownPaymentReversal} inbound_wire_drawdown_payment_reversal
 */
TransactionSource.prototype['inbound_wire_drawdown_payment_reversal'] = undefined;

/**
 * @member {module:model/InboundWireReversal} inbound_wire_reversal
 */
TransactionSource.prototype['inbound_wire_reversal'] = undefined;

/**
 * @member {module:model/InboundWireTransfer} inbound_wire_transfer
 */
TransactionSource.prototype['inbound_wire_transfer'] = undefined;

/**
 * @member {module:model/InterestPayment} interest_payment
 */
TransactionSource.prototype['interest_payment'] = undefined;

/**
 * @member {module:model/InternalSource} internal_source
 */
TransactionSource.prototype['internal_source'] = undefined;

/**
 * @member {module:model/RealTimePaymentsTransferAcknowledgement} real_time_payments_transfer_acknowledgement
 */
TransactionSource.prototype['real_time_payments_transfer_acknowledgement'] = undefined;

/**
 * @member {module:model/SampleFunds} sample_funds
 */
TransactionSource.prototype['sample_funds'] = undefined;

/**
 * @member {module:model/WireDrawdownPaymentIntention} wire_drawdown_payment_intention
 */
TransactionSource.prototype['wire_drawdown_payment_intention'] = undefined;

/**
 * @member {module:model/WireDrawdownPaymentRejection} wire_drawdown_payment_rejection
 */
TransactionSource.prototype['wire_drawdown_payment_rejection'] = undefined;

/**
 * @member {module:model/WireTransferIntention} wire_transfer_intention
 */
TransactionSource.prototype['wire_transfer_intention'] = undefined;

/**
 * @member {module:model/WireTransferRejection} wire_transfer_rejection
 */
TransactionSource.prototype['wire_transfer_rejection'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
TransactionSource['CategoryEnum'] = {

    /**
     * value: "account_transfer_intention"
     * @const
     */
    "account_transfer_intention": "account_transfer_intention",

    /**
     * value: "ach_check_conversion_return"
     * @const
     */
    "ach_check_conversion_return": "ach_check_conversion_return",

    /**
     * value: "ach_check_conversion"
     * @const
     */
    "ach_check_conversion": "ach_check_conversion",

    /**
     * value: "ach_transfer_intention"
     * @const
     */
    "ach_transfer_intention": "ach_transfer_intention",

    /**
     * value: "ach_transfer_rejection"
     * @const
     */
    "ach_transfer_rejection": "ach_transfer_rejection",

    /**
     * value: "ach_transfer_return"
     * @const
     */
    "ach_transfer_return": "ach_transfer_return",

    /**
     * value: "card_dispute_acceptance"
     * @const
     */
    "card_dispute_acceptance": "card_dispute_acceptance",

    /**
     * value: "card_refund"
     * @const
     */
    "card_refund": "card_refund",

    /**
     * value: "card_settlement"
     * @const
     */
    "card_settlement": "card_settlement",

    /**
     * value: "card_revenue_payment"
     * @const
     */
    "card_revenue_payment": "card_revenue_payment",

    /**
     * value: "check_deposit_acceptance"
     * @const
     */
    "check_deposit_acceptance": "check_deposit_acceptance",

    /**
     * value: "check_deposit_return"
     * @const
     */
    "check_deposit_return": "check_deposit_return",

    /**
     * value: "check_transfer_intention"
     * @const
     */
    "check_transfer_intention": "check_transfer_intention",

    /**
     * value: "check_transfer_return"
     * @const
     */
    "check_transfer_return": "check_transfer_return",

    /**
     * value: "check_transfer_rejection"
     * @const
     */
    "check_transfer_rejection": "check_transfer_rejection",

    /**
     * value: "check_transfer_stop_payment_request"
     * @const
     */
    "check_transfer_stop_payment_request": "check_transfer_stop_payment_request",

    /**
     * value: "dispute_resolution"
     * @const
     */
    "dispute_resolution": "dispute_resolution",

    /**
     * value: "empyreal_cash_deposit"
     * @const
     */
    "empyreal_cash_deposit": "empyreal_cash_deposit",

    /**
     * value: "fee_payment"
     * @const
     */
    "fee_payment": "fee_payment",

    /**
     * value: "inbound_ach_transfer"
     * @const
     */
    "inbound_ach_transfer": "inbound_ach_transfer",

    /**
     * value: "inbound_ach_transfer_return_intention"
     * @const
     */
    "inbound_ach_transfer_return_intention": "inbound_ach_transfer_return_intention",

    /**
     * value: "inbound_check"
     * @const
     */
    "inbound_check": "inbound_check",

    /**
     * value: "inbound_international_ach_transfer"
     * @const
     */
    "inbound_international_ach_transfer": "inbound_international_ach_transfer",

    /**
     * value: "inbound_real_time_payments_transfer_confirmation"
     * @const
     */
    "inbound_real_time_payments_transfer_confirmation": "inbound_real_time_payments_transfer_confirmation",

    /**
     * value: "inbound_wire_drawdown_payment_reversal"
     * @const
     */
    "inbound_wire_drawdown_payment_reversal": "inbound_wire_drawdown_payment_reversal",

    /**
     * value: "inbound_wire_drawdown_payment"
     * @const
     */
    "inbound_wire_drawdown_payment": "inbound_wire_drawdown_payment",

    /**
     * value: "inbound_wire_reversal"
     * @const
     */
    "inbound_wire_reversal": "inbound_wire_reversal",

    /**
     * value: "inbound_wire_transfer"
     * @const
     */
    "inbound_wire_transfer": "inbound_wire_transfer",

    /**
     * value: "interest_payment"
     * @const
     */
    "interest_payment": "interest_payment",

    /**
     * value: "internal_general_ledger_transaction"
     * @const
     */
    "internal_general_ledger_transaction": "internal_general_ledger_transaction",

    /**
     * value: "internal_source"
     * @const
     */
    "internal_source": "internal_source",

    /**
     * value: "card_route_refund"
     * @const
     */
    "card_route_refund": "card_route_refund",

    /**
     * value: "card_route_settlement"
     * @const
     */
    "card_route_settlement": "card_route_settlement",

    /**
     * value: "real_time_payments_transfer_acknowledgement"
     * @const
     */
    "real_time_payments_transfer_acknowledgement": "real_time_payments_transfer_acknowledgement",

    /**
     * value: "sample_funds"
     * @const
     */
    "sample_funds": "sample_funds",

    /**
     * value: "wire_drawdown_payment_intention"
     * @const
     */
    "wire_drawdown_payment_intention": "wire_drawdown_payment_intention",

    /**
     * value: "wire_drawdown_payment_rejection"
     * @const
     */
    "wire_drawdown_payment_rejection": "wire_drawdown_payment_rejection",

    /**
     * value: "wire_transfer_intention"
     * @const
     */
    "wire_transfer_intention": "wire_transfer_intention",

    /**
     * value: "wire_transfer_rejection"
     * @const
     */
    "wire_transfer_rejection": "wire_transfer_rejection",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default TransactionSource;

