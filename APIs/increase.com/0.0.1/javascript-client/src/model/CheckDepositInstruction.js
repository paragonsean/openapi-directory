/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckDepositInstruction model module.
 * @module model/CheckDepositInstruction
 * @version 0.0.1
 */
class CheckDepositInstruction {
    /**
     * Constructs a new <code>CheckDepositInstruction</code>.
     * A Check Deposit Instruction object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;check_deposit_instruction&#x60;.
     * @alias module:model/CheckDepositInstruction
     * @param amount {Number} The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param backImageFileId {String} The identifier of the File containing the image of the back of the check that was deposited.
     * @param checkDepositId {String} The identifier of the Check Deposit.
     * @param currency {module:model/CheckDepositInstruction.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
     * @param frontImageFileId {String} The identifier of the File containing the image of the front of the check that was deposited.
     */
    constructor(amount, backImageFileId, checkDepositId, currency, frontImageFileId) { 
        
        CheckDepositInstruction.initialize(this, amount, backImageFileId, checkDepositId, currency, frontImageFileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, backImageFileId, checkDepositId, currency, frontImageFileId) { 
        obj['amount'] = amount;
        obj['back_image_file_id'] = backImageFileId;
        obj['check_deposit_id'] = checkDepositId;
        obj['currency'] = currency;
        obj['front_image_file_id'] = frontImageFileId;
    }

    /**
     * Constructs a <code>CheckDepositInstruction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckDepositInstruction} obj Optional instance to populate.
     * @return {module:model/CheckDepositInstruction} The populated <code>CheckDepositInstruction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckDepositInstruction();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('back_image_file_id')) {
                obj['back_image_file_id'] = ApiClient.convertToType(data['back_image_file_id'], 'String');
            }
            if (data.hasOwnProperty('check_deposit_id')) {
                obj['check_deposit_id'] = ApiClient.convertToType(data['check_deposit_id'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('front_image_file_id')) {
                obj['front_image_file_id'] = ApiClient.convertToType(data['front_image_file_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckDepositInstruction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckDepositInstruction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckDepositInstruction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['back_image_file_id'] && !(typeof data['back_image_file_id'] === 'string' || data['back_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `back_image_file_id` to be a primitive type in the JSON string but got " + data['back_image_file_id']);
        }
        // ensure the json data is a string
        if (data['check_deposit_id'] && !(typeof data['check_deposit_id'] === 'string' || data['check_deposit_id'] instanceof String)) {
            throw new Error("Expected the field `check_deposit_id` to be a primitive type in the JSON string but got " + data['check_deposit_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['front_image_file_id'] && !(typeof data['front_image_file_id'] === 'string' || data['front_image_file_id'] instanceof String)) {
            throw new Error("Expected the field `front_image_file_id` to be a primitive type in the JSON string but got " + data['front_image_file_id']);
        }

        return true;
    }


}

CheckDepositInstruction.RequiredProperties = ["amount", "back_image_file_id", "check_deposit_id", "currency", "front_image_file_id"];

/**
 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
CheckDepositInstruction.prototype['amount'] = undefined;

/**
 * The identifier of the File containing the image of the back of the check that was deposited.
 * @member {String} back_image_file_id
 */
CheckDepositInstruction.prototype['back_image_file_id'] = undefined;

/**
 * The identifier of the Check Deposit.
 * @member {String} check_deposit_id
 */
CheckDepositInstruction.prototype['check_deposit_id'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 * @member {module:model/CheckDepositInstruction.CurrencyEnum} currency
 */
CheckDepositInstruction.prototype['currency'] = undefined;

/**
 * The identifier of the File containing the image of the front of the check that was deposited.
 * @member {String} front_image_file_id
 */
CheckDepositInstruction.prototype['front_image_file_id'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
CheckDepositInstruction['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default CheckDepositInstruction;

