/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DigitalWalletToken model module.
 * @module model/DigitalWalletToken
 * @version 0.0.1
 */
class DigitalWalletToken {
    /**
     * Constructs a new <code>DigitalWalletToken</code>.
     * Fields related to a digital wallet token provisioning attempt.
     * @alias module:model/DigitalWalletToken
     * @param cardId {String} The identifier of the Card that is being tokenized.
     * @param cardProfileId {String} The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
     * @param decision {module:model/DigitalWalletToken.DecisionEnum} Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
     * @param digitalWallet {module:model/DigitalWalletToken.DigitalWalletEnum} The digital wallet app being used.
     */
    constructor(cardId, cardProfileId, decision, digitalWallet) { 
        
        DigitalWalletToken.initialize(this, cardId, cardProfileId, decision, digitalWallet);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardId, cardProfileId, decision, digitalWallet) { 
        obj['card_id'] = cardId;
        obj['card_profile_id'] = cardProfileId;
        obj['decision'] = decision;
        obj['digital_wallet'] = digitalWallet;
    }

    /**
     * Constructs a <code>DigitalWalletToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DigitalWalletToken} obj Optional instance to populate.
     * @return {module:model/DigitalWalletToken} The populated <code>DigitalWalletToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DigitalWalletToken();

            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('card_profile_id')) {
                obj['card_profile_id'] = ApiClient.convertToType(data['card_profile_id'], 'String');
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = ApiClient.convertToType(data['decision'], 'String');
            }
            if (data.hasOwnProperty('digital_wallet')) {
                obj['digital_wallet'] = ApiClient.convertToType(data['digital_wallet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DigitalWalletToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DigitalWalletToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DigitalWalletToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['card_profile_id'] && !(typeof data['card_profile_id'] === 'string' || data['card_profile_id'] instanceof String)) {
            throw new Error("Expected the field `card_profile_id` to be a primitive type in the JSON string but got " + data['card_profile_id']);
        }
        // ensure the json data is a string
        if (data['decision'] && !(typeof data['decision'] === 'string' || data['decision'] instanceof String)) {
            throw new Error("Expected the field `decision` to be a primitive type in the JSON string but got " + data['decision']);
        }
        // ensure the json data is a string
        if (data['digital_wallet'] && !(typeof data['digital_wallet'] === 'string' || data['digital_wallet'] instanceof String)) {
            throw new Error("Expected the field `digital_wallet` to be a primitive type in the JSON string but got " + data['digital_wallet']);
        }

        return true;
    }


}

DigitalWalletToken.RequiredProperties = ["card_id", "card_profile_id", "decision", "digital_wallet"];

/**
 * The identifier of the Card that is being tokenized.
 * @member {String} card_id
 */
DigitalWalletToken.prototype['card_id'] = undefined;

/**
 * The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
 * @member {String} card_profile_id
 */
DigitalWalletToken.prototype['card_profile_id'] = undefined;

/**
 * Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
 * @member {module:model/DigitalWalletToken.DecisionEnum} decision
 */
DigitalWalletToken.prototype['decision'] = undefined;

/**
 * The digital wallet app being used.
 * @member {module:model/DigitalWalletToken.DigitalWalletEnum} digital_wallet
 */
DigitalWalletToken.prototype['digital_wallet'] = undefined;





/**
 * Allowed values for the <code>decision</code> property.
 * @enum {String}
 * @readonly
 */
DigitalWalletToken['DecisionEnum'] = {

    /**
     * value: "approve"
     * @const
     */
    "approve": "approve",

    /**
     * value: "decline"
     * @const
     */
    "decline": "decline"
};


/**
 * Allowed values for the <code>digital_wallet</code> property.
 * @enum {String}
 * @readonly
 */
DigitalWalletToken['DigitalWalletEnum'] = {

    /**
     * value: "apple_pay"
     * @const
     */
    "apple_pay": "apple_pay",

    /**
     * value: "google_pay"
     * @const
     */
    "google_pay": "google_pay"
};



export default DigitalWalletToken;

