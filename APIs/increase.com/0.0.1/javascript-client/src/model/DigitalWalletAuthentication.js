/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DigitalWalletAuthentication model module.
 * @module model/DigitalWalletAuthentication
 * @version 0.0.1
 */
class DigitalWalletAuthentication {
    /**
     * Constructs a new <code>DigitalWalletAuthentication</code>.
     * Fields related to a digital wallet authentication attempt.
     * @alias module:model/DigitalWalletAuthentication
     * @param cardId {String} The identifier of the Card that is being tokenized.
     * @param channel {module:model/DigitalWalletAuthentication.ChannelEnum} The channel to send the card user their one-time passcode.
     * @param digitalWallet {module:model/DigitalWalletAuthentication.DigitalWalletEnum} The digital wallet app being used.
     * @param email {String} The email to send the one-time passcode to if `channel` is equal to `email`.
     * @param oneTimePasscode {String} The one-time passcode to send the card user.
     * @param phone {String} The phone number to send the one-time passcode to if `channel` is equal to `sms`.
     * @param result {module:model/DigitalWalletAuthentication.ResultEnum} Whether your application successfully delivered the one-time passcode.
     */
    constructor(cardId, channel, digitalWallet, email, oneTimePasscode, phone, result) { 
        
        DigitalWalletAuthentication.initialize(this, cardId, channel, digitalWallet, email, oneTimePasscode, phone, result);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardId, channel, digitalWallet, email, oneTimePasscode, phone, result) { 
        obj['card_id'] = cardId;
        obj['channel'] = channel;
        obj['digital_wallet'] = digitalWallet;
        obj['email'] = email;
        obj['one_time_passcode'] = oneTimePasscode;
        obj['phone'] = phone;
        obj['result'] = result;
    }

    /**
     * Constructs a <code>DigitalWalletAuthentication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DigitalWalletAuthentication} obj Optional instance to populate.
     * @return {module:model/DigitalWalletAuthentication} The populated <code>DigitalWalletAuthentication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DigitalWalletAuthentication();

            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('digital_wallet')) {
                obj['digital_wallet'] = ApiClient.convertToType(data['digital_wallet'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('one_time_passcode')) {
                obj['one_time_passcode'] = ApiClient.convertToType(data['one_time_passcode'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DigitalWalletAuthentication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DigitalWalletAuthentication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DigitalWalletAuthentication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['digital_wallet'] && !(typeof data['digital_wallet'] === 'string' || data['digital_wallet'] instanceof String)) {
            throw new Error("Expected the field `digital_wallet` to be a primitive type in the JSON string but got " + data['digital_wallet']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['one_time_passcode'] && !(typeof data['one_time_passcode'] === 'string' || data['one_time_passcode'] instanceof String)) {
            throw new Error("Expected the field `one_time_passcode` to be a primitive type in the JSON string but got " + data['one_time_passcode']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}

DigitalWalletAuthentication.RequiredProperties = ["card_id", "channel", "digital_wallet", "email", "one_time_passcode", "phone", "result"];

/**
 * The identifier of the Card that is being tokenized.
 * @member {String} card_id
 */
DigitalWalletAuthentication.prototype['card_id'] = undefined;

/**
 * The channel to send the card user their one-time passcode.
 * @member {module:model/DigitalWalletAuthentication.ChannelEnum} channel
 */
DigitalWalletAuthentication.prototype['channel'] = undefined;

/**
 * The digital wallet app being used.
 * @member {module:model/DigitalWalletAuthentication.DigitalWalletEnum} digital_wallet
 */
DigitalWalletAuthentication.prototype['digital_wallet'] = undefined;

/**
 * The email to send the one-time passcode to if `channel` is equal to `email`.
 * @member {String} email
 */
DigitalWalletAuthentication.prototype['email'] = undefined;

/**
 * The one-time passcode to send the card user.
 * @member {String} one_time_passcode
 */
DigitalWalletAuthentication.prototype['one_time_passcode'] = undefined;

/**
 * The phone number to send the one-time passcode to if `channel` is equal to `sms`.
 * @member {String} phone
 */
DigitalWalletAuthentication.prototype['phone'] = undefined;

/**
 * Whether your application successfully delivered the one-time passcode.
 * @member {module:model/DigitalWalletAuthentication.ResultEnum} result
 */
DigitalWalletAuthentication.prototype['result'] = undefined;





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
DigitalWalletAuthentication['ChannelEnum'] = {

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms",

    /**
     * value: "email"
     * @const
     */
    "email": "email"
};


/**
 * Allowed values for the <code>digital_wallet</code> property.
 * @enum {String}
 * @readonly
 */
DigitalWalletAuthentication['DigitalWalletEnum'] = {

    /**
     * value: "apple_pay"
     * @const
     */
    "apple_pay": "apple_pay",

    /**
     * value: "google_pay"
     * @const
     */
    "google_pay": "google_pay"
};


/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
DigitalWalletAuthentication['ResultEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure"
};



export default DigitalWalletAuthentication;

