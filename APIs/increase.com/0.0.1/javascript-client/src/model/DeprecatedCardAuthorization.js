/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeprecatedCardAuthorization model module.
 * @module model/DeprecatedCardAuthorization
 * @version 0.0.1
 */
class DeprecatedCardAuthorization {
    /**
     * Constructs a new <code>DeprecatedCardAuthorization</code>.
     * A Deprecated Card Authorization object. This field will be present in the JSON response if and only if &#x60;category&#x60; is equal to &#x60;card_route_authorization&#x60;.
     * @alias module:model/DeprecatedCardAuthorization
     * @param amount {Number} The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
     * @param currency {module:model/DeprecatedCardAuthorization.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
     * @param merchantAcceptorId {String} 
     * @param merchantCategoryCode {String} 
     * @param merchantCity {String} 
     * @param merchantCountry {String} 
     * @param merchantDescriptor {String} 
     * @param merchantState {String} 
     */
    constructor(amount, currency, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, merchantState) { 
        
        DeprecatedCardAuthorization.initialize(this, amount, currency, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, merchantState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, currency, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, merchantState) { 
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['merchant_acceptor_id'] = merchantAcceptorId;
        obj['merchant_category_code'] = merchantCategoryCode;
        obj['merchant_city'] = merchantCity;
        obj['merchant_country'] = merchantCountry;
        obj['merchant_descriptor'] = merchantDescriptor;
        obj['merchant_state'] = merchantState;
    }

    /**
     * Constructs a <code>DeprecatedCardAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeprecatedCardAuthorization} obj Optional instance to populate.
     * @return {module:model/DeprecatedCardAuthorization} The populated <code>DeprecatedCardAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeprecatedCardAuthorization();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('merchant_acceptor_id')) {
                obj['merchant_acceptor_id'] = ApiClient.convertToType(data['merchant_acceptor_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_category_code')) {
                obj['merchant_category_code'] = ApiClient.convertToType(data['merchant_category_code'], 'String');
            }
            if (data.hasOwnProperty('merchant_city')) {
                obj['merchant_city'] = ApiClient.convertToType(data['merchant_city'], 'String');
            }
            if (data.hasOwnProperty('merchant_country')) {
                obj['merchant_country'] = ApiClient.convertToType(data['merchant_country'], 'String');
            }
            if (data.hasOwnProperty('merchant_descriptor')) {
                obj['merchant_descriptor'] = ApiClient.convertToType(data['merchant_descriptor'], 'String');
            }
            if (data.hasOwnProperty('merchant_state')) {
                obj['merchant_state'] = ApiClient.convertToType(data['merchant_state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeprecatedCardAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeprecatedCardAuthorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeprecatedCardAuthorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['merchant_acceptor_id'] && !(typeof data['merchant_acceptor_id'] === 'string' || data['merchant_acceptor_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_acceptor_id` to be a primitive type in the JSON string but got " + data['merchant_acceptor_id']);
        }
        // ensure the json data is a string
        if (data['merchant_category_code'] && !(typeof data['merchant_category_code'] === 'string' || data['merchant_category_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got " + data['merchant_category_code']);
        }
        // ensure the json data is a string
        if (data['merchant_city'] && !(typeof data['merchant_city'] === 'string' || data['merchant_city'] instanceof String)) {
            throw new Error("Expected the field `merchant_city` to be a primitive type in the JSON string but got " + data['merchant_city']);
        }
        // ensure the json data is a string
        if (data['merchant_country'] && !(typeof data['merchant_country'] === 'string' || data['merchant_country'] instanceof String)) {
            throw new Error("Expected the field `merchant_country` to be a primitive type in the JSON string but got " + data['merchant_country']);
        }
        // ensure the json data is a string
        if (data['merchant_descriptor'] && !(typeof data['merchant_descriptor'] === 'string' || data['merchant_descriptor'] instanceof String)) {
            throw new Error("Expected the field `merchant_descriptor` to be a primitive type in the JSON string but got " + data['merchant_descriptor']);
        }
        // ensure the json data is a string
        if (data['merchant_state'] && !(typeof data['merchant_state'] === 'string' || data['merchant_state'] instanceof String)) {
            throw new Error("Expected the field `merchant_state` to be a primitive type in the JSON string but got " + data['merchant_state']);
        }

        return true;
    }


}

DeprecatedCardAuthorization.RequiredProperties = ["amount", "currency", "merchant_acceptor_id", "merchant_category_code", "merchant_city", "merchant_country", "merchant_descriptor", "merchant_state"];

/**
 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
DeprecatedCardAuthorization.prototype['amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 * @member {module:model/DeprecatedCardAuthorization.CurrencyEnum} currency
 */
DeprecatedCardAuthorization.prototype['currency'] = undefined;

/**
 * 
 * @member {String} merchant_acceptor_id
 */
DeprecatedCardAuthorization.prototype['merchant_acceptor_id'] = undefined;

/**
 * 
 * @member {String} merchant_category_code
 */
DeprecatedCardAuthorization.prototype['merchant_category_code'] = undefined;

/**
 * 
 * @member {String} merchant_city
 */
DeprecatedCardAuthorization.prototype['merchant_city'] = undefined;

/**
 * 
 * @member {String} merchant_country
 */
DeprecatedCardAuthorization.prototype['merchant_country'] = undefined;

/**
 * 
 * @member {String} merchant_descriptor
 */
DeprecatedCardAuthorization.prototype['merchant_descriptor'] = undefined;

/**
 * 
 * @member {String} merchant_state
 */
DeprecatedCardAuthorization.prototype['merchant_state'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
DeprecatedCardAuthorization['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};



export default DeprecatedCardAuthorization;

