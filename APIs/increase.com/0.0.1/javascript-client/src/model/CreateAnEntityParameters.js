/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAnEntityParametersCorporation from './CreateAnEntityParametersCorporation';
import CreateAnEntityParametersJoint from './CreateAnEntityParametersJoint';
import CreateAnEntityParametersNaturalPerson from './CreateAnEntityParametersNaturalPerson';
import CreateAnEntityParametersSupplementalDocumentsInner from './CreateAnEntityParametersSupplementalDocumentsInner';
import CreateAnEntityParametersTrust from './CreateAnEntityParametersTrust';

/**
 * The CreateAnEntityParameters model module.
 * @module model/CreateAnEntityParameters
 * @version 0.0.1
 */
class CreateAnEntityParameters {
    /**
     * Constructs a new <code>CreateAnEntityParameters</code>.
     * @alias module:model/CreateAnEntityParameters
     * @param relationship {module:model/CreateAnEntityParameters.RelationshipEnum} The relationship between your group and the entity.
     * @param structure {module:model/CreateAnEntityParameters.StructureEnum} The type of Entity to create.
     */
    constructor(relationship, structure) { 
        
        CreateAnEntityParameters.initialize(this, relationship, structure);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, relationship, structure) { 
        obj['relationship'] = relationship;
        obj['structure'] = structure;
    }

    /**
     * Constructs a <code>CreateAnEntityParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAnEntityParameters} obj Optional instance to populate.
     * @return {module:model/CreateAnEntityParameters} The populated <code>CreateAnEntityParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAnEntityParameters();

            if (data.hasOwnProperty('corporation')) {
                obj['corporation'] = CreateAnEntityParametersCorporation.constructFromObject(data['corporation']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('joint')) {
                obj['joint'] = CreateAnEntityParametersJoint.constructFromObject(data['joint']);
            }
            if (data.hasOwnProperty('natural_person')) {
                obj['natural_person'] = CreateAnEntityParametersNaturalPerson.constructFromObject(data['natural_person']);
            }
            if (data.hasOwnProperty('relationship')) {
                obj['relationship'] = ApiClient.convertToType(data['relationship'], 'String');
            }
            if (data.hasOwnProperty('structure')) {
                obj['structure'] = ApiClient.convertToType(data['structure'], 'String');
            }
            if (data.hasOwnProperty('supplemental_documents')) {
                obj['supplemental_documents'] = ApiClient.convertToType(data['supplemental_documents'], [CreateAnEntityParametersSupplementalDocumentsInner]);
            }
            if (data.hasOwnProperty('trust')) {
                obj['trust'] = CreateAnEntityParametersTrust.constructFromObject(data['trust']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAnEntityParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAnEntityParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAnEntityParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `corporation`
        if (data['corporation']) { // data not null
          CreateAnEntityParametersCorporation.validateJSON(data['corporation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `joint`
        if (data['joint']) { // data not null
          CreateAnEntityParametersJoint.validateJSON(data['joint']);
        }
        // validate the optional field `natural_person`
        if (data['natural_person']) { // data not null
          CreateAnEntityParametersNaturalPerson.validateJSON(data['natural_person']);
        }
        // ensure the json data is a string
        if (data['relationship'] && !(typeof data['relationship'] === 'string' || data['relationship'] instanceof String)) {
            throw new Error("Expected the field `relationship` to be a primitive type in the JSON string but got " + data['relationship']);
        }
        // ensure the json data is a string
        if (data['structure'] && !(typeof data['structure'] === 'string' || data['structure'] instanceof String)) {
            throw new Error("Expected the field `structure` to be a primitive type in the JSON string but got " + data['structure']);
        }
        if (data['supplemental_documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supplemental_documents'])) {
                throw new Error("Expected the field `supplemental_documents` to be an array in the JSON data but got " + data['supplemental_documents']);
            }
            // validate the optional field `supplemental_documents` (array)
            for (const item of data['supplemental_documents']) {
                CreateAnEntityParametersSupplementalDocumentsInner.validateJSON(item);
            };
        }
        // validate the optional field `trust`
        if (data['trust']) { // data not null
          CreateAnEntityParametersTrust.validateJSON(data['trust']);
        }

        return true;
    }


}

CreateAnEntityParameters.RequiredProperties = ["relationship", "structure"];

/**
 * @member {module:model/CreateAnEntityParametersCorporation} corporation
 */
CreateAnEntityParameters.prototype['corporation'] = undefined;

/**
 * The description you choose to give the entity.
 * @member {String} description
 */
CreateAnEntityParameters.prototype['description'] = undefined;

/**
 * @member {module:model/CreateAnEntityParametersJoint} joint
 */
CreateAnEntityParameters.prototype['joint'] = undefined;

/**
 * @member {module:model/CreateAnEntityParametersNaturalPerson} natural_person
 */
CreateAnEntityParameters.prototype['natural_person'] = undefined;

/**
 * The relationship between your group and the entity.
 * @member {module:model/CreateAnEntityParameters.RelationshipEnum} relationship
 */
CreateAnEntityParameters.prototype['relationship'] = undefined;

/**
 * The type of Entity to create.
 * @member {module:model/CreateAnEntityParameters.StructureEnum} structure
 */
CreateAnEntityParameters.prototype['structure'] = undefined;

/**
 * Additional documentation associated with the entity.
 * @member {Array.<module:model/CreateAnEntityParametersSupplementalDocumentsInner>} supplemental_documents
 */
CreateAnEntityParameters.prototype['supplemental_documents'] = undefined;

/**
 * @member {module:model/CreateAnEntityParametersTrust} trust
 */
CreateAnEntityParameters.prototype['trust'] = undefined;





/**
 * Allowed values for the <code>relationship</code> property.
 * @enum {String}
 * @readonly
 */
CreateAnEntityParameters['RelationshipEnum'] = {

    /**
     * value: "affiliated"
     * @const
     */
    "affiliated": "affiliated",

    /**
     * value: "informational"
     * @const
     */
    "informational": "informational",

    /**
     * value: "unaffiliated"
     * @const
     */
    "unaffiliated": "unaffiliated"
};


/**
 * Allowed values for the <code>structure</code> property.
 * @enum {String}
 * @readonly
 */
CreateAnEntityParameters['StructureEnum'] = {

    /**
     * value: "corporation"
     * @const
     */
    "corporation": "corporation",

    /**
     * value: "natural_person"
     * @const
     */
    "natural_person": "natural_person",

    /**
     * value: "joint"
     * @const
     */
    "joint": "joint",

    /**
     * value: "trust"
     * @const
     */
    "trust": "trust"
};



export default CreateAnEntityParameters;

