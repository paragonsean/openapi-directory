/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalAccount model module.
 * @module model/ExternalAccount
 * @version 0.0.1
 */
class ExternalAccount {
    /**
     * Constructs a new <code>ExternalAccount</code>.
     * External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse.
     * @alias module:model/ExternalAccount
     * @param accountNumber {String} The destination account number.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.
     * @param description {String} The External Account's description for display purposes.
     * @param funding {module:model/ExternalAccount.FundingEnum} The type of the account to which the transfer will be sent.
     * @param id {String} The External Account's identifier.
     * @param routingNumber {String} The American Bankers' Association (ABA) Routing Transit Number (RTN).
     * @param status {module:model/ExternalAccount.StatusEnum} The External Account's status.
     * @param type {module:model/ExternalAccount.TypeEnum} A constant representing the object's type. For this resource it will always be `external_account`.
     * @param verificationStatus {module:model/ExternalAccount.VerificationStatusEnum} If you have verified ownership of the External Account.
     */
    constructor(accountNumber, createdAt, description, funding, id, routingNumber, status, type, verificationStatus) { 
        
        ExternalAccount.initialize(this, accountNumber, createdAt, description, funding, id, routingNumber, status, type, verificationStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountNumber, createdAt, description, funding, id, routingNumber, status, type, verificationStatus) { 
        obj['account_number'] = accountNumber;
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['funding'] = funding;
        obj['id'] = id;
        obj['routing_number'] = routingNumber;
        obj['status'] = status;
        obj['type'] = type;
        obj['verification_status'] = verificationStatus;
    }

    /**
     * Constructs a <code>ExternalAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalAccount} obj Optional instance to populate.
     * @return {module:model/ExternalAccount} The populated <code>ExternalAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalAccount();

            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('verification_status')) {
                obj['verification_status'] = ApiClient.convertToType(data['verification_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExternalAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['verification_status'] && !(typeof data['verification_status'] === 'string' || data['verification_status'] instanceof String)) {
            throw new Error("Expected the field `verification_status` to be a primitive type in the JSON string but got " + data['verification_status']);
        }

        return true;
    }


}

ExternalAccount.RequiredProperties = ["account_number", "created_at", "description", "funding", "id", "routing_number", "status", "type", "verification_status"];

/**
 * The destination account number.
 * @member {String} account_number
 */
ExternalAccount.prototype['account_number'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.
 * @member {Date} created_at
 */
ExternalAccount.prototype['created_at'] = undefined;

/**
 * The External Account's description for display purposes.
 * @member {String} description
 */
ExternalAccount.prototype['description'] = undefined;

/**
 * The type of the account to which the transfer will be sent.
 * @member {module:model/ExternalAccount.FundingEnum} funding
 */
ExternalAccount.prototype['funding'] = undefined;

/**
 * The External Account's identifier.
 * @member {String} id
 */
ExternalAccount.prototype['id'] = undefined;

/**
 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
 * @member {String} routing_number
 */
ExternalAccount.prototype['routing_number'] = undefined;

/**
 * The External Account's status.
 * @member {module:model/ExternalAccount.StatusEnum} status
 */
ExternalAccount.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `external_account`.
 * @member {module:model/ExternalAccount.TypeEnum} type
 */
ExternalAccount.prototype['type'] = undefined;

/**
 * If you have verified ownership of the External Account.
 * @member {module:model/ExternalAccount.VerificationStatusEnum} verification_status
 */
ExternalAccount.prototype['verification_status'] = undefined;





/**
 * Allowed values for the <code>funding</code> property.
 * @enum {String}
 * @readonly
 */
ExternalAccount['FundingEnum'] = {

    /**
     * value: "checking"
     * @const
     */
    "checking": "checking",

    /**
     * value: "savings"
     * @const
     */
    "savings": "savings",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ExternalAccount['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ExternalAccount['TypeEnum'] = {

    /**
     * value: "external_account"
     * @const
     */
    "external_account": "external_account"
};


/**
 * Allowed values for the <code>verification_status</code> property.
 * @enum {String}
 * @readonly
 */
ExternalAccount['VerificationStatusEnum'] = {

    /**
     * value: "unverified"
     * @const
     */
    "unverified": "unverified",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "verified"
     * @const
     */
    "verified": "verified"
};



export default ExternalAccount;

