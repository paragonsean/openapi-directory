/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingAddress from './BillingAddress';
import DigitalWallet from './DigitalWallet';

/**
 * The Card model module.
 * @module model/Card
 * @version 0.0.1
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * Cards are commercial credit cards. They&#39;ll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Accountâ€™s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement.
     * @alias module:model/Card
     * @param accountId {String} The identifier for the account this card belongs to.
     * @param billingAddress {module:model/BillingAddress} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
     * @param description {String} The card's description for display purposes.
     * @param digitalWallet {module:model/DigitalWallet} 
     * @param expirationMonth {Number} The month the card expires in M format (e.g., August is 8).
     * @param expirationYear {Number} The year the card expires in YYYY format (e.g., 2025).
     * @param id {String} The card identifier.
     * @param last4 {String} The last 4 digits of the Card's Primary Account Number.
     * @param status {module:model/Card.StatusEnum} This indicates if payments can be made with the card.
     * @param type {module:model/Card.TypeEnum} A constant representing the object's type. For this resource it will always be `card`.
     */
    constructor(accountId, billingAddress, createdAt, description, digitalWallet, expirationMonth, expirationYear, id, last4, status, type) { 
        
        Card.initialize(this, accountId, billingAddress, createdAt, description, digitalWallet, expirationMonth, expirationYear, id, last4, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, billingAddress, createdAt, description, digitalWallet, expirationMonth, expirationYear, id, last4, status, type) { 
        obj['account_id'] = accountId;
        obj['billing_address'] = billingAddress;
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['digital_wallet'] = digitalWallet;
        obj['expiration_month'] = expirationMonth;
        obj['expiration_year'] = expirationYear;
        obj['id'] = id;
        obj['last4'] = last4;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = BillingAddress.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('digital_wallet')) {
                obj['digital_wallet'] = DigitalWallet.constructFromObject(data['digital_wallet']);
            }
            if (data.hasOwnProperty('expiration_month')) {
                obj['expiration_month'] = ApiClient.convertToType(data['expiration_month'], 'Number');
            }
            if (data.hasOwnProperty('expiration_year')) {
                obj['expiration_year'] = ApiClient.convertToType(data['expiration_year'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last4')) {
                obj['last4'] = ApiClient.convertToType(data['last4'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          BillingAddress.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `digital_wallet`
        if (data['digital_wallet']) { // data not null
          DigitalWallet.validateJSON(data['digital_wallet']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last4'] && !(typeof data['last4'] === 'string' || data['last4'] instanceof String)) {
            throw new Error("Expected the field `last4` to be a primitive type in the JSON string but got " + data['last4']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Card.RequiredProperties = ["account_id", "billing_address", "created_at", "description", "digital_wallet", "expiration_month", "expiration_year", "id", "last4", "status", "type"];

/**
 * The identifier for the account this card belongs to.
 * @member {String} account_id
 */
Card.prototype['account_id'] = undefined;

/**
 * @member {module:model/BillingAddress} billing_address
 */
Card.prototype['billing_address'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
 * @member {Date} created_at
 */
Card.prototype['created_at'] = undefined;

/**
 * The card's description for display purposes.
 * @member {String} description
 */
Card.prototype['description'] = undefined;

/**
 * @member {module:model/DigitalWallet} digital_wallet
 */
Card.prototype['digital_wallet'] = undefined;

/**
 * The month the card expires in M format (e.g., August is 8).
 * @member {Number} expiration_month
 */
Card.prototype['expiration_month'] = undefined;

/**
 * The year the card expires in YYYY format (e.g., 2025).
 * @member {Number} expiration_year
 */
Card.prototype['expiration_year'] = undefined;

/**
 * The card identifier.
 * @member {String} id
 */
Card.prototype['id'] = undefined;

/**
 * The last 4 digits of the Card's Primary Account Number.
 * @member {String} last4
 */
Card.prototype['last4'] = undefined;

/**
 * This indicates if payments can be made with the card.
 * @member {module:model/Card.StatusEnum} status
 */
Card.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `card`.
 * @member {module:model/Card.TypeEnum} type
 */
Card.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Card['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Card['TypeEnum'] = {

    /**
     * value: "card"
     * @const
     */
    "card": "card"
};



export default Card;

