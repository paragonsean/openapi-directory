/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Limit model module.
 * @module model/Limit
 * @version 0.0.1
 */
class Limit {
    /**
     * Constructs a new <code>Limit</code>.
     * You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits.
     * @alias module:model/Limit
     * @param id {String} The Limit identifier.
     * @param interval {module:model/Limit.IntervalEnum} The interval for the metric. This is required if `metric` is `count` or `volume`.
     * @param metric {module:model/Limit.MetricEnum} The metric for the Limit.
     * @param modelId {String} The identifier of the Account Number, Account, or Card the Limit applies to.
     * @param modelType {module:model/Limit.ModelTypeEnum} The type of the model you wish to associate the Limit with.
     * @param status {module:model/Limit.StatusEnum} The current status of the Limit.
     * @param type {module:model/Limit.TypeEnum} A constant representing the object's type. For this resource it will always be `limit`.
     * @param value {Number} The value to evaluate the Limit against.
     */
    constructor(id, interval, metric, modelId, modelType, status, type, value) { 
        
        Limit.initialize(this, id, interval, metric, modelId, modelType, status, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, interval, metric, modelId, modelType, status, type, value) { 
        obj['id'] = id;
        obj['interval'] = interval;
        obj['metric'] = metric;
        obj['model_id'] = modelId;
        obj['model_type'] = modelType;
        obj['status'] = status;
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Limit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Limit} obj Optional instance to populate.
     * @return {module:model/Limit} The populated <code>Limit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Limit();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('model_id')) {
                obj['model_id'] = ApiClient.convertToType(data['model_id'], 'String');
            }
            if (data.hasOwnProperty('model_type')) {
                obj['model_type'] = ApiClient.convertToType(data['model_type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Limit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Limit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Limit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // ensure the json data is a string
        if (data['model_id'] && !(typeof data['model_id'] === 'string' || data['model_id'] instanceof String)) {
            throw new Error("Expected the field `model_id` to be a primitive type in the JSON string but got " + data['model_id']);
        }
        // ensure the json data is a string
        if (data['model_type'] && !(typeof data['model_type'] === 'string' || data['model_type'] instanceof String)) {
            throw new Error("Expected the field `model_type` to be a primitive type in the JSON string but got " + data['model_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Limit.RequiredProperties = ["id", "interval", "metric", "model_id", "model_type", "status", "type", "value"];

/**
 * The Limit identifier.
 * @member {String} id
 */
Limit.prototype['id'] = undefined;

/**
 * The interval for the metric. This is required if `metric` is `count` or `volume`.
 * @member {module:model/Limit.IntervalEnum} interval
 */
Limit.prototype['interval'] = undefined;

/**
 * The metric for the Limit.
 * @member {module:model/Limit.MetricEnum} metric
 */
Limit.prototype['metric'] = undefined;

/**
 * The identifier of the Account Number, Account, or Card the Limit applies to.
 * @member {String} model_id
 */
Limit.prototype['model_id'] = undefined;

/**
 * The type of the model you wish to associate the Limit with.
 * @member {module:model/Limit.ModelTypeEnum} model_type
 */
Limit.prototype['model_type'] = undefined;

/**
 * The current status of the Limit.
 * @member {module:model/Limit.StatusEnum} status
 */
Limit.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `limit`.
 * @member {module:model/Limit.TypeEnum} type
 */
Limit.prototype['type'] = undefined;

/**
 * The value to evaluate the Limit against.
 * @member {Number} value
 */
Limit.prototype['value'] = undefined;





/**
 * Allowed values for the <code>interval</code> property.
 * @enum {String}
 * @readonly
 */
Limit['IntervalEnum'] = {

    /**
     * value: "transaction"
     * @const
     */
    "transaction": "transaction",

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "all_time"
     * @const
     */
    "all_time": "all_time"
};


/**
 * Allowed values for the <code>metric</code> property.
 * @enum {String}
 * @readonly
 */
Limit['MetricEnum'] = {

    /**
     * value: "count"
     * @const
     */
    "count": "count",

    /**
     * value: "volume"
     * @const
     */
    "volume": "volume"
};


/**
 * Allowed values for the <code>model_type</code> property.
 * @enum {String}
 * @readonly
 */
Limit['ModelTypeEnum'] = {

    /**
     * value: "account"
     * @const
     */
    "account": "account",

    /**
     * value: "account_number"
     * @const
     */
    "account_number": "account_number",

    /**
     * value: "card"
     * @const
     */
    "card": "card"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Limit['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Limit['TypeEnum'] = {

    /**
     * value: "limit"
     * @const
     */
    "limit": "limit"
};



export default Limit;

