/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventSubscription model module.
 * @module model/EventSubscription
 * @version 0.0.1
 */
class EventSubscription {
    /**
     * Constructs a new <code>EventSubscription</code>.
     * Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks).
     * @alias module:model/EventSubscription
     * @param createdAt {Date} The time the event subscription was created.
     * @param id {String} The event subscription identifier.
     * @param selectedEventCategory {module:model/EventSubscription.SelectedEventCategoryEnum} If specified, this subscription will only receive webhooks for Events with the specified `category`.
     * @param sharedSecret {String} The key that will be used to sign webhooks.
     * @param status {module:model/EventSubscription.StatusEnum} This indicates if we'll send notifications to this subscription.
     * @param type {module:model/EventSubscription.TypeEnum} A constant representing the object's type. For this resource it will always be `event_subscription`.
     * @param url {String} The webhook url where we'll send notifications.
     */
    constructor(createdAt, id, selectedEventCategory, sharedSecret, status, type, url) { 
        
        EventSubscription.initialize(this, createdAt, id, selectedEventCategory, sharedSecret, status, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, selectedEventCategory, sharedSecret, status, type, url) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['selected_event_category'] = selectedEventCategory;
        obj['shared_secret'] = sharedSecret;
        obj['status'] = status;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>EventSubscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSubscription} obj Optional instance to populate.
     * @return {module:model/EventSubscription} The populated <code>EventSubscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSubscription();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('selected_event_category')) {
                obj['selected_event_category'] = ApiClient.convertToType(data['selected_event_category'], 'String');
            }
            if (data.hasOwnProperty('shared_secret')) {
                obj['shared_secret'] = ApiClient.convertToType(data['shared_secret'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSubscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSubscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventSubscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['selected_event_category'] && !(typeof data['selected_event_category'] === 'string' || data['selected_event_category'] instanceof String)) {
            throw new Error("Expected the field `selected_event_category` to be a primitive type in the JSON string but got " + data['selected_event_category']);
        }
        // ensure the json data is a string
        if (data['shared_secret'] && !(typeof data['shared_secret'] === 'string' || data['shared_secret'] instanceof String)) {
            throw new Error("Expected the field `shared_secret` to be a primitive type in the JSON string but got " + data['shared_secret']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

EventSubscription.RequiredProperties = ["created_at", "id", "selected_event_category", "shared_secret", "status", "type", "url"];

/**
 * The time the event subscription was created.
 * @member {Date} created_at
 */
EventSubscription.prototype['created_at'] = undefined;

/**
 * The event subscription identifier.
 * @member {String} id
 */
EventSubscription.prototype['id'] = undefined;

/**
 * If specified, this subscription will only receive webhooks for Events with the specified `category`.
 * @member {module:model/EventSubscription.SelectedEventCategoryEnum} selected_event_category
 */
EventSubscription.prototype['selected_event_category'] = undefined;

/**
 * The key that will be used to sign webhooks.
 * @member {String} shared_secret
 */
EventSubscription.prototype['shared_secret'] = undefined;

/**
 * This indicates if we'll send notifications to this subscription.
 * @member {module:model/EventSubscription.StatusEnum} status
 */
EventSubscription.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `event_subscription`.
 * @member {module:model/EventSubscription.TypeEnum} type
 */
EventSubscription.prototype['type'] = undefined;

/**
 * The webhook url where we'll send notifications.
 * @member {String} url
 */
EventSubscription.prototype['url'] = undefined;





/**
 * Allowed values for the <code>selected_event_category</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscription['SelectedEventCategoryEnum'] = {

    /**
     * value: "account.created"
     * @const
     */
    "account.created": "account.created",

    /**
     * value: "account.updated"
     * @const
     */
    "account.updated": "account.updated",

    /**
     * value: "account_number.created"
     * @const
     */
    "account_number.created": "account_number.created",

    /**
     * value: "account_number.updated"
     * @const
     */
    "account_number.updated": "account_number.updated",

    /**
     * value: "account_statement.created"
     * @const
     */
    "account_statement.created": "account_statement.created",

    /**
     * value: "account_transfer.created"
     * @const
     */
    "account_transfer.created": "account_transfer.created",

    /**
     * value: "account_transfer.updated"
     * @const
     */
    "account_transfer.updated": "account_transfer.updated",

    /**
     * value: "ach_prenotification.created"
     * @const
     */
    "ach_prenotification.created": "ach_prenotification.created",

    /**
     * value: "ach_prenotification.updated"
     * @const
     */
    "ach_prenotification.updated": "ach_prenotification.updated",

    /**
     * value: "ach_transfer.created"
     * @const
     */
    "ach_transfer.created": "ach_transfer.created",

    /**
     * value: "ach_transfer.updated"
     * @const
     */
    "ach_transfer.updated": "ach_transfer.updated",

    /**
     * value: "card.created"
     * @const
     */
    "card.created": "card.created",

    /**
     * value: "card.updated"
     * @const
     */
    "card.updated": "card.updated",

    /**
     * value: "card_payment.created"
     * @const
     */
    "card_payment.created": "card_payment.created",

    /**
     * value: "card_payment.updated"
     * @const
     */
    "card_payment.updated": "card_payment.updated",

    /**
     * value: "card_dispute.created"
     * @const
     */
    "card_dispute.created": "card_dispute.created",

    /**
     * value: "card_dispute.updated"
     * @const
     */
    "card_dispute.updated": "card_dispute.updated",

    /**
     * value: "check_deposit.created"
     * @const
     */
    "check_deposit.created": "check_deposit.created",

    /**
     * value: "check_deposit.updated"
     * @const
     */
    "check_deposit.updated": "check_deposit.updated",

    /**
     * value: "check_transfer.created"
     * @const
     */
    "check_transfer.created": "check_transfer.created",

    /**
     * value: "check_transfer.updated"
     * @const
     */
    "check_transfer.updated": "check_transfer.updated",

    /**
     * value: "declined_transaction.created"
     * @const
     */
    "declined_transaction.created": "declined_transaction.created",

    /**
     * value: "digital_wallet_token.created"
     * @const
     */
    "digital_wallet_token.created": "digital_wallet_token.created",

    /**
     * value: "digital_wallet_token.updated"
     * @const
     */
    "digital_wallet_token.updated": "digital_wallet_token.updated",

    /**
     * value: "document.created"
     * @const
     */
    "document.created": "document.created",

    /**
     * value: "entity.created"
     * @const
     */
    "entity.created": "entity.created",

    /**
     * value: "entity.updated"
     * @const
     */
    "entity.updated": "entity.updated",

    /**
     * value: "external_account.created"
     * @const
     */
    "external_account.created": "external_account.created",

    /**
     * value: "file.created"
     * @const
     */
    "file.created": "file.created",

    /**
     * value: "group.updated"
     * @const
     */
    "group.updated": "group.updated",

    /**
     * value: "group.heartbeat"
     * @const
     */
    "group.heartbeat": "group.heartbeat",

    /**
     * value: "inbound_ach_transfer_return.created"
     * @const
     */
    "inbound_ach_transfer_return.created": "inbound_ach_transfer_return.created",

    /**
     * value: "inbound_ach_transfer_return.updated"
     * @const
     */
    "inbound_ach_transfer_return.updated": "inbound_ach_transfer_return.updated",

    /**
     * value: "inbound_wire_drawdown_request.created"
     * @const
     */
    "inbound_wire_drawdown_request.created": "inbound_wire_drawdown_request.created",

    /**
     * value: "oauth_connection.created"
     * @const
     */
    "oauth_connection.created": "oauth_connection.created",

    /**
     * value: "oauth_connection.deactivated"
     * @const
     */
    "oauth_connection.deactivated": "oauth_connection.deactivated",

    /**
     * value: "pending_transaction.created"
     * @const
     */
    "pending_transaction.created": "pending_transaction.created",

    /**
     * value: "pending_transaction.updated"
     * @const
     */
    "pending_transaction.updated": "pending_transaction.updated",

    /**
     * value: "real_time_decision.card_authorization_requested"
     * @const
     */
    "real_time_decision.card_authorization_requested": "real_time_decision.card_authorization_requested",

    /**
     * value: "real_time_decision.digital_wallet_token_requested"
     * @const
     */
    "real_time_decision.digital_wallet_token_requested": "real_time_decision.digital_wallet_token_requested",

    /**
     * value: "real_time_decision.digital_wallet_authentication_requested"
     * @const
     */
    "real_time_decision.digital_wallet_authentication_requested": "real_time_decision.digital_wallet_authentication_requested",

    /**
     * value: "real_time_payments_transfer.created"
     * @const
     */
    "real_time_payments_transfer.created": "real_time_payments_transfer.created",

    /**
     * value: "real_time_payments_transfer.updated"
     * @const
     */
    "real_time_payments_transfer.updated": "real_time_payments_transfer.updated",

    /**
     * value: "real_time_payments_request_for_payment.created"
     * @const
     */
    "real_time_payments_request_for_payment.created": "real_time_payments_request_for_payment.created",

    /**
     * value: "real_time_payments_request_for_payment.updated"
     * @const
     */
    "real_time_payments_request_for_payment.updated": "real_time_payments_request_for_payment.updated",

    /**
     * value: "transaction.created"
     * @const
     */
    "transaction.created": "transaction.created",

    /**
     * value: "wire_drawdown_request.created"
     * @const
     */
    "wire_drawdown_request.created": "wire_drawdown_request.created",

    /**
     * value: "wire_drawdown_request.updated"
     * @const
     */
    "wire_drawdown_request.updated": "wire_drawdown_request.updated",

    /**
     * value: "wire_transfer.created"
     * @const
     */
    "wire_transfer.created": "wire_transfer.created",

    /**
     * value: "wire_transfer.updated"
     * @const
     */
    "wire_transfer.updated": "wire_transfer.updated"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscription['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "requires_attention"
     * @const
     */
    "requires_attention": "requires_attention"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscription['TypeEnum'] = {

    /**
     * value: "event_subscription"
     * @const
     */
    "event_subscription": "event_subscription"
};



export default EventSubscription;

