/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckTransferDeposit from './CheckTransferDeposit';
import CheckTransferReturn from './CheckTransferReturn';
import CheckTransferStopPaymentRequest from './CheckTransferStopPaymentRequest';
import CheckTransferSubmission from './CheckTransferSubmission';
import ReturnAddress from './ReturnAddress';
import TransferApproval from './TransferApproval';
import TransferCancellation from './TransferCancellation';

/**
 * The CheckTransfer model module.
 * @module model/CheckTransfer
 * @version 0.0.1
 */
class CheckTransfer {
    /**
     * Constructs a new <code>CheckTransfer</code>.
     * Check Transfers move funds from your Increase account by mailing a physical check.
     * @alias module:model/CheckTransfer
     * @param accountId {String} The identifier of the Account from which funds will be transferred.
     * @param addressCity {String} The city of the check's destination.
     * @param addressLine1 {String} The street address of the check's destination.
     * @param addressLine2 {String} The second line of the address of the check's destination.
     * @param addressState {String} The state of the check's destination.
     * @param addressZip {String} The postal code of the check's destination.
     * @param amount {Number} The transfer amount in USD cents.
     * @param approval {module:model/TransferApproval} 
     * @param cancellation {module:model/TransferCancellation} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     * @param currency {module:model/CheckTransfer.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
     * @param deposit {module:model/CheckTransferDeposit} 
     * @param id {String} The Check transfer's identifier.
     * @param mailedAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
     * @param message {String} The descriptor that will be printed on the memo field on the check.
     * @param note {String} The descriptor that will be printed on the letter included with the check.
     * @param recipientName {String} The name that will be printed on the check.
     * @param returnAddress {module:model/ReturnAddress} 
     * @param returnDetails {module:model/CheckTransferReturn} 
     * @param status {module:model/CheckTransfer.StatusEnum} The lifecycle status of the transfer.
     * @param stopPaymentRequest {module:model/CheckTransferStopPaymentRequest} 
     * @param submission {module:model/CheckTransferSubmission} 
     * @param submittedAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
     * @param transactionId {String} The ID for the transaction caused by the transfer.
     * @param type {module:model/CheckTransfer.TypeEnum} A constant representing the object's type. For this resource it will always be `check_transfer`.
     */
    constructor(accountId, addressCity, addressLine1, addressLine2, addressState, addressZip, amount, approval, cancellation, createdAt, currency, deposit, id, mailedAt, message, note, recipientName, returnAddress, returnDetails, status, stopPaymentRequest, submission, submittedAt, transactionId, type) { 
        
        CheckTransfer.initialize(this, accountId, addressCity, addressLine1, addressLine2, addressState, addressZip, amount, approval, cancellation, createdAt, currency, deposit, id, mailedAt, message, note, recipientName, returnAddress, returnDetails, status, stopPaymentRequest, submission, submittedAt, transactionId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, addressCity, addressLine1, addressLine2, addressState, addressZip, amount, approval, cancellation, createdAt, currency, deposit, id, mailedAt, message, note, recipientName, returnAddress, returnDetails, status, stopPaymentRequest, submission, submittedAt, transactionId, type) { 
        obj['account_id'] = accountId;
        obj['address_city'] = addressCity;
        obj['address_line1'] = addressLine1;
        obj['address_line2'] = addressLine2;
        obj['address_state'] = addressState;
        obj['address_zip'] = addressZip;
        obj['amount'] = amount;
        obj['approval'] = approval;
        obj['cancellation'] = cancellation;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['deposit'] = deposit;
        obj['id'] = id;
        obj['mailed_at'] = mailedAt;
        obj['message'] = message;
        obj['note'] = note;
        obj['recipient_name'] = recipientName;
        obj['return_address'] = returnAddress;
        obj['return_details'] = returnDetails;
        obj['status'] = status;
        obj['stop_payment_request'] = stopPaymentRequest;
        obj['submission'] = submission;
        obj['submitted_at'] = submittedAt;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CheckTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckTransfer} obj Optional instance to populate.
     * @return {module:model/CheckTransfer} The populated <code>CheckTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckTransfer();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('address_city')) {
                obj['address_city'] = ApiClient.convertToType(data['address_city'], 'String');
            }
            if (data.hasOwnProperty('address_line1')) {
                obj['address_line1'] = ApiClient.convertToType(data['address_line1'], 'String');
            }
            if (data.hasOwnProperty('address_line2')) {
                obj['address_line2'] = ApiClient.convertToType(data['address_line2'], 'String');
            }
            if (data.hasOwnProperty('address_state')) {
                obj['address_state'] = ApiClient.convertToType(data['address_state'], 'String');
            }
            if (data.hasOwnProperty('address_zip')) {
                obj['address_zip'] = ApiClient.convertToType(data['address_zip'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = TransferApproval.constructFromObject(data['approval']);
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = TransferCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deposit')) {
                obj['deposit'] = CheckTransferDeposit.constructFromObject(data['deposit']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mailed_at')) {
                obj['mailed_at'] = ApiClient.convertToType(data['mailed_at'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('recipient_name')) {
                obj['recipient_name'] = ApiClient.convertToType(data['recipient_name'], 'String');
            }
            if (data.hasOwnProperty('return_address')) {
                obj['return_address'] = ReturnAddress.constructFromObject(data['return_address']);
            }
            if (data.hasOwnProperty('return_details')) {
                obj['return_details'] = CheckTransferReturn.constructFromObject(data['return_details']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stop_payment_request')) {
                obj['stop_payment_request'] = CheckTransferStopPaymentRequest.constructFromObject(data['stop_payment_request']);
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = CheckTransferSubmission.constructFromObject(data['submission']);
            }
            if (data.hasOwnProperty('submitted_at')) {
                obj['submitted_at'] = ApiClient.convertToType(data['submitted_at'], 'Date');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['address_city'] && !(typeof data['address_city'] === 'string' || data['address_city'] instanceof String)) {
            throw new Error("Expected the field `address_city` to be a primitive type in the JSON string but got " + data['address_city']);
        }
        // ensure the json data is a string
        if (data['address_line1'] && !(typeof data['address_line1'] === 'string' || data['address_line1'] instanceof String)) {
            throw new Error("Expected the field `address_line1` to be a primitive type in the JSON string but got " + data['address_line1']);
        }
        // ensure the json data is a string
        if (data['address_line2'] && !(typeof data['address_line2'] === 'string' || data['address_line2'] instanceof String)) {
            throw new Error("Expected the field `address_line2` to be a primitive type in the JSON string but got " + data['address_line2']);
        }
        // ensure the json data is a string
        if (data['address_state'] && !(typeof data['address_state'] === 'string' || data['address_state'] instanceof String)) {
            throw new Error("Expected the field `address_state` to be a primitive type in the JSON string but got " + data['address_state']);
        }
        // ensure the json data is a string
        if (data['address_zip'] && !(typeof data['address_zip'] === 'string' || data['address_zip'] instanceof String)) {
            throw new Error("Expected the field `address_zip` to be a primitive type in the JSON string but got " + data['address_zip']);
        }
        // validate the optional field `approval`
        if (data['approval']) { // data not null
          TransferApproval.validateJSON(data['approval']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          TransferCancellation.validateJSON(data['cancellation']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `deposit`
        if (data['deposit']) { // data not null
          CheckTransferDeposit.validateJSON(data['deposit']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['recipient_name'] && !(typeof data['recipient_name'] === 'string' || data['recipient_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_name` to be a primitive type in the JSON string but got " + data['recipient_name']);
        }
        // validate the optional field `return_address`
        if (data['return_address']) { // data not null
          ReturnAddress.validateJSON(data['return_address']);
        }
        // validate the optional field `return_details`
        if (data['return_details']) { // data not null
          CheckTransferReturn.validateJSON(data['return_details']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `stop_payment_request`
        if (data['stop_payment_request']) { // data not null
          CheckTransferStopPaymentRequest.validateJSON(data['stop_payment_request']);
        }
        // validate the optional field `submission`
        if (data['submission']) { // data not null
          CheckTransferSubmission.validateJSON(data['submission']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CheckTransfer.RequiredProperties = ["account_id", "address_city", "address_line1", "address_line2", "address_state", "address_zip", "amount", "approval", "cancellation", "created_at", "currency", "deposit", "id", "mailed_at", "message", "note", "recipient_name", "return_address", "return_details", "status", "stop_payment_request", "submission", "submitted_at", "transaction_id", "type"];

/**
 * The identifier of the Account from which funds will be transferred.
 * @member {String} account_id
 */
CheckTransfer.prototype['account_id'] = undefined;

/**
 * The city of the check's destination.
 * @member {String} address_city
 */
CheckTransfer.prototype['address_city'] = undefined;

/**
 * The street address of the check's destination.
 * @member {String} address_line1
 */
CheckTransfer.prototype['address_line1'] = undefined;

/**
 * The second line of the address of the check's destination.
 * @member {String} address_line2
 */
CheckTransfer.prototype['address_line2'] = undefined;

/**
 * The state of the check's destination.
 * @member {String} address_state
 */
CheckTransfer.prototype['address_state'] = undefined;

/**
 * The postal code of the check's destination.
 * @member {String} address_zip
 */
CheckTransfer.prototype['address_zip'] = undefined;

/**
 * The transfer amount in USD cents.
 * @member {Number} amount
 */
CheckTransfer.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferApproval} approval
 */
CheckTransfer.prototype['approval'] = undefined;

/**
 * @member {module:model/TransferCancellation} cancellation
 */
CheckTransfer.prototype['cancellation'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
 * @member {Date} created_at
 */
CheckTransfer.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
 * @member {module:model/CheckTransfer.CurrencyEnum} currency
 */
CheckTransfer.prototype['currency'] = undefined;

/**
 * @member {module:model/CheckTransferDeposit} deposit
 */
CheckTransfer.prototype['deposit'] = undefined;

/**
 * The Check transfer's identifier.
 * @member {String} id
 */
CheckTransfer.prototype['id'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
 * @member {Date} mailed_at
 */
CheckTransfer.prototype['mailed_at'] = undefined;

/**
 * The descriptor that will be printed on the memo field on the check.
 * @member {String} message
 */
CheckTransfer.prototype['message'] = undefined;

/**
 * The descriptor that will be printed on the letter included with the check.
 * @member {String} note
 */
CheckTransfer.prototype['note'] = undefined;

/**
 * The name that will be printed on the check.
 * @member {String} recipient_name
 */
CheckTransfer.prototype['recipient_name'] = undefined;

/**
 * @member {module:model/ReturnAddress} return_address
 */
CheckTransfer.prototype['return_address'] = undefined;

/**
 * @member {module:model/CheckTransferReturn} return_details
 */
CheckTransfer.prototype['return_details'] = undefined;

/**
 * The lifecycle status of the transfer.
 * @member {module:model/CheckTransfer.StatusEnum} status
 */
CheckTransfer.prototype['status'] = undefined;

/**
 * @member {module:model/CheckTransferStopPaymentRequest} stop_payment_request
 */
CheckTransfer.prototype['stop_payment_request'] = undefined;

/**
 * @member {module:model/CheckTransferSubmission} submission
 */
CheckTransfer.prototype['submission'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
 * @member {Date} submitted_at
 */
CheckTransfer.prototype['submitted_at'] = undefined;

/**
 * The ID for the transaction caused by the transfer.
 * @member {String} transaction_id
 */
CheckTransfer.prototype['transaction_id'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer`.
 * @member {module:model/CheckTransfer.TypeEnum} type
 */
CheckTransfer.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
CheckTransfer['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CheckTransfer['StatusEnum'] = {

    /**
     * value: "pending_approval"
     * @const
     */
    "pending_approval": "pending_approval",

    /**
     * value: "pending_submission"
     * @const
     */
    "pending_submission": "pending_submission",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "pending_mailing"
     * @const
     */
    "pending_mailing": "pending_mailing",

    /**
     * value: "mailed"
     * @const
     */
    "mailed": "mailed",

    /**
     * value: "canceled"
     * @const
     */
    "canceled": "canceled",

    /**
     * value: "deposited"
     * @const
     */
    "deposited": "deposited",

    /**
     * value: "stopped"
     * @const
     */
    "stopped": "stopped",

    /**
     * value: "returned"
     * @const
     */
    "returned": "returned",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "requires_attention"
     * @const
     */
    "requires_attention": "requires_attention"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CheckTransfer['TypeEnum'] = {

    /**
     * value: "check_transfer"
     * @const
     */
    "check_transfer": "check_transfer"
};



export default CheckTransfer;

