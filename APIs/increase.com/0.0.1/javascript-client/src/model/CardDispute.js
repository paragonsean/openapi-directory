/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardDisputeAcceptance from './CardDisputeAcceptance';
import CardDisputeRejection from './CardDisputeRejection';

/**
 * The CardDispute model module.
 * @module model/CardDispute
 * @version 0.0.1
 */
class CardDispute {
    /**
     * Constructs a new <code>CardDispute</code>.
     * If unauthorized activity occurs on a card, you can create a Card Dispute and we&#39;ll return the funds if appropriate.
     * @alias module:model/CardDispute
     * @param acceptance {module:model/CardDisputeAcceptance} 
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
     * @param disputedTransactionId {String} The identifier of the Transaction that was disputed.
     * @param explanation {String} Why you disputed the Transaction in question.
     * @param id {String} The Card Dispute identifier.
     * @param rejection {module:model/CardDisputeRejection} 
     * @param status {module:model/CardDispute.StatusEnum} The results of the Dispute investigation.
     * @param type {module:model/CardDispute.TypeEnum} A constant representing the object's type. For this resource it will always be `card_dispute`.
     */
    constructor(acceptance, createdAt, disputedTransactionId, explanation, id, rejection, status, type) { 
        
        CardDispute.initialize(this, acceptance, createdAt, disputedTransactionId, explanation, id, rejection, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acceptance, createdAt, disputedTransactionId, explanation, id, rejection, status, type) { 
        obj['acceptance'] = acceptance;
        obj['created_at'] = createdAt;
        obj['disputed_transaction_id'] = disputedTransactionId;
        obj['explanation'] = explanation;
        obj['id'] = id;
        obj['rejection'] = rejection;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CardDispute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardDispute} obj Optional instance to populate.
     * @return {module:model/CardDispute} The populated <code>CardDispute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardDispute();

            if (data.hasOwnProperty('acceptance')) {
                obj['acceptance'] = CardDisputeAcceptance.constructFromObject(data['acceptance']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('disputed_transaction_id')) {
                obj['disputed_transaction_id'] = ApiClient.convertToType(data['disputed_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rejection')) {
                obj['rejection'] = CardDisputeRejection.constructFromObject(data['rejection']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardDispute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardDispute</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardDispute.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `acceptance`
        if (data['acceptance']) { // data not null
          CardDisputeAcceptance.validateJSON(data['acceptance']);
        }
        // ensure the json data is a string
        if (data['disputed_transaction_id'] && !(typeof data['disputed_transaction_id'] === 'string' || data['disputed_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `disputed_transaction_id` to be a primitive type in the JSON string but got " + data['disputed_transaction_id']);
        }
        // ensure the json data is a string
        if (data['explanation'] && !(typeof data['explanation'] === 'string' || data['explanation'] instanceof String)) {
            throw new Error("Expected the field `explanation` to be a primitive type in the JSON string but got " + data['explanation']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `rejection`
        if (data['rejection']) { // data not null
          CardDisputeRejection.validateJSON(data['rejection']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CardDispute.RequiredProperties = ["acceptance", "created_at", "disputed_transaction_id", "explanation", "id", "rejection", "status", "type"];

/**
 * @member {module:model/CardDisputeAcceptance} acceptance
 */
CardDispute.prototype['acceptance'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
 * @member {Date} created_at
 */
CardDispute.prototype['created_at'] = undefined;

/**
 * The identifier of the Transaction that was disputed.
 * @member {String} disputed_transaction_id
 */
CardDispute.prototype['disputed_transaction_id'] = undefined;

/**
 * Why you disputed the Transaction in question.
 * @member {String} explanation
 */
CardDispute.prototype['explanation'] = undefined;

/**
 * The Card Dispute identifier.
 * @member {String} id
 */
CardDispute.prototype['id'] = undefined;

/**
 * @member {module:model/CardDisputeRejection} rejection
 */
CardDispute.prototype['rejection'] = undefined;

/**
 * The results of the Dispute investigation.
 * @member {module:model/CardDispute.StatusEnum} status
 */
CardDispute.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `card_dispute`.
 * @member {module:model/CardDispute.TypeEnum} type
 */
CardDispute.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CardDispute['StatusEnum'] = {

    /**
     * value: "pending_reviewing"
     * @const
     */
    "pending_reviewing": "pending_reviewing",

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CardDispute['TypeEnum'] = {

    /**
     * value: "card_dispute"
     * @const
     */
    "card_dispute": "card_dispute"
};



export default CardDispute;

