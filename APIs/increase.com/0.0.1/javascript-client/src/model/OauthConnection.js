/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OauthConnection model module.
 * @module model/OauthConnection
 * @version 0.0.1
 */
class OauthConnection {
    /**
     * Constructs a new <code>OauthConnection</code>.
     * When a user authorizes your OAuth application, an OAuth Connection object is created.
     * @alias module:model/OauthConnection
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.
     * @param groupId {String} The identifier of the Group that has authorized your OAuth application.
     * @param id {String} The OAuth Connection's identifier.
     * @param status {module:model/OauthConnection.StatusEnum} Whether the connection is active.
     * @param type {module:model/OauthConnection.TypeEnum} A constant representing the object's type. For this resource it will always be `oauth_connection`.
     */
    constructor(createdAt, groupId, id, status, type) { 
        
        OauthConnection.initialize(this, createdAt, groupId, id, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, groupId, id, status, type) { 
        obj['created_at'] = createdAt;
        obj['group_id'] = groupId;
        obj['id'] = id;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>OauthConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OauthConnection} obj Optional instance to populate.
     * @return {module:model/OauthConnection} The populated <code>OauthConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OauthConnection();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OauthConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OauthConnection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OauthConnection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

OauthConnection.RequiredProperties = ["created_at", "group_id", "id", "status", "type"];

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.
 * @member {Date} created_at
 */
OauthConnection.prototype['created_at'] = undefined;

/**
 * The identifier of the Group that has authorized your OAuth application.
 * @member {String} group_id
 */
OauthConnection.prototype['group_id'] = undefined;

/**
 * The OAuth Connection's identifier.
 * @member {String} id
 */
OauthConnection.prototype['id'] = undefined;

/**
 * Whether the connection is active.
 * @member {module:model/OauthConnection.StatusEnum} status
 */
OauthConnection.prototype['status'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `oauth_connection`.
 * @member {module:model/OauthConnection.TypeEnum} type
 */
OauthConnection.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
OauthConnection['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OauthConnection['TypeEnum'] = {

    /**
     * value: "oauth_connection"
     * @const
     */
    "oauth_connection": "oauth_connection"
};



export default OauthConnection;

