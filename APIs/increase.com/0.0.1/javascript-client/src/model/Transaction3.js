/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionSource from './TransactionSource';

/**
 * The Transaction3 model module.
 * @module model/Transaction3
 * @version 0.0.1
 */
class Transaction3 {
    /**
     * Constructs a new <code>Transaction3</code>.
     * This will contain the resulting [Transaction](#transactions) object. The Transaction&#39;s &#x60;source&#x60; will be of &#x60;category: interest_payment&#x60;.
     * @alias module:model/Transaction3
     * @param accountId {String} The identifier for the Account the Transaction belongs to.
     * @param amount {Number} The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
     * @param createdAt {Date} The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
     * @param currency {module:model/Transaction3.CurrencyEnum} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
     * @param description {String} For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
     * @param id {String} The Transaction identifier.
     * @param routeId {String} The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
     * @param routeType {module:model/Transaction3.RouteTypeEnum} The type of the route this Transaction came through.
     * @param source {module:model/TransactionSource} 
     * @param type {module:model/Transaction3.TypeEnum} A constant representing the object's type. For this resource it will always be `transaction`.
     */
    constructor(accountId, amount, createdAt, currency, description, id, routeId, routeType, source, type) { 
        
        Transaction3.initialize(this, accountId, amount, createdAt, currency, description, id, routeId, routeType, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, createdAt, currency, description, id, routeId, routeType, source, type) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['created_at'] = createdAt;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['id'] = id;
        obj['route_id'] = routeId;
        obj['route_type'] = routeType;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Transaction3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction3} obj Optional instance to populate.
     * @return {module:model/Transaction3} The populated <code>Transaction3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction3();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('route_id')) {
                obj['route_id'] = ApiClient.convertToType(data['route_id'], 'String');
            }
            if (data.hasOwnProperty('route_type')) {
                obj['route_type'] = ApiClient.convertToType(data['route_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = TransactionSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction3</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction3.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['route_id'] && !(typeof data['route_id'] === 'string' || data['route_id'] instanceof String)) {
            throw new Error("Expected the field `route_id` to be a primitive type in the JSON string but got " + data['route_id']);
        }
        // ensure the json data is a string
        if (data['route_type'] && !(typeof data['route_type'] === 'string' || data['route_type'] instanceof String)) {
            throw new Error("Expected the field `route_type` to be a primitive type in the JSON string but got " + data['route_type']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          TransactionSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Transaction3.RequiredProperties = ["account_id", "amount", "created_at", "currency", "description", "id", "route_id", "route_type", "source", "type"];

/**
 * The identifier for the Account the Transaction belongs to.
 * @member {String} account_id
 */
Transaction3.prototype['account_id'] = undefined;

/**
 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
 * @member {Number} amount
 */
Transaction3.prototype['amount'] = undefined;

/**
 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
 * @member {Date} created_at
 */
Transaction3.prototype['created_at'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
 * @member {module:model/Transaction3.CurrencyEnum} currency
 */
Transaction3.prototype['currency'] = undefined;

/**
 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
 * @member {String} description
 */
Transaction3.prototype['description'] = undefined;

/**
 * The Transaction identifier.
 * @member {String} id
 */
Transaction3.prototype['id'] = undefined;

/**
 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
 * @member {String} route_id
 */
Transaction3.prototype['route_id'] = undefined;

/**
 * The type of the route this Transaction came through.
 * @member {module:model/Transaction3.RouteTypeEnum} route_type
 */
Transaction3.prototype['route_type'] = undefined;

/**
 * @member {module:model/TransactionSource} source
 */
Transaction3.prototype['source'] = undefined;

/**
 * A constant representing the object's type. For this resource it will always be `transaction`.
 * @member {module:model/Transaction3.TypeEnum} type
 */
Transaction3.prototype['type'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Transaction3['CurrencyEnum'] = {

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD"
};


/**
 * Allowed values for the <code>route_type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction3['RouteTypeEnum'] = {

    /**
     * value: "account_number"
     * @const
     */
    "account_number": "account_number",

    /**
     * value: "card"
     * @const
     */
    "card": "card"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction3['TypeEnum'] = {

    /**
     * value: "transaction"
     * @const
     */
    "transaction": "transaction"
};



export default Transaction3;

