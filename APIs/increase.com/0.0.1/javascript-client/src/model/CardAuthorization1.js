/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkDetails from './NetworkDetails';

/**
 * The CardAuthorization1 model module.
 * @module model/CardAuthorization1
 * @version 0.0.1
 */
class CardAuthorization1 {
    /**
     * Constructs a new <code>CardAuthorization1</code>.
     * Fields related to a card authorization.
     * @alias module:model/CardAuthorization1
     * @param accountId {String} The identifier of the Account the authorization will debit.
     * @param cardId {String} The identifier of the Card that is being authorized.
     * @param decision {module:model/CardAuthorization1.DecisionEnum} Whether or not the authorization was approved.
     * @param merchantAcceptorId {String} The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
     * @param merchantCategoryCode {String} The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
     * @param merchantCity {String} The city the merchant resides in.
     * @param merchantCountry {String} The country the merchant resides in.
     * @param merchantDescriptor {String} The merchant descriptor of the merchant the card is transacting with.
     * @param network {module:model/CardAuthorization1.NetworkEnum} The payment network used to process this card authorization
     * @param networkDetails {module:model/NetworkDetails} 
     * @param presentmentAmount {Number} The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
     * @param presentmentCurrency {String} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
     * @param settlementAmount {Number} The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
     * @param settlementCurrency {String} The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
     */
    constructor(accountId, cardId, decision, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, presentmentAmount, presentmentCurrency, settlementAmount, settlementCurrency) { 
        
        CardAuthorization1.initialize(this, accountId, cardId, decision, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, presentmentAmount, presentmentCurrency, settlementAmount, settlementCurrency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, cardId, decision, merchantAcceptorId, merchantCategoryCode, merchantCity, merchantCountry, merchantDescriptor, network, networkDetails, presentmentAmount, presentmentCurrency, settlementAmount, settlementCurrency) { 
        obj['account_id'] = accountId;
        obj['card_id'] = cardId;
        obj['decision'] = decision;
        obj['merchant_acceptor_id'] = merchantAcceptorId;
        obj['merchant_category_code'] = merchantCategoryCode;
        obj['merchant_city'] = merchantCity;
        obj['merchant_country'] = merchantCountry;
        obj['merchant_descriptor'] = merchantDescriptor;
        obj['network'] = network;
        obj['network_details'] = networkDetails;
        obj['presentment_amount'] = presentmentAmount;
        obj['presentment_currency'] = presentmentCurrency;
        obj['settlement_amount'] = settlementAmount;
        obj['settlement_currency'] = settlementCurrency;
    }

    /**
     * Constructs a <code>CardAuthorization1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardAuthorization1} obj Optional instance to populate.
     * @return {module:model/CardAuthorization1} The populated <code>CardAuthorization1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardAuthorization1();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = ApiClient.convertToType(data['decision'], 'String');
            }
            if (data.hasOwnProperty('merchant_acceptor_id')) {
                obj['merchant_acceptor_id'] = ApiClient.convertToType(data['merchant_acceptor_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_category_code')) {
                obj['merchant_category_code'] = ApiClient.convertToType(data['merchant_category_code'], 'String');
            }
            if (data.hasOwnProperty('merchant_city')) {
                obj['merchant_city'] = ApiClient.convertToType(data['merchant_city'], 'String');
            }
            if (data.hasOwnProperty('merchant_country')) {
                obj['merchant_country'] = ApiClient.convertToType(data['merchant_country'], 'String');
            }
            if (data.hasOwnProperty('merchant_descriptor')) {
                obj['merchant_descriptor'] = ApiClient.convertToType(data['merchant_descriptor'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('network_details')) {
                obj['network_details'] = NetworkDetails.constructFromObject(data['network_details']);
            }
            if (data.hasOwnProperty('presentment_amount')) {
                obj['presentment_amount'] = ApiClient.convertToType(data['presentment_amount'], 'Number');
            }
            if (data.hasOwnProperty('presentment_currency')) {
                obj['presentment_currency'] = ApiClient.convertToType(data['presentment_currency'], 'String');
            }
            if (data.hasOwnProperty('settlement_amount')) {
                obj['settlement_amount'] = ApiClient.convertToType(data['settlement_amount'], 'Number');
            }
            if (data.hasOwnProperty('settlement_currency')) {
                obj['settlement_currency'] = ApiClient.convertToType(data['settlement_currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardAuthorization1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardAuthorization1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardAuthorization1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['decision'] && !(typeof data['decision'] === 'string' || data['decision'] instanceof String)) {
            throw new Error("Expected the field `decision` to be a primitive type in the JSON string but got " + data['decision']);
        }
        // ensure the json data is a string
        if (data['merchant_acceptor_id'] && !(typeof data['merchant_acceptor_id'] === 'string' || data['merchant_acceptor_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_acceptor_id` to be a primitive type in the JSON string but got " + data['merchant_acceptor_id']);
        }
        // ensure the json data is a string
        if (data['merchant_category_code'] && !(typeof data['merchant_category_code'] === 'string' || data['merchant_category_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got " + data['merchant_category_code']);
        }
        // ensure the json data is a string
        if (data['merchant_city'] && !(typeof data['merchant_city'] === 'string' || data['merchant_city'] instanceof String)) {
            throw new Error("Expected the field `merchant_city` to be a primitive type in the JSON string but got " + data['merchant_city']);
        }
        // ensure the json data is a string
        if (data['merchant_country'] && !(typeof data['merchant_country'] === 'string' || data['merchant_country'] instanceof String)) {
            throw new Error("Expected the field `merchant_country` to be a primitive type in the JSON string but got " + data['merchant_country']);
        }
        // ensure the json data is a string
        if (data['merchant_descriptor'] && !(typeof data['merchant_descriptor'] === 'string' || data['merchant_descriptor'] instanceof String)) {
            throw new Error("Expected the field `merchant_descriptor` to be a primitive type in the JSON string but got " + data['merchant_descriptor']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `network_details`
        if (data['network_details']) { // data not null
          NetworkDetails.validateJSON(data['network_details']);
        }
        // ensure the json data is a string
        if (data['presentment_currency'] && !(typeof data['presentment_currency'] === 'string' || data['presentment_currency'] instanceof String)) {
            throw new Error("Expected the field `presentment_currency` to be a primitive type in the JSON string but got " + data['presentment_currency']);
        }
        // ensure the json data is a string
        if (data['settlement_currency'] && !(typeof data['settlement_currency'] === 'string' || data['settlement_currency'] instanceof String)) {
            throw new Error("Expected the field `settlement_currency` to be a primitive type in the JSON string but got " + data['settlement_currency']);
        }

        return true;
    }


}

CardAuthorization1.RequiredProperties = ["account_id", "card_id", "decision", "merchant_acceptor_id", "merchant_category_code", "merchant_city", "merchant_country", "merchant_descriptor", "network", "network_details", "presentment_amount", "presentment_currency", "settlement_amount", "settlement_currency"];

/**
 * The identifier of the Account the authorization will debit.
 * @member {String} account_id
 */
CardAuthorization1.prototype['account_id'] = undefined;

/**
 * The identifier of the Card that is being authorized.
 * @member {String} card_id
 */
CardAuthorization1.prototype['card_id'] = undefined;

/**
 * Whether or not the authorization was approved.
 * @member {module:model/CardAuthorization1.DecisionEnum} decision
 */
CardAuthorization1.prototype['decision'] = undefined;

/**
 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
 * @member {String} merchant_acceptor_id
 */
CardAuthorization1.prototype['merchant_acceptor_id'] = undefined;

/**
 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
 * @member {String} merchant_category_code
 */
CardAuthorization1.prototype['merchant_category_code'] = undefined;

/**
 * The city the merchant resides in.
 * @member {String} merchant_city
 */
CardAuthorization1.prototype['merchant_city'] = undefined;

/**
 * The country the merchant resides in.
 * @member {String} merchant_country
 */
CardAuthorization1.prototype['merchant_country'] = undefined;

/**
 * The merchant descriptor of the merchant the card is transacting with.
 * @member {String} merchant_descriptor
 */
CardAuthorization1.prototype['merchant_descriptor'] = undefined;

/**
 * The payment network used to process this card authorization
 * @member {module:model/CardAuthorization1.NetworkEnum} network
 */
CardAuthorization1.prototype['network'] = undefined;

/**
 * @member {module:model/NetworkDetails} network_details
 */
CardAuthorization1.prototype['network_details'] = undefined;

/**
 * The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
 * @member {Number} presentment_amount
 */
CardAuthorization1.prototype['presentment_amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
 * @member {String} presentment_currency
 */
CardAuthorization1.prototype['presentment_currency'] = undefined;

/**
 * The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
 * @member {Number} settlement_amount
 */
CardAuthorization1.prototype['settlement_amount'] = undefined;

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
 * @member {String} settlement_currency
 */
CardAuthorization1.prototype['settlement_currency'] = undefined;





/**
 * Allowed values for the <code>decision</code> property.
 * @enum {String}
 * @readonly
 */
CardAuthorization1['DecisionEnum'] = {

    /**
     * value: "approve"
     * @const
     */
    "approve": "approve",

    /**
     * value: "decline"
     * @const
     */
    "decline": "decline"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
CardAuthorization1['NetworkEnum'] = {

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa"
};



export default CardAuthorization1;

