/**
 * Increase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import AccountList from '../model/AccountList';
import AccountNumber from '../model/AccountNumber';
import AccountNumberList from '../model/AccountNumberList';
import AccountStatement from '../model/AccountStatement';
import AccountStatementList from '../model/AccountStatementList';
import AccountTransfer from '../model/AccountTransfer';
import AccountTransferList from '../model/AccountTransferList';
import AchPrenotification from '../model/AchPrenotification';
import AchPrenotificationList from '../model/AchPrenotificationList';
import AchTransfer from '../model/AchTransfer';
import AchTransferList from '../model/AchTransferList';
import ActionARealTimeDecisionParameters from '../model/ActionARealTimeDecisionParameters';
import BalanceLookup from '../model/BalanceLookup';
import BookkeepingAccount from '../model/BookkeepingAccount';
import BookkeepingAccountList from '../model/BookkeepingAccountList';
import BookkeepingEntryList from '../model/BookkeepingEntryList';
import BookkeepingEntrySet from '../model/BookkeepingEntrySet';
import Card from '../model/Card';
import CardDetails from '../model/CardDetails';
import CardDispute from '../model/CardDispute';
import CardDisputeList from '../model/CardDisputeList';
import CardList from '../model/CardList';
import CardProfile from '../model/CardProfile';
import CardProfileList from '../model/CardProfileList';
import CheckDeposit from '../model/CheckDeposit';
import CheckDepositList from '../model/CheckDepositList';
import CheckTransfer from '../model/CheckTransfer';
import CheckTransferList from '../model/CheckTransferList';
import CompleteASandboxRealTimePaymentsTransferParameters from '../model/CompleteASandboxRealTimePaymentsTransferParameters';
import CreateABookkeepingAccountParameters from '../model/CreateABookkeepingAccountParameters';
import CreateABookkeepingEntrySetParameters from '../model/CreateABookkeepingEntrySetParameters';
import CreateACardDisputeParameters from '../model/CreateACardDisputeParameters';
import CreateACardParameters from '../model/CreateACardParameters';
import CreateACardProfileParameters from '../model/CreateACardProfileParameters';
import CreateACheckDepositParameters from '../model/CreateACheckDepositParameters';
import CreateACheckTransferParameters from '../model/CreateACheckTransferParameters';
import CreateALimitParameters from '../model/CreateALimitParameters';
import CreateARealTimePaymentsTransferParameters from '../model/CreateARealTimePaymentsTransferParameters';
import CreateASupplementalDocumentForAnEntityParameters from '../model/CreateASupplementalDocumentForAnEntityParameters';
import CreateAWireDrawdownRequestParameters from '../model/CreateAWireDrawdownRequestParameters';
import CreateAWireTransferParameters from '../model/CreateAWireTransferParameters';
import CreateAnAccountNumberParameters from '../model/CreateAnAccountNumberParameters';
import CreateAnAccountParameters from '../model/CreateAnAccountParameters';
import CreateAnAccountTransferParameters from '../model/CreateAnAccountTransferParameters';
import CreateAnAchPrenotificationParameters from '../model/CreateAnAchPrenotificationParameters';
import CreateAnAchReturnParameters from '../model/CreateAnAchReturnParameters';
import CreateAnAchTransferParameters from '../model/CreateAnAchTransferParameters';
import CreateAnEntityParameters from '../model/CreateAnEntityParameters';
import CreateAnEventSubscriptionParameters from '../model/CreateAnEventSubscriptionParameters';
import CreateAnExportParameters from '../model/CreateAnExportParameters';
import CreateAnExternalAccountParameters from '../model/CreateAnExternalAccountParameters';
import DeclinedTransaction from '../model/DeclinedTransaction';
import DeclinedTransactionList from '../model/DeclinedTransactionList';
import DigitalWalletToken from '../model/DigitalWalletToken';
import DigitalWalletTokenList from '../model/DigitalWalletTokenList';
import Document from '../model/Document';
import DocumentList from '../model/DocumentList';
import Entity from '../model/Entity';
import EntityList from '../model/EntityList';
import Error from '../model/Error';
import Event from '../model/Event';
import EventList from '../model/EventList';
import EventSubscription from '../model/EventSubscription';
import EventSubscriptionList from '../model/EventSubscriptionList';
import Export from '../model/Export';
import ExportList from '../model/ExportList';
import ExternalAccount from '../model/ExternalAccount';
import ExternalAccountList from '../model/ExternalAccountList';
import FileList from '../model/FileList';
import Group from '../model/Group';
import InboundAchTransferReturn from '../model/InboundAchTransferReturn';
import InboundAchTransferReturnList from '../model/InboundAchTransferReturnList';
import InboundAchTransferSimulationResult from '../model/InboundAchTransferSimulationResult';
import InboundCardAuthorizationSimulationResult from '../model/InboundCardAuthorizationSimulationResult';
import InboundDigitalWalletTokenRequestSimulationResult from '../model/InboundDigitalWalletTokenRequestSimulationResult';
import InboundRealTimePaymentsTransferSimulationResult from '../model/InboundRealTimePaymentsTransferSimulationResult';
import InboundWireDrawdownRequest from '../model/InboundWireDrawdownRequest';
import InboundWireDrawdownRequestList from '../model/InboundWireDrawdownRequestList';
import InboundWireTransferSimulationResult from '../model/InboundWireTransferSimulationResult';
import InterestPaymentSimulationResult from '../model/InterestPaymentSimulationResult';
import Limit from '../model/Limit';
import LimitList from '../model/LimitList';
import LookUpTheBalanceForAnAccountParameters from '../model/LookUpTheBalanceForAnAccountParameters';
import OauthConnection from '../model/OauthConnection';
import OauthConnectionList from '../model/OauthConnectionList';
import PendingTransaction from '../model/PendingTransaction';
import PendingTransactionList from '../model/PendingTransactionList';
import Program from '../model/Program';
import ProgramList from '../model/ProgramList';
import RealTimeDecision from '../model/RealTimeDecision';
import RealTimePaymentsTransfer from '../model/RealTimePaymentsTransfer';
import RealTimePaymentsTransferList from '../model/RealTimePaymentsTransferList';
import ReturnASandboxAchTransferParameters from '../model/ReturnASandboxAchTransferParameters';
import ReturnASandboxCheckTransferParameters from '../model/ReturnASandboxCheckTransferParameters';
import RoutingNumberList from '../model/RoutingNumberList';
import SimulateARealTimePaymentsTransferToYourAccountParameters from '../model/SimulateARealTimePaymentsTransferToYourAccountParameters';
import SimulateARefundOnACardParameters from '../model/SimulateARefundOnACardParameters';
import SimulateATaxDocumentBeingCreatedParameters from '../model/SimulateATaxDocumentBeingCreatedParameters';
import SimulateAWireTransferToYourAccountParameters from '../model/SimulateAWireTransferToYourAccountParameters';
import SimulateAnAccountStatementBeingCreatedParameters from '../model/SimulateAnAccountStatementBeingCreatedParameters';
import SimulateAnAchTransferToYourAccountParameters from '../model/SimulateAnAchTransferToYourAccountParameters';
import SimulateAnAuthorizationOnACardParameters from '../model/SimulateAnAuthorizationOnACardParameters';
import SimulateAnInboundWireDrawdownRequestBeingCreatedParameters from '../model/SimulateAnInboundWireDrawdownRequestBeingCreatedParameters';
import SimulateAnInterestPaymentToYourAccountParameters from '../model/SimulateAnInterestPaymentToYourAccountParameters';
import SimulateDigitalWalletProvisioningForACardParameters from '../model/SimulateDigitalWalletProvisioningForACardParameters';
import SimulateSettlingACardAuthorizationParameters from '../model/SimulateSettlingACardAuthorizationParameters';
import SimulatesAdvancingTheStateOfACardDisputeParameters from '../model/SimulatesAdvancingTheStateOfACardDisputeParameters';
import Transaction from '../model/Transaction';
import TransactionList from '../model/TransactionList';
import UpdateACardParameters from '../model/UpdateACardParameters';
import UpdateALimitParameters from '../model/UpdateALimitParameters';
import UpdateAnAccountNumberParameters from '../model/UpdateAnAccountNumberParameters';
import UpdateAnAccountParameters from '../model/UpdateAnAccountParameters';
import UpdateAnEventSubscriptionParameters from '../model/UpdateAnEventSubscriptionParameters';
import UpdateAnExternalAccountParameters from '../model/UpdateAnExternalAccountParameters';
import WireDrawdownRequest from '../model/WireDrawdownRequest';
import WireDrawdownRequestList from '../model/WireDrawdownRequestList';
import WireTransfer from '../model/WireTransfer';
import WireTransferList from '../model/WireTransferList';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionARealTimeDecision operation.
     * @callback module:api/DefaultApi~actionARealTimeDecisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimeDecision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Action a Real-Time Decision
     * @param {String} realTimeDecisionId 
     * @param {module:model/ActionARealTimeDecisionParameters} actionARealTimeDecisionParameters 
     * @param {module:api/DefaultApi~actionARealTimeDecisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimeDecision}
     */
    actionARealTimeDecision(realTimeDecisionId, actionARealTimeDecisionParameters, callback) {
      let postBody = actionARealTimeDecisionParameters;
      // verify the required parameter 'realTimeDecisionId' is set
      if (realTimeDecisionId === undefined || realTimeDecisionId === null) {
        throw new Error("Missing the required parameter 'realTimeDecisionId' when calling actionARealTimeDecision");
      }
      // verify the required parameter 'actionARealTimeDecisionParameters' is set
      if (actionARealTimeDecisionParameters === undefined || actionARealTimeDecisionParameters === null) {
        throw new Error("Missing the required parameter 'actionARealTimeDecisionParameters' when calling actionARealTimeDecision");
      }

      let pathParams = {
        'real_time_decision_id': realTimeDecisionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RealTimeDecision;
      return this.apiClient.callApi(
        '/real_time_decisions/{real_time_decision_id}/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveACheckTransfer operation.
     * @callback module:api/DefaultApi~approveACheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a Check Transfer
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~approveACheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    approveACheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling approveACheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/check_transfers/{check_transfer_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveAWireTransfer operation.
     * @callback module:api/DefaultApi~approveAWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a Wire Transfer
     * @param {String} wireTransferId 
     * @param {module:api/DefaultApi~approveAWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    approveAWireTransfer(wireTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'wireTransferId' is set
      if (wireTransferId === undefined || wireTransferId === null) {
        throw new Error("Missing the required parameter 'wireTransferId' when calling approveAWireTransfer");
      }

      let pathParams = {
        'wire_transfer_id': wireTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/wire_transfers/{wire_transfer_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveAnAccountTransfer operation.
     * @callback module:api/DefaultApi~approveAnAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve an Account Transfer
     * @param {String} accountTransferId 
     * @param {module:api/DefaultApi~approveAnAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransfer}
     */
    approveAnAccountTransfer(accountTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'accountTransferId' is set
      if (accountTransferId === undefined || accountTransferId === null) {
        throw new Error("Missing the required parameter 'accountTransferId' when calling approveAnAccountTransfer");
      }

      let pathParams = {
        'account_transfer_id': accountTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountTransfer;
      return this.apiClient.callApi(
        '/account_transfers/{account_transfer_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the approveAnAchTransfer operation.
     * @callback module:api/DefaultApi~approveAnAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve an ACH Transfer
     * Approves an ACH Transfer in a pending_approval state.
     * @param {String} achTransferId 
     * @param {module:api/DefaultApi~approveAnAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    approveAnAchTransfer(achTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'achTransferId' is set
      if (achTransferId === undefined || achTransferId === null) {
        throw new Error("Missing the required parameter 'achTransferId' when calling approveAnAchTransfer");
      }

      let pathParams = {
        'ach_transfer_id': achTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/ach_transfers/{ach_transfer_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAPendingAchTransfer operation.
     * @callback module:api/DefaultApi~cancelAPendingAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a pending ACH Transfer
     * Cancels an ACH Transfer in a pending_approval state.
     * @param {String} achTransferId 
     * @param {module:api/DefaultApi~cancelAPendingAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    cancelAPendingAchTransfer(achTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'achTransferId' is set
      if (achTransferId === undefined || achTransferId === null) {
        throw new Error("Missing the required parameter 'achTransferId' when calling cancelAPendingAchTransfer");
      }

      let pathParams = {
        'ach_transfer_id': achTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/ach_transfers/{ach_transfer_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAPendingCheckTransfer operation.
     * @callback module:api/DefaultApi~cancelAPendingCheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a pending Check Transfer
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~cancelAPendingCheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    cancelAPendingCheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling cancelAPendingCheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/check_transfers/{check_transfer_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAPendingWireTransfer operation.
     * @callback module:api/DefaultApi~cancelAPendingWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a pending Wire Transfer
     * @param {String} wireTransferId 
     * @param {module:api/DefaultApi~cancelAPendingWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    cancelAPendingWireTransfer(wireTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'wireTransferId' is set
      if (wireTransferId === undefined || wireTransferId === null) {
        throw new Error("Missing the required parameter 'wireTransferId' when calling cancelAPendingWireTransfer");
      }

      let pathParams = {
        'wire_transfer_id': wireTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/wire_transfers/{wire_transfer_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAnAccountTransfer operation.
     * @callback module:api/DefaultApi~cancelAnAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an Account Transfer
     * @param {String} accountTransferId 
     * @param {module:api/DefaultApi~cancelAnAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransfer}
     */
    cancelAnAccountTransfer(accountTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'accountTransferId' is set
      if (accountTransferId === undefined || accountTransferId === null) {
        throw new Error("Missing the required parameter 'accountTransferId' when calling cancelAnAccountTransfer");
      }

      let pathParams = {
        'account_transfer_id': accountTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountTransfer;
      return this.apiClient.callApi(
        '/account_transfers/{account_transfer_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeAnAccount operation.
     * @callback module:api/DefaultApi~closeAnAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close an Account
     * @param {String} accountId 
     * @param {module:api/DefaultApi~closeAnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    closeAnAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling closeAnAccount");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{account_id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeASandboxAccountTransfer operation.
     * @callback module:api/DefaultApi~completeASandboxAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a Sandbox Account Transfer
     * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a `status` of `pending_approval`.
     * @param {String} accountTransferId 
     * @param {module:api/DefaultApi~completeASandboxAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransfer}
     */
    completeASandboxAccountTransfer(accountTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'accountTransferId' is set
      if (accountTransferId === undefined || accountTransferId === null) {
        throw new Error("Missing the required parameter 'accountTransferId' when calling completeASandboxAccountTransfer");
      }

      let pathParams = {
        'account_transfer_id': accountTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountTransfer;
      return this.apiClient.callApi(
        '/simulations/account_transfers/{account_transfer_id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeASandboxRealTimePaymentsTransfer operation.
     * @callback module:api/DefaultApi~completeASandboxRealTimePaymentsTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimePaymentsTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a Sandbox Real Time Payments Transfer
     * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a `status` of `pending_submission`.
     * @param {String} realTimePaymentsTransferId 
     * @param {module:model/CompleteASandboxRealTimePaymentsTransferParameters} completeASandboxRealTimePaymentsTransferParameters 
     * @param {module:api/DefaultApi~completeASandboxRealTimePaymentsTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimePaymentsTransfer}
     */
    completeASandboxRealTimePaymentsTransfer(realTimePaymentsTransferId, completeASandboxRealTimePaymentsTransferParameters, callback) {
      let postBody = completeASandboxRealTimePaymentsTransferParameters;
      // verify the required parameter 'realTimePaymentsTransferId' is set
      if (realTimePaymentsTransferId === undefined || realTimePaymentsTransferId === null) {
        throw new Error("Missing the required parameter 'realTimePaymentsTransferId' when calling completeASandboxRealTimePaymentsTransfer");
      }
      // verify the required parameter 'completeASandboxRealTimePaymentsTransferParameters' is set
      if (completeASandboxRealTimePaymentsTransferParameters === undefined || completeASandboxRealTimePaymentsTransferParameters === null) {
        throw new Error("Missing the required parameter 'completeASandboxRealTimePaymentsTransferParameters' when calling completeASandboxRealTimePaymentsTransfer");
      }

      let pathParams = {
        'real_time_payments_transfer_id': realTimePaymentsTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RealTimePaymentsTransfer;
      return this.apiClient.callApi(
        '/simulations/real_time_payments_transfers/{real_time_payments_transfer_id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createABookkeepingAccount operation.
     * @callback module:api/DefaultApi~createABookkeepingAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookkeepingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Bookkeeping Account
     * @param {module:model/CreateABookkeepingAccountParameters} createABookkeepingAccountParameters 
     * @param {module:api/DefaultApi~createABookkeepingAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookkeepingAccount}
     */
    createABookkeepingAccount(createABookkeepingAccountParameters, callback) {
      let postBody = createABookkeepingAccountParameters;
      // verify the required parameter 'createABookkeepingAccountParameters' is set
      if (createABookkeepingAccountParameters === undefined || createABookkeepingAccountParameters === null) {
        throw new Error("Missing the required parameter 'createABookkeepingAccountParameters' when calling createABookkeepingAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BookkeepingAccount;
      return this.apiClient.callApi(
        '/bookkeeping_accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createABookkeepingEntrySet operation.
     * @callback module:api/DefaultApi~createABookkeepingEntrySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookkeepingEntrySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Bookkeeping Entry Set
     * @param {module:model/CreateABookkeepingEntrySetParameters} createABookkeepingEntrySetParameters 
     * @param {module:api/DefaultApi~createABookkeepingEntrySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookkeepingEntrySet}
     */
    createABookkeepingEntrySet(createABookkeepingEntrySetParameters, callback) {
      let postBody = createABookkeepingEntrySetParameters;
      // verify the required parameter 'createABookkeepingEntrySetParameters' is set
      if (createABookkeepingEntrySetParameters === undefined || createABookkeepingEntrySetParameters === null) {
        throw new Error("Missing the required parameter 'createABookkeepingEntrySetParameters' when calling createABookkeepingEntrySet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BookkeepingEntrySet;
      return this.apiClient.callApi(
        '/bookkeeping_entry_sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACard operation.
     * @callback module:api/DefaultApi~createACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Card
     * @param {module:model/CreateACardParameters} createACardParameters 
     * @param {module:api/DefaultApi~createACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    createACard(createACardParameters, callback) {
      let postBody = createACardParameters;
      // verify the required parameter 'createACardParameters' is set
      if (createACardParameters === undefined || createACardParameters === null) {
        throw new Error("Missing the required parameter 'createACardParameters' when calling createACard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACardDispute operation.
     * @callback module:api/DefaultApi~createACardDisputeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDispute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Card Dispute
     * @param {module:model/CreateACardDisputeParameters} createACardDisputeParameters 
     * @param {module:api/DefaultApi~createACardDisputeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDispute}
     */
    createACardDispute(createACardDisputeParameters, callback) {
      let postBody = createACardDisputeParameters;
      // verify the required parameter 'createACardDisputeParameters' is set
      if (createACardDisputeParameters === undefined || createACardDisputeParameters === null) {
        throw new Error("Missing the required parameter 'createACardDisputeParameters' when calling createACardDispute");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardDispute;
      return this.apiClient.callApi(
        '/card_disputes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACardProfile operation.
     * @callback module:api/DefaultApi~createACardProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Card Profile
     * @param {module:model/CreateACardProfileParameters} createACardProfileParameters 
     * @param {module:api/DefaultApi~createACardProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardProfile}
     */
    createACardProfile(createACardProfileParameters, callback) {
      let postBody = createACardProfileParameters;
      // verify the required parameter 'createACardProfileParameters' is set
      if (createACardProfileParameters === undefined || createACardProfileParameters === null) {
        throw new Error("Missing the required parameter 'createACardProfileParameters' when calling createACardProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardProfile;
      return this.apiClient.callApi(
        '/card_profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACheckDeposit operation.
     * @callback module:api/DefaultApi~createACheckDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Check Deposit
     * @param {module:model/CreateACheckDepositParameters} createACheckDepositParameters 
     * @param {module:api/DefaultApi~createACheckDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDeposit}
     */
    createACheckDeposit(createACheckDepositParameters, callback) {
      let postBody = createACheckDepositParameters;
      // verify the required parameter 'createACheckDepositParameters' is set
      if (createACheckDepositParameters === undefined || createACheckDepositParameters === null) {
        throw new Error("Missing the required parameter 'createACheckDepositParameters' when calling createACheckDeposit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckDeposit;
      return this.apiClient.callApi(
        '/check_deposits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createACheckTransfer operation.
     * @callback module:api/DefaultApi~createACheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Check Transfer
     * @param {module:model/CreateACheckTransferParameters} createACheckTransferParameters 
     * @param {module:api/DefaultApi~createACheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    createACheckTransfer(createACheckTransferParameters, callback) {
      let postBody = createACheckTransferParameters;
      // verify the required parameter 'createACheckTransferParameters' is set
      if (createACheckTransferParameters === undefined || createACheckTransferParameters === null) {
        throw new Error("Missing the required parameter 'createACheckTransferParameters' when calling createACheckTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/check_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAFile operation.
     * @callback module:api/DefaultApi~createAFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a File
     * To upload a file to Increase, you'll need to send a request of Content-Type `multipart/form-data`. The request should contain the file you would like to upload, as well as the parameters for creating a file.
     * @param {File} file The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.
     * @param {module:model/String} purpose What the File will be used for in Increase's systems.
     * @param {Object} opts Optional parameters
     * @param {String} [description] The description you choose to give the File.
     * @param {module:api/DefaultApi~createAFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    createAFile(file, purpose, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createAFile");
      }
      // verify the required parameter 'purpose' is set
      if (purpose === undefined || purpose === null) {
        throw new Error("Missing the required parameter 'purpose' when calling createAFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'file': file,
        'purpose': purpose
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createALimit operation.
     * @callback module:api/DefaultApi~createALimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Limit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Limit
     * @param {module:model/CreateALimitParameters} createALimitParameters 
     * @param {module:api/DefaultApi~createALimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Limit}
     */
    createALimit(createALimitParameters, callback) {
      let postBody = createALimitParameters;
      // verify the required parameter 'createALimitParameters' is set
      if (createALimitParameters === undefined || createALimitParameters === null) {
        throw new Error("Missing the required parameter 'createALimitParameters' when calling createALimit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Limit;
      return this.apiClient.callApi(
        '/limits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createARealTimePaymentsTransfer operation.
     * @callback module:api/DefaultApi~createARealTimePaymentsTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimePaymentsTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Real Time Payments Transfer
     * @param {module:model/CreateARealTimePaymentsTransferParameters} createARealTimePaymentsTransferParameters 
     * @param {module:api/DefaultApi~createARealTimePaymentsTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimePaymentsTransfer}
     */
    createARealTimePaymentsTransfer(createARealTimePaymentsTransferParameters, callback) {
      let postBody = createARealTimePaymentsTransferParameters;
      // verify the required parameter 'createARealTimePaymentsTransferParameters' is set
      if (createARealTimePaymentsTransferParameters === undefined || createARealTimePaymentsTransferParameters === null) {
        throw new Error("Missing the required parameter 'createARealTimePaymentsTransferParameters' when calling createARealTimePaymentsTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RealTimePaymentsTransfer;
      return this.apiClient.callApi(
        '/real_time_payments_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createASupplementalDocumentForAnEntity operation.
     * @callback module:api/DefaultApi~createASupplementalDocumentForAnEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a supplemental document for an Entity
     * @param {String} entityId 
     * @param {module:model/CreateASupplementalDocumentForAnEntityParameters} createASupplementalDocumentForAnEntityParameters 
     * @param {module:api/DefaultApi~createASupplementalDocumentForAnEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entity}
     */
    createASupplementalDocumentForAnEntity(entityId, createASupplementalDocumentForAnEntityParameters, callback) {
      let postBody = createASupplementalDocumentForAnEntityParameters;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling createASupplementalDocumentForAnEntity");
      }
      // verify the required parameter 'createASupplementalDocumentForAnEntityParameters' is set
      if (createASupplementalDocumentForAnEntityParameters === undefined || createASupplementalDocumentForAnEntityParameters === null) {
        throw new Error("Missing the required parameter 'createASupplementalDocumentForAnEntityParameters' when calling createASupplementalDocumentForAnEntity");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Entity;
      return this.apiClient.callApi(
        '/entities/{entity_id}/supplemental_documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAWireDrawdownRequest operation.
     * @callback module:api/DefaultApi~createAWireDrawdownRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireDrawdownRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Wire Drawdown Request
     * @param {module:model/CreateAWireDrawdownRequestParameters} createAWireDrawdownRequestParameters 
     * @param {module:api/DefaultApi~createAWireDrawdownRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireDrawdownRequest}
     */
    createAWireDrawdownRequest(createAWireDrawdownRequestParameters, callback) {
      let postBody = createAWireDrawdownRequestParameters;
      // verify the required parameter 'createAWireDrawdownRequestParameters' is set
      if (createAWireDrawdownRequestParameters === undefined || createAWireDrawdownRequestParameters === null) {
        throw new Error("Missing the required parameter 'createAWireDrawdownRequestParameters' when calling createAWireDrawdownRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WireDrawdownRequest;
      return this.apiClient.callApi(
        '/wire_drawdown_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAWireTransfer operation.
     * @callback module:api/DefaultApi~createAWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Wire Transfer
     * @param {module:model/CreateAWireTransferParameters} createAWireTransferParameters 
     * @param {module:api/DefaultApi~createAWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    createAWireTransfer(createAWireTransferParameters, callback) {
      let postBody = createAWireTransferParameters;
      // verify the required parameter 'createAWireTransferParameters' is set
      if (createAWireTransferParameters === undefined || createAWireTransferParameters === null) {
        throw new Error("Missing the required parameter 'createAWireTransferParameters' when calling createAWireTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/wire_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAccount operation.
     * @callback module:api/DefaultApi~createAnAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Account
     * @param {module:model/CreateAnAccountParameters} createAnAccountParameters 
     * @param {module:api/DefaultApi~createAnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    createAnAccount(createAnAccountParameters, callback) {
      let postBody = createAnAccountParameters;
      // verify the required parameter 'createAnAccountParameters' is set
      if (createAnAccountParameters === undefined || createAnAccountParameters === null) {
        throw new Error("Missing the required parameter 'createAnAccountParameters' when calling createAnAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAccountNumber operation.
     * @callback module:api/DefaultApi~createAnAccountNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Account Number
     * @param {module:model/CreateAnAccountNumberParameters} createAnAccountNumberParameters 
     * @param {module:api/DefaultApi~createAnAccountNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountNumber}
     */
    createAnAccountNumber(createAnAccountNumberParameters, callback) {
      let postBody = createAnAccountNumberParameters;
      // verify the required parameter 'createAnAccountNumberParameters' is set
      if (createAnAccountNumberParameters === undefined || createAnAccountNumberParameters === null) {
        throw new Error("Missing the required parameter 'createAnAccountNumberParameters' when calling createAnAccountNumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountNumber;
      return this.apiClient.callApi(
        '/account_numbers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAccountTransfer operation.
     * @callback module:api/DefaultApi~createAnAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Account Transfer
     * @param {module:model/CreateAnAccountTransferParameters} createAnAccountTransferParameters 
     * @param {module:api/DefaultApi~createAnAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransfer}
     */
    createAnAccountTransfer(createAnAccountTransferParameters, callback) {
      let postBody = createAnAccountTransferParameters;
      // verify the required parameter 'createAnAccountTransferParameters' is set
      if (createAnAccountTransferParameters === undefined || createAnAccountTransferParameters === null) {
        throw new Error("Missing the required parameter 'createAnAccountTransferParameters' when calling createAnAccountTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountTransfer;
      return this.apiClient.callApi(
        '/account_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAchPrenotification operation.
     * @callback module:api/DefaultApi~createAnAchPrenotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchPrenotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ACH Prenotification
     * @param {module:model/CreateAnAchPrenotificationParameters} createAnAchPrenotificationParameters 
     * @param {module:api/DefaultApi~createAnAchPrenotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchPrenotification}
     */
    createAnAchPrenotification(createAnAchPrenotificationParameters, callback) {
      let postBody = createAnAchPrenotificationParameters;
      // verify the required parameter 'createAnAchPrenotificationParameters' is set
      if (createAnAchPrenotificationParameters === undefined || createAnAchPrenotificationParameters === null) {
        throw new Error("Missing the required parameter 'createAnAchPrenotificationParameters' when calling createAnAchPrenotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchPrenotification;
      return this.apiClient.callApi(
        '/ach_prenotifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAchReturn operation.
     * @callback module:api/DefaultApi~createAnAchReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundAchTransferReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ACH Return
     * @param {module:model/CreateAnAchReturnParameters} createAnAchReturnParameters 
     * @param {module:api/DefaultApi~createAnAchReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundAchTransferReturn}
     */
    createAnAchReturn(createAnAchReturnParameters, callback) {
      let postBody = createAnAchReturnParameters;
      // verify the required parameter 'createAnAchReturnParameters' is set
      if (createAnAchReturnParameters === undefined || createAnAchReturnParameters === null) {
        throw new Error("Missing the required parameter 'createAnAchReturnParameters' when calling createAnAchReturn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundAchTransferReturn;
      return this.apiClient.callApi(
        '/inbound_ach_transfer_returns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnAchTransfer operation.
     * @callback module:api/DefaultApi~createAnAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ACH Transfer
     * @param {module:model/CreateAnAchTransferParameters} createAnAchTransferParameters 
     * @param {module:api/DefaultApi~createAnAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    createAnAchTransfer(createAnAchTransferParameters, callback) {
      let postBody = createAnAchTransferParameters;
      // verify the required parameter 'createAnAchTransferParameters' is set
      if (createAnAchTransferParameters === undefined || createAnAchTransferParameters === null) {
        throw new Error("Missing the required parameter 'createAnAchTransferParameters' when calling createAnAchTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/ach_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnEntity operation.
     * @callback module:api/DefaultApi~createAnEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Entity
     * @param {module:model/CreateAnEntityParameters} createAnEntityParameters 
     * @param {module:api/DefaultApi~createAnEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entity}
     */
    createAnEntity(createAnEntityParameters, callback) {
      let postBody = createAnEntityParameters;
      // verify the required parameter 'createAnEntityParameters' is set
      if (createAnEntityParameters === undefined || createAnEntityParameters === null) {
        throw new Error("Missing the required parameter 'createAnEntityParameters' when calling createAnEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Entity;
      return this.apiClient.callApi(
        '/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnEventSubscription operation.
     * @callback module:api/DefaultApi~createAnEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Event Subscription
     * @param {module:model/CreateAnEventSubscriptionParameters} createAnEventSubscriptionParameters 
     * @param {module:api/DefaultApi~createAnEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    createAnEventSubscription(createAnEventSubscriptionParameters, callback) {
      let postBody = createAnEventSubscriptionParameters;
      // verify the required parameter 'createAnEventSubscriptionParameters' is set
      if (createAnEventSubscriptionParameters === undefined || createAnEventSubscriptionParameters === null) {
        throw new Error("Missing the required parameter 'createAnEventSubscriptionParameters' when calling createAnEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/event_subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnExport operation.
     * @callback module:api/DefaultApi~createAnExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Export} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Export
     * @param {module:model/CreateAnExportParameters} createAnExportParameters 
     * @param {module:api/DefaultApi~createAnExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Export}
     */
    createAnExport(createAnExportParameters, callback) {
      let postBody = createAnExportParameters;
      // verify the required parameter 'createAnExportParameters' is set
      if (createAnExportParameters === undefined || createAnExportParameters === null) {
        throw new Error("Missing the required parameter 'createAnExportParameters' when calling createAnExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Export;
      return this.apiClient.callApi(
        '/exports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnExternalAccount operation.
     * @callback module:api/DefaultApi~createAnExternalAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an External Account
     * @param {module:model/CreateAnExternalAccountParameters} createAnExternalAccountParameters 
     * @param {module:api/DefaultApi~createAnExternalAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccount}
     */
    createAnExternalAccount(createAnExternalAccountParameters, callback) {
      let postBody = createAnExternalAccountParameters;
      // verify the required parameter 'createAnExternalAccountParameters' is set
      if (createAnExternalAccountParameters === undefined || createAnExternalAccountParameters === null) {
        throw new Error("Missing the required parameter 'createAnExternalAccountParameters' when calling createAnExternalAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExternalAccount;
      return this.apiClient.callApi(
        '/external_accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depositASandboxCheckTransfer operation.
     * @callback module:api/DefaultApi~depositASandboxCheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deposit a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a `status` of `mailed`.
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~depositASandboxCheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    depositASandboxCheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling depositASandboxCheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/simulations/check_transfers/{check_transfer_id}/deposit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountNumbers operation.
     * @callback module:api/DefaultApi~listAccountNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountNumberList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Account Numbers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:model/String} [status] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listAccountNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountNumberList}
     */
    listAccountNumbers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'status': opts['status'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountNumberList;
      return this.apiClient.callApi(
        '/account_numbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountStatements operation.
     * @callback module:api/DefaultApi~listAccountStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatementList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Account Statements
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [statementPeriodStartAfter] 
     * @param {Date} [statementPeriodStartBefore] 
     * @param {Date} [statementPeriodStartOnOrAfter] 
     * @param {Date} [statementPeriodStartOnOrBefore] 
     * @param {module:api/DefaultApi~listAccountStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatementList}
     */
    listAccountStatements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'statement_period_start.after': opts['statementPeriodStartAfter'],
        'statement_period_start.before': opts['statementPeriodStartBefore'],
        'statement_period_start.on_or_after': opts['statementPeriodStartOnOrAfter'],
        'statement_period_start.on_or_before': opts['statementPeriodStartOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountStatementList;
      return this.apiClient.callApi(
        '/account_statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountTransfers operation.
     * @callback module:api/DefaultApi~listAccountTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Account Transfers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listAccountTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransferList}
     */
    listAccountTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountTransferList;
      return this.apiClient.callApi(
        '/account_transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccounts operation.
     * @callback module:api/DefaultApi~listAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Accounts
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [entityId] 
     * @param {module:model/String} [status] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountList}
     */
    listAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'entity_id': opts['entityId'],
        'status': opts['status'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountList;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAchPrenotifications operation.
     * @callback module:api/DefaultApi~listAchPrenotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchPrenotificationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ACH Prenotifications
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listAchPrenotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchPrenotificationList}
     */
    listAchPrenotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchPrenotificationList;
      return this.apiClient.callApi(
        '/ach_prenotifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAchTransfers operation.
     * @callback module:api/DefaultApi~listAchTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ACH Transfers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {String} [externalAccountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listAchTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransferList}
     */
    listAchTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'external_account_id': opts['externalAccountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchTransferList;
      return this.apiClient.callApi(
        '/ach_transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookkeepingAccounts operation.
     * @callback module:api/DefaultApi~listBookkeepingAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookkeepingAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Bookkeeping Accounts
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listBookkeepingAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookkeepingAccountList}
     */
    listBookkeepingAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BookkeepingAccountList;
      return this.apiClient.callApi(
        '/bookkeeping_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookkeepingEntries operation.
     * @callback module:api/DefaultApi~listBookkeepingEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookkeepingEntryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Bookkeeping Entries
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listBookkeepingEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookkeepingEntryList}
     */
    listBookkeepingEntries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BookkeepingEntryList;
      return this.apiClient.callApi(
        '/bookkeeping_entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCardDisputes operation.
     * @callback module:api/DefaultApi~listCardDisputesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDisputeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Card Disputes
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {Array.<module:model/String>} [statusIn] 
     * @param {module:api/DefaultApi~listCardDisputesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDisputeList}
     */
    listCardDisputes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore'],
        'status.in': this.apiClient.buildCollectionParam(opts['statusIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardDisputeList;
      return this.apiClient.callApi(
        '/card_disputes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCardProfiles operation.
     * @callback module:api/DefaultApi~listCardProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardProfileList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Card Profiles
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Array.<module:model/String>} [statusIn] 
     * @param {module:api/DefaultApi~listCardProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardProfileList}
     */
    listCardProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'status.in': this.apiClient.buildCollectionParam(opts['statusIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardProfileList;
      return this.apiClient.callApi(
        '/card_profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCards operation.
     * @callback module:api/DefaultApi~listCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Cards
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardList}
     */
    listCards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardList;
      return this.apiClient.callApi(
        '/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCheckDeposits operation.
     * @callback module:api/DefaultApi~listCheckDepositsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDepositList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Check Deposits
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listCheckDepositsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDepositList}
     */
    listCheckDeposits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDepositList;
      return this.apiClient.callApi(
        '/check_deposits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCheckTransfers operation.
     * @callback module:api/DefaultApi~listCheckTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Check Transfers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listCheckTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransferList}
     */
    listCheckTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransferList;
      return this.apiClient.callApi(
        '/check_transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeclinedTransactions operation.
     * @callback module:api/DefaultApi~listDeclinedTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeclinedTransactionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Declined Transactions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {String} [routeId] 
     * @param {module:api/DefaultApi~listDeclinedTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeclinedTransactionList}
     */
    listDeclinedTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore'],
        'route_id': opts['routeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeclinedTransactionList;
      return this.apiClient.callApi(
        '/declined_transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDigitalWalletTokens operation.
     * @callback module:api/DefaultApi~listDigitalWalletTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalWalletTokenList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Digital Wallet Tokens
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [cardId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listDigitalWalletTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalWalletTokenList}
     */
    listDigitalWalletTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'card_id': opts['cardId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalWalletTokenList;
      return this.apiClient.callApi(
        '/digital_wallet_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDocuments operation.
     * @callback module:api/DefaultApi~listDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Documents
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [entityId] 
     * @param {Array.<module:model/String>} [categoryIn] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    listDocuments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'entity_id': opts['entityId'],
        'category.in': this.apiClient.buildCollectionParam(opts['categoryIn'], 'multi'),
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntities operation.
     * @callback module:api/DefaultApi~listEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Entities
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityList}
     */
    listEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityList;
      return this.apiClient.callApi(
        '/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventSubscriptions operation.
     * @callback module:api/DefaultApi~listEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Event Subscriptions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionList}
     */
    listEventSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionList;
      return this.apiClient.callApi(
        '/event_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvents operation.
     * @callback module:api/DefaultApi~listEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Events
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {Array.<module:model/String>} [categoryIn] 
     * @param {String} [associatedObjectId] 
     * @param {module:api/DefaultApi~listEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventList}
     */
    listEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore'],
        'category.in': this.apiClient.buildCollectionParam(opts['categoryIn'], 'multi'),
        'associated_object_id': opts['associatedObjectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventList;
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExports operation.
     * @callback module:api/DefaultApi~listExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Exports
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportList}
     */
    listExports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportList;
      return this.apiClient.callApi(
        '/exports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExternalAccounts operation.
     * @callback module:api/DefaultApi~listExternalAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List External Accounts
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Array.<module:model/String>} [statusIn] 
     * @param {module:api/DefaultApi~listExternalAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountList}
     */
    listExternalAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'status.in': this.apiClient.buildCollectionParam(opts['statusIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExternalAccountList;
      return this.apiClient.callApi(
        '/external_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFiles operation.
     * @callback module:api/DefaultApi~listFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Files
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {Array.<module:model/String>} [purposeIn] 
     * @param {module:api/DefaultApi~listFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileList}
     */
    listFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore'],
        'purpose.in': this.apiClient.buildCollectionParam(opts['purposeIn'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileList;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInboundAchTransferReturns operation.
     * @callback module:api/DefaultApi~listInboundAchTransferReturnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundAchTransferReturnList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Inbound ACH Transfer Returns
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listInboundAchTransferReturnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundAchTransferReturnList}
     */
    listInboundAchTransferReturns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundAchTransferReturnList;
      return this.apiClient.callApi(
        '/inbound_ach_transfer_returns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInboundWireDrawdownRequests operation.
     * @callback module:api/DefaultApi~listInboundWireDrawdownRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundWireDrawdownRequestList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Inbound Wire Drawdown Requests
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listInboundWireDrawdownRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundWireDrawdownRequestList}
     */
    listInboundWireDrawdownRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundWireDrawdownRequestList;
      return this.apiClient.callApi(
        '/inbound_wire_drawdown_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLimits operation.
     * @callback module:api/DefaultApi~listLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LimitList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Limits
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [modelId] 
     * @param {String} [status] 
     * @param {module:api/DefaultApi~listLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LimitList}
     */
    listLimits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'model_id': opts['modelId'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LimitList;
      return this.apiClient.callApi(
        '/limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOauthConnections operation.
     * @callback module:api/DefaultApi~listOauthConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OauthConnectionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List OAuth Connections
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listOauthConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OauthConnectionList}
     */
    listOauthConnections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OauthConnectionList;
      return this.apiClient.callApi(
        '/oauth_connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPendingTransactions operation.
     * @callback module:api/DefaultApi~listPendingTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTransactionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pending Transactions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {String} [routeId] 
     * @param {String} [sourceId] 
     * @param {Array.<module:model/String>} [statusIn] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listPendingTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTransactionList}
     */
    listPendingTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'route_id': opts['routeId'],
        'source_id': opts['sourceId'],
        'status.in': this.apiClient.buildCollectionParam(opts['statusIn'], 'multi'),
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PendingTransactionList;
      return this.apiClient.callApi(
        '/pending_transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrograms operation.
     * @callback module:api/DefaultApi~listProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProgramList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Programs
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProgramList}
     */
    listPrograms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgramList;
      return this.apiClient.callApi(
        '/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRealTimePaymentsTransfers operation.
     * @callback module:api/DefaultApi~listRealTimePaymentsTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimePaymentsTransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Real Time Payments Transfers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {String} [externalAccountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listRealTimePaymentsTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimePaymentsTransferList}
     */
    listRealTimePaymentsTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'external_account_id': opts['externalAccountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealTimePaymentsTransferList;
      return this.apiClient.callApi(
        '/real_time_payments_transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutingNumbers operation.
     * @callback module:api/DefaultApi~listRoutingNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingNumberList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Routing Numbers
     * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
     * @param {String} routingNumber 
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listRoutingNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingNumberList}
     */
    listRoutingNumbers(routingNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'routingNumber' is set
      if (routingNumber === undefined || routingNumber === null) {
        throw new Error("Missing the required parameter 'routingNumber' when calling listRoutingNumbers");
      }

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'routing_number': routingNumber
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoutingNumberList;
      return this.apiClient.callApi(
        '/routing_numbers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/DefaultApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Transactions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {Array.<module:model/String>} [categoryIn] 
     * @param {String} [routeId] 
     * @param {module:api/DefaultApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionList}
     */
    listTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore'],
        'category.in': this.apiClient.buildCollectionParam(opts['categoryIn'], 'multi'),
        'route_id': opts['routeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionList;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWireDrawdownRequests operation.
     * @callback module:api/DefaultApi~listWireDrawdownRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireDrawdownRequestList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Wire Drawdown Requests
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/DefaultApi~listWireDrawdownRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireDrawdownRequestList}
     */
    listWireDrawdownRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireDrawdownRequestList;
      return this.apiClient.callApi(
        '/wire_drawdown_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWireTransfers operation.
     * @callback module:api/DefaultApi~listWireTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransferList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Wire Transfers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {String} [accountId] 
     * @param {String} [externalAccountId] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBefore] 
     * @param {Date} [createdAtOnOrAfter] 
     * @param {Date} [createdAtOnOrBefore] 
     * @param {module:api/DefaultApi~listWireTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransferList}
     */
    listWireTransfers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'account_id': opts['accountId'],
        'external_account_id': opts['externalAccountId'],
        'created_at.after': opts['createdAtAfter'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.on_or_after': opts['createdAtOnOrAfter'],
        'created_at.on_or_before': opts['createdAtOnOrBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransferList;
      return this.apiClient.callApi(
        '/wire_transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lookUpTheBalanceForAnAccount operation.
     * @callback module:api/DefaultApi~lookUpTheBalanceForAnAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BalanceLookup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Look up the balance for an Account
     * @param {module:model/LookUpTheBalanceForAnAccountParameters} lookUpTheBalanceForAnAccountParameters 
     * @param {module:api/DefaultApi~lookUpTheBalanceForAnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BalanceLookup}
     */
    lookUpTheBalanceForAnAccount(lookUpTheBalanceForAnAccountParameters, callback) {
      let postBody = lookUpTheBalanceForAnAccountParameters;
      // verify the required parameter 'lookUpTheBalanceForAnAccountParameters' is set
      if (lookUpTheBalanceForAnAccountParameters === undefined || lookUpTheBalanceForAnAccountParameters === null) {
        throw new Error("Missing the required parameter 'lookUpTheBalanceForAnAccountParameters' when calling lookUpTheBalanceForAnAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BalanceLookup;
      return this.apiClient.callApi(
        '/balance_lookups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailASandboxCheckTransfer operation.
     * @callback module:api/DefaultApi~mailASandboxCheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mail a Sandbox Check Transfer
     * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a `status` of `pending_approval` or `pending_submission`.
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~mailASandboxCheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    mailASandboxCheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling mailASandboxCheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/simulations/check_transfers/{check_transfer_id}/mail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectASandboxCheckDeposit operation.
     * @callback module:api/DefaultApi~rejectASandboxCheckDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject a Sandbox Check Deposit
     * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a `status` of `pending`.
     * @param {String} checkDepositId 
     * @param {module:api/DefaultApi~rejectASandboxCheckDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDeposit}
     */
    rejectASandboxCheckDeposit(checkDepositId, callback) {
      let postBody = null;
      // verify the required parameter 'checkDepositId' is set
      if (checkDepositId === undefined || checkDepositId === null) {
        throw new Error("Missing the required parameter 'checkDepositId' when calling rejectASandboxCheckDeposit");
      }

      let pathParams = {
        'check_deposit_id': checkDepositId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDeposit;
      return this.apiClient.callApi(
        '/simulations/check_deposits/{check_deposit_id}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAStopPaymentOnACheckTransfer operation.
     * @callback module:api/DefaultApi~requestAStopPaymentOnACheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a stop payment on a Check Transfer
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~requestAStopPaymentOnACheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    requestAStopPaymentOnACheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling requestAStopPaymentOnACheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/check_transfers/{check_transfer_id}/stop_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACard operation.
     * @callback module:api/DefaultApi~retrieveACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Card
     * @param {String} cardId 
     * @param {module:api/DefaultApi~retrieveACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    retrieveACard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling retrieveACard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/cards/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACardDispute operation.
     * @callback module:api/DefaultApi~retrieveACardDisputeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDispute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Card Dispute
     * @param {String} cardDisputeId 
     * @param {module:api/DefaultApi~retrieveACardDisputeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDispute}
     */
    retrieveACardDispute(cardDisputeId, callback) {
      let postBody = null;
      // verify the required parameter 'cardDisputeId' is set
      if (cardDisputeId === undefined || cardDisputeId === null) {
        throw new Error("Missing the required parameter 'cardDisputeId' when calling retrieveACardDispute");
      }

      let pathParams = {
        'card_dispute_id': cardDisputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardDispute;
      return this.apiClient.callApi(
        '/card_disputes/{card_dispute_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACardProfile operation.
     * @callback module:api/DefaultApi~retrieveACardProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Card Profile
     * @param {String} cardProfileId 
     * @param {module:api/DefaultApi~retrieveACardProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardProfile}
     */
    retrieveACardProfile(cardProfileId, callback) {
      let postBody = null;
      // verify the required parameter 'cardProfileId' is set
      if (cardProfileId === undefined || cardProfileId === null) {
        throw new Error("Missing the required parameter 'cardProfileId' when calling retrieveACardProfile");
      }

      let pathParams = {
        'card_profile_id': cardProfileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardProfile;
      return this.apiClient.callApi(
        '/card_profiles/{card_profile_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACheckDeposit operation.
     * @callback module:api/DefaultApi~retrieveACheckDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Check Deposit
     * @param {String} checkDepositId 
     * @param {module:api/DefaultApi~retrieveACheckDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDeposit}
     */
    retrieveACheckDeposit(checkDepositId, callback) {
      let postBody = null;
      // verify the required parameter 'checkDepositId' is set
      if (checkDepositId === undefined || checkDepositId === null) {
        throw new Error("Missing the required parameter 'checkDepositId' when calling retrieveACheckDeposit");
      }

      let pathParams = {
        'check_deposit_id': checkDepositId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDeposit;
      return this.apiClient.callApi(
        '/check_deposits/{check_deposit_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveACheckTransfer operation.
     * @callback module:api/DefaultApi~retrieveACheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Check Transfer
     * @param {String} checkTransferId 
     * @param {module:api/DefaultApi~retrieveACheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    retrieveACheckTransfer(checkTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling retrieveACheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/check_transfers/{check_transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveADeclinedTransaction operation.
     * @callback module:api/DefaultApi~retrieveADeclinedTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeclinedTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Declined Transaction
     * @param {String} declinedTransactionId 
     * @param {module:api/DefaultApi~retrieveADeclinedTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeclinedTransaction}
     */
    retrieveADeclinedTransaction(declinedTransactionId, callback) {
      let postBody = null;
      // verify the required parameter 'declinedTransactionId' is set
      if (declinedTransactionId === undefined || declinedTransactionId === null) {
        throw new Error("Missing the required parameter 'declinedTransactionId' when calling retrieveADeclinedTransaction");
      }

      let pathParams = {
        'declined_transaction_id': declinedTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeclinedTransaction;
      return this.apiClient.callApi(
        '/declined_transactions/{declined_transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveADigitalWalletToken operation.
     * @callback module:api/DefaultApi~retrieveADigitalWalletTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigitalWalletToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Digital Wallet Token
     * @param {String} digitalWalletTokenId 
     * @param {module:api/DefaultApi~retrieveADigitalWalletTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigitalWalletToken}
     */
    retrieveADigitalWalletToken(digitalWalletTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'digitalWalletTokenId' is set
      if (digitalWalletTokenId === undefined || digitalWalletTokenId === null) {
        throw new Error("Missing the required parameter 'digitalWalletTokenId' when calling retrieveADigitalWalletToken");
      }

      let pathParams = {
        'digital_wallet_token_id': digitalWalletTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalWalletToken;
      return this.apiClient.callApi(
        '/digital_wallet_tokens/{digital_wallet_token_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveADocument operation.
     * @callback module:api/DefaultApi~retrieveADocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Document
     * @param {String} documentId 
     * @param {module:api/DefaultApi~retrieveADocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    retrieveADocument(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling retrieveADocument");
      }

      let pathParams = {
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAFile operation.
     * @callback module:api/DefaultApi~retrieveAFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a File
     * @param {String} fileId 
     * @param {module:api/DefaultApi~retrieveAFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    retrieveAFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling retrieveAFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveALimit operation.
     * @callback module:api/DefaultApi~retrieveALimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Limit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Limit
     * @param {String} limitId 
     * @param {module:api/DefaultApi~retrieveALimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Limit}
     */
    retrieveALimit(limitId, callback) {
      let postBody = null;
      // verify the required parameter 'limitId' is set
      if (limitId === undefined || limitId === null) {
        throw new Error("Missing the required parameter 'limitId' when calling retrieveALimit");
      }

      let pathParams = {
        'limit_id': limitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Limit;
      return this.apiClient.callApi(
        '/limits/{limit_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAPendingTransaction operation.
     * @callback module:api/DefaultApi~retrieveAPendingTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Pending Transaction
     * @param {String} pendingTransactionId 
     * @param {module:api/DefaultApi~retrieveAPendingTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingTransaction}
     */
    retrieveAPendingTransaction(pendingTransactionId, callback) {
      let postBody = null;
      // verify the required parameter 'pendingTransactionId' is set
      if (pendingTransactionId === undefined || pendingTransactionId === null) {
        throw new Error("Missing the required parameter 'pendingTransactionId' when calling retrieveAPendingTransaction");
      }

      let pathParams = {
        'pending_transaction_id': pendingTransactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PendingTransaction;
      return this.apiClient.callApi(
        '/pending_transactions/{pending_transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAProgram operation.
     * @callback module:api/DefaultApi~retrieveAProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Program} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Program
     * @param {String} programId 
     * @param {module:api/DefaultApi~retrieveAProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Program}
     */
    retrieveAProgram(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling retrieveAProgram");
      }

      let pathParams = {
        'program_id': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Program;
      return this.apiClient.callApi(
        '/programs/{program_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveARealTimeDecision operation.
     * @callback module:api/DefaultApi~retrieveARealTimeDecisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimeDecision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Real-Time Decision
     * @param {String} realTimeDecisionId 
     * @param {module:api/DefaultApi~retrieveARealTimeDecisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimeDecision}
     */
    retrieveARealTimeDecision(realTimeDecisionId, callback) {
      let postBody = null;
      // verify the required parameter 'realTimeDecisionId' is set
      if (realTimeDecisionId === undefined || realTimeDecisionId === null) {
        throw new Error("Missing the required parameter 'realTimeDecisionId' when calling retrieveARealTimeDecision");
      }

      let pathParams = {
        'real_time_decision_id': realTimeDecisionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealTimeDecision;
      return this.apiClient.callApi(
        '/real_time_decisions/{real_time_decision_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveARealTimePaymentsTransfer operation.
     * @callback module:api/DefaultApi~retrieveARealTimePaymentsTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealTimePaymentsTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Real Time Payments Transfer
     * @param {String} realTimePaymentsTransferId 
     * @param {module:api/DefaultApi~retrieveARealTimePaymentsTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealTimePaymentsTransfer}
     */
    retrieveARealTimePaymentsTransfer(realTimePaymentsTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'realTimePaymentsTransferId' is set
      if (realTimePaymentsTransferId === undefined || realTimePaymentsTransferId === null) {
        throw new Error("Missing the required parameter 'realTimePaymentsTransferId' when calling retrieveARealTimePaymentsTransfer");
      }

      let pathParams = {
        'real_time_payments_transfer_id': realTimePaymentsTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RealTimePaymentsTransfer;
      return this.apiClient.callApi(
        '/real_time_payments_transfers/{real_time_payments_transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveATransaction operation.
     * @callback module:api/DefaultApi~retrieveATransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Transaction
     * @param {String} transactionId 
     * @param {module:api/DefaultApi~retrieveATransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    retrieveATransaction(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling retrieveATransaction");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAWireDrawdownRequest operation.
     * @callback module:api/DefaultApi~retrieveAWireDrawdownRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireDrawdownRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Wire Drawdown Request
     * @param {String} wireDrawdownRequestId 
     * @param {module:api/DefaultApi~retrieveAWireDrawdownRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireDrawdownRequest}
     */
    retrieveAWireDrawdownRequest(wireDrawdownRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'wireDrawdownRequestId' is set
      if (wireDrawdownRequestId === undefined || wireDrawdownRequestId === null) {
        throw new Error("Missing the required parameter 'wireDrawdownRequestId' when calling retrieveAWireDrawdownRequest");
      }

      let pathParams = {
        'wire_drawdown_request_id': wireDrawdownRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireDrawdownRequest;
      return this.apiClient.callApi(
        '/wire_drawdown_requests/{wire_drawdown_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAWireTransfer operation.
     * @callback module:api/DefaultApi~retrieveAWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Wire Transfer
     * @param {String} wireTransferId 
     * @param {module:api/DefaultApi~retrieveAWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    retrieveAWireTransfer(wireTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'wireTransferId' is set
      if (wireTransferId === undefined || wireTransferId === null) {
        throw new Error("Missing the required parameter 'wireTransferId' when calling retrieveAWireTransfer");
      }

      let pathParams = {
        'wire_transfer_id': wireTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/wire_transfers/{wire_transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAccount operation.
     * @callback module:api/DefaultApi~retrieveAnAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Account
     * @param {String} accountId 
     * @param {module:api/DefaultApi~retrieveAnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    retrieveAnAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling retrieveAnAccount");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAccountNumber operation.
     * @callback module:api/DefaultApi~retrieveAnAccountNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Account Number
     * @param {String} accountNumberId 
     * @param {module:api/DefaultApi~retrieveAnAccountNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountNumber}
     */
    retrieveAnAccountNumber(accountNumberId, callback) {
      let postBody = null;
      // verify the required parameter 'accountNumberId' is set
      if (accountNumberId === undefined || accountNumberId === null) {
        throw new Error("Missing the required parameter 'accountNumberId' when calling retrieveAnAccountNumber");
      }

      let pathParams = {
        'account_number_id': accountNumberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountNumber;
      return this.apiClient.callApi(
        '/account_numbers/{account_number_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAccountStatement operation.
     * @callback module:api/DefaultApi~retrieveAnAccountStatementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Account Statement
     * @param {String} accountStatementId 
     * @param {module:api/DefaultApi~retrieveAnAccountStatementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatement}
     */
    retrieveAnAccountStatement(accountStatementId, callback) {
      let postBody = null;
      // verify the required parameter 'accountStatementId' is set
      if (accountStatementId === undefined || accountStatementId === null) {
        throw new Error("Missing the required parameter 'accountStatementId' when calling retrieveAnAccountStatement");
      }

      let pathParams = {
        'account_statement_id': accountStatementId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountStatement;
      return this.apiClient.callApi(
        '/account_statements/{account_statement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAccountTransfer operation.
     * @callback module:api/DefaultApi~retrieveAnAccountTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Account Transfer
     * @param {String} accountTransferId 
     * @param {module:api/DefaultApi~retrieveAnAccountTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransfer}
     */
    retrieveAnAccountTransfer(accountTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'accountTransferId' is set
      if (accountTransferId === undefined || accountTransferId === null) {
        throw new Error("Missing the required parameter 'accountTransferId' when calling retrieveAnAccountTransfer");
      }

      let pathParams = {
        'account_transfer_id': accountTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountTransfer;
      return this.apiClient.callApi(
        '/account_transfers/{account_transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAchPrenotification operation.
     * @callback module:api/DefaultApi~retrieveAnAchPrenotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchPrenotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an ACH Prenotification
     * @param {String} achPrenotificationId 
     * @param {module:api/DefaultApi~retrieveAnAchPrenotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchPrenotification}
     */
    retrieveAnAchPrenotification(achPrenotificationId, callback) {
      let postBody = null;
      // verify the required parameter 'achPrenotificationId' is set
      if (achPrenotificationId === undefined || achPrenotificationId === null) {
        throw new Error("Missing the required parameter 'achPrenotificationId' when calling retrieveAnAchPrenotification");
      }

      let pathParams = {
        'ach_prenotification_id': achPrenotificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchPrenotification;
      return this.apiClient.callApi(
        '/ach_prenotifications/{ach_prenotification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnAchTransfer operation.
     * @callback module:api/DefaultApi~retrieveAnAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an ACH Transfer
     * @param {String} achTransferId 
     * @param {module:api/DefaultApi~retrieveAnAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    retrieveAnAchTransfer(achTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'achTransferId' is set
      if (achTransferId === undefined || achTransferId === null) {
        throw new Error("Missing the required parameter 'achTransferId' when calling retrieveAnAchTransfer");
      }

      let pathParams = {
        'ach_transfer_id': achTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/ach_transfers/{ach_transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnEntity operation.
     * @callback module:api/DefaultApi~retrieveAnEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Entity
     * @param {String} entityId 
     * @param {module:api/DefaultApi~retrieveAnEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entity}
     */
    retrieveAnEntity(entityId, callback) {
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling retrieveAnEntity");
      }

      let pathParams = {
        'entity_id': entityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Entity;
      return this.apiClient.callApi(
        '/entities/{entity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnEvent operation.
     * @callback module:api/DefaultApi~retrieveAnEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Event
     * @param {String} eventId 
     * @param {module:api/DefaultApi~retrieveAnEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    retrieveAnEvent(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling retrieveAnEvent");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/events/{event_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnEventSubscription operation.
     * @callback module:api/DefaultApi~retrieveAnEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Event Subscription
     * @param {String} eventSubscriptionId 
     * @param {module:api/DefaultApi~retrieveAnEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    retrieveAnEventSubscription(eventSubscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'eventSubscriptionId' is set
      if (eventSubscriptionId === undefined || eventSubscriptionId === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionId' when calling retrieveAnEventSubscription");
      }

      let pathParams = {
        'event_subscription_id': eventSubscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/event_subscriptions/{event_subscription_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnExport operation.
     * @callback module:api/DefaultApi~retrieveAnExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Export} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Export
     * @param {String} exportId 
     * @param {module:api/DefaultApi~retrieveAnExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Export}
     */
    retrieveAnExport(exportId, callback) {
      let postBody = null;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling retrieveAnExport");
      }

      let pathParams = {
        'export_id': exportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Export;
      return this.apiClient.callApi(
        '/exports/{export_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnExternalAccount operation.
     * @callback module:api/DefaultApi~retrieveAnExternalAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an External Account
     * @param {String} externalAccountId 
     * @param {module:api/DefaultApi~retrieveAnExternalAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccount}
     */
    retrieveAnExternalAccount(externalAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling retrieveAnExternalAccount");
      }

      let pathParams = {
        'external_account_id': externalAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExternalAccount;
      return this.apiClient.callApi(
        '/external_accounts/{external_account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnInboundAchTransferReturn operation.
     * @callback module:api/DefaultApi~retrieveAnInboundAchTransferReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundAchTransferReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Inbound ACH Transfer Return
     * @param {String} inboundAchTransferReturnId 
     * @param {module:api/DefaultApi~retrieveAnInboundAchTransferReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundAchTransferReturn}
     */
    retrieveAnInboundAchTransferReturn(inboundAchTransferReturnId, callback) {
      let postBody = null;
      // verify the required parameter 'inboundAchTransferReturnId' is set
      if (inboundAchTransferReturnId === undefined || inboundAchTransferReturnId === null) {
        throw new Error("Missing the required parameter 'inboundAchTransferReturnId' when calling retrieveAnInboundAchTransferReturn");
      }

      let pathParams = {
        'inbound_ach_transfer_return_id': inboundAchTransferReturnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundAchTransferReturn;
      return this.apiClient.callApi(
        '/inbound_ach_transfer_returns/{inbound_ach_transfer_return_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnInboundWireDrawdownRequest operation.
     * @callback module:api/DefaultApi~retrieveAnInboundWireDrawdownRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundWireDrawdownRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Inbound Wire Drawdown Request
     * @param {String} inboundWireDrawdownRequestId 
     * @param {module:api/DefaultApi~retrieveAnInboundWireDrawdownRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundWireDrawdownRequest}
     */
    retrieveAnInboundWireDrawdownRequest(inboundWireDrawdownRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'inboundWireDrawdownRequestId' is set
      if (inboundWireDrawdownRequestId === undefined || inboundWireDrawdownRequestId === null) {
        throw new Error("Missing the required parameter 'inboundWireDrawdownRequestId' when calling retrieveAnInboundWireDrawdownRequest");
      }

      let pathParams = {
        'inbound_wire_drawdown_request_id': inboundWireDrawdownRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundWireDrawdownRequest;
      return this.apiClient.callApi(
        '/inbound_wire_drawdown_requests/{inbound_wire_drawdown_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAnOauthConnection operation.
     * @callback module:api/DefaultApi~retrieveAnOauthConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OauthConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an OAuth Connection
     * @param {String} oauthConnectionId 
     * @param {module:api/DefaultApi~retrieveAnOauthConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OauthConnection}
     */
    retrieveAnOauthConnection(oauthConnectionId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthConnectionId' is set
      if (oauthConnectionId === undefined || oauthConnectionId === null) {
        throw new Error("Missing the required parameter 'oauthConnectionId' when calling retrieveAnOauthConnection");
      }

      let pathParams = {
        'oauth_connection_id': oauthConnectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OauthConnection;
      return this.apiClient.callApi(
        '/oauth_connections/{oauth_connection_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveGroupDetails operation.
     * @callback module:api/DefaultApi~retrieveGroupDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Group details
     * Returns details for the currently authenticated Group.
     * @param {module:api/DefaultApi~retrieveGroupDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    retrieveGroupDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/groups/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveSensitiveDetailsForACard operation.
     * @callback module:api/DefaultApi~retrieveSensitiveDetailsForACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve sensitive details for a Card
     * @param {String} cardId 
     * @param {module:api/DefaultApi~retrieveSensitiveDetailsForACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDetails}
     */
    retrieveSensitiveDetailsForACard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling retrieveSensitiveDetailsForACard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardDetails;
      return this.apiClient.callApi(
        '/cards/{card_id}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnASandboxAchTransfer operation.
     * @callback module:api/DefaultApi~returnASandboxAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Sandbox ACH Transfer
     * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a `status` of `submitted`.
     * @param {String} achTransferId 
     * @param {module:model/ReturnASandboxAchTransferParameters} returnASandboxAchTransferParameters 
     * @param {module:api/DefaultApi~returnASandboxAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    returnASandboxAchTransfer(achTransferId, returnASandboxAchTransferParameters, callback) {
      let postBody = returnASandboxAchTransferParameters;
      // verify the required parameter 'achTransferId' is set
      if (achTransferId === undefined || achTransferId === null) {
        throw new Error("Missing the required parameter 'achTransferId' when calling returnASandboxAchTransfer");
      }
      // verify the required parameter 'returnASandboxAchTransferParameters' is set
      if (returnASandboxAchTransferParameters === undefined || returnASandboxAchTransferParameters === null) {
        throw new Error("Missing the required parameter 'returnASandboxAchTransferParameters' when calling returnASandboxAchTransfer");
      }

      let pathParams = {
        'ach_transfer_id': achTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/simulations/ach_transfers/{ach_transfer_id}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnASandboxCheckDeposit operation.
     * @callback module:api/DefaultApi~returnASandboxCheckDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Sandbox Check Deposit
     * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a `status` of `submitted`.
     * @param {String} checkDepositId 
     * @param {module:api/DefaultApi~returnASandboxCheckDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDeposit}
     */
    returnASandboxCheckDeposit(checkDepositId, callback) {
      let postBody = null;
      // verify the required parameter 'checkDepositId' is set
      if (checkDepositId === undefined || checkDepositId === null) {
        throw new Error("Missing the required parameter 'checkDepositId' when calling returnASandboxCheckDeposit");
      }

      let pathParams = {
        'check_deposit_id': checkDepositId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDeposit;
      return this.apiClient.callApi(
        '/simulations/check_deposits/{check_deposit_id}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnASandboxCheckTransfer operation.
     * @callback module:api/DefaultApi~returnASandboxCheckTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Sandbox Check Transfer
     * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a `status` of `mailed`.
     * @param {String} checkTransferId 
     * @param {module:model/ReturnASandboxCheckTransferParameters} returnASandboxCheckTransferParameters 
     * @param {module:api/DefaultApi~returnASandboxCheckTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckTransfer}
     */
    returnASandboxCheckTransfer(checkTransferId, returnASandboxCheckTransferParameters, callback) {
      let postBody = returnASandboxCheckTransferParameters;
      // verify the required parameter 'checkTransferId' is set
      if (checkTransferId === undefined || checkTransferId === null) {
        throw new Error("Missing the required parameter 'checkTransferId' when calling returnASandboxCheckTransfer");
      }
      // verify the required parameter 'returnASandboxCheckTransferParameters' is set
      if (returnASandboxCheckTransferParameters === undefined || returnASandboxCheckTransferParameters === null) {
        throw new Error("Missing the required parameter 'returnASandboxCheckTransferParameters' when calling returnASandboxCheckTransfer");
      }

      let pathParams = {
        'check_transfer_id': checkTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckTransfer;
      return this.apiClient.callApi(
        '/simulations/check_transfers/{check_transfer_id}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseASandboxWireTransfer operation.
     * @callback module:api/DefaultApi~reverseASandboxWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse a Sandbox Wire Transfer
     * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a `status` of `complete`.'
     * @param {String} wireTransferId 
     * @param {module:api/DefaultApi~reverseASandboxWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    reverseASandboxWireTransfer(wireTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'wireTransferId' is set
      if (wireTransferId === undefined || wireTransferId === null) {
        throw new Error("Missing the required parameter 'wireTransferId' when calling reverseASandboxWireTransfer");
      }

      let pathParams = {
        'wire_transfer_id': wireTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/simulations/wire_transfers/{wire_transfer_id}/reverse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateARealTimePaymentsTransferToYourAccount operation.
     * @callback module:api/DefaultApi~simulateARealTimePaymentsTransferToYourAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundRealTimePaymentsTransferSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a Real Time Payments Transfer to your account
     * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
     * @param {module:model/SimulateARealTimePaymentsTransferToYourAccountParameters} simulateARealTimePaymentsTransferToYourAccountParameters 
     * @param {module:api/DefaultApi~simulateARealTimePaymentsTransferToYourAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundRealTimePaymentsTransferSimulationResult}
     */
    simulateARealTimePaymentsTransferToYourAccount(simulateARealTimePaymentsTransferToYourAccountParameters, callback) {
      let postBody = simulateARealTimePaymentsTransferToYourAccountParameters;
      // verify the required parameter 'simulateARealTimePaymentsTransferToYourAccountParameters' is set
      if (simulateARealTimePaymentsTransferToYourAccountParameters === undefined || simulateARealTimePaymentsTransferToYourAccountParameters === null) {
        throw new Error("Missing the required parameter 'simulateARealTimePaymentsTransferToYourAccountParameters' when calling simulateARealTimePaymentsTransferToYourAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundRealTimePaymentsTransferSimulationResult;
      return this.apiClient.callApi(
        '/simulations/inbound_real_time_payments_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateARefundOnACard operation.
     * @callback module:api/DefaultApi~simulateARefundOnACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a refund on a card
     * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
     * @param {module:model/SimulateARefundOnACardParameters} simulateARefundOnACardParameters 
     * @param {module:api/DefaultApi~simulateARefundOnACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    simulateARefundOnACard(simulateARefundOnACardParameters, callback) {
      let postBody = simulateARefundOnACardParameters;
      // verify the required parameter 'simulateARefundOnACardParameters' is set
      if (simulateARefundOnACardParameters === undefined || simulateARefundOnACardParameters === null) {
        throw new Error("Missing the required parameter 'simulateARefundOnACardParameters' when calling simulateARefundOnACard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/simulations/card_refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateATaxDocumentBeingCreated operation.
     * @callback module:api/DefaultApi~simulateATaxDocumentBeingCreatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a tax document being created
     * Simulates an tax document being created for an account.
     * @param {module:model/SimulateATaxDocumentBeingCreatedParameters} simulateATaxDocumentBeingCreatedParameters 
     * @param {module:api/DefaultApi~simulateATaxDocumentBeingCreatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    simulateATaxDocumentBeingCreated(simulateATaxDocumentBeingCreatedParameters, callback) {
      let postBody = simulateATaxDocumentBeingCreatedParameters;
      // verify the required parameter 'simulateATaxDocumentBeingCreatedParameters' is set
      if (simulateATaxDocumentBeingCreatedParameters === undefined || simulateATaxDocumentBeingCreatedParameters === null) {
        throw new Error("Missing the required parameter 'simulateATaxDocumentBeingCreatedParameters' when calling simulateATaxDocumentBeingCreated");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/simulations/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAWireTransferToYourAccount operation.
     * @callback module:api/DefaultApi~simulateAWireTransferToYourAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundWireTransferSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a Wire Transfer to your account
     * Simulates an inbound Wire Transfer to your account.
     * @param {module:model/SimulateAWireTransferToYourAccountParameters} simulateAWireTransferToYourAccountParameters 
     * @param {module:api/DefaultApi~simulateAWireTransferToYourAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundWireTransferSimulationResult}
     */
    simulateAWireTransferToYourAccount(simulateAWireTransferToYourAccountParameters, callback) {
      let postBody = simulateAWireTransferToYourAccountParameters;
      // verify the required parameter 'simulateAWireTransferToYourAccountParameters' is set
      if (simulateAWireTransferToYourAccountParameters === undefined || simulateAWireTransferToYourAccountParameters === null) {
        throw new Error("Missing the required parameter 'simulateAWireTransferToYourAccountParameters' when calling simulateAWireTransferToYourAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundWireTransferSimulationResult;
      return this.apiClient.callApi(
        '/simulations/inbound_wire_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAnAccountStatementBeingCreated operation.
     * @callback module:api/DefaultApi~simulateAnAccountStatementBeingCreatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate an Account Statement being created
     * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
     * @param {module:model/SimulateAnAccountStatementBeingCreatedParameters} simulateAnAccountStatementBeingCreatedParameters 
     * @param {module:api/DefaultApi~simulateAnAccountStatementBeingCreatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatement}
     */
    simulateAnAccountStatementBeingCreated(simulateAnAccountStatementBeingCreatedParameters, callback) {
      let postBody = simulateAnAccountStatementBeingCreatedParameters;
      // verify the required parameter 'simulateAnAccountStatementBeingCreatedParameters' is set
      if (simulateAnAccountStatementBeingCreatedParameters === undefined || simulateAnAccountStatementBeingCreatedParameters === null) {
        throw new Error("Missing the required parameter 'simulateAnAccountStatementBeingCreatedParameters' when calling simulateAnAccountStatementBeingCreated");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountStatement;
      return this.apiClient.callApi(
        '/simulations/account_statements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAnAchTransferToYourAccount operation.
     * @callback module:api/DefaultApi~simulateAnAchTransferToYourAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundAchTransferSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate an ACH Transfer to your account
     * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the `amount` is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
     * @param {module:model/SimulateAnAchTransferToYourAccountParameters} simulateAnAchTransferToYourAccountParameters 
     * @param {module:api/DefaultApi~simulateAnAchTransferToYourAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundAchTransferSimulationResult}
     */
    simulateAnAchTransferToYourAccount(simulateAnAchTransferToYourAccountParameters, callback) {
      let postBody = simulateAnAchTransferToYourAccountParameters;
      // verify the required parameter 'simulateAnAchTransferToYourAccountParameters' is set
      if (simulateAnAchTransferToYourAccountParameters === undefined || simulateAnAchTransferToYourAccountParameters === null) {
        throw new Error("Missing the required parameter 'simulateAnAchTransferToYourAccountParameters' when calling simulateAnAchTransferToYourAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundAchTransferSimulationResult;
      return this.apiClient.callApi(
        '/simulations/inbound_ach_transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAnAuthorizationOnACard operation.
     * @callback module:api/DefaultApi~simulateAnAuthorizationOnACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundCardAuthorizationSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate an authorization on a Card
     * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the `amount` submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type `card_authorization` or a [Declined Transaction](#declined-transactions) of type `card_decline`. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
     * @param {module:model/SimulateAnAuthorizationOnACardParameters} simulateAnAuthorizationOnACardParameters 
     * @param {module:api/DefaultApi~simulateAnAuthorizationOnACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundCardAuthorizationSimulationResult}
     */
    simulateAnAuthorizationOnACard(simulateAnAuthorizationOnACardParameters, callback) {
      let postBody = simulateAnAuthorizationOnACardParameters;
      // verify the required parameter 'simulateAnAuthorizationOnACardParameters' is set
      if (simulateAnAuthorizationOnACardParameters === undefined || simulateAnAuthorizationOnACardParameters === null) {
        throw new Error("Missing the required parameter 'simulateAnAuthorizationOnACardParameters' when calling simulateAnAuthorizationOnACard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundCardAuthorizationSimulationResult;
      return this.apiClient.callApi(
        '/simulations/card_authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAnInboundWireDrawdownRequestBeingCreated operation.
     * @callback module:api/DefaultApi~simulateAnInboundWireDrawdownRequestBeingCreatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundWireDrawdownRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate an Inbound Wire Drawdown request being created
     * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
     * @param {module:model/SimulateAnInboundWireDrawdownRequestBeingCreatedParameters} simulateAnInboundWireDrawdownRequestBeingCreatedParameters 
     * @param {module:api/DefaultApi~simulateAnInboundWireDrawdownRequestBeingCreatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundWireDrawdownRequest}
     */
    simulateAnInboundWireDrawdownRequestBeingCreated(simulateAnInboundWireDrawdownRequestBeingCreatedParameters, callback) {
      let postBody = simulateAnInboundWireDrawdownRequestBeingCreatedParameters;
      // verify the required parameter 'simulateAnInboundWireDrawdownRequestBeingCreatedParameters' is set
      if (simulateAnInboundWireDrawdownRequestBeingCreatedParameters === undefined || simulateAnInboundWireDrawdownRequestBeingCreatedParameters === null) {
        throw new Error("Missing the required parameter 'simulateAnInboundWireDrawdownRequestBeingCreatedParameters' when calling simulateAnInboundWireDrawdownRequestBeingCreated");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundWireDrawdownRequest;
      return this.apiClient.callApi(
        '/simulations/inbound_wire_drawdown_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateAnInterestPaymentToYourAccount operation.
     * @callback module:api/DefaultApi~simulateAnInterestPaymentToYourAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterestPaymentSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate an Interest Payment to your account
     * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
     * @param {module:model/SimulateAnInterestPaymentToYourAccountParameters} simulateAnInterestPaymentToYourAccountParameters 
     * @param {module:api/DefaultApi~simulateAnInterestPaymentToYourAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterestPaymentSimulationResult}
     */
    simulateAnInterestPaymentToYourAccount(simulateAnInterestPaymentToYourAccountParameters, callback) {
      let postBody = simulateAnInterestPaymentToYourAccountParameters;
      // verify the required parameter 'simulateAnInterestPaymentToYourAccountParameters' is set
      if (simulateAnInterestPaymentToYourAccountParameters === undefined || simulateAnInterestPaymentToYourAccountParameters === null) {
        throw new Error("Missing the required parameter 'simulateAnInterestPaymentToYourAccountParameters' when calling simulateAnInterestPaymentToYourAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterestPaymentSimulationResult;
      return this.apiClient.callApi(
        '/simulations/interest_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateDigitalWalletProvisioningForACard operation.
     * @callback module:api/DefaultApi~simulateDigitalWalletProvisioningForACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundDigitalWalletTokenRequestSimulationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate digital wallet provisioning for a card
     * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
     * @param {module:model/SimulateDigitalWalletProvisioningForACardParameters} simulateDigitalWalletProvisioningForACardParameters 
     * @param {module:api/DefaultApi~simulateDigitalWalletProvisioningForACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundDigitalWalletTokenRequestSimulationResult}
     */
    simulateDigitalWalletProvisioningForACard(simulateDigitalWalletProvisioningForACardParameters, callback) {
      let postBody = simulateDigitalWalletProvisioningForACardParameters;
      // verify the required parameter 'simulateDigitalWalletProvisioningForACardParameters' is set
      if (simulateDigitalWalletProvisioningForACardParameters === undefined || simulateDigitalWalletProvisioningForACardParameters === null) {
        throw new Error("Missing the required parameter 'simulateDigitalWalletProvisioningForACardParameters' when calling simulateDigitalWalletProvisioningForACard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InboundDigitalWalletTokenRequestSimulationResult;
      return this.apiClient.callApi(
        '/simulations/digital_wallet_token_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulateSettlingACardAuthorization operation.
     * @callback module:api/DefaultApi~simulateSettlingACardAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate settling a card authorization
     * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
     * @param {module:model/SimulateSettlingACardAuthorizationParameters} simulateSettlingACardAuthorizationParameters 
     * @param {module:api/DefaultApi~simulateSettlingACardAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    simulateSettlingACardAuthorization(simulateSettlingACardAuthorizationParameters, callback) {
      let postBody = simulateSettlingACardAuthorizationParameters;
      // verify the required parameter 'simulateSettlingACardAuthorizationParameters' is set
      if (simulateSettlingACardAuthorizationParameters === undefined || simulateSettlingACardAuthorizationParameters === null) {
        throw new Error("Missing the required parameter 'simulateSettlingACardAuthorizationParameters' when calling simulateSettlingACardAuthorization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/simulations/card_settlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the simulatesAdvancingTheStateOfACardDispute operation.
     * @callback module:api/DefaultApi~simulatesAdvancingTheStateOfACardDisputeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDispute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulates advancing the state of a card dispute
     * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of `pending_reviewing`.
     * @param {String} cardDisputeId 
     * @param {module:model/SimulatesAdvancingTheStateOfACardDisputeParameters} simulatesAdvancingTheStateOfACardDisputeParameters 
     * @param {module:api/DefaultApi~simulatesAdvancingTheStateOfACardDisputeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDispute}
     */
    simulatesAdvancingTheStateOfACardDispute(cardDisputeId, simulatesAdvancingTheStateOfACardDisputeParameters, callback) {
      let postBody = simulatesAdvancingTheStateOfACardDisputeParameters;
      // verify the required parameter 'cardDisputeId' is set
      if (cardDisputeId === undefined || cardDisputeId === null) {
        throw new Error("Missing the required parameter 'cardDisputeId' when calling simulatesAdvancingTheStateOfACardDispute");
      }
      // verify the required parameter 'simulatesAdvancingTheStateOfACardDisputeParameters' is set
      if (simulatesAdvancingTheStateOfACardDisputeParameters === undefined || simulatesAdvancingTheStateOfACardDisputeParameters === null) {
        throw new Error("Missing the required parameter 'simulatesAdvancingTheStateOfACardDisputeParameters' when calling simulatesAdvancingTheStateOfACardDispute");
      }

      let pathParams = {
        'card_dispute_id': cardDisputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardDispute;
      return this.apiClient.callApi(
        '/simulations/card_disputes/{card_dispute_id}/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitASandboxAchTransfer operation.
     * @callback module:api/DefaultApi~submitASandboxAchTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a Sandbox ACH Transfer
     * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_submission`. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of `submitted`.
     * @param {String} achTransferId 
     * @param {module:api/DefaultApi~submitASandboxAchTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchTransfer}
     */
    submitASandboxAchTransfer(achTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'achTransferId' is set
      if (achTransferId === undefined || achTransferId === null) {
        throw new Error("Missing the required parameter 'achTransferId' when calling submitASandboxAchTransfer");
      }

      let pathParams = {
        'ach_transfer_id': achTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AchTransfer;
      return this.apiClient.callApi(
        '/simulations/ach_transfers/{ach_transfer_id}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitASandboxCheckDeposit operation.
     * @callback module:api/DefaultApi~submitASandboxCheckDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDeposit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a Sandbox Check Deposit
     * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a `status` of `pending`.
     * @param {String} checkDepositId 
     * @param {module:api/DefaultApi~submitASandboxCheckDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDeposit}
     */
    submitASandboxCheckDeposit(checkDepositId, callback) {
      let postBody = null;
      // verify the required parameter 'checkDepositId' is set
      if (checkDepositId === undefined || checkDepositId === null) {
        throw new Error("Missing the required parameter 'checkDepositId' when calling submitASandboxCheckDeposit");
      }

      let pathParams = {
        'check_deposit_id': checkDepositId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDeposit;
      return this.apiClient.callApi(
        '/simulations/check_deposits/{check_deposit_id}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitASandboxWireTransfer operation.
     * @callback module:api/DefaultApi~submitASandboxWireTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WireTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a Sandbox Wire Transfer
     * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_creating`.
     * @param {String} wireTransferId 
     * @param {module:api/DefaultApi~submitASandboxWireTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WireTransfer}
     */
    submitASandboxWireTransfer(wireTransferId, callback) {
      let postBody = null;
      // verify the required parameter 'wireTransferId' is set
      if (wireTransferId === undefined || wireTransferId === null) {
        throw new Error("Missing the required parameter 'wireTransferId' when calling submitASandboxWireTransfer");
      }

      let pathParams = {
        'wire_transfer_id': wireTransferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WireTransfer;
      return this.apiClient.callApi(
        '/simulations/wire_transfers/{wire_transfer_id}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateACard operation.
     * @callback module:api/DefaultApi~updateACardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Card
     * @param {String} cardId 
     * @param {module:model/UpdateACardParameters} updateACardParameters 
     * @param {module:api/DefaultApi~updateACardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    updateACard(cardId, updateACardParameters, callback) {
      let postBody = updateACardParameters;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling updateACard");
      }
      // verify the required parameter 'updateACardParameters' is set
      if (updateACardParameters === undefined || updateACardParameters === null) {
        throw new Error("Missing the required parameter 'updateACardParameters' when calling updateACard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/cards/{card_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateALimit operation.
     * @callback module:api/DefaultApi~updateALimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Limit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Limit
     * @param {String} limitId 
     * @param {module:model/UpdateALimitParameters} updateALimitParameters 
     * @param {module:api/DefaultApi~updateALimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Limit}
     */
    updateALimit(limitId, updateALimitParameters, callback) {
      let postBody = updateALimitParameters;
      // verify the required parameter 'limitId' is set
      if (limitId === undefined || limitId === null) {
        throw new Error("Missing the required parameter 'limitId' when calling updateALimit");
      }
      // verify the required parameter 'updateALimitParameters' is set
      if (updateALimitParameters === undefined || updateALimitParameters === null) {
        throw new Error("Missing the required parameter 'updateALimitParameters' when calling updateALimit");
      }

      let pathParams = {
        'limit_id': limitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Limit;
      return this.apiClient.callApi(
        '/limits/{limit_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnAccount operation.
     * @callback module:api/DefaultApi~updateAnAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Account
     * @param {String} accountId 
     * @param {module:model/UpdateAnAccountParameters} updateAnAccountParameters 
     * @param {module:api/DefaultApi~updateAnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAnAccount(accountId, updateAnAccountParameters, callback) {
      let postBody = updateAnAccountParameters;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAnAccount");
      }
      // verify the required parameter 'updateAnAccountParameters' is set
      if (updateAnAccountParameters === undefined || updateAnAccountParameters === null) {
        throw new Error("Missing the required parameter 'updateAnAccountParameters' when calling updateAnAccount");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{account_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnAccountNumber operation.
     * @callback module:api/DefaultApi~updateAnAccountNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Account Number
     * @param {String} accountNumberId 
     * @param {module:model/UpdateAnAccountNumberParameters} updateAnAccountNumberParameters 
     * @param {module:api/DefaultApi~updateAnAccountNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountNumber}
     */
    updateAnAccountNumber(accountNumberId, updateAnAccountNumberParameters, callback) {
      let postBody = updateAnAccountNumberParameters;
      // verify the required parameter 'accountNumberId' is set
      if (accountNumberId === undefined || accountNumberId === null) {
        throw new Error("Missing the required parameter 'accountNumberId' when calling updateAnAccountNumber");
      }
      // verify the required parameter 'updateAnAccountNumberParameters' is set
      if (updateAnAccountNumberParameters === undefined || updateAnAccountNumberParameters === null) {
        throw new Error("Missing the required parameter 'updateAnAccountNumberParameters' when calling updateAnAccountNumber");
      }

      let pathParams = {
        'account_number_id': accountNumberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountNumber;
      return this.apiClient.callApi(
        '/account_numbers/{account_number_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnEventSubscription operation.
     * @callback module:api/DefaultApi~updateAnEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Event Subscription
     * @param {String} eventSubscriptionId 
     * @param {module:model/UpdateAnEventSubscriptionParameters} updateAnEventSubscriptionParameters 
     * @param {module:api/DefaultApi~updateAnEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    updateAnEventSubscription(eventSubscriptionId, updateAnEventSubscriptionParameters, callback) {
      let postBody = updateAnEventSubscriptionParameters;
      // verify the required parameter 'eventSubscriptionId' is set
      if (eventSubscriptionId === undefined || eventSubscriptionId === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionId' when calling updateAnEventSubscription");
      }
      // verify the required parameter 'updateAnEventSubscriptionParameters' is set
      if (updateAnEventSubscriptionParameters === undefined || updateAnEventSubscriptionParameters === null) {
        throw new Error("Missing the required parameter 'updateAnEventSubscriptionParameters' when calling updateAnEventSubscription");
      }

      let pathParams = {
        'event_subscription_id': eventSubscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/event_subscriptions/{event_subscription_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnExternalAccount operation.
     * @callback module:api/DefaultApi~updateAnExternalAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an External Account
     * @param {String} externalAccountId 
     * @param {module:model/UpdateAnExternalAccountParameters} updateAnExternalAccountParameters 
     * @param {module:api/DefaultApi~updateAnExternalAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccount}
     */
    updateAnExternalAccount(externalAccountId, updateAnExternalAccountParameters, callback) {
      let postBody = updateAnExternalAccountParameters;
      // verify the required parameter 'externalAccountId' is set
      if (externalAccountId === undefined || externalAccountId === null) {
        throw new Error("Missing the required parameter 'externalAccountId' when calling updateAnExternalAccount");
      }
      // verify the required parameter 'updateAnExternalAccountParameters' is set
      if (updateAnExternalAccountParameters === undefined || updateAnExternalAccountParameters === null) {
        throw new Error("Missing the required parameter 'updateAnExternalAccountParameters' when calling updateAnExternalAccount");
      }

      let pathParams = {
        'external_account_id': externalAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExternalAccount;
      return this.apiClient.callApi(
        '/external_accounts/{external_account_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
