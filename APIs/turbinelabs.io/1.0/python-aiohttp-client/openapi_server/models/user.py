# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: str=None, deleted_at: str=None, login_email: str=None, user_key: str=None):
        """User - a model defined in OpenAPI

        :param checksum: The checksum of this User.
        :param deleted_at: The deleted_at of this User.
        :param login_email: The login_email of this User.
        :param user_key: The user_key of this User.
        """
        self.openapi_types = {
            'checksum': str,
            'deleted_at': str,
            'login_email': str,
            'user_key': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'deleted_at': 'deleted_at',
            'login_email': 'login_email',
            'user_key': 'user_key'
        }

        self._checksum = checksum
        self._deleted_at = deleted_at
        self._login_email = login_email
        self._user_key = user_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this User.


        :return: The checksum of this User.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this User.


        :param checksum: The checksum of this User.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def deleted_at(self):
        """Gets the deleted_at of this User.

        A timestamp that marks when a user was deleted. It is in the format yyyy-mm-ddThh:mm:ss.SZ. The timezone will always be UTC. 

        :return: The deleted_at of this User.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this User.

        A timestamp that marks when a user was deleted. It is in the format yyyy-mm-ddThh:mm:ss.SZ. The timezone will always be UTC. 

        :param deleted_at: The deleted_at of this User.
        :type deleted_at: str
        """

        self._deleted_at = deleted_at

    @property
    def login_email(self):
        """Gets the login_email of this User.


        :return: The login_email of this User.
        :rtype: str
        """
        return self._login_email

    @login_email.setter
    def login_email(self, login_email):
        """Sets the login_email of this User.


        :param login_email: The login_email of this User.
        :type login_email: str
        """
        if login_email is None:
            raise ValueError("Invalid value for `login_email`, must not be `None`")

        self._login_email = login_email

    @property
    def user_key(self):
        """Gets the user_key of this User.


        :return: The user_key of this User.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this User.


        :param user_key: The user_key of this User.
        :type user_key: str
        """
        if user_key is None:
            raise ValueError("Invalid value for `user_key`, must not be `None`")

        self._user_key = user_key
