# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_match_only: bool=None, actor_key: str=None, attribute_path: str=None, attribute_value: str=None, change_txn: str=None, change_type: str=None, exclude_empty_values: bool=None, negative_match: bool=None, object_key: str=None, object_type: str=None, org_key: str=None, time_range: TimeRange=None, zone_key: str=None):
        """Filter - a model defined in OpenAPI

        :param absolute_match_only: The absolute_match_only of this Filter.
        :param actor_key: The actor_key of this Filter.
        :param attribute_path: The attribute_path of this Filter.
        :param attribute_value: The attribute_value of this Filter.
        :param change_txn: The change_txn of this Filter.
        :param change_type: The change_type of this Filter.
        :param exclude_empty_values: The exclude_empty_values of this Filter.
        :param negative_match: The negative_match of this Filter.
        :param object_key: The object_key of this Filter.
        :param object_type: The object_type of this Filter.
        :param org_key: The org_key of this Filter.
        :param time_range: The time_range of this Filter.
        :param zone_key: The zone_key of this Filter.
        """
        self.openapi_types = {
            'absolute_match_only': bool,
            'actor_key': str,
            'attribute_path': str,
            'attribute_value': str,
            'change_txn': str,
            'change_type': str,
            'exclude_empty_values': bool,
            'negative_match': bool,
            'object_key': str,
            'object_type': str,
            'org_key': str,
            'time_range': TimeRange,
            'zone_key': str
        }

        self.attribute_map = {
            'absolute_match_only': 'absolute_match_only',
            'actor_key': 'actor_key',
            'attribute_path': 'attribute_path',
            'attribute_value': 'attribute_value',
            'change_txn': 'change_txn',
            'change_type': 'change_type',
            'exclude_empty_values': 'exclude_empty_values',
            'negative_match': 'negative_match',
            'object_key': 'object_key',
            'object_type': 'object_type',
            'org_key': 'org_key',
            'time_range': 'time_range',
            'zone_key': 'zone_key'
        }

        self._absolute_match_only = absolute_match_only
        self._actor_key = actor_key
        self._attribute_path = attribute_path
        self._attribute_value = attribute_value
        self._change_txn = change_txn
        self._change_type = change_type
        self._exclude_empty_values = exclude_empty_values
        self._negative_match = negative_match
        self._object_key = object_key
        self._object_type = object_type
        self._org_key = org_key
        self._time_range = time_range
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_match_only(self):
        """Gets the absolute_match_only of this Filter.

        If set this will return ChangeEntry values with a path that matches the attribute_path property exactly. 

        :return: The absolute_match_only of this Filter.
        :rtype: bool
        """
        return self._absolute_match_only

    @absolute_match_only.setter
    def absolute_match_only(self, absolute_match_only):
        """Sets the absolute_match_only of this Filter.

        If set this will return ChangeEntry values with a path that matches the attribute_path property exactly. 

        :param absolute_match_only: The absolute_match_only of this Filter.
        :type absolute_match_only: bool
        """

        self._absolute_match_only = absolute_match_only

    @property
    def actor_key(self):
        """Gets the actor_key of this Filter.

        The user who made the change.

        :return: The actor_key of this Filter.
        :rtype: str
        """
        return self._actor_key

    @actor_key.setter
    def actor_key(self, actor_key):
        """Sets the actor_key of this Filter.

        The user who made the change.

        :param actor_key: The actor_key of this Filter.
        :type actor_key: str
        """

        self._actor_key = actor_key

    @property
    def attribute_path(self):
        """Gets the attribute_path of this Filter.

        A dot-separated / bracket-indexed path to the field changed on the object. '%' may be used as a wildcard. 

        :return: The attribute_path of this Filter.
        :rtype: str
        """
        return self._attribute_path

    @attribute_path.setter
    def attribute_path(self, attribute_path):
        """Sets the attribute_path of this Filter.

        A dot-separated / bracket-indexed path to the field changed on the object. '%' may be used as a wildcard. 

        :param attribute_path: The attribute_path of this Filter.
        :type attribute_path: str
        """

        self._attribute_path = attribute_path

    @property
    def attribute_value(self):
        """Gets the attribute_value of this Filter.

        The value that has been added or removed to the object at the attribute path indicated in path. 

        :return: The attribute_value of this Filter.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this Filter.

        The value that has been added or removed to the object at the attribute path indicated in path. 

        :param attribute_value: The attribute_value of this Filter.
        :type attribute_value: str
        """

        self._attribute_value = attribute_value

    @property
    def change_txn(self):
        """Gets the change_txn of this Filter.

        A unique identifier for all this transaction. It is shared by all attribute updates within a change. 

        :return: The change_txn of this Filter.
        :rtype: str
        """
        return self._change_txn

    @change_txn.setter
    def change_txn(self, change_txn):
        """Sets the change_txn of this Filter.

        A unique identifier for all this transaction. It is shared by all attribute updates within a change. 

        :param change_txn: The change_txn of this Filter.
        :type change_txn: str
        """

        self._change_txn = change_txn

    @property
    def change_type(self):
        """Gets the change_type of this Filter.

        Whether the value was added or removed to the object.

        :return: The change_type of this Filter.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this Filter.

        Whether the value was added or removed to the object.

        :param change_type: The change_type of this Filter.
        :type change_type: str
        """
        allowed_values = ["addition", "removal"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def exclude_empty_values(self):
        """Gets the exclude_empty_values of this Filter.

        If set this will exclude ChangeEntry records that save the addition or removal of an empty value. 

        :return: The exclude_empty_values of this Filter.
        :rtype: bool
        """
        return self._exclude_empty_values

    @exclude_empty_values.setter
    def exclude_empty_values(self, exclude_empty_values):
        """Sets the exclude_empty_values of this Filter.

        If set this will exclude ChangeEntry records that save the addition or removal of an empty value. 

        :param exclude_empty_values: The exclude_empty_values of this Filter.
        :type exclude_empty_values: bool
        """

        self._exclude_empty_values = exclude_empty_values

    @property
    def negative_match(self):
        """Gets the negative_match of this Filter.

        If set this filter will match the all ChangeEntry records that do NOT meet the constraints laid out in this Filter object. 

        :return: The negative_match of this Filter.
        :rtype: bool
        """
        return self._negative_match

    @negative_match.setter
    def negative_match(self, negative_match):
        """Sets the negative_match of this Filter.

        If set this filter will match the all ChangeEntry records that do NOT meet the constraints laid out in this Filter object. 

        :param negative_match: The negative_match of this Filter.
        :type negative_match: bool
        """

        self._negative_match = negative_match

    @property
    def object_key(self):
        """Gets the object_key of this Filter.

        An ID uniquely identifying the object being changed.

        :return: The object_key of this Filter.
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this Filter.

        An ID uniquely identifying the object being changed.

        :param object_key: The object_key of this Filter.
        :type object_key: str
        """

        self._object_key = object_key

    @property
    def object_type(self):
        """Gets the object_type of this Filter.

        The name of the object being being altered.

        :return: The object_type of this Filter.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Filter.

        The name of the object being being altered.

        :param object_type: The object_type of this Filter.
        :type object_type: str
        """
        allowed_values = ["org", "user", "zone", "proxy", "domain", "route", "shared_rules", "cluster"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def org_key(self):
        """Gets the org_key of this Filter.

        The organization the objects being updated belong to.

        :return: The org_key of this Filter.
        :rtype: str
        """
        return self._org_key

    @org_key.setter
    def org_key(self, org_key):
        """Sets the org_key of this Filter.

        The organization the objects being updated belong to.

        :param org_key: The org_key of this Filter.
        :type org_key: str
        """

        self._org_key = org_key

    @property
    def time_range(self):
        """Gets the time_range of this Filter.


        :return: The time_range of this Filter.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this Filter.


        :param time_range: The time_range of this Filter.
        :type time_range: TimeRange
        """

        self._time_range = time_range

    @property
    def zone_key(self):
        """Gets the zone_key of this Filter.

        The zone this object is located in.

        :return: The zone_key of this Filter.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this Filter.

        The zone this object is located in.

        :param zone_key: The zone_key of this Filter.
        :type zone_key: str
        """

        self._zone_key = zone_key
