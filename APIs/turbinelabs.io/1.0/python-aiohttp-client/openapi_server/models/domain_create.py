# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cors_config import CORSConfig
from openapi_server.models.redirect import Redirect
from openapi_server.models.ssl_config import SSLConfig
from openapi_server import util


class DomainCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases: List[str]=None, checksum: str=None, cors_config: CORSConfig=None, domain_key: str=None, force_https: bool=None, gzip_enabled: bool=None, name: str=None, port: int=None, redirects: List[Redirect]=None, ssl_config: SSLConfig=None, zone_key: str=None):
        """DomainCreate - a model defined in OpenAPI

        :param aliases: The aliases of this DomainCreate.
        :param checksum: The checksum of this DomainCreate.
        :param cors_config: The cors_config of this DomainCreate.
        :param domain_key: The domain_key of this DomainCreate.
        :param force_https: The force_https of this DomainCreate.
        :param gzip_enabled: The gzip_enabled of this DomainCreate.
        :param name: The name of this DomainCreate.
        :param port: The port of this DomainCreate.
        :param redirects: The redirects of this DomainCreate.
        :param ssl_config: The ssl_config of this DomainCreate.
        :param zone_key: The zone_key of this DomainCreate.
        """
        self.openapi_types = {
            'aliases': List[str],
            'checksum': str,
            'cors_config': CORSConfig,
            'domain_key': str,
            'force_https': bool,
            'gzip_enabled': bool,
            'name': str,
            'port': int,
            'redirects': List[Redirect],
            'ssl_config': SSLConfig,
            'zone_key': str
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'checksum': 'checksum',
            'cors_config': 'cors_config',
            'domain_key': 'domain_key',
            'force_https': 'force_https',
            'gzip_enabled': 'gzip_enabled',
            'name': 'name',
            'port': 'port',
            'redirects': 'redirects',
            'ssl_config': 'ssl_config',
            'zone_key': 'zone_key'
        }

        self._aliases = aliases
        self._checksum = checksum
        self._cors_config = cors_config
        self._domain_key = domain_key
        self._force_https = force_https
        self._gzip_enabled = gzip_enabled
        self._name = name
        self._port = port
        self._redirects = redirects
        self._ssl_config = ssl_config
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainCreate of this DomainCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this DomainCreate.

        A set of alternate names that this Domain may be referenced by. May start ('*.') or end ('.*') with a wildcard. 

        :return: The aliases of this DomainCreate.
        :rtype: List[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this DomainCreate.

        A set of alternate names that this Domain may be referenced by. May start ('*.') or end ('.*') with a wildcard. 

        :param aliases: The aliases of this DomainCreate.
        :type aliases: List[str]
        """

        self._aliases = aliases

    @property
    def checksum(self):
        """Gets the checksum of this DomainCreate.


        :return: The checksum of this DomainCreate.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this DomainCreate.


        :param checksum: The checksum of this DomainCreate.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def cors_config(self):
        """Gets the cors_config of this DomainCreate.


        :return: The cors_config of this DomainCreate.
        :rtype: CORSConfig
        """
        return self._cors_config

    @cors_config.setter
    def cors_config(self, cors_config):
        """Sets the cors_config of this DomainCreate.


        :param cors_config: The cors_config of this DomainCreate.
        :type cors_config: CORSConfig
        """

        self._cors_config = cors_config

    @property
    def domain_key(self):
        """Gets the domain_key of this DomainCreate.


        :return: The domain_key of this DomainCreate.
        :rtype: str
        """
        return self._domain_key

    @domain_key.setter
    def domain_key(self, domain_key):
        """Sets the domain_key of this DomainCreate.


        :param domain_key: The domain_key of this DomainCreate.
        :type domain_key: str
        """

        self._domain_key = domain_key

    @property
    def force_https(self):
        """Gets the force_https of this DomainCreate.

        If set to true, requests must use TLS. If a request is not using TLS, (as determined by the scheme or the presence of X-Forwarded-Proto header), a 301 redirect will be sent telling the client to use HTTPS. 

        :return: The force_https of this DomainCreate.
        :rtype: bool
        """
        return self._force_https

    @force_https.setter
    def force_https(self, force_https):
        """Sets the force_https of this DomainCreate.

        If set to true, requests must use TLS. If a request is not using TLS, (as determined by the scheme or the presence of X-Forwarded-Proto header), a 301 redirect will be sent telling the client to use HTTPS. 

        :param force_https: The force_https of this DomainCreate.
        :type force_https: bool
        """

        self._force_https = force_https

    @property
    def gzip_enabled(self):
        """Gets the gzip_enabled of this DomainCreate.

        Experimental: if set to true will enable gzip compression on data that passes trough this domain

        :return: The gzip_enabled of this DomainCreate.
        :rtype: bool
        """
        return self._gzip_enabled

    @gzip_enabled.setter
    def gzip_enabled(self, gzip_enabled):
        """Sets the gzip_enabled of this DomainCreate.

        Experimental: if set to true will enable gzip compression on data that passes trough this domain

        :param gzip_enabled: The gzip_enabled of this DomainCreate.
        :type gzip_enabled: bool
        """

        self._gzip_enabled = gzip_enabled

    @property
    def name(self):
        """Gets the name of this DomainCreate.


        :return: The name of this DomainCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainCreate.


        :param name: The name of this DomainCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def port(self):
        """Gets the port of this DomainCreate.


        :return: The port of this DomainCreate.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DomainCreate.


        :param port: The port of this DomainCreate.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def redirects(self):
        """Gets the redirects of this DomainCreate.


        :return: The redirects of this DomainCreate.
        :rtype: List[Redirect]
        """
        return self._redirects

    @redirects.setter
    def redirects(self, redirects):
        """Sets the redirects of this DomainCreate.


        :param redirects: The redirects of this DomainCreate.
        :type redirects: List[Redirect]
        """

        self._redirects = redirects

    @property
    def ssl_config(self):
        """Gets the ssl_config of this DomainCreate.


        :return: The ssl_config of this DomainCreate.
        :rtype: SSLConfig
        """
        return self._ssl_config

    @ssl_config.setter
    def ssl_config(self, ssl_config):
        """Sets the ssl_config of this DomainCreate.


        :param ssl_config: The ssl_config of this DomainCreate.
        :type ssl_config: SSLConfig
        """

        self._ssl_config = ssl_config

    @property
    def zone_key(self):
        """Gets the zone_key of this DomainCreate.


        :return: The zone_key of this DomainCreate.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this DomainCreate.


        :param zone_key: The zone_key of this DomainCreate.
        :type zone_key: str
        """
        if zone_key is None:
            raise ValueError("Invalid value for `zone_key`, must not be `None`")

        self._zone_key = zone_key
