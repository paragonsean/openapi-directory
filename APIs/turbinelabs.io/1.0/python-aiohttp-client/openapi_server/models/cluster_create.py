# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.circuit_breakers import CircuitBreakers
from openapi_server.models.health_check import HealthCheck
from openapi_server.models.instance import Instance
from openapi_server.models.outlier_detection import OutlierDetection
from openapi_server import util


class ClusterCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit_breakers: CircuitBreakers=None, health_checks: List[HealthCheck]=None, instances: List[Instance]=None, name: str=None, outlier_detection: OutlierDetection=None, require_tls: bool=None, zone_key: str=None):
        """ClusterCreate - a model defined in OpenAPI

        :param circuit_breakers: The circuit_breakers of this ClusterCreate.
        :param health_checks: The health_checks of this ClusterCreate.
        :param instances: The instances of this ClusterCreate.
        :param name: The name of this ClusterCreate.
        :param outlier_detection: The outlier_detection of this ClusterCreate.
        :param require_tls: The require_tls of this ClusterCreate.
        :param zone_key: The zone_key of this ClusterCreate.
        """
        self.openapi_types = {
            'circuit_breakers': CircuitBreakers,
            'health_checks': List[HealthCheck],
            'instances': List[Instance],
            'name': str,
            'outlier_detection': OutlierDetection,
            'require_tls': bool,
            'zone_key': str
        }

        self.attribute_map = {
            'circuit_breakers': 'circuit_breakers',
            'health_checks': 'health_checks',
            'instances': 'instances',
            'name': 'name',
            'outlier_detection': 'outlier_detection',
            'require_tls': 'require_tls',
            'zone_key': 'zone_key'
        }

        self._circuit_breakers = circuit_breakers
        self._health_checks = health_checks
        self._instances = instances
        self._name = name
        self._outlier_detection = outlier_detection
        self._require_tls = require_tls
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterCreate of this ClusterCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit_breakers(self):
        """Gets the circuit_breakers of this ClusterCreate.


        :return: The circuit_breakers of this ClusterCreate.
        :rtype: CircuitBreakers
        """
        return self._circuit_breakers

    @circuit_breakers.setter
    def circuit_breakers(self, circuit_breakers):
        """Sets the circuit_breakers of this ClusterCreate.


        :param circuit_breakers: The circuit_breakers of this ClusterCreate.
        :type circuit_breakers: CircuitBreakers
        """

        self._circuit_breakers = circuit_breakers

    @property
    def health_checks(self):
        """Gets the health_checks of this ClusterCreate.


        :return: The health_checks of this ClusterCreate.
        :rtype: List[HealthCheck]
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this ClusterCreate.


        :param health_checks: The health_checks of this ClusterCreate.
        :type health_checks: List[HealthCheck]
        """

        self._health_checks = health_checks

    @property
    def instances(self):
        """Gets the instances of this ClusterCreate.


        :return: The instances of this ClusterCreate.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this ClusterCreate.


        :param instances: The instances of this ClusterCreate.
        :type instances: List[Instance]
        """

        self._instances = instances

    @property
    def name(self):
        """Gets the name of this ClusterCreate.


        :return: The name of this ClusterCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterCreate.


        :param name: The name of this ClusterCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outlier_detection(self):
        """Gets the outlier_detection of this ClusterCreate.


        :return: The outlier_detection of this ClusterCreate.
        :rtype: OutlierDetection
        """
        return self._outlier_detection

    @outlier_detection.setter
    def outlier_detection(self, outlier_detection):
        """Sets the outlier_detection of this ClusterCreate.


        :param outlier_detection: The outlier_detection of this ClusterCreate.
        :type outlier_detection: OutlierDetection
        """

        self._outlier_detection = outlier_detection

    @property
    def require_tls(self):
        """Gets the require_tls of this ClusterCreate.

        If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 

        :return: The require_tls of this ClusterCreate.
        :rtype: bool
        """
        return self._require_tls

    @require_tls.setter
    def require_tls(self, require_tls):
        """Sets the require_tls of this ClusterCreate.

        If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 

        :param require_tls: The require_tls of this ClusterCreate.
        :type require_tls: bool
        """

        self._require_tls = require_tls

    @property
    def zone_key(self):
        """Gets the zone_key of this ClusterCreate.


        :return: The zone_key of this ClusterCreate.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this ClusterCreate.


        :param zone_key: The zone_key of this ClusterCreate.
        :type zone_key: str
        """
        if zone_key is None:
            raise ValueError("Invalid value for `zone_key`, must not be `None`")

        self._zone_key = zone_key
