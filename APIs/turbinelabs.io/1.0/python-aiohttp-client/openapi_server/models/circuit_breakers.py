# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CircuitBreakers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_connections: int=None, max_pending_requests: int=None, max_requests: int=None, max_retries: int=None):
        """CircuitBreakers - a model defined in OpenAPI

        :param max_connections: The max_connections of this CircuitBreakers.
        :param max_pending_requests: The max_pending_requests of this CircuitBreakers.
        :param max_requests: The max_requests of this CircuitBreakers.
        :param max_retries: The max_retries of this CircuitBreakers.
        """
        self.openapi_types = {
            'max_connections': int,
            'max_pending_requests': int,
            'max_requests': int,
            'max_retries': int
        }

        self.attribute_map = {
            'max_connections': 'max_connections',
            'max_pending_requests': 'max_pending_requests',
            'max_requests': 'max_requests',
            'max_retries': 'max_retries'
        }

        self._max_connections = max_connections
        self._max_pending_requests = max_pending_requests
        self._max_requests = max_requests
        self._max_retries = max_retries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CircuitBreakers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CircuitBreakers of this CircuitBreakers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_connections(self):
        """Gets the max_connections of this CircuitBreakers.

        Maximum number of connections that will be established to all instances in a cluster within a proxy. If set to 0, no new connections will be created. If not specified, defaults to 1024. 

        :return: The max_connections of this CircuitBreakers.
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this CircuitBreakers.

        Maximum number of connections that will be established to all instances in a cluster within a proxy. If set to 0, no new connections will be created. If not specified, defaults to 1024. 

        :param max_connections: The max_connections of this CircuitBreakers.
        :type max_connections: int
        """

        self._max_connections = max_connections

    @property
    def max_pending_requests(self):
        """Gets the max_pending_requests of this CircuitBreakers.

        Maximum number of requests that will be queued while waiting on a connection pool to a cluster within a proxy. If set to 0, no requests will be queued. If not specified, defaults to 1024. 

        :return: The max_pending_requests of this CircuitBreakers.
        :rtype: int
        """
        return self._max_pending_requests

    @max_pending_requests.setter
    def max_pending_requests(self, max_pending_requests):
        """Sets the max_pending_requests of this CircuitBreakers.

        Maximum number of requests that will be queued while waiting on a connection pool to a cluster within a proxy. If set to 0, no requests will be queued. If not specified, defaults to 1024. 

        :param max_pending_requests: The max_pending_requests of this CircuitBreakers.
        :type max_pending_requests: int
        """

        self._max_pending_requests = max_pending_requests

    @property
    def max_requests(self):
        """Gets the max_requests of this CircuitBreakers.

        Maximum number of requests that can be outstanding to all instances in a cluster within  a proxy. Only applicable to HTTP/2 traffic since HTTP/1.1 clusters are governed by the maximum connections circuit breaker. If set to 0, no requests will be made. If not specified, defaults to 1024. 

        :return: The max_requests of this CircuitBreakers.
        :rtype: int
        """
        return self._max_requests

    @max_requests.setter
    def max_requests(self, max_requests):
        """Sets the max_requests of this CircuitBreakers.

        Maximum number of requests that can be outstanding to all instances in a cluster within  a proxy. Only applicable to HTTP/2 traffic since HTTP/1.1 clusters are governed by the maximum connections circuit breaker. If set to 0, no requests will be made. If not specified, defaults to 1024. 

        :param max_requests: The max_requests of this CircuitBreakers.
        :type max_requests: int
        """

        self._max_requests = max_requests

    @property
    def max_retries(self):
        """Gets the max_retries of this CircuitBreakers.

        Maximum number of retries that can be outstanding to all instances in a cluster within a proxy. If set to 0, requests will not be retried. If not specified, defaults to 3. 

        :return: The max_retries of this CircuitBreakers.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this CircuitBreakers.

        Maximum number of retries that can be outstanding to all instances in a cluster within a proxy. If set to 0, requests will not be retried. If not specified, defaults to 3. 

        :param max_retries: The max_retries of this CircuitBreakers.
        :type max_retries: int
        """

        self._max_retries = max_retries
