# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HeaderConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_sensitive: bool=None, invert: bool=None, name: str=None, value: str=None):
        """HeaderConstraint - a model defined in OpenAPI

        :param case_sensitive: The case_sensitive of this HeaderConstraint.
        :param invert: The invert of this HeaderConstraint.
        :param name: The name of this HeaderConstraint.
        :param value: The value of this HeaderConstraint.
        """
        self.openapi_types = {
            'case_sensitive': bool,
            'invert': bool,
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'case_sensitive': 'case_sensitive',
            'invert': 'invert',
            'name': 'name',
            'value': 'value'
        }

        self._case_sensitive = case_sensitive
        self._invert = invert
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HeaderConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HeaderConstraint of this HeaderConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this HeaderConstraint.

        If set, the header value check will be case sensitive.

        :return: The case_sensitive of this HeaderConstraint.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this HeaderConstraint.

        If set, the header value check will be case sensitive.

        :param case_sensitive: The case_sensitive of this HeaderConstraint.
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def invert(self):
        """Gets the invert of this HeaderConstraint.

        If set, the header constraint will succeed if the match described faile. 

        :return: The invert of this HeaderConstraint.
        :rtype: bool
        """
        return self._invert

    @invert.setter
    def invert(self, invert):
        """Sets the invert of this HeaderConstraint.

        If set, the header constraint will succeed if the match described faile. 

        :param invert: The invert of this HeaderConstraint.
        :type invert: bool
        """

        self._invert = invert

    @property
    def name(self):
        """Gets the name of this HeaderConstraint.

        The header that is being checked. This must match the regexp \"^[0-9a-zA-Z-]+$\". This is checked in a case insensitive manner. 

        :return: The name of this HeaderConstraint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HeaderConstraint.

        The header that is being checked. This must match the regexp \"^[0-9a-zA-Z-]+$\". This is checked in a case insensitive manner. 

        :param name: The name of this HeaderConstraint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this HeaderConstraint.

        If set the header's value will be compared to this. The default is to make case insensitive comparisons. 

        :return: The value of this HeaderConstraint.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this HeaderConstraint.

        If set the header's value will be compared to this. The default is to make case insensitive comparisons. 

        :param value: The value of this HeaderConstraint.
        :type value: str
        """

        self._value = value
