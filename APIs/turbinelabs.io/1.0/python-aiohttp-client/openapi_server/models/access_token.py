# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token_key: str=None, checksum: str=None, created_at: str=None, description: str=None, signed_token: str=None, user_key: str=None):
        """AccessToken - a model defined in OpenAPI

        :param access_token_key: The access_token_key of this AccessToken.
        :param checksum: The checksum of this AccessToken.
        :param created_at: The created_at of this AccessToken.
        :param description: The description of this AccessToken.
        :param signed_token: The signed_token of this AccessToken.
        :param user_key: The user_key of this AccessToken.
        """
        self.openapi_types = {
            'access_token_key': str,
            'checksum': str,
            'created_at': str,
            'description': str,
            'signed_token': str,
            'user_key': str
        }

        self.attribute_map = {
            'access_token_key': 'access_token_key',
            'checksum': 'checksum',
            'created_at': 'created_at',
            'description': 'description',
            'signed_token': 'signed_token',
            'user_key': 'user_key'
        }

        self._access_token_key = access_token_key
        self._checksum = checksum
        self._created_at = created_at
        self._description = description
        self._signed_token = signed_token
        self._user_key = user_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token_key(self):
        """Gets the access_token_key of this AccessToken.


        :return: The access_token_key of this AccessToken.
        :rtype: str
        """
        return self._access_token_key

    @access_token_key.setter
    def access_token_key(self, access_token_key):
        """Sets the access_token_key of this AccessToken.


        :param access_token_key: The access_token_key of this AccessToken.
        :type access_token_key: str
        """
        if access_token_key is None:
            raise ValueError("Invalid value for `access_token_key`, must not be `None`")

        self._access_token_key = access_token_key

    @property
    def checksum(self):
        """Gets the checksum of this AccessToken.


        :return: The checksum of this AccessToken.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this AccessToken.


        :param checksum: The checksum of this AccessToken.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def created_at(self):
        """Gets the created_at of this AccessToken.

        A timestamp that marks when a user was deleted. It is in the format yyyy-mm-ddThh:mm:ss.SZ. The timezone will always be UTC. 

        :return: The created_at of this AccessToken.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccessToken.

        A timestamp that marks when a user was deleted. It is in the format yyyy-mm-ddThh:mm:ss.SZ. The timezone will always be UTC. 

        :param created_at: The created_at of this AccessToken.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this AccessToken.


        :return: The description of this AccessToken.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessToken.


        :param description: The description of this AccessToken.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def signed_token(self):
        """Gets the signed_token of this AccessToken.

        This will be set only when an AccessToken is initially created 

        :return: The signed_token of this AccessToken.
        :rtype: str
        """
        return self._signed_token

    @signed_token.setter
    def signed_token(self, signed_token):
        """Sets the signed_token of this AccessToken.

        This will be set only when an AccessToken is initially created 

        :param signed_token: The signed_token of this AccessToken.
        :type signed_token: str
        """

        self._signed_token = signed_token

    @property
    def user_key(self):
        """Gets the user_key of this AccessToken.


        :return: The user_key of this AccessToken.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this AccessToken.


        :param user_key: The user_key of this AccessToken.
        :type user_key: str
        """
        if user_key is None:
            raise ValueError("Invalid value for `user_key`, must not be `None`")

        self._user_key = user_key
