# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadatum import Metadatum
from openapi_server import util


class Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behavior: str=None, _from: Metadatum=None, kind: str=None, to: Metadatum=None):
        """Match - a model defined in OpenAPI

        :param behavior: The behavior of this Match.
        :param _from: The _from of this Match.
        :param kind: The kind of this Match.
        :param to: The to of this Match.
        """
        self.openapi_types = {
            'behavior': str,
            '_from': Metadatum,
            'kind': str,
            'to': Metadatum
        }

        self.attribute_map = {
            'behavior': 'behavior',
            '_from': 'from',
            'kind': 'kind',
            'to': 'to'
        }

        self._behavior = behavior
        self.__from = _from
        self._kind = kind
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match of this Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behavior(self):
        """Gets the behavior of this Match.

        Defines how a request attribute should be matched. If not specified, defaults to `exact`. Valid values are   * exact   * regex   * range   * prefix   * suffix 

        :return: The behavior of this Match.
        :rtype: str
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this Match.

        Defines how a request attribute should be matched. If not specified, defaults to `exact`. Valid values are   * exact   * regex   * range   * prefix   * suffix 

        :param behavior: The behavior of this Match.
        :type behavior: str
        """

        self._behavior = behavior

    @property
    def _from(self):
        """Gets the _from of this Match.

        The request attribute key and value to match. `key` must always be defined while `value` can be unspecified (only if behavior is set to `exact`) to indicate that all values should be matched. If to.value is also unspecified, the matched value of the request will be used as a constraint on the destination cluster.  \\# Behavior   * `regex` if To.Value is unspecified, `value` must contain one and   only one subgroup. Otherwise, `value` must not be empty.   * `range` `value` must be specified and must be of the format   `[start_integer, end_integer)`. Start and end must be valid integer   values and `end_integer` must be greater than `start_integer`.   * `prefix`/`suffix` `value` must be specified  \\# Kind   * `cookie` does not support `range` behavior   * `query` does not support `regex` behavior 

        :return: The _from of this Match.
        :rtype: Metadatum
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Match.

        The request attribute key and value to match. `key` must always be defined while `value` can be unspecified (only if behavior is set to `exact`) to indicate that all values should be matched. If to.value is also unspecified, the matched value of the request will be used as a constraint on the destination cluster.  \\# Behavior   * `regex` if To.Value is unspecified, `value` must contain one and   only one subgroup. Otherwise, `value` must not be empty.   * `range` `value` must be specified and must be of the format   `[start_integer, end_integer)`. Start and end must be valid integer   values and `end_integer` must be greater than `start_integer`.   * `prefix`/`suffix` `value` must be specified  \\# Kind   * `cookie` does not support `range` behavior   * `query` does not support `regex` behavior 

        :param _from: The _from of this Match.
        :type _from: Metadatum
        """

        self.__from = _from

    @property
    def kind(self):
        """Gets the kind of this Match.

        Defines the attribute by which a request should be matched on. Valid values are   * cookie   * header   * query (for query parameter) 

        :return: The kind of this Match.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Match.

        Defines the attribute by which a request should be matched on. Valid values are   * cookie   * header   * query (for query parameter) 

        :param kind: The kind of this Match.
        :type kind: str
        """

        self._kind = kind

    @property
    def to(self):
        """Gets the to of this Match.

        The constraints on a cluster that a matched request should map to. If to.key is specified and to.value is not, the matched from.value will be used as a metadata constraint on instances in the destination cluster, keyed by to.key. If using `regex` behavior with multiple subgroups in from.value, variables `$1` through `$n`, where n is the number of subgroups in the matching regex, can be used to interpolate captured matches in to.value. 

        :return: The to of this Match.
        :rtype: Metadatum
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Match.

        The constraints on a cluster that a matched request should map to. If to.key is specified and to.value is not, the matched from.value will be used as a metadata constraint on instances in the destination cluster, keyed by to.key. If using `regex` behavior with multiple subgroups in from.value, variables `$1` through `$n`, where n is the number of subgroups in the matching regex, can be used to interpolate captured matches in to.value. 

        :param to: The to of this Match.
        :type to: Metadatum
        """

        self._to = to
