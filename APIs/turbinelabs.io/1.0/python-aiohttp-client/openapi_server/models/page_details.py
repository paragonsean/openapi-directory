# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PageDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str=None, has_more: bool=None, ref_id: str=None, total_entries: int=None):
        """PageDetails - a model defined in OpenAPI

        :param direction: The direction of this PageDetails.
        :param has_more: The has_more of this PageDetails.
        :param ref_id: The ref_id of this PageDetails.
        :param total_entries: The total_entries of this PageDetails.
        """
        self.openapi_types = {
            'direction': str,
            'has_more': bool,
            'ref_id': str,
            'total_entries': int
        }

        self.attribute_map = {
            'direction': 'direction',
            'has_more': 'has_more',
            'ref_id': 'ref_id',
            'total_entries': 'total_entries'
        }

        self._direction = direction
        self._has_more = has_more
        self._ref_id = ref_id
        self._total_entries = total_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageDetails of this PageDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this PageDetails.

        The direction walked from the ref_id when building this page.

        :return: The direction of this PageDetails.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PageDetails.

        The direction walked from the ref_id when building this page.

        :param direction: The direction of this PageDetails.
        :type direction: str
        """
        allowed_values = ["before", "after"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def has_more(self):
        """Gets the has_more of this PageDetails.

        Whether or not there are more entries to be requested after this page.

        :return: The has_more of this PageDetails.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this PageDetails.

        Whether or not there are more entries to be requested after this page.

        :param has_more: The has_more of this PageDetails.
        :type has_more: bool
        """

        self._has_more = has_more

    @property
    def ref_id(self):
        """Gets the ref_id of this PageDetails.

        The ID used as a reference when building this page.

        :return: The ref_id of this PageDetails.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this PageDetails.

        The ID used as a reference when building this page.

        :param ref_id: The ref_id of this PageDetails.
        :type ref_id: str
        """

        self._ref_id = ref_id

    @property
    def total_entries(self):
        """Gets the total_entries of this PageDetails.

        How many total entries would have been returned in the time window if it had not been paginated. 

        :return: The total_entries of this PageDetails.
        :rtype: int
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this PageDetails.

        How many total entries would have been returned in the time window if it had not been paginated. 

        :param total_entries: The total_entries of this PageDetails.
        :type total_entries: int
        """

        self._total_entries = total_entries
