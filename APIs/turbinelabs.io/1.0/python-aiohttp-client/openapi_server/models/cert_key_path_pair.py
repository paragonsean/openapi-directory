# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertKeyPathPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_path: str=None, key_path: str=None):
        """CertKeyPathPair - a model defined in OpenAPI

        :param certificate_path: The certificate_path of this CertKeyPathPair.
        :param key_path: The key_path of this CertKeyPathPair.
        """
        self.openapi_types = {
            'certificate_path': str,
            'key_path': str
        }

        self.attribute_map = {
            'certificate_path': 'certificate_path',
            'key_path': 'key_path'
        }

        self._certificate_path = certificate_path
        self._key_path = key_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertKeyPathPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertKeyPathPair of this CertKeyPathPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_path(self):
        """Gets the certificate_path of this CertKeyPathPair.

        Path to a certificate in the PEM format for the domain. If multiple certificates need to be specified then should be contained in this file in the following order: first the primary certificate followed by any intermediary certificats. 

        :return: The certificate_path of this CertKeyPathPair.
        :rtype: str
        """
        return self._certificate_path

    @certificate_path.setter
    def certificate_path(self, certificate_path):
        """Sets the certificate_path of this CertKeyPathPair.

        Path to a certificate in the PEM format for the domain. If multiple certificates need to be specified then should be contained in this file in the following order: first the primary certificate followed by any intermediary certificats. 

        :param certificate_path: The certificate_path of this CertKeyPathPair.
        :type certificate_path: str
        """
        if certificate_path is None:
            raise ValueError("Invalid value for `certificate_path`, must not be `None`")

        self._certificate_path = certificate_path

    @property
    def key_path(self):
        """Gets the key_path of this CertKeyPathPair.

        Path to a file with the secret key in the PEM format for the domain. 

        :return: The key_path of this CertKeyPathPair.
        :rtype: str
        """
        return self._key_path

    @key_path.setter
    def key_path(self, key_path):
        """Sets the key_path of this CertKeyPathPair.

        Path to a file with the secret key in the PEM format for the domain. 

        :param key_path: The key_path of this CertKeyPathPair.
        :type key_path: str
        """
        if key_path is None:
            raise ValueError("Invalid value for `key_path`, must not be `None`")

        self._key_path = key_path
