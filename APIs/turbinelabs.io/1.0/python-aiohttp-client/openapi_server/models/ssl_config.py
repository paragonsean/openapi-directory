# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cert_key_path_pair import CertKeyPathPair
from openapi_server import util


class SSLConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_key_pairs: List[CertKeyPathPair]=None, cipher_filter: str=None, protocols: List[str]=None):
        """SSLConfig - a model defined in OpenAPI

        :param cert_key_pairs: The cert_key_pairs of this SSLConfig.
        :param cipher_filter: The cipher_filter of this SSLConfig.
        :param protocols: The protocols of this SSLConfig.
        """
        self.openapi_types = {
            'cert_key_pairs': List[CertKeyPathPair],
            'cipher_filter': str,
            'protocols': List[str]
        }

        self.attribute_map = {
            'cert_key_pairs': 'cert_key_pairs',
            'cipher_filter': 'cipher_filter',
            'protocols': 'protocols'
        }

        self._cert_key_pairs = cert_key_pairs
        self._cipher_filter = cipher_filter
        self._protocols = protocols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SSLConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SSLConfig of this SSLConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_key_pairs(self):
        """Gets the cert_key_pairs of this SSLConfig.

        SSLConfig must have one cert_key_pairs entry specified.

        :return: The cert_key_pairs of this SSLConfig.
        :rtype: List[CertKeyPathPair]
        """
        return self._cert_key_pairs

    @cert_key_pairs.setter
    def cert_key_pairs(self, cert_key_pairs):
        """Sets the cert_key_pairs of this SSLConfig.

        SSLConfig must have one cert_key_pairs entry specified.

        :param cert_key_pairs: The cert_key_pairs of this SSLConfig.
        :type cert_key_pairs: List[CertKeyPathPair]
        """
        if cert_key_pairs is None:
            raise ValueError("Invalid value for `cert_key_pairs`, must not be `None`")

        self._cert_key_pairs = cert_key_pairs

    @property
    def cipher_filter(self):
        """Gets the cipher_filter of this SSLConfig.

        An OpenSSL compatible filter string indicating the ciphers acceptable for this proxy to use while communicating with clients. The default value is EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH. For more information see https://wiki.openssl.org/index.php/Manual:Ciphers(1) 

        :return: The cipher_filter of this SSLConfig.
        :rtype: str
        """
        return self._cipher_filter

    @cipher_filter.setter
    def cipher_filter(self, cipher_filter):
        """Sets the cipher_filter of this SSLConfig.

        An OpenSSL compatible filter string indicating the ciphers acceptable for this proxy to use while communicating with clients. The default value is EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH. For more information see https://wiki.openssl.org/index.php/Manual:Ciphers(1) 

        :param cipher_filter: The cipher_filter of this SSLConfig.
        :type cipher_filter: str
        """

        self._cipher_filter = cipher_filter

    @property
    def protocols(self):
        """Gets the protocols of this SSLConfig.

        A list of acceptable SSL/TLS protocol. The default values are TLSv1, TLSv1.1, TLSv1.2. Additional valid values are SSLv2 and SSLv3. 

        :return: The protocols of this SSLConfig.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this SSLConfig.

        A list of acceptable SSL/TLS protocol. The default values are TLSv1, TLSv1.1, TLSv1.2. Additional valid values are SSLv2 and SSLv3. 

        :param protocols: The protocols of this SSLConfig.
        :type protocols: List[str]
        """

        self._protocols = protocols
