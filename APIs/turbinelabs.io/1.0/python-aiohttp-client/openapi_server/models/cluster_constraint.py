# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadatum import Metadatum
from openapi_server.models.response_data import ResponseData
from openapi_server import util


class ClusterConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_key: str=None, constraint_key: str=None, metadata: List[Metadatum]=None, properties: List[Metadatum]=None, response_data: ResponseData=None, weight: int=None):
        """ClusterConstraint - a model defined in OpenAPI

        :param cluster_key: The cluster_key of this ClusterConstraint.
        :param constraint_key: The constraint_key of this ClusterConstraint.
        :param metadata: The metadata of this ClusterConstraint.
        :param properties: The properties of this ClusterConstraint.
        :param response_data: The response_data of this ClusterConstraint.
        :param weight: The weight of this ClusterConstraint.
        """
        self.openapi_types = {
            'cluster_key': str,
            'constraint_key': str,
            'metadata': List[Metadatum],
            'properties': List[Metadatum],
            'response_data': ResponseData,
            'weight': int
        }

        self.attribute_map = {
            'cluster_key': 'cluster_key',
            'constraint_key': 'constraint_key',
            'metadata': 'metadata',
            'properties': 'properties',
            'response_data': 'response_data',
            'weight': 'weight'
        }

        self._cluster_key = cluster_key
        self._constraint_key = constraint_key
        self._metadata = metadata
        self._properties = properties
        self._response_data = response_data
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterConstraint of this ClusterConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_key(self):
        """Gets the cluster_key of this ClusterConstraint.


        :return: The cluster_key of this ClusterConstraint.
        :rtype: str
        """
        return self._cluster_key

    @cluster_key.setter
    def cluster_key(self, cluster_key):
        """Sets the cluster_key of this ClusterConstraint.


        :param cluster_key: The cluster_key of this ClusterConstraint.
        :type cluster_key: str
        """

        self._cluster_key = cluster_key

    @property
    def constraint_key(self):
        """Gets the constraint_key of this ClusterConstraint.


        :return: The constraint_key of this ClusterConstraint.
        :rtype: str
        """
        return self._constraint_key

    @constraint_key.setter
    def constraint_key(self, constraint_key):
        """Sets the constraint_key of this ClusterConstraint.


        :param constraint_key: The constraint_key of this ClusterConstraint.
        :type constraint_key: str
        """

        self._constraint_key = constraint_key

    @property
    def metadata(self):
        """Gets the metadata of this ClusterConstraint.


        :return: The metadata of this ClusterConstraint.
        :rtype: List[Metadatum]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ClusterConstraint.


        :param metadata: The metadata of this ClusterConstraint.
        :type metadata: List[Metadatum]
        """

        self._metadata = metadata

    @property
    def properties(self):
        """Gets the properties of this ClusterConstraint.


        :return: The properties of this ClusterConstraint.
        :rtype: List[Metadatum]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ClusterConstraint.


        :param properties: The properties of this ClusterConstraint.
        :type properties: List[Metadatum]
        """

        self._properties = properties

    @property
    def response_data(self):
        """Gets the response_data of this ClusterConstraint.

        When a request is served by a cluster selected by this constraint annotate the response with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from ClusterConstarint takes precedence over those from a Route or SharedRules object. 

        :return: The response_data of this ClusterConstraint.
        :rtype: ResponseData
        """
        return self._response_data

    @response_data.setter
    def response_data(self, response_data):
        """Sets the response_data of this ClusterConstraint.

        When a request is served by a cluster selected by this constraint annotate the response with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from ClusterConstarint takes precedence over those from a Route or SharedRules object. 

        :param response_data: The response_data of this ClusterConstraint.
        :type response_data: ResponseData
        """

        self._response_data = response_data

    @property
    def weight(self):
        """Gets the weight of this ClusterConstraint.


        :return: The weight of this ClusterConstraint.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ClusterConstraint.


        :param weight: The weight of this ClusterConstraint.
        :type weight: int
        """

        self._weight = weight
