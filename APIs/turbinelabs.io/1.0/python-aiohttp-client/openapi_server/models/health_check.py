# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_check_health_checker import HealthCheckHealthChecker
from openapi_server import util


class HealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_checker: HealthCheckHealthChecker=None, healthy_edge_interval_msec: int=None, healthy_threshold: int=None, interval_jitter_msec: int=None, interval_msec: int=None, no_traffic_interval_msec: int=None, reuse_connection: bool=None, timeout_msec: int=None, unhealthy_edge_interval_msec: int=None, unhealthy_interval_msec: int=None, unhealthy_threshold: int=None):
        """HealthCheck - a model defined in OpenAPI

        :param health_checker: The health_checker of this HealthCheck.
        :param healthy_edge_interval_msec: The healthy_edge_interval_msec of this HealthCheck.
        :param healthy_threshold: The healthy_threshold of this HealthCheck.
        :param interval_jitter_msec: The interval_jitter_msec of this HealthCheck.
        :param interval_msec: The interval_msec of this HealthCheck.
        :param no_traffic_interval_msec: The no_traffic_interval_msec of this HealthCheck.
        :param reuse_connection: The reuse_connection of this HealthCheck.
        :param timeout_msec: The timeout_msec of this HealthCheck.
        :param unhealthy_edge_interval_msec: The unhealthy_edge_interval_msec of this HealthCheck.
        :param unhealthy_interval_msec: The unhealthy_interval_msec of this HealthCheck.
        :param unhealthy_threshold: The unhealthy_threshold of this HealthCheck.
        """
        self.openapi_types = {
            'health_checker': HealthCheckHealthChecker,
            'healthy_edge_interval_msec': int,
            'healthy_threshold': int,
            'interval_jitter_msec': int,
            'interval_msec': int,
            'no_traffic_interval_msec': int,
            'reuse_connection': bool,
            'timeout_msec': int,
            'unhealthy_edge_interval_msec': int,
            'unhealthy_interval_msec': int,
            'unhealthy_threshold': int
        }

        self.attribute_map = {
            'health_checker': 'health_checker',
            'healthy_edge_interval_msec': 'healthy_edge_interval_msec',
            'healthy_threshold': 'healthy_threshold',
            'interval_jitter_msec': 'interval_jitter_msec',
            'interval_msec': 'interval_msec',
            'no_traffic_interval_msec': 'no_traffic_interval_msec',
            'reuse_connection': 'reuse_connection',
            'timeout_msec': 'timeout_msec',
            'unhealthy_edge_interval_msec': 'unhealthy_edge_interval_msec',
            'unhealthy_interval_msec': 'unhealthy_interval_msec',
            'unhealthy_threshold': 'unhealthy_threshold'
        }

        self._health_checker = health_checker
        self._healthy_edge_interval_msec = healthy_edge_interval_msec
        self._healthy_threshold = healthy_threshold
        self._interval_jitter_msec = interval_jitter_msec
        self._interval_msec = interval_msec
        self._no_traffic_interval_msec = no_traffic_interval_msec
        self._reuse_connection = reuse_connection
        self._timeout_msec = timeout_msec
        self._unhealthy_edge_interval_msec = unhealthy_edge_interval_msec
        self._unhealthy_interval_msec = unhealthy_interval_msec
        self._unhealthy_threshold = unhealthy_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheck of this HealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_checker(self):
        """Gets the health_checker of this HealthCheck.


        :return: The health_checker of this HealthCheck.
        :rtype: HealthCheckHealthChecker
        """
        return self._health_checker

    @health_checker.setter
    def health_checker(self, health_checker):
        """Sets the health_checker of this HealthCheck.


        :param health_checker: The health_checker of this HealthCheck.
        :type health_checker: HealthCheckHealthChecker
        """
        if health_checker is None:
            raise ValueError("Invalid value for `health_checker`, must not be `None`")

        self._health_checker = health_checker

    @property
    def healthy_edge_interval_msec(self):
        """Gets the healthy_edge_interval_msec of this HealthCheck.

        Interval used for the first health check right after a host is marked as healthy. For subsequent health checks, the proxy will shift back to using the standard health check interval(\\'interval_msec\\') that is defined. Defaults to the same value as \\'interval_msec\\' if not specified. 

        :return: The healthy_edge_interval_msec of this HealthCheck.
        :rtype: int
        """
        return self._healthy_edge_interval_msec

    @healthy_edge_interval_msec.setter
    def healthy_edge_interval_msec(self, healthy_edge_interval_msec):
        """Sets the healthy_edge_interval_msec of this HealthCheck.

        Interval used for the first health check right after a host is marked as healthy. For subsequent health checks, the proxy will shift back to using the standard health check interval(\\'interval_msec\\') that is defined. Defaults to the same value as \\'interval_msec\\' if not specified. 

        :param healthy_edge_interval_msec: The healthy_edge_interval_msec of this HealthCheck.
        :type healthy_edge_interval_msec: int
        """

        self._healthy_edge_interval_msec = healthy_edge_interval_msec

    @property
    def healthy_threshold(self):
        """Gets the healthy_threshold of this HealthCheck.

        The number of healthy health checks required before a host is marked healthy. Note that during startup, only a single successful health check is required to mark a host healthy. 

        :return: The healthy_threshold of this HealthCheck.
        :rtype: int
        """
        return self._healthy_threshold

    @healthy_threshold.setter
    def healthy_threshold(self, healthy_threshold):
        """Sets the healthy_threshold of this HealthCheck.

        The number of healthy health checks required before a host is marked healthy. Note that during startup, only a single successful health check is required to mark a host healthy. 

        :param healthy_threshold: The healthy_threshold of this HealthCheck.
        :type healthy_threshold: int
        """
        if healthy_threshold is None:
            raise ValueError("Invalid value for `healthy_threshold`, must not be `None`")

        self._healthy_threshold = healthy_threshold

    @property
    def interval_jitter_msec(self):
        """Gets the interval_jitter_msec of this HealthCheck.

        An optional jitter amount that is added to each interval value calculated by the proxy. If not specified, defaults to 0. 

        :return: The interval_jitter_msec of this HealthCheck.
        :rtype: int
        """
        return self._interval_jitter_msec

    @interval_jitter_msec.setter
    def interval_jitter_msec(self, interval_jitter_msec):
        """Sets the interval_jitter_msec of this HealthCheck.

        An optional jitter amount that is added to each interval value calculated by the proxy. If not specified, defaults to 0. 

        :param interval_jitter_msec: The interval_jitter_msec of this HealthCheck.
        :type interval_jitter_msec: int
        """

        self._interval_jitter_msec = interval_jitter_msec

    @property
    def interval_msec(self):
        """Gets the interval_msec of this HealthCheck.

        The interval between health checks. The first round of health checks will occur during startup before any traffic is routed to a cluster. This means that the \\'no_traffic_interval_msec\\' value will be used as the first interval of health checks. 

        :return: The interval_msec of this HealthCheck.
        :rtype: int
        """
        return self._interval_msec

    @interval_msec.setter
    def interval_msec(self, interval_msec):
        """Sets the interval_msec of this HealthCheck.

        The interval between health checks. The first round of health checks will occur during startup before any traffic is routed to a cluster. This means that the \\'no_traffic_interval_msec\\' value will be used as the first interval of health checks. 

        :param interval_msec: The interval_msec of this HealthCheck.
        :type interval_msec: int
        """
        if interval_msec is None:
            raise ValueError("Invalid value for `interval_msec`, must not be `None`")

        self._interval_msec = interval_msec

    @property
    def no_traffic_interval_msec(self):
        """Gets the no_traffic_interval_msec of this HealthCheck.

        Interval used when a cluster has never had traffic routed to it. It allows cluster information to be kept up to date, without sending a potentially large amount of active health checking traffic for no reason. Once a cluster has been used for traffic routing, The proxy will shift back to using the standard health check interval that is defined. Note that this interval takes precedence over any other. Defaults to 60s. 

        :return: The no_traffic_interval_msec of this HealthCheck.
        :rtype: int
        """
        return self._no_traffic_interval_msec

    @no_traffic_interval_msec.setter
    def no_traffic_interval_msec(self, no_traffic_interval_msec):
        """Sets the no_traffic_interval_msec of this HealthCheck.

        Interval used when a cluster has never had traffic routed to it. It allows cluster information to be kept up to date, without sending a potentially large amount of active health checking traffic for no reason. Once a cluster has been used for traffic routing, The proxy will shift back to using the standard health check interval that is defined. Note that this interval takes precedence over any other. Defaults to 60s. 

        :param no_traffic_interval_msec: The no_traffic_interval_msec of this HealthCheck.
        :type no_traffic_interval_msec: int
        """

        self._no_traffic_interval_msec = no_traffic_interval_msec

    @property
    def reuse_connection(self):
        """Gets the reuse_connection of this HealthCheck.

        Whether or not to reuse health check connections between health checks. Default is true. 

        :return: The reuse_connection of this HealthCheck.
        :rtype: bool
        """
        return self._reuse_connection

    @reuse_connection.setter
    def reuse_connection(self, reuse_connection):
        """Sets the reuse_connection of this HealthCheck.

        Whether or not to reuse health check connections between health checks. Default is true. 

        :param reuse_connection: The reuse_connection of this HealthCheck.
        :type reuse_connection: bool
        """

        self._reuse_connection = reuse_connection

    @property
    def timeout_msec(self):
        """Gets the timeout_msec of this HealthCheck.

        The time to wait for a health check response. If the timeout is reached without a response, the health check attempt will be considered a failure. This is a required field and must be greater than 0. 

        :return: The timeout_msec of this HealthCheck.
        :rtype: int
        """
        return self._timeout_msec

    @timeout_msec.setter
    def timeout_msec(self, timeout_msec):
        """Sets the timeout_msec of this HealthCheck.

        The time to wait for a health check response. If the timeout is reached without a response, the health check attempt will be considered a failure. This is a required field and must be greater than 0. 

        :param timeout_msec: The timeout_msec of this HealthCheck.
        :type timeout_msec: int
        """
        if timeout_msec is None:
            raise ValueError("Invalid value for `timeout_msec`, must not be `None`")

        self._timeout_msec = timeout_msec

    @property
    def unhealthy_edge_interval_msec(self):
        """Gets the unhealthy_edge_interval_msec of this HealthCheck.

        Interval used for the first health check right after a host is marked as unhealthy. For subsequent health checks, the proxy will shift back to using either \\'unhealthy_interval_msec\\' if present or the standard health check interval, \\'interval_msec\\'. 

        :return: The unhealthy_edge_interval_msec of this HealthCheck.
        :rtype: int
        """
        return self._unhealthy_edge_interval_msec

    @unhealthy_edge_interval_msec.setter
    def unhealthy_edge_interval_msec(self, unhealthy_edge_interval_msec):
        """Sets the unhealthy_edge_interval_msec of this HealthCheck.

        Interval used for the first health check right after a host is marked as unhealthy. For subsequent health checks, the proxy will shift back to using either \\'unhealthy_interval_msec\\' if present or the standard health check interval, \\'interval_msec\\'. 

        :param unhealthy_edge_interval_msec: The unhealthy_edge_interval_msec of this HealthCheck.
        :type unhealthy_edge_interval_msec: int
        """

        self._unhealthy_edge_interval_msec = unhealthy_edge_interval_msec

    @property
    def unhealthy_interval_msec(self):
        """Gets the unhealthy_interval_msec of this HealthCheck.

        Interval used for hosts that are marked as unhealthy. As soon as the host is marked as healthy, The proxy will shift back to using the standard health check interval that is defined. This defaults to the same value as \\'interval_msec\\' if not specified. 

        :return: The unhealthy_interval_msec of this HealthCheck.
        :rtype: int
        """
        return self._unhealthy_interval_msec

    @unhealthy_interval_msec.setter
    def unhealthy_interval_msec(self, unhealthy_interval_msec):
        """Sets the unhealthy_interval_msec of this HealthCheck.

        Interval used for hosts that are marked as unhealthy. As soon as the host is marked as healthy, The proxy will shift back to using the standard health check interval that is defined. This defaults to the same value as \\'interval_msec\\' if not specified. 

        :param unhealthy_interval_msec: The unhealthy_interval_msec of this HealthCheck.
        :type unhealthy_interval_msec: int
        """

        self._unhealthy_interval_msec = unhealthy_interval_msec

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this HealthCheck.

        The number of unhealthy health checks required before a host is marked unhealthy. Note that for *http* health checking, if a host responds with 503, this threshold is ignored and the host is considered unhealthy immediately. 

        :return: The unhealthy_threshold of this HealthCheck.
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this HealthCheck.

        The number of unhealthy health checks required before a host is marked unhealthy. Note that for *http* health checking, if a host responds with 503, this threshold is ignored and the host is considered unhealthy immediately. 

        :param unhealthy_threshold: The unhealthy_threshold of this HealthCheck.
        :type unhealthy_threshold: int
        """
        if unhealthy_threshold is None:
            raise ValueError("Invalid value for `unhealthy_threshold`, must not be `None`")

        self._unhealthy_threshold = unhealthy_threshold
