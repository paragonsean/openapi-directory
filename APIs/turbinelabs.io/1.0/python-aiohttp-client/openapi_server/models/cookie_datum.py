# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CookieDatum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, expires_in_sec: int=None, http_only: bool=None, name: str=None, path: str=None, same_site: str=None, secure: bool=None, value: str=None, value_is_literal: bool=None):
        """CookieDatum - a model defined in OpenAPI

        :param domain: The domain of this CookieDatum.
        :param expires_in_sec: The expires_in_sec of this CookieDatum.
        :param http_only: The http_only of this CookieDatum.
        :param name: The name of this CookieDatum.
        :param path: The path of this CookieDatum.
        :param same_site: The same_site of this CookieDatum.
        :param secure: The secure of this CookieDatum.
        :param value: The value of this CookieDatum.
        :param value_is_literal: The value_is_literal of this CookieDatum.
        """
        self.openapi_types = {
            'domain': str,
            'expires_in_sec': int,
            'http_only': bool,
            'name': str,
            'path': str,
            'same_site': str,
            'secure': bool,
            'value': str,
            'value_is_literal': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'expires_in_sec': 'expires_in_sec',
            'http_only': 'http_only',
            'name': 'name',
            'path': 'path',
            'same_site': 'same_site',
            'secure': 'secure',
            'value': 'value',
            'value_is_literal': 'value_is_literal'
        }

        self._domain = domain
        self._expires_in_sec = expires_in_sec
        self._http_only = http_only
        self._name = name
        self._path = path
        self._same_site = same_site
        self._secure = secure
        self._value = value
        self._value_is_literal = value_is_literal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CookieDatum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CookieDatum of this CookieDatum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this CookieDatum.

        Specifies the hosts to hich a cookie will be sent. Maps directly to a cookie's 'Domain' attribute. 

        :return: The domain of this CookieDatum.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CookieDatum.

        Specifies the hosts to hich a cookie will be sent. Maps directly to a cookie's 'Domain' attribute. 

        :param domain: The domain of this CookieDatum.
        :type domain: str
        """

        self._domain = domain

    @property
    def expires_in_sec(self):
        """Gets the expires_in_sec of this CookieDatum.

        This indicates how long a cookie will be valid, in seconds. If not set the default is to provide no expiration information. If set to 0 the cookie will have an 'Expires' attribute set to 'Mon, 1 Jan 0001 12:00:00 UTC'. For values greater than 0 the cookie's 'Max-Age' attribute will be set to that value. 

        :return: The expires_in_sec of this CookieDatum.
        :rtype: int
        """
        return self._expires_in_sec

    @expires_in_sec.setter
    def expires_in_sec(self, expires_in_sec):
        """Sets the expires_in_sec of this CookieDatum.

        This indicates how long a cookie will be valid, in seconds. If not set the default is to provide no expiration information. If set to 0 the cookie will have an 'Expires' attribute set to 'Mon, 1 Jan 0001 12:00:00 UTC'. For values greater than 0 the cookie's 'Max-Age' attribute will be set to that value. 

        :param expires_in_sec: The expires_in_sec of this CookieDatum.
        :type expires_in_sec: int
        """

        self._expires_in_sec = expires_in_sec

    @property
    def http_only(self):
        """Gets the http_only of this CookieDatum.

        If set the cookie value will not be accessible via Document.cookie. Maps directly to 'HttpOnly' attribute. 

        :return: The http_only of this CookieDatum.
        :rtype: bool
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this CookieDatum.

        If set the cookie value will not be accessible via Document.cookie. Maps directly to 'HttpOnly' attribute. 

        :param http_only: The http_only of this CookieDatum.
        :type http_only: bool
        """

        self._http_only = http_only

    @property
    def name(self):
        """Gets the name of this CookieDatum.

        The name of the cookie that will be attached to the response sent.

        :return: The name of this CookieDatum.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CookieDatum.

        The name of the cookie that will be attached to the response sent.

        :param name: The name of this CookieDatum.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this CookieDatum.

        Specifies the path a cookie will be associated with. Maps directly to the 'Path' attribute. 

        :return: The path of this CookieDatum.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CookieDatum.

        Specifies the path a cookie will be associated with. Maps directly to the 'Path' attribute. 

        :param path: The path of this CookieDatum.
        :type path: str
        """

        self._path = path

    @property
    def same_site(self):
        """Gets the same_site of this CookieDatum.

        Allows assertions how a cookie should behave wend making cross-site requests. Maps directly to 'SameSite' attribute. If unset no guidance will be included in the cookie. 

        :return: The same_site of this CookieDatum.
        :rtype: str
        """
        return self._same_site

    @same_site.setter
    def same_site(self, same_site):
        """Sets the same_site of this CookieDatum.

        Allows assertions how a cookie should behave wend making cross-site requests. Maps directly to 'SameSite' attribute. If unset no guidance will be included in the cookie. 

        :param same_site: The same_site of this CookieDatum.
        :type same_site: str
        """
        allowed_values = ["Strict", "Lax"]  # noqa: E501
        if same_site not in allowed_values:
            raise ValueError(
                "Invalid value for `same_site` ({0}), must be one of {1}"
                .format(same_site, allowed_values)
            )

        self._same_site = same_site

    @property
    def secure(self):
        """Gets the secure of this CookieDatum.

        If set the cookie will only be sent on subsequent requests when accessing a server via HTTPS. Maps directly to 'Secure' attribute. 

        :return: The secure of this CookieDatum.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this CookieDatum.

        If set the cookie will only be sent on subsequent requests when accessing a server via HTTPS. Maps directly to 'Secure' attribute. 

        :param secure: The secure of this CookieDatum.
        :type secure: bool
        """

        self._secure = secure

    @property
    def value(self):
        """Gets the value of this CookieDatum.

        A literal value to send as the cookie value or a reference to some metadatum value set on the Cluster Intsance that handles a specific request. 

        :return: The value of this CookieDatum.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CookieDatum.

        A literal value to send as the cookie value or a reference to some metadatum value set on the Cluster Intsance that handles a specific request. 

        :param value: The value of this CookieDatum.
        :type value: str
        """

        self._value = value

    @property
    def value_is_literal(self):
        """Gets the value_is_literal of this CookieDatum.

        If true then the value attribute is treated as a literal and no attempt to resolve to a server metadatum. 

        :return: The value_is_literal of this CookieDatum.
        :rtype: bool
        """
        return self._value_is_literal

    @value_is_literal.setter
    def value_is_literal(self, value_is_literal):
        """Sets the value_is_literal of this CookieDatum.

        If true then the value attribute is treated as a literal and no attempt to resolve to a server metadatum. 

        :param value_is_literal: The value_is_literal of this CookieDatum.
        :type value_is_literal: bool
        """

        self._value_is_literal = value_is_literal
