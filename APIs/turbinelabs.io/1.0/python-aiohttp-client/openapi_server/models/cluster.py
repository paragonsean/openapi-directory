# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.circuit_breakers import CircuitBreakers
from openapi_server.models.health_check import HealthCheck
from openapi_server.models.instance import Instance
from openapi_server.models.outlier_detection import OutlierDetection
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit_breakers: CircuitBreakers=None, health_checks: List[HealthCheck]=None, instances: List[Instance]=None, name: str=None, outlier_detection: OutlierDetection=None, require_tls: bool=None, zone_key: str=None, checksum: str=None, cluster_key: str=None):
        """Cluster - a model defined in OpenAPI

        :param circuit_breakers: The circuit_breakers of this Cluster.
        :param health_checks: The health_checks of this Cluster.
        :param instances: The instances of this Cluster.
        :param name: The name of this Cluster.
        :param outlier_detection: The outlier_detection of this Cluster.
        :param require_tls: The require_tls of this Cluster.
        :param zone_key: The zone_key of this Cluster.
        :param checksum: The checksum of this Cluster.
        :param cluster_key: The cluster_key of this Cluster.
        """
        self.openapi_types = {
            'circuit_breakers': CircuitBreakers,
            'health_checks': List[HealthCheck],
            'instances': List[Instance],
            'name': str,
            'outlier_detection': OutlierDetection,
            'require_tls': bool,
            'zone_key': str,
            'checksum': str,
            'cluster_key': str
        }

        self.attribute_map = {
            'circuit_breakers': 'circuit_breakers',
            'health_checks': 'health_checks',
            'instances': 'instances',
            'name': 'name',
            'outlier_detection': 'outlier_detection',
            'require_tls': 'require_tls',
            'zone_key': 'zone_key',
            'checksum': 'checksum',
            'cluster_key': 'cluster_key'
        }

        self._circuit_breakers = circuit_breakers
        self._health_checks = health_checks
        self._instances = instances
        self._name = name
        self._outlier_detection = outlier_detection
        self._require_tls = require_tls
        self._zone_key = zone_key
        self._checksum = checksum
        self._cluster_key = cluster_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit_breakers(self):
        """Gets the circuit_breakers of this Cluster.


        :return: The circuit_breakers of this Cluster.
        :rtype: CircuitBreakers
        """
        return self._circuit_breakers

    @circuit_breakers.setter
    def circuit_breakers(self, circuit_breakers):
        """Sets the circuit_breakers of this Cluster.


        :param circuit_breakers: The circuit_breakers of this Cluster.
        :type circuit_breakers: CircuitBreakers
        """

        self._circuit_breakers = circuit_breakers

    @property
    def health_checks(self):
        """Gets the health_checks of this Cluster.


        :return: The health_checks of this Cluster.
        :rtype: List[HealthCheck]
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this Cluster.


        :param health_checks: The health_checks of this Cluster.
        :type health_checks: List[HealthCheck]
        """

        self._health_checks = health_checks

    @property
    def instances(self):
        """Gets the instances of this Cluster.


        :return: The instances of this Cluster.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Cluster.


        :param instances: The instances of this Cluster.
        :type instances: List[Instance]
        """

        self._instances = instances

    @property
    def name(self):
        """Gets the name of this Cluster.


        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outlier_detection(self):
        """Gets the outlier_detection of this Cluster.


        :return: The outlier_detection of this Cluster.
        :rtype: OutlierDetection
        """
        return self._outlier_detection

    @outlier_detection.setter
    def outlier_detection(self, outlier_detection):
        """Sets the outlier_detection of this Cluster.


        :param outlier_detection: The outlier_detection of this Cluster.
        :type outlier_detection: OutlierDetection
        """

        self._outlier_detection = outlier_detection

    @property
    def require_tls(self):
        """Gets the require_tls of this Cluster.

        If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 

        :return: The require_tls of this Cluster.
        :rtype: bool
        """
        return self._require_tls

    @require_tls.setter
    def require_tls(self, require_tls):
        """Sets the require_tls of this Cluster.

        If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 

        :param require_tls: The require_tls of this Cluster.
        :type require_tls: bool
        """

        self._require_tls = require_tls

    @property
    def zone_key(self):
        """Gets the zone_key of this Cluster.


        :return: The zone_key of this Cluster.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this Cluster.


        :param zone_key: The zone_key of this Cluster.
        :type zone_key: str
        """
        if zone_key is None:
            raise ValueError("Invalid value for `zone_key`, must not be `None`")

        self._zone_key = zone_key

    @property
    def checksum(self):
        """Gets the checksum of this Cluster.


        :return: The checksum of this Cluster.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Cluster.


        :param checksum: The checksum of this Cluster.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def cluster_key(self):
        """Gets the cluster_key of this Cluster.


        :return: The cluster_key of this Cluster.
        :rtype: str
        """
        return self._cluster_key

    @cluster_key.setter
    def cluster_key(self, cluster_key):
        """Sets the cluster_key of this Cluster.


        :param cluster_key: The cluster_key of this Cluster.
        :type cluster_key: str
        """
        if cluster_key is None:
            raise ValueError("Invalid value for `cluster_key`, must not be `None`")

        self._cluster_key = cluster_key
