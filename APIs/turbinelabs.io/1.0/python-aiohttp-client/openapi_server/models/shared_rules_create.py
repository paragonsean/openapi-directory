# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.all_constraints import AllConstraints
from openapi_server.models.cohort_seed import CohortSeed
from openapi_server.models.metadatum import Metadatum
from openapi_server.models.response_data import ResponseData
from openapi_server.models.retry_policy import RetryPolicy
from openapi_server.models.rule import Rule
from openapi_server import util


class SharedRulesCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: str=None, cohort_seed: CohortSeed=None, default: AllConstraints=None, properties: List[Metadatum]=None, response_data: ResponseData=None, retry_policy: RetryPolicy=None, rules: List[Rule]=None, shared_rules_key: str=None, zone_key: str=None):
        """SharedRulesCreate - a model defined in OpenAPI

        :param checksum: The checksum of this SharedRulesCreate.
        :param cohort_seed: The cohort_seed of this SharedRulesCreate.
        :param default: The default of this SharedRulesCreate.
        :param properties: The properties of this SharedRulesCreate.
        :param response_data: The response_data of this SharedRulesCreate.
        :param retry_policy: The retry_policy of this SharedRulesCreate.
        :param rules: The rules of this SharedRulesCreate.
        :param shared_rules_key: The shared_rules_key of this SharedRulesCreate.
        :param zone_key: The zone_key of this SharedRulesCreate.
        """
        self.openapi_types = {
            'checksum': str,
            'cohort_seed': CohortSeed,
            'default': AllConstraints,
            'properties': List[Metadatum],
            'response_data': ResponseData,
            'retry_policy': RetryPolicy,
            'rules': List[Rule],
            'shared_rules_key': str,
            'zone_key': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'cohort_seed': 'cohort_seed',
            'default': 'default',
            'properties': 'properties',
            'response_data': 'response_data',
            'retry_policy': 'retry_policy',
            'rules': 'rules',
            'shared_rules_key': 'shared_rules_key',
            'zone_key': 'zone_key'
        }

        self._checksum = checksum
        self._cohort_seed = cohort_seed
        self._default = default
        self._properties = properties
        self._response_data = response_data
        self._retry_policy = retry_policy
        self._rules = rules
        self._shared_rules_key = shared_rules_key
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedRulesCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedRulesCreate of this SharedRulesCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this SharedRulesCreate.


        :return: The checksum of this SharedRulesCreate.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this SharedRulesCreate.


        :param checksum: The checksum of this SharedRulesCreate.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def cohort_seed(self):
        """Gets the cohort_seed of this SharedRulesCreate.


        :return: The cohort_seed of this SharedRulesCreate.
        :rtype: CohortSeed
        """
        return self._cohort_seed

    @cohort_seed.setter
    def cohort_seed(self, cohort_seed):
        """Sets the cohort_seed of this SharedRulesCreate.


        :param cohort_seed: The cohort_seed of this SharedRulesCreate.
        :type cohort_seed: CohortSeed
        """

        self._cohort_seed = cohort_seed

    @property
    def default(self):
        """Gets the default of this SharedRulesCreate.


        :return: The default of this SharedRulesCreate.
        :rtype: AllConstraints
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this SharedRulesCreate.


        :param default: The default of this SharedRulesCreate.
        :type default: AllConstraints
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def properties(self):
        """Gets the properties of this SharedRulesCreate.


        :return: The properties of this SharedRulesCreate.
        :rtype: List[Metadatum]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SharedRulesCreate.


        :param properties: The properties of this SharedRulesCreate.
        :type properties: List[Metadatum]
        """

        self._properties = properties

    @property
    def response_data(self):
        """Gets the response_data of this SharedRulesCreate.

        When a request is served by a Route that is part of this SharedRules group the response is annotated with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from the applicable Route and ClusterConstarint takes precedence over those specified here. 

        :return: The response_data of this SharedRulesCreate.
        :rtype: ResponseData
        """
        return self._response_data

    @response_data.setter
    def response_data(self, response_data):
        """Sets the response_data of this SharedRulesCreate.

        When a request is served by a Route that is part of this SharedRules group the response is annotated with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from the applicable Route and ClusterConstarint takes precedence over those specified here. 

        :param response_data: The response_data of this SharedRulesCreate.
        :type response_data: ResponseData
        """

        self._response_data = response_data

    @property
    def retry_policy(self):
        """Gets the retry_policy of this SharedRulesCreate.


        :return: The retry_policy of this SharedRulesCreate.
        :rtype: RetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this SharedRulesCreate.


        :param retry_policy: The retry_policy of this SharedRulesCreate.
        :type retry_policy: RetryPolicy
        """

        self._retry_policy = retry_policy

    @property
    def rules(self):
        """Gets the rules of this SharedRulesCreate.


        :return: The rules of this SharedRulesCreate.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this SharedRulesCreate.


        :param rules: The rules of this SharedRulesCreate.
        :type rules: List[Rule]
        """

        self._rules = rules

    @property
    def shared_rules_key(self):
        """Gets the shared_rules_key of this SharedRulesCreate.


        :return: The shared_rules_key of this SharedRulesCreate.
        :rtype: str
        """
        return self._shared_rules_key

    @shared_rules_key.setter
    def shared_rules_key(self, shared_rules_key):
        """Sets the shared_rules_key of this SharedRulesCreate.


        :param shared_rules_key: The shared_rules_key of this SharedRulesCreate.
        :type shared_rules_key: str
        """

        self._shared_rules_key = shared_rules_key

    @property
    def zone_key(self):
        """Gets the zone_key of this SharedRulesCreate.


        :return: The zone_key of this SharedRulesCreate.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this SharedRulesCreate.


        :param zone_key: The zone_key of this SharedRulesCreate.
        :type zone_key: str
        """
        if zone_key is None:
            raise ValueError("Invalid value for `zone_key`, must not be `None`")

        self._zone_key = zone_key
