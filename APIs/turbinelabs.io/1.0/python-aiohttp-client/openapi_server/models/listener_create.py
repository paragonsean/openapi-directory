# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tracing_config import TracingConfig
from openapi_server import util


class ListenerCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_keys: List[str]=None, ip: str=None, name: str=None, port: int=None, protocol: str=None, tracing_config: TracingConfig=None, zone_key: str=None):
        """ListenerCreate - a model defined in OpenAPI

        :param domain_keys: The domain_keys of this ListenerCreate.
        :param ip: The ip of this ListenerCreate.
        :param name: The name of this ListenerCreate.
        :param port: The port of this ListenerCreate.
        :param protocol: The protocol of this ListenerCreate.
        :param tracing_config: The tracing_config of this ListenerCreate.
        :param zone_key: The zone_key of this ListenerCreate.
        """
        self.openapi_types = {
            'domain_keys': List[str],
            'ip': str,
            'name': str,
            'port': int,
            'protocol': str,
            'tracing_config': TracingConfig,
            'zone_key': str
        }

        self.attribute_map = {
            'domain_keys': 'domain_keys',
            'ip': 'ip',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol',
            'tracing_config': 'tracing_config',
            'zone_key': 'zone_key'
        }

        self._domain_keys = domain_keys
        self._ip = ip
        self._name = name
        self._port = port
        self._protocol = protocol
        self._tracing_config = tracing_config
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenerCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListenerCreate of this ListenerCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_keys(self):
        """Gets the domain_keys of this ListenerCreate.


        :return: The domain_keys of this ListenerCreate.
        :rtype: List[str]
        """
        return self._domain_keys

    @domain_keys.setter
    def domain_keys(self, domain_keys):
        """Sets the domain_keys of this ListenerCreate.


        :param domain_keys: The domain_keys of this ListenerCreate.
        :type domain_keys: List[str]
        """

        self._domain_keys = domain_keys

    @property
    def ip(self):
        """Gets the ip of this ListenerCreate.

        the interface this listener should bind to.

        :return: The ip of this ListenerCreate.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ListenerCreate.

        the interface this listener should bind to.

        :param ip: The ip of this ListenerCreate.
        :type ip: str
        """

        self._ip = ip

    @property
    def name(self):
        """Gets the name of this ListenerCreate.


        :return: The name of this ListenerCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListenerCreate.


        :param name: The name of this ListenerCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def port(self):
        """Gets the port of this ListenerCreate.

        the port this listener should bind to.

        :return: The port of this ListenerCreate.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ListenerCreate.

        the port this listener should bind to.

        :param port: The port of this ListenerCreate.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ListenerCreate.

        the protocol this listener will handle. http and http2 configure the listener to only process requests of that type. http_auto will adapt to HTTP/1.1 and HTTP/2 as needed. tcp configures the listener to be a tcp proxy 

        :return: The protocol of this ListenerCreate.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ListenerCreate.

        the protocol this listener will handle. http and http2 configure the listener to only process requests of that type. http_auto will adapt to HTTP/1.1 and HTTP/2 as needed. tcp configures the listener to be a tcp proxy 

        :param protocol: The protocol of this ListenerCreate.
        :type protocol: str
        """
        allowed_values = ["http", "http2", "http_auto", "tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def tracing_config(self):
        """Gets the tracing_config of this ListenerCreate.


        :return: The tracing_config of this ListenerCreate.
        :rtype: TracingConfig
        """
        return self._tracing_config

    @tracing_config.setter
    def tracing_config(self, tracing_config):
        """Sets the tracing_config of this ListenerCreate.


        :param tracing_config: The tracing_config of this ListenerCreate.
        :type tracing_config: TracingConfig
        """

        self._tracing_config = tracing_config

    @property
    def zone_key(self):
        """Gets the zone_key of this ListenerCreate.


        :return: The zone_key of this ListenerCreate.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this ListenerCreate.


        :param zone_key: The zone_key of this ListenerCreate.
        :type zone_key: str
        """

        self._zone_key = zone_key
