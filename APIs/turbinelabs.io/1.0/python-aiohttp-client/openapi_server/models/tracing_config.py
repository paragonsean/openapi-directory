# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TracingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingress: bool=None, request_headers_for_tags: List[str]=None):
        """TracingConfig - a model defined in OpenAPI

        :param ingress: The ingress of this TracingConfig.
        :param request_headers_for_tags: The request_headers_for_tags of this TracingConfig.
        """
        self.openapi_types = {
            'ingress': bool,
            'request_headers_for_tags': List[str]
        }

        self.attribute_map = {
            'ingress': 'ingress',
            'request_headers_for_tags': 'request_headers_for_tags'
        }

        self._ingress = ingress
        self._request_headers_for_tags = request_headers_for_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TracingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TracingConfig of this TracingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingress(self):
        """Gets the ingress of this TracingConfig.

        Determines whether spans sent from this listener should be treated as ingress or egress operations. 

        :return: The ingress of this TracingConfig.
        :rtype: bool
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress):
        """Sets the ingress of this TracingConfig.

        Determines whether spans sent from this listener should be treated as ingress or egress operations. 

        :param ingress: The ingress of this TracingConfig.
        :type ingress: bool
        """

        self._ingress = ingress

    @property
    def request_headers_for_tags(self):
        """Gets the request_headers_for_tags of this TracingConfig.

        the headers specified here will be added to the generated spans as annotations 

        :return: The request_headers_for_tags of this TracingConfig.
        :rtype: List[str]
        """
        return self._request_headers_for_tags

    @request_headers_for_tags.setter
    def request_headers_for_tags(self, request_headers_for_tags):
        """Sets the request_headers_for_tags of this TracingConfig.

        the headers specified here will be added to the generated spans as annotations 

        :param request_headers_for_tags: The request_headers_for_tags of this TracingConfig.
        :type request_headers_for_tags: List[str]
        """

        self._request_headers_for_tags = request_headers_for_tags
