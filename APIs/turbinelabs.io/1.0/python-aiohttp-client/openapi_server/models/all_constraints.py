# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_constraint import ClusterConstraint
from openapi_server import util


class AllConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dark: List[ClusterConstraint]=None, light: List[ClusterConstraint]=None, tap: List[ClusterConstraint]=None):
        """AllConstraints - a model defined in OpenAPI

        :param dark: The dark of this AllConstraints.
        :param light: The light of this AllConstraints.
        :param tap: The tap of this AllConstraints.
        """
        self.openapi_types = {
            'dark': List[ClusterConstraint],
            'light': List[ClusterConstraint],
            'tap': List[ClusterConstraint]
        }

        self.attribute_map = {
            'dark': 'dark',
            'light': 'light',
            'tap': 'tap'
        }

        self._dark = dark
        self._light = light
        self._tap = tap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllConstraints of this AllConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dark(self):
        """Gets the dark of this AllConstraints.


        :return: The dark of this AllConstraints.
        :rtype: List[ClusterConstraint]
        """
        return self._dark

    @dark.setter
    def dark(self, dark):
        """Sets the dark of this AllConstraints.


        :param dark: The dark of this AllConstraints.
        :type dark: List[ClusterConstraint]
        """

        self._dark = dark

    @property
    def light(self):
        """Gets the light of this AllConstraints.


        :return: The light of this AllConstraints.
        :rtype: List[ClusterConstraint]
        """
        return self._light

    @light.setter
    def light(self, light):
        """Sets the light of this AllConstraints.


        :param light: The light of this AllConstraints.
        :type light: List[ClusterConstraint]
        """
        if light is None:
            raise ValueError("Invalid value for `light`, must not be `None`")

        self._light = light

    @property
    def tap(self):
        """Gets the tap of this AllConstraints.


        :return: The tap of this AllConstraints.
        :rtype: List[ClusterConstraint]
        """
        return self._tap

    @tap.setter
    def tap(self, tap):
        """Sets the tap of this AllConstraints.


        :param tap: The tap of this AllConstraints.
        :type tap: List[ClusterConstraint]
        """

        self._tap = tap
