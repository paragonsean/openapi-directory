# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header_constraint import HeaderConstraint
from openapi_server import util


class Redirect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: str=None, header_constraints: List[HeaderConstraint]=None, name: str=None, redirect_type: str=None, to: str=None):
        """Redirect - a model defined in OpenAPI

        :param _from: The _from of this Redirect.
        :param header_constraints: The header_constraints of this Redirect.
        :param name: The name of this Redirect.
        :param redirect_type: The redirect_type of this Redirect.
        :param to: The to of this Redirect.
        """
        self.openapi_types = {
            '_from': str,
            'header_constraints': List[HeaderConstraint],
            'name': str,
            'redirect_type': str,
            'to': str
        }

        self.attribute_map = {
            '_from': 'from',
            'header_constraints': 'header_constraints',
            'name': 'name',
            'redirect_type': 'redirect_type',
            'to': 'to'
        }

        self.__from = _from
        self._header_constraints = header_constraints
        self._name = name
        self._redirect_type = redirect_type
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Redirect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Redirect of this Redirect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this Redirect.

        A regexp that will be matched against the URL (not including the host/port). May include capture groups for reference in \"to.\"

        :return: The _from of this Redirect.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Redirect.

        A regexp that will be matched against the URL (not including the host/port). May include capture groups for reference in \"to.\"

        :param _from: The _from of this Redirect.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def header_constraints(self):
        """Gets the header_constraints of this Redirect.


        :return: The header_constraints of this Redirect.
        :rtype: List[HeaderConstraint]
        """
        return self._header_constraints

    @header_constraints.setter
    def header_constraints(self, header_constraints):
        """Sets the header_constraints of this Redirect.


        :param header_constraints: The header_constraints of this Redirect.
        :type header_constraints: List[HeaderConstraint]
        """

        self._header_constraints = header_constraints

    @property
    def name(self):
        """Gets the name of this Redirect.

        A unique (to this Domain) name for the Redirect. Must match the regexp \"^[0-9a-zA-Z-]+$\"

        :return: The name of this Redirect.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Redirect.

        A unique (to this Domain) name for the Redirect. Must match the regexp \"^[0-9a-zA-Z-]+$\"

        :param name: The name of this Redirect.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def redirect_type(self):
        """Gets the redirect_type of this Redirect.

        How this redirect should be presented via HTTP response code.

        :return: The redirect_type of this Redirect.
        :rtype: str
        """
        return self._redirect_type

    @redirect_type.setter
    def redirect_type(self, redirect_type):
        """Sets the redirect_type of this Redirect.

        How this redirect should be presented via HTTP response code.

        :param redirect_type: The redirect_type of this Redirect.
        :type redirect_type: str
        """
        allowed_values = ["permanent", "temporary"]  # noqa: E501
        if redirect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `redirect_type` ({0}), must be one of {1}"
                .format(redirect_type, allowed_values)
            )

        self._redirect_type = redirect_type

    @property
    def to(self):
        """Gets the to of this Redirect.

        The new URL that will be constructed from the request. Capture groups from \"from\" may be referenced as \"$&lt;group number&gt;\" which begins at 1.

        :return: The to of this Redirect.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Redirect.

        The new URL that will be constructed from the request. Capture groups from \"from\" may be referenced as \"$&lt;group number&gt;\" which begins at 1.

        :param to: The to of this Redirect.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
