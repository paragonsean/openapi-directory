# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CohortSeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, use_zero_value_seed: bool=None):
        """CohortSeed - a model defined in OpenAPI

        :param name: The name of this CohortSeed.
        :param type: The type of this CohortSeed.
        :param use_zero_value_seed: The use_zero_value_seed of this CohortSeed.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'use_zero_value_seed': bool
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'use_zero_value_seed': 'use_zero_value_seed'
        }

        self._name = name
        self._type = type
        self._use_zero_value_seed = use_zero_value_seed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CohortSeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CohortSeed of this CohortSeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CohortSeed.

        The name of the cookie, the header field, or the query argument to be checked for a cohort seed value. 

        :return: The name of this CohortSeed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CohortSeed.

        The name of the cookie, the header field, or the query argument to be checked for a cohort seed value. 

        :param name: The name of this CohortSeed.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CohortSeed.

        Where a request's cohort seed will be drawn from.

        :return: The type of this CohortSeed.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CohortSeed.

        Where a request's cohort seed will be drawn from.

        :param type: The type of this CohortSeed.
        :type type: str
        """
        allowed_values = ["header", "cookie", "query"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_zero_value_seed(self):
        """Gets the use_zero_value_seed of this CohortSeed.

        If true, requests with a seed source which resolves to an empty value will still be grouped and routed consistently. This means a misspelled or missing seed source on a request will sort all such traffic into a single backend. This could result in all traffic being assigned to a backend intended for only a small percentage of traffic. Use with caution. 

        :return: The use_zero_value_seed of this CohortSeed.
        :rtype: bool
        """
        return self._use_zero_value_seed

    @use_zero_value_seed.setter
    def use_zero_value_seed(self, use_zero_value_seed):
        """Sets the use_zero_value_seed of this CohortSeed.

        If true, requests with a seed source which resolves to an empty value will still be grouped and routed consistently. This means a misspelled or missing seed source on a request will sort all such traffic into a single backend. This could result in all traffic being assigned to a backend intended for only a small percentage of traffic. Use with caution. 

        :param use_zero_value_seed: The use_zero_value_seed of this CohortSeed.
        :type use_zero_value_seed: bool
        """

        self._use_zero_value_seed = use_zero_value_seed
