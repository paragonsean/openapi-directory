# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cohort_seed import CohortSeed
from openapi_server.models.response_data import ResponseData
from openapi_server.models.retry_policy import RetryPolicy
from openapi_server.models.rule import Rule
from openapi_server import util


class Route(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checksum: str=None, cohort_seed: CohortSeed=None, domain_key: str=None, path: str=None, response_data: ResponseData=None, retry_policy: RetryPolicy=None, route_key: str=None, rules: List[Rule]=None, shared_rules_key: str=None, zone_key: str=None):
        """Route - a model defined in OpenAPI

        :param checksum: The checksum of this Route.
        :param cohort_seed: The cohort_seed of this Route.
        :param domain_key: The domain_key of this Route.
        :param path: The path of this Route.
        :param response_data: The response_data of this Route.
        :param retry_policy: The retry_policy of this Route.
        :param route_key: The route_key of this Route.
        :param rules: The rules of this Route.
        :param shared_rules_key: The shared_rules_key of this Route.
        :param zone_key: The zone_key of this Route.
        """
        self.openapi_types = {
            'checksum': str,
            'cohort_seed': CohortSeed,
            'domain_key': str,
            'path': str,
            'response_data': ResponseData,
            'retry_policy': RetryPolicy,
            'route_key': str,
            'rules': List[Rule],
            'shared_rules_key': str,
            'zone_key': str
        }

        self.attribute_map = {
            'checksum': 'checksum',
            'cohort_seed': 'cohort_seed',
            'domain_key': 'domain_key',
            'path': 'path',
            'response_data': 'response_data',
            'retry_policy': 'retry_policy',
            'route_key': 'route_key',
            'rules': 'rules',
            'shared_rules_key': 'shared_rules_key',
            'zone_key': 'zone_key'
        }

        self._checksum = checksum
        self._cohort_seed = cohort_seed
        self._domain_key = domain_key
        self._path = path
        self._response_data = response_data
        self._retry_policy = retry_policy
        self._route_key = route_key
        self._rules = rules
        self._shared_rules_key = shared_rules_key
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Route':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Route of this Route.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checksum(self):
        """Gets the checksum of this Route.


        :return: The checksum of this Route.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Route.


        :param checksum: The checksum of this Route.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def cohort_seed(self):
        """Gets the cohort_seed of this Route.


        :return: The cohort_seed of this Route.
        :rtype: CohortSeed
        """
        return self._cohort_seed

    @cohort_seed.setter
    def cohort_seed(self, cohort_seed):
        """Sets the cohort_seed of this Route.


        :param cohort_seed: The cohort_seed of this Route.
        :type cohort_seed: CohortSeed
        """

        self._cohort_seed = cohort_seed

    @property
    def domain_key(self):
        """Gets the domain_key of this Route.


        :return: The domain_key of this Route.
        :rtype: str
        """
        return self._domain_key

    @domain_key.setter
    def domain_key(self, domain_key):
        """Sets the domain_key of this Route.


        :param domain_key: The domain_key of this Route.
        :type domain_key: str
        """
        if domain_key is None:
            raise ValueError("Invalid value for `domain_key`, must not be `None`")

        self._domain_key = domain_key

    @property
    def path(self):
        """Gets the path of this Route.


        :return: The path of this Route.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Route.


        :param path: The path of this Route.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def response_data(self):
        """Gets the response_data of this Route.

        When a request is served by this Route annotate the response with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from Route take precedence over those from a SharedRules object. 

        :return: The response_data of this Route.
        :rtype: ResponseData
        """
        return self._response_data

    @response_data.setter
    def response_data(self, response_data):
        """Sets the response_data of this Route.

        When a request is served by this Route annotate the response with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from Route take precedence over those from a SharedRules object. 

        :param response_data: The response_data of this Route.
        :type response_data: ResponseData
        """

        self._response_data = response_data

    @property
    def retry_policy(self):
        """Gets the retry_policy of this Route.


        :return: The retry_policy of this Route.
        :rtype: RetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this Route.


        :param retry_policy: The retry_policy of this Route.
        :type retry_policy: RetryPolicy
        """

        self._retry_policy = retry_policy

    @property
    def route_key(self):
        """Gets the route_key of this Route.


        :return: The route_key of this Route.
        :rtype: str
        """
        return self._route_key

    @route_key.setter
    def route_key(self, route_key):
        """Sets the route_key of this Route.


        :param route_key: The route_key of this Route.
        :type route_key: str
        """
        if route_key is None:
            raise ValueError("Invalid value for `route_key`, must not be `None`")

        self._route_key = route_key

    @property
    def rules(self):
        """Gets the rules of this Route.


        :return: The rules of this Route.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Route.


        :param rules: The rules of this Route.
        :type rules: List[Rule]
        """

        self._rules = rules

    @property
    def shared_rules_key(self):
        """Gets the shared_rules_key of this Route.


        :return: The shared_rules_key of this Route.
        :rtype: str
        """
        return self._shared_rules_key

    @shared_rules_key.setter
    def shared_rules_key(self, shared_rules_key):
        """Sets the shared_rules_key of this Route.


        :param shared_rules_key: The shared_rules_key of this Route.
        :type shared_rules_key: str
        """
        if shared_rules_key is None:
            raise ValueError("Invalid value for `shared_rules_key`, must not be `None`")

        self._shared_rules_key = shared_rules_key

    @property
    def zone_key(self):
        """Gets the zone_key of this Route.


        :return: The zone_key of this Route.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this Route.


        :param zone_key: The zone_key of this Route.
        :type zone_key: str
        """
        if zone_key is None:
            raise ValueError("Invalid value for `zone_key`, must not be `None`")

        self._zone_key = zone_key
