# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_type: str=None, object_key: str=None, object_type: str=None, path: str=None, value: str=None, zone_key: str=None):
        """ChangeEntry - a model defined in OpenAPI

        :param change_type: The change_type of this ChangeEntry.
        :param object_key: The object_key of this ChangeEntry.
        :param object_type: The object_type of this ChangeEntry.
        :param path: The path of this ChangeEntry.
        :param value: The value of this ChangeEntry.
        :param zone_key: The zone_key of this ChangeEntry.
        """
        self.openapi_types = {
            'change_type': str,
            'object_key': str,
            'object_type': str,
            'path': str,
            'value': str,
            'zone_key': str
        }

        self.attribute_map = {
            'change_type': 'change_type',
            'object_key': 'object_key',
            'object_type': 'object_type',
            'path': 'path',
            'value': 'value',
            'zone_key': 'zone_key'
        }

        self._change_type = change_type
        self._object_key = object_key
        self._object_type = object_type
        self._path = path
        self._value = value
        self._zone_key = zone_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeEntry of this ChangeEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_type(self):
        """Gets the change_type of this ChangeEntry.

        Whether the value was added or removed to the object.

        :return: The change_type of this ChangeEntry.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ChangeEntry.

        Whether the value was added or removed to the object.

        :param change_type: The change_type of this ChangeEntry.
        :type change_type: str
        """
        allowed_values = ["addition", "removal"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def object_key(self):
        """Gets the object_key of this ChangeEntry.

        An ID uniquely identifying the object being changed.

        :return: The object_key of this ChangeEntry.
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ChangeEntry.

        An ID uniquely identifying the object being changed.

        :param object_key: The object_key of this ChangeEntry.
        :type object_key: str
        """

        self._object_key = object_key

    @property
    def object_type(self):
        """Gets the object_type of this ChangeEntry.

        The name of the object being being altered.

        :return: The object_type of this ChangeEntry.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ChangeEntry.

        The name of the object being being altered.

        :param object_type: The object_type of this ChangeEntry.
        :type object_type: str
        """
        allowed_values = ["org", "user", "zone", "proxy", "domain", "route", "shared_rules", "cluster"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def path(self):
        """Gets the path of this ChangeEntry.

        A dot-separated / bracket-indexed path to the field changed on the object.

        :return: The path of this ChangeEntry.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ChangeEntry.

        A dot-separated / bracket-indexed path to the field changed on the object.

        :param path: The path of this ChangeEntry.
        :type path: str
        """

        self._path = path

    @property
    def value(self):
        """Gets the value of this ChangeEntry.

        The value that has been added or removed to the object at the attribute path indicated in path. 

        :return: The value of this ChangeEntry.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ChangeEntry.

        The value that has been added or removed to the object at the attribute path indicated in path. 

        :param value: The value of this ChangeEntry.
        :type value: str
        """

        self._value = value

    @property
    def zone_key(self):
        """Gets the zone_key of this ChangeEntry.

        The zone this object is located in.

        :return: The zone_key of this ChangeEntry.
        :rtype: str
        """
        return self._zone_key

    @zone_key.setter
    def zone_key(self, zone_key):
        """Sets the zone_key of this ChangeEntry.

        The zone this object is located in.

        :param zone_key: The zone_key of this ChangeEntry.
        :type zone_key: str
        """

        self._zone_key = zone_key
