# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TCPHealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, receive: List[str]=None, send: str=None):
        """TCPHealthCheck - a model defined in OpenAPI

        :param receive: The receive of this TCPHealthCheck.
        :param send: The send of this TCPHealthCheck.
        """
        self.openapi_types = {
            'receive': List[str],
            'send': str
        }

        self.attribute_map = {
            'receive': 'receive',
            'send': 'send'
        }

        self._receive = receive
        self._send = send

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TCPHealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TCPHealthCheck of this TCPHealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def receive(self):
        """Gets the receive of this TCPHealthCheck.

        An array of base64 encoded strings, each representing array of bytes that is expected in health check responses. When checking the response, \"fuzzy\" matching is performed such that each binary block must be found, and in the order specified, but not necessarily contiguously. 

        :return: The receive of this TCPHealthCheck.
        :rtype: List[str]
        """
        return self._receive

    @receive.setter
    def receive(self, receive):
        """Sets the receive of this TCPHealthCheck.

        An array of base64 encoded strings, each representing array of bytes that is expected in health check responses. When checking the response, \"fuzzy\" matching is performed such that each binary block must be found, and in the order specified, but not necessarily contiguously. 

        :param receive: The receive of this TCPHealthCheck.
        :type receive: List[str]
        """

        self._receive = receive

    @property
    def send(self):
        """Gets the send of this TCPHealthCheck.

        Base64 encoded string representing an array of bytes to be sent in health check requests. Leaving this field empty implies a connect-only health check. 

        :return: The send of this TCPHealthCheck.
        :rtype: str
        """
        return self._send

    @send.setter
    def send(self, send):
        """Sets the send of this TCPHealthCheck.

        Base64 encoded string representing an array of bytes to be sent in health check requests. Leaving this field empty implies a connect-only health check. 

        :param send: The send of this TCPHealthCheck.
        :type send: str
        """

        self._send = send
