# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.all_constraints import AllConstraints
from openapi_server.models.cohort_seed import CohortSeed
from openapi_server.models.match import Match
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohort_seed: CohortSeed=None, constraints: AllConstraints=None, matches: List[Match]=None, methods: List[str]=None, rule_key: str=None):
        """Rule - a model defined in OpenAPI

        :param cohort_seed: The cohort_seed of this Rule.
        :param constraints: The constraints of this Rule.
        :param matches: The matches of this Rule.
        :param methods: The methods of this Rule.
        :param rule_key: The rule_key of this Rule.
        """
        self.openapi_types = {
            'cohort_seed': CohortSeed,
            'constraints': AllConstraints,
            'matches': List[Match],
            'methods': List[str],
            'rule_key': str
        }

        self.attribute_map = {
            'cohort_seed': 'cohort_seed',
            'constraints': 'constraints',
            'matches': 'matches',
            'methods': 'methods',
            'rule_key': 'rule_key'
        }

        self._cohort_seed = cohort_seed
        self._constraints = constraints
        self._matches = matches
        self._methods = methods
        self._rule_key = rule_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohort_seed(self):
        """Gets the cohort_seed of this Rule.


        :return: The cohort_seed of this Rule.
        :rtype: CohortSeed
        """
        return self._cohort_seed

    @cohort_seed.setter
    def cohort_seed(self, cohort_seed):
        """Sets the cohort_seed of this Rule.


        :param cohort_seed: The cohort_seed of this Rule.
        :type cohort_seed: CohortSeed
        """

        self._cohort_seed = cohort_seed

    @property
    def constraints(self):
        """Gets the constraints of this Rule.


        :return: The constraints of this Rule.
        :rtype: AllConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this Rule.


        :param constraints: The constraints of this Rule.
        :type constraints: AllConstraints
        """

        self._constraints = constraints

    @property
    def matches(self):
        """Gets the matches of this Rule.


        :return: The matches of this Rule.
        :rtype: List[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this Rule.


        :param matches: The matches of this Rule.
        :type matches: List[Match]
        """

        self._matches = matches

    @property
    def methods(self):
        """Gets the methods of this Rule.


        :return: The methods of this Rule.
        :rtype: List[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this Rule.


        :param methods: The methods of this Rule.
        :type methods: List[str]
        """

        self._methods = methods

    @property
    def rule_key(self):
        """Gets the rule_key of this Rule.


        :return: The rule_key of this Rule.
        :rtype: str
        """
        return self._rule_key

    @rule_key.setter
    def rule_key(self, rule_key):
        """Sets the rule_key of this Rule.


        :param rule_key: The rule_key of this Rule.
        :type rule_key: str
        """

        self._rule_key = rule_key
