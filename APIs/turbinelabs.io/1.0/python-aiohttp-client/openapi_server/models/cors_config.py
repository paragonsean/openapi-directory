# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CORSConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_credentials: bool=None, allowed_headers: List[str]=None, allowed_methods: List[str]=None, allowed_origins: List[str]=None, exposed_headers: List[str]=None, max_age: int=None):
        """CORSConfig - a model defined in OpenAPI

        :param allow_credentials: The allow_credentials of this CORSConfig.
        :param allowed_headers: The allowed_headers of this CORSConfig.
        :param allowed_methods: The allowed_methods of this CORSConfig.
        :param allowed_origins: The allowed_origins of this CORSConfig.
        :param exposed_headers: The exposed_headers of this CORSConfig.
        :param max_age: The max_age of this CORSConfig.
        """
        self.openapi_types = {
            'allow_credentials': bool,
            'allowed_headers': List[str],
            'allowed_methods': List[str],
            'allowed_origins': List[str],
            'exposed_headers': List[str],
            'max_age': int
        }

        self.attribute_map = {
            'allow_credentials': 'allow_credentials',
            'allowed_headers': 'allowed_headers',
            'allowed_methods': 'allowed_methods',
            'allowed_origins': 'allowed_origins',
            'exposed_headers': 'exposed_headers',
            'max_age': 'max_age'
        }

        self._allow_credentials = allow_credentials
        self._allowed_headers = allowed_headers
        self._allowed_methods = allowed_methods
        self._allowed_origins = allowed_origins
        self._exposed_headers = exposed_headers
        self._max_age = max_age

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CORSConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CORSConfig of this CORSConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this CORSConfig.

        Indicates whether the response to request can be exposed when the omit credentials flag is unset https://www.w3.org/TR/cors/#access-control-allow-credentials-response-header. 

        :return: The allow_credentials of this CORSConfig.
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this CORSConfig.

        Indicates whether the response to request can be exposed when the omit credentials flag is unset https://www.w3.org/TR/cors/#access-control-allow-credentials-response-header. 

        :param allow_credentials: The allow_credentials of this CORSConfig.
        :type allow_credentials: bool
        """

        self._allow_credentials = allow_credentials

    @property
    def allowed_headers(self):
        """Gets the allowed_headers of this CORSConfig.

        Specifies what headers are allowed to be set when a request is made. https://www.w3.org/TR/cors/#access-control-allow-headers-response-header. 

        :return: The allowed_headers of this CORSConfig.
        :rtype: List[str]
        """
        return self._allowed_headers

    @allowed_headers.setter
    def allowed_headers(self, allowed_headers):
        """Sets the allowed_headers of this CORSConfig.

        Specifies what headers are allowed to be set when a request is made. https://www.w3.org/TR/cors/#access-control-allow-headers-response-header. 

        :param allowed_headers: The allowed_headers of this CORSConfig.
        :type allowed_headers: List[str]
        """

        self._allowed_headers = allowed_headers

    @property
    def allowed_methods(self):
        """Gets the allowed_methods of this CORSConfig.

        Indicates which HTTP request types may be used to call an endpoint. https://www.w3.org/TR/cors/#access-control-allow-methods-response-header. 

        :return: The allowed_methods of this CORSConfig.
        :rtype: List[str]
        """
        return self._allowed_methods

    @allowed_methods.setter
    def allowed_methods(self, allowed_methods):
        """Sets the allowed_methods of this CORSConfig.

        Indicates which HTTP request types may be used to call an endpoint. https://www.w3.org/TR/cors/#access-control-allow-methods-response-header. 

        :param allowed_methods: The allowed_methods of this CORSConfig.
        :type allowed_methods: List[str]
        """
        if allowed_methods is None:
            raise ValueError("Invalid value for `allowed_methods`, must not be `None`")

        self._allowed_methods = allowed_methods

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this CORSConfig.

        Must contain a single element specifying the domain (origin) allowed to make requsets to this domain. If any origin is acceptable '*' may be used as a wildcard https://www.w3.org/TR/cors/#origin-request-header, https://www.w3.org/TR/cors/#access-control-allow-origin-response-header. 

        :return: The allowed_origins of this CORSConfig.
        :rtype: List[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this CORSConfig.

        Must contain a single element specifying the domain (origin) allowed to make requsets to this domain. If any origin is acceptable '*' may be used as a wildcard https://www.w3.org/TR/cors/#origin-request-header, https://www.w3.org/TR/cors/#access-control-allow-origin-response-header. 

        :param allowed_origins: The allowed_origins of this CORSConfig.
        :type allowed_origins: List[str]
        """
        if allowed_origins is None:
            raise ValueError("Invalid value for `allowed_origins`, must not be `None`")

        self._allowed_origins = allowed_origins

    @property
    def exposed_headers(self):
        """Gets the exposed_headers of this CORSConfig.

        Indicates which response headers may be accessed from the browser. https://www.w3.org/TR/cors/#http-access-control-expose-headers. 

        :return: The exposed_headers of this CORSConfig.
        :rtype: List[str]
        """
        return self._exposed_headers

    @exposed_headers.setter
    def exposed_headers(self, exposed_headers):
        """Sets the exposed_headers of this CORSConfig.

        Indicates which response headers may be accessed from the browser. https://www.w3.org/TR/cors/#http-access-control-expose-headers. 

        :param exposed_headers: The exposed_headers of this CORSConfig.
        :type exposed_headers: List[str]
        """

        self._exposed_headers = exposed_headers

    @property
    def max_age(self):
        """Gets the max_age of this CORSConfig.

        Sets how long (in seconds) the response to a preflight request may be cached. A value of -1 will disable caching. https://www.w3.org/TR/cors/#access-control-max-age-response-header. 

        :return: The max_age of this CORSConfig.
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this CORSConfig.

        Sets how long (in seconds) the response to a preflight request may be cached. A value of -1 will disable caching. https://www.w3.org/TR/cors/#access-control-max-age-response-header. 

        :param max_age: The max_age of this CORSConfig.
        :type max_age: int
        """

        self._max_age = max_age
