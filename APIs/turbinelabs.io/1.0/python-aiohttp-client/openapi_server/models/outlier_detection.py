# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutlierDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_ejection_time_msec: int=None, consecutive_5xx: int=None, consecutive_gateway_failure: int=None, enforcing_consecutive_5xx: int=None, enforcing_consecutive_gateway_failure: int=None, enforcing_success_rate: int=None, interval_msec: int=None, max_ejection_percent: int=None, success_rate_minimum_hosts: int=None, success_rate_request_volume: int=None, success_rate_stdev_factor: int=None):
        """OutlierDetection - a model defined in OpenAPI

        :param base_ejection_time_msec: The base_ejection_time_msec of this OutlierDetection.
        :param consecutive_5xx: The consecutive_5xx of this OutlierDetection.
        :param consecutive_gateway_failure: The consecutive_gateway_failure of this OutlierDetection.
        :param enforcing_consecutive_5xx: The enforcing_consecutive_5xx of this OutlierDetection.
        :param enforcing_consecutive_gateway_failure: The enforcing_consecutive_gateway_failure of this OutlierDetection.
        :param enforcing_success_rate: The enforcing_success_rate of this OutlierDetection.
        :param interval_msec: The interval_msec of this OutlierDetection.
        :param max_ejection_percent: The max_ejection_percent of this OutlierDetection.
        :param success_rate_minimum_hosts: The success_rate_minimum_hosts of this OutlierDetection.
        :param success_rate_request_volume: The success_rate_request_volume of this OutlierDetection.
        :param success_rate_stdev_factor: The success_rate_stdev_factor of this OutlierDetection.
        """
        self.openapi_types = {
            'base_ejection_time_msec': int,
            'consecutive_5xx': int,
            'consecutive_gateway_failure': int,
            'enforcing_consecutive_5xx': int,
            'enforcing_consecutive_gateway_failure': int,
            'enforcing_success_rate': int,
            'interval_msec': int,
            'max_ejection_percent': int,
            'success_rate_minimum_hosts': int,
            'success_rate_request_volume': int,
            'success_rate_stdev_factor': int
        }

        self.attribute_map = {
            'base_ejection_time_msec': 'base_ejection_time_msec',
            'consecutive_5xx': 'consecutive_5xx',
            'consecutive_gateway_failure': 'consecutive_gateway_failure',
            'enforcing_consecutive_5xx': 'enforcing_consecutive_5xx',
            'enforcing_consecutive_gateway_failure': 'enforcing_consecutive_gateway_failure',
            'enforcing_success_rate': 'enforcing_success_rate',
            'interval_msec': 'interval_msec',
            'max_ejection_percent': 'max_ejection_percent',
            'success_rate_minimum_hosts': 'success_rate_minimum_hosts',
            'success_rate_request_volume': 'success_rate_request_volume',
            'success_rate_stdev_factor': 'success_rate_stdev_factor'
        }

        self._base_ejection_time_msec = base_ejection_time_msec
        self._consecutive_5xx = consecutive_5xx
        self._consecutive_gateway_failure = consecutive_gateway_failure
        self._enforcing_consecutive_5xx = enforcing_consecutive_5xx
        self._enforcing_consecutive_gateway_failure = enforcing_consecutive_gateway_failure
        self._enforcing_success_rate = enforcing_success_rate
        self._interval_msec = interval_msec
        self._max_ejection_percent = max_ejection_percent
        self._success_rate_minimum_hosts = success_rate_minimum_hosts
        self._success_rate_request_volume = success_rate_request_volume
        self._success_rate_stdev_factor = success_rate_stdev_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutlierDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutlierDetection of this OutlierDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_ejection_time_msec(self):
        """Gets the base_ejection_time_msec of this OutlierDetection.

        The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected. Defaults to 30s. Setting this to 0 means that no host will be ejected for longer than `interval_msec`. 

        :return: The base_ejection_time_msec of this OutlierDetection.
        :rtype: int
        """
        return self._base_ejection_time_msec

    @base_ejection_time_msec.setter
    def base_ejection_time_msec(self, base_ejection_time_msec):
        """Sets the base_ejection_time_msec of this OutlierDetection.

        The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected. Defaults to 30s. Setting this to 0 means that no host will be ejected for longer than `interval_msec`. 

        :param base_ejection_time_msec: The base_ejection_time_msec of this OutlierDetection.
        :type base_ejection_time_msec: int
        """

        self._base_ejection_time_msec = base_ejection_time_msec

    @property
    def consecutive_5xx(self):
        """Gets the consecutive_5xx of this OutlierDetection.

        The number of consecutive 5xx responses before a consecutive 5xx ejection occurs. Defaults to 5. Setting this to 0 effectively turns off the consecutive 5xx detector. 

        :return: The consecutive_5xx of this OutlierDetection.
        :rtype: int
        """
        return self._consecutive_5xx

    @consecutive_5xx.setter
    def consecutive_5xx(self, consecutive_5xx):
        """Sets the consecutive_5xx of this OutlierDetection.

        The number of consecutive 5xx responses before a consecutive 5xx ejection occurs. Defaults to 5. Setting this to 0 effectively turns off the consecutive 5xx detector. 

        :param consecutive_5xx: The consecutive_5xx of this OutlierDetection.
        :type consecutive_5xx: int
        """

        self._consecutive_5xx = consecutive_5xx

    @property
    def consecutive_gateway_failure(self):
        """Gets the consecutive_gateway_failure of this OutlierDetection.

        The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 5. Setting this to 0 effectively turns off the consecutive gateway failure detector. 

        :return: The consecutive_gateway_failure of this OutlierDetection.
        :rtype: int
        """
        return self._consecutive_gateway_failure

    @consecutive_gateway_failure.setter
    def consecutive_gateway_failure(self, consecutive_gateway_failure):
        """Sets the consecutive_gateway_failure of this OutlierDetection.

        The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 5. Setting this to 0 effectively turns off the consecutive gateway failure detector. 

        :param consecutive_gateway_failure: The consecutive_gateway_failure of this OutlierDetection.
        :type consecutive_gateway_failure: int
        """

        self._consecutive_gateway_failure = consecutive_gateway_failure

    @property
    def enforcing_consecutive_5xx(self):
        """Gets the enforcing_consecutive_5xx of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. 

        :return: The enforcing_consecutive_5xx of this OutlierDetection.
        :rtype: int
        """
        return self._enforcing_consecutive_5xx

    @enforcing_consecutive_5xx.setter
    def enforcing_consecutive_5xx(self, enforcing_consecutive_5xx):
        """Sets the enforcing_consecutive_5xx of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. 

        :param enforcing_consecutive_5xx: The enforcing_consecutive_5xx of this OutlierDetection.
        :type enforcing_consecutive_5xx: int
        """

        self._enforcing_consecutive_5xx = enforcing_consecutive_5xx

    @property
    def enforcing_consecutive_gateway_failure(self):
        """Gets the enforcing_consecutive_gateway_failure of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. 

        :return: The enforcing_consecutive_gateway_failure of this OutlierDetection.
        :rtype: int
        """
        return self._enforcing_consecutive_gateway_failure

    @enforcing_consecutive_gateway_failure.setter
    def enforcing_consecutive_gateway_failure(self, enforcing_consecutive_gateway_failure):
        """Sets the enforcing_consecutive_gateway_failure of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. 

        :param enforcing_consecutive_gateway_failure: The enforcing_consecutive_gateway_failure of this OutlierDetection.
        :type enforcing_consecutive_gateway_failure: int
        """

        self._enforcing_consecutive_gateway_failure = enforcing_consecutive_gateway_failure

    @property
    def enforcing_success_rate(self):
        """Gets the enforcing_success_rate of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. 

        :return: The enforcing_success_rate of this OutlierDetection.
        :rtype: int
        """
        return self._enforcing_success_rate

    @enforcing_success_rate.setter
    def enforcing_success_rate(self, enforcing_success_rate):
        """Sets the enforcing_success_rate of this OutlierDetection.

        The % chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. 

        :param enforcing_success_rate: The enforcing_success_rate of this OutlierDetection.
        :type enforcing_success_rate: int
        """

        self._enforcing_success_rate = enforcing_success_rate

    @property
    def interval_msec(self):
        """Gets the interval_msec of this OutlierDetection.

        The time interval between ejection analysis sweeps. This can result in both new ejections due to success rate outlier detection as well as hosts being returned to service. Defaults to 10s and must be greater than 0. 

        :return: The interval_msec of this OutlierDetection.
        :rtype: int
        """
        return self._interval_msec

    @interval_msec.setter
    def interval_msec(self, interval_msec):
        """Sets the interval_msec of this OutlierDetection.

        The time interval between ejection analysis sweeps. This can result in both new ejections due to success rate outlier detection as well as hosts being returned to service. Defaults to 10s and must be greater than 0. 

        :param interval_msec: The interval_msec of this OutlierDetection.
        :type interval_msec: int
        """

        self._interval_msec = interval_msec

    @property
    def max_ejection_percent(self):
        """Gets the max_ejection_percent of this OutlierDetection.

        The maximum % of an upstream cluster that can be ejected due to outlier detection. Defaults to 10% but will always eject at least one host. 

        :return: The max_ejection_percent of this OutlierDetection.
        :rtype: int
        """
        return self._max_ejection_percent

    @max_ejection_percent.setter
    def max_ejection_percent(self, max_ejection_percent):
        """Sets the max_ejection_percent of this OutlierDetection.

        The maximum % of an upstream cluster that can be ejected due to outlier detection. Defaults to 10% but will always eject at least one host. 

        :param max_ejection_percent: The max_ejection_percent of this OutlierDetection.
        :type max_ejection_percent: int
        """

        self._max_ejection_percent = max_ejection_percent

    @property
    def success_rate_minimum_hosts(self):
        """Gets the success_rate_minimum_hosts of this OutlierDetection.

        The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5. Setting this to 0 effectively triggers the success rate detector regardless of the number of valid hosts during an interval (as determined by `success_rate_request_volume`). 

        :return: The success_rate_minimum_hosts of this OutlierDetection.
        :rtype: int
        """
        return self._success_rate_minimum_hosts

    @success_rate_minimum_hosts.setter
    def success_rate_minimum_hosts(self, success_rate_minimum_hosts):
        """Sets the success_rate_minimum_hosts of this OutlierDetection.

        The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5. Setting this to 0 effectively triggers the success rate detector regardless of the number of valid hosts during an interval (as determined by `success_rate_request_volume`). 

        :param success_rate_minimum_hosts: The success_rate_minimum_hosts of this OutlierDetection.
        :type success_rate_minimum_hosts: int
        """

        self._success_rate_minimum_hosts = success_rate_minimum_hosts

    @property
    def success_rate_request_volume(self):
        """Gets the success_rate_request_volume of this OutlierDetection.

        The minimum number of total requests that must be collected in one interval (as defined by interval_msec) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100. Must be greater than 0. 

        :return: The success_rate_request_volume of this OutlierDetection.
        :rtype: int
        """
        return self._success_rate_request_volume

    @success_rate_request_volume.setter
    def success_rate_request_volume(self, success_rate_request_volume):
        """Sets the success_rate_request_volume of this OutlierDetection.

        The minimum number of total requests that must be collected in one interval (as defined by interval_msec) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100. Must be greater than 0. 

        :param success_rate_request_volume: The success_rate_request_volume of this OutlierDetection.
        :type success_rate_request_volume: int
        """

        self._success_rate_request_volume = success_rate_request_volume

    @property
    def success_rate_stdev_factor(self):
        """Gets the success_rate_stdev_factor of this OutlierDetection.

        This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Setting this to 0 effectively turns off the success rate detector. 

        :return: The success_rate_stdev_factor of this OutlierDetection.
        :rtype: int
        """
        return self._success_rate_stdev_factor

    @success_rate_stdev_factor.setter
    def success_rate_stdev_factor(self, success_rate_stdev_factor):
        """Sets the success_rate_stdev_factor of this OutlierDetection.

        This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Setting this to 0 effectively turns off the success rate detector. 

        :param success_rate_stdev_factor: The success_rate_stdev_factor of this OutlierDetection.
        :type success_rate_stdev_factor: int
        """

        self._success_rate_stdev_factor = success_rate_stdev_factor
