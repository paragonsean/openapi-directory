# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_retries: int=None, per_try_timeout_msec: int=None, timeout_msec: int=None):
        """RetryPolicy - a model defined in OpenAPI

        :param num_retries: The num_retries of this RetryPolicy.
        :param per_try_timeout_msec: The per_try_timeout_msec of this RetryPolicy.
        :param timeout_msec: The timeout_msec of this RetryPolicy.
        """
        self.openapi_types = {
            'num_retries': int,
            'per_try_timeout_msec': int,
            'timeout_msec': int
        }

        self.attribute_map = {
            'num_retries': 'num_retries',
            'per_try_timeout_msec': 'per_try_timeout_msec',
            'timeout_msec': 'timeout_msec'
        }

        self._num_retries = num_retries
        self._per_try_timeout_msec = per_try_timeout_msec
        self._timeout_msec = timeout_msec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryPolicy of this RetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_retries(self):
        """Gets the num_retries of this RetryPolicy.

        Number of times to retry an upstream request. Note that the initial connection attempt is not included in this number, hence 0 means initial attempt and no retries, and 1 means initial attempt plus one retry. 

        :return: The num_retries of this RetryPolicy.
        :rtype: int
        """
        return self._num_retries

    @num_retries.setter
    def num_retries(self, num_retries):
        """Sets the num_retries of this RetryPolicy.

        Number of times to retry an upstream request. Note that the initial connection attempt is not included in this number, hence 0 means initial attempt and no retries, and 1 means initial attempt plus one retry. 

        :param num_retries: The num_retries of this RetryPolicy.
        :type num_retries: int
        """

        self._num_retries = num_retries

    @property
    def per_try_timeout_msec(self):
        """Gets the per_try_timeout_msec of this RetryPolicy.

        Time limit in milliseconds for a single attempt.

        :return: The per_try_timeout_msec of this RetryPolicy.
        :rtype: int
        """
        return self._per_try_timeout_msec

    @per_try_timeout_msec.setter
    def per_try_timeout_msec(self, per_try_timeout_msec):
        """Sets the per_try_timeout_msec of this RetryPolicy.

        Time limit in milliseconds for a single attempt.

        :param per_try_timeout_msec: The per_try_timeout_msec of this RetryPolicy.
        :type per_try_timeout_msec: int
        """

        self._per_try_timeout_msec = per_try_timeout_msec

    @property
    def timeout_msec(self):
        """Gets the timeout_msec of this RetryPolicy.

        Total time limit in milliseconds for all attempts (including the initial attempt) 

        :return: The timeout_msec of this RetryPolicy.
        :rtype: int
        """
        return self._timeout_msec

    @timeout_msec.setter
    def timeout_msec(self, timeout_msec):
        """Sets the timeout_msec of this RetryPolicy.

        Total time limit in milliseconds for all attempts (including the initial attempt) 

        :param timeout_msec: The timeout_msec of this RetryPolicy.
        :type timeout_msec: int
        """

        self._timeout_msec = timeout_msec
