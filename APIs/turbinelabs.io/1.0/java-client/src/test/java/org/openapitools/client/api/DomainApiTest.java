/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DomainCreate;
import org.openapitools.client.model.DomainResult;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MultiDomainResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainApi
 */
@Disabled
public class DomainApiTest {

    private final DomainApi api = new DomainApi();

    /**
     * delete domain
     *
     * Delete an existing domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainDomainKeyDeleteTest() throws ApiException {
        String domainKey = null;
        String checksum = null;
        Object response = api.domainDomainKeyDelete(domainKey, checksum);
        // TODO: test validations
    }

    /**
     * get domain
     *
     * Get details for a single domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainDomainKeyGetTest() throws ApiException {
        String domainKey = null;
        DomainResult response = api.domainDomainKeyGet(domainKey);
        // TODO: test validations
    }

    /**
     * get domains
     *
     * Get a list of domains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainGetTest() throws ApiException {
        String filters = null;
        MultiDomainResult response = api.domainGet(filters);
        // TODO: test validations
    }

    /**
     * create domain
     *
     * Create a new domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainPostTest() throws ApiException {
        DomainCreate domain = null;
        DomainResult response = api.domainPost(domain);
        // TODO: test validations
    }

}
