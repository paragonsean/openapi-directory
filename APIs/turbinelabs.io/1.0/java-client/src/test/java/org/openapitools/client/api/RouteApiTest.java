/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MultiRouteResult;
import org.openapitools.client.model.Route;
import org.openapitools.client.model.RouteCreate;
import org.openapitools.client.model.RouteResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteApi
 */
@Disabled
public class RouteApiTest {

    private final RouteApi api = new RouteApi();

    /**
     * get routes
     *
     * Get a list of routes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeGetTest() throws ApiException {
        String filters = null;
        MultiRouteResult response = api.routeGet(filters);
        // TODO: test validations
    }

    /**
     * create route
     *
     * Create a new route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routePostTest() throws ApiException {
        RouteCreate route = null;
        RouteResult response = api.routePost(route);
        // TODO: test validations
    }

    /**
     * delete route
     *
     * Delete an existing route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeRouteKeyDeleteTest() throws ApiException {
        String routeKey = null;
        String checksum = null;
        Object response = api.routeRouteKeyDelete(routeKey, checksum);
        // TODO: test validations
    }

    /**
     * get route
     *
     * Get details for an existing route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeRouteKeyGetTest() throws ApiException {
        String routeKey = null;
        RouteResult response = api.routeRouteKeyGet(routeKey);
        // TODO: test validations
    }

    /**
     * modify route
     *
     * Modify an existing route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeRouteKeyPutTest() throws ApiException {
        String routeKey = null;
        Route route = null;
        RouteResult response = api.routeRouteKeyPut(routeKey, route);
        // TODO: test validations
    }

    /**
     * delete shared_rules object
     *
     * Delete an existing shared_rules object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharedRulesSharedRulesKeyDeleteTest() throws ApiException {
        String sharedRulesKey = null;
        String checksum = null;
        Object response = api.sharedRulesSharedRulesKeyDelete(sharedRulesKey, checksum);
        // TODO: test validations
    }

}
