/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessToken;
import org.openapitools.client.model.AccessTokenDescription;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MultiAccessTokens;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserManagementApi
 */
@Disabled
public class UserManagementApiTest {

    private final UserManagementApi api = new UserManagementApi();

    /**
     * Delete the specified access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUserSelfAccessTokenAccessTokenKeyDeleteTest() throws ApiException {
        String accessTokenKey = null;
        String checksum = null;
        api.adminUserSelfAccessTokenAccessTokenKeyDelete(accessTokenKey, checksum);
        // TODO: test validations
    }

    /**
     * Lists Access Tokens that are configured for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUserSelfAccessTokensGetTest() throws ApiException {
        MultiAccessTokens response = api.adminUserSelfAccessTokensGet();
        // TODO: test validations
    }

    /**
     * Creates a new Access Token and associates it with the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUserSelfAccessTokensPostTest() throws ApiException {
        AccessTokenDescription description = null;
        AccessToken response = api.adminUserSelfAccessTokensPost(description);
        // TODO: test validations
    }

    /**
     * Returns the user object for the account authorized and making this request.
     *
     * Request the user object for an authorized requesting account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUserSelfGetTest() throws ApiException {
        User response = api.adminUserSelfGet();
        // TODO: test validations
    }

}
