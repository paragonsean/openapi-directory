/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthCheckHealthChecker;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for HealthCheck
 */
public class HealthCheckTest {
    private final HealthCheck model = new HealthCheck();

    /**
     * Model tests for HealthCheck
     */
    @Test
    public void testHealthCheck() {
        // TODO: test HealthCheck
    }

    /**
     * Test the property 'healthChecker'
     */
    @Test
    public void healthCheckerTest() {
        // TODO: test healthChecker
    }

    /**
     * Test the property 'healthyEdgeIntervalMsec'
     */
    @Test
    public void healthyEdgeIntervalMsecTest() {
        // TODO: test healthyEdgeIntervalMsec
    }

    /**
     * Test the property 'healthyThreshold'
     */
    @Test
    public void healthyThresholdTest() {
        // TODO: test healthyThreshold
    }

    /**
     * Test the property 'intervalJitterMsec'
     */
    @Test
    public void intervalJitterMsecTest() {
        // TODO: test intervalJitterMsec
    }

    /**
     * Test the property 'intervalMsec'
     */
    @Test
    public void intervalMsecTest() {
        // TODO: test intervalMsec
    }

    /**
     * Test the property 'noTrafficIntervalMsec'
     */
    @Test
    public void noTrafficIntervalMsecTest() {
        // TODO: test noTrafficIntervalMsec
    }

    /**
     * Test the property 'reuseConnection'
     */
    @Test
    public void reuseConnectionTest() {
        // TODO: test reuseConnection
    }

    /**
     * Test the property 'timeoutMsec'
     */
    @Test
    public void timeoutMsecTest() {
        // TODO: test timeoutMsec
    }

    /**
     * Test the property 'unhealthyEdgeIntervalMsec'
     */
    @Test
    public void unhealthyEdgeIntervalMsecTest() {
        // TODO: test unhealthyEdgeIntervalMsec
    }

    /**
     * Test the property 'unhealthyIntervalMsec'
     */
    @Test
    public void unhealthyIntervalMsecTest() {
        // TODO: test unhealthyIntervalMsec
    }

    /**
     * Test the property 'unhealthyThreshold'
     */
    @Test
    public void unhealthyThresholdTest() {
        // TODO: test unhealthyThreshold
    }

}
