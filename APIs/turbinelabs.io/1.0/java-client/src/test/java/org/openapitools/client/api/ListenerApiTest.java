/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Listener;
import org.openapitools.client.model.ListenerCreate;
import org.openapitools.client.model.ListenerResult;
import org.openapitools.client.model.MultiListenerResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListenerApi
 */
@Disabled
public class ListenerApiTest {

    private final ListenerApi api = new ListenerApi();

    /**
     * list listeners
     *
     * Get a list of listeners
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenerGetTest() throws ApiException {
        String filters = null;
        MultiListenerResult response = api.listenerGet(filters);
        // TODO: test validations
    }

    /**
     * delete listener
     *
     * Delete existing listener
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenerListenerKeyDeleteTest() throws ApiException {
        String listenerKey = null;
        String checksum = null;
        Listener response = api.listenerListenerKeyDelete(listenerKey, checksum);
        // TODO: test validations
    }

    /**
     * get listener
     *
     * Get details for a single listener
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenerListenerKeyGetTest() throws ApiException {
        String listenerKey = null;
        ListenerResult response = api.listenerListenerKeyGet(listenerKey);
        // TODO: test validations
    }

    /**
     * modify listener
     *
     * Modify an existing listener
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenerListenerKeyPutTest() throws ApiException {
        String listenerKey = null;
        Listener listener = null;
        ListenerResult response = api.listenerListenerKeyPut(listenerKey, listener);
        // TODO: test validations
    }

    /**
     * create listener
     *
     * Create a new listener
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listenerPostTest() throws ApiException {
        ListenerCreate listener = null;
        ListenerResult response = api.listenerPost(listener);
        // TODO: test validations
    }

}
