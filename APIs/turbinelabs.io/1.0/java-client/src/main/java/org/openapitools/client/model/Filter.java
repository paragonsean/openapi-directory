/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filter {
  public static final String SERIALIZED_NAME_ABSOLUTE_MATCH_ONLY = "absolute_match_only";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_MATCH_ONLY)
  private Boolean absoluteMatchOnly;

  public static final String SERIALIZED_NAME_ACTOR_KEY = "actor_key";
  @SerializedName(SERIALIZED_NAME_ACTOR_KEY)
  private String actorKey;

  public static final String SERIALIZED_NAME_ATTRIBUTE_PATH = "attribute_path";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_PATH)
  private String attributePath;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attribute_value";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private String attributeValue;

  public static final String SERIALIZED_NAME_CHANGE_TXN = "change_txn";
  @SerializedName(SERIALIZED_NAME_CHANGE_TXN)
  private String changeTxn;

  /**
   * Whether the value was added or removed to the object.
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    ADDITION("addition"),
    
    REMOVAL("removal");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeTypeEnum fromValue(String value) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "change_type";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeTypeEnum changeType;

  public static final String SERIALIZED_NAME_EXCLUDE_EMPTY_VALUES = "exclude_empty_values";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_EMPTY_VALUES)
  private Boolean excludeEmptyValues;

  public static final String SERIALIZED_NAME_NEGATIVE_MATCH = "negative_match";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_MATCH)
  private Boolean negativeMatch;

  public static final String SERIALIZED_NAME_OBJECT_KEY = "object_key";
  @SerializedName(SERIALIZED_NAME_OBJECT_KEY)
  private String objectKey;

  /**
   * The name of the object being being altered.
   */
  @JsonAdapter(ObjectTypeEnum.Adapter.class)
  public enum ObjectTypeEnum {
    ORG("org"),
    
    USER("user"),
    
    ZONE("zone"),
    
    PROXY("proxy"),
    
    DOMAIN("domain"),
    
    ROUTE("route"),
    
    SHARED_RULES("shared_rules"),
    
    CLUSTER("cluster");

    private String value;

    ObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectTypeEnum fromValue(String value) {
      for (ObjectTypeEnum b : ObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "object_type";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private ObjectTypeEnum objectType;

  public static final String SERIALIZED_NAME_ORG_KEY = "org_key";
  @SerializedName(SERIALIZED_NAME_ORG_KEY)
  private String orgKey;

  public static final String SERIALIZED_NAME_TIME_RANGE = "time_range";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private TimeRange timeRange;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public Filter() {
  }

  public Filter absoluteMatchOnly(Boolean absoluteMatchOnly) {
    this.absoluteMatchOnly = absoluteMatchOnly;
    return this;
  }

  /**
   * If set this will return ChangeEntry values with a path that matches the attribute_path property exactly. 
   * @return absoluteMatchOnly
   */
  @javax.annotation.Nullable
  public Boolean getAbsoluteMatchOnly() {
    return absoluteMatchOnly;
  }

  public void setAbsoluteMatchOnly(Boolean absoluteMatchOnly) {
    this.absoluteMatchOnly = absoluteMatchOnly;
  }


  public Filter actorKey(String actorKey) {
    this.actorKey = actorKey;
    return this;
  }

  /**
   * The user who made the change.
   * @return actorKey
   */
  @javax.annotation.Nullable
  public String getActorKey() {
    return actorKey;
  }

  public void setActorKey(String actorKey) {
    this.actorKey = actorKey;
  }


  public Filter attributePath(String attributePath) {
    this.attributePath = attributePath;
    return this;
  }

  /**
   * A dot-separated / bracket-indexed path to the field changed on the object. &#39;%&#39; may be used as a wildcard. 
   * @return attributePath
   */
  @javax.annotation.Nullable
  public String getAttributePath() {
    return attributePath;
  }

  public void setAttributePath(String attributePath) {
    this.attributePath = attributePath;
  }


  public Filter attributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
    return this;
  }

  /**
   * The value that has been added or removed to the object at the attribute path indicated in path. 
   * @return attributeValue
   */
  @javax.annotation.Nullable
  public String getAttributeValue() {
    return attributeValue;
  }

  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  public Filter changeTxn(String changeTxn) {
    this.changeTxn = changeTxn;
    return this;
  }

  /**
   * A unique identifier for all this transaction. It is shared by all attribute updates within a change. 
   * @return changeTxn
   */
  @javax.annotation.Nullable
  public String getChangeTxn() {
    return changeTxn;
  }

  public void setChangeTxn(String changeTxn) {
    this.changeTxn = changeTxn;
  }


  public Filter changeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Whether the value was added or removed to the object.
   * @return changeType
   */
  @javax.annotation.Nullable
  public ChangeTypeEnum getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }


  public Filter excludeEmptyValues(Boolean excludeEmptyValues) {
    this.excludeEmptyValues = excludeEmptyValues;
    return this;
  }

  /**
   * If set this will exclude ChangeEntry records that save the addition or removal of an empty value. 
   * @return excludeEmptyValues
   */
  @javax.annotation.Nullable
  public Boolean getExcludeEmptyValues() {
    return excludeEmptyValues;
  }

  public void setExcludeEmptyValues(Boolean excludeEmptyValues) {
    this.excludeEmptyValues = excludeEmptyValues;
  }


  public Filter negativeMatch(Boolean negativeMatch) {
    this.negativeMatch = negativeMatch;
    return this;
  }

  /**
   * If set this filter will match the all ChangeEntry records that do NOT meet the constraints laid out in this Filter object. 
   * @return negativeMatch
   */
  @javax.annotation.Nullable
  public Boolean getNegativeMatch() {
    return negativeMatch;
  }

  public void setNegativeMatch(Boolean negativeMatch) {
    this.negativeMatch = negativeMatch;
  }


  public Filter objectKey(String objectKey) {
    this.objectKey = objectKey;
    return this;
  }

  /**
   * An ID uniquely identifying the object being changed.
   * @return objectKey
   */
  @javax.annotation.Nullable
  public String getObjectKey() {
    return objectKey;
  }

  public void setObjectKey(String objectKey) {
    this.objectKey = objectKey;
  }


  public Filter objectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The name of the object being being altered.
   * @return objectType
   */
  @javax.annotation.Nullable
  public ObjectTypeEnum getObjectType() {
    return objectType;
  }

  public void setObjectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
  }


  public Filter orgKey(String orgKey) {
    this.orgKey = orgKey;
    return this;
  }

  /**
   * The organization the objects being updated belong to.
   * @return orgKey
   */
  @javax.annotation.Nullable
  public String getOrgKey() {
    return orgKey;
  }

  public void setOrgKey(String orgKey) {
    this.orgKey = orgKey;
  }


  public Filter timeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Get timeRange
   * @return timeRange
   */
  @javax.annotation.Nullable
  public TimeRange getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
  }


  public Filter zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * The zone this object is located in.
   * @return zoneKey
   */
  @javax.annotation.Nullable
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.absoluteMatchOnly, filter.absoluteMatchOnly) &&
        Objects.equals(this.actorKey, filter.actorKey) &&
        Objects.equals(this.attributePath, filter.attributePath) &&
        Objects.equals(this.attributeValue, filter.attributeValue) &&
        Objects.equals(this.changeTxn, filter.changeTxn) &&
        Objects.equals(this.changeType, filter.changeType) &&
        Objects.equals(this.excludeEmptyValues, filter.excludeEmptyValues) &&
        Objects.equals(this.negativeMatch, filter.negativeMatch) &&
        Objects.equals(this.objectKey, filter.objectKey) &&
        Objects.equals(this.objectType, filter.objectType) &&
        Objects.equals(this.orgKey, filter.orgKey) &&
        Objects.equals(this.timeRange, filter.timeRange) &&
        Objects.equals(this.zoneKey, filter.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteMatchOnly, actorKey, attributePath, attributeValue, changeTxn, changeType, excludeEmptyValues, negativeMatch, objectKey, objectType, orgKey, timeRange, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    absoluteMatchOnly: ").append(toIndentedString(absoluteMatchOnly)).append("\n");
    sb.append("    actorKey: ").append(toIndentedString(actorKey)).append("\n");
    sb.append("    attributePath: ").append(toIndentedString(attributePath)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    changeTxn: ").append(toIndentedString(changeTxn)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    excludeEmptyValues: ").append(toIndentedString(excludeEmptyValues)).append("\n");
    sb.append("    negativeMatch: ").append(toIndentedString(negativeMatch)).append("\n");
    sb.append("    objectKey: ").append(toIndentedString(objectKey)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    orgKey: ").append(toIndentedString(orgKey)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_match_only");
    openapiFields.add("actor_key");
    openapiFields.add("attribute_path");
    openapiFields.add("attribute_value");
    openapiFields.add("change_txn");
    openapiFields.add("change_type");
    openapiFields.add("exclude_empty_values");
    openapiFields.add("negative_match");
    openapiFields.add("object_key");
    openapiFields.add("object_type");
    openapiFields.add("org_key");
    openapiFields.add("time_range");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filter is not found in the empty JSON string", Filter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actor_key") != null && !jsonObj.get("actor_key").isJsonNull()) && !jsonObj.get("actor_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_key").toString()));
      }
      if ((jsonObj.get("attribute_path") != null && !jsonObj.get("attribute_path").isJsonNull()) && !jsonObj.get("attribute_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_path").toString()));
      }
      if ((jsonObj.get("attribute_value") != null && !jsonObj.get("attribute_value").isJsonNull()) && !jsonObj.get("attribute_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_value").toString()));
      }
      if ((jsonObj.get("change_txn") != null && !jsonObj.get("change_txn").isJsonNull()) && !jsonObj.get("change_txn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_txn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_txn").toString()));
      }
      if ((jsonObj.get("change_type") != null && !jsonObj.get("change_type").isJsonNull()) && !jsonObj.get("change_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_type").toString()));
      }
      // validate the optional field `change_type`
      if (jsonObj.get("change_type") != null && !jsonObj.get("change_type").isJsonNull()) {
        ChangeTypeEnum.validateJsonElement(jsonObj.get("change_type"));
      }
      if ((jsonObj.get("object_key") != null && !jsonObj.get("object_key").isJsonNull()) && !jsonObj.get("object_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_key").toString()));
      }
      if ((jsonObj.get("object_type") != null && !jsonObj.get("object_type").isJsonNull()) && !jsonObj.get("object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_type").toString()));
      }
      // validate the optional field `object_type`
      if (jsonObj.get("object_type") != null && !jsonObj.get("object_type").isJsonNull()) {
        ObjectTypeEnum.validateJsonElement(jsonObj.get("object_type"));
      }
      if ((jsonObj.get("org_key") != null && !jsonObj.get("org_key").isJsonNull()) && !jsonObj.get("org_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_key").toString()));
      }
      // validate the optional field `time_range`
      if (jsonObj.get("time_range") != null && !jsonObj.get("time_range").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("time_range"));
      }
      if ((jsonObj.get("zone_key") != null && !jsonObj.get("zone_key").isJsonNull()) && !jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filter.class));

       return (TypeAdapter<T>) new TypeAdapter<Filter>() {
           @Override
           public void write(JsonWriter out, Filter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filter
   * @throws IOException if the JSON string is invalid with respect to Filter
   */
  public static Filter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filter.class);
  }

  /**
   * Convert an instance of Filter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

