/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertKeyPathPair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Experimental: Specifies whether a domain should support SSL/TLS connections from clients.  If not set the proxy will expect unencrypted HTTP traffic. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SSLConfig {
  public static final String SERIALIZED_NAME_CERT_KEY_PAIRS = "cert_key_pairs";
  @SerializedName(SERIALIZED_NAME_CERT_KEY_PAIRS)
  private List<CertKeyPathPair> certKeyPairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CIPHER_FILTER = "cipher_filter";
  @SerializedName(SERIALIZED_NAME_CIPHER_FILTER)
  private String cipherFilter;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<String> protocols = new ArrayList<>();

  public SSLConfig() {
  }

  public SSLConfig certKeyPairs(List<CertKeyPathPair> certKeyPairs) {
    this.certKeyPairs = certKeyPairs;
    return this;
  }

  public SSLConfig addCertKeyPairsItem(CertKeyPathPair certKeyPairsItem) {
    if (this.certKeyPairs == null) {
      this.certKeyPairs = new ArrayList<>();
    }
    this.certKeyPairs.add(certKeyPairsItem);
    return this;
  }

  /**
   * SSLConfig must have one cert_key_pairs entry specified.
   * @return certKeyPairs
   */
  @javax.annotation.Nonnull
  public List<CertKeyPathPair> getCertKeyPairs() {
    return certKeyPairs;
  }

  public void setCertKeyPairs(List<CertKeyPathPair> certKeyPairs) {
    this.certKeyPairs = certKeyPairs;
  }


  public SSLConfig cipherFilter(String cipherFilter) {
    this.cipherFilter = cipherFilter;
    return this;
  }

  /**
   * An OpenSSL compatible filter string indicating the ciphers acceptable for this proxy to use while communicating with clients. The default value is EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH. For more information see https://wiki.openssl.org/index.php/Manual:Ciphers(1) 
   * @return cipherFilter
   */
  @javax.annotation.Nullable
  public String getCipherFilter() {
    return cipherFilter;
  }

  public void setCipherFilter(String cipherFilter) {
    this.cipherFilter = cipherFilter;
  }


  public SSLConfig protocols(List<String> protocols) {
    this.protocols = protocols;
    return this;
  }

  public SSLConfig addProtocolsItem(String protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * A list of acceptable SSL/TLS protocol. The default values are TLSv1, TLSv1.1, TLSv1.2. Additional valid values are SSLv2 and SSLv3. 
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<String> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<String> protocols) {
    this.protocols = protocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSLConfig ssLConfig = (SSLConfig) o;
    return Objects.equals(this.certKeyPairs, ssLConfig.certKeyPairs) &&
        Objects.equals(this.cipherFilter, ssLConfig.cipherFilter) &&
        Objects.equals(this.protocols, ssLConfig.protocols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certKeyPairs, cipherFilter, protocols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSLConfig {\n");
    sb.append("    certKeyPairs: ").append(toIndentedString(certKeyPairs)).append("\n");
    sb.append("    cipherFilter: ").append(toIndentedString(cipherFilter)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_key_pairs");
    openapiFields.add("cipher_filter");
    openapiFields.add("protocols");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cert_key_pairs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSLConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSLConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSLConfig is not found in the empty JSON string", SSLConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SSLConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSLConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SSLConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("cert_key_pairs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_key_pairs` to be an array in the JSON string but got `%s`", jsonObj.get("cert_key_pairs").toString()));
      }

      JsonArray jsonArraycertKeyPairs = jsonObj.getAsJsonArray("cert_key_pairs");
      // validate the required field `cert_key_pairs` (array)
      for (int i = 0; i < jsonArraycertKeyPairs.size(); i++) {
        CertKeyPathPair.validateJsonElement(jsonArraycertKeyPairs.get(i));
      };
      if ((jsonObj.get("cipher_filter") != null && !jsonObj.get("cipher_filter").isJsonNull()) && !jsonObj.get("cipher_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher_filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull() && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSLConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSLConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSLConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSLConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SSLConfig>() {
           @Override
           public void write(JsonWriter out, SSLConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSLConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSLConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSLConfig
   * @throws IOException if the JSON string is invalid with respect to SSLConfig
   */
  public static SSLConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSLConfig.class);
  }

  /**
   * Convert an instance of SSLConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

