/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Experimental: Controls simple CORS responses for the associated domain. The configurable properties map closely to the CORS specification which should be referenced for a full discussion on their meaning: https://www.w3.org/TR/cors/ or https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CORSConfig {
  public static final String SERIALIZED_NAME_ALLOW_CREDENTIALS = "allow_credentials";
  @SerializedName(SERIALIZED_NAME_ALLOW_CREDENTIALS)
  private Boolean allowCredentials;

  public static final String SERIALIZED_NAME_ALLOWED_HEADERS = "allowed_headers";
  @SerializedName(SERIALIZED_NAME_ALLOWED_HEADERS)
  private List<String> allowedHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_METHODS = "allowed_methods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_METHODS)
  private List<String> allowedMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_ORIGINS = "allowed_origins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ORIGINS)
  private List<String> allowedOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSED_HEADERS = "exposed_headers";
  @SerializedName(SERIALIZED_NAME_EXPOSED_HEADERS)
  private List<String> exposedHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_AGE = "max_age";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private Integer maxAge;

  public CORSConfig() {
  }

  public CORSConfig allowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  /**
   * Indicates whether the response to request can be exposed when the omit credentials flag is unset https://www.w3.org/TR/cors/#access-control-allow-credentials-response-header. 
   * @return allowCredentials
   */
  @javax.annotation.Nullable
  public Boolean getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
  }


  public CORSConfig allowedHeaders(List<String> allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
    return this;
  }

  public CORSConfig addAllowedHeadersItem(String allowedHeadersItem) {
    if (this.allowedHeaders == null) {
      this.allowedHeaders = new ArrayList<>();
    }
    this.allowedHeaders.add(allowedHeadersItem);
    return this;
  }

  /**
   * Specifies what headers are allowed to be set when a request is made. https://www.w3.org/TR/cors/#access-control-allow-headers-response-header. 
   * @return allowedHeaders
   */
  @javax.annotation.Nullable
  public List<String> getAllowedHeaders() {
    return allowedHeaders;
  }

  public void setAllowedHeaders(List<String> allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
  }


  public CORSConfig allowedMethods(List<String> allowedMethods) {
    this.allowedMethods = allowedMethods;
    return this;
  }

  public CORSConfig addAllowedMethodsItem(String allowedMethodsItem) {
    if (this.allowedMethods == null) {
      this.allowedMethods = new ArrayList<>();
    }
    this.allowedMethods.add(allowedMethodsItem);
    return this;
  }

  /**
   * Indicates which HTTP request types may be used to call an endpoint. https://www.w3.org/TR/cors/#access-control-allow-methods-response-header. 
   * @return allowedMethods
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedMethods() {
    return allowedMethods;
  }

  public void setAllowedMethods(List<String> allowedMethods) {
    this.allowedMethods = allowedMethods;
  }


  public CORSConfig allowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  public CORSConfig addAllowedOriginsItem(String allowedOriginsItem) {
    if (this.allowedOrigins == null) {
      this.allowedOrigins = new ArrayList<>();
    }
    this.allowedOrigins.add(allowedOriginsItem);
    return this;
  }

  /**
   * Must contain a single element specifying the domain (origin) allowed to make requsets to this domain. If any origin is acceptable &#39;*&#39; may be used as a wildcard https://www.w3.org/TR/cors/#origin-request-header, https://www.w3.org/TR/cors/#access-control-allow-origin-response-header. 
   * @return allowedOrigins
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }


  public CORSConfig exposedHeaders(List<String> exposedHeaders) {
    this.exposedHeaders = exposedHeaders;
    return this;
  }

  public CORSConfig addExposedHeadersItem(String exposedHeadersItem) {
    if (this.exposedHeaders == null) {
      this.exposedHeaders = new ArrayList<>();
    }
    this.exposedHeaders.add(exposedHeadersItem);
    return this;
  }

  /**
   * Indicates which response headers may be accessed from the browser. https://www.w3.org/TR/cors/#http-access-control-expose-headers. 
   * @return exposedHeaders
   */
  @javax.annotation.Nullable
  public List<String> getExposedHeaders() {
    return exposedHeaders;
  }

  public void setExposedHeaders(List<String> exposedHeaders) {
    this.exposedHeaders = exposedHeaders;
  }


  public CORSConfig maxAge(Integer maxAge) {
    this.maxAge = maxAge;
    return this;
  }

  /**
   * Sets how long (in seconds) the response to a preflight request may be cached. A value of -1 will disable caching. https://www.w3.org/TR/cors/#access-control-max-age-response-header. 
   * @return maxAge
   */
  @javax.annotation.Nullable
  public Integer getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Integer maxAge) {
    this.maxAge = maxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CORSConfig coRSConfig = (CORSConfig) o;
    return Objects.equals(this.allowCredentials, coRSConfig.allowCredentials) &&
        Objects.equals(this.allowedHeaders, coRSConfig.allowedHeaders) &&
        Objects.equals(this.allowedMethods, coRSConfig.allowedMethods) &&
        Objects.equals(this.allowedOrigins, coRSConfig.allowedOrigins) &&
        Objects.equals(this.exposedHeaders, coRSConfig.exposedHeaders) &&
        Objects.equals(this.maxAge, coRSConfig.maxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCredentials, allowedHeaders, allowedMethods, allowedOrigins, exposedHeaders, maxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CORSConfig {\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    allowedHeaders: ").append(toIndentedString(allowedHeaders)).append("\n");
    sb.append("    allowedMethods: ").append(toIndentedString(allowedMethods)).append("\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    exposedHeaders: ").append(toIndentedString(exposedHeaders)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_credentials");
    openapiFields.add("allowed_headers");
    openapiFields.add("allowed_methods");
    openapiFields.add("allowed_origins");
    openapiFields.add("exposed_headers");
    openapiFields.add("max_age");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed_methods");
    openapiRequiredFields.add("allowed_origins");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CORSConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CORSConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CORSConfig is not found in the empty JSON string", CORSConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CORSConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CORSConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CORSConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_headers") != null && !jsonObj.get("allowed_headers").isJsonNull() && !jsonObj.get("allowed_headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_headers` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_headers").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowed_methods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_methods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_methods` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_methods").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowed_origins") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_origins` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_origins").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exposed_headers") != null && !jsonObj.get("exposed_headers").isJsonNull() && !jsonObj.get("exposed_headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposed_headers` to be an array in the JSON string but got `%s`", jsonObj.get("exposed_headers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CORSConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CORSConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CORSConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CORSConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CORSConfig>() {
           @Override
           public void write(JsonWriter out, CORSConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CORSConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CORSConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CORSConfig
   * @throws IOException if the JSON string is invalid with respect to CORSConfig
   */
  public static CORSConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CORSConfig.class);
  }

  /**
   * Convert an instance of CORSConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

