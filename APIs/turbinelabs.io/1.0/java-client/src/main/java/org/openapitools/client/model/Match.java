/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Metadatum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a mapping of request attributes to constraints on a cluster using different matching schemes.  Certain combinations of &#x60;kind&#x60; and &#x60;behavior&#x60; are not allowed   | kind | behavior |   | ---- | -------- |   | query | regex |   | query | range |   | cookie | range | 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Match {
  public static final String SERIALIZED_NAME_BEHAVIOR = "behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  private String behavior;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Metadatum from;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private Metadatum to;

  public Match() {
  }

  public Match behavior(String behavior) {
    this.behavior = behavior;
    return this;
  }

  /**
   * Defines how a request attribute should be matched. If not specified, defaults to &#x60;exact&#x60;. Valid values are   * exact   * regex   * range   * prefix   * suffix 
   * @return behavior
   */
  @javax.annotation.Nullable
  public String getBehavior() {
    return behavior;
  }

  public void setBehavior(String behavior) {
    this.behavior = behavior;
  }


  public Match from(Metadatum from) {
    this.from = from;
    return this;
  }

  /**
   * The request attribute key and value to match. &#x60;key&#x60; must always be defined while &#x60;value&#x60; can be unspecified (only if behavior is set to &#x60;exact&#x60;) to indicate that all values should be matched. If to.value is also unspecified, the matched value of the request will be used as a constraint on the destination cluster.  \\# Behavior   * &#x60;regex&#x60; if To.Value is unspecified, &#x60;value&#x60; must contain one and   only one subgroup. Otherwise, &#x60;value&#x60; must not be empty.   * &#x60;range&#x60; &#x60;value&#x60; must be specified and must be of the format   &#x60;[start_integer, end_integer)&#x60;. Start and end must be valid integer   values and &#x60;end_integer&#x60; must be greater than &#x60;start_integer&#x60;.   * &#x60;prefix&#x60;/&#x60;suffix&#x60; &#x60;value&#x60; must be specified  \\# Kind   * &#x60;cookie&#x60; does not support &#x60;range&#x60; behavior   * &#x60;query&#x60; does not support &#x60;regex&#x60; behavior 
   * @return from
   */
  @javax.annotation.Nullable
  public Metadatum getFrom() {
    return from;
  }

  public void setFrom(Metadatum from) {
    this.from = from;
  }


  public Match kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Defines the attribute by which a request should be matched on. Valid values are   * cookie   * header   * query (for query parameter) 
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Match to(Metadatum to) {
    this.to = to;
    return this;
  }

  /**
   * The constraints on a cluster that a matched request should map to. If to.key is specified and to.value is not, the matched from.value will be used as a metadata constraint on instances in the destination cluster, keyed by to.key. If using &#x60;regex&#x60; behavior with multiple subgroups in from.value, variables &#x60;$1&#x60; through &#x60;$n&#x60;, where n is the number of subgroups in the matching regex, can be used to interpolate captured matches in to.value. 
   * @return to
   */
  @javax.annotation.Nullable
  public Metadatum getTo() {
    return to;
  }

  public void setTo(Metadatum to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.behavior, match.behavior) &&
        Objects.equals(this.from, match.from) &&
        Objects.equals(this.kind, match.kind) &&
        Objects.equals(this.to, match.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(behavior, from, kind, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("behavior");
    openapiFields.add("from");
    openapiFields.add("kind");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Match
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Match.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Match is not found in the empty JSON string", Match.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Match.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Match` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("behavior") != null && !jsonObj.get("behavior").isJsonNull()) && !jsonObj.get("behavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `behavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("behavior").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        Metadatum.validateJsonElement(jsonObj.get("from"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        Metadatum.validateJsonElement(jsonObj.get("to"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Match.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Match' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Match> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Match.class));

       return (TypeAdapter<T>) new TypeAdapter<Match>() {
           @Override
           public void write(JsonWriter out, Match value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Match read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Match given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Match
   * @throws IOException if the JSON string is invalid with respect to Match
   */
  public static Match fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Match.class);
  }

  /**
   * Convert an instance of Match to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

