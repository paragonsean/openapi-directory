/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HeaderConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies how a URL within a domain should be rewritten when requested. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Redirect {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_HEADER_CONSTRAINTS = "header_constraints";
  @SerializedName(SERIALIZED_NAME_HEADER_CONSTRAINTS)
  private List<HeaderConstraint> headerConstraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * How this redirect should be presented via HTTP response code.
   */
  @JsonAdapter(RedirectTypeEnum.Adapter.class)
  public enum RedirectTypeEnum {
    PERMANENT("permanent"),
    
    TEMPORARY("temporary");

    private String value;

    RedirectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectTypeEnum fromValue(String value) {
      for (RedirectTypeEnum b : RedirectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECT_TYPE = "redirect_type";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TYPE)
  private RedirectTypeEnum redirectType;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public Redirect() {
  }

  public Redirect from(String from) {
    this.from = from;
    return this;
  }

  /**
   * A regexp that will be matched against the URL (not including the host/port). May include capture groups for reference in \&quot;to.\&quot;
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public Redirect headerConstraints(List<HeaderConstraint> headerConstraints) {
    this.headerConstraints = headerConstraints;
    return this;
  }

  public Redirect addHeaderConstraintsItem(HeaderConstraint headerConstraintsItem) {
    if (this.headerConstraints == null) {
      this.headerConstraints = new ArrayList<>();
    }
    this.headerConstraints.add(headerConstraintsItem);
    return this;
  }

  /**
   * Get headerConstraints
   * @return headerConstraints
   */
  @javax.annotation.Nullable
  public List<HeaderConstraint> getHeaderConstraints() {
    return headerConstraints;
  }

  public void setHeaderConstraints(List<HeaderConstraint> headerConstraints) {
    this.headerConstraints = headerConstraints;
  }


  public Redirect name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique (to this Domain) name for the Redirect. Must match the regexp \&quot;^[0-9a-zA-Z-]+$\&quot;
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Redirect redirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * How this redirect should be presented via HTTP response code.
   * @return redirectType
   */
  @javax.annotation.Nonnull
  public RedirectTypeEnum getRedirectType() {
    return redirectType;
  }

  public void setRedirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
  }


  public Redirect to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The new URL that will be constructed from the request. Capture groups from \&quot;from\&quot; may be referenced as \&quot;$&amp;lt;group number&amp;gt;\&quot; which begins at 1.
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Redirect redirect = (Redirect) o;
    return Objects.equals(this.from, redirect.from) &&
        Objects.equals(this.headerConstraints, redirect.headerConstraints) &&
        Objects.equals(this.name, redirect.name) &&
        Objects.equals(this.redirectType, redirect.redirectType) &&
        Objects.equals(this.to, redirect.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, headerConstraints, name, redirectType, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Redirect {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    headerConstraints: ").append(toIndentedString(headerConstraints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectType: ").append(toIndentedString(redirectType)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("header_constraints");
    openapiFields.add("name");
    openapiFields.add("redirect_type");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("redirect_type");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Redirect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Redirect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Redirect is not found in the empty JSON string", Redirect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Redirect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Redirect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Redirect.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (jsonObj.get("header_constraints") != null && !jsonObj.get("header_constraints").isJsonNull()) {
        JsonArray jsonArrayheaderConstraints = jsonObj.getAsJsonArray("header_constraints");
        if (jsonArrayheaderConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("header_constraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `header_constraints` to be an array in the JSON string but got `%s`", jsonObj.get("header_constraints").toString()));
          }

          // validate the optional field `header_constraints` (array)
          for (int i = 0; i < jsonArrayheaderConstraints.size(); i++) {
            HeaderConstraint.validateJsonElement(jsonArrayheaderConstraints.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("redirect_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_type").toString()));
      }
      // validate the required field `redirect_type`
      RedirectTypeEnum.validateJsonElement(jsonObj.get("redirect_type"));
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Redirect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Redirect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Redirect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Redirect.class));

       return (TypeAdapter<T>) new TypeAdapter<Redirect>() {
           @Override
           public void write(JsonWriter out, Redirect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Redirect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Redirect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Redirect
   * @throws IOException if the JSON string is invalid with respect to Redirect
   */
  public static Redirect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Redirect.class);
  }

  /**
   * Convert an instance of Redirect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

