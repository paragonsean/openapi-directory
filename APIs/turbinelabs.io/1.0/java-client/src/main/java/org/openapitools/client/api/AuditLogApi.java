/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedChangeDescriptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditLogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditLogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changelogAdhocGet
     * @param filter Encoded FilterSums representing the query you would like to execute. See object definition for details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes that meet the provided filter. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogAdhocGetCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/adhoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogAdhocGetValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return changelogAdhocGetCall(filter, _callback);

    }

    /**
     * Allows an arbitrary filter to be specified and applied to the org\\&#39;s change log.
     * Perform an adhoc query against the change log for your org. The filter is a JSON encoded FilterSum as defined in this file.
     * @param filter Encoded FilterSums representing the query you would like to execute. See object definition for details. (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes that meet the provided filter. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogAdhocGet(String filter) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogAdhocGetWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * Allows an arbitrary filter to be specified and applied to the org\\&#39;s change log.
     * Perform an adhoc query against the change log for your org. The filter is a JSON encoded FilterSum as defined in this file.
     * @param filter Encoded FilterSums representing the query you would like to execute. See object definition for details. (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes that meet the provided filter. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogAdhocGetWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = changelogAdhocGetValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows an arbitrary filter to be specified and applied to the org\\&#39;s change log. (asynchronously)
     * Perform an adhoc query against the change log for your org. The filter is a JSON encoded FilterSum as defined in this file.
     * @param filter Encoded FilterSums representing the query you would like to execute. See object definition for details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes that meet the provided filter. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogAdhocGetAsync(String filter, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogAdhocGetValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelogClusterGraphClusterKeyGet
     * @param clusterKey the cluster key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogClusterGraphClusterKeyGetCall(String clusterKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/cluster-graph/{clusterKey}"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogClusterGraphClusterKeyGetValidateBeforeCall(String clusterKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling changelogClusterGraphClusterKeyGet(Async)");
        }

        return changelogClusterGraphClusterKeyGetCall(clusterKey, start, end, maxResults, refId, direction, _callback);

    }

    /**
     * get changes related to the indicated cluster
     * Gets all changes to a cluster. 
     * @param clusterKey the cluster key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogClusterGraphClusterKeyGet(String clusterKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogClusterGraphClusterKeyGetWithHttpInfo(clusterKey, start, end, maxResults, refId, direction);
        return localVarResp.getData();
    }

    /**
     * get changes related to the indicated cluster
     * Gets all changes to a cluster. 
     * @param clusterKey the cluster key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogClusterGraphClusterKeyGetWithHttpInfo(String clusterKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        okhttp3.Call localVarCall = changelogClusterGraphClusterKeyGetValidateBeforeCall(clusterKey, start, end, maxResults, refId, direction, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get changes related to the indicated cluster (asynchronously)
     * Gets all changes to a cluster. 
     * @param clusterKey the cluster key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogClusterGraphClusterKeyGetAsync(String clusterKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogClusterGraphClusterKeyGetValidateBeforeCall(clusterKey, start, end, maxResults, refId, direction, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelogDomainGraphDomainKeyGet
     * @param domainKey the domain key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogDomainGraphDomainKeyGetCall(String domainKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/domain-graph/{domainKey}"
            .replace("{" + "domainKey" + "}", localVarApiClient.escapeString(domainKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogDomainGraphDomainKeyGetValidateBeforeCall(String domainKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainKey' is set
        if (domainKey == null) {
            throw new ApiException("Missing the required parameter 'domainKey' when calling changelogDomainGraphDomainKeyGet(Async)");
        }

        return changelogDomainGraphDomainKeyGetCall(domainKey, start, end, maxResults, refId, direction, _callback);

    }

    /**
     * get changes related to the indicated domain
     * Gets all changes to a domain, the proxies that front the specified domain, routes within that domain, the shared rules of each route, the clusters connected via route or shared rules. 
     * @param domainKey the domain key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogDomainGraphDomainKeyGet(String domainKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogDomainGraphDomainKeyGetWithHttpInfo(domainKey, start, end, maxResults, refId, direction);
        return localVarResp.getData();
    }

    /**
     * get changes related to the indicated domain
     * Gets all changes to a domain, the proxies that front the specified domain, routes within that domain, the shared rules of each route, the clusters connected via route or shared rules. 
     * @param domainKey the domain key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogDomainGraphDomainKeyGetWithHttpInfo(String domainKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        okhttp3.Call localVarCall = changelogDomainGraphDomainKeyGetValidateBeforeCall(domainKey, start, end, maxResults, refId, direction, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get changes related to the indicated domain (asynchronously)
     * Gets all changes to a domain, the proxies that front the specified domain, routes within that domain, the shared rules of each route, the clusters connected via route or shared rules. 
     * @param domainKey the domain key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogDomainGraphDomainKeyGetAsync(String domainKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogDomainGraphDomainKeyGetValidateBeforeCall(domainKey, start, end, maxResults, refId, direction, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelogRouteGraphRouteKeyGet
     * @param routeKey the route key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogRouteGraphRouteKeyGetCall(String routeKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/route-graph/{routeKey}"
            .replace("{" + "routeKey" + "}", localVarApiClient.escapeString(routeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogRouteGraphRouteKeyGetValidateBeforeCall(String routeKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeKey' is set
        if (routeKey == null) {
            throw new ApiException("Missing the required parameter 'routeKey' when calling changelogRouteGraphRouteKeyGet(Async)");
        }

        return changelogRouteGraphRouteKeyGetCall(routeKey, start, end, maxResults, refId, direction, _callback);

    }

    /**
     * get changes related to the indicated route
     * Gets all changes to a route, the domains associated with it, the shared rules it references, and the clusters connected to it. 
     * @param routeKey the route key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogRouteGraphRouteKeyGet(String routeKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogRouteGraphRouteKeyGetWithHttpInfo(routeKey, start, end, maxResults, refId, direction);
        return localVarResp.getData();
    }

    /**
     * get changes related to the indicated route
     * Gets all changes to a route, the domains associated with it, the shared rules it references, and the clusters connected to it. 
     * @param routeKey the route key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogRouteGraphRouteKeyGetWithHttpInfo(String routeKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        okhttp3.Call localVarCall = changelogRouteGraphRouteKeyGetValidateBeforeCall(routeKey, start, end, maxResults, refId, direction, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get changes related to the indicated route (asynchronously)
     * Gets all changes to a route, the domains associated with it, the shared rules it references, and the clusters connected to it. 
     * @param routeKey the route key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogRouteGraphRouteKeyGetAsync(String routeKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogRouteGraphRouteKeyGetValidateBeforeCall(routeKey, start, end, maxResults, refId, direction, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelogSharedRulesGraphSharedRulesKeyGet
     * @param sharedRulesKey the shared rules key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogSharedRulesGraphSharedRulesKeyGetCall(String sharedRulesKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/shared-rules-graph/{sharedRulesKey}"
            .replace("{" + "sharedRulesKey" + "}", localVarApiClient.escapeString(sharedRulesKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogSharedRulesGraphSharedRulesKeyGetValidateBeforeCall(String sharedRulesKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sharedRulesKey' is set
        if (sharedRulesKey == null) {
            throw new ApiException("Missing the required parameter 'sharedRulesKey' when calling changelogSharedRulesGraphSharedRulesKeyGet(Async)");
        }

        return changelogSharedRulesGraphSharedRulesKeyGetCall(sharedRulesKey, start, end, maxResults, refId, direction, _callback);

    }

    /**
     * get changes related to the indicated SharedRules
     * Gets all changes associated with set of Shared Rules; the domains using it and the clusters referenced by it. 
     * @param sharedRulesKey the shared rules key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogSharedRulesGraphSharedRulesKeyGet(String sharedRulesKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogSharedRulesGraphSharedRulesKeyGetWithHttpInfo(sharedRulesKey, start, end, maxResults, refId, direction);
        return localVarResp.getData();
    }

    /**
     * get changes related to the indicated SharedRules
     * Gets all changes associated with set of Shared Rules; the domains using it and the clusters referenced by it. 
     * @param sharedRulesKey the shared rules key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogSharedRulesGraphSharedRulesKeyGetWithHttpInfo(String sharedRulesKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        okhttp3.Call localVarCall = changelogSharedRulesGraphSharedRulesKeyGetValidateBeforeCall(sharedRulesKey, start, end, maxResults, refId, direction, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get changes related to the indicated SharedRules (asynchronously)
     * Gets all changes associated with set of Shared Rules; the domains using it and the clusters referenced by it. 
     * @param sharedRulesKey the shared rules key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogSharedRulesGraphSharedRulesKeyGetAsync(String sharedRulesKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogSharedRulesGraphSharedRulesKeyGetValidateBeforeCall(sharedRulesKey, start, end, maxResults, refId, direction, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changelogZoneZoneKeyGet
     * @param zoneKey the zone key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogZoneZoneKeyGetCall(String zoneKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/changelog/zone/{zoneKey}"
            .replace("{" + "zoneKey" + "}", localVarApiClient.escapeString(zoneKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (refId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_id", refId));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changelogZoneZoneKeyGetValidateBeforeCall(String zoneKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneKey' is set
        if (zoneKey == null) {
            throw new ApiException("Missing the required parameter 'zoneKey' when calling changelogZoneZoneKeyGet(Async)");
        }

        return changelogZoneZoneKeyGetCall(zoneKey, start, end, maxResults, refId, direction, _callback);

    }

    /**
     * get changes in a specified zone
     * Retrieve all changes in the specified zone.
     * @param zoneKey the zone key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return PaginatedChangeDescriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedChangeDescriptions changelogZoneZoneKeyGet(String zoneKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        ApiResponse<PaginatedChangeDescriptions> localVarResp = changelogZoneZoneKeyGetWithHttpInfo(zoneKey, start, end, maxResults, refId, direction);
        return localVarResp.getData();
    }

    /**
     * get changes in a specified zone
     * Retrieve all changes in the specified zone.
     * @param zoneKey the zone key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @return ApiResponse&lt;PaginatedChangeDescriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedChangeDescriptions> changelogZoneZoneKeyGetWithHttpInfo(String zoneKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction) throws ApiException {
        okhttp3.Call localVarCall = changelogZoneZoneKeyGetValidateBeforeCall(zoneKey, start, end, maxResults, refId, direction, null);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get changes in a specified zone (asynchronously)
     * Retrieve all changes in the specified zone.
     * @param zoneKey the zone key to see an audit log for (required)
     * @param start The beginning of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param end The end of the window we want to see changes for; measured in microseconds since Unix Epoch.  (optional)
     * @param maxResults Determines how many ChangeDescription object should be returned to the calling code.  (optional)
     * @param refId When paginating a Changelog request start on the entry that comes immediately before or after this ID (as determined by the direction argument).  (optional)
     * @param direction If set to \&quot;before\&quot; then changes will be returned that occurred before reference ID. If \&quot;after\&quot; then changes will be returned that have occurred since the reference ID.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of changes occurring during the requested window. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changelogZoneZoneKeyGetAsync(String zoneKey, BigDecimal start, BigDecimal end, BigDecimal maxResults, String refId, String direction, final ApiCallback<PaginatedChangeDescriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = changelogZoneZoneKeyGetValidateBeforeCall(zoneKey, start, end, maxResults, refId, direction, _callback);
        Type localVarReturnType = new TypeToken<PaginatedChangeDescriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
