/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProxyCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProxyCreate {
  public static final String SERIALIZED_NAME_DOMAIN_KEYS = "domain_keys";
  @SerializedName(SERIALIZED_NAME_DOMAIN_KEYS)
  private List<String> domainKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTENER_KEYS = "listener_keys";
  @SerializedName(SERIALIZED_NAME_LISTENER_KEYS)
  private List<String> listenerKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public ProxyCreate() {
  }

  public ProxyCreate domainKeys(List<String> domainKeys) {
    this.domainKeys = domainKeys;
    return this;
  }

  public ProxyCreate addDomainKeysItem(String domainKeysItem) {
    if (this.domainKeys == null) {
      this.domainKeys = new ArrayList<>();
    }
    this.domainKeys.add(domainKeysItem);
    return this;
  }

  /**
   * Get domainKeys
   * @return domainKeys
   */
  @javax.annotation.Nullable
  public List<String> getDomainKeys() {
    return domainKeys;
  }

  public void setDomainKeys(List<String> domainKeys) {
    this.domainKeys = domainKeys;
  }


  public ProxyCreate listenerKeys(List<String> listenerKeys) {
    this.listenerKeys = listenerKeys;
    return this;
  }

  public ProxyCreate addListenerKeysItem(String listenerKeysItem) {
    if (this.listenerKeys == null) {
      this.listenerKeys = new ArrayList<>();
    }
    this.listenerKeys.add(listenerKeysItem);
    return this;
  }

  /**
   * Get listenerKeys
   * @return listenerKeys
   */
  @javax.annotation.Nullable
  public List<String> getListenerKeys() {
    return listenerKeys;
  }

  public void setListenerKeys(List<String> listenerKeys) {
    this.listenerKeys = listenerKeys;
  }


  public ProxyCreate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProxyCreate zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * Get zoneKey
   * @return zoneKey
   */
  @javax.annotation.Nonnull
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyCreate proxyCreate = (ProxyCreate) o;
    return Objects.equals(this.domainKeys, proxyCreate.domainKeys) &&
        Objects.equals(this.listenerKeys, proxyCreate.listenerKeys) &&
        Objects.equals(this.name, proxyCreate.name) &&
        Objects.equals(this.zoneKey, proxyCreate.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainKeys, listenerKeys, name, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyCreate {\n");
    sb.append("    domainKeys: ").append(toIndentedString(domainKeys)).append("\n");
    sb.append("    listenerKeys: ").append(toIndentedString(listenerKeys)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain_keys");
    openapiFields.add("listener_keys");
    openapiFields.add("name");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("zone_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProxyCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProxyCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProxyCreate is not found in the empty JSON string", ProxyCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProxyCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProxyCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProxyCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("domain_keys") != null && !jsonObj.get("domain_keys").isJsonNull() && !jsonObj.get("domain_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_keys` to be an array in the JSON string but got `%s`", jsonObj.get("domain_keys").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listener_keys") != null && !jsonObj.get("listener_keys").isJsonNull() && !jsonObj.get("listener_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listener_keys` to be an array in the JSON string but got `%s`", jsonObj.get("listener_keys").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProxyCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProxyCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProxyCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProxyCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<ProxyCreate>() {
           @Override
           public void write(JsonWriter out, ProxyCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProxyCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProxyCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProxyCreate
   * @throws IOException if the JSON string is invalid with respect to ProxyCreate
   */
  public static ProxyCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProxyCreate.class);
  }

  /**
   * Convert an instance of ProxyCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

