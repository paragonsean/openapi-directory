/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProxyFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProxyFilter {
  public static final String SERIALIZED_NAME_DOMAIN_KEYS = "domain_keys";
  @SerializedName(SERIALIZED_NAME_DOMAIN_KEYS)
  private List<String> domainKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROXY_KEY = "proxy_key";
  @SerializedName(SERIALIZED_NAME_PROXY_KEY)
  private String proxyKey;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public ProxyFilter() {
  }

  public ProxyFilter domainKeys(List<String> domainKeys) {
    this.domainKeys = domainKeys;
    return this;
  }

  public ProxyFilter addDomainKeysItem(String domainKeysItem) {
    if (this.domainKeys == null) {
      this.domainKeys = new ArrayList<>();
    }
    this.domainKeys.add(domainKeysItem);
    return this;
  }

  /**
   * matches Proxies with a superset of the specified domain_keys. A slice with a single value of \&quot;-\&quot; will produce Proxies with no linked Domains. 
   * @return domainKeys
   */
  @javax.annotation.Nullable
  public List<String> getDomainKeys() {
    return domainKeys;
  }

  public void setDomainKeys(List<String> domainKeys) {
    this.domainKeys = domainKeys;
  }


  public ProxyFilter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProxyFilter proxyKey(String proxyKey) {
    this.proxyKey = proxyKey;
    return this;
  }

  /**
   * Get proxyKey
   * @return proxyKey
   */
  @javax.annotation.Nullable
  public String getProxyKey() {
    return proxyKey;
  }

  public void setProxyKey(String proxyKey) {
    this.proxyKey = proxyKey;
  }


  public ProxyFilter zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * Get zoneKey
   * @return zoneKey
   */
  @javax.annotation.Nullable
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyFilter proxyFilter = (ProxyFilter) o;
    return Objects.equals(this.domainKeys, proxyFilter.domainKeys) &&
        Objects.equals(this.name, proxyFilter.name) &&
        Objects.equals(this.proxyKey, proxyFilter.proxyKey) &&
        Objects.equals(this.zoneKey, proxyFilter.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainKeys, name, proxyKey, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyFilter {\n");
    sb.append("    domainKeys: ").append(toIndentedString(domainKeys)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    proxyKey: ").append(toIndentedString(proxyKey)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain_keys");
    openapiFields.add("name");
    openapiFields.add("proxy_key");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProxyFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProxyFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProxyFilter is not found in the empty JSON string", ProxyFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProxyFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProxyFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("domain_keys") != null && !jsonObj.get("domain_keys").isJsonNull() && !jsonObj.get("domain_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_keys` to be an array in the JSON string but got `%s`", jsonObj.get("domain_keys").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("proxy_key") != null && !jsonObj.get("proxy_key").isJsonNull()) && !jsonObj.get("proxy_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_key").toString()));
      }
      if ((jsonObj.get("zone_key") != null && !jsonObj.get("zone_key").isJsonNull()) && !jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProxyFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProxyFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProxyFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProxyFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ProxyFilter>() {
           @Override
           public void write(JsonWriter out, ProxyFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProxyFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProxyFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProxyFilter
   * @throws IOException if the JSON string is invalid with respect to ProxyFilter
   */
  public static ProxyFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProxyFilter.class);
  }

  /**
   * Convert an instance of ProxyFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

