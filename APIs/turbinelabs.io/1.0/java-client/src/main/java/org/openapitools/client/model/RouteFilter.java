/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RouteFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteFilter {
  public static final String SERIALIZED_NAME_DOMAIN_KEY = "domain_key";
  @SerializedName(SERIALIZED_NAME_DOMAIN_KEY)
  private String domainKey;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PATH_PREFIX = "path_prefix";
  @SerializedName(SERIALIZED_NAME_PATH_PREFIX)
  private String pathPrefix;

  public static final String SERIALIZED_NAME_ROUTE_KEY = "route_key";
  @SerializedName(SERIALIZED_NAME_ROUTE_KEY)
  private String routeKey;

  public static final String SERIALIZED_NAME_SHARED_RULES_KEY = "shared_rules_key";
  @SerializedName(SERIALIZED_NAME_SHARED_RULES_KEY)
  private String sharedRulesKey;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public RouteFilter() {
  }

  public RouteFilter domainKey(String domainKey) {
    this.domainKey = domainKey;
    return this;
  }

  /**
   * Get domainKey
   * @return domainKey
   */
  @javax.annotation.Nullable
  public String getDomainKey() {
    return domainKey;
  }

  public void setDomainKey(String domainKey) {
    this.domainKey = domainKey;
  }


  public RouteFilter path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public RouteFilter pathPrefix(String pathPrefix) {
    this.pathPrefix = pathPrefix;
    return this;
  }

  /**
   * Get pathPrefix
   * @return pathPrefix
   */
  @javax.annotation.Nullable
  public String getPathPrefix() {
    return pathPrefix;
  }

  public void setPathPrefix(String pathPrefix) {
    this.pathPrefix = pathPrefix;
  }


  public RouteFilter routeKey(String routeKey) {
    this.routeKey = routeKey;
    return this;
  }

  /**
   * Get routeKey
   * @return routeKey
   */
  @javax.annotation.Nullable
  public String getRouteKey() {
    return routeKey;
  }

  public void setRouteKey(String routeKey) {
    this.routeKey = routeKey;
  }


  public RouteFilter sharedRulesKey(String sharedRulesKey) {
    this.sharedRulesKey = sharedRulesKey;
    return this;
  }

  /**
   * Get sharedRulesKey
   * @return sharedRulesKey
   */
  @javax.annotation.Nullable
  public String getSharedRulesKey() {
    return sharedRulesKey;
  }

  public void setSharedRulesKey(String sharedRulesKey) {
    this.sharedRulesKey = sharedRulesKey;
  }


  public RouteFilter zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * Get zoneKey
   * @return zoneKey
   */
  @javax.annotation.Nullable
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteFilter routeFilter = (RouteFilter) o;
    return Objects.equals(this.domainKey, routeFilter.domainKey) &&
        Objects.equals(this.path, routeFilter.path) &&
        Objects.equals(this.pathPrefix, routeFilter.pathPrefix) &&
        Objects.equals(this.routeKey, routeFilter.routeKey) &&
        Objects.equals(this.sharedRulesKey, routeFilter.sharedRulesKey) &&
        Objects.equals(this.zoneKey, routeFilter.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainKey, path, pathPrefix, routeKey, sharedRulesKey, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteFilter {\n");
    sb.append("    domainKey: ").append(toIndentedString(domainKey)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathPrefix: ").append(toIndentedString(pathPrefix)).append("\n");
    sb.append("    routeKey: ").append(toIndentedString(routeKey)).append("\n");
    sb.append("    sharedRulesKey: ").append(toIndentedString(sharedRulesKey)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain_key");
    openapiFields.add("path");
    openapiFields.add("path_prefix");
    openapiFields.add("route_key");
    openapiFields.add("shared_rules_key");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteFilter is not found in the empty JSON string", RouteFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain_key") != null && !jsonObj.get("domain_key").isJsonNull()) && !jsonObj.get("domain_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_key").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("path_prefix") != null && !jsonObj.get("path_prefix").isJsonNull()) && !jsonObj.get("path_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_prefix").toString()));
      }
      if ((jsonObj.get("route_key") != null && !jsonObj.get("route_key").isJsonNull()) && !jsonObj.get("route_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_key").toString()));
      }
      if ((jsonObj.get("shared_rules_key") != null && !jsonObj.get("shared_rules_key").isJsonNull()) && !jsonObj.get("shared_rules_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_rules_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_rules_key").toString()));
      }
      if ((jsonObj.get("zone_key") != null && !jsonObj.get("zone_key").isJsonNull()) && !jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteFilter>() {
           @Override
           public void write(JsonWriter out, RouteFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteFilter
   * @throws IOException if the JSON string is invalid with respect to RouteFilter
   */
  public static RouteFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteFilter.class);
  }

  /**
   * Convert an instance of RouteFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

