/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Metadatum;
import org.openapitools.client.model.ResponseData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClusterConstraint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterConstraint {
  public static final String SERIALIZED_NAME_CLUSTER_KEY = "cluster_key";
  @SerializedName(SERIALIZED_NAME_CLUSTER_KEY)
  private String clusterKey;

  public static final String SERIALIZED_NAME_CONSTRAINT_KEY = "constraint_key";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_KEY)
  private String constraintKey;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Metadatum> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Metadatum> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_DATA = "response_data";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DATA)
  private ResponseData responseData;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public ClusterConstraint() {
  }

  public ClusterConstraint clusterKey(String clusterKey) {
    this.clusterKey = clusterKey;
    return this;
  }

  /**
   * Get clusterKey
   * @return clusterKey
   */
  @javax.annotation.Nullable
  public String getClusterKey() {
    return clusterKey;
  }

  public void setClusterKey(String clusterKey) {
    this.clusterKey = clusterKey;
  }


  public ClusterConstraint constraintKey(String constraintKey) {
    this.constraintKey = constraintKey;
    return this;
  }

  /**
   * Get constraintKey
   * @return constraintKey
   */
  @javax.annotation.Nullable
  public String getConstraintKey() {
    return constraintKey;
  }

  public void setConstraintKey(String constraintKey) {
    this.constraintKey = constraintKey;
  }


  public ClusterConstraint metadata(List<Metadatum> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ClusterConstraint addMetadataItem(Metadatum metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<Metadatum> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadatum> metadata) {
    this.metadata = metadata;
  }


  public ClusterConstraint properties(List<Metadatum> properties) {
    this.properties = properties;
    return this;
  }

  public ClusterConstraint addPropertiesItem(Metadatum propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public List<Metadatum> getProperties() {
    return properties;
  }

  public void setProperties(List<Metadatum> properties) {
    this.properties = properties;
  }


  public ClusterConstraint responseData(ResponseData responseData) {
    this.responseData = responseData;
    return this;
  }

  /**
   * When a request is served by a cluster selected by this constraint annotate the response with the information specified within this ResponseData object. It&#39;s possible that multiple response data configurations will apply; if that&#39;s the case then the values from ClusterConstarint takes precedence over those from a Route or SharedRules object. 
   * @return responseData
   */
  @javax.annotation.Nullable
  public ResponseData getResponseData() {
    return responseData;
  }

  public void setResponseData(ResponseData responseData) {
    this.responseData = responseData;
  }


  public ClusterConstraint weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterConstraint clusterConstraint = (ClusterConstraint) o;
    return Objects.equals(this.clusterKey, clusterConstraint.clusterKey) &&
        Objects.equals(this.constraintKey, clusterConstraint.constraintKey) &&
        Objects.equals(this.metadata, clusterConstraint.metadata) &&
        Objects.equals(this.properties, clusterConstraint.properties) &&
        Objects.equals(this.responseData, clusterConstraint.responseData) &&
        Objects.equals(this.weight, clusterConstraint.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterKey, constraintKey, metadata, properties, responseData, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterConstraint {\n");
    sb.append("    clusterKey: ").append(toIndentedString(clusterKey)).append("\n");
    sb.append("    constraintKey: ").append(toIndentedString(constraintKey)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    responseData: ").append(toIndentedString(responseData)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster_key");
    openapiFields.add("constraint_key");
    openapiFields.add("metadata");
    openapiFields.add("properties");
    openapiFields.add("response_data");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterConstraint is not found in the empty JSON string", ClusterConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cluster_key") != null && !jsonObj.get("cluster_key").isJsonNull()) && !jsonObj.get("cluster_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_key").toString()));
      }
      if ((jsonObj.get("constraint_key") != null && !jsonObj.get("constraint_key").isJsonNull()) && !jsonObj.get("constraint_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraint_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraint_key").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            Metadatum.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Metadatum.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      // validate the optional field `response_data`
      if (jsonObj.get("response_data") != null && !jsonObj.get("response_data").isJsonNull()) {
        ResponseData.validateJsonElement(jsonObj.get("response_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterConstraint>() {
           @Override
           public void write(JsonWriter out, ClusterConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterConstraint
   * @throws IOException if the JSON string is invalid with respect to ClusterConstraint
   */
  public static ClusterConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterConstraint.class);
  }

  /**
   * Convert an instance of ClusterConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

