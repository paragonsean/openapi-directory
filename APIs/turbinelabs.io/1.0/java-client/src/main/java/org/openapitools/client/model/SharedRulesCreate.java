/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllConstraints;
import org.openapitools.client.model.CohortSeed;
import org.openapitools.client.model.Metadatum;
import org.openapitools.client.model.ResponseData;
import org.openapitools.client.model.RetryPolicy;
import org.openapitools.client.model.Rule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SharedRulesCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedRulesCreate {
  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  public static final String SERIALIZED_NAME_COHORT_SEED = "cohort_seed";
  @SerializedName(SERIALIZED_NAME_COHORT_SEED)
  private CohortSeed cohortSeed;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private AllConstraints _default;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Metadatum> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_DATA = "response_data";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DATA)
  private ResponseData responseData;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retry_policy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private RetryPolicy retryPolicy;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<Rule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED_RULES_KEY = "shared_rules_key";
  @SerializedName(SERIALIZED_NAME_SHARED_RULES_KEY)
  private String sharedRulesKey;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public SharedRulesCreate() {
  }

  public SharedRulesCreate checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nullable
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public SharedRulesCreate cohortSeed(CohortSeed cohortSeed) {
    this.cohortSeed = cohortSeed;
    return this;
  }

  /**
   * Get cohortSeed
   * @return cohortSeed
   */
  @javax.annotation.Nullable
  public CohortSeed getCohortSeed() {
    return cohortSeed;
  }

  public void setCohortSeed(CohortSeed cohortSeed) {
    this.cohortSeed = cohortSeed;
  }


  public SharedRulesCreate _default(AllConstraints _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nonnull
  public AllConstraints getDefault() {
    return _default;
  }

  public void setDefault(AllConstraints _default) {
    this._default = _default;
  }


  public SharedRulesCreate properties(List<Metadatum> properties) {
    this.properties = properties;
    return this;
  }

  public SharedRulesCreate addPropertiesItem(Metadatum propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public List<Metadatum> getProperties() {
    return properties;
  }

  public void setProperties(List<Metadatum> properties) {
    this.properties = properties;
  }


  public SharedRulesCreate responseData(ResponseData responseData) {
    this.responseData = responseData;
    return this;
  }

  /**
   * When a request is served by a Route that is part of this SharedRules group the response is annotated with the information specified within this ResponseData object. It&#39;s possible that multiple response data configurations will apply; if that&#39;s the case then the values from the applicable Route and ClusterConstarint takes precedence over those specified here. 
   * @return responseData
   */
  @javax.annotation.Nullable
  public ResponseData getResponseData() {
    return responseData;
  }

  public void setResponseData(ResponseData responseData) {
    this.responseData = responseData;
  }


  public SharedRulesCreate retryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public RetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public SharedRulesCreate rules(List<Rule> rules) {
    this.rules = rules;
    return this;
  }

  public SharedRulesCreate addRulesItem(Rule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nullable
  public List<Rule> getRules() {
    return rules;
  }

  public void setRules(List<Rule> rules) {
    this.rules = rules;
  }


  public SharedRulesCreate sharedRulesKey(String sharedRulesKey) {
    this.sharedRulesKey = sharedRulesKey;
    return this;
  }

  /**
   * Get sharedRulesKey
   * @return sharedRulesKey
   */
  @javax.annotation.Nullable
  public String getSharedRulesKey() {
    return sharedRulesKey;
  }

  public void setSharedRulesKey(String sharedRulesKey) {
    this.sharedRulesKey = sharedRulesKey;
  }


  public SharedRulesCreate zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * Get zoneKey
   * @return zoneKey
   */
  @javax.annotation.Nonnull
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedRulesCreate sharedRulesCreate = (SharedRulesCreate) o;
    return Objects.equals(this.checksum, sharedRulesCreate.checksum) &&
        Objects.equals(this.cohortSeed, sharedRulesCreate.cohortSeed) &&
        Objects.equals(this._default, sharedRulesCreate._default) &&
        Objects.equals(this.properties, sharedRulesCreate.properties) &&
        Objects.equals(this.responseData, sharedRulesCreate.responseData) &&
        Objects.equals(this.retryPolicy, sharedRulesCreate.retryPolicy) &&
        Objects.equals(this.rules, sharedRulesCreate.rules) &&
        Objects.equals(this.sharedRulesKey, sharedRulesCreate.sharedRulesKey) &&
        Objects.equals(this.zoneKey, sharedRulesCreate.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checksum, cohortSeed, _default, properties, responseData, retryPolicy, rules, sharedRulesKey, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedRulesCreate {\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    cohortSeed: ").append(toIndentedString(cohortSeed)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    responseData: ").append(toIndentedString(responseData)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    sharedRulesKey: ").append(toIndentedString(sharedRulesKey)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checksum");
    openapiFields.add("cohort_seed");
    openapiFields.add("default");
    openapiFields.add("properties");
    openapiFields.add("response_data");
    openapiFields.add("retry_policy");
    openapiFields.add("rules");
    openapiFields.add("shared_rules_key");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("default");
    openapiRequiredFields.add("zone_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedRulesCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedRulesCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedRulesCreate is not found in the empty JSON string", SharedRulesCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedRulesCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedRulesCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SharedRulesCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checksum") != null && !jsonObj.get("checksum").isJsonNull()) && !jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      // validate the optional field `cohort_seed`
      if (jsonObj.get("cohort_seed") != null && !jsonObj.get("cohort_seed").isJsonNull()) {
        CohortSeed.validateJsonElement(jsonObj.get("cohort_seed"));
      }
      // validate the required field `default`
      AllConstraints.validateJsonElement(jsonObj.get("default"));
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Metadatum.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      // validate the optional field `response_data`
      if (jsonObj.get("response_data") != null && !jsonObj.get("response_data").isJsonNull()) {
        ResponseData.validateJsonElement(jsonObj.get("response_data"));
      }
      // validate the optional field `retry_policy`
      if (jsonObj.get("retry_policy") != null && !jsonObj.get("retry_policy").isJsonNull()) {
        RetryPolicy.validateJsonElement(jsonObj.get("retry_policy"));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            Rule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      if ((jsonObj.get("shared_rules_key") != null && !jsonObj.get("shared_rules_key").isJsonNull()) && !jsonObj.get("shared_rules_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_rules_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_rules_key").toString()));
      }
      if (!jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedRulesCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedRulesCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedRulesCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedRulesCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedRulesCreate>() {
           @Override
           public void write(JsonWriter out, SharedRulesCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedRulesCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedRulesCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedRulesCreate
   * @throws IOException if the JSON string is invalid with respect to SharedRulesCreate
   */
  public static SharedRulesCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedRulesCreate.class);
  }

  /**
   * Convert an instance of SharedRulesCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

