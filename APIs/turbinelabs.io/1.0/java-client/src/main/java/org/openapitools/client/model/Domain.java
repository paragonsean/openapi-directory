/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CORSConfig;
import org.openapitools.client.model.Redirect;
import org.openapitools.client.model.SSLConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Domain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Domain {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<String> aliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  public static final String SERIALIZED_NAME_CORS_CONFIG = "cors_config";
  @SerializedName(SERIALIZED_NAME_CORS_CONFIG)
  private CORSConfig corsConfig;

  public static final String SERIALIZED_NAME_DOMAIN_KEY = "domain_key";
  @SerializedName(SERIALIZED_NAME_DOMAIN_KEY)
  private String domainKey;

  public static final String SERIALIZED_NAME_FORCE_HTTPS = "force_https";
  @SerializedName(SERIALIZED_NAME_FORCE_HTTPS)
  private Boolean forceHttps;

  public static final String SERIALIZED_NAME_GZIP_ENABLED = "gzip_enabled";
  @SerializedName(SERIALIZED_NAME_GZIP_ENABLED)
  private Boolean gzipEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_REDIRECTS = "redirects";
  @SerializedName(SERIALIZED_NAME_REDIRECTS)
  private List<Redirect> redirects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSL_CONFIG = "ssl_config";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIG)
  private SSLConfig sslConfig;

  public static final String SERIALIZED_NAME_ZONE_KEY = "zone_key";
  @SerializedName(SERIALIZED_NAME_ZONE_KEY)
  private String zoneKey;

  public Domain() {
  }

  public Domain aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public Domain addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * A set of alternate names that this Domain may be referenced by. May start (&#39;*.&#39;) or end (&#39;.*&#39;) with a wildcard. 
   * @return aliases
   */
  @javax.annotation.Nullable
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }


  public Domain checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nonnull
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public Domain corsConfig(CORSConfig corsConfig) {
    this.corsConfig = corsConfig;
    return this;
  }

  /**
   * Get corsConfig
   * @return corsConfig
   */
  @javax.annotation.Nullable
  public CORSConfig getCorsConfig() {
    return corsConfig;
  }

  public void setCorsConfig(CORSConfig corsConfig) {
    this.corsConfig = corsConfig;
  }


  public Domain domainKey(String domainKey) {
    this.domainKey = domainKey;
    return this;
  }

  /**
   * Get domainKey
   * @return domainKey
   */
  @javax.annotation.Nonnull
  public String getDomainKey() {
    return domainKey;
  }

  public void setDomainKey(String domainKey) {
    this.domainKey = domainKey;
  }


  public Domain forceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
    return this;
  }

  /**
   * If set to true, requests must use TLS. If a request is not using TLS, (as determined by the scheme or the presence of X-Forwarded-Proto header), a 301 redirect will be sent telling the client to use HTTPS. 
   * @return forceHttps
   */
  @javax.annotation.Nullable
  public Boolean getForceHttps() {
    return forceHttps;
  }

  public void setForceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
  }


  public Domain gzipEnabled(Boolean gzipEnabled) {
    this.gzipEnabled = gzipEnabled;
    return this;
  }

  /**
   * Experimental: if set to true will enable gzip compression on data that passes trough this domain
   * @return gzipEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGzipEnabled() {
    return gzipEnabled;
  }

  public void setGzipEnabled(Boolean gzipEnabled) {
    this.gzipEnabled = gzipEnabled;
  }


  public Domain name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Domain port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public Domain redirects(List<Redirect> redirects) {
    this.redirects = redirects;
    return this;
  }

  public Domain addRedirectsItem(Redirect redirectsItem) {
    if (this.redirects == null) {
      this.redirects = new ArrayList<>();
    }
    this.redirects.add(redirectsItem);
    return this;
  }

  /**
   * Get redirects
   * @return redirects
   */
  @javax.annotation.Nullable
  public List<Redirect> getRedirects() {
    return redirects;
  }

  public void setRedirects(List<Redirect> redirects) {
    this.redirects = redirects;
  }


  public Domain sslConfig(SSLConfig sslConfig) {
    this.sslConfig = sslConfig;
    return this;
  }

  /**
   * Get sslConfig
   * @return sslConfig
   */
  @javax.annotation.Nullable
  public SSLConfig getSslConfig() {
    return sslConfig;
  }

  public void setSslConfig(SSLConfig sslConfig) {
    this.sslConfig = sslConfig;
  }


  public Domain zoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
    return this;
  }

  /**
   * Get zoneKey
   * @return zoneKey
   */
  @javax.annotation.Nonnull
  public String getZoneKey() {
    return zoneKey;
  }

  public void setZoneKey(String zoneKey) {
    this.zoneKey = zoneKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.aliases, domain.aliases) &&
        Objects.equals(this.checksum, domain.checksum) &&
        Objects.equals(this.corsConfig, domain.corsConfig) &&
        Objects.equals(this.domainKey, domain.domainKey) &&
        Objects.equals(this.forceHttps, domain.forceHttps) &&
        Objects.equals(this.gzipEnabled, domain.gzipEnabled) &&
        Objects.equals(this.name, domain.name) &&
        Objects.equals(this.port, domain.port) &&
        Objects.equals(this.redirects, domain.redirects) &&
        Objects.equals(this.sslConfig, domain.sslConfig) &&
        Objects.equals(this.zoneKey, domain.zoneKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, checksum, corsConfig, domainKey, forceHttps, gzipEnabled, name, port, redirects, sslConfig, zoneKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    corsConfig: ").append(toIndentedString(corsConfig)).append("\n");
    sb.append("    domainKey: ").append(toIndentedString(domainKey)).append("\n");
    sb.append("    forceHttps: ").append(toIndentedString(forceHttps)).append("\n");
    sb.append("    gzipEnabled: ").append(toIndentedString(gzipEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    redirects: ").append(toIndentedString(redirects)).append("\n");
    sb.append("    sslConfig: ").append(toIndentedString(sslConfig)).append("\n");
    sb.append("    zoneKey: ").append(toIndentedString(zoneKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("checksum");
    openapiFields.add("cors_config");
    openapiFields.add("domain_key");
    openapiFields.add("force_https");
    openapiFields.add("gzip_enabled");
    openapiFields.add("name");
    openapiFields.add("port");
    openapiFields.add("redirects");
    openapiFields.add("ssl_config");
    openapiFields.add("zone_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("checksum");
    openapiRequiredFields.add("domain_key");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("zone_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Domain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domain is not found in the empty JSON string", Domain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Domain.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull() && !jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }
      if (!jsonObj.get("checksum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checksum").toString()));
      }
      // validate the optional field `cors_config`
      if (jsonObj.get("cors_config") != null && !jsonObj.get("cors_config").isJsonNull()) {
        CORSConfig.validateJsonElement(jsonObj.get("cors_config"));
      }
      if (!jsonObj.get("domain_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("redirects") != null && !jsonObj.get("redirects").isJsonNull()) {
        JsonArray jsonArrayredirects = jsonObj.getAsJsonArray("redirects");
        if (jsonArrayredirects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("redirects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `redirects` to be an array in the JSON string but got `%s`", jsonObj.get("redirects").toString()));
          }

          // validate the optional field `redirects` (array)
          for (int i = 0; i < jsonArrayredirects.size(); i++) {
            Redirect.validateJsonElement(jsonArrayredirects.get(i));
          };
        }
      }
      // validate the optional field `ssl_config`
      if (jsonObj.get("ssl_config") != null && !jsonObj.get("ssl_config").isJsonNull()) {
        SSLConfig.validateJsonElement(jsonObj.get("ssl_config"));
      }
      if (!jsonObj.get("zone_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domain.class));

       return (TypeAdapter<T>) new TypeAdapter<Domain>() {
           @Override
           public void write(JsonWriter out, Domain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Domain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Domain
   * @throws IOException if the JSON string is invalid with respect to Domain
   */
  public static Domain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domain.class);
  }

  /**
   * Convert an instance of Domain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

