/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.ClusterCreate;
import org.openapitools.client.model.ClusterResult;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.InstanceResult;
import org.openapitools.client.model.MultiClusterResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClusterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClusterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clusterClusterKeyDelete
     * @param clusterKey the cluster key (required)
     * @param checksum the current checksum of the cluster to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyDeleteCall(String clusterKey, String checksum, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cluster/{clusterKey}"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum", checksum));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterClusterKeyDeleteValidateBeforeCall(String clusterKey, String checksum, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling clusterClusterKeyDelete(Async)");
        }

        // verify the required parameter 'checksum' is set
        if (checksum == null) {
            throw new ApiException("Missing the required parameter 'checksum' when calling clusterClusterKeyDelete(Async)");
        }

        return clusterClusterKeyDeleteCall(clusterKey, checksum, _callback);

    }

    /**
     * delete cluster
     * Delete an existing cluster
     * @param clusterKey the cluster key (required)
     * @param checksum the current checksum of the cluster to be deleted (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Object clusterClusterKeyDelete(String clusterKey, String checksum) throws ApiException {
        ApiResponse<Object> localVarResp = clusterClusterKeyDeleteWithHttpInfo(clusterKey, checksum);
        return localVarResp.getData();
    }

    /**
     * delete cluster
     * Delete an existing cluster
     * @param clusterKey the cluster key (required)
     * @param checksum the current checksum of the cluster to be deleted (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> clusterClusterKeyDeleteWithHttpInfo(String clusterKey, String checksum) throws ApiException {
        okhttp3.Call localVarCall = clusterClusterKeyDeleteValidateBeforeCall(clusterKey, checksum, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete cluster (asynchronously)
     * Delete an existing cluster
     * @param clusterKey the cluster key (required)
     * @param checksum the current checksum of the cluster to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyDeleteAsync(String clusterKey, String checksum, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterClusterKeyDeleteValidateBeforeCall(clusterKey, checksum, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterClusterKeyGet
     * @param clusterKey the cluster key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyGetCall(String clusterKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cluster/{clusterKey}"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterClusterKeyGetValidateBeforeCall(String clusterKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling clusterClusterKeyGet(Async)");
        }

        return clusterClusterKeyGetCall(clusterKey, _callback);

    }

    /**
     * get cluster
     * Get details for an existing cluster
     * @param clusterKey the cluster key (required)
     * @return ClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResult clusterClusterKeyGet(String clusterKey) throws ApiException {
        ApiResponse<ClusterResult> localVarResp = clusterClusterKeyGetWithHttpInfo(clusterKey);
        return localVarResp.getData();
    }

    /**
     * get cluster
     * Get details for an existing cluster
     * @param clusterKey the cluster key (required)
     * @return ApiResponse&lt;ClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResult> clusterClusterKeyGetWithHttpInfo(String clusterKey) throws ApiException {
        okhttp3.Call localVarCall = clusterClusterKeyGetValidateBeforeCall(clusterKey, null);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get cluster (asynchronously)
     * Get details for an existing cluster
     * @param clusterKey the cluster key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyGetAsync(String clusterKey, final ApiCallback<ClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterClusterKeyGetValidateBeforeCall(clusterKey, _callback);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterClusterKeyInstancesInstanceIdentifierDelete
     * @param checksum the current checksum of the instance to be deleted (required)
     * @param clusterKey the cluster to remove an instance from (required)
     * @param instanceIdentifier the instance to remove, identified as &lt;host&gt;:&lt;port&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyInstancesInstanceIdentifierDeleteCall(String checksum, String clusterKey, String instanceIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cluster/{clusterKey}/instances/{instanceIdentifier}"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()))
            .replace("{" + "instanceIdentifier" + "}", localVarApiClient.escapeString(instanceIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum", checksum));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterClusterKeyInstancesInstanceIdentifierDeleteValidateBeforeCall(String checksum, String clusterKey, String instanceIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checksum' is set
        if (checksum == null) {
            throw new ApiException("Missing the required parameter 'checksum' when calling clusterClusterKeyInstancesInstanceIdentifierDelete(Async)");
        }

        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling clusterClusterKeyInstancesInstanceIdentifierDelete(Async)");
        }

        // verify the required parameter 'instanceIdentifier' is set
        if (instanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'instanceIdentifier' when calling clusterClusterKeyInstancesInstanceIdentifierDelete(Async)");
        }

        return clusterClusterKeyInstancesInstanceIdentifierDeleteCall(checksum, clusterKey, instanceIdentifier, _callback);

    }

    /**
     * remove instance
     * Remove an instance from a cluster
     * @param checksum the current checksum of the instance to be deleted (required)
     * @param clusterKey the cluster to remove an instance from (required)
     * @param instanceIdentifier the instance to remove, identified as &lt;host&gt;:&lt;port&gt; (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Object clusterClusterKeyInstancesInstanceIdentifierDelete(String checksum, String clusterKey, String instanceIdentifier) throws ApiException {
        ApiResponse<Object> localVarResp = clusterClusterKeyInstancesInstanceIdentifierDeleteWithHttpInfo(checksum, clusterKey, instanceIdentifier);
        return localVarResp.getData();
    }

    /**
     * remove instance
     * Remove an instance from a cluster
     * @param checksum the current checksum of the instance to be deleted (required)
     * @param clusterKey the cluster to remove an instance from (required)
     * @param instanceIdentifier the instance to remove, identified as &lt;host&gt;:&lt;port&gt; (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> clusterClusterKeyInstancesInstanceIdentifierDeleteWithHttpInfo(String checksum, String clusterKey, String instanceIdentifier) throws ApiException {
        okhttp3.Call localVarCall = clusterClusterKeyInstancesInstanceIdentifierDeleteValidateBeforeCall(checksum, clusterKey, instanceIdentifier, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * remove instance (asynchronously)
     * Remove an instance from a cluster
     * @param checksum the current checksum of the instance to be deleted (required)
     * @param clusterKey the cluster to remove an instance from (required)
     * @param instanceIdentifier the instance to remove, identified as &lt;host&gt;:&lt;port&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an empty result </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyInstancesInstanceIdentifierDeleteAsync(String checksum, String clusterKey, String instanceIdentifier, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterClusterKeyInstancesInstanceIdentifierDeleteValidateBeforeCall(checksum, clusterKey, instanceIdentifier, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterClusterKeyInstancesPost
     * @param clusterKey the cluster to add the instance to (required)
     * @param instance the instance to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyInstancesPostCall(String clusterKey, Instance instance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instance;

        // create path and map variables
        String localVarPath = "/cluster/{clusterKey}/instances"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterClusterKeyInstancesPostValidateBeforeCall(String clusterKey, Instance instance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling clusterClusterKeyInstancesPost(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling clusterClusterKeyInstancesPost(Async)");
        }

        return clusterClusterKeyInstancesPostCall(clusterKey, instance, _callback);

    }

    /**
     * add instance
     * Add a new instance to a cluster
     * @param clusterKey the cluster to add the instance to (required)
     * @param instance the instance to add (required)
     * @return InstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InstanceResult clusterClusterKeyInstancesPost(String clusterKey, Instance instance) throws ApiException {
        ApiResponse<InstanceResult> localVarResp = clusterClusterKeyInstancesPostWithHttpInfo(clusterKey, instance);
        return localVarResp.getData();
    }

    /**
     * add instance
     * Add a new instance to a cluster
     * @param clusterKey the cluster to add the instance to (required)
     * @param instance the instance to add (required)
     * @return ApiResponse&lt;InstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceResult> clusterClusterKeyInstancesPostWithHttpInfo(String clusterKey, Instance instance) throws ApiException {
        okhttp3.Call localVarCall = clusterClusterKeyInstancesPostValidateBeforeCall(clusterKey, instance, null);
        Type localVarReturnType = new TypeToken<InstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * add instance (asynchronously)
     * Add a new instance to a cluster
     * @param clusterKey the cluster to add the instance to (required)
     * @param instance the instance to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created instance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyInstancesPostAsync(String clusterKey, Instance instance, final ApiCallback<InstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterClusterKeyInstancesPostValidateBeforeCall(clusterKey, instance, _callback);
        Type localVarReturnType = new TypeToken<InstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterClusterKeyPut
     * @param clusterKey the cluster key (required)
     * @param cluster the cluster to modify (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyPutCall(String clusterKey, Cluster cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cluster;

        // create path and map variables
        String localVarPath = "/cluster/{clusterKey}"
            .replace("{" + "clusterKey" + "}", localVarApiClient.escapeString(clusterKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterClusterKeyPutValidateBeforeCall(String clusterKey, Cluster cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterKey' is set
        if (clusterKey == null) {
            throw new ApiException("Missing the required parameter 'clusterKey' when calling clusterClusterKeyPut(Async)");
        }

        // verify the required parameter 'cluster' is set
        if (cluster == null) {
            throw new ApiException("Missing the required parameter 'cluster' when calling clusterClusterKeyPut(Async)");
        }

        return clusterClusterKeyPutCall(clusterKey, cluster, _callback);

    }

    /**
     * modify cluster
     * Modify an existing cluster
     * @param clusterKey the cluster key (required)
     * @param cluster the cluster to modify (required)
     * @return ClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResult clusterClusterKeyPut(String clusterKey, Cluster cluster) throws ApiException {
        ApiResponse<ClusterResult> localVarResp = clusterClusterKeyPutWithHttpInfo(clusterKey, cluster);
        return localVarResp.getData();
    }

    /**
     * modify cluster
     * Modify an existing cluster
     * @param clusterKey the cluster key (required)
     * @param cluster the cluster to modify (required)
     * @return ApiResponse&lt;ClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResult> clusterClusterKeyPutWithHttpInfo(String clusterKey, Cluster cluster) throws ApiException {
        okhttp3.Call localVarCall = clusterClusterKeyPutValidateBeforeCall(clusterKey, cluster, null);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * modify cluster (asynchronously)
     * Modify an existing cluster
     * @param clusterKey the cluster key (required)
     * @param cluster the cluster to modify (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterClusterKeyPutAsync(String clusterKey, Cluster cluster, final ApiCallback<ClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterClusterKeyPutValidateBeforeCall(clusterKey, cluster, _callback);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterGet
     * @param filters A JSON encoded array of ClusterFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ClusterFilter will be included.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterGetCall(String filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterGetValidateBeforeCall(String filters, final ApiCallback _callback) throws ApiException {
        return clusterGetCall(filters, _callback);

    }

    /**
     * get clusters
     * Get a list of clusters
     * @param filters A JSON encoded array of ClusterFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ClusterFilter will be included.  (optional)
     * @return MultiClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MultiClusterResult clusterGet(String filters) throws ApiException {
        ApiResponse<MultiClusterResult> localVarResp = clusterGetWithHttpInfo(filters);
        return localVarResp.getData();
    }

    /**
     * get clusters
     * Get a list of clusters
     * @param filters A JSON encoded array of ClusterFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ClusterFilter will be included.  (optional)
     * @return ApiResponse&lt;MultiClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiClusterResult> clusterGetWithHttpInfo(String filters) throws ApiException {
        okhttp3.Call localVarCall = clusterGetValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<MultiClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get clusters (asynchronously)
     * Get a list of clusters
     * @param filters A JSON encoded array of ClusterFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ClusterFilter will be included.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of clusters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterGetAsync(String filters, final ApiCallback<MultiClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterGetValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<MultiClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterPost
     * @param cluster the cluster to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPostCall(ClusterCreate cluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cluster;

        // create path and map variables
        String localVarPath = "/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterPostValidateBeforeCall(ClusterCreate cluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cluster' is set
        if (cluster == null) {
            throw new ApiException("Missing the required parameter 'cluster' when calling clusterPost(Async)");
        }

        return clusterPostCall(cluster, _callback);

    }

    /**
     * create cluster
     * Create a new cluster
     * @param cluster the cluster to create (required)
     * @return ClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResult clusterPost(ClusterCreate cluster) throws ApiException {
        ApiResponse<ClusterResult> localVarResp = clusterPostWithHttpInfo(cluster);
        return localVarResp.getData();
    }

    /**
     * create cluster
     * Create a new cluster
     * @param cluster the cluster to create (required)
     * @return ApiResponse&lt;ClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResult> clusterPostWithHttpInfo(ClusterCreate cluster) throws ApiException {
        okhttp3.Call localVarCall = clusterPostValidateBeforeCall(cluster, null);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create cluster (asynchronously)
     * Create a new cluster
     * @param cluster the cluster to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created cluster </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterPostAsync(ClusterCreate cluster, final ApiCallback<ClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterPostValidateBeforeCall(cluster, _callback);
        Type localVarReturnType = new TypeToken<ClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
