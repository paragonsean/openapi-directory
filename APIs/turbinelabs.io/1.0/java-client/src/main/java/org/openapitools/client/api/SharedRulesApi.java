/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.MultiSharedRulesResult;
import org.openapitools.client.model.SharedRules;
import org.openapitools.client.model.SharedRulesCreate;
import org.openapitools.client.model.SharedRulesResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharedRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SharedRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SharedRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sharedRulesGet
     * @param filters A JSON encoded array of SharedRulesFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any SharedRulesFilter will be included.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of shared_rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesGetCall(String filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedRulesGetValidateBeforeCall(String filters, final ApiCallback _callback) throws ApiException {
        return sharedRulesGetCall(filters, _callback);

    }

    /**
     * get shared_rules
     * Get a list of shared_rules
     * @param filters A JSON encoded array of SharedRulesFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any SharedRulesFilter will be included.  (optional)
     * @return MultiSharedRulesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of shared_rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MultiSharedRulesResult sharedRulesGet(String filters) throws ApiException {
        ApiResponse<MultiSharedRulesResult> localVarResp = sharedRulesGetWithHttpInfo(filters);
        return localVarResp.getData();
    }

    /**
     * get shared_rules
     * Get a list of shared_rules
     * @param filters A JSON encoded array of SharedRulesFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any SharedRulesFilter will be included.  (optional)
     * @return ApiResponse&lt;MultiSharedRulesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of shared_rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiSharedRulesResult> sharedRulesGetWithHttpInfo(String filters) throws ApiException {
        okhttp3.Call localVarCall = sharedRulesGetValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<MultiSharedRulesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get shared_rules (asynchronously)
     * Get a list of shared_rules
     * @param filters A JSON encoded array of SharedRulesFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any SharedRulesFilter will be included.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a list of shared_rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesGetAsync(String filters, final ApiCallback<MultiSharedRulesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedRulesGetValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<MultiSharedRulesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharedRulesPost
     * @param sharedRules the shared_rules object to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesPostCall(SharedRulesCreate sharedRules, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedRules;

        // create path and map variables
        String localVarPath = "/shared_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedRulesPostValidateBeforeCall(SharedRulesCreate sharedRules, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sharedRules' is set
        if (sharedRules == null) {
            throw new ApiException("Missing the required parameter 'sharedRules' when calling sharedRulesPost(Async)");
        }

        return sharedRulesPostCall(sharedRules, _callback);

    }

    /**
     * create shared_rules
     * Create a new shared_rules object
     * @param sharedRules the shared_rules object to create (required)
     * @return SharedRulesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedRulesResult sharedRulesPost(SharedRulesCreate sharedRules) throws ApiException {
        ApiResponse<SharedRulesResult> localVarResp = sharedRulesPostWithHttpInfo(sharedRules);
        return localVarResp.getData();
    }

    /**
     * create shared_rules
     * Create a new shared_rules object
     * @param sharedRules the shared_rules object to create (required)
     * @return ApiResponse&lt;SharedRulesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedRulesResult> sharedRulesPostWithHttpInfo(SharedRulesCreate sharedRules) throws ApiException {
        okhttp3.Call localVarCall = sharedRulesPostValidateBeforeCall(sharedRules, null);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create shared_rules (asynchronously)
     * Create a new shared_rules object
     * @param sharedRules the shared_rules object to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesPostAsync(SharedRulesCreate sharedRules, final ApiCallback<SharedRulesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedRulesPostValidateBeforeCall(sharedRules, _callback);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharedRulesSharedRulesKeyGet
     * @param sharedRulesKey the shared_rules key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesSharedRulesKeyGetCall(String sharedRulesKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shared_rules/{sharedRulesKey}"
            .replace("{" + "sharedRulesKey" + "}", localVarApiClient.escapeString(sharedRulesKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedRulesSharedRulesKeyGetValidateBeforeCall(String sharedRulesKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sharedRulesKey' is set
        if (sharedRulesKey == null) {
            throw new ApiException("Missing the required parameter 'sharedRulesKey' when calling sharedRulesSharedRulesKeyGet(Async)");
        }

        return sharedRulesSharedRulesKeyGetCall(sharedRulesKey, _callback);

    }

    /**
     * get shared_rules object
     * Get details for an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @return SharedRulesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedRulesResult sharedRulesSharedRulesKeyGet(String sharedRulesKey) throws ApiException {
        ApiResponse<SharedRulesResult> localVarResp = sharedRulesSharedRulesKeyGetWithHttpInfo(sharedRulesKey);
        return localVarResp.getData();
    }

    /**
     * get shared_rules object
     * Get details for an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @return ApiResponse&lt;SharedRulesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedRulesResult> sharedRulesSharedRulesKeyGetWithHttpInfo(String sharedRulesKey) throws ApiException {
        okhttp3.Call localVarCall = sharedRulesSharedRulesKeyGetValidateBeforeCall(sharedRulesKey, null);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get shared_rules object (asynchronously)
     * Get details for an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a result containing a single shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesSharedRulesKeyGetAsync(String sharedRulesKey, final ApiCallback<SharedRulesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedRulesSharedRulesKeyGetValidateBeforeCall(sharedRulesKey, _callback);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharedRulesSharedRulesKeyPut
     * @param sharedRulesKey the shared_rules key (required)
     * @param sharedRules the shared_rules object to modify (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesSharedRulesKeyPutCall(String sharedRulesKey, SharedRules sharedRules, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sharedRules;

        // create path and map variables
        String localVarPath = "/shared_rules/{sharedRulesKey}"
            .replace("{" + "sharedRulesKey" + "}", localVarApiClient.escapeString(sharedRulesKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedRulesSharedRulesKeyPutValidateBeforeCall(String sharedRulesKey, SharedRules sharedRules, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sharedRulesKey' is set
        if (sharedRulesKey == null) {
            throw new ApiException("Missing the required parameter 'sharedRulesKey' when calling sharedRulesSharedRulesKeyPut(Async)");
        }

        // verify the required parameter 'sharedRules' is set
        if (sharedRules == null) {
            throw new ApiException("Missing the required parameter 'sharedRules' when calling sharedRulesSharedRulesKeyPut(Async)");
        }

        return sharedRulesSharedRulesKeyPutCall(sharedRulesKey, sharedRules, _callback);

    }

    /**
     * modify shared_rules object
     * Modify an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @param sharedRules the shared_rules object to modify (required)
     * @return SharedRulesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SharedRulesResult sharedRulesSharedRulesKeyPut(String sharedRulesKey, SharedRules sharedRules) throws ApiException {
        ApiResponse<SharedRulesResult> localVarResp = sharedRulesSharedRulesKeyPutWithHttpInfo(sharedRulesKey, sharedRules);
        return localVarResp.getData();
    }

    /**
     * modify shared_rules object
     * Modify an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @param sharedRules the shared_rules object to modify (required)
     * @return ApiResponse&lt;SharedRulesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedRulesResult> sharedRulesSharedRulesKeyPutWithHttpInfo(String sharedRulesKey, SharedRules sharedRules) throws ApiException {
        okhttp3.Call localVarCall = sharedRulesSharedRulesKeyPutValidateBeforeCall(sharedRulesKey, sharedRules, null);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * modify shared_rules object (asynchronously)
     * Modify an existing shared_rules object
     * @param sharedRulesKey the shared_rules key (required)
     * @param sharedRules the shared_rules object to modify (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result containing the modified shared_rules object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedRulesSharedRulesKeyPutAsync(String sharedRulesKey, SharedRules sharedRules, final ApiCallback<SharedRulesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedRulesSharedRulesKeyPutValidateBeforeCall(sharedRulesKey, sharedRules, _callback);
        Type localVarReturnType = new TypeToken<SharedRulesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
