/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This describes a cookie that should be set in response to a HTTP request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CookieDatum {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EXPIRES_IN_SEC = "expires_in_sec";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN_SEC)
  private Integer expiresInSec;

  public static final String SERIALIZED_NAME_HTTP_ONLY = "http_only";
  @SerializedName(SERIALIZED_NAME_HTTP_ONLY)
  private Boolean httpOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Allows assertions how a cookie should behave wend making cross-site requests. Maps directly to &#39;SameSite&#39; attribute. If unset no guidance will be included in the cookie. 
   */
  @JsonAdapter(SameSiteEnum.Adapter.class)
  public enum SameSiteEnum {
    STRICT("Strict"),
    
    LAX("Lax");

    private String value;

    SameSiteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SameSiteEnum fromValue(String value) {
      for (SameSiteEnum b : SameSiteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SameSiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SameSiteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SameSiteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SameSiteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SameSiteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAME_SITE = "same_site";
  @SerializedName(SERIALIZED_NAME_SAME_SITE)
  private SameSiteEnum sameSite;

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private Boolean secure;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_VALUE_IS_LITERAL = "value_is_literal";
  @SerializedName(SERIALIZED_NAME_VALUE_IS_LITERAL)
  private Boolean valueIsLiteral;

  public CookieDatum() {
  }

  public CookieDatum domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Specifies the hosts to hich a cookie will be sent. Maps directly to a cookie&#39;s &#39;Domain&#39; attribute. 
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public CookieDatum expiresInSec(Integer expiresInSec) {
    this.expiresInSec = expiresInSec;
    return this;
  }

  /**
   * This indicates how long a cookie will be valid, in seconds. If not set the default is to provide no expiration information. If set to 0 the cookie will have an &#39;Expires&#39; attribute set to &#39;Mon, 1 Jan 0001 12:00:00 UTC&#39;. For values greater than 0 the cookie&#39;s &#39;Max-Age&#39; attribute will be set to that value. 
   * @return expiresInSec
   */
  @javax.annotation.Nullable
  public Integer getExpiresInSec() {
    return expiresInSec;
  }

  public void setExpiresInSec(Integer expiresInSec) {
    this.expiresInSec = expiresInSec;
  }


  public CookieDatum httpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
    return this;
  }

  /**
   * If set the cookie value will not be accessible via Document.cookie. Maps directly to &#39;HttpOnly&#39; attribute. 
   * @return httpOnly
   */
  @javax.annotation.Nullable
  public Boolean getHttpOnly() {
    return httpOnly;
  }

  public void setHttpOnly(Boolean httpOnly) {
    this.httpOnly = httpOnly;
  }


  public CookieDatum name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the cookie that will be attached to the response sent.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CookieDatum path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Specifies the path a cookie will be associated with. Maps directly to the &#39;Path&#39; attribute. 
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public CookieDatum sameSite(SameSiteEnum sameSite) {
    this.sameSite = sameSite;
    return this;
  }

  /**
   * Allows assertions how a cookie should behave wend making cross-site requests. Maps directly to &#39;SameSite&#39; attribute. If unset no guidance will be included in the cookie. 
   * @return sameSite
   */
  @javax.annotation.Nullable
  public SameSiteEnum getSameSite() {
    return sameSite;
  }

  public void setSameSite(SameSiteEnum sameSite) {
    this.sameSite = sameSite;
  }


  public CookieDatum secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  /**
   * If set the cookie will only be sent on subsequent requests when accessing a server via HTTPS. Maps directly to &#39;Secure&#39; attribute. 
   * @return secure
   */
  @javax.annotation.Nullable
  public Boolean getSecure() {
    return secure;
  }

  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public CookieDatum value(String value) {
    this.value = value;
    return this;
  }

  /**
   * A literal value to send as the cookie value or a reference to some metadatum value set on the Cluster Intsance that handles a specific request. 
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public CookieDatum valueIsLiteral(Boolean valueIsLiteral) {
    this.valueIsLiteral = valueIsLiteral;
    return this;
  }

  /**
   * If true then the value attribute is treated as a literal and no attempt to resolve to a server metadatum. 
   * @return valueIsLiteral
   */
  @javax.annotation.Nullable
  public Boolean getValueIsLiteral() {
    return valueIsLiteral;
  }

  public void setValueIsLiteral(Boolean valueIsLiteral) {
    this.valueIsLiteral = valueIsLiteral;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CookieDatum cookieDatum = (CookieDatum) o;
    return Objects.equals(this.domain, cookieDatum.domain) &&
        Objects.equals(this.expiresInSec, cookieDatum.expiresInSec) &&
        Objects.equals(this.httpOnly, cookieDatum.httpOnly) &&
        Objects.equals(this.name, cookieDatum.name) &&
        Objects.equals(this.path, cookieDatum.path) &&
        Objects.equals(this.sameSite, cookieDatum.sameSite) &&
        Objects.equals(this.secure, cookieDatum.secure) &&
        Objects.equals(this.value, cookieDatum.value) &&
        Objects.equals(this.valueIsLiteral, cookieDatum.valueIsLiteral);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, expiresInSec, httpOnly, name, path, sameSite, secure, value, valueIsLiteral);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CookieDatum {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    expiresInSec: ").append(toIndentedString(expiresInSec)).append("\n");
    sb.append("    httpOnly: ").append(toIndentedString(httpOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    sameSite: ").append(toIndentedString(sameSite)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueIsLiteral: ").append(toIndentedString(valueIsLiteral)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("expires_in_sec");
    openapiFields.add("http_only");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("same_site");
    openapiFields.add("secure");
    openapiFields.add("value");
    openapiFields.add("value_is_literal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CookieDatum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CookieDatum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CookieDatum is not found in the empty JSON string", CookieDatum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CookieDatum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CookieDatum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("same_site") != null && !jsonObj.get("same_site").isJsonNull()) && !jsonObj.get("same_site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `same_site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("same_site").toString()));
      }
      // validate the optional field `same_site`
      if (jsonObj.get("same_site") != null && !jsonObj.get("same_site").isJsonNull()) {
        SameSiteEnum.validateJsonElement(jsonObj.get("same_site"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CookieDatum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CookieDatum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CookieDatum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CookieDatum.class));

       return (TypeAdapter<T>) new TypeAdapter<CookieDatum>() {
           @Override
           public void write(JsonWriter out, CookieDatum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CookieDatum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CookieDatum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CookieDatum
   * @throws IOException if the JSON string is invalid with respect to CookieDatum
   */
  public static CookieDatum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CookieDatum.class);
  }

  /**
   * Convert an instance of CookieDatum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

