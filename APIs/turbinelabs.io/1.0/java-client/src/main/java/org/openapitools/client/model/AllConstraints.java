/*
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClusterConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AllConstraints
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:51.953320-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllConstraints {
  public static final String SERIALIZED_NAME_DARK = "dark";
  @SerializedName(SERIALIZED_NAME_DARK)
  private List<ClusterConstraint> dark = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIGHT = "light";
  @SerializedName(SERIALIZED_NAME_LIGHT)
  private List<ClusterConstraint> light = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAP = "tap";
  @SerializedName(SERIALIZED_NAME_TAP)
  private List<ClusterConstraint> tap = new ArrayList<>();

  public AllConstraints() {
  }

  public AllConstraints dark(List<ClusterConstraint> dark) {
    this.dark = dark;
    return this;
  }

  public AllConstraints addDarkItem(ClusterConstraint darkItem) {
    if (this.dark == null) {
      this.dark = new ArrayList<>();
    }
    this.dark.add(darkItem);
    return this;
  }

  /**
   * Get dark
   * @return dark
   */
  @javax.annotation.Nullable
  public List<ClusterConstraint> getDark() {
    return dark;
  }

  public void setDark(List<ClusterConstraint> dark) {
    this.dark = dark;
  }


  public AllConstraints light(List<ClusterConstraint> light) {
    this.light = light;
    return this;
  }

  public AllConstraints addLightItem(ClusterConstraint lightItem) {
    if (this.light == null) {
      this.light = new ArrayList<>();
    }
    this.light.add(lightItem);
    return this;
  }

  /**
   * Get light
   * @return light
   */
  @javax.annotation.Nonnull
  public List<ClusterConstraint> getLight() {
    return light;
  }

  public void setLight(List<ClusterConstraint> light) {
    this.light = light;
  }


  public AllConstraints tap(List<ClusterConstraint> tap) {
    this.tap = tap;
    return this;
  }

  public AllConstraints addTapItem(ClusterConstraint tapItem) {
    if (this.tap == null) {
      this.tap = new ArrayList<>();
    }
    this.tap.add(tapItem);
    return this;
  }

  /**
   * Get tap
   * @return tap
   */
  @javax.annotation.Nullable
  public List<ClusterConstraint> getTap() {
    return tap;
  }

  public void setTap(List<ClusterConstraint> tap) {
    this.tap = tap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllConstraints allConstraints = (AllConstraints) o;
    return Objects.equals(this.dark, allConstraints.dark) &&
        Objects.equals(this.light, allConstraints.light) &&
        Objects.equals(this.tap, allConstraints.tap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dark, light, tap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllConstraints {\n");
    sb.append("    dark: ").append(toIndentedString(dark)).append("\n");
    sb.append("    light: ").append(toIndentedString(light)).append("\n");
    sb.append("    tap: ").append(toIndentedString(tap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dark");
    openapiFields.add("light");
    openapiFields.add("tap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("light");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllConstraints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllConstraints is not found in the empty JSON string", AllConstraints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllConstraints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllConstraints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AllConstraints.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dark") != null && !jsonObj.get("dark").isJsonNull()) {
        JsonArray jsonArraydark = jsonObj.getAsJsonArray("dark");
        if (jsonArraydark != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dark").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dark` to be an array in the JSON string but got `%s`", jsonObj.get("dark").toString()));
          }

          // validate the optional field `dark` (array)
          for (int i = 0; i < jsonArraydark.size(); i++) {
            ClusterConstraint.validateJsonElement(jsonArraydark.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("light").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `light` to be an array in the JSON string but got `%s`", jsonObj.get("light").toString()));
      }

      JsonArray jsonArraylight = jsonObj.getAsJsonArray("light");
      // validate the required field `light` (array)
      for (int i = 0; i < jsonArraylight.size(); i++) {
        ClusterConstraint.validateJsonElement(jsonArraylight.get(i));
      };
      if (jsonObj.get("tap") != null && !jsonObj.get("tap").isJsonNull()) {
        JsonArray jsonArraytap = jsonObj.getAsJsonArray("tap");
        if (jsonArraytap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tap` to be an array in the JSON string but got `%s`", jsonObj.get("tap").toString()));
          }

          // validate the optional field `tap` (array)
          for (int i = 0; i < jsonArraytap.size(); i++) {
            ClusterConstraint.validateJsonElement(jsonArraytap.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<AllConstraints>() {
           @Override
           public void write(JsonWriter out, AllConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllConstraints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllConstraints
   * @throws IOException if the JSON string is invalid with respect to AllConstraints
   */
  public static AllConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllConstraints.class);
  }

  /**
   * Convert an instance of AllConstraints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

