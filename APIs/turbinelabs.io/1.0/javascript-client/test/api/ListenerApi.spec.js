/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TurbineLabsApi);
  }
}(this, function(expect, TurbineLabsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TurbineLabsApi.ListenerApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListenerApi', function() {
    describe('listenerGet', function() {
      it('should call listenerGet successfully', function(done) {
        //uncomment below and update the code to test listenerGet
        //instance.listenerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listenerListenerKeyDelete', function() {
      it('should call listenerListenerKeyDelete successfully', function(done) {
        //uncomment below and update the code to test listenerListenerKeyDelete
        //instance.listenerListenerKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listenerListenerKeyGet', function() {
      it('should call listenerListenerKeyGet successfully', function(done) {
        //uncomment below and update the code to test listenerListenerKeyGet
        //instance.listenerListenerKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listenerListenerKeyPut', function() {
      it('should call listenerListenerKeyPut successfully', function(done) {
        //uncomment below and update the code to test listenerListenerKeyPut
        //instance.listenerListenerKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listenerPost', function() {
      it('should call listenerPost successfully', function(done) {
        //uncomment below and update the code to test listenerPost
        //instance.listenerPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
