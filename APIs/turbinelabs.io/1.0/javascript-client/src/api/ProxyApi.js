/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import MultiProxyResult from '../model/MultiProxyResult';
import Proxy from '../model/Proxy';
import ProxyCreate from '../model/ProxyCreate';
import ProxyResult from '../model/ProxyResult';

/**
* Proxy service.
* @module api/ProxyApi
* @version 1.0
*/
export default class ProxyApi {

    /**
    * Constructs a new ProxyApi. 
    * @alias module:api/ProxyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the proxyGet operation.
     * @callback module:api/ProxyApi~proxyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiProxyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list proxies
     * Get a list of proxies
     * @param {Object} opts Optional parameters
     * @param {String} [filters] A JSON encoded array of ProxyFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ProxyFilter will be included. 
     * @param {module:api/ProxyApi~proxyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiProxyResult}
     */
    proxyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiProxyResult;
      return this.apiClient.callApi(
        '/proxy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyPost operation.
     * @callback module:api/ProxyApi~proxyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create proxy
     * Create a new proxy
     * @param {module:model/ProxyCreate} proxy the proxy to create
     * @param {module:api/ProxyApi~proxyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyResult}
     */
    proxyPost(proxy, callback) {
      let postBody = proxy;
      // verify the required parameter 'proxy' is set
      if (proxy === undefined || proxy === null) {
        throw new Error("Missing the required parameter 'proxy' when calling proxyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProxyResult;
      return this.apiClient.callApi(
        '/proxy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyProxyKeyDelete operation.
     * @callback module:api/ProxyApi~proxyProxyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proxy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete proxy
     * Delete existing proxy
     * @param {String} proxyKey the proxy key
     * @param {String} checksum the current checksum of the proxy to be deleted
     * @param {module:api/ProxyApi~proxyProxyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proxy}
     */
    proxyProxyKeyDelete(proxyKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'proxyKey' is set
      if (proxyKey === undefined || proxyKey === null) {
        throw new Error("Missing the required parameter 'proxyKey' when calling proxyProxyKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling proxyProxyKeyDelete");
      }

      let pathParams = {
        'proxyKey': proxyKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Proxy;
      return this.apiClient.callApi(
        '/proxy/{proxyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proxyProxyKeyGet operation.
     * @callback module:api/ProxyApi~proxyProxyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProxyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get proxy
     * Get details for a single proxy
     * @param {String} proxyKey the proxy key
     * @param {module:api/ProxyApi~proxyProxyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProxyResult}
     */
    proxyProxyKeyGet(proxyKey, callback) {
      let postBody = null;
      // verify the required parameter 'proxyKey' is set
      if (proxyKey === undefined || proxyKey === null) {
        throw new Error("Missing the required parameter 'proxyKey' when calling proxyProxyKeyGet");
      }

      let pathParams = {
        'proxyKey': proxyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProxyResult;
      return this.apiClient.callApi(
        '/proxy/{proxyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
