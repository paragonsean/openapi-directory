/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DomainCreate from '../model/DomainCreate';
import DomainResult from '../model/DomainResult';
import Error from '../model/Error';
import MultiDomainResult from '../model/MultiDomainResult';

/**
* Domain service.
* @module api/DomainApi
* @version 1.0
*/
export default class DomainApi {

    /**
    * Constructs a new DomainApi. 
    * @alias module:api/DomainApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainDomainKeyDelete operation.
     * @callback module:api/DomainApi~domainDomainKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete domain
     * Delete an existing domain
     * @param {String} domainKey the domain key
     * @param {String} checksum the current checksum of the domain to be deleted
     * @param {module:api/DomainApi~domainDomainKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    domainDomainKeyDelete(domainKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'domainKey' is set
      if (domainKey === undefined || domainKey === null) {
        throw new Error("Missing the required parameter 'domainKey' when calling domainDomainKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling domainDomainKeyDelete");
      }

      let pathParams = {
        'domainKey': domainKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domain/{domainKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainDomainKeyGet operation.
     * @callback module:api/DomainApi~domainDomainKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get domain
     * Get details for a single domain
     * @param {String} domainKey the domain key
     * @param {module:api/DomainApi~domainDomainKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResult}
     */
    domainDomainKeyGet(domainKey, callback) {
      let postBody = null;
      // verify the required parameter 'domainKey' is set
      if (domainKey === undefined || domainKey === null) {
        throw new Error("Missing the required parameter 'domainKey' when calling domainDomainKeyGet");
      }

      let pathParams = {
        'domainKey': domainKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainResult;
      return this.apiClient.callApi(
        '/domain/{domainKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainGet operation.
     * @callback module:api/DomainApi~domainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiDomainResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get domains
     * Get a list of domains
     * @param {Object} opts Optional parameters
     * @param {String} [filters] A JSON encoded array of DomainFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any DomainFilter will be included. 
     * @param {module:api/DomainApi~domainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiDomainResult}
     */
    domainGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiDomainResult;
      return this.apiClient.callApi(
        '/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainPost operation.
     * @callback module:api/DomainApi~domainPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create domain
     * Create a new domain
     * @param {module:model/DomainCreate} domain the domain to create
     * @param {module:api/DomainApi~domainPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResult}
     */
    domainPost(domain, callback) {
      let postBody = domain;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainResult;
      return this.apiClient.callApi(
        '/domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
