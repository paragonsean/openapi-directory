/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cluster from '../model/Cluster';
import ClusterCreate from '../model/ClusterCreate';
import ClusterResult from '../model/ClusterResult';
import Error from '../model/Error';
import Instance from '../model/Instance';
import InstanceResult from '../model/InstanceResult';
import MultiClusterResult from '../model/MultiClusterResult';

/**
* Cluster service.
* @module api/ClusterApi
* @version 1.0
*/
export default class ClusterApi {

    /**
    * Constructs a new ClusterApi. 
    * @alias module:api/ClusterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clusterClusterKeyDelete operation.
     * @callback module:api/ClusterApi~clusterClusterKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete cluster
     * Delete an existing cluster
     * @param {String} clusterKey the cluster key
     * @param {String} checksum the current checksum of the cluster to be deleted
     * @param {module:api/ClusterApi~clusterClusterKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    clusterClusterKeyDelete(clusterKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'clusterKey' is set
      if (clusterKey === undefined || clusterKey === null) {
        throw new Error("Missing the required parameter 'clusterKey' when calling clusterClusterKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling clusterClusterKeyDelete");
      }

      let pathParams = {
        'clusterKey': clusterKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cluster/{clusterKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterClusterKeyGet operation.
     * @callback module:api/ClusterApi~clusterClusterKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get cluster
     * Get details for an existing cluster
     * @param {String} clusterKey the cluster key
     * @param {module:api/ClusterApi~clusterClusterKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterResult}
     */
    clusterClusterKeyGet(clusterKey, callback) {
      let postBody = null;
      // verify the required parameter 'clusterKey' is set
      if (clusterKey === undefined || clusterKey === null) {
        throw new Error("Missing the required parameter 'clusterKey' when calling clusterClusterKeyGet");
      }

      let pathParams = {
        'clusterKey': clusterKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterResult;
      return this.apiClient.callApi(
        '/cluster/{clusterKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterClusterKeyInstancesInstanceIdentifierDelete operation.
     * @callback module:api/ClusterApi~clusterClusterKeyInstancesInstanceIdentifierDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove instance
     * Remove an instance from a cluster
     * @param {String} checksum the current checksum of the instance to be deleted
     * @param {String} clusterKey the cluster to remove an instance from
     * @param {String} instanceIdentifier the instance to remove, identified as <host>:<port>
     * @param {module:api/ClusterApi~clusterClusterKeyInstancesInstanceIdentifierDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    clusterClusterKeyInstancesInstanceIdentifierDelete(checksum, clusterKey, instanceIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling clusterClusterKeyInstancesInstanceIdentifierDelete");
      }
      // verify the required parameter 'clusterKey' is set
      if (clusterKey === undefined || clusterKey === null) {
        throw new Error("Missing the required parameter 'clusterKey' when calling clusterClusterKeyInstancesInstanceIdentifierDelete");
      }
      // verify the required parameter 'instanceIdentifier' is set
      if (instanceIdentifier === undefined || instanceIdentifier === null) {
        throw new Error("Missing the required parameter 'instanceIdentifier' when calling clusterClusterKeyInstancesInstanceIdentifierDelete");
      }

      let pathParams = {
        'clusterKey': clusterKey,
        'instanceIdentifier': instanceIdentifier
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cluster/{clusterKey}/instances/{instanceIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterClusterKeyInstancesPost operation.
     * @callback module:api/ClusterApi~clusterClusterKeyInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add instance
     * Add a new instance to a cluster
     * @param {String} clusterKey the cluster to add the instance to
     * @param {module:model/Instance} instance the instance to add
     * @param {module:api/ClusterApi~clusterClusterKeyInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceResult}
     */
    clusterClusterKeyInstancesPost(clusterKey, instance, callback) {
      let postBody = instance;
      // verify the required parameter 'clusterKey' is set
      if (clusterKey === undefined || clusterKey === null) {
        throw new Error("Missing the required parameter 'clusterKey' when calling clusterClusterKeyInstancesPost");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling clusterClusterKeyInstancesPost");
      }

      let pathParams = {
        'clusterKey': clusterKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceResult;
      return this.apiClient.callApi(
        '/cluster/{clusterKey}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterClusterKeyPut operation.
     * @callback module:api/ClusterApi~clusterClusterKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * modify cluster
     * Modify an existing cluster
     * @param {String} clusterKey the cluster key
     * @param {module:model/Cluster} cluster the cluster to modify
     * @param {module:api/ClusterApi~clusterClusterKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterResult}
     */
    clusterClusterKeyPut(clusterKey, cluster, callback) {
      let postBody = cluster;
      // verify the required parameter 'clusterKey' is set
      if (clusterKey === undefined || clusterKey === null) {
        throw new Error("Missing the required parameter 'clusterKey' when calling clusterClusterKeyPut");
      }
      // verify the required parameter 'cluster' is set
      if (cluster === undefined || cluster === null) {
        throw new Error("Missing the required parameter 'cluster' when calling clusterClusterKeyPut");
      }

      let pathParams = {
        'clusterKey': clusterKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterResult;
      return this.apiClient.callApi(
        '/cluster/{clusterKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterGet operation.
     * @callback module:api/ClusterApi~clusterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get clusters
     * Get a list of clusters
     * @param {Object} opts Optional parameters
     * @param {String} [filters] A JSON encoded array of ClusterFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ClusterFilter will be included. 
     * @param {module:api/ClusterApi~clusterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiClusterResult}
     */
    clusterGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiClusterResult;
      return this.apiClient.callApi(
        '/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clusterPost operation.
     * @callback module:api/ClusterApi~clusterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create cluster
     * Create a new cluster
     * @param {module:model/ClusterCreate} cluster the cluster to create
     * @param {module:api/ClusterApi~clusterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterResult}
     */
    clusterPost(cluster, callback) {
      let postBody = cluster;
      // verify the required parameter 'cluster' is set
      if (cluster === undefined || cluster === null) {
        throw new Error("Missing the required parameter 'cluster' when calling clusterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterResult;
      return this.apiClient.callApi(
        '/cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
