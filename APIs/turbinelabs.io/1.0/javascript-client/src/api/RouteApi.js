/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import MultiRouteResult from '../model/MultiRouteResult';
import Route from '../model/Route';
import RouteCreate from '../model/RouteCreate';
import RouteResult from '../model/RouteResult';

/**
* Route service.
* @module api/RouteApi
* @version 1.0
*/
export default class RouteApi {

    /**
    * Constructs a new RouteApi. 
    * @alias module:api/RouteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routeGet operation.
     * @callback module:api/RouteApi~routeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiRouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get routes
     * Get a list of routes
     * @param {Object} opts Optional parameters
     * @param {String} [filters] A JSON encoded array of RouteFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any RouteFilter will be included. 
     * @param {module:api/RouteApi~routeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiRouteResult}
     */
    routeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiRouteResult;
      return this.apiClient.callApi(
        '/route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routePost operation.
     * @callback module:api/RouteApi~routePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create route
     * Create a new route
     * @param {module:model/RouteCreate} route the route to create
     * @param {module:api/RouteApi~routePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteResult}
     */
    routePost(route, callback) {
      let postBody = route;
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling routePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteResult;
      return this.apiClient.callApi(
        '/route', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteKeyDelete operation.
     * @callback module:api/RouteApi~routeRouteKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete route
     * Delete an existing route
     * @param {String} routeKey the route key
     * @param {String} checksum the current checksum of the route to be deleted
     * @param {module:api/RouteApi~routeRouteKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    routeRouteKeyDelete(routeKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'routeKey' is set
      if (routeKey === undefined || routeKey === null) {
        throw new Error("Missing the required parameter 'routeKey' when calling routeRouteKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling routeRouteKeyDelete");
      }

      let pathParams = {
        'routeKey': routeKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/route/{routeKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteKeyGet operation.
     * @callback module:api/RouteApi~routeRouteKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get route
     * Get details for an existing route
     * @param {String} routeKey the route key
     * @param {module:api/RouteApi~routeRouteKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteResult}
     */
    routeRouteKeyGet(routeKey, callback) {
      let postBody = null;
      // verify the required parameter 'routeKey' is set
      if (routeKey === undefined || routeKey === null) {
        throw new Error("Missing the required parameter 'routeKey' when calling routeRouteKeyGet");
      }

      let pathParams = {
        'routeKey': routeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteResult;
      return this.apiClient.callApi(
        '/route/{routeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteKeyPut operation.
     * @callback module:api/RouteApi~routeRouteKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * modify route
     * Modify an existing route
     * @param {String} routeKey the route key
     * @param {module:model/Route} route the route to modify
     * @param {module:api/RouteApi~routeRouteKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteResult}
     */
    routeRouteKeyPut(routeKey, route, callback) {
      let postBody = route;
      // verify the required parameter 'routeKey' is set
      if (routeKey === undefined || routeKey === null) {
        throw new Error("Missing the required parameter 'routeKey' when calling routeRouteKeyPut");
      }
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling routeRouteKeyPut");
      }

      let pathParams = {
        'routeKey': routeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteResult;
      return this.apiClient.callApi(
        '/route/{routeKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharedRulesSharedRulesKeyDelete operation.
     * @callback module:api/RouteApi~sharedRulesSharedRulesKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete shared_rules object
     * Delete an existing shared_rules object
     * @param {String} sharedRulesKey the shared_rules key
     * @param {String} checksum the current checksum of the shared_rules to be deleted
     * @param {module:api/RouteApi~sharedRulesSharedRulesKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sharedRulesSharedRulesKeyDelete(sharedRulesKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'sharedRulesKey' is set
      if (sharedRulesKey === undefined || sharedRulesKey === null) {
        throw new Error("Missing the required parameter 'sharedRulesKey' when calling sharedRulesSharedRulesKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling sharedRulesSharedRulesKeyDelete");
      }

      let pathParams = {
        'sharedRulesKey': sharedRulesKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shared_rules/{sharedRulesKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
