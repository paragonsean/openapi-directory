/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import AccessTokenDescription from '../model/AccessTokenDescription';
import Error from '../model/Error';
import MultiAccessTokens from '../model/MultiAccessTokens';
import User from '../model/User';

/**
* UserManagement service.
* @module api/UserManagementApi
* @version 1.0
*/
export default class UserManagementApi {

    /**
    * Constructs a new UserManagementApi. 
    * @alias module:api/UserManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminUserSelfAccessTokenAccessTokenKeyDelete operation.
     * @callback module:api/UserManagementApi~adminUserSelfAccessTokenAccessTokenKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified access token.
     * @param {String} accessTokenKey the key of the Access Token that should be deleted
     * @param {String} checksum the current checksum of the user to be modified
     * @param {module:api/UserManagementApi~adminUserSelfAccessTokenAccessTokenKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminUserSelfAccessTokenAccessTokenKeyDelete(accessTokenKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'accessTokenKey' is set
      if (accessTokenKey === undefined || accessTokenKey === null) {
        throw new Error("Missing the required parameter 'accessTokenKey' when calling adminUserSelfAccessTokenAccessTokenKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling adminUserSelfAccessTokenAccessTokenKeyDelete");
      }

      let pathParams = {
        'access-token-key': accessTokenKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/user/self/access_token/{access-token-key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUserSelfAccessTokensGet operation.
     * @callback module:api/UserManagementApi~adminUserSelfAccessTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiAccessTokens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Access Tokens that are configured for the authenticated user.
     * @param {module:api/UserManagementApi~adminUserSelfAccessTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiAccessTokens}
     */
    adminUserSelfAccessTokensGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiAccessTokens;
      return this.apiClient.callApi(
        '/admin/user/self/access_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUserSelfAccessTokensPost operation.
     * @callback module:api/UserManagementApi~adminUserSelfAccessTokensPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Access Token and associates it with the authenticated user.
     * @param {module:model/AccessTokenDescription} description A short string (<255 characters) describing the expected use of the token.
     * @param {module:api/UserManagementApi~adminUserSelfAccessTokensPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    adminUserSelfAccessTokensPost(description, callback) {
      let postBody = description;
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling adminUserSelfAccessTokensPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessToken;
      return this.apiClient.callApi(
        '/admin/user/self/access_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUserSelfGet operation.
     * @callback module:api/UserManagementApi~adminUserSelfGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user object for the account authorized and making this request.
     * Request the user object for an authorized requesting account.
     * @param {module:api/UserManagementApi~adminUserSelfGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    adminUserSelfGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/admin/user/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
