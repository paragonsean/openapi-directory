/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Listener from '../model/Listener';
import ListenerCreate from '../model/ListenerCreate';
import ListenerResult from '../model/ListenerResult';
import MultiListenerResult from '../model/MultiListenerResult';

/**
* Listener service.
* @module api/ListenerApi
* @version 1.0
*/
export default class ListenerApi {

    /**
    * Constructs a new ListenerApi. 
    * @alias module:api/ListenerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listenerGet operation.
     * @callback module:api/ListenerApi~listenerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiListenerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list listeners
     * Get a list of listeners
     * @param {Object} opts Optional parameters
     * @param {String} [filters] A JSON encoded array of ListenerFilter objects. The filter is taken as a union of intersections. In other words an object that matches every constraint in any ListenerFilter will be included. 
     * @param {module:api/ListenerApi~listenerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiListenerResult}
     */
    listenerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiListenerResult;
      return this.apiClient.callApi(
        '/listener', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerListenerKeyDelete operation.
     * @callback module:api/ListenerApi~listenerListenerKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listener} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete listener
     * Delete existing listener
     * @param {String} listenerKey the listener key
     * @param {String} checksum the current checksum of the listener to be deleted
     * @param {module:api/ListenerApi~listenerListenerKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listener}
     */
    listenerListenerKeyDelete(listenerKey, checksum, callback) {
      let postBody = null;
      // verify the required parameter 'listenerKey' is set
      if (listenerKey === undefined || listenerKey === null) {
        throw new Error("Missing the required parameter 'listenerKey' when calling listenerListenerKeyDelete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling listenerListenerKeyDelete");
      }

      let pathParams = {
        'listenerKey': listenerKey
      };
      let queryParams = {
        'checksum': checksum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Listener;
      return this.apiClient.callApi(
        '/listener/{listenerKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerListenerKeyGet operation.
     * @callback module:api/ListenerApi~listenerListenerKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get listener
     * Get details for a single listener
     * @param {String} listenerKey the listener key
     * @param {module:api/ListenerApi~listenerListenerKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerResult}
     */
    listenerListenerKeyGet(listenerKey, callback) {
      let postBody = null;
      // verify the required parameter 'listenerKey' is set
      if (listenerKey === undefined || listenerKey === null) {
        throw new Error("Missing the required parameter 'listenerKey' when calling listenerListenerKeyGet");
      }

      let pathParams = {
        'listenerKey': listenerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListenerResult;
      return this.apiClient.callApi(
        '/listener/{listenerKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerListenerKeyPut operation.
     * @callback module:api/ListenerApi~listenerListenerKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * modify listener
     * Modify an existing listener
     * @param {String} listenerKey the listener key
     * @param {module:model/Listener} listener the listener to modify
     * @param {module:api/ListenerApi~listenerListenerKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerResult}
     */
    listenerListenerKeyPut(listenerKey, listener, callback) {
      let postBody = listener;
      // verify the required parameter 'listenerKey' is set
      if (listenerKey === undefined || listenerKey === null) {
        throw new Error("Missing the required parameter 'listenerKey' when calling listenerListenerKeyPut");
      }
      // verify the required parameter 'listener' is set
      if (listener === undefined || listener === null) {
        throw new Error("Missing the required parameter 'listener' when calling listenerListenerKeyPut");
      }

      let pathParams = {
        'listenerKey': listenerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListenerResult;
      return this.apiClient.callApi(
        '/listener/{listenerKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerPost operation.
     * @callback module:api/ListenerApi~listenerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create listener
     * Create a new listener
     * @param {module:model/ListenerCreate} listener the listener to create
     * @param {module:api/ListenerApi~listenerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerResult}
     */
    listenerPost(listener, callback) {
      let postBody = listener;
      // verify the required parameter 'listener' is set
      if (listener === undefined || listener === null) {
        throw new Error("Missing the required parameter 'listener' when calling listenerPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListenerResult;
      return this.apiClient.callApi(
        '/listener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
