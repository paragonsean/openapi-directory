/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RouteFilter model module.
 * @module model/RouteFilter
 * @version 1.0
 */
class RouteFilter {
    /**
     * Constructs a new <code>RouteFilter</code>.
     * @alias module:model/RouteFilter
     */
    constructor() { 
        
        RouteFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RouteFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteFilter} obj Optional instance to populate.
     * @return {module:model/RouteFilter} The populated <code>RouteFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteFilter();

            if (data.hasOwnProperty('domain_key')) {
                obj['domain_key'] = ApiClient.convertToType(data['domain_key'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('path_prefix')) {
                obj['path_prefix'] = ApiClient.convertToType(data['path_prefix'], 'String');
            }
            if (data.hasOwnProperty('route_key')) {
                obj['route_key'] = ApiClient.convertToType(data['route_key'], 'String');
            }
            if (data.hasOwnProperty('shared_rules_key')) {
                obj['shared_rules_key'] = ApiClient.convertToType(data['shared_rules_key'], 'String');
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain_key'] && !(typeof data['domain_key'] === 'string' || data['domain_key'] instanceof String)) {
            throw new Error("Expected the field `domain_key` to be a primitive type in the JSON string but got " + data['domain_key']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['path_prefix'] && !(typeof data['path_prefix'] === 'string' || data['path_prefix'] instanceof String)) {
            throw new Error("Expected the field `path_prefix` to be a primitive type in the JSON string but got " + data['path_prefix']);
        }
        // ensure the json data is a string
        if (data['route_key'] && !(typeof data['route_key'] === 'string' || data['route_key'] instanceof String)) {
            throw new Error("Expected the field `route_key` to be a primitive type in the JSON string but got " + data['route_key']);
        }
        // ensure the json data is a string
        if (data['shared_rules_key'] && !(typeof data['shared_rules_key'] === 'string' || data['shared_rules_key'] instanceof String)) {
            throw new Error("Expected the field `shared_rules_key` to be a primitive type in the JSON string but got " + data['shared_rules_key']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}



/**
 * @member {String} domain_key
 */
RouteFilter.prototype['domain_key'] = undefined;

/**
 * @member {String} path
 */
RouteFilter.prototype['path'] = undefined;

/**
 * @member {String} path_prefix
 */
RouteFilter.prototype['path_prefix'] = undefined;

/**
 * @member {String} route_key
 */
RouteFilter.prototype['route_key'] = undefined;

/**
 * @member {String} shared_rules_key
 */
RouteFilter.prototype['shared_rules_key'] = undefined;

/**
 * @member {String} zone_key
 */
RouteFilter.prototype['zone_key'] = undefined;






export default RouteFilter;

