/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TracingConfig from './TracingConfig';

/**
 * The ListenerCreate model module.
 * @module model/ListenerCreate
 * @version 1.0
 */
class ListenerCreate {
    /**
     * Constructs a new <code>ListenerCreate</code>.
     * @alias module:model/ListenerCreate
     * @param name {String} 
     * @param port {Number} the port this listener should bind to.
     * @param protocol {module:model/ListenerCreate.ProtocolEnum} the protocol this listener will handle. http and http2 configure the listener to only process requests of that type. http_auto will adapt to HTTP/1.1 and HTTP/2 as needed. tcp configures the listener to be a tcp proxy 
     */
    constructor(name, port, protocol) { 
        
        ListenerCreate.initialize(this, name, port, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, port, protocol) { 
        obj['name'] = name;
        obj['port'] = port;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>ListenerCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListenerCreate} obj Optional instance to populate.
     * @return {module:model/ListenerCreate} The populated <code>ListenerCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListenerCreate();

            if (data.hasOwnProperty('domain_keys')) {
                obj['domain_keys'] = ApiClient.convertToType(data['domain_keys'], ['String']);
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('tracing_config')) {
                obj['tracing_config'] = TracingConfig.constructFromObject(data['tracing_config']);
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListenerCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListenerCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListenerCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domain_keys'])) {
            throw new Error("Expected the field `domain_keys` to be an array in the JSON data but got " + data['domain_keys']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // validate the optional field `tracing_config`
        if (data['tracing_config']) { // data not null
          TracingConfig.validateJSON(data['tracing_config']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}

ListenerCreate.RequiredProperties = ["name", "port", "protocol"];

/**
 * @member {Array.<String>} domain_keys
 */
ListenerCreate.prototype['domain_keys'] = undefined;

/**
 * the interface this listener should bind to.
 * @member {String} ip
 */
ListenerCreate.prototype['ip'] = undefined;

/**
 * @member {String} name
 */
ListenerCreate.prototype['name'] = undefined;

/**
 * the port this listener should bind to.
 * @member {Number} port
 */
ListenerCreate.prototype['port'] = undefined;

/**
 * the protocol this listener will handle. http and http2 configure the listener to only process requests of that type. http_auto will adapt to HTTP/1.1 and HTTP/2 as needed. tcp configures the listener to be a tcp proxy 
 * @member {module:model/ListenerCreate.ProtocolEnum} protocol
 */
ListenerCreate.prototype['protocol'] = undefined;

/**
 * @member {module:model/TracingConfig} tracing_config
 */
ListenerCreate.prototype['tracing_config'] = undefined;

/**
 * @member {String} zone_key
 */
ListenerCreate.prototype['zone_key'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
ListenerCreate['ProtocolEnum'] = {

    /**
     * value: "http"
     * @const
     */
    "http": "http",

    /**
     * value: "http2"
     * @const
     */
    "http2": "http2",

    /**
     * value: "http_auto"
     * @const
     */
    "http_auto": "http_auto",

    /**
     * value: "tcp"
     * @const
     */
    "tcp": "tcp"
};



export default ListenerCreate;

