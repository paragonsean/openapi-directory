/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HeaderConstraint model module.
 * @module model/HeaderConstraint
 * @version 1.0
 */
class HeaderConstraint {
    /**
     * Constructs a new <code>HeaderConstraint</code>.
     * Indicates that a request&#39;s headers should meet some requirement before being selected for a rewrite. Must have zore or one elements. 
     * @alias module:model/HeaderConstraint
     * @param name {String} The header that is being checked. This must match the regexp \"^[0-9a-zA-Z-]+$\". This is checked in a case insensitive manner. 
     */
    constructor(name) { 
        
        HeaderConstraint.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>HeaderConstraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HeaderConstraint} obj Optional instance to populate.
     * @return {module:model/HeaderConstraint} The populated <code>HeaderConstraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HeaderConstraint();

            if (data.hasOwnProperty('case_sensitive')) {
                obj['case_sensitive'] = ApiClient.convertToType(data['case_sensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('invert')) {
                obj['invert'] = ApiClient.convertToType(data['invert'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HeaderConstraint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HeaderConstraint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HeaderConstraint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

HeaderConstraint.RequiredProperties = ["name"];

/**
 * If set, the header value check will be case sensitive.
 * @member {Boolean} case_sensitive
 */
HeaderConstraint.prototype['case_sensitive'] = undefined;

/**
 * If set, the header constraint will succeed if the match described faile. 
 * @member {Boolean} invert
 */
HeaderConstraint.prototype['invert'] = undefined;

/**
 * The header that is being checked. This must match the regexp \"^[0-9a-zA-Z-]+$\". This is checked in a case insensitive manner. 
 * @member {String} name
 */
HeaderConstraint.prototype['name'] = undefined;

/**
 * If set the header's value will be compared to this. The default is to make case insensitive comparisons. 
 * @member {String} value
 */
HeaderConstraint.prototype['value'] = undefined;






export default HeaderConstraint;

