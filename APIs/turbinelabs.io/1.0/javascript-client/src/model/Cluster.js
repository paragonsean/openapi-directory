/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CircuitBreakers from './CircuitBreakers';
import ClusterCreate from './ClusterCreate';
import HealthCheck from './HealthCheck';
import Instance from './Instance';
import OutlierDetection from './OutlierDetection';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version 1.0
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * @alias module:model/Cluster
     * @implements module:model/ClusterCreate
     * @param name {String} 
     * @param zoneKey {String} 
     * @param checksum {String} 
     * @param clusterKey {String} 
     */
    constructor(name, zoneKey, checksum, clusterKey) { 
        ClusterCreate.initialize(this, name, zoneKey);
        Cluster.initialize(this, name, zoneKey, checksum, clusterKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, zoneKey, checksum, clusterKey) { 
        obj['name'] = name;
        obj['zone_key'] = zoneKey;
        obj['checksum'] = checksum;
        obj['cluster_key'] = clusterKey;
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();
            ClusterCreate.constructFromObject(data, obj);

            if (data.hasOwnProperty('circuit_breakers')) {
                obj['circuit_breakers'] = CircuitBreakers.constructFromObject(data['circuit_breakers']);
            }
            if (data.hasOwnProperty('health_checks')) {
                obj['health_checks'] = ApiClient.convertToType(data['health_checks'], [HealthCheck]);
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [Instance]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outlier_detection')) {
                obj['outlier_detection'] = OutlierDetection.constructFromObject(data['outlier_detection']);
            }
            if (data.hasOwnProperty('require_tls')) {
                obj['require_tls'] = ApiClient.convertToType(data['require_tls'], 'Boolean');
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('cluster_key')) {
                obj['cluster_key'] = ApiClient.convertToType(data['cluster_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cluster.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `circuit_breakers`
        if (data['circuit_breakers']) { // data not null
          CircuitBreakers.validateJSON(data['circuit_breakers']);
        }
        if (data['health_checks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['health_checks'])) {
                throw new Error("Expected the field `health_checks` to be an array in the JSON data but got " + data['health_checks']);
            }
            // validate the optional field `health_checks` (array)
            for (const item of data['health_checks']) {
                HealthCheck.validateJSON(item);
            };
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                Instance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `outlier_detection`
        if (data['outlier_detection']) { // data not null
          OutlierDetection.validateJSON(data['outlier_detection']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // ensure the json data is a string
        if (data['cluster_key'] && !(typeof data['cluster_key'] === 'string' || data['cluster_key'] instanceof String)) {
            throw new Error("Expected the field `cluster_key` to be a primitive type in the JSON string but got " + data['cluster_key']);
        }

        return true;
    }


}

Cluster.RequiredProperties = ["name", "zone_key", "checksum", "cluster_key"];

/**
 * @member {module:model/CircuitBreakers} circuit_breakers
 */
Cluster.prototype['circuit_breakers'] = undefined;

/**
 * @member {Array.<module:model/HealthCheck>} health_checks
 */
Cluster.prototype['health_checks'] = undefined;

/**
 * @member {Array.<module:model/Instance>} instances
 */
Cluster.prototype['instances'] = undefined;

/**
 * @member {String} name
 */
Cluster.prototype['name'] = undefined;

/**
 * @member {module:model/OutlierDetection} outlier_detection
 */
Cluster.prototype['outlier_detection'] = undefined;

/**
 * If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 
 * @member {Boolean} require_tls
 */
Cluster.prototype['require_tls'] = undefined;

/**
 * @member {String} zone_key
 */
Cluster.prototype['zone_key'] = undefined;

/**
 * @member {String} checksum
 */
Cluster.prototype['checksum'] = undefined;

/**
 * @member {String} cluster_key
 */
Cluster.prototype['cluster_key'] = undefined;


// Implement ClusterCreate interface:
/**
 * @member {module:model/CircuitBreakers} circuit_breakers
 */
ClusterCreate.prototype['circuit_breakers'] = undefined;
/**
 * @member {Array.<module:model/HealthCheck>} health_checks
 */
ClusterCreate.prototype['health_checks'] = undefined;
/**
 * @member {Array.<module:model/Instance>} instances
 */
ClusterCreate.prototype['instances'] = undefined;
/**
 * @member {String} name
 */
ClusterCreate.prototype['name'] = undefined;
/**
 * @member {module:model/OutlierDetection} outlier_detection
 */
ClusterCreate.prototype['outlier_detection'] = undefined;
/**
 * If set, requests to this collection of hosts will be made via HTTPS. At this time neither certificate validation and certificate pinning are supported for proxy clients of this cluster. 
 * @member {Boolean} require_tls
 */
ClusterCreate.prototype['require_tls'] = undefined;
/**
 * @member {String} zone_key
 */
ClusterCreate.prototype['zone_key'] = undefined;




export default Cluster;

