/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CORSConfig from './CORSConfig';
import DomainCreate from './DomainCreate';
import Redirect from './Redirect';
import SSLConfig from './SSLConfig';

/**
 * The Domain model module.
 * @module model/Domain
 * @version 1.0
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * @alias module:model/Domain
     * @implements module:model/DomainCreate
     * @param checksum {String} 
     * @param domainKey {String} 
     * @param name {String} 
     * @param port {Number} 
     * @param zoneKey {String} 
     */
    constructor(checksum, domainKey, name, port, zoneKey) { 
        DomainCreate.initialize(this, name, port, zoneKey);
        Domain.initialize(this, checksum, domainKey, name, port, zoneKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, checksum, domainKey, name, port, zoneKey) { 
        obj['checksum'] = checksum;
        obj['domain_key'] = domainKey;
        obj['name'] = name;
        obj['port'] = port;
        obj['zone_key'] = zoneKey;
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();
            DomainCreate.constructFromObject(data, obj);

            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = ApiClient.convertToType(data['checksum'], 'String');
            }
            if (data.hasOwnProperty('cors_config')) {
                obj['cors_config'] = CORSConfig.constructFromObject(data['cors_config']);
            }
            if (data.hasOwnProperty('domain_key')) {
                obj['domain_key'] = ApiClient.convertToType(data['domain_key'], 'String');
            }
            if (data.hasOwnProperty('force_https')) {
                obj['force_https'] = ApiClient.convertToType(data['force_https'], 'Boolean');
            }
            if (data.hasOwnProperty('gzip_enabled')) {
                obj['gzip_enabled'] = ApiClient.convertToType(data['gzip_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('redirects')) {
                obj['redirects'] = ApiClient.convertToType(data['redirects'], [Redirect]);
            }
            if (data.hasOwnProperty('ssl_config')) {
                obj['ssl_config'] = SSLConfig.constructFromObject(data['ssl_config']);
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domain</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Domain.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['checksum'] && !(typeof data['checksum'] === 'string' || data['checksum'] instanceof String)) {
            throw new Error("Expected the field `checksum` to be a primitive type in the JSON string but got " + data['checksum']);
        }
        // validate the optional field `cors_config`
        if (data['cors_config']) { // data not null
          CORSConfig.validateJSON(data['cors_config']);
        }
        // ensure the json data is a string
        if (data['domain_key'] && !(typeof data['domain_key'] === 'string' || data['domain_key'] instanceof String)) {
            throw new Error("Expected the field `domain_key` to be a primitive type in the JSON string but got " + data['domain_key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['redirects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['redirects'])) {
                throw new Error("Expected the field `redirects` to be an array in the JSON data but got " + data['redirects']);
            }
            // validate the optional field `redirects` (array)
            for (const item of data['redirects']) {
                Redirect.validateJSON(item);
            };
        }
        // validate the optional field `ssl_config`
        if (data['ssl_config']) { // data not null
          SSLConfig.validateJSON(data['ssl_config']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}

Domain.RequiredProperties = ["checksum", "domain_key", "name", "port", "zone_key"];

/**
 * A set of alternate names that this Domain may be referenced by. May start ('*.') or end ('.*') with a wildcard. 
 * @member {Array.<String>} aliases
 */
Domain.prototype['aliases'] = undefined;

/**
 * @member {String} checksum
 */
Domain.prototype['checksum'] = undefined;

/**
 * @member {module:model/CORSConfig} cors_config
 */
Domain.prototype['cors_config'] = undefined;

/**
 * @member {String} domain_key
 */
Domain.prototype['domain_key'] = undefined;

/**
 * If set to true, requests must use TLS. If a request is not using TLS, (as determined by the scheme or the presence of X-Forwarded-Proto header), a 301 redirect will be sent telling the client to use HTTPS. 
 * @member {Boolean} force_https
 */
Domain.prototype['force_https'] = undefined;

/**
 * Experimental: if set to true will enable gzip compression on data that passes trough this domain
 * @member {Boolean} gzip_enabled
 */
Domain.prototype['gzip_enabled'] = undefined;

/**
 * @member {String} name
 */
Domain.prototype['name'] = undefined;

/**
 * @member {Number} port
 */
Domain.prototype['port'] = undefined;

/**
 * @member {Array.<module:model/Redirect>} redirects
 */
Domain.prototype['redirects'] = undefined;

/**
 * @member {module:model/SSLConfig} ssl_config
 */
Domain.prototype['ssl_config'] = undefined;

/**
 * @member {String} zone_key
 */
Domain.prototype['zone_key'] = undefined;


// Implement DomainCreate interface:
/**
 * A set of alternate names that this Domain may be referenced by. May start ('*.') or end ('.*') with a wildcard. 
 * @member {Array.<String>} aliases
 */
DomainCreate.prototype['aliases'] = undefined;
/**
 * @member {String} checksum
 */
DomainCreate.prototype['checksum'] = undefined;
/**
 * @member {module:model/CORSConfig} cors_config
 */
DomainCreate.prototype['cors_config'] = undefined;
/**
 * @member {String} domain_key
 */
DomainCreate.prototype['domain_key'] = undefined;
/**
 * If set to true, requests must use TLS. If a request is not using TLS, (as determined by the scheme or the presence of X-Forwarded-Proto header), a 301 redirect will be sent telling the client to use HTTPS. 
 * @member {Boolean} force_https
 */
DomainCreate.prototype['force_https'] = undefined;
/**
 * Experimental: if set to true will enable gzip compression on data that passes trough this domain
 * @member {Boolean} gzip_enabled
 */
DomainCreate.prototype['gzip_enabled'] = undefined;
/**
 * @member {String} name
 */
DomainCreate.prototype['name'] = undefined;
/**
 * @member {Number} port
 */
DomainCreate.prototype['port'] = undefined;
/**
 * @member {Array.<module:model/Redirect>} redirects
 */
DomainCreate.prototype['redirects'] = undefined;
/**
 * @member {module:model/SSLConfig} ssl_config
 */
DomainCreate.prototype['ssl_config'] = undefined;
/**
 * @member {String} zone_key
 */
DomainCreate.prototype['zone_key'] = undefined;




export default Domain;

