/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DomainFilter model module.
 * @module model/DomainFilter
 * @version 1.0
 */
class DomainFilter {
    /**
     * Constructs a new <code>DomainFilter</code>.
     * @alias module:model/DomainFilter
     */
    constructor() { 
        
        DomainFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DomainFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainFilter} obj Optional instance to populate.
     * @return {module:model/DomainFilter} The populated <code>DomainFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainFilter();

            if (data.hasOwnProperty('domain_key')) {
                obj['domain_key'] = ApiClient.convertToType(data['domain_key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('proxy_keys')) {
                obj['proxy_keys'] = ApiClient.convertToType(data['proxy_keys'], ['String']);
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain_key'] && !(typeof data['domain_key'] === 'string' || data['domain_key'] instanceof String)) {
            throw new Error("Expected the field `domain_key` to be a primitive type in the JSON string but got " + data['domain_key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['proxy_keys'])) {
            throw new Error("Expected the field `proxy_keys` to be an array in the JSON data but got " + data['proxy_keys']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}



/**
 * @member {String} domain_key
 */
DomainFilter.prototype['domain_key'] = undefined;

/**
 * @member {String} name
 */
DomainFilter.prototype['name'] = undefined;

/**
 * matches Domains with a superset of the specified proxy_keys. A slice with a single value of \"-\" will produce Domains with no linked Proxies. 
 * @member {Array.<String>} proxy_keys
 */
DomainFilter.prototype['proxy_keys'] = undefined;

/**
 * @member {String} zone_key
 */
DomainFilter.prototype['zone_key'] = undefined;






export default DomainFilter;

