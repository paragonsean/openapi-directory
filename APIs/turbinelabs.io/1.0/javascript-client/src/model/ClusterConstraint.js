/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadatum from './Metadatum';
import ResponseData from './ResponseData';

/**
 * The ClusterConstraint model module.
 * @module model/ClusterConstraint
 * @version 1.0
 */
class ClusterConstraint {
    /**
     * Constructs a new <code>ClusterConstraint</code>.
     * @alias module:model/ClusterConstraint
     */
    constructor() { 
        
        ClusterConstraint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterConstraint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterConstraint} obj Optional instance to populate.
     * @return {module:model/ClusterConstraint} The populated <code>ClusterConstraint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterConstraint();

            if (data.hasOwnProperty('cluster_key')) {
                obj['cluster_key'] = ApiClient.convertToType(data['cluster_key'], 'String');
            }
            if (data.hasOwnProperty('constraint_key')) {
                obj['constraint_key'] = ApiClient.convertToType(data['constraint_key'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadatum]);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [Metadatum]);
            }
            if (data.hasOwnProperty('response_data')) {
                obj['response_data'] = ApiClient.convertToType(data['response_data'], ResponseData);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterConstraint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterConstraint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cluster_key'] && !(typeof data['cluster_key'] === 'string' || data['cluster_key'] instanceof String)) {
            throw new Error("Expected the field `cluster_key` to be a primitive type in the JSON string but got " + data['cluster_key']);
        }
        // ensure the json data is a string
        if (data['constraint_key'] && !(typeof data['constraint_key'] === 'string' || data['constraint_key'] instanceof String)) {
            throw new Error("Expected the field `constraint_key` to be a primitive type in the JSON string but got " + data['constraint_key']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadatum.validateJSON(item);
            };
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                Metadatum.validateJSON(item);
            };
        }
        // validate the optional field `response_data`
        if (data['response_data']) { // data not null
          ResponseData.validateJSON(data['response_data']);
        }

        return true;
    }


}



/**
 * @member {String} cluster_key
 */
ClusterConstraint.prototype['cluster_key'] = undefined;

/**
 * @member {String} constraint_key
 */
ClusterConstraint.prototype['constraint_key'] = undefined;

/**
 * @member {Array.<module:model/Metadatum>} metadata
 */
ClusterConstraint.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Metadatum>} properties
 */
ClusterConstraint.prototype['properties'] = undefined;

/**
 * When a request is served by a cluster selected by this constraint annotate the response with the information specified within this ResponseData object. It's possible that multiple response data configurations will apply; if that's the case then the values from ClusterConstarint takes precedence over those from a Route or SharedRules object. 
 * @member {module:model/ResponseData} response_data
 */
ClusterConstraint.prototype['response_data'] = undefined;

/**
 * @member {Number} weight
 */
ClusterConstraint.prototype['weight'] = undefined;






export default ClusterConstraint;

