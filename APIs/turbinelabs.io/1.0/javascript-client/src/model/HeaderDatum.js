/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HeaderDatum model module.
 * @module model/HeaderDatum
 * @version 1.0
 */
class HeaderDatum {
    /**
     * Constructs a new <code>HeaderDatum</code>.
     * This describes a HTTP header that should be attached to requests. 
     * @alias module:model/HeaderDatum
     */
    constructor() { 
        
        HeaderDatum.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HeaderDatum</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HeaderDatum} obj Optional instance to populate.
     * @return {module:model/HeaderDatum} The populated <code>HeaderDatum</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HeaderDatum();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('value_is_literal')) {
                obj['value_is_literal'] = ApiClient.convertToType(data['value_is_literal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HeaderDatum</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HeaderDatum</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The name of the header that will be attached to the response sent. This is case insensitive. 
 * @member {String} name
 */
HeaderDatum.prototype['name'] = undefined;

/**
 * A literal value to send as the header value or a reference to some metadatum value set on the Cluster Intsance that handles a specific request. If this value is empty after looking up an Instance metadatum value no header will be sent. 
 * @member {String} value
 */
HeaderDatum.prototype['value'] = undefined;

/**
 * If true then the value attribute is treated as a literal and no attempt to resolve instance metadatum to find a value. 
 * @member {Boolean} value_is_literal
 */
HeaderDatum.prototype['value_is_literal'] = undefined;






export default HeaderDatum;

