/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadatum from './Metadatum';

/**
 * The HTTPHealthCheck model module.
 * @module model/HTTPHealthCheck
 * @version 1.0
 */
class HTTPHealthCheck {
    /**
     * Constructs a new <code>HTTPHealthCheck</code>.
     * @alias module:model/HTTPHealthCheck
     */
    constructor() { 
        
        HTTPHealthCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HTTPHealthCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HTTPHealthCheck} obj Optional instance to populate.
     * @return {module:model/HTTPHealthCheck} The populated <code>HTTPHealthCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HTTPHealthCheck();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('request_headers_to_add')) {
                obj['request_headers_to_add'] = ApiClient.convertToType(data['request_headers_to_add'], Array);
            }
            if (data.hasOwnProperty('service_name')) {
                obj['service_name'] = ApiClient.convertToType(data['service_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HTTPHealthCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HTTPHealthCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        if (data['request_headers_to_add']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['request_headers_to_add'])) {
                throw new Error("Expected the field `request_headers_to_add` to be an array in the JSON data but got " + data['request_headers_to_add']);
            }
            // validate the optional field `request_headers_to_add` (array)
            for (const item of data['request_headers_to_add']) {
                Metadatum.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['service_name'] && !(typeof data['service_name'] === 'string' || data['service_name'] instanceof String)) {
            throw new Error("Expected the field `service_name` to be a primitive type in the JSON string but got " + data['service_name']);
        }

        return true;
    }


}



/**
 * The value of the host header in the HTTP health check request. If left empty, the name of the cluster being health checked will be used. 
 * @member {String} host
 */
HTTPHealthCheck.prototype['host'] = undefined;

/**
 * Specifies the HTTP path that will be requested during health checking. 
 * @member {String} path
 */
HTTPHealthCheck.prototype['path'] = undefined;

/**
 * Specifies a list of HTTP headers that should be added to each request sent to the health checked cluster. 
 * @member {Array.<module:model/Metadatum>} request_headers_to_add
 */
HTTPHealthCheck.prototype['request_headers_to_add'] = undefined;

/**
 * An optional service name parameter which is used to validate the identity of the health checked cluster. 
 * @member {String} service_name
 */
HTTPHealthCheck.prototype['service_name'] = undefined;






export default HTTPHealthCheck;

