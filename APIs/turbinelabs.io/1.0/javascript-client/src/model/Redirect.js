/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HeaderConstraint from './HeaderConstraint';

/**
 * The Redirect model module.
 * @module model/Redirect
 * @version 1.0
 */
class Redirect {
    /**
     * Constructs a new <code>Redirect</code>.
     * Specifies how a URL within a domain should be rewritten when requested. 
     * @alias module:model/Redirect
     * @param from {String} A regexp that will be matched against the URL (not including the host/port). May include capture groups for reference in \"to.\"
     * @param name {String} A unique (to this Domain) name for the Redirect. Must match the regexp \"^[0-9a-zA-Z-]+$\"
     * @param redirectType {module:model/Redirect.RedirectTypeEnum} How this redirect should be presented via HTTP response code.
     * @param to {String} The new URL that will be constructed from the request. Capture groups from \"from\" may be referenced as \"$&lt;group number&gt;\" which begins at 1.
     */
    constructor(from, name, redirectType, to) { 
        
        Redirect.initialize(this, from, name, redirectType, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, name, redirectType, to) { 
        obj['from'] = from;
        obj['name'] = name;
        obj['redirect_type'] = redirectType;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>Redirect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Redirect} obj Optional instance to populate.
     * @return {module:model/Redirect} The populated <code>Redirect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Redirect();

            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('header_constraints')) {
                obj['header_constraints'] = ApiClient.convertToType(data['header_constraints'], [HeaderConstraint]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('redirect_type')) {
                obj['redirect_type'] = ApiClient.convertToType(data['redirect_type'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Redirect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Redirect</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Redirect.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        if (data['header_constraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['header_constraints'])) {
                throw new Error("Expected the field `header_constraints` to be an array in the JSON data but got " + data['header_constraints']);
            }
            // validate the optional field `header_constraints` (array)
            for (const item of data['header_constraints']) {
                HeaderConstraint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['redirect_type'] && !(typeof data['redirect_type'] === 'string' || data['redirect_type'] instanceof String)) {
            throw new Error("Expected the field `redirect_type` to be a primitive type in the JSON string but got " + data['redirect_type']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}

Redirect.RequiredProperties = ["from", "name", "redirect_type", "to"];

/**
 * A regexp that will be matched against the URL (not including the host/port). May include capture groups for reference in \"to.\"
 * @member {String} from
 */
Redirect.prototype['from'] = undefined;

/**
 * @member {Array.<module:model/HeaderConstraint>} header_constraints
 */
Redirect.prototype['header_constraints'] = undefined;

/**
 * A unique (to this Domain) name for the Redirect. Must match the regexp \"^[0-9a-zA-Z-]+$\"
 * @member {String} name
 */
Redirect.prototype['name'] = undefined;

/**
 * How this redirect should be presented via HTTP response code.
 * @member {module:model/Redirect.RedirectTypeEnum} redirect_type
 */
Redirect.prototype['redirect_type'] = undefined;

/**
 * The new URL that will be constructed from the request. Capture groups from \"from\" may be referenced as \"$&lt;group number&gt;\" which begins at 1.
 * @member {String} to
 */
Redirect.prototype['to'] = undefined;





/**
 * Allowed values for the <code>redirect_type</code> property.
 * @enum {String}
 * @readonly
 */
Redirect['RedirectTypeEnum'] = {

    /**
     * value: "permanent"
     * @const
     */
    "permanent": "permanent",

    /**
     * value: "temporary"
     * @const
     */
    "temporary": "temporary"
};



export default Redirect;

