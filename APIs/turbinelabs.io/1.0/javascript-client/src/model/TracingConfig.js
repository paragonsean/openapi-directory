/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TracingConfig model module.
 * @module model/TracingConfig
 * @version 1.0
 */
class TracingConfig {
    /**
     * Constructs a new <code>TracingConfig</code>.
     * Configures tracing operations to be performed on the given listener 
     * @alias module:model/TracingConfig
     */
    constructor() { 
        
        TracingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TracingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TracingConfig} obj Optional instance to populate.
     * @return {module:model/TracingConfig} The populated <code>TracingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TracingConfig();

            if (data.hasOwnProperty('ingress')) {
                obj['ingress'] = ApiClient.convertToType(data['ingress'], 'Boolean');
            }
            if (data.hasOwnProperty('request_headers_for_tags')) {
                obj['request_headers_for_tags'] = ApiClient.convertToType(data['request_headers_for_tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TracingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TracingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['request_headers_for_tags'])) {
            throw new Error("Expected the field `request_headers_for_tags` to be an array in the JSON data but got " + data['request_headers_for_tags']);
        }

        return true;
    }


}



/**
 * Determines whether spans sent from this listener should be treated as ingress or egress operations. 
 * @member {Boolean} ingress
 */
TracingConfig.prototype['ingress'] = undefined;

/**
 * the headers specified here will be added to the generated spans as annotations 
 * @member {Array.<String>} request_headers_for_tags
 */
TracingConfig.prototype['request_headers_for_tags'] = undefined;






export default TracingConfig;

