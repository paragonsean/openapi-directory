/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadatum from './Metadatum';

/**
 * The Match model module.
 * @module model/Match
 * @version 1.0
 */
class Match {
    /**
     * Constructs a new <code>Match</code>.
     * Represents a mapping of request attributes to constraints on a cluster using different matching schemes.  Certain combinations of &#x60;kind&#x60; and &#x60;behavior&#x60; are not allowed   | kind | behavior |   | ---- | -------- |   | query | regex |   | query | range |   | cookie | range | 
     * @alias module:model/Match
     */
    constructor() { 
        
        Match.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Match</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Match} obj Optional instance to populate.
     * @return {module:model/Match} The populated <code>Match</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Match();

            if (data.hasOwnProperty('behavior')) {
                obj['behavior'] = ApiClient.convertToType(data['behavior'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], Metadatum);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], Metadatum);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Match</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Match</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['behavior'] && !(typeof data['behavior'] === 'string' || data['behavior'] instanceof String)) {
            throw new Error("Expected the field `behavior` to be a primitive type in the JSON string but got " + data['behavior']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          Metadatum.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
          Metadatum.validateJSON(data['to']);
        }

        return true;
    }


}



/**
 * Defines how a request attribute should be matched. If not specified, defaults to `exact`. Valid values are   * exact   * regex   * range   * prefix   * suffix 
 * @member {String} behavior
 */
Match.prototype['behavior'] = undefined;

/**
 * The request attribute key and value to match. `key` must always be defined while `value` can be unspecified (only if behavior is set to `exact`) to indicate that all values should be matched. If to.value is also unspecified, the matched value of the request will be used as a constraint on the destination cluster.  \\# Behavior   * `regex` if To.Value is unspecified, `value` must contain one and   only one subgroup. Otherwise, `value` must not be empty.   * `range` `value` must be specified and must be of the format   `[start_integer, end_integer)`. Start and end must be valid integer   values and `end_integer` must be greater than `start_integer`.   * `prefix`/`suffix` `value` must be specified  \\# Kind   * `cookie` does not support `range` behavior   * `query` does not support `regex` behavior 
 * @member {module:model/Metadatum} from
 */
Match.prototype['from'] = undefined;

/**
 * Defines the attribute by which a request should be matched on. Valid values are   * cookie   * header   * query (for query parameter) 
 * @member {String} kind
 */
Match.prototype['kind'] = undefined;

/**
 * The constraints on a cluster that a matched request should map to. If to.key is specified and to.value is not, the matched from.value will be used as a metadata constraint on instances in the destination cluster, keyed by to.key. If using `regex` behavior with multiple subgroups in from.value, variables `$1` through `$n`, where n is the number of subgroups in the matching regex, can be used to interpolate captured matches in to.value. 
 * @member {module:model/Metadatum} to
 */
Match.prototype['to'] = undefined;






export default Match;

