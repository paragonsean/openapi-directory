/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertKeyPathPair from './CertKeyPathPair';

/**
 * The SSLConfig model module.
 * @module model/SSLConfig
 * @version 1.0
 */
class SSLConfig {
    /**
     * Constructs a new <code>SSLConfig</code>.
     * Experimental: Specifies whether a domain should support SSL/TLS connections from clients.  If not set the proxy will expect unencrypted HTTP traffic. 
     * @alias module:model/SSLConfig
     * @param certKeyPairs {Array.<module:model/CertKeyPathPair>} SSLConfig must have one cert_key_pairs entry specified.
     */
    constructor(certKeyPairs) { 
        
        SSLConfig.initialize(this, certKeyPairs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certKeyPairs) { 
        obj['cert_key_pairs'] = certKeyPairs;
    }

    /**
     * Constructs a <code>SSLConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SSLConfig} obj Optional instance to populate.
     * @return {module:model/SSLConfig} The populated <code>SSLConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SSLConfig();

            if (data.hasOwnProperty('cert_key_pairs')) {
                obj['cert_key_pairs'] = ApiClient.convertToType(data['cert_key_pairs'], [CertKeyPathPair]);
            }
            if (data.hasOwnProperty('cipher_filter')) {
                obj['cipher_filter'] = ApiClient.convertToType(data['cipher_filter'], 'String');
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = ApiClient.convertToType(data['protocols'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SSLConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SSLConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SSLConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cert_key_pairs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cert_key_pairs'])) {
                throw new Error("Expected the field `cert_key_pairs` to be an array in the JSON data but got " + data['cert_key_pairs']);
            }
            // validate the optional field `cert_key_pairs` (array)
            for (const item of data['cert_key_pairs']) {
                CertKeyPathPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['cipher_filter'] && !(typeof data['cipher_filter'] === 'string' || data['cipher_filter'] instanceof String)) {
            throw new Error("Expected the field `cipher_filter` to be a primitive type in the JSON string but got " + data['cipher_filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocols'])) {
            throw new Error("Expected the field `protocols` to be an array in the JSON data but got " + data['protocols']);
        }

        return true;
    }


}

SSLConfig.RequiredProperties = ["cert_key_pairs"];

/**
 * SSLConfig must have one cert_key_pairs entry specified.
 * @member {Array.<module:model/CertKeyPathPair>} cert_key_pairs
 */
SSLConfig.prototype['cert_key_pairs'] = undefined;

/**
 * An OpenSSL compatible filter string indicating the ciphers acceptable for this proxy to use while communicating with clients. The default value is EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH. For more information see https://wiki.openssl.org/index.php/Manual:Ciphers(1) 
 * @member {String} cipher_filter
 */
SSLConfig.prototype['cipher_filter'] = undefined;

/**
 * A list of acceptable SSL/TLS protocol. The default values are TLSv1, TLSv1.1, TLSv1.2. Additional valid values are SSLv2 and SSLv3. 
 * @member {Array.<String>} protocols
 */
SSLConfig.prototype['protocols'] = undefined;






export default SSLConfig;

