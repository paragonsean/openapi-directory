/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CohortSeed model module.
 * @module model/CohortSeed
 * @version 1.0
 */
class CohortSeed {
    /**
     * Constructs a new <code>CohortSeed</code>.
     * @alias module:model/CohortSeed
     */
    constructor() { 
        
        CohortSeed.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CohortSeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CohortSeed} obj Optional instance to populate.
     * @return {module:model/CohortSeed} The populated <code>CohortSeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CohortSeed();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('use_zero_value_seed')) {
                obj['use_zero_value_seed'] = ApiClient.convertToType(data['use_zero_value_seed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CohortSeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CohortSeed</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the cookie, the header field, or the query argument to be checked for a cohort seed value. 
 * @member {String} name
 */
CohortSeed.prototype['name'] = undefined;

/**
 * Where a request's cohort seed will be drawn from.
 * @member {module:model/CohortSeed.TypeEnum} type
 */
CohortSeed.prototype['type'] = undefined;

/**
 * If true, requests with a seed source which resolves to an empty value will still be grouped and routed consistently. This means a misspelled or missing seed source on a request will sort all such traffic into a single backend. This could result in all traffic being assigned to a backend intended for only a small percentage of traffic. Use with caution. 
 * @member {Boolean} use_zero_value_seed
 */
CohortSeed.prototype['use_zero_value_seed'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CohortSeed['TypeEnum'] = {

    /**
     * value: "header"
     * @const
     */
    "header": "header",

    /**
     * value: "cookie"
     * @const
     */
    "cookie": "cookie",

    /**
     * value: "query"
     * @const
     */
    "query": "query"
};



export default CohortSeed;

