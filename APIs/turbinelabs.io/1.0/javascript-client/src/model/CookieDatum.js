/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CookieDatum model module.
 * @module model/CookieDatum
 * @version 1.0
 */
class CookieDatum {
    /**
     * Constructs a new <code>CookieDatum</code>.
     * This describes a cookie that should be set in response to a HTTP request. 
     * @alias module:model/CookieDatum
     */
    constructor() { 
        
        CookieDatum.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CookieDatum</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CookieDatum} obj Optional instance to populate.
     * @return {module:model/CookieDatum} The populated <code>CookieDatum</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CookieDatum();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('expires_in_sec')) {
                obj['expires_in_sec'] = ApiClient.convertToType(data['expires_in_sec'], 'Number');
            }
            if (data.hasOwnProperty('http_only')) {
                obj['http_only'] = ApiClient.convertToType(data['http_only'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('same_site')) {
                obj['same_site'] = ApiClient.convertToType(data['same_site'], 'String');
            }
            if (data.hasOwnProperty('secure')) {
                obj['secure'] = ApiClient.convertToType(data['secure'], 'Boolean');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('value_is_literal')) {
                obj['value_is_literal'] = ApiClient.convertToType(data['value_is_literal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CookieDatum</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CookieDatum</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['same_site'] && !(typeof data['same_site'] === 'string' || data['same_site'] instanceof String)) {
            throw new Error("Expected the field `same_site` to be a primitive type in the JSON string but got " + data['same_site']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Specifies the hosts to hich a cookie will be sent. Maps directly to a cookie's 'Domain' attribute. 
 * @member {String} domain
 */
CookieDatum.prototype['domain'] = undefined;

/**
 * This indicates how long a cookie will be valid, in seconds. If not set the default is to provide no expiration information. If set to 0 the cookie will have an 'Expires' attribute set to 'Mon, 1 Jan 0001 12:00:00 UTC'. For values greater than 0 the cookie's 'Max-Age' attribute will be set to that value. 
 * @member {Number} expires_in_sec
 */
CookieDatum.prototype['expires_in_sec'] = undefined;

/**
 * If set the cookie value will not be accessible via Document.cookie. Maps directly to 'HttpOnly' attribute. 
 * @member {Boolean} http_only
 */
CookieDatum.prototype['http_only'] = undefined;

/**
 * The name of the cookie that will be attached to the response sent.
 * @member {String} name
 */
CookieDatum.prototype['name'] = undefined;

/**
 * Specifies the path a cookie will be associated with. Maps directly to the 'Path' attribute. 
 * @member {String} path
 */
CookieDatum.prototype['path'] = undefined;

/**
 * Allows assertions how a cookie should behave wend making cross-site requests. Maps directly to 'SameSite' attribute. If unset no guidance will be included in the cookie. 
 * @member {module:model/CookieDatum.SameSiteEnum} same_site
 */
CookieDatum.prototype['same_site'] = undefined;

/**
 * If set the cookie will only be sent on subsequent requests when accessing a server via HTTPS. Maps directly to 'Secure' attribute. 
 * @member {Boolean} secure
 */
CookieDatum.prototype['secure'] = undefined;

/**
 * A literal value to send as the cookie value or a reference to some metadatum value set on the Cluster Intsance that handles a specific request. 
 * @member {String} value
 */
CookieDatum.prototype['value'] = undefined;

/**
 * If true then the value attribute is treated as a literal and no attempt to resolve to a server metadatum. 
 * @member {Boolean} value_is_literal
 */
CookieDatum.prototype['value_is_literal'] = undefined;





/**
 * Allowed values for the <code>same_site</code> property.
 * @enum {String}
 * @readonly
 */
CookieDatum['SameSiteEnum'] = {

    /**
     * value: "Strict"
     * @const
     */
    "Strict": "Strict",

    /**
     * value: "Lax"
     * @const
     */
    "Lax": "Lax"
};



export default CookieDatum;

