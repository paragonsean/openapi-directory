/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTTPHealthCheck from './HTTPHealthCheck';
import TCPHealthCheck from './TCPHealthCheck';

/**
 * The HealthCheckHealthChecker model module.
 * @module model/HealthCheckHealthChecker
 * @version 1.0
 */
class HealthCheckHealthChecker {
    /**
     * Constructs a new <code>HealthCheckHealthChecker</code>.
     * Defines the type of health checker to use. Only a single health checker can be defined per HealthCheck. 
     * @alias module:model/HealthCheckHealthChecker
     */
    constructor() { 
        
        HealthCheckHealthChecker.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthCheckHealthChecker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthCheckHealthChecker} obj Optional instance to populate.
     * @return {module:model/HealthCheckHealthChecker} The populated <code>HealthCheckHealthChecker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthCheckHealthChecker();

            if (data.hasOwnProperty('http_health_check')) {
                obj['http_health_check'] = HTTPHealthCheck.constructFromObject(data['http_health_check']);
            }
            if (data.hasOwnProperty('tcp_health_check')) {
                obj['tcp_health_check'] = TCPHealthCheck.constructFromObject(data['tcp_health_check']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthCheckHealthChecker</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthCheckHealthChecker</code>.
     */
    static validateJSON(data) {
        // validate the optional field `http_health_check`
        if (data['http_health_check']) { // data not null
          HTTPHealthCheck.validateJSON(data['http_health_check']);
        }
        // validate the optional field `tcp_health_check`
        if (data['tcp_health_check']) { // data not null
          TCPHealthCheck.validateJSON(data['tcp_health_check']);
        }

        return true;
    }


}



/**
 * @member {module:model/HTTPHealthCheck} http_health_check
 */
HealthCheckHealthChecker.prototype['http_health_check'] = undefined;

/**
 * @member {module:model/TCPHealthCheck} tcp_health_check
 */
HealthCheckHealthChecker.prototype['tcp_health_check'] = undefined;






export default HealthCheckHealthChecker;

