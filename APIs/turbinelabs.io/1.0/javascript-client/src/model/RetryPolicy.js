/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetryPolicy model module.
 * @module model/RetryPolicy
 * @version 1.0
 */
class RetryPolicy {
    /**
     * Constructs a new <code>RetryPolicy</code>.
     * Number of times to retry a request and how long to wait before timing out.
     * @alias module:model/RetryPolicy
     */
    constructor() { 
        
        RetryPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetryPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetryPolicy} obj Optional instance to populate.
     * @return {module:model/RetryPolicy} The populated <code>RetryPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetryPolicy();

            if (data.hasOwnProperty('num_retries')) {
                obj['num_retries'] = ApiClient.convertToType(data['num_retries'], 'Number');
            }
            if (data.hasOwnProperty('per_try_timeout_msec')) {
                obj['per_try_timeout_msec'] = ApiClient.convertToType(data['per_try_timeout_msec'], 'Number');
            }
            if (data.hasOwnProperty('timeout_msec')) {
                obj['timeout_msec'] = ApiClient.convertToType(data['timeout_msec'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetryPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetryPolicy</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Number of times to retry an upstream request. Note that the initial connection attempt is not included in this number, hence 0 means initial attempt and no retries, and 1 means initial attempt plus one retry. 
 * @member {Number} num_retries
 */
RetryPolicy.prototype['num_retries'] = undefined;

/**
 * Time limit in milliseconds for a single attempt.
 * @member {Number} per_try_timeout_msec
 */
RetryPolicy.prototype['per_try_timeout_msec'] = undefined;

/**
 * Total time limit in milliseconds for all attempts (including the initial attempt) 
 * @member {Number} timeout_msec
 */
RetryPolicy.prototype['timeout_msec'] = undefined;






export default RetryPolicy;

