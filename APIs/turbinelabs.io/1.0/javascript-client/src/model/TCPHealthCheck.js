/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TCPHealthCheck model module.
 * @module model/TCPHealthCheck
 * @version 1.0
 */
class TCPHealthCheck {
    /**
     * Constructs a new <code>TCPHealthCheck</code>.
     * @alias module:model/TCPHealthCheck
     */
    constructor() { 
        
        TCPHealthCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TCPHealthCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TCPHealthCheck} obj Optional instance to populate.
     * @return {module:model/TCPHealthCheck} The populated <code>TCPHealthCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TCPHealthCheck();

            if (data.hasOwnProperty('receive')) {
                obj['receive'] = ApiClient.convertToType(data['receive'], ['String']);
            }
            if (data.hasOwnProperty('send')) {
                obj['send'] = ApiClient.convertToType(data['send'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TCPHealthCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TCPHealthCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['receive'])) {
            throw new Error("Expected the field `receive` to be an array in the JSON data but got " + data['receive']);
        }
        // ensure the json data is a string
        if (data['send'] && !(typeof data['send'] === 'string' || data['send'] instanceof String)) {
            throw new Error("Expected the field `send` to be a primitive type in the JSON string but got " + data['send']);
        }

        return true;
    }


}



/**
 * An array of base64 encoded strings, each representing array of bytes that is expected in health check responses. When checking the response, \"fuzzy\" matching is performed such that each binary block must be found, and in the order specified, but not necessarily contiguously. 
 * @member {Array.<String>} receive
 */
TCPHealthCheck.prototype['receive'] = undefined;

/**
 * Base64 encoded string representing an array of bytes to be sent in health check requests. Leaving this field empty implies a connect-only health check. 
 * @member {String} send
 */
TCPHealthCheck.prototype['send'] = undefined;






export default TCPHealthCheck;

