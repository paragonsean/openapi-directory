/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangeEntry model module.
 * @module model/ChangeEntry
 * @version 1.0
 */
class ChangeEntry {
    /**
     * Constructs a new <code>ChangeEntry</code>.
     * @alias module:model/ChangeEntry
     */
    constructor() { 
        
        ChangeEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeEntry} obj Optional instance to populate.
     * @return {module:model/ChangeEntry} The populated <code>ChangeEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeEntry();

            if (data.hasOwnProperty('change_type')) {
                obj['change_type'] = ApiClient.convertToType(data['change_type'], 'String');
            }
            if (data.hasOwnProperty('object_key')) {
                obj['object_key'] = ApiClient.convertToType(data['object_key'], 'String');
            }
            if (data.hasOwnProperty('object_type')) {
                obj['object_type'] = ApiClient.convertToType(data['object_type'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['change_type'] && !(typeof data['change_type'] === 'string' || data['change_type'] instanceof String)) {
            throw new Error("Expected the field `change_type` to be a primitive type in the JSON string but got " + data['change_type']);
        }
        // ensure the json data is a string
        if (data['object_key'] && !(typeof data['object_key'] === 'string' || data['object_key'] instanceof String)) {
            throw new Error("Expected the field `object_key` to be a primitive type in the JSON string but got " + data['object_key']);
        }
        // ensure the json data is a string
        if (data['object_type'] && !(typeof data['object_type'] === 'string' || data['object_type'] instanceof String)) {
            throw new Error("Expected the field `object_type` to be a primitive type in the JSON string but got " + data['object_type']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}



/**
 * Whether the value was added or removed to the object.
 * @member {module:model/ChangeEntry.ChangeTypeEnum} change_type
 */
ChangeEntry.prototype['change_type'] = undefined;

/**
 * An ID uniquely identifying the object being changed.
 * @member {String} object_key
 */
ChangeEntry.prototype['object_key'] = undefined;

/**
 * The name of the object being being altered.
 * @member {module:model/ChangeEntry.ObjectTypeEnum} object_type
 */
ChangeEntry.prototype['object_type'] = undefined;

/**
 * A dot-separated / bracket-indexed path to the field changed on the object.
 * @member {String} path
 */
ChangeEntry.prototype['path'] = undefined;

/**
 * The value that has been added or removed to the object at the attribute path indicated in path. 
 * @member {String} value
 */
ChangeEntry.prototype['value'] = undefined;

/**
 * The zone this object is located in.
 * @member {String} zone_key
 */
ChangeEntry.prototype['zone_key'] = undefined;





/**
 * Allowed values for the <code>change_type</code> property.
 * @enum {String}
 * @readonly
 */
ChangeEntry['ChangeTypeEnum'] = {

    /**
     * value: "addition"
     * @const
     */
    "addition": "addition",

    /**
     * value: "removal"
     * @const
     */
    "removal": "removal"
};


/**
 * Allowed values for the <code>object_type</code> property.
 * @enum {String}
 * @readonly
 */
ChangeEntry['ObjectTypeEnum'] = {

    /**
     * value: "org"
     * @const
     */
    "org": "org",

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "zone"
     * @const
     */
    "zone": "zone",

    /**
     * value: "proxy"
     * @const
     */
    "proxy": "proxy",

    /**
     * value: "domain"
     * @const
     */
    "domain": "domain",

    /**
     * value: "route"
     * @const
     */
    "route": "route",

    /**
     * value: "shared_rules"
     * @const
     */
    "shared_rules": "shared_rules",

    /**
     * value: "cluster"
     * @const
     */
    "cluster": "cluster"
};



export default ChangeEntry;

