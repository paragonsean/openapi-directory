/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CircuitBreakers model module.
 * @module model/CircuitBreakers
 * @version 1.0
 */
class CircuitBreakers {
    /**
     * Constructs a new <code>CircuitBreakers</code>.
     * Provides limits on various parameters to protect clusters against sudden surges in traffic. 
     * @alias module:model/CircuitBreakers
     */
    constructor() { 
        
        CircuitBreakers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CircuitBreakers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CircuitBreakers} obj Optional instance to populate.
     * @return {module:model/CircuitBreakers} The populated <code>CircuitBreakers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CircuitBreakers();

            if (data.hasOwnProperty('max_connections')) {
                obj['max_connections'] = ApiClient.convertToType(data['max_connections'], 'Number');
            }
            if (data.hasOwnProperty('max_pending_requests')) {
                obj['max_pending_requests'] = ApiClient.convertToType(data['max_pending_requests'], 'Number');
            }
            if (data.hasOwnProperty('max_requests')) {
                obj['max_requests'] = ApiClient.convertToType(data['max_requests'], 'Number');
            }
            if (data.hasOwnProperty('max_retries')) {
                obj['max_retries'] = ApiClient.convertToType(data['max_retries'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CircuitBreakers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CircuitBreakers</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Maximum number of connections that will be established to all instances in a cluster within a proxy. If set to 0, no new connections will be created. If not specified, defaults to 1024. 
 * @member {Number} max_connections
 */
CircuitBreakers.prototype['max_connections'] = undefined;

/**
 * Maximum number of requests that will be queued while waiting on a connection pool to a cluster within a proxy. If set to 0, no requests will be queued. If not specified, defaults to 1024. 
 * @member {Number} max_pending_requests
 */
CircuitBreakers.prototype['max_pending_requests'] = undefined;

/**
 * Maximum number of requests that can be outstanding to all instances in a cluster within  a proxy. Only applicable to HTTP/2 traffic since HTTP/1.1 clusters are governed by the maximum connections circuit breaker. If set to 0, no requests will be made. If not specified, defaults to 1024. 
 * @member {Number} max_requests
 */
CircuitBreakers.prototype['max_requests'] = undefined;

/**
 * Maximum number of retries that can be outstanding to all instances in a cluster within a proxy. If set to 0, requests will not be retried. If not specified, defaults to 3. 
 * @member {Number} max_retries
 */
CircuitBreakers.prototype['max_retries'] = undefined;






export default CircuitBreakers;

