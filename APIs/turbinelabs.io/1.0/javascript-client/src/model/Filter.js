/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeRange from './TimeRange';

/**
 * The Filter model module.
 * @module model/Filter
 * @version 1.0
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * @alias module:model/Filter
     */
    constructor() { 
        
        Filter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('absolute_match_only')) {
                obj['absolute_match_only'] = ApiClient.convertToType(data['absolute_match_only'], 'Boolean');
            }
            if (data.hasOwnProperty('actor_key')) {
                obj['actor_key'] = ApiClient.convertToType(data['actor_key'], 'String');
            }
            if (data.hasOwnProperty('attribute_path')) {
                obj['attribute_path'] = ApiClient.convertToType(data['attribute_path'], 'String');
            }
            if (data.hasOwnProperty('attribute_value')) {
                obj['attribute_value'] = ApiClient.convertToType(data['attribute_value'], 'String');
            }
            if (data.hasOwnProperty('change_txn')) {
                obj['change_txn'] = ApiClient.convertToType(data['change_txn'], 'String');
            }
            if (data.hasOwnProperty('change_type')) {
                obj['change_type'] = ApiClient.convertToType(data['change_type'], 'String');
            }
            if (data.hasOwnProperty('exclude_empty_values')) {
                obj['exclude_empty_values'] = ApiClient.convertToType(data['exclude_empty_values'], 'Boolean');
            }
            if (data.hasOwnProperty('negative_match')) {
                obj['negative_match'] = ApiClient.convertToType(data['negative_match'], 'Boolean');
            }
            if (data.hasOwnProperty('object_key')) {
                obj['object_key'] = ApiClient.convertToType(data['object_key'], 'String');
            }
            if (data.hasOwnProperty('object_type')) {
                obj['object_type'] = ApiClient.convertToType(data['object_type'], 'String');
            }
            if (data.hasOwnProperty('org_key')) {
                obj['org_key'] = ApiClient.convertToType(data['org_key'], 'String');
            }
            if (data.hasOwnProperty('time_range')) {
                obj['time_range'] = TimeRange.constructFromObject(data['time_range']);
            }
            if (data.hasOwnProperty('zone_key')) {
                obj['zone_key'] = ApiClient.convertToType(data['zone_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actor_key'] && !(typeof data['actor_key'] === 'string' || data['actor_key'] instanceof String)) {
            throw new Error("Expected the field `actor_key` to be a primitive type in the JSON string but got " + data['actor_key']);
        }
        // ensure the json data is a string
        if (data['attribute_path'] && !(typeof data['attribute_path'] === 'string' || data['attribute_path'] instanceof String)) {
            throw new Error("Expected the field `attribute_path` to be a primitive type in the JSON string but got " + data['attribute_path']);
        }
        // ensure the json data is a string
        if (data['attribute_value'] && !(typeof data['attribute_value'] === 'string' || data['attribute_value'] instanceof String)) {
            throw new Error("Expected the field `attribute_value` to be a primitive type in the JSON string but got " + data['attribute_value']);
        }
        // ensure the json data is a string
        if (data['change_txn'] && !(typeof data['change_txn'] === 'string' || data['change_txn'] instanceof String)) {
            throw new Error("Expected the field `change_txn` to be a primitive type in the JSON string but got " + data['change_txn']);
        }
        // ensure the json data is a string
        if (data['change_type'] && !(typeof data['change_type'] === 'string' || data['change_type'] instanceof String)) {
            throw new Error("Expected the field `change_type` to be a primitive type in the JSON string but got " + data['change_type']);
        }
        // ensure the json data is a string
        if (data['object_key'] && !(typeof data['object_key'] === 'string' || data['object_key'] instanceof String)) {
            throw new Error("Expected the field `object_key` to be a primitive type in the JSON string but got " + data['object_key']);
        }
        // ensure the json data is a string
        if (data['object_type'] && !(typeof data['object_type'] === 'string' || data['object_type'] instanceof String)) {
            throw new Error("Expected the field `object_type` to be a primitive type in the JSON string but got " + data['object_type']);
        }
        // ensure the json data is a string
        if (data['org_key'] && !(typeof data['org_key'] === 'string' || data['org_key'] instanceof String)) {
            throw new Error("Expected the field `org_key` to be a primitive type in the JSON string but got " + data['org_key']);
        }
        // validate the optional field `time_range`
        if (data['time_range']) { // data not null
          TimeRange.validateJSON(data['time_range']);
        }
        // ensure the json data is a string
        if (data['zone_key'] && !(typeof data['zone_key'] === 'string' || data['zone_key'] instanceof String)) {
            throw new Error("Expected the field `zone_key` to be a primitive type in the JSON string but got " + data['zone_key']);
        }

        return true;
    }


}



/**
 * If set this will return ChangeEntry values with a path that matches the attribute_path property exactly. 
 * @member {Boolean} absolute_match_only
 */
Filter.prototype['absolute_match_only'] = undefined;

/**
 * The user who made the change.
 * @member {String} actor_key
 */
Filter.prototype['actor_key'] = undefined;

/**
 * A dot-separated / bracket-indexed path to the field changed on the object. '%' may be used as a wildcard. 
 * @member {String} attribute_path
 */
Filter.prototype['attribute_path'] = undefined;

/**
 * The value that has been added or removed to the object at the attribute path indicated in path. 
 * @member {String} attribute_value
 */
Filter.prototype['attribute_value'] = undefined;

/**
 * A unique identifier for all this transaction. It is shared by all attribute updates within a change. 
 * @member {String} change_txn
 */
Filter.prototype['change_txn'] = undefined;

/**
 * Whether the value was added or removed to the object.
 * @member {module:model/Filter.ChangeTypeEnum} change_type
 */
Filter.prototype['change_type'] = undefined;

/**
 * If set this will exclude ChangeEntry records that save the addition or removal of an empty value. 
 * @member {Boolean} exclude_empty_values
 */
Filter.prototype['exclude_empty_values'] = undefined;

/**
 * If set this filter will match the all ChangeEntry records that do NOT meet the constraints laid out in this Filter object. 
 * @member {Boolean} negative_match
 */
Filter.prototype['negative_match'] = undefined;

/**
 * An ID uniquely identifying the object being changed.
 * @member {String} object_key
 */
Filter.prototype['object_key'] = undefined;

/**
 * The name of the object being being altered.
 * @member {module:model/Filter.ObjectTypeEnum} object_type
 */
Filter.prototype['object_type'] = undefined;

/**
 * The organization the objects being updated belong to.
 * @member {String} org_key
 */
Filter.prototype['org_key'] = undefined;

/**
 * @member {module:model/TimeRange} time_range
 */
Filter.prototype['time_range'] = undefined;

/**
 * The zone this object is located in.
 * @member {String} zone_key
 */
Filter.prototype['zone_key'] = undefined;





/**
 * Allowed values for the <code>change_type</code> property.
 * @enum {String}
 * @readonly
 */
Filter['ChangeTypeEnum'] = {

    /**
     * value: "addition"
     * @const
     */
    "addition": "addition",

    /**
     * value: "removal"
     * @const
     */
    "removal": "removal"
};


/**
 * Allowed values for the <code>object_type</code> property.
 * @enum {String}
 * @readonly
 */
Filter['ObjectTypeEnum'] = {

    /**
     * value: "org"
     * @const
     */
    "org": "org",

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "zone"
     * @const
     */
    "zone": "zone",

    /**
     * value: "proxy"
     * @const
     */
    "proxy": "proxy",

    /**
     * value: "domain"
     * @const
     */
    "domain": "domain",

    /**
     * value: "route"
     * @const
     */
    "route": "route",

    /**
     * value: "shared_rules"
     * @const
     */
    "shared_rules": "shared_rules",

    /**
     * value: "cluster"
     * @const
     */
    "cluster": "cluster"
};



export default Filter;

