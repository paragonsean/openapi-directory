/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CORSConfig model module.
 * @module model/CORSConfig
 * @version 1.0
 */
class CORSConfig {
    /**
     * Constructs a new <code>CORSConfig</code>.
     * Experimental: Controls simple CORS responses for the associated domain. The configurable properties map closely to the CORS specification which should be referenced for a full discussion on their meaning: https://www.w3.org/TR/cors/ or https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS. 
     * @alias module:model/CORSConfig
     * @param allowedMethods {Array.<String>} Indicates which HTTP request types may be used to call an endpoint. https://www.w3.org/TR/cors/#access-control-allow-methods-response-header. 
     * @param allowedOrigins {Array.<String>} Must contain a single element specifying the domain (origin) allowed to make requsets to this domain. If any origin is acceptable '*' may be used as a wildcard https://www.w3.org/TR/cors/#origin-request-header, https://www.w3.org/TR/cors/#access-control-allow-origin-response-header. 
     */
    constructor(allowedMethods, allowedOrigins) { 
        
        CORSConfig.initialize(this, allowedMethods, allowedOrigins);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowedMethods, allowedOrigins) { 
        obj['allowed_methods'] = allowedMethods;
        obj['allowed_origins'] = allowedOrigins;
    }

    /**
     * Constructs a <code>CORSConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CORSConfig} obj Optional instance to populate.
     * @return {module:model/CORSConfig} The populated <code>CORSConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CORSConfig();

            if (data.hasOwnProperty('allow_credentials')) {
                obj['allow_credentials'] = ApiClient.convertToType(data['allow_credentials'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_headers')) {
                obj['allowed_headers'] = ApiClient.convertToType(data['allowed_headers'], ['String']);
            }
            if (data.hasOwnProperty('allowed_methods')) {
                obj['allowed_methods'] = ApiClient.convertToType(data['allowed_methods'], ['String']);
            }
            if (data.hasOwnProperty('allowed_origins')) {
                obj['allowed_origins'] = ApiClient.convertToType(data['allowed_origins'], ['String']);
            }
            if (data.hasOwnProperty('exposed_headers')) {
                obj['exposed_headers'] = ApiClient.convertToType(data['exposed_headers'], ['String']);
            }
            if (data.hasOwnProperty('max_age')) {
                obj['max_age'] = ApiClient.convertToType(data['max_age'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CORSConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CORSConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CORSConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_headers'])) {
            throw new Error("Expected the field `allowed_headers` to be an array in the JSON data but got " + data['allowed_headers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_methods'])) {
            throw new Error("Expected the field `allowed_methods` to be an array in the JSON data but got " + data['allowed_methods']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_origins'])) {
            throw new Error("Expected the field `allowed_origins` to be an array in the JSON data but got " + data['allowed_origins']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exposed_headers'])) {
            throw new Error("Expected the field `exposed_headers` to be an array in the JSON data but got " + data['exposed_headers']);
        }

        return true;
    }


}

CORSConfig.RequiredProperties = ["allowed_methods", "allowed_origins"];

/**
 * Indicates whether the response to request can be exposed when the omit credentials flag is unset https://www.w3.org/TR/cors/#access-control-allow-credentials-response-header. 
 * @member {Boolean} allow_credentials
 */
CORSConfig.prototype['allow_credentials'] = undefined;

/**
 * Specifies what headers are allowed to be set when a request is made. https://www.w3.org/TR/cors/#access-control-allow-headers-response-header. 
 * @member {Array.<String>} allowed_headers
 */
CORSConfig.prototype['allowed_headers'] = undefined;

/**
 * Indicates which HTTP request types may be used to call an endpoint. https://www.w3.org/TR/cors/#access-control-allow-methods-response-header. 
 * @member {Array.<String>} allowed_methods
 */
CORSConfig.prototype['allowed_methods'] = undefined;

/**
 * Must contain a single element specifying the domain (origin) allowed to make requsets to this domain. If any origin is acceptable '*' may be used as a wildcard https://www.w3.org/TR/cors/#origin-request-header, https://www.w3.org/TR/cors/#access-control-allow-origin-response-header. 
 * @member {Array.<String>} allowed_origins
 */
CORSConfig.prototype['allowed_origins'] = undefined;

/**
 * Indicates which response headers may be accessed from the browser. https://www.w3.org/TR/cors/#http-access-control-expose-headers. 
 * @member {Array.<String>} exposed_headers
 */
CORSConfig.prototype['exposed_headers'] = undefined;

/**
 * Sets how long (in seconds) the response to a preflight request may be cached. A value of -1 will disable caching. https://www.w3.org/TR/cors/#access-control-max-age-response-header. 
 * @member {Number} max_age
 */
CORSConfig.prototype['max_age'] = undefined;






export default CORSConfig;

