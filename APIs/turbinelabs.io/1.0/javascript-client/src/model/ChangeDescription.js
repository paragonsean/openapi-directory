/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangeEntry from './ChangeEntry';

/**
 * The ChangeDescription model module.
 * @module model/ChangeDescription
 * @version 1.0
 */
class ChangeDescription {
    /**
     * Constructs a new <code>ChangeDescription</code>.
     * @alias module:model/ChangeDescription
     */
    constructor() { 
        
        ChangeDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeDescription} obj Optional instance to populate.
     * @return {module:model/ChangeDescription} The populated <code>ChangeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeDescription();

            if (data.hasOwnProperty('actor_key')) {
                obj['actor_key'] = ApiClient.convertToType(data['actor_key'], 'String');
            }
            if (data.hasOwnProperty('at')) {
                obj['at'] = ApiClient.convertToType(data['at'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('diffs')) {
                obj['diffs'] = ApiClient.convertToType(data['diffs'], [ChangeEntry]);
            }
            if (data.hasOwnProperty('txn')) {
                obj['txn'] = ApiClient.convertToType(data['txn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actor_key'] && !(typeof data['actor_key'] === 'string' || data['actor_key'] instanceof String)) {
            throw new Error("Expected the field `actor_key` to be a primitive type in the JSON string but got " + data['actor_key']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        if (data['diffs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diffs'])) {
                throw new Error("Expected the field `diffs` to be an array in the JSON data but got " + data['diffs']);
            }
            // validate the optional field `diffs` (array)
            for (const item of data['diffs']) {
                ChangeEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['txn'] && !(typeof data['txn'] === 'string' || data['txn'] instanceof String)) {
            throw new Error("Expected the field `txn` to be a primitive type in the JSON string but got " + data['txn']);
        }

        return true;
    }


}



/**
 * The user who made the change.
 * @member {String} actor_key
 */
ChangeDescription.prototype['actor_key'] = undefined;

/**
 * When the change took place in milliseconds since the Unix epoch.
 * @member {Number} at
 */
ChangeDescription.prototype['at'] = undefined;

/**
 * A description of the change.
 * @member {String} comment
 */
ChangeDescription.prototype['comment'] = undefined;

/**
 * A collection of attribute updates that compose this change.
 * @member {Array.<module:model/ChangeEntry>} diffs
 */
ChangeDescription.prototype['diffs'] = undefined;

/**
 * A unique identifier for all this transaction. It is shared by all attribute updates within a change. 
 * @member {String} txn
 */
ChangeDescription.prototype['txn'] = undefined;






export default ChangeDescription;

