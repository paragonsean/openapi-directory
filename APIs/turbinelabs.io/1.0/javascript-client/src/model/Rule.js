/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllConstraints from './AllConstraints';
import CohortSeed from './CohortSeed';
import Match from './Match';

/**
 * The Rule model module.
 * @module model/Rule
 * @version 1.0
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * @alias module:model/Rule
     */
    constructor() { 
        
        Rule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('cohort_seed')) {
                obj['cohort_seed'] = CohortSeed.constructFromObject(data['cohort_seed']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = AllConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('matches')) {
                obj['matches'] = ApiClient.convertToType(data['matches'], [Match]);
            }
            if (data.hasOwnProperty('methods')) {
                obj['methods'] = ApiClient.convertToType(data['methods'], ['String']);
            }
            if (data.hasOwnProperty('rule_key')) {
                obj['rule_key'] = ApiClient.convertToType(data['rule_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cohort_seed`
        if (data['cohort_seed']) { // data not null
          CohortSeed.validateJSON(data['cohort_seed']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          AllConstraints.validateJSON(data['constraints']);
        }
        if (data['matches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matches'])) {
                throw new Error("Expected the field `matches` to be an array in the JSON data but got " + data['matches']);
            }
            // validate the optional field `matches` (array)
            for (const item of data['matches']) {
                Match.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['methods'])) {
            throw new Error("Expected the field `methods` to be an array in the JSON data but got " + data['methods']);
        }
        // ensure the json data is a string
        if (data['rule_key'] && !(typeof data['rule_key'] === 'string' || data['rule_key'] instanceof String)) {
            throw new Error("Expected the field `rule_key` to be a primitive type in the JSON string but got " + data['rule_key']);
        }

        return true;
    }


}



/**
 * @member {module:model/CohortSeed} cohort_seed
 */
Rule.prototype['cohort_seed'] = undefined;

/**
 * @member {module:model/AllConstraints} constraints
 */
Rule.prototype['constraints'] = undefined;

/**
 * @member {Array.<module:model/Match>} matches
 */
Rule.prototype['matches'] = undefined;

/**
 * @member {Array.<String>} methods
 */
Rule.prototype['methods'] = undefined;

/**
 * @member {String} rule_key
 */
Rule.prototype['rule_key'] = undefined;






export default Rule;

