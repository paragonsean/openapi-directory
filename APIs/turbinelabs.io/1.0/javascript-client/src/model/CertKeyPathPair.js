/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertKeyPathPair model module.
 * @module model/CertKeyPathPair
 * @version 1.0
 */
class CertKeyPathPair {
    /**
     * Constructs a new <code>CertKeyPathPair</code>.
     * A key/cert pair that will be served when a domain terminates a SSL/TLS request.  Paths should be absolute and accessible to the user running the proxy instance. 
     * @alias module:model/CertKeyPathPair
     * @param certificatePath {String} Path to a certificate in the PEM format for the domain. If multiple certificates need to be specified then should be contained in this file in the following order: first the primary certificate followed by any intermediary certificats. 
     * @param keyPath {String} Path to a file with the secret key in the PEM format for the domain. 
     */
    constructor(certificatePath, keyPath) { 
        
        CertKeyPathPair.initialize(this, certificatePath, keyPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificatePath, keyPath) { 
        obj['certificate_path'] = certificatePath;
        obj['key_path'] = keyPath;
    }

    /**
     * Constructs a <code>CertKeyPathPair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertKeyPathPair} obj Optional instance to populate.
     * @return {module:model/CertKeyPathPair} The populated <code>CertKeyPathPair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertKeyPathPair();

            if (data.hasOwnProperty('certificate_path')) {
                obj['certificate_path'] = ApiClient.convertToType(data['certificate_path'], 'String');
            }
            if (data.hasOwnProperty('key_path')) {
                obj['key_path'] = ApiClient.convertToType(data['key_path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertKeyPathPair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertKeyPathPair</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertKeyPathPair.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificate_path'] && !(typeof data['certificate_path'] === 'string' || data['certificate_path'] instanceof String)) {
            throw new Error("Expected the field `certificate_path` to be a primitive type in the JSON string but got " + data['certificate_path']);
        }
        // ensure the json data is a string
        if (data['key_path'] && !(typeof data['key_path'] === 'string' || data['key_path'] instanceof String)) {
            throw new Error("Expected the field `key_path` to be a primitive type in the JSON string but got " + data['key_path']);
        }

        return true;
    }


}

CertKeyPathPair.RequiredProperties = ["certificate_path", "key_path"];

/**
 * Path to a certificate in the PEM format for the domain. If multiple certificates need to be specified then should be contained in this file in the following order: first the primary certificate followed by any intermediary certificats. 
 * @member {String} certificate_path
 */
CertKeyPathPair.prototype['certificate_path'] = undefined;

/**
 * Path to a file with the secret key in the PEM format for the domain. 
 * @member {String} key_path
 */
CertKeyPathPair.prototype['key_path'] = undefined;






export default CertKeyPathPair;

