/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITCPHealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITCPHealthCheck::OAITCPHealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITCPHealthCheck::OAITCPHealthCheck() {
    this->initializeModel();
}

OAITCPHealthCheck::~OAITCPHealthCheck() {}

void OAITCPHealthCheck::initializeModel() {

    m_receive_isSet = false;
    m_receive_isValid = false;

    m_send_isSet = false;
    m_send_isValid = false;
}

void OAITCPHealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITCPHealthCheck::fromJsonObject(QJsonObject json) {

    m_receive_isValid = ::OpenAPI::fromJsonValue(m_receive, json[QString("receive")]);
    m_receive_isSet = !json[QString("receive")].isNull() && m_receive_isValid;

    m_send_isValid = ::OpenAPI::fromJsonValue(m_send, json[QString("send")]);
    m_send_isSet = !json[QString("send")].isNull() && m_send_isValid;
}

QString OAITCPHealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITCPHealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_receive.size() > 0) {
        obj.insert(QString("receive"), ::OpenAPI::toJsonValue(m_receive));
    }
    if (m_send_isSet) {
        obj.insert(QString("send"), ::OpenAPI::toJsonValue(m_send));
    }
    return obj;
}

QList<QString> OAITCPHealthCheck::getReceive() const {
    return m_receive;
}
void OAITCPHealthCheck::setReceive(const QList<QString> &receive) {
    m_receive = receive;
    m_receive_isSet = true;
}

bool OAITCPHealthCheck::is_receive_Set() const{
    return m_receive_isSet;
}

bool OAITCPHealthCheck::is_receive_Valid() const{
    return m_receive_isValid;
}

QString OAITCPHealthCheck::getSend() const {
    return m_send;
}
void OAITCPHealthCheck::setSend(const QString &send) {
    m_send = send;
    m_send_isSet = true;
}

bool OAITCPHealthCheck::is_send_Set() const{
    return m_send_isSet;
}

bool OAITCPHealthCheck::is_send_Valid() const{
    return m_send_isValid;
}

bool OAITCPHealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_receive.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITCPHealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
