/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageDetails::OAIPageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageDetails::OAIPageDetails() {
    this->initializeModel();
}

OAIPageDetails::~OAIPageDetails() {}

void OAIPageDetails::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_total_entries_isSet = false;
    m_total_entries_isValid = false;
}

void OAIPageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageDetails::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("has_more")]);
    m_has_more_isSet = !json[QString("has_more")].isNull() && m_has_more_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("ref_id")]);
    m_ref_id_isSet = !json[QString("ref_id")].isNull() && m_ref_id_isValid;

    m_total_entries_isValid = ::OpenAPI::fromJsonValue(m_total_entries, json[QString("total_entries")]);
    m_total_entries_isSet = !json[QString("total_entries")].isNull() && m_total_entries_isValid;
}

QString OAIPageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("has_more"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("ref_id"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_total_entries_isSet) {
        obj.insert(QString("total_entries"), ::OpenAPI::toJsonValue(m_total_entries));
    }
    return obj;
}

QString OAIPageDetails::getDirection() const {
    return m_direction;
}
void OAIPageDetails::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIPageDetails::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIPageDetails::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIPageDetails::isHasMore() const {
    return m_has_more;
}
void OAIPageDetails::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIPageDetails::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIPageDetails::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QString OAIPageDetails::getRefId() const {
    return m_ref_id;
}
void OAIPageDetails::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIPageDetails::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIPageDetails::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

qint32 OAIPageDetails::getTotalEntries() const {
    return m_total_entries;
}
void OAIPageDetails::setTotalEntries(const qint32 &total_entries) {
    m_total_entries = total_entries;
    m_total_entries_isSet = true;
}

bool OAIPageDetails::is_total_entries_Set() const{
    return m_total_entries_isSet;
}

bool OAIPageDetails::is_total_entries_Valid() const{
    return m_total_entries_isValid;
}

bool OAIPageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_entries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
