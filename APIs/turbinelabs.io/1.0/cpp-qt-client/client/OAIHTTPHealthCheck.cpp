/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHTTPHealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHTTPHealthCheck::OAIHTTPHealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHTTPHealthCheck::OAIHTTPHealthCheck() {
    this->initializeModel();
}

OAIHTTPHealthCheck::~OAIHTTPHealthCheck() {}

void OAIHTTPHealthCheck::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_request_headers_to_add_isSet = false;
    m_request_headers_to_add_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIHTTPHealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHTTPHealthCheck::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_request_headers_to_add_isValid = ::OpenAPI::fromJsonValue(m_request_headers_to_add, json[QString("request_headers_to_add")]);
    m_request_headers_to_add_isSet = !json[QString("request_headers_to_add")].isNull() && m_request_headers_to_add_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("service_name")]);
    m_service_name_isSet = !json[QString("service_name")].isNull() && m_service_name_isValid;
}

QString OAIHTTPHealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHTTPHealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_request_headers_to_add.size() > 0) {
        obj.insert(QString("request_headers_to_add"), ::OpenAPI::toJsonValue(m_request_headers_to_add));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("service_name"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIHTTPHealthCheck::getHost() const {
    return m_host;
}
void OAIHTTPHealthCheck::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIHTTPHealthCheck::is_host_Set() const{
    return m_host_isSet;
}

bool OAIHTTPHealthCheck::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIHTTPHealthCheck::getPath() const {
    return m_path;
}
void OAIHTTPHealthCheck::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHTTPHealthCheck::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHTTPHealthCheck::is_path_Valid() const{
    return m_path_isValid;
}

QList<OAIMetadatum> OAIHTTPHealthCheck::getRequestHeadersToAdd() const {
    return m_request_headers_to_add;
}
void OAIHTTPHealthCheck::setRequestHeadersToAdd(const QList<OAIMetadatum> &request_headers_to_add) {
    m_request_headers_to_add = request_headers_to_add;
    m_request_headers_to_add_isSet = true;
}

bool OAIHTTPHealthCheck::is_request_headers_to_add_Set() const{
    return m_request_headers_to_add_isSet;
}

bool OAIHTTPHealthCheck::is_request_headers_to_add_Valid() const{
    return m_request_headers_to_add_isValid;
}

QString OAIHTTPHealthCheck::getServiceName() const {
    return m_service_name;
}
void OAIHTTPHealthCheck::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIHTTPHealthCheck::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIHTTPHealthCheck::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIHTTPHealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_headers_to_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHTTPHealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
