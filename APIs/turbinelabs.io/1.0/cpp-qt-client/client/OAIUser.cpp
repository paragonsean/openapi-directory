/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_login_email_isSet = false;
    m_login_email_isValid = false;

    m_user_key_isSet = false;
    m_user_key_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_login_email_isValid = ::OpenAPI::fromJsonValue(m_login_email, json[QString("login_email")]);
    m_login_email_isSet = !json[QString("login_email")].isNull() && m_login_email_isValid;

    m_user_key_isValid = ::OpenAPI::fromJsonValue(m_user_key, json[QString("user_key")]);
    m_user_key_isSet = !json[QString("user_key")].isNull() && m_user_key_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_login_email_isSet) {
        obj.insert(QString("login_email"), ::OpenAPI::toJsonValue(m_login_email));
    }
    if (m_user_key_isSet) {
        obj.insert(QString("user_key"), ::OpenAPI::toJsonValue(m_user_key));
    }
    return obj;
}

QString OAIUser::getChecksum() const {
    return m_checksum;
}
void OAIUser::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIUser::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIUser::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIUser::getDeletedAt() const {
    return m_deleted_at;
}
void OAIUser::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIUser::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIUser::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAIUser::getLoginEmail() const {
    return m_login_email;
}
void OAIUser::setLoginEmail(const QString &login_email) {
    m_login_email = login_email;
    m_login_email_isSet = true;
}

bool OAIUser::is_login_email_Set() const{
    return m_login_email_isSet;
}

bool OAIUser::is_login_email_Valid() const{
    return m_login_email_isValid;
}

QString OAIUser::getUserKey() const {
    return m_user_key;
}
void OAIUser::setUserKey(const QString &user_key) {
    m_user_key = user_key;
    m_user_key_isSet = true;
}

bool OAIUser::is_user_key_Set() const{
    return m_user_key_isSet;
}

bool OAIUser::is_user_key_Valid() const{
    return m_user_key_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_checksum_isValid && m_login_email_isValid && m_user_key_isValid && true;
}

} // namespace OpenAPI
