/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClusterCreate.h
 *
 * 
 */

#ifndef OAIClusterCreate_H
#define OAIClusterCreate_H

#include <QJsonObject>

#include "OAICircuitBreakers.h"
#include "OAIHealthCheck.h"
#include "OAIInstance.h"
#include "OAIOutlierDetection.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICircuitBreakers;
class OAIHealthCheck;
class OAIInstance;
class OAIOutlierDetection;

class OAIClusterCreate : public OAIObject {
public:
    OAIClusterCreate();
    OAIClusterCreate(QString json);
    ~OAIClusterCreate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICircuitBreakers getCircuitBreakers() const;
    void setCircuitBreakers(const OAICircuitBreakers &circuit_breakers);
    bool is_circuit_breakers_Set() const;
    bool is_circuit_breakers_Valid() const;

    QList<OAIHealthCheck> getHealthChecks() const;
    void setHealthChecks(const QList<OAIHealthCheck> &health_checks);
    bool is_health_checks_Set() const;
    bool is_health_checks_Valid() const;

    QList<OAIInstance> getInstances() const;
    void setInstances(const QList<OAIInstance> &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOutlierDetection getOutlierDetection() const;
    void setOutlierDetection(const OAIOutlierDetection &outlier_detection);
    bool is_outlier_detection_Set() const;
    bool is_outlier_detection_Valid() const;

    bool isRequireTls() const;
    void setRequireTls(const bool &require_tls);
    bool is_require_tls_Set() const;
    bool is_require_tls_Valid() const;

    QString getZoneKey() const;
    void setZoneKey(const QString &zone_key);
    bool is_zone_key_Set() const;
    bool is_zone_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICircuitBreakers m_circuit_breakers;
    bool m_circuit_breakers_isSet;
    bool m_circuit_breakers_isValid;

    QList<OAIHealthCheck> m_health_checks;
    bool m_health_checks_isSet;
    bool m_health_checks_isValid;

    QList<OAIInstance> m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOutlierDetection m_outlier_detection;
    bool m_outlier_detection_isSet;
    bool m_outlier_detection_isValid;

    bool m_require_tls;
    bool m_require_tls_isSet;
    bool m_require_tls_isValid;

    QString m_zone_key;
    bool m_zone_key_isSet;
    bool m_zone_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClusterCreate)

#endif // OAIClusterCreate_H
