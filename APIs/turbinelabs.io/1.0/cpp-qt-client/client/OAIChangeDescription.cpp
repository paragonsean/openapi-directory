/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeDescription::OAIChangeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeDescription::OAIChangeDescription() {
    this->initializeModel();
}

OAIChangeDescription::~OAIChangeDescription() {}

void OAIChangeDescription::initializeModel() {

    m_actor_key_isSet = false;
    m_actor_key_isValid = false;

    m_at_isSet = false;
    m_at_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_diffs_isSet = false;
    m_diffs_isValid = false;

    m_txn_isSet = false;
    m_txn_isValid = false;
}

void OAIChangeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeDescription::fromJsonObject(QJsonObject json) {

    m_actor_key_isValid = ::OpenAPI::fromJsonValue(m_actor_key, json[QString("actor_key")]);
    m_actor_key_isSet = !json[QString("actor_key")].isNull() && m_actor_key_isValid;

    m_at_isValid = ::OpenAPI::fromJsonValue(m_at, json[QString("at")]);
    m_at_isSet = !json[QString("at")].isNull() && m_at_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_diffs_isValid = ::OpenAPI::fromJsonValue(m_diffs, json[QString("diffs")]);
    m_diffs_isSet = !json[QString("diffs")].isNull() && m_diffs_isValid;

    m_txn_isValid = ::OpenAPI::fromJsonValue(m_txn, json[QString("txn")]);
    m_txn_isSet = !json[QString("txn")].isNull() && m_txn_isValid;
}

QString OAIChangeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_key_isSet) {
        obj.insert(QString("actor_key"), ::OpenAPI::toJsonValue(m_actor_key));
    }
    if (m_at_isSet) {
        obj.insert(QString("at"), ::OpenAPI::toJsonValue(m_at));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_diffs.size() > 0) {
        obj.insert(QString("diffs"), ::OpenAPI::toJsonValue(m_diffs));
    }
    if (m_txn_isSet) {
        obj.insert(QString("txn"), ::OpenAPI::toJsonValue(m_txn));
    }
    return obj;
}

QString OAIChangeDescription::getActorKey() const {
    return m_actor_key;
}
void OAIChangeDescription::setActorKey(const QString &actor_key) {
    m_actor_key = actor_key;
    m_actor_key_isSet = true;
}

bool OAIChangeDescription::is_actor_key_Set() const{
    return m_actor_key_isSet;
}

bool OAIChangeDescription::is_actor_key_Valid() const{
    return m_actor_key_isValid;
}

double OAIChangeDescription::getAt() const {
    return m_at;
}
void OAIChangeDescription::setAt(const double &at) {
    m_at = at;
    m_at_isSet = true;
}

bool OAIChangeDescription::is_at_Set() const{
    return m_at_isSet;
}

bool OAIChangeDescription::is_at_Valid() const{
    return m_at_isValid;
}

QString OAIChangeDescription::getComment() const {
    return m_comment;
}
void OAIChangeDescription::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIChangeDescription::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIChangeDescription::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<OAIChangeEntry> OAIChangeDescription::getDiffs() const {
    return m_diffs;
}
void OAIChangeDescription::setDiffs(const QList<OAIChangeEntry> &diffs) {
    m_diffs = diffs;
    m_diffs_isSet = true;
}

bool OAIChangeDescription::is_diffs_Set() const{
    return m_diffs_isSet;
}

bool OAIChangeDescription::is_diffs_Valid() const{
    return m_diffs_isValid;
}

QString OAIChangeDescription::getTxn() const {
    return m_txn;
}
void OAIChangeDescription::setTxn(const QString &txn) {
    m_txn = txn;
    m_txn_isSet = true;
}

bool OAIChangeDescription::is_txn_Set() const{
    return m_txn_isSet;
}

bool OAIChangeDescription::is_txn_Valid() const{
    return m_txn_isValid;
}

bool OAIChangeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diffs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
