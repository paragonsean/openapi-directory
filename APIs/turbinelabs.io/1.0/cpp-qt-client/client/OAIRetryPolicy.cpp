/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryPolicy::OAIRetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryPolicy::OAIRetryPolicy() {
    this->initializeModel();
}

OAIRetryPolicy::~OAIRetryPolicy() {}

void OAIRetryPolicy::initializeModel() {

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;

    m_per_try_timeout_msec_isSet = false;
    m_per_try_timeout_msec_isValid = false;

    m_timeout_msec_isSet = false;
    m_timeout_msec_isValid = false;
}

void OAIRetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryPolicy::fromJsonObject(QJsonObject json) {

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("num_retries")]);
    m_num_retries_isSet = !json[QString("num_retries")].isNull() && m_num_retries_isValid;

    m_per_try_timeout_msec_isValid = ::OpenAPI::fromJsonValue(m_per_try_timeout_msec, json[QString("per_try_timeout_msec")]);
    m_per_try_timeout_msec_isSet = !json[QString("per_try_timeout_msec")].isNull() && m_per_try_timeout_msec_isValid;

    m_timeout_msec_isValid = ::OpenAPI::fromJsonValue(m_timeout_msec, json[QString("timeout_msec")]);
    m_timeout_msec_isSet = !json[QString("timeout_msec")].isNull() && m_timeout_msec_isValid;
}

QString OAIRetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_num_retries_isSet) {
        obj.insert(QString("num_retries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    if (m_per_try_timeout_msec_isSet) {
        obj.insert(QString("per_try_timeout_msec"), ::OpenAPI::toJsonValue(m_per_try_timeout_msec));
    }
    if (m_timeout_msec_isSet) {
        obj.insert(QString("timeout_msec"), ::OpenAPI::toJsonValue(m_timeout_msec));
    }
    return obj;
}

qint64 OAIRetryPolicy::getNumRetries() const {
    return m_num_retries;
}
void OAIRetryPolicy::setNumRetries(const qint64 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIRetryPolicy::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIRetryPolicy::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

qint64 OAIRetryPolicy::getPerTryTimeoutMsec() const {
    return m_per_try_timeout_msec;
}
void OAIRetryPolicy::setPerTryTimeoutMsec(const qint64 &per_try_timeout_msec) {
    m_per_try_timeout_msec = per_try_timeout_msec;
    m_per_try_timeout_msec_isSet = true;
}

bool OAIRetryPolicy::is_per_try_timeout_msec_Set() const{
    return m_per_try_timeout_msec_isSet;
}

bool OAIRetryPolicy::is_per_try_timeout_msec_Valid() const{
    return m_per_try_timeout_msec_isValid;
}

qint64 OAIRetryPolicy::getTimeoutMsec() const {
    return m_timeout_msec;
}
void OAIRetryPolicy::setTimeoutMsec(const qint64 &timeout_msec) {
    m_timeout_msec = timeout_msec;
    m_timeout_msec_isSet = true;
}

bool OAIRetryPolicy::is_timeout_msec_Set() const{
    return m_timeout_msec_isSet;
}

bool OAIRetryPolicy::is_timeout_msec_Valid() const{
    return m_timeout_msec_isValid;
}

bool OAIRetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_try_timeout_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_msec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
