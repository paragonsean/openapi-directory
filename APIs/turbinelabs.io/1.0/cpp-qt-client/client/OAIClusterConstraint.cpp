/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterConstraint::OAIClusterConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterConstraint::OAIClusterConstraint() {
    this->initializeModel();
}

OAIClusterConstraint::~OAIClusterConstraint() {}

void OAIClusterConstraint::initializeModel() {

    m_cluster_key_isSet = false;
    m_cluster_key_isValid = false;

    m_constraint_key_isSet = false;
    m_constraint_key_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_response_data_isSet = false;
    m_response_data_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIClusterConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterConstraint::fromJsonObject(QJsonObject json) {

    m_cluster_key_isValid = ::OpenAPI::fromJsonValue(m_cluster_key, json[QString("cluster_key")]);
    m_cluster_key_isSet = !json[QString("cluster_key")].isNull() && m_cluster_key_isValid;

    m_constraint_key_isValid = ::OpenAPI::fromJsonValue(m_constraint_key, json[QString("constraint_key")]);
    m_constraint_key_isSet = !json[QString("constraint_key")].isNull() && m_constraint_key_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_response_data_isValid = ::OpenAPI::fromJsonValue(m_response_data, json[QString("response_data")]);
    m_response_data_isSet = !json[QString("response_data")].isNull() && m_response_data_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIClusterConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_key_isSet) {
        obj.insert(QString("cluster_key"), ::OpenAPI::toJsonValue(m_cluster_key));
    }
    if (m_constraint_key_isSet) {
        obj.insert(QString("constraint_key"), ::OpenAPI::toJsonValue(m_constraint_key));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_response_data.isSet()) {
        obj.insert(QString("response_data"), ::OpenAPI::toJsonValue(m_response_data));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIClusterConstraint::getClusterKey() const {
    return m_cluster_key;
}
void OAIClusterConstraint::setClusterKey(const QString &cluster_key) {
    m_cluster_key = cluster_key;
    m_cluster_key_isSet = true;
}

bool OAIClusterConstraint::is_cluster_key_Set() const{
    return m_cluster_key_isSet;
}

bool OAIClusterConstraint::is_cluster_key_Valid() const{
    return m_cluster_key_isValid;
}

QString OAIClusterConstraint::getConstraintKey() const {
    return m_constraint_key;
}
void OAIClusterConstraint::setConstraintKey(const QString &constraint_key) {
    m_constraint_key = constraint_key;
    m_constraint_key_isSet = true;
}

bool OAIClusterConstraint::is_constraint_key_Set() const{
    return m_constraint_key_isSet;
}

bool OAIClusterConstraint::is_constraint_key_Valid() const{
    return m_constraint_key_isValid;
}

QList<OAIMetadatum> OAIClusterConstraint::getMetadata() const {
    return m_metadata;
}
void OAIClusterConstraint::setMetadata(const QList<OAIMetadatum> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIClusterConstraint::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIClusterConstraint::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMetadatum> OAIClusterConstraint::getProperties() const {
    return m_properties;
}
void OAIClusterConstraint::setProperties(const QList<OAIMetadatum> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIClusterConstraint::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIClusterConstraint::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIResponseData OAIClusterConstraint::getResponseData() const {
    return m_response_data;
}
void OAIClusterConstraint::setResponseData(const OAIResponseData &response_data) {
    m_response_data = response_data;
    m_response_data_isSet = true;
}

bool OAIClusterConstraint::is_response_data_Set() const{
    return m_response_data_isSet;
}

bool OAIClusterConstraint::is_response_data_Valid() const{
    return m_response_data_isValid;
}

qint32 OAIClusterConstraint::getWeight() const {
    return m_weight;
}
void OAIClusterConstraint::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIClusterConstraint::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIClusterConstraint::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIClusterConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
