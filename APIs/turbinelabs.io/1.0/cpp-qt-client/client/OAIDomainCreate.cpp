/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainCreate::OAIDomainCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainCreate::OAIDomainCreate() {
    this->initializeModel();
}

OAIDomainCreate::~OAIDomainCreate() {}

void OAIDomainCreate::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_cors_config_isSet = false;
    m_cors_config_isValid = false;

    m_domain_key_isSet = false;
    m_domain_key_isValid = false;

    m_force_https_isSet = false;
    m_force_https_isValid = false;

    m_gzip_enabled_isSet = false;
    m_gzip_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_redirects_isSet = false;
    m_redirects_isValid = false;

    m_ssl_config_isSet = false;
    m_ssl_config_isValid = false;

    m_zone_key_isSet = false;
    m_zone_key_isValid = false;
}

void OAIDomainCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainCreate::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_cors_config_isValid = ::OpenAPI::fromJsonValue(m_cors_config, json[QString("cors_config")]);
    m_cors_config_isSet = !json[QString("cors_config")].isNull() && m_cors_config_isValid;

    m_domain_key_isValid = ::OpenAPI::fromJsonValue(m_domain_key, json[QString("domain_key")]);
    m_domain_key_isSet = !json[QString("domain_key")].isNull() && m_domain_key_isValid;

    m_force_https_isValid = ::OpenAPI::fromJsonValue(m_force_https, json[QString("force_https")]);
    m_force_https_isSet = !json[QString("force_https")].isNull() && m_force_https_isValid;

    m_gzip_enabled_isValid = ::OpenAPI::fromJsonValue(m_gzip_enabled, json[QString("gzip_enabled")]);
    m_gzip_enabled_isSet = !json[QString("gzip_enabled")].isNull() && m_gzip_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_redirects_isValid = ::OpenAPI::fromJsonValue(m_redirects, json[QString("redirects")]);
    m_redirects_isSet = !json[QString("redirects")].isNull() && m_redirects_isValid;

    m_ssl_config_isValid = ::OpenAPI::fromJsonValue(m_ssl_config, json[QString("ssl_config")]);
    m_ssl_config_isSet = !json[QString("ssl_config")].isNull() && m_ssl_config_isValid;

    m_zone_key_isValid = ::OpenAPI::fromJsonValue(m_zone_key, json[QString("zone_key")]);
    m_zone_key_isSet = !json[QString("zone_key")].isNull() && m_zone_key_isValid;
}

QString OAIDomainCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_cors_config.isSet()) {
        obj.insert(QString("cors_config"), ::OpenAPI::toJsonValue(m_cors_config));
    }
    if (m_domain_key_isSet) {
        obj.insert(QString("domain_key"), ::OpenAPI::toJsonValue(m_domain_key));
    }
    if (m_force_https_isSet) {
        obj.insert(QString("force_https"), ::OpenAPI::toJsonValue(m_force_https));
    }
    if (m_gzip_enabled_isSet) {
        obj.insert(QString("gzip_enabled"), ::OpenAPI::toJsonValue(m_gzip_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_redirects.size() > 0) {
        obj.insert(QString("redirects"), ::OpenAPI::toJsonValue(m_redirects));
    }
    if (m_ssl_config.isSet()) {
        obj.insert(QString("ssl_config"), ::OpenAPI::toJsonValue(m_ssl_config));
    }
    if (m_zone_key_isSet) {
        obj.insert(QString("zone_key"), ::OpenAPI::toJsonValue(m_zone_key));
    }
    return obj;
}

QList<QString> OAIDomainCreate::getAliases() const {
    return m_aliases;
}
void OAIDomainCreate::setAliases(const QList<QString> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIDomainCreate::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIDomainCreate::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAIDomainCreate::getChecksum() const {
    return m_checksum;
}
void OAIDomainCreate::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIDomainCreate::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIDomainCreate::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAICORSConfig OAIDomainCreate::getCorsConfig() const {
    return m_cors_config;
}
void OAIDomainCreate::setCorsConfig(const OAICORSConfig &cors_config) {
    m_cors_config = cors_config;
    m_cors_config_isSet = true;
}

bool OAIDomainCreate::is_cors_config_Set() const{
    return m_cors_config_isSet;
}

bool OAIDomainCreate::is_cors_config_Valid() const{
    return m_cors_config_isValid;
}

QString OAIDomainCreate::getDomainKey() const {
    return m_domain_key;
}
void OAIDomainCreate::setDomainKey(const QString &domain_key) {
    m_domain_key = domain_key;
    m_domain_key_isSet = true;
}

bool OAIDomainCreate::is_domain_key_Set() const{
    return m_domain_key_isSet;
}

bool OAIDomainCreate::is_domain_key_Valid() const{
    return m_domain_key_isValid;
}

bool OAIDomainCreate::isForceHttps() const {
    return m_force_https;
}
void OAIDomainCreate::setForceHttps(const bool &force_https) {
    m_force_https = force_https;
    m_force_https_isSet = true;
}

bool OAIDomainCreate::is_force_https_Set() const{
    return m_force_https_isSet;
}

bool OAIDomainCreate::is_force_https_Valid() const{
    return m_force_https_isValid;
}

bool OAIDomainCreate::isGzipEnabled() const {
    return m_gzip_enabled;
}
void OAIDomainCreate::setGzipEnabled(const bool &gzip_enabled) {
    m_gzip_enabled = gzip_enabled;
    m_gzip_enabled_isSet = true;
}

bool OAIDomainCreate::is_gzip_enabled_Set() const{
    return m_gzip_enabled_isSet;
}

bool OAIDomainCreate::is_gzip_enabled_Valid() const{
    return m_gzip_enabled_isValid;
}

QString OAIDomainCreate::getName() const {
    return m_name;
}
void OAIDomainCreate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainCreate::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDomainCreate::getPort() const {
    return m_port;
}
void OAIDomainCreate::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDomainCreate::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDomainCreate::is_port_Valid() const{
    return m_port_isValid;
}

QList<OAIRedirect> OAIDomainCreate::getRedirects() const {
    return m_redirects;
}
void OAIDomainCreate::setRedirects(const QList<OAIRedirect> &redirects) {
    m_redirects = redirects;
    m_redirects_isSet = true;
}

bool OAIDomainCreate::is_redirects_Set() const{
    return m_redirects_isSet;
}

bool OAIDomainCreate::is_redirects_Valid() const{
    return m_redirects_isValid;
}

OAISSLConfig OAIDomainCreate::getSslConfig() const {
    return m_ssl_config;
}
void OAIDomainCreate::setSslConfig(const OAISSLConfig &ssl_config) {
    m_ssl_config = ssl_config;
    m_ssl_config_isSet = true;
}

bool OAIDomainCreate::is_ssl_config_Set() const{
    return m_ssl_config_isSet;
}

bool OAIDomainCreate::is_ssl_config_Valid() const{
    return m_ssl_config_isValid;
}

QString OAIDomainCreate::getZoneKey() const {
    return m_zone_key;
}
void OAIDomainCreate::setZoneKey(const QString &zone_key) {
    m_zone_key = zone_key;
    m_zone_key_isSet = true;
}

bool OAIDomainCreate::is_zone_key_Set() const{
    return m_zone_key_isSet;
}

bool OAIDomainCreate::is_zone_key_Valid() const{
    return m_zone_key_isValid;
}

bool OAIDomainCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_https_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gzip_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_port_isValid && m_zone_key_isValid && true;
}

} // namespace OpenAPI
