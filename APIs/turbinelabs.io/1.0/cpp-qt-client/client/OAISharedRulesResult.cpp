/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedRulesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedRulesResult::OAISharedRulesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedRulesResult::OAISharedRulesResult() {
    this->initializeModel();
}

OAISharedRulesResult::~OAISharedRulesResult() {}

void OAISharedRulesResult::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAISharedRulesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedRulesResult::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAISharedRulesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedRulesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

OAISharedRules OAISharedRulesResult::getResult() const {
    return m_result;
}
void OAISharedRulesResult::setResult(const OAISharedRules &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAISharedRulesResult::is_result_Set() const{
    return m_result_isSet;
}

bool OAISharedRulesResult::is_result_Valid() const{
    return m_result_isValid;
}

bool OAISharedRulesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedRulesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
