/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilter.h
 *
 * 
 */

#ifndef OAIFilter_H
#define OAIFilter_H

#include <QJsonObject>

#include "OAITimeRange.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITimeRange;

class OAIFilter : public OAIObject {
public:
    OAIFilter();
    OAIFilter(QString json);
    ~OAIFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAbsoluteMatchOnly() const;
    void setAbsoluteMatchOnly(const bool &absolute_match_only);
    bool is_absolute_match_only_Set() const;
    bool is_absolute_match_only_Valid() const;

    QString getActorKey() const;
    void setActorKey(const QString &actor_key);
    bool is_actor_key_Set() const;
    bool is_actor_key_Valid() const;

    QString getAttributePath() const;
    void setAttributePath(const QString &attribute_path);
    bool is_attribute_path_Set() const;
    bool is_attribute_path_Valid() const;

    QString getAttributeValue() const;
    void setAttributeValue(const QString &attribute_value);
    bool is_attribute_value_Set() const;
    bool is_attribute_value_Valid() const;

    QString getChangeTxn() const;
    void setChangeTxn(const QString &change_txn);
    bool is_change_txn_Set() const;
    bool is_change_txn_Valid() const;

    QString getChangeType() const;
    void setChangeType(const QString &change_type);
    bool is_change_type_Set() const;
    bool is_change_type_Valid() const;

    bool isExcludeEmptyValues() const;
    void setExcludeEmptyValues(const bool &exclude_empty_values);
    bool is_exclude_empty_values_Set() const;
    bool is_exclude_empty_values_Valid() const;

    bool isNegativeMatch() const;
    void setNegativeMatch(const bool &negative_match);
    bool is_negative_match_Set() const;
    bool is_negative_match_Valid() const;

    QString getObjectKey() const;
    void setObjectKey(const QString &object_key);
    bool is_object_key_Set() const;
    bool is_object_key_Valid() const;

    QString getObjectType() const;
    void setObjectType(const QString &object_type);
    bool is_object_type_Set() const;
    bool is_object_type_Valid() const;

    QString getOrgKey() const;
    void setOrgKey(const QString &org_key);
    bool is_org_key_Set() const;
    bool is_org_key_Valid() const;

    OAITimeRange getTimeRange() const;
    void setTimeRange(const OAITimeRange &time_range);
    bool is_time_range_Set() const;
    bool is_time_range_Valid() const;

    QString getZoneKey() const;
    void setZoneKey(const QString &zone_key);
    bool is_zone_key_Set() const;
    bool is_zone_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_absolute_match_only;
    bool m_absolute_match_only_isSet;
    bool m_absolute_match_only_isValid;

    QString m_actor_key;
    bool m_actor_key_isSet;
    bool m_actor_key_isValid;

    QString m_attribute_path;
    bool m_attribute_path_isSet;
    bool m_attribute_path_isValid;

    QString m_attribute_value;
    bool m_attribute_value_isSet;
    bool m_attribute_value_isValid;

    QString m_change_txn;
    bool m_change_txn_isSet;
    bool m_change_txn_isValid;

    QString m_change_type;
    bool m_change_type_isSet;
    bool m_change_type_isValid;

    bool m_exclude_empty_values;
    bool m_exclude_empty_values_isSet;
    bool m_exclude_empty_values_isValid;

    bool m_negative_match;
    bool m_negative_match_isSet;
    bool m_negative_match_isValid;

    QString m_object_key;
    bool m_object_key_isSet;
    bool m_object_key_isValid;

    QString m_object_type;
    bool m_object_type_isSet;
    bool m_object_type_isValid;

    QString m_org_key;
    bool m_org_key_isSet;
    bool m_org_key_isValid;

    OAITimeRange m_time_range;
    bool m_time_range_isSet;
    bool m_time_range_isValid;

    QString m_zone_key;
    bool m_zone_key_isSet;
    bool m_zone_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilter)

#endif // OAIFilter_H
