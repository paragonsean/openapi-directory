/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_circuit_breakers_isSet = false;
    m_circuit_breakers_isValid = false;

    m_health_checks_isSet = false;
    m_health_checks_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outlier_detection_isSet = false;
    m_outlier_detection_isValid = false;

    m_require_tls_isSet = false;
    m_require_tls_isValid = false;

    m_zone_key_isSet = false;
    m_zone_key_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_cluster_key_isSet = false;
    m_cluster_key_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_circuit_breakers_isValid = ::OpenAPI::fromJsonValue(m_circuit_breakers, json[QString("circuit_breakers")]);
    m_circuit_breakers_isSet = !json[QString("circuit_breakers")].isNull() && m_circuit_breakers_isValid;

    m_health_checks_isValid = ::OpenAPI::fromJsonValue(m_health_checks, json[QString("health_checks")]);
    m_health_checks_isSet = !json[QString("health_checks")].isNull() && m_health_checks_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outlier_detection_isValid = ::OpenAPI::fromJsonValue(m_outlier_detection, json[QString("outlier_detection")]);
    m_outlier_detection_isSet = !json[QString("outlier_detection")].isNull() && m_outlier_detection_isValid;

    m_require_tls_isValid = ::OpenAPI::fromJsonValue(m_require_tls, json[QString("require_tls")]);
    m_require_tls_isSet = !json[QString("require_tls")].isNull() && m_require_tls_isValid;

    m_zone_key_isValid = ::OpenAPI::fromJsonValue(m_zone_key, json[QString("zone_key")]);
    m_zone_key_isSet = !json[QString("zone_key")].isNull() && m_zone_key_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_cluster_key_isValid = ::OpenAPI::fromJsonValue(m_cluster_key, json[QString("cluster_key")]);
    m_cluster_key_isSet = !json[QString("cluster_key")].isNull() && m_cluster_key_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_circuit_breakers.isSet()) {
        obj.insert(QString("circuit_breakers"), ::OpenAPI::toJsonValue(m_circuit_breakers));
    }
    if (m_health_checks.size() > 0) {
        obj.insert(QString("health_checks"), ::OpenAPI::toJsonValue(m_health_checks));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outlier_detection.isSet()) {
        obj.insert(QString("outlier_detection"), ::OpenAPI::toJsonValue(m_outlier_detection));
    }
    if (m_require_tls_isSet) {
        obj.insert(QString("require_tls"), ::OpenAPI::toJsonValue(m_require_tls));
    }
    if (m_zone_key_isSet) {
        obj.insert(QString("zone_key"), ::OpenAPI::toJsonValue(m_zone_key));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_cluster_key_isSet) {
        obj.insert(QString("cluster_key"), ::OpenAPI::toJsonValue(m_cluster_key));
    }
    return obj;
}

OAICircuitBreakers OAICluster::getCircuitBreakers() const {
    return m_circuit_breakers;
}
void OAICluster::setCircuitBreakers(const OAICircuitBreakers &circuit_breakers) {
    m_circuit_breakers = circuit_breakers;
    m_circuit_breakers_isSet = true;
}

bool OAICluster::is_circuit_breakers_Set() const{
    return m_circuit_breakers_isSet;
}

bool OAICluster::is_circuit_breakers_Valid() const{
    return m_circuit_breakers_isValid;
}

QList<OAIHealthCheck> OAICluster::getHealthChecks() const {
    return m_health_checks;
}
void OAICluster::setHealthChecks(const QList<OAIHealthCheck> &health_checks) {
    m_health_checks = health_checks;
    m_health_checks_isSet = true;
}

bool OAICluster::is_health_checks_Set() const{
    return m_health_checks_isSet;
}

bool OAICluster::is_health_checks_Valid() const{
    return m_health_checks_isValid;
}

QList<OAIInstance> OAICluster::getInstances() const {
    return m_instances;
}
void OAICluster::setInstances(const QList<OAIInstance> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAICluster::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAICluster::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAICluster::getName() const {
    return m_name;
}
void OAICluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAICluster::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutlierDetection OAICluster::getOutlierDetection() const {
    return m_outlier_detection;
}
void OAICluster::setOutlierDetection(const OAIOutlierDetection &outlier_detection) {
    m_outlier_detection = outlier_detection;
    m_outlier_detection_isSet = true;
}

bool OAICluster::is_outlier_detection_Set() const{
    return m_outlier_detection_isSet;
}

bool OAICluster::is_outlier_detection_Valid() const{
    return m_outlier_detection_isValid;
}

bool OAICluster::isRequireTls() const {
    return m_require_tls;
}
void OAICluster::setRequireTls(const bool &require_tls) {
    m_require_tls = require_tls;
    m_require_tls_isSet = true;
}

bool OAICluster::is_require_tls_Set() const{
    return m_require_tls_isSet;
}

bool OAICluster::is_require_tls_Valid() const{
    return m_require_tls_isValid;
}

QString OAICluster::getZoneKey() const {
    return m_zone_key;
}
void OAICluster::setZoneKey(const QString &zone_key) {
    m_zone_key = zone_key;
    m_zone_key_isSet = true;
}

bool OAICluster::is_zone_key_Set() const{
    return m_zone_key_isSet;
}

bool OAICluster::is_zone_key_Valid() const{
    return m_zone_key_isValid;
}

QString OAICluster::getChecksum() const {
    return m_checksum;
}
void OAICluster::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAICluster::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAICluster::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAICluster::getClusterKey() const {
    return m_cluster_key;
}
void OAICluster::setClusterKey(const QString &cluster_key) {
    m_cluster_key = cluster_key;
    m_cluster_key_isSet = true;
}

bool OAICluster::is_cluster_key_Set() const{
    return m_cluster_key_isSet;
}

bool OAICluster::is_cluster_key_Valid() const{
    return m_cluster_key_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_circuit_breakers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_zone_key_isValid && m_checksum_isValid && m_cluster_key_isValid && true;
}

} // namespace OpenAPI
