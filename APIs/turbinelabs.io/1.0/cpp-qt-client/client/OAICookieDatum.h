/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICookieDatum.h
 *
 * This describes a cookie that should be set in response to a HTTP request. 
 */

#ifndef OAICookieDatum_H
#define OAICookieDatum_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICookieDatum : public OAIObject {
public:
    OAICookieDatum();
    OAICookieDatum(QString json);
    ~OAICookieDatum() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    qint32 getExpiresInSec() const;
    void setExpiresInSec(const qint32 &expires_in_sec);
    bool is_expires_in_sec_Set() const;
    bool is_expires_in_sec_Valid() const;

    bool isHttpOnly() const;
    void setHttpOnly(const bool &http_only);
    bool is_http_only_Set() const;
    bool is_http_only_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getSameSite() const;
    void setSameSite(const QString &same_site);
    bool is_same_site_Set() const;
    bool is_same_site_Valid() const;

    bool isSecure() const;
    void setSecure(const bool &secure);
    bool is_secure_Set() const;
    bool is_secure_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    bool isValueIsLiteral() const;
    void setValueIsLiteral(const bool &value_is_literal);
    bool is_value_is_literal_Set() const;
    bool is_value_is_literal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    qint32 m_expires_in_sec;
    bool m_expires_in_sec_isSet;
    bool m_expires_in_sec_isValid;

    bool m_http_only;
    bool m_http_only_isSet;
    bool m_http_only_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_same_site;
    bool m_same_site_isSet;
    bool m_same_site_isValid;

    bool m_secure;
    bool m_secure_isSet;
    bool m_secure_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    bool m_value_is_literal;
    bool m_value_is_literal_isSet;
    bool m_value_is_literal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICookieDatum)

#endif // OAICookieDatum_H
