/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICORSConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICORSConfig::OAICORSConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICORSConfig::OAICORSConfig() {
    this->initializeModel();
}

OAICORSConfig::~OAICORSConfig() {}

void OAICORSConfig::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_allowed_headers_isSet = false;
    m_allowed_headers_isValid = false;

    m_allowed_methods_isSet = false;
    m_allowed_methods_isValid = false;

    m_allowed_origins_isSet = false;
    m_allowed_origins_isValid = false;

    m_exposed_headers_isSet = false;
    m_exposed_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;
}

void OAICORSConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICORSConfig::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("allow_credentials")]);
    m_allow_credentials_isSet = !json[QString("allow_credentials")].isNull() && m_allow_credentials_isValid;

    m_allowed_headers_isValid = ::OpenAPI::fromJsonValue(m_allowed_headers, json[QString("allowed_headers")]);
    m_allowed_headers_isSet = !json[QString("allowed_headers")].isNull() && m_allowed_headers_isValid;

    m_allowed_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_methods, json[QString("allowed_methods")]);
    m_allowed_methods_isSet = !json[QString("allowed_methods")].isNull() && m_allowed_methods_isValid;

    m_allowed_origins_isValid = ::OpenAPI::fromJsonValue(m_allowed_origins, json[QString("allowed_origins")]);
    m_allowed_origins_isSet = !json[QString("allowed_origins")].isNull() && m_allowed_origins_isValid;

    m_exposed_headers_isValid = ::OpenAPI::fromJsonValue(m_exposed_headers, json[QString("exposed_headers")]);
    m_exposed_headers_isSet = !json[QString("exposed_headers")].isNull() && m_exposed_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("max_age")]);
    m_max_age_isSet = !json[QString("max_age")].isNull() && m_max_age_isValid;
}

QString OAICORSConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICORSConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("allow_credentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_allowed_headers.size() > 0) {
        obj.insert(QString("allowed_headers"), ::OpenAPI::toJsonValue(m_allowed_headers));
    }
    if (m_allowed_methods.size() > 0) {
        obj.insert(QString("allowed_methods"), ::OpenAPI::toJsonValue(m_allowed_methods));
    }
    if (m_allowed_origins.size() > 0) {
        obj.insert(QString("allowed_origins"), ::OpenAPI::toJsonValue(m_allowed_origins));
    }
    if (m_exposed_headers.size() > 0) {
        obj.insert(QString("exposed_headers"), ::OpenAPI::toJsonValue(m_exposed_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("max_age"), ::OpenAPI::toJsonValue(m_max_age));
    }
    return obj;
}

bool OAICORSConfig::isAllowCredentials() const {
    return m_allow_credentials;
}
void OAICORSConfig::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAICORSConfig::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAICORSConfig::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList<QString> OAICORSConfig::getAllowedHeaders() const {
    return m_allowed_headers;
}
void OAICORSConfig::setAllowedHeaders(const QList<QString> &allowed_headers) {
    m_allowed_headers = allowed_headers;
    m_allowed_headers_isSet = true;
}

bool OAICORSConfig::is_allowed_headers_Set() const{
    return m_allowed_headers_isSet;
}

bool OAICORSConfig::is_allowed_headers_Valid() const{
    return m_allowed_headers_isValid;
}

QList<QString> OAICORSConfig::getAllowedMethods() const {
    return m_allowed_methods;
}
void OAICORSConfig::setAllowedMethods(const QList<QString> &allowed_methods) {
    m_allowed_methods = allowed_methods;
    m_allowed_methods_isSet = true;
}

bool OAICORSConfig::is_allowed_methods_Set() const{
    return m_allowed_methods_isSet;
}

bool OAICORSConfig::is_allowed_methods_Valid() const{
    return m_allowed_methods_isValid;
}

QList<QString> OAICORSConfig::getAllowedOrigins() const {
    return m_allowed_origins;
}
void OAICORSConfig::setAllowedOrigins(const QList<QString> &allowed_origins) {
    m_allowed_origins = allowed_origins;
    m_allowed_origins_isSet = true;
}

bool OAICORSConfig::is_allowed_origins_Set() const{
    return m_allowed_origins_isSet;
}

bool OAICORSConfig::is_allowed_origins_Valid() const{
    return m_allowed_origins_isValid;
}

QList<QString> OAICORSConfig::getExposedHeaders() const {
    return m_exposed_headers;
}
void OAICORSConfig::setExposedHeaders(const QList<QString> &exposed_headers) {
    m_exposed_headers = exposed_headers;
    m_exposed_headers_isSet = true;
}

bool OAICORSConfig::is_exposed_headers_Set() const{
    return m_exposed_headers_isSet;
}

bool OAICORSConfig::is_exposed_headers_Valid() const{
    return m_exposed_headers_isValid;
}

qint32 OAICORSConfig::getMaxAge() const {
    return m_max_age;
}
void OAICORSConfig::setMaxAge(const qint32 &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAICORSConfig::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAICORSConfig::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAICORSConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposed_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICORSConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_methods_isValid && m_allowed_origins_isValid && true;
}

} // namespace OpenAPI
