/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClusterApi_H
#define OAI_OAIClusterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICluster.h"
#include "OAIClusterCreate.h"
#include "OAIClusterResult.h"
#include "OAIError.h"
#include "OAIInstance.h"
#include "OAIInstanceResult.h"
#include "OAIMultiClusterResult.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClusterApi : public QObject {
    Q_OBJECT

public:
    OAIClusterApi(const int timeOut = 0);
    ~OAIClusterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cluster_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void clusterClusterKeyDelete(const QString &cluster_key, const QString &checksum);

    /**
    * @param[in]  cluster_key QString [required]
    */
    virtual void clusterClusterKeyGet(const QString &cluster_key);

    /**
    * @param[in]  checksum QString [required]
    * @param[in]  cluster_key QString [required]
    * @param[in]  instance_identifier QString [required]
    */
    virtual void clusterClusterKeyInstancesInstanceIdentifierDelete(const QString &checksum, const QString &cluster_key, const QString &instance_identifier);

    /**
    * @param[in]  cluster_key QString [required]
    * @param[in]  instance OAIInstance [required]
    */
    virtual void clusterClusterKeyInstancesPost(const QString &cluster_key, const OAIInstance &instance);

    /**
    * @param[in]  cluster_key QString [required]
    * @param[in]  cluster OAICluster [required]
    */
    virtual void clusterClusterKeyPut(const QString &cluster_key, const OAICluster &cluster);

    /**
    * @param[in]  filters QString [optional]
    */
    virtual void clusterGet(const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster OAIClusterCreate [required]
    */
    virtual void clusterPost(const OAIClusterCreate &cluster);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clusterClusterKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void clusterClusterKeyGetCallback(OAIHttpRequestWorker *worker);
    void clusterClusterKeyInstancesInstanceIdentifierDeleteCallback(OAIHttpRequestWorker *worker);
    void clusterClusterKeyInstancesPostCallback(OAIHttpRequestWorker *worker);
    void clusterClusterKeyPutCallback(OAIHttpRequestWorker *worker);
    void clusterGetCallback(OAIHttpRequestWorker *worker);
    void clusterPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clusterClusterKeyDeleteSignal(OAIObject summary);
    void clusterClusterKeyGetSignal(OAIClusterResult summary);
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignal(OAIObject summary);
    void clusterClusterKeyInstancesPostSignal(OAIInstanceResult summary);
    void clusterClusterKeyPutSignal(OAIClusterResult summary);
    void clusterGetSignal(OAIMultiClusterResult summary);
    void clusterPostSignal(OAIClusterResult summary);


    void clusterClusterKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clusterClusterKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIClusterResult summary);
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void clusterClusterKeyInstancesPostSignalFull(OAIHttpRequestWorker *worker, OAIInstanceResult summary);
    void clusterClusterKeyPutSignalFull(OAIHttpRequestWorker *worker, OAIClusterResult summary);
    void clusterGetSignalFull(OAIHttpRequestWorker *worker, OAIMultiClusterResult summary);
    void clusterPostSignalFull(OAIHttpRequestWorker *worker, OAIClusterResult summary);

    Q_DECL_DEPRECATED_X("Use clusterClusterKeyDeleteSignalError() instead")
    void clusterClusterKeyDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyGetSignalError() instead")
    void clusterClusterKeyGetSignalE(OAIClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyGetSignalError(OAIClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyInstancesInstanceIdentifierDeleteSignalError() instead")
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyInstancesPostSignalError() instead")
    void clusterClusterKeyInstancesPostSignalE(OAIInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyInstancesPostSignalError(OAIInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyPutSignalError() instead")
    void clusterClusterKeyPutSignalE(OAIClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyPutSignalError(OAIClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterGetSignalError() instead")
    void clusterGetSignalE(OAIMultiClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterGetSignalError(OAIMultiClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPostSignalError() instead")
    void clusterPostSignalE(OAIClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPostSignalError(OAIClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clusterClusterKeyDeleteSignalErrorFull() instead")
    void clusterClusterKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyGetSignalErrorFull() instead")
    void clusterClusterKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyInstancesInstanceIdentifierDeleteSignalErrorFull() instead")
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyInstancesInstanceIdentifierDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyInstancesPostSignalErrorFull() instead")
    void clusterClusterKeyInstancesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyInstancesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterClusterKeyPutSignalErrorFull() instead")
    void clusterClusterKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterClusterKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterGetSignalErrorFull() instead")
    void clusterGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterPostSignalErrorFull() instead")
    void clusterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
