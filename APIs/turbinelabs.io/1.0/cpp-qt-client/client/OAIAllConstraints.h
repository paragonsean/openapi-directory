/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAllConstraints.h
 *
 * 
 */

#ifndef OAIAllConstraints_H
#define OAIAllConstraints_H

#include <QJsonObject>

#include "OAIClusterConstraint.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClusterConstraint;

class OAIAllConstraints : public OAIObject {
public:
    OAIAllConstraints();
    OAIAllConstraints(QString json);
    ~OAIAllConstraints() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIClusterConstraint> getDark() const;
    void setDark(const QList<OAIClusterConstraint> &dark);
    bool is_dark_Set() const;
    bool is_dark_Valid() const;

    QList<OAIClusterConstraint> getLight() const;
    void setLight(const QList<OAIClusterConstraint> &light);
    bool is_light_Set() const;
    bool is_light_Valid() const;

    QList<OAIClusterConstraint> getTap() const;
    void setTap(const QList<OAIClusterConstraint> &tap);
    bool is_tap_Set() const;
    bool is_tap_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIClusterConstraint> m_dark;
    bool m_dark_isSet;
    bool m_dark_isValid;

    QList<OAIClusterConstraint> m_light;
    bool m_light_isSet;
    bool m_light_isValid;

    QList<OAIClusterConstraint> m_tap;
    bool m_tap_isSet;
    bool m_tap_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAllConstraints)

#endif // OAIAllConstraints_H
