/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheck::OAIHealthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheck::OAIHealthCheck() {
    this->initializeModel();
}

OAIHealthCheck::~OAIHealthCheck() {}

void OAIHealthCheck::initializeModel() {

    m_health_checker_isSet = false;
    m_health_checker_isValid = false;

    m_healthy_edge_interval_msec_isSet = false;
    m_healthy_edge_interval_msec_isValid = false;

    m_healthy_threshold_isSet = false;
    m_healthy_threshold_isValid = false;

    m_interval_jitter_msec_isSet = false;
    m_interval_jitter_msec_isValid = false;

    m_interval_msec_isSet = false;
    m_interval_msec_isValid = false;

    m_no_traffic_interval_msec_isSet = false;
    m_no_traffic_interval_msec_isValid = false;

    m_reuse_connection_isSet = false;
    m_reuse_connection_isValid = false;

    m_timeout_msec_isSet = false;
    m_timeout_msec_isValid = false;

    m_unhealthy_edge_interval_msec_isSet = false;
    m_unhealthy_edge_interval_msec_isValid = false;

    m_unhealthy_interval_msec_isSet = false;
    m_unhealthy_interval_msec_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;
}

void OAIHealthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheck::fromJsonObject(QJsonObject json) {

    m_health_checker_isValid = ::OpenAPI::fromJsonValue(m_health_checker, json[QString("health_checker")]);
    m_health_checker_isSet = !json[QString("health_checker")].isNull() && m_health_checker_isValid;

    m_healthy_edge_interval_msec_isValid = ::OpenAPI::fromJsonValue(m_healthy_edge_interval_msec, json[QString("healthy_edge_interval_msec")]);
    m_healthy_edge_interval_msec_isSet = !json[QString("healthy_edge_interval_msec")].isNull() && m_healthy_edge_interval_msec_isValid;

    m_healthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold, json[QString("healthy_threshold")]);
    m_healthy_threshold_isSet = !json[QString("healthy_threshold")].isNull() && m_healthy_threshold_isValid;

    m_interval_jitter_msec_isValid = ::OpenAPI::fromJsonValue(m_interval_jitter_msec, json[QString("interval_jitter_msec")]);
    m_interval_jitter_msec_isSet = !json[QString("interval_jitter_msec")].isNull() && m_interval_jitter_msec_isValid;

    m_interval_msec_isValid = ::OpenAPI::fromJsonValue(m_interval_msec, json[QString("interval_msec")]);
    m_interval_msec_isSet = !json[QString("interval_msec")].isNull() && m_interval_msec_isValid;

    m_no_traffic_interval_msec_isValid = ::OpenAPI::fromJsonValue(m_no_traffic_interval_msec, json[QString("no_traffic_interval_msec")]);
    m_no_traffic_interval_msec_isSet = !json[QString("no_traffic_interval_msec")].isNull() && m_no_traffic_interval_msec_isValid;

    m_reuse_connection_isValid = ::OpenAPI::fromJsonValue(m_reuse_connection, json[QString("reuse_connection")]);
    m_reuse_connection_isSet = !json[QString("reuse_connection")].isNull() && m_reuse_connection_isValid;

    m_timeout_msec_isValid = ::OpenAPI::fromJsonValue(m_timeout_msec, json[QString("timeout_msec")]);
    m_timeout_msec_isSet = !json[QString("timeout_msec")].isNull() && m_timeout_msec_isValid;

    m_unhealthy_edge_interval_msec_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_edge_interval_msec, json[QString("unhealthy_edge_interval_msec")]);
    m_unhealthy_edge_interval_msec_isSet = !json[QString("unhealthy_edge_interval_msec")].isNull() && m_unhealthy_edge_interval_msec_isValid;

    m_unhealthy_interval_msec_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_interval_msec, json[QString("unhealthy_interval_msec")]);
    m_unhealthy_interval_msec_isSet = !json[QString("unhealthy_interval_msec")].isNull() && m_unhealthy_interval_msec_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("unhealthy_threshold")]);
    m_unhealthy_threshold_isSet = !json[QString("unhealthy_threshold")].isNull() && m_unhealthy_threshold_isValid;
}

QString OAIHealthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_health_checker.isSet()) {
        obj.insert(QString("health_checker"), ::OpenAPI::toJsonValue(m_health_checker));
    }
    if (m_healthy_edge_interval_msec_isSet) {
        obj.insert(QString("healthy_edge_interval_msec"), ::OpenAPI::toJsonValue(m_healthy_edge_interval_msec));
    }
    if (m_healthy_threshold_isSet) {
        obj.insert(QString("healthy_threshold"), ::OpenAPI::toJsonValue(m_healthy_threshold));
    }
    if (m_interval_jitter_msec_isSet) {
        obj.insert(QString("interval_jitter_msec"), ::OpenAPI::toJsonValue(m_interval_jitter_msec));
    }
    if (m_interval_msec_isSet) {
        obj.insert(QString("interval_msec"), ::OpenAPI::toJsonValue(m_interval_msec));
    }
    if (m_no_traffic_interval_msec_isSet) {
        obj.insert(QString("no_traffic_interval_msec"), ::OpenAPI::toJsonValue(m_no_traffic_interval_msec));
    }
    if (m_reuse_connection_isSet) {
        obj.insert(QString("reuse_connection"), ::OpenAPI::toJsonValue(m_reuse_connection));
    }
    if (m_timeout_msec_isSet) {
        obj.insert(QString("timeout_msec"), ::OpenAPI::toJsonValue(m_timeout_msec));
    }
    if (m_unhealthy_edge_interval_msec_isSet) {
        obj.insert(QString("unhealthy_edge_interval_msec"), ::OpenAPI::toJsonValue(m_unhealthy_edge_interval_msec));
    }
    if (m_unhealthy_interval_msec_isSet) {
        obj.insert(QString("unhealthy_interval_msec"), ::OpenAPI::toJsonValue(m_unhealthy_interval_msec));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("unhealthy_threshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    return obj;
}

OAIHealthCheck_health_checker OAIHealthCheck::getHealthChecker() const {
    return m_health_checker;
}
void OAIHealthCheck::setHealthChecker(const OAIHealthCheck_health_checker &health_checker) {
    m_health_checker = health_checker;
    m_health_checker_isSet = true;
}

bool OAIHealthCheck::is_health_checker_Set() const{
    return m_health_checker_isSet;
}

bool OAIHealthCheck::is_health_checker_Valid() const{
    return m_health_checker_isValid;
}

qint32 OAIHealthCheck::getHealthyEdgeIntervalMsec() const {
    return m_healthy_edge_interval_msec;
}
void OAIHealthCheck::setHealthyEdgeIntervalMsec(const qint32 &healthy_edge_interval_msec) {
    m_healthy_edge_interval_msec = healthy_edge_interval_msec;
    m_healthy_edge_interval_msec_isSet = true;
}

bool OAIHealthCheck::is_healthy_edge_interval_msec_Set() const{
    return m_healthy_edge_interval_msec_isSet;
}

bool OAIHealthCheck::is_healthy_edge_interval_msec_Valid() const{
    return m_healthy_edge_interval_msec_isValid;
}

qint32 OAIHealthCheck::getHealthyThreshold() const {
    return m_healthy_threshold;
}
void OAIHealthCheck::setHealthyThreshold(const qint32 &healthy_threshold) {
    m_healthy_threshold = healthy_threshold;
    m_healthy_threshold_isSet = true;
}

bool OAIHealthCheck::is_healthy_threshold_Set() const{
    return m_healthy_threshold_isSet;
}

bool OAIHealthCheck::is_healthy_threshold_Valid() const{
    return m_healthy_threshold_isValid;
}

qint32 OAIHealthCheck::getIntervalJitterMsec() const {
    return m_interval_jitter_msec;
}
void OAIHealthCheck::setIntervalJitterMsec(const qint32 &interval_jitter_msec) {
    m_interval_jitter_msec = interval_jitter_msec;
    m_interval_jitter_msec_isSet = true;
}

bool OAIHealthCheck::is_interval_jitter_msec_Set() const{
    return m_interval_jitter_msec_isSet;
}

bool OAIHealthCheck::is_interval_jitter_msec_Valid() const{
    return m_interval_jitter_msec_isValid;
}

qint32 OAIHealthCheck::getIntervalMsec() const {
    return m_interval_msec;
}
void OAIHealthCheck::setIntervalMsec(const qint32 &interval_msec) {
    m_interval_msec = interval_msec;
    m_interval_msec_isSet = true;
}

bool OAIHealthCheck::is_interval_msec_Set() const{
    return m_interval_msec_isSet;
}

bool OAIHealthCheck::is_interval_msec_Valid() const{
    return m_interval_msec_isValid;
}

qint32 OAIHealthCheck::getNoTrafficIntervalMsec() const {
    return m_no_traffic_interval_msec;
}
void OAIHealthCheck::setNoTrafficIntervalMsec(const qint32 &no_traffic_interval_msec) {
    m_no_traffic_interval_msec = no_traffic_interval_msec;
    m_no_traffic_interval_msec_isSet = true;
}

bool OAIHealthCheck::is_no_traffic_interval_msec_Set() const{
    return m_no_traffic_interval_msec_isSet;
}

bool OAIHealthCheck::is_no_traffic_interval_msec_Valid() const{
    return m_no_traffic_interval_msec_isValid;
}

bool OAIHealthCheck::isReuseConnection() const {
    return m_reuse_connection;
}
void OAIHealthCheck::setReuseConnection(const bool &reuse_connection) {
    m_reuse_connection = reuse_connection;
    m_reuse_connection_isSet = true;
}

bool OAIHealthCheck::is_reuse_connection_Set() const{
    return m_reuse_connection_isSet;
}

bool OAIHealthCheck::is_reuse_connection_Valid() const{
    return m_reuse_connection_isValid;
}

qint32 OAIHealthCheck::getTimeoutMsec() const {
    return m_timeout_msec;
}
void OAIHealthCheck::setTimeoutMsec(const qint32 &timeout_msec) {
    m_timeout_msec = timeout_msec;
    m_timeout_msec_isSet = true;
}

bool OAIHealthCheck::is_timeout_msec_Set() const{
    return m_timeout_msec_isSet;
}

bool OAIHealthCheck::is_timeout_msec_Valid() const{
    return m_timeout_msec_isValid;
}

qint32 OAIHealthCheck::getUnhealthyEdgeIntervalMsec() const {
    return m_unhealthy_edge_interval_msec;
}
void OAIHealthCheck::setUnhealthyEdgeIntervalMsec(const qint32 &unhealthy_edge_interval_msec) {
    m_unhealthy_edge_interval_msec = unhealthy_edge_interval_msec;
    m_unhealthy_edge_interval_msec_isSet = true;
}

bool OAIHealthCheck::is_unhealthy_edge_interval_msec_Set() const{
    return m_unhealthy_edge_interval_msec_isSet;
}

bool OAIHealthCheck::is_unhealthy_edge_interval_msec_Valid() const{
    return m_unhealthy_edge_interval_msec_isValid;
}

qint32 OAIHealthCheck::getUnhealthyIntervalMsec() const {
    return m_unhealthy_interval_msec;
}
void OAIHealthCheck::setUnhealthyIntervalMsec(const qint32 &unhealthy_interval_msec) {
    m_unhealthy_interval_msec = unhealthy_interval_msec;
    m_unhealthy_interval_msec_isSet = true;
}

bool OAIHealthCheck::is_unhealthy_interval_msec_Set() const{
    return m_unhealthy_interval_msec_isSet;
}

bool OAIHealthCheck::is_unhealthy_interval_msec_Valid() const{
    return m_unhealthy_interval_msec_isValid;
}

qint32 OAIHealthCheck::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIHealthCheck::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIHealthCheck::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIHealthCheck::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

bool OAIHealthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_checker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_edge_interval_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_jitter_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_traffic_interval_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reuse_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_edge_interval_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_interval_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_health_checker_isValid && m_healthy_threshold_isValid && m_interval_msec_isValid && m_timeout_msec_isValid && m_unhealthy_threshold_isValid && true;
}

} // namespace OpenAPI
