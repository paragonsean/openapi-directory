/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProxyApi_H
#define OAI_OAIProxyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMultiProxyResult.h"
#include "OAIProxy.h"
#include "OAIProxyCreate.h"
#include "OAIProxyResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProxyApi : public QObject {
    Q_OBJECT

public:
    OAIProxyApi(const int timeOut = 0);
    ~OAIProxyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filters QString [optional]
    */
    virtual void proxyGet(const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  proxy OAIProxyCreate [required]
    */
    virtual void proxyPost(const OAIProxyCreate &proxy);

    /**
    * @param[in]  proxy_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void proxyProxyKeyDelete(const QString &proxy_key, const QString &checksum);

    /**
    * @param[in]  proxy_key QString [required]
    */
    virtual void proxyProxyKeyGet(const QString &proxy_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void proxyGetCallback(OAIHttpRequestWorker *worker);
    void proxyPostCallback(OAIHttpRequestWorker *worker);
    void proxyProxyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void proxyProxyKeyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void proxyGetSignal(OAIMultiProxyResult summary);
    void proxyPostSignal(OAIProxyResult summary);
    void proxyProxyKeyDeleteSignal(OAIProxy summary);
    void proxyProxyKeyGetSignal(OAIProxyResult summary);


    void proxyGetSignalFull(OAIHttpRequestWorker *worker, OAIMultiProxyResult summary);
    void proxyPostSignalFull(OAIHttpRequestWorker *worker, OAIProxyResult summary);
    void proxyProxyKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIProxy summary);
    void proxyProxyKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIProxyResult summary);

    Q_DECL_DEPRECATED_X("Use proxyGetSignalError() instead")
    void proxyGetSignalE(OAIMultiProxyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyGetSignalError(OAIMultiProxyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyPostSignalError() instead")
    void proxyPostSignalE(OAIProxyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyPostSignalError(OAIProxyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyProxyKeyDeleteSignalError() instead")
    void proxyProxyKeyDeleteSignalE(OAIProxy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyProxyKeyDeleteSignalError(OAIProxy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyProxyKeyGetSignalError() instead")
    void proxyProxyKeyGetSignalE(OAIProxyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyProxyKeyGetSignalError(OAIProxyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use proxyGetSignalErrorFull() instead")
    void proxyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyPostSignalErrorFull() instead")
    void proxyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyProxyKeyDeleteSignalErrorFull() instead")
    void proxyProxyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyProxyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proxyProxyKeyGetSignalErrorFull() instead")
    void proxyProxyKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proxyProxyKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
