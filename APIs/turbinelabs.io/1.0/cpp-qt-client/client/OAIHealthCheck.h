/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHealthCheck.h
 *
 * Configures active health checking for every instance in a cluster. 
 */

#ifndef OAIHealthCheck_H
#define OAIHealthCheck_H

#include <QJsonObject>

#include "OAIHealthCheck_health_checker.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHealthCheck_health_checker;

class OAIHealthCheck : public OAIObject {
public:
    OAIHealthCheck();
    OAIHealthCheck(QString json);
    ~OAIHealthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHealthCheck_health_checker getHealthChecker() const;
    void setHealthChecker(const OAIHealthCheck_health_checker &health_checker);
    bool is_health_checker_Set() const;
    bool is_health_checker_Valid() const;

    qint32 getHealthyEdgeIntervalMsec() const;
    void setHealthyEdgeIntervalMsec(const qint32 &healthy_edge_interval_msec);
    bool is_healthy_edge_interval_msec_Set() const;
    bool is_healthy_edge_interval_msec_Valid() const;

    qint32 getHealthyThreshold() const;
    void setHealthyThreshold(const qint32 &healthy_threshold);
    bool is_healthy_threshold_Set() const;
    bool is_healthy_threshold_Valid() const;

    qint32 getIntervalJitterMsec() const;
    void setIntervalJitterMsec(const qint32 &interval_jitter_msec);
    bool is_interval_jitter_msec_Set() const;
    bool is_interval_jitter_msec_Valid() const;

    qint32 getIntervalMsec() const;
    void setIntervalMsec(const qint32 &interval_msec);
    bool is_interval_msec_Set() const;
    bool is_interval_msec_Valid() const;

    qint32 getNoTrafficIntervalMsec() const;
    void setNoTrafficIntervalMsec(const qint32 &no_traffic_interval_msec);
    bool is_no_traffic_interval_msec_Set() const;
    bool is_no_traffic_interval_msec_Valid() const;

    bool isReuseConnection() const;
    void setReuseConnection(const bool &reuse_connection);
    bool is_reuse_connection_Set() const;
    bool is_reuse_connection_Valid() const;

    qint32 getTimeoutMsec() const;
    void setTimeoutMsec(const qint32 &timeout_msec);
    bool is_timeout_msec_Set() const;
    bool is_timeout_msec_Valid() const;

    qint32 getUnhealthyEdgeIntervalMsec() const;
    void setUnhealthyEdgeIntervalMsec(const qint32 &unhealthy_edge_interval_msec);
    bool is_unhealthy_edge_interval_msec_Set() const;
    bool is_unhealthy_edge_interval_msec_Valid() const;

    qint32 getUnhealthyIntervalMsec() const;
    void setUnhealthyIntervalMsec(const qint32 &unhealthy_interval_msec);
    bool is_unhealthy_interval_msec_Set() const;
    bool is_unhealthy_interval_msec_Valid() const;

    qint32 getUnhealthyThreshold() const;
    void setUnhealthyThreshold(const qint32 &unhealthy_threshold);
    bool is_unhealthy_threshold_Set() const;
    bool is_unhealthy_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHealthCheck_health_checker m_health_checker;
    bool m_health_checker_isSet;
    bool m_health_checker_isValid;

    qint32 m_healthy_edge_interval_msec;
    bool m_healthy_edge_interval_msec_isSet;
    bool m_healthy_edge_interval_msec_isValid;

    qint32 m_healthy_threshold;
    bool m_healthy_threshold_isSet;
    bool m_healthy_threshold_isValid;

    qint32 m_interval_jitter_msec;
    bool m_interval_jitter_msec_isSet;
    bool m_interval_jitter_msec_isValid;

    qint32 m_interval_msec;
    bool m_interval_msec_isSet;
    bool m_interval_msec_isValid;

    qint32 m_no_traffic_interval_msec;
    bool m_no_traffic_interval_msec_isSet;
    bool m_no_traffic_interval_msec_isValid;

    bool m_reuse_connection;
    bool m_reuse_connection_isSet;
    bool m_reuse_connection_isValid;

    qint32 m_timeout_msec;
    bool m_timeout_msec_isSet;
    bool m_timeout_msec_isValid;

    qint32 m_unhealthy_edge_interval_msec;
    bool m_unhealthy_edge_interval_msec_isSet;
    bool m_unhealthy_edge_interval_msec_isValid;

    qint32 m_unhealthy_interval_msec;
    bool m_unhealthy_interval_msec_isSet;
    bool m_unhealthy_interval_msec_isValid;

    qint32 m_unhealthy_threshold;
    bool m_unhealthy_threshold_isSet;
    bool m_unhealthy_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHealthCheck)

#endif // OAIHealthCheck_H
