/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSLConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSLConfig::OAISSLConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSLConfig::OAISSLConfig() {
    this->initializeModel();
}

OAISSLConfig::~OAISSLConfig() {}

void OAISSLConfig::initializeModel() {

    m_cert_key_pairs_isSet = false;
    m_cert_key_pairs_isValid = false;

    m_cipher_filter_isSet = false;
    m_cipher_filter_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;
}

void OAISSLConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSLConfig::fromJsonObject(QJsonObject json) {

    m_cert_key_pairs_isValid = ::OpenAPI::fromJsonValue(m_cert_key_pairs, json[QString("cert_key_pairs")]);
    m_cert_key_pairs_isSet = !json[QString("cert_key_pairs")].isNull() && m_cert_key_pairs_isValid;

    m_cipher_filter_isValid = ::OpenAPI::fromJsonValue(m_cipher_filter, json[QString("cipher_filter")]);
    m_cipher_filter_isSet = !json[QString("cipher_filter")].isNull() && m_cipher_filter_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;
}

QString OAISSLConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSLConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_key_pairs.size() > 0) {
        obj.insert(QString("cert_key_pairs"), ::OpenAPI::toJsonValue(m_cert_key_pairs));
    }
    if (m_cipher_filter_isSet) {
        obj.insert(QString("cipher_filter"), ::OpenAPI::toJsonValue(m_cipher_filter));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    return obj;
}

QList<OAICertKeyPathPair> OAISSLConfig::getCertKeyPairs() const {
    return m_cert_key_pairs;
}
void OAISSLConfig::setCertKeyPairs(const QList<OAICertKeyPathPair> &cert_key_pairs) {
    m_cert_key_pairs = cert_key_pairs;
    m_cert_key_pairs_isSet = true;
}

bool OAISSLConfig::is_cert_key_pairs_Set() const{
    return m_cert_key_pairs_isSet;
}

bool OAISSLConfig::is_cert_key_pairs_Valid() const{
    return m_cert_key_pairs_isValid;
}

QString OAISSLConfig::getCipherFilter() const {
    return m_cipher_filter;
}
void OAISSLConfig::setCipherFilter(const QString &cipher_filter) {
    m_cipher_filter = cipher_filter;
    m_cipher_filter_isSet = true;
}

bool OAISSLConfig::is_cipher_filter_Set() const{
    return m_cipher_filter_isSet;
}

bool OAISSLConfig::is_cipher_filter_Valid() const{
    return m_cipher_filter_isValid;
}

QList<QString> OAISSLConfig::getProtocols() const {
    return m_protocols;
}
void OAISSLConfig::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAISSLConfig::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAISSLConfig::is_protocols_Valid() const{
    return m_protocols_isValid;
}

bool OAISSLConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_key_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cipher_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSLConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cert_key_pairs_isValid && true;
}

} // namespace OpenAPI
