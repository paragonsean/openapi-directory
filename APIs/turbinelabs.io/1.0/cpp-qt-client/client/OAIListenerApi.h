/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListenerApi_H
#define OAI_OAIListenerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIListener.h"
#include "OAIListenerCreate.h"
#include "OAIListenerResult.h"
#include "OAIMultiListenerResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListenerApi : public QObject {
    Q_OBJECT

public:
    OAIListenerApi(const int timeOut = 0);
    ~OAIListenerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filters QString [optional]
    */
    virtual void listenerGet(const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  listener_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void listenerListenerKeyDelete(const QString &listener_key, const QString &checksum);

    /**
    * @param[in]  listener_key QString [required]
    */
    virtual void listenerListenerKeyGet(const QString &listener_key);

    /**
    * @param[in]  listener_key QString [required]
    * @param[in]  listener OAIListener [required]
    */
    virtual void listenerListenerKeyPut(const QString &listener_key, const OAIListener &listener);

    /**
    * @param[in]  listener OAIListenerCreate [required]
    */
    virtual void listenerPost(const OAIListenerCreate &listener);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listenerGetCallback(OAIHttpRequestWorker *worker);
    void listenerListenerKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void listenerListenerKeyGetCallback(OAIHttpRequestWorker *worker);
    void listenerListenerKeyPutCallback(OAIHttpRequestWorker *worker);
    void listenerPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listenerGetSignal(OAIMultiListenerResult summary);
    void listenerListenerKeyDeleteSignal(OAIListener summary);
    void listenerListenerKeyGetSignal(OAIListenerResult summary);
    void listenerListenerKeyPutSignal(OAIListenerResult summary);
    void listenerPostSignal(OAIListenerResult summary);


    void listenerGetSignalFull(OAIHttpRequestWorker *worker, OAIMultiListenerResult summary);
    void listenerListenerKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIListener summary);
    void listenerListenerKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIListenerResult summary);
    void listenerListenerKeyPutSignalFull(OAIHttpRequestWorker *worker, OAIListenerResult summary);
    void listenerPostSignalFull(OAIHttpRequestWorker *worker, OAIListenerResult summary);

    Q_DECL_DEPRECATED_X("Use listenerGetSignalError() instead")
    void listenerGetSignalE(OAIMultiListenerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerGetSignalError(OAIMultiListenerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyDeleteSignalError() instead")
    void listenerListenerKeyDeleteSignalE(OAIListener summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyDeleteSignalError(OAIListener summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyGetSignalError() instead")
    void listenerListenerKeyGetSignalE(OAIListenerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyGetSignalError(OAIListenerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyPutSignalError() instead")
    void listenerListenerKeyPutSignalE(OAIListenerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyPutSignalError(OAIListenerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerPostSignalError() instead")
    void listenerPostSignalE(OAIListenerResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerPostSignalError(OAIListenerResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listenerGetSignalErrorFull() instead")
    void listenerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyDeleteSignalErrorFull() instead")
    void listenerListenerKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyGetSignalErrorFull() instead")
    void listenerListenerKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerListenerKeyPutSignalErrorFull() instead")
    void listenerListenerKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerListenerKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listenerPostSignalErrorFull() instead")
    void listenerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listenerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
