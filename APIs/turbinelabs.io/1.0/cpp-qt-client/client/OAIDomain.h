/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDomain.h
 *
 * 
 */

#ifndef OAIDomain_H
#define OAIDomain_H

#include <QJsonObject>

#include "OAICORSConfig.h"
#include "OAIRedirect.h"
#include "OAISSLConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICORSConfig;
class OAIRedirect;
class OAISSLConfig;

class OAIDomain : public OAIObject {
public:
    OAIDomain();
    OAIDomain(QString json);
    ~OAIDomain() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAliases() const;
    void setAliases(const QList<QString> &aliases);
    bool is_aliases_Set() const;
    bool is_aliases_Valid() const;

    QString getChecksum() const;
    void setChecksum(const QString &checksum);
    bool is_checksum_Set() const;
    bool is_checksum_Valid() const;

    OAICORSConfig getCorsConfig() const;
    void setCorsConfig(const OAICORSConfig &cors_config);
    bool is_cors_config_Set() const;
    bool is_cors_config_Valid() const;

    QString getDomainKey() const;
    void setDomainKey(const QString &domain_key);
    bool is_domain_key_Set() const;
    bool is_domain_key_Valid() const;

    bool isForceHttps() const;
    void setForceHttps(const bool &force_https);
    bool is_force_https_Set() const;
    bool is_force_https_Valid() const;

    bool isGzipEnabled() const;
    void setGzipEnabled(const bool &gzip_enabled);
    bool is_gzip_enabled_Set() const;
    bool is_gzip_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QList<OAIRedirect> getRedirects() const;
    void setRedirects(const QList<OAIRedirect> &redirects);
    bool is_redirects_Set() const;
    bool is_redirects_Valid() const;

    OAISSLConfig getSslConfig() const;
    void setSslConfig(const OAISSLConfig &ssl_config);
    bool is_ssl_config_Set() const;
    bool is_ssl_config_Valid() const;

    QString getZoneKey() const;
    void setZoneKey(const QString &zone_key);
    bool is_zone_key_Set() const;
    bool is_zone_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_aliases;
    bool m_aliases_isSet;
    bool m_aliases_isValid;

    QString m_checksum;
    bool m_checksum_isSet;
    bool m_checksum_isValid;

    OAICORSConfig m_cors_config;
    bool m_cors_config_isSet;
    bool m_cors_config_isValid;

    QString m_domain_key;
    bool m_domain_key_isSet;
    bool m_domain_key_isValid;

    bool m_force_https;
    bool m_force_https_isSet;
    bool m_force_https_isValid;

    bool m_gzip_enabled;
    bool m_gzip_enabled_isSet;
    bool m_gzip_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QList<OAIRedirect> m_redirects;
    bool m_redirects_isSet;
    bool m_redirects_isValid;

    OAISSLConfig m_ssl_config;
    bool m_ssl_config_isSet;
    bool m_ssl_config_isValid;

    QString m_zone_key;
    bool m_zone_key_isSet;
    bool m_zone_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDomain)

#endif // OAIDomain_H
