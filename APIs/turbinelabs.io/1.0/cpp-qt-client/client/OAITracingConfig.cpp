/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITracingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITracingConfig::OAITracingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITracingConfig::OAITracingConfig() {
    this->initializeModel();
}

OAITracingConfig::~OAITracingConfig() {}

void OAITracingConfig::initializeModel() {

    m_ingress_isSet = false;
    m_ingress_isValid = false;

    m_request_headers_for_tags_isSet = false;
    m_request_headers_for_tags_isValid = false;
}

void OAITracingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITracingConfig::fromJsonObject(QJsonObject json) {

    m_ingress_isValid = ::OpenAPI::fromJsonValue(m_ingress, json[QString("ingress")]);
    m_ingress_isSet = !json[QString("ingress")].isNull() && m_ingress_isValid;

    m_request_headers_for_tags_isValid = ::OpenAPI::fromJsonValue(m_request_headers_for_tags, json[QString("request_headers_for_tags")]);
    m_request_headers_for_tags_isSet = !json[QString("request_headers_for_tags")].isNull() && m_request_headers_for_tags_isValid;
}

QString OAITracingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITracingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ingress_isSet) {
        obj.insert(QString("ingress"), ::OpenAPI::toJsonValue(m_ingress));
    }
    if (m_request_headers_for_tags.size() > 0) {
        obj.insert(QString("request_headers_for_tags"), ::OpenAPI::toJsonValue(m_request_headers_for_tags));
    }
    return obj;
}

bool OAITracingConfig::isIngress() const {
    return m_ingress;
}
void OAITracingConfig::setIngress(const bool &ingress) {
    m_ingress = ingress;
    m_ingress_isSet = true;
}

bool OAITracingConfig::is_ingress_Set() const{
    return m_ingress_isSet;
}

bool OAITracingConfig::is_ingress_Valid() const{
    return m_ingress_isValid;
}

QList<QString> OAITracingConfig::getRequestHeadersForTags() const {
    return m_request_headers_for_tags;
}
void OAITracingConfig::setRequestHeadersForTags(const QList<QString> &request_headers_for_tags) {
    m_request_headers_for_tags = request_headers_for_tags;
    m_request_headers_for_tags_isSet = true;
}

bool OAITracingConfig::is_request_headers_for_tags_Set() const{
    return m_request_headers_for_tags_isSet;
}

bool OAITracingConfig::is_request_headers_for_tags_Valid() const{
    return m_request_headers_for_tags_isValid;
}

bool OAITracingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_headers_for_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITracingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
