/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRouteApi_H
#define OAI_OAIRouteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMultiRouteResult.h"
#include "OAIObject.h"
#include "OAIRoute.h"
#include "OAIRouteCreate.h"
#include "OAIRouteResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRouteApi : public QObject {
    Q_OBJECT

public:
    OAIRouteApi(const int timeOut = 0);
    ~OAIRouteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filters QString [optional]
    */
    virtual void routeGet(const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route OAIRouteCreate [required]
    */
    virtual void routePost(const OAIRouteCreate &route);

    /**
    * @param[in]  route_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void routeRouteKeyDelete(const QString &route_key, const QString &checksum);

    /**
    * @param[in]  route_key QString [required]
    */
    virtual void routeRouteKeyGet(const QString &route_key);

    /**
    * @param[in]  route_key QString [required]
    * @param[in]  route OAIRoute [required]
    */
    virtual void routeRouteKeyPut(const QString &route_key, const OAIRoute &route);

    /**
    * @param[in]  shared_rules_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void sharedRulesSharedRulesKeyDelete(const QString &shared_rules_key, const QString &checksum);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routeGetCallback(OAIHttpRequestWorker *worker);
    void routePostCallback(OAIHttpRequestWorker *worker);
    void routeRouteKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void routeRouteKeyGetCallback(OAIHttpRequestWorker *worker);
    void routeRouteKeyPutCallback(OAIHttpRequestWorker *worker);
    void sharedRulesSharedRulesKeyDeleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routeGetSignal(OAIMultiRouteResult summary);
    void routePostSignal(OAIRouteResult summary);
    void routeRouteKeyDeleteSignal(OAIObject summary);
    void routeRouteKeyGetSignal(OAIRouteResult summary);
    void routeRouteKeyPutSignal(OAIRouteResult summary);
    void sharedRulesSharedRulesKeyDeleteSignal(OAIObject summary);


    void routeGetSignalFull(OAIHttpRequestWorker *worker, OAIMultiRouteResult summary);
    void routePostSignalFull(OAIHttpRequestWorker *worker, OAIRouteResult summary);
    void routeRouteKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void routeRouteKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIRouteResult summary);
    void routeRouteKeyPutSignalFull(OAIHttpRequestWorker *worker, OAIRouteResult summary);
    void sharedRulesSharedRulesKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use routeGetSignalError() instead")
    void routeGetSignalE(OAIMultiRouteResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeGetSignalError(OAIMultiRouteResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routePostSignalError() instead")
    void routePostSignalE(OAIRouteResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routePostSignalError(OAIRouteResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyDeleteSignalError() instead")
    void routeRouteKeyDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyGetSignalError() instead")
    void routeRouteKeyGetSignalE(OAIRouteResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyGetSignalError(OAIRouteResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyPutSignalError() instead")
    void routeRouteKeyPutSignalE(OAIRouteResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyPutSignalError(OAIRouteResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedRulesSharedRulesKeyDeleteSignalError() instead")
    void sharedRulesSharedRulesKeyDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedRulesSharedRulesKeyDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routeGetSignalErrorFull() instead")
    void routeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routePostSignalErrorFull() instead")
    void routePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyDeleteSignalErrorFull() instead")
    void routeRouteKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyGetSignalErrorFull() instead")
    void routeRouteKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routeRouteKeyPutSignalErrorFull() instead")
    void routeRouteKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routeRouteKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedRulesSharedRulesKeyDeleteSignalErrorFull() instead")
    void sharedRulesSharedRulesKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedRulesSharedRulesKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
