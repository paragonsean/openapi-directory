/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRedirect.h
 *
 * Specifies how a URL within a domain should be rewritten when requested. 
 */

#ifndef OAIRedirect_H
#define OAIRedirect_H

#include <QJsonObject>

#include "OAIHeaderConstraint.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHeaderConstraint;

class OAIRedirect : public OAIObject {
public:
    OAIRedirect();
    OAIRedirect(QString json);
    ~OAIRedirect() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFrom() const;
    void setFrom(const QString &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    QList<OAIHeaderConstraint> getHeaderConstraints() const;
    void setHeaderConstraints(const QList<OAIHeaderConstraint> &header_constraints);
    bool is_header_constraints_Set() const;
    bool is_header_constraints_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRedirectType() const;
    void setRedirectType(const QString &redirect_type);
    bool is_redirect_type_Set() const;
    bool is_redirect_type_Valid() const;

    QString getTo() const;
    void setTo(const QString &to);
    bool is_to_Set() const;
    bool is_to_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    QList<OAIHeaderConstraint> m_header_constraints;
    bool m_header_constraints_isSet;
    bool m_header_constraints_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_redirect_type;
    bool m_redirect_type_isSet;
    bool m_redirect_type_isValid;

    QString m_to;
    bool m_to_isSet;
    bool m_to_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRedirect)

#endif // OAIRedirect_H
