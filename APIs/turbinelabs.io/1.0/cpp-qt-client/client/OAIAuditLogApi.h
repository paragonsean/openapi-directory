/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuditLogApi_H
#define OAI_OAIAuditLogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginatedChangeDescriptions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuditLogApi : public QObject {
    Q_OBJECT

public:
    OAIAuditLogApi(const int timeOut = 0);
    ~OAIAuditLogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filter QString [optional]
    */
    virtual void changelogAdhocGet(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cluster_key QString [required]
    * @param[in]  start double [optional]
    * @param[in]  end double [optional]
    * @param[in]  max_results double [optional]
    * @param[in]  ref_id QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void changelogClusterGraphClusterKeyGet(const QString &cluster_key, const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_results = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ref_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain_key QString [required]
    * @param[in]  start double [optional]
    * @param[in]  end double [optional]
    * @param[in]  max_results double [optional]
    * @param[in]  ref_id QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void changelogDomainGraphDomainKeyGet(const QString &domain_key, const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_results = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ref_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route_key QString [required]
    * @param[in]  start double [optional]
    * @param[in]  end double [optional]
    * @param[in]  max_results double [optional]
    * @param[in]  ref_id QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void changelogRouteGraphRouteKeyGet(const QString &route_key, const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_results = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ref_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  shared_rules_key QString [required]
    * @param[in]  start double [optional]
    * @param[in]  end double [optional]
    * @param[in]  max_results double [optional]
    * @param[in]  ref_id QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void changelogSharedRulesGraphSharedRulesKeyGet(const QString &shared_rules_key, const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_results = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ref_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zone_key QString [required]
    * @param[in]  start double [optional]
    * @param[in]  end double [optional]
    * @param[in]  max_results double [optional]
    * @param[in]  ref_id QString [optional]
    * @param[in]  direction QString [optional]
    */
    virtual void changelogZoneZoneKeyGet(const QString &zone_key, const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_results = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ref_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changelogAdhocGetCallback(OAIHttpRequestWorker *worker);
    void changelogClusterGraphClusterKeyGetCallback(OAIHttpRequestWorker *worker);
    void changelogDomainGraphDomainKeyGetCallback(OAIHttpRequestWorker *worker);
    void changelogRouteGraphRouteKeyGetCallback(OAIHttpRequestWorker *worker);
    void changelogSharedRulesGraphSharedRulesKeyGetCallback(OAIHttpRequestWorker *worker);
    void changelogZoneZoneKeyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changelogAdhocGetSignal(OAIPaginatedChangeDescriptions summary);
    void changelogClusterGraphClusterKeyGetSignal(OAIPaginatedChangeDescriptions summary);
    void changelogDomainGraphDomainKeyGetSignal(OAIPaginatedChangeDescriptions summary);
    void changelogRouteGraphRouteKeyGetSignal(OAIPaginatedChangeDescriptions summary);
    void changelogSharedRulesGraphSharedRulesKeyGetSignal(OAIPaginatedChangeDescriptions summary);
    void changelogZoneZoneKeyGetSignal(OAIPaginatedChangeDescriptions summary);


    void changelogAdhocGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);
    void changelogClusterGraphClusterKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);
    void changelogDomainGraphDomainKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);
    void changelogRouteGraphRouteKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);
    void changelogSharedRulesGraphSharedRulesKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);
    void changelogZoneZoneKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedChangeDescriptions summary);

    Q_DECL_DEPRECATED_X("Use changelogAdhocGetSignalError() instead")
    void changelogAdhocGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogAdhocGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogClusterGraphClusterKeyGetSignalError() instead")
    void changelogClusterGraphClusterKeyGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogClusterGraphClusterKeyGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogDomainGraphDomainKeyGetSignalError() instead")
    void changelogDomainGraphDomainKeyGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogDomainGraphDomainKeyGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogRouteGraphRouteKeyGetSignalError() instead")
    void changelogRouteGraphRouteKeyGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogRouteGraphRouteKeyGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogSharedRulesGraphSharedRulesKeyGetSignalError() instead")
    void changelogSharedRulesGraphSharedRulesKeyGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogSharedRulesGraphSharedRulesKeyGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogZoneZoneKeyGetSignalError() instead")
    void changelogZoneZoneKeyGetSignalE(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogZoneZoneKeyGetSignalError(OAIPaginatedChangeDescriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changelogAdhocGetSignalErrorFull() instead")
    void changelogAdhocGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogAdhocGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogClusterGraphClusterKeyGetSignalErrorFull() instead")
    void changelogClusterGraphClusterKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogClusterGraphClusterKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogDomainGraphDomainKeyGetSignalErrorFull() instead")
    void changelogDomainGraphDomainKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogDomainGraphDomainKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogRouteGraphRouteKeyGetSignalErrorFull() instead")
    void changelogRouteGraphRouteKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogRouteGraphRouteKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogSharedRulesGraphSharedRulesKeyGetSignalErrorFull() instead")
    void changelogSharedRulesGraphSharedRulesKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogSharedRulesGraphSharedRulesKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changelogZoneZoneKeyGetSignalErrorFull() instead")
    void changelogZoneZoneKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changelogZoneZoneKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
