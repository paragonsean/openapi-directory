/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIZoneApi_H
#define OAI_OAIZoneApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIMultiZoneResult.h"
#include "OAIObject.h"
#include "OAIZoneCreate.h"
#include "OAIZoneResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIZoneApi : public QObject {
    Q_OBJECT

public:
    OAIZoneApi(const int timeOut = 0);
    ~OAIZoneApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filters QString [optional]
    */
    virtual void zoneGet(const ::OpenAPI::OptionalParam<QString> &filters = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zone OAIZoneCreate [required]
    */
    virtual void zonePost(const OAIZoneCreate &zone);

    /**
    * @param[in]  zone_key QString [required]
    * @param[in]  checksum QString [required]
    */
    virtual void zoneZoneKeyDelete(const QString &zone_key, const QString &checksum);

    /**
    * @param[in]  zone_key QString [required]
    */
    virtual void zoneZoneKeyGet(const QString &zone_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void zoneGetCallback(OAIHttpRequestWorker *worker);
    void zonePostCallback(OAIHttpRequestWorker *worker);
    void zoneZoneKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void zoneZoneKeyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void zoneGetSignal(OAIMultiZoneResult summary);
    void zonePostSignal(OAIZoneResult summary);
    void zoneZoneKeyDeleteSignal(OAIObject summary);
    void zoneZoneKeyGetSignal(OAIZoneResult summary);


    void zoneGetSignalFull(OAIHttpRequestWorker *worker, OAIMultiZoneResult summary);
    void zonePostSignalFull(OAIHttpRequestWorker *worker, OAIZoneResult summary);
    void zoneZoneKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void zoneZoneKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIZoneResult summary);

    Q_DECL_DEPRECATED_X("Use zoneGetSignalError() instead")
    void zoneGetSignalE(OAIMultiZoneResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneGetSignalError(OAIMultiZoneResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonePostSignalError() instead")
    void zonePostSignalE(OAIZoneResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zonePostSignalError(OAIZoneResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoneZoneKeyDeleteSignalError() instead")
    void zoneZoneKeyDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneZoneKeyDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoneZoneKeyGetSignalError() instead")
    void zoneZoneKeyGetSignalE(OAIZoneResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneZoneKeyGetSignalError(OAIZoneResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use zoneGetSignalErrorFull() instead")
    void zoneGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonePostSignalErrorFull() instead")
    void zonePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoneZoneKeyDeleteSignalErrorFull() instead")
    void zoneZoneKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneZoneKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoneZoneKeyGetSignalErrorFull() instead")
    void zoneZoneKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zoneZoneKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
