/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedRules::OAISharedRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedRules::OAISharedRules() {
    this->initializeModel();
}

OAISharedRules::~OAISharedRules() {}

void OAISharedRules::initializeModel() {

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_cohort_seed_isSet = false;
    m_cohort_seed_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_response_data_isSet = false;
    m_response_data_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_shared_rules_key_isSet = false;
    m_shared_rules_key_isValid = false;

    m_zone_key_isSet = false;
    m_zone_key_isValid = false;
}

void OAISharedRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedRules::fromJsonObject(QJsonObject json) {

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_cohort_seed_isValid = ::OpenAPI::fromJsonValue(m_cohort_seed, json[QString("cohort_seed")]);
    m_cohort_seed_isSet = !json[QString("cohort_seed")].isNull() && m_cohort_seed_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_response_data_isValid = ::OpenAPI::fromJsonValue(m_response_data, json[QString("response_data")]);
    m_response_data_isSet = !json[QString("response_data")].isNull() && m_response_data_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retry_policy")]);
    m_retry_policy_isSet = !json[QString("retry_policy")].isNull() && m_retry_policy_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_shared_rules_key_isValid = ::OpenAPI::fromJsonValue(m_shared_rules_key, json[QString("shared_rules_key")]);
    m_shared_rules_key_isSet = !json[QString("shared_rules_key")].isNull() && m_shared_rules_key_isValid;

    m_zone_key_isValid = ::OpenAPI::fromJsonValue(m_zone_key, json[QString("zone_key")]);
    m_zone_key_isSet = !json[QString("zone_key")].isNull() && m_zone_key_isValid;
}

QString OAISharedRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedRules::asJsonObject() const {
    QJsonObject obj;
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_cohort_seed.isSet()) {
        obj.insert(QString("cohort_seed"), ::OpenAPI::toJsonValue(m_cohort_seed));
    }
    if (m_r_default.isSet()) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_response_data.isSet()) {
        obj.insert(QString("response_data"), ::OpenAPI::toJsonValue(m_response_data));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retry_policy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_shared_rules_key_isSet) {
        obj.insert(QString("shared_rules_key"), ::OpenAPI::toJsonValue(m_shared_rules_key));
    }
    if (m_zone_key_isSet) {
        obj.insert(QString("zone_key"), ::OpenAPI::toJsonValue(m_zone_key));
    }
    return obj;
}

QString OAISharedRules::getChecksum() const {
    return m_checksum;
}
void OAISharedRules::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAISharedRules::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAISharedRules::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAICohortSeed OAISharedRules::getCohortSeed() const {
    return m_cohort_seed;
}
void OAISharedRules::setCohortSeed(const OAICohortSeed &cohort_seed) {
    m_cohort_seed = cohort_seed;
    m_cohort_seed_isSet = true;
}

bool OAISharedRules::is_cohort_seed_Set() const{
    return m_cohort_seed_isSet;
}

bool OAISharedRules::is_cohort_seed_Valid() const{
    return m_cohort_seed_isValid;
}

OAIAllConstraints OAISharedRules::getRDefault() const {
    return m_r_default;
}
void OAISharedRules::setRDefault(const OAIAllConstraints &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAISharedRules::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAISharedRules::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QList<OAIMetadatum> OAISharedRules::getProperties() const {
    return m_properties;
}
void OAISharedRules::setProperties(const QList<OAIMetadatum> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISharedRules::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISharedRules::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIResponseData OAISharedRules::getResponseData() const {
    return m_response_data;
}
void OAISharedRules::setResponseData(const OAIResponseData &response_data) {
    m_response_data = response_data;
    m_response_data_isSet = true;
}

bool OAISharedRules::is_response_data_Set() const{
    return m_response_data_isSet;
}

bool OAISharedRules::is_response_data_Valid() const{
    return m_response_data_isValid;
}

OAIRetryPolicy OAISharedRules::getRetryPolicy() const {
    return m_retry_policy;
}
void OAISharedRules::setRetryPolicy(const OAIRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAISharedRules::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAISharedRules::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

QList<OAIRule> OAISharedRules::getRules() const {
    return m_rules;
}
void OAISharedRules::setRules(const QList<OAIRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAISharedRules::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAISharedRules::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAISharedRules::getSharedRulesKey() const {
    return m_shared_rules_key;
}
void OAISharedRules::setSharedRulesKey(const QString &shared_rules_key) {
    m_shared_rules_key = shared_rules_key;
    m_shared_rules_key_isSet = true;
}

bool OAISharedRules::is_shared_rules_key_Set() const{
    return m_shared_rules_key_isSet;
}

bool OAISharedRules::is_shared_rules_key_Valid() const{
    return m_shared_rules_key_isValid;
}

QString OAISharedRules::getZoneKey() const {
    return m_zone_key;
}
void OAISharedRules::setZoneKey(const QString &zone_key) {
    m_zone_key = zone_key;
    m_zone_key_isSet = true;
}

bool OAISharedRules::is_zone_key_Set() const{
    return m_zone_key_isSet;
}

bool OAISharedRules::is_zone_key_Valid() const{
    return m_zone_key_isValid;
}

bool OAISharedRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohort_seed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_rules_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_checksum_isValid && m_r_default_isValid && m_shared_rules_key_isValid && m_zone_key_isValid && true;
}

} // namespace OpenAPI
