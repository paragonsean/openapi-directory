/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllConstraints::OAIAllConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllConstraints::OAIAllConstraints() {
    this->initializeModel();
}

OAIAllConstraints::~OAIAllConstraints() {}

void OAIAllConstraints::initializeModel() {

    m_dark_isSet = false;
    m_dark_isValid = false;

    m_light_isSet = false;
    m_light_isValid = false;

    m_tap_isSet = false;
    m_tap_isValid = false;
}

void OAIAllConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllConstraints::fromJsonObject(QJsonObject json) {

    m_dark_isValid = ::OpenAPI::fromJsonValue(m_dark, json[QString("dark")]);
    m_dark_isSet = !json[QString("dark")].isNull() && m_dark_isValid;

    m_light_isValid = ::OpenAPI::fromJsonValue(m_light, json[QString("light")]);
    m_light_isSet = !json[QString("light")].isNull() && m_light_isValid;

    m_tap_isValid = ::OpenAPI::fromJsonValue(m_tap, json[QString("tap")]);
    m_tap_isSet = !json[QString("tap")].isNull() && m_tap_isValid;
}

QString OAIAllConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_dark.size() > 0) {
        obj.insert(QString("dark"), ::OpenAPI::toJsonValue(m_dark));
    }
    if (m_light.size() > 0) {
        obj.insert(QString("light"), ::OpenAPI::toJsonValue(m_light));
    }
    if (m_tap.size() > 0) {
        obj.insert(QString("tap"), ::OpenAPI::toJsonValue(m_tap));
    }
    return obj;
}

QList<OAIClusterConstraint> OAIAllConstraints::getDark() const {
    return m_dark;
}
void OAIAllConstraints::setDark(const QList<OAIClusterConstraint> &dark) {
    m_dark = dark;
    m_dark_isSet = true;
}

bool OAIAllConstraints::is_dark_Set() const{
    return m_dark_isSet;
}

bool OAIAllConstraints::is_dark_Valid() const{
    return m_dark_isValid;
}

QList<OAIClusterConstraint> OAIAllConstraints::getLight() const {
    return m_light;
}
void OAIAllConstraints::setLight(const QList<OAIClusterConstraint> &light) {
    m_light = light;
    m_light_isSet = true;
}

bool OAIAllConstraints::is_light_Set() const{
    return m_light_isSet;
}

bool OAIAllConstraints::is_light_Valid() const{
    return m_light_isValid;
}

QList<OAIClusterConstraint> OAIAllConstraints::getTap() const {
    return m_tap;
}
void OAIAllConstraints::setTap(const QList<OAIClusterConstraint> &tap) {
    m_tap = tap;
    m_tap_isSet = true;
}

bool OAIAllConstraints::is_tap_Set() const{
    return m_tap_isSet;
}

bool OAIAllConstraints::is_tap_Valid() const{
    return m_tap_isValid;
}

bool OAIAllConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dark.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_light.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tap.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_light_isValid && true;
}

} // namespace OpenAPI
