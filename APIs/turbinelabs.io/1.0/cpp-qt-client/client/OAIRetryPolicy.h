/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetryPolicy.h
 *
 * Number of times to retry a request and how long to wait before timing out.
 */

#ifndef OAIRetryPolicy_H
#define OAIRetryPolicy_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRetryPolicy : public OAIObject {
public:
    OAIRetryPolicy();
    OAIRetryPolicy(QString json);
    ~OAIRetryPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getNumRetries() const;
    void setNumRetries(const qint64 &num_retries);
    bool is_num_retries_Set() const;
    bool is_num_retries_Valid() const;

    qint64 getPerTryTimeoutMsec() const;
    void setPerTryTimeoutMsec(const qint64 &per_try_timeout_msec);
    bool is_per_try_timeout_msec_Set() const;
    bool is_per_try_timeout_msec_Valid() const;

    qint64 getTimeoutMsec() const;
    void setTimeoutMsec(const qint64 &timeout_msec);
    bool is_timeout_msec_Set() const;
    bool is_timeout_msec_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_num_retries;
    bool m_num_retries_isSet;
    bool m_num_retries_isValid;

    qint64 m_per_try_timeout_msec;
    bool m_per_try_timeout_msec_isSet;
    bool m_per_try_timeout_msec_isValid;

    qint64 m_timeout_msec;
    bool m_timeout_msec_isSet;
    bool m_timeout_msec_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetryPolicy)

#endif // OAIRetryPolicy_H
