/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedirect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedirect::OAIRedirect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedirect::OAIRedirect() {
    this->initializeModel();
}

OAIRedirect::~OAIRedirect() {}

void OAIRedirect::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_header_constraints_isSet = false;
    m_header_constraints_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_redirect_type_isSet = false;
    m_redirect_type_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIRedirect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedirect::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_header_constraints_isValid = ::OpenAPI::fromJsonValue(m_header_constraints, json[QString("header_constraints")]);
    m_header_constraints_isSet = !json[QString("header_constraints")].isNull() && m_header_constraints_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_redirect_type_isValid = ::OpenAPI::fromJsonValue(m_redirect_type, json[QString("redirect_type")]);
    m_redirect_type_isSet = !json[QString("redirect_type")].isNull() && m_redirect_type_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIRedirect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedirect::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_header_constraints.size() > 0) {
        obj.insert(QString("header_constraints"), ::OpenAPI::toJsonValue(m_header_constraints));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_redirect_type_isSet) {
        obj.insert(QString("redirect_type"), ::OpenAPI::toJsonValue(m_redirect_type));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIRedirect::getFrom() const {
    return m_from;
}
void OAIRedirect::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIRedirect::is_from_Set() const{
    return m_from_isSet;
}

bool OAIRedirect::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAIHeaderConstraint> OAIRedirect::getHeaderConstraints() const {
    return m_header_constraints;
}
void OAIRedirect::setHeaderConstraints(const QList<OAIHeaderConstraint> &header_constraints) {
    m_header_constraints = header_constraints;
    m_header_constraints_isSet = true;
}

bool OAIRedirect::is_header_constraints_Set() const{
    return m_header_constraints_isSet;
}

bool OAIRedirect::is_header_constraints_Valid() const{
    return m_header_constraints_isValid;
}

QString OAIRedirect::getName() const {
    return m_name;
}
void OAIRedirect::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRedirect::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRedirect::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRedirect::getRedirectType() const {
    return m_redirect_type;
}
void OAIRedirect::setRedirectType(const QString &redirect_type) {
    m_redirect_type = redirect_type;
    m_redirect_type_isSet = true;
}

bool OAIRedirect::is_redirect_type_Set() const{
    return m_redirect_type_isSet;
}

bool OAIRedirect::is_redirect_type_Valid() const{
    return m_redirect_type_isValid;
}

QString OAIRedirect::getTo() const {
    return m_to;
}
void OAIRedirect::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIRedirect::is_to_Set() const{
    return m_to_isSet;
}

bool OAIRedirect::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIRedirect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedirect::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_name_isValid && m_redirect_type_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
