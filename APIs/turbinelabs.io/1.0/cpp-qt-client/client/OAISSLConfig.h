/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISSLConfig.h
 *
 * Experimental: Specifies whether a domain should support SSL/TLS connections from clients.  If not set the proxy will expect unencrypted HTTP traffic. 
 */

#ifndef OAISSLConfig_H
#define OAISSLConfig_H

#include <QJsonObject>

#include "OAICertKeyPathPair.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertKeyPathPair;

class OAISSLConfig : public OAIObject {
public:
    OAISSLConfig();
    OAISSLConfig(QString json);
    ~OAISSLConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICertKeyPathPair> getCertKeyPairs() const;
    void setCertKeyPairs(const QList<OAICertKeyPathPair> &cert_key_pairs);
    bool is_cert_key_pairs_Set() const;
    bool is_cert_key_pairs_Valid() const;

    QString getCipherFilter() const;
    void setCipherFilter(const QString &cipher_filter);
    bool is_cipher_filter_Set() const;
    bool is_cipher_filter_Valid() const;

    QList<QString> getProtocols() const;
    void setProtocols(const QList<QString> &protocols);
    bool is_protocols_Set() const;
    bool is_protocols_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICertKeyPathPair> m_cert_key_pairs;
    bool m_cert_key_pairs_isSet;
    bool m_cert_key_pairs_isValid;

    QString m_cipher_filter;
    bool m_cipher_filter_isSet;
    bool m_cipher_filter_isValid;

    QList<QString> m_protocols;
    bool m_protocols_isSet;
    bool m_protocols_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISSLConfig)

#endif // OAISSLConfig_H
