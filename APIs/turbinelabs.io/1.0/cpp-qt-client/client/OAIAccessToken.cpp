/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_access_token_key_isSet = false;
    m_access_token_key_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_signed_token_isSet = false;
    m_signed_token_isValid = false;

    m_user_key_isSet = false;
    m_user_key_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_access_token_key_isValid = ::OpenAPI::fromJsonValue(m_access_token_key, json[QString("access_token_key")]);
    m_access_token_key_isSet = !json[QString("access_token_key")].isNull() && m_access_token_key_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_signed_token_isValid = ::OpenAPI::fromJsonValue(m_signed_token, json[QString("signed_token")]);
    m_signed_token_isSet = !json[QString("signed_token")].isNull() && m_signed_token_isValid;

    m_user_key_isValid = ::OpenAPI::fromJsonValue(m_user_key, json[QString("user_key")]);
    m_user_key_isSet = !json[QString("user_key")].isNull() && m_user_key_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_key_isSet) {
        obj.insert(QString("access_token_key"), ::OpenAPI::toJsonValue(m_access_token_key));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_signed_token_isSet) {
        obj.insert(QString("signed_token"), ::OpenAPI::toJsonValue(m_signed_token));
    }
    if (m_user_key_isSet) {
        obj.insert(QString("user_key"), ::OpenAPI::toJsonValue(m_user_key));
    }
    return obj;
}

QString OAIAccessToken::getAccessTokenKey() const {
    return m_access_token_key;
}
void OAIAccessToken::setAccessTokenKey(const QString &access_token_key) {
    m_access_token_key = access_token_key;
    m_access_token_key_isSet = true;
}

bool OAIAccessToken::is_access_token_key_Set() const{
    return m_access_token_key_isSet;
}

bool OAIAccessToken::is_access_token_key_Valid() const{
    return m_access_token_key_isValid;
}

QString OAIAccessToken::getChecksum() const {
    return m_checksum;
}
void OAIAccessToken::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIAccessToken::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIAccessToken::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIAccessToken::getCreatedAt() const {
    return m_created_at;
}
void OAIAccessToken::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccessToken::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccessToken::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccessToken::getDescription() const {
    return m_description;
}
void OAIAccessToken::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccessToken::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccessToken::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccessToken::getSignedToken() const {
    return m_signed_token;
}
void OAIAccessToken::setSignedToken(const QString &signed_token) {
    m_signed_token = signed_token;
    m_signed_token_isSet = true;
}

bool OAIAccessToken::is_signed_token_Set() const{
    return m_signed_token_isSet;
}

bool OAIAccessToken::is_signed_token_Valid() const{
    return m_signed_token_isValid;
}

QString OAIAccessToken::getUserKey() const {
    return m_user_key;
}
void OAIAccessToken::setUserKey(const QString &user_key) {
    m_user_key = user_key;
    m_user_key_isSet = true;
}

bool OAIAccessToken::is_user_key_Set() const{
    return m_user_key_isSet;
}

bool OAIAccessToken::is_user_key_Valid() const{
    return m_user_key_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_key_isValid && m_checksum_isValid && m_created_at_isValid && m_description_isValid && m_user_key_isValid && true;
}

} // namespace OpenAPI
