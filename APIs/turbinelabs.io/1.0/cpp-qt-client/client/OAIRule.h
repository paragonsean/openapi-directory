/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule.h
 *
 * 
 */

#ifndef OAIRule_H
#define OAIRule_H

#include <QJsonObject>

#include "OAIAllConstraints.h"
#include "OAICohortSeed.h"
#include "OAIMatch.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICohortSeed;
class OAIAllConstraints;
class OAIMatch;

class OAIRule : public OAIObject {
public:
    OAIRule();
    OAIRule(QString json);
    ~OAIRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICohortSeed getCohortSeed() const;
    void setCohortSeed(const OAICohortSeed &cohort_seed);
    bool is_cohort_seed_Set() const;
    bool is_cohort_seed_Valid() const;

    OAIAllConstraints getConstraints() const;
    void setConstraints(const OAIAllConstraints &constraints);
    bool is_constraints_Set() const;
    bool is_constraints_Valid() const;

    QList<OAIMatch> getMatches() const;
    void setMatches(const QList<OAIMatch> &matches);
    bool is_matches_Set() const;
    bool is_matches_Valid() const;

    QList<QString> getMethods() const;
    void setMethods(const QList<QString> &methods);
    bool is_methods_Set() const;
    bool is_methods_Valid() const;

    QString getRuleKey() const;
    void setRuleKey(const QString &rule_key);
    bool is_rule_key_Set() const;
    bool is_rule_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICohortSeed m_cohort_seed;
    bool m_cohort_seed_isSet;
    bool m_cohort_seed_isValid;

    OAIAllConstraints m_constraints;
    bool m_constraints_isSet;
    bool m_constraints_isValid;

    QList<OAIMatch> m_matches;
    bool m_matches_isSet;
    bool m_matches_isValid;

    QList<QString> m_methods;
    bool m_methods_isSet;
    bool m_methods_isValid;

    QString m_rule_key;
    bool m_rule_key_isSet;
    bool m_rule_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule)

#endif // OAIRule_H
