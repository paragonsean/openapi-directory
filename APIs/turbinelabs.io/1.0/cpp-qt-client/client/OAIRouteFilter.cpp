/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteFilter::OAIRouteFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteFilter::OAIRouteFilter() {
    this->initializeModel();
}

OAIRouteFilter::~OAIRouteFilter() {}

void OAIRouteFilter::initializeModel() {

    m_domain_key_isSet = false;
    m_domain_key_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_prefix_isSet = false;
    m_path_prefix_isValid = false;

    m_route_key_isSet = false;
    m_route_key_isValid = false;

    m_shared_rules_key_isSet = false;
    m_shared_rules_key_isValid = false;

    m_zone_key_isSet = false;
    m_zone_key_isValid = false;
}

void OAIRouteFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteFilter::fromJsonObject(QJsonObject json) {

    m_domain_key_isValid = ::OpenAPI::fromJsonValue(m_domain_key, json[QString("domain_key")]);
    m_domain_key_isSet = !json[QString("domain_key")].isNull() && m_domain_key_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_path_prefix_isValid = ::OpenAPI::fromJsonValue(m_path_prefix, json[QString("path_prefix")]);
    m_path_prefix_isSet = !json[QString("path_prefix")].isNull() && m_path_prefix_isValid;

    m_route_key_isValid = ::OpenAPI::fromJsonValue(m_route_key, json[QString("route_key")]);
    m_route_key_isSet = !json[QString("route_key")].isNull() && m_route_key_isValid;

    m_shared_rules_key_isValid = ::OpenAPI::fromJsonValue(m_shared_rules_key, json[QString("shared_rules_key")]);
    m_shared_rules_key_isSet = !json[QString("shared_rules_key")].isNull() && m_shared_rules_key_isValid;

    m_zone_key_isValid = ::OpenAPI::fromJsonValue(m_zone_key, json[QString("zone_key")]);
    m_zone_key_isSet = !json[QString("zone_key")].isNull() && m_zone_key_isValid;
}

QString OAIRouteFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_key_isSet) {
        obj.insert(QString("domain_key"), ::OpenAPI::toJsonValue(m_domain_key));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_prefix_isSet) {
        obj.insert(QString("path_prefix"), ::OpenAPI::toJsonValue(m_path_prefix));
    }
    if (m_route_key_isSet) {
        obj.insert(QString("route_key"), ::OpenAPI::toJsonValue(m_route_key));
    }
    if (m_shared_rules_key_isSet) {
        obj.insert(QString("shared_rules_key"), ::OpenAPI::toJsonValue(m_shared_rules_key));
    }
    if (m_zone_key_isSet) {
        obj.insert(QString("zone_key"), ::OpenAPI::toJsonValue(m_zone_key));
    }
    return obj;
}

QString OAIRouteFilter::getDomainKey() const {
    return m_domain_key;
}
void OAIRouteFilter::setDomainKey(const QString &domain_key) {
    m_domain_key = domain_key;
    m_domain_key_isSet = true;
}

bool OAIRouteFilter::is_domain_key_Set() const{
    return m_domain_key_isSet;
}

bool OAIRouteFilter::is_domain_key_Valid() const{
    return m_domain_key_isValid;
}

QString OAIRouteFilter::getPath() const {
    return m_path;
}
void OAIRouteFilter::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRouteFilter::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRouteFilter::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRouteFilter::getPathPrefix() const {
    return m_path_prefix;
}
void OAIRouteFilter::setPathPrefix(const QString &path_prefix) {
    m_path_prefix = path_prefix;
    m_path_prefix_isSet = true;
}

bool OAIRouteFilter::is_path_prefix_Set() const{
    return m_path_prefix_isSet;
}

bool OAIRouteFilter::is_path_prefix_Valid() const{
    return m_path_prefix_isValid;
}

QString OAIRouteFilter::getRouteKey() const {
    return m_route_key;
}
void OAIRouteFilter::setRouteKey(const QString &route_key) {
    m_route_key = route_key;
    m_route_key_isSet = true;
}

bool OAIRouteFilter::is_route_key_Set() const{
    return m_route_key_isSet;
}

bool OAIRouteFilter::is_route_key_Valid() const{
    return m_route_key_isValid;
}

QString OAIRouteFilter::getSharedRulesKey() const {
    return m_shared_rules_key;
}
void OAIRouteFilter::setSharedRulesKey(const QString &shared_rules_key) {
    m_shared_rules_key = shared_rules_key;
    m_shared_rules_key_isSet = true;
}

bool OAIRouteFilter::is_shared_rules_key_Set() const{
    return m_shared_rules_key_isSet;
}

bool OAIRouteFilter::is_shared_rules_key_Valid() const{
    return m_shared_rules_key_isValid;
}

QString OAIRouteFilter::getZoneKey() const {
    return m_zone_key;
}
void OAIRouteFilter::setZoneKey(const QString &zone_key) {
    m_zone_key = zone_key;
    m_zone_key_isSet = true;
}

bool OAIRouteFilter::is_zone_key_Set() const{
    return m_zone_key_isSet;
}

bool OAIRouteFilter::is_zone_key_Valid() const{
    return m_zone_key_isValid;
}

bool OAIRouteFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_rules_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
