/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainFilter::OAIDomainFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainFilter::OAIDomainFilter() {
    this->initializeModel();
}

OAIDomainFilter::~OAIDomainFilter() {}

void OAIDomainFilter::initializeModel() {

    m_domain_key_isSet = false;
    m_domain_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_proxy_keys_isSet = false;
    m_proxy_keys_isValid = false;

    m_zone_key_isSet = false;
    m_zone_key_isValid = false;
}

void OAIDomainFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainFilter::fromJsonObject(QJsonObject json) {

    m_domain_key_isValid = ::OpenAPI::fromJsonValue(m_domain_key, json[QString("domain_key")]);
    m_domain_key_isSet = !json[QString("domain_key")].isNull() && m_domain_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_proxy_keys_isValid = ::OpenAPI::fromJsonValue(m_proxy_keys, json[QString("proxy_keys")]);
    m_proxy_keys_isSet = !json[QString("proxy_keys")].isNull() && m_proxy_keys_isValid;

    m_zone_key_isValid = ::OpenAPI::fromJsonValue(m_zone_key, json[QString("zone_key")]);
    m_zone_key_isSet = !json[QString("zone_key")].isNull() && m_zone_key_isValid;
}

QString OAIDomainFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_key_isSet) {
        obj.insert(QString("domain_key"), ::OpenAPI::toJsonValue(m_domain_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_proxy_keys.size() > 0) {
        obj.insert(QString("proxy_keys"), ::OpenAPI::toJsonValue(m_proxy_keys));
    }
    if (m_zone_key_isSet) {
        obj.insert(QString("zone_key"), ::OpenAPI::toJsonValue(m_zone_key));
    }
    return obj;
}

QString OAIDomainFilter::getDomainKey() const {
    return m_domain_key;
}
void OAIDomainFilter::setDomainKey(const QString &domain_key) {
    m_domain_key = domain_key;
    m_domain_key_isSet = true;
}

bool OAIDomainFilter::is_domain_key_Set() const{
    return m_domain_key_isSet;
}

bool OAIDomainFilter::is_domain_key_Valid() const{
    return m_domain_key_isValid;
}

QString OAIDomainFilter::getName() const {
    return m_name;
}
void OAIDomainFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainFilter::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIDomainFilter::getProxyKeys() const {
    return m_proxy_keys;
}
void OAIDomainFilter::setProxyKeys(const QList<QString> &proxy_keys) {
    m_proxy_keys = proxy_keys;
    m_proxy_keys_isSet = true;
}

bool OAIDomainFilter::is_proxy_keys_Set() const{
    return m_proxy_keys_isSet;
}

bool OAIDomainFilter::is_proxy_keys_Valid() const{
    return m_proxy_keys_isValid;
}

QString OAIDomainFilter::getZoneKey() const {
    return m_zone_key;
}
void OAIDomainFilter::setZoneKey(const QString &zone_key) {
    m_zone_key = zone_key;
    m_zone_key_isSet = true;
}

bool OAIDomainFilter::is_zone_key_Set() const{
    return m_zone_key_isSet;
}

bool OAIDomainFilter::is_zone_key_Valid() const{
    return m_zone_key_isValid;
}

bool OAIDomainFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
