/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICircuitBreakers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICircuitBreakers::OAICircuitBreakers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICircuitBreakers::OAICircuitBreakers() {
    this->initializeModel();
}

OAICircuitBreakers::~OAICircuitBreakers() {}

void OAICircuitBreakers::initializeModel() {

    m_max_connections_isSet = false;
    m_max_connections_isValid = false;

    m_max_pending_requests_isSet = false;
    m_max_pending_requests_isValid = false;

    m_max_requests_isSet = false;
    m_max_requests_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;
}

void OAICircuitBreakers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICircuitBreakers::fromJsonObject(QJsonObject json) {

    m_max_connections_isValid = ::OpenAPI::fromJsonValue(m_max_connections, json[QString("max_connections")]);
    m_max_connections_isSet = !json[QString("max_connections")].isNull() && m_max_connections_isValid;

    m_max_pending_requests_isValid = ::OpenAPI::fromJsonValue(m_max_pending_requests, json[QString("max_pending_requests")]);
    m_max_pending_requests_isSet = !json[QString("max_pending_requests")].isNull() && m_max_pending_requests_isValid;

    m_max_requests_isValid = ::OpenAPI::fromJsonValue(m_max_requests, json[QString("max_requests")]);
    m_max_requests_isSet = !json[QString("max_requests")].isNull() && m_max_requests_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("max_retries")]);
    m_max_retries_isSet = !json[QString("max_retries")].isNull() && m_max_retries_isValid;
}

QString OAICircuitBreakers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICircuitBreakers::asJsonObject() const {
    QJsonObject obj;
    if (m_max_connections_isSet) {
        obj.insert(QString("max_connections"), ::OpenAPI::toJsonValue(m_max_connections));
    }
    if (m_max_pending_requests_isSet) {
        obj.insert(QString("max_pending_requests"), ::OpenAPI::toJsonValue(m_max_pending_requests));
    }
    if (m_max_requests_isSet) {
        obj.insert(QString("max_requests"), ::OpenAPI::toJsonValue(m_max_requests));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("max_retries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    return obj;
}

qint32 OAICircuitBreakers::getMaxConnections() const {
    return m_max_connections;
}
void OAICircuitBreakers::setMaxConnections(const qint32 &max_connections) {
    m_max_connections = max_connections;
    m_max_connections_isSet = true;
}

bool OAICircuitBreakers::is_max_connections_Set() const{
    return m_max_connections_isSet;
}

bool OAICircuitBreakers::is_max_connections_Valid() const{
    return m_max_connections_isValid;
}

qint32 OAICircuitBreakers::getMaxPendingRequests() const {
    return m_max_pending_requests;
}
void OAICircuitBreakers::setMaxPendingRequests(const qint32 &max_pending_requests) {
    m_max_pending_requests = max_pending_requests;
    m_max_pending_requests_isSet = true;
}

bool OAICircuitBreakers::is_max_pending_requests_Set() const{
    return m_max_pending_requests_isSet;
}

bool OAICircuitBreakers::is_max_pending_requests_Valid() const{
    return m_max_pending_requests_isValid;
}

qint32 OAICircuitBreakers::getMaxRequests() const {
    return m_max_requests;
}
void OAICircuitBreakers::setMaxRequests(const qint32 &max_requests) {
    m_max_requests = max_requests;
    m_max_requests_isSet = true;
}

bool OAICircuitBreakers::is_max_requests_Set() const{
    return m_max_requests_isSet;
}

bool OAICircuitBreakers::is_max_requests_Valid() const{
    return m_max_requests_isValid;
}

qint32 OAICircuitBreakers::getMaxRetries() const {
    return m_max_retries;
}
void OAICircuitBreakers::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAICircuitBreakers::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAICircuitBreakers::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

bool OAICircuitBreakers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pending_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICircuitBreakers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
