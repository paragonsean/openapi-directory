/**
 * Turbine Labs API
 * The Turbine Labs API provides CRUD operations for core object types, and is mostly RESTy. The easiest way to interact with the API is with [tbnctl](https://docs.turbinelabs.io/advanced/tbnctl.html). If you want to make direct HTTP calls, however, you can obtain an access token using tbnctl, and then pass it in the Authorization header, prefixed by `Token `: ```console curl -H \"Authorization: Token <access token>\" https://api.turbinelabs.io/v1.0/cluster ``` 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICORSConfig.h
 *
 * Experimental: Controls simple CORS responses for the associated domain. The configurable properties map closely to the CORS specification which should be referenced for a full discussion on their meaning: https://www.w3.org/TR/cors/ or https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS. 
 */

#ifndef OAICORSConfig_H
#define OAICORSConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICORSConfig : public OAIObject {
public:
    OAICORSConfig();
    OAICORSConfig(QString json);
    ~OAICORSConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowCredentials() const;
    void setAllowCredentials(const bool &allow_credentials);
    bool is_allow_credentials_Set() const;
    bool is_allow_credentials_Valid() const;

    QList<QString> getAllowedHeaders() const;
    void setAllowedHeaders(const QList<QString> &allowed_headers);
    bool is_allowed_headers_Set() const;
    bool is_allowed_headers_Valid() const;

    QList<QString> getAllowedMethods() const;
    void setAllowedMethods(const QList<QString> &allowed_methods);
    bool is_allowed_methods_Set() const;
    bool is_allowed_methods_Valid() const;

    QList<QString> getAllowedOrigins() const;
    void setAllowedOrigins(const QList<QString> &allowed_origins);
    bool is_allowed_origins_Set() const;
    bool is_allowed_origins_Valid() const;

    QList<QString> getExposedHeaders() const;
    void setExposedHeaders(const QList<QString> &exposed_headers);
    bool is_exposed_headers_Set() const;
    bool is_exposed_headers_Valid() const;

    qint32 getMaxAge() const;
    void setMaxAge(const qint32 &max_age);
    bool is_max_age_Set() const;
    bool is_max_age_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_credentials;
    bool m_allow_credentials_isSet;
    bool m_allow_credentials_isValid;

    QList<QString> m_allowed_headers;
    bool m_allowed_headers_isSet;
    bool m_allowed_headers_isValid;

    QList<QString> m_allowed_methods;
    bool m_allowed_methods_isSet;
    bool m_allowed_methods_isValid;

    QList<QString> m_allowed_origins;
    bool m_allowed_origins_isSet;
    bool m_allowed_origins_isValid;

    QList<QString> m_exposed_headers;
    bool m_exposed_headers_isSet;
    bool m_exposed_headers_isValid;

    qint32 m_max_age;
    bool m_max_age_isSet;
    bool m_max_age_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICORSConfig)

#endif // OAICORSConfig_H
