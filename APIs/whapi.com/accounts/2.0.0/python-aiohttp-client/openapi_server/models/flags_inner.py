# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FlagsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flag_name: str=None, flag_reason: str=None, flag_value: str=None):
        """FlagsInner - a model defined in OpenAPI

        :param flag_name: The flag_name of this FlagsInner.
        :param flag_reason: The flag_reason of this FlagsInner.
        :param flag_value: The flag_value of this FlagsInner.
        """
        self.openapi_types = {
            'flag_name': str,
            'flag_reason': str,
            'flag_value': str
        }

        self.attribute_map = {
            'flag_name': 'flagName',
            'flag_reason': 'flagReason',
            'flag_value': 'flagValue'
        }

        self._flag_name = flag_name
        self._flag_reason = flag_reason
        self._flag_value = flag_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlagsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flags_inner of this FlagsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flag_name(self):
        """Gets the flag_name of this FlagsInner.

        Name of the flag to set.

        :return: The flag_name of this FlagsInner.
        :rtype: str
        """
        return self._flag_name

    @flag_name.setter
    def flag_name(self, flag_name):
        """Sets the flag_name of this FlagsInner.

        Name of the flag to set.

        :param flag_name: The flag_name of this FlagsInner.
        :type flag_name: str
        """
        if flag_name is None:
            raise ValueError("Invalid value for `flag_name`, must not be `None`")

        self._flag_name = flag_name

    @property
    def flag_reason(self):
        """Gets the flag_reason of this FlagsInner.

        The reason that the flag has been set.

        :return: The flag_reason of this FlagsInner.
        :rtype: str
        """
        return self._flag_reason

    @flag_reason.setter
    def flag_reason(self, flag_reason):
        """Sets the flag_reason of this FlagsInner.

        The reason that the flag has been set.

        :param flag_reason: The flag_reason of this FlagsInner.
        :type flag_reason: str
        """

        self._flag_reason = flag_reason

    @property
    def flag_value(self):
        """Gets the flag_value of this FlagsInner.

        Value to set the flag to.

        :return: The flag_value of this FlagsInner.
        :rtype: str
        """
        return self._flag_value

    @flag_value.setter
    def flag_value(self, flag_value):
        """Sets the flag_value of this FlagsInner.

        Value to set the flag to.

        :param flag_value: The flag_value of this FlagsInner.
        :type flag_value: str
        """
        if flag_value is None:
            raise ValueError("Invalid value for `flag_value`, must not be `None`")

        self._flag_value = flag_value
