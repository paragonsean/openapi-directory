# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_funds: float=None, balance: float=None, currency_code: str=None, withdrawable_funds: float=None):
        """AccountBalance - a model defined in OpenAPI

        :param available_funds: The available_funds of this AccountBalance.
        :param balance: The balance of this AccountBalance.
        :param currency_code: The currency_code of this AccountBalance.
        :param withdrawable_funds: The withdrawable_funds of this AccountBalance.
        """
        self.openapi_types = {
            'available_funds': float,
            'balance': float,
            'currency_code': str,
            'withdrawable_funds': float
        }

        self.attribute_map = {
            'available_funds': 'availableFunds',
            'balance': 'balance',
            'currency_code': 'currencyCode',
            'withdrawable_funds': 'withdrawableFunds'
        }

        self._available_funds = available_funds
        self._balance = balance
        self._currency_code = currency_code
        self._withdrawable_funds = withdrawable_funds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountBalance of this AccountBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_funds(self):
        """Gets the available_funds of this AccountBalance.

        Current available funds in this account

        :return: The available_funds of this AccountBalance.
        :rtype: float
        """
        return self._available_funds

    @available_funds.setter
    def available_funds(self, available_funds):
        """Sets the available_funds of this AccountBalance.

        Current available funds in this account

        :param available_funds: The available_funds of this AccountBalance.
        :type available_funds: float
        """

        self._available_funds = available_funds

    @property
    def balance(self):
        """Gets the balance of this AccountBalance.

        Current balance of account

        :return: The balance of this AccountBalance.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountBalance.

        Current balance of account

        :param balance: The balance of this AccountBalance.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def currency_code(self):
        """Gets the currency_code of this AccountBalance.

        A three-character ISO4217 currency code. This will be the currency that the user registered in

        :return: The currency_code of this AccountBalance.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AccountBalance.

        A three-character ISO4217 currency code. This will be the currency that the user registered in

        :param currency_code: The currency_code of this AccountBalance.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def withdrawable_funds(self):
        """Gets the withdrawable_funds of this AccountBalance.

        Current withdrawable balance of this account

        :return: The withdrawable_funds of this AccountBalance.
        :rtype: float
        """
        return self._withdrawable_funds

    @withdrawable_funds.setter
    def withdrawable_funds(self, withdrawable_funds):
        """Sets the withdrawable_funds of this AccountBalance.

        Current withdrawable balance of this account

        :param withdrawable_funds: The withdrawable_funds of this AccountBalance.
        :type withdrawable_funds: float
        """

        self._withdrawable_funds = withdrawable_funds
