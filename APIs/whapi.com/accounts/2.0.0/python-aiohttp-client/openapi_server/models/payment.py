# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, amount: float=None, channel: str=None, commision: float=None, id: str=None, ip_address: str=None, method_id: str=None, payment_date_time: str=None, status: str=None, type: str=None):
        """Payment - a model defined in OpenAPI

        :param action: The action of this Payment.
        :param amount: The amount of this Payment.
        :param channel: The channel of this Payment.
        :param commision: The commision of this Payment.
        :param id: The id of this Payment.
        :param ip_address: The ip_address of this Payment.
        :param method_id: The method_id of this Payment.
        :param payment_date_time: The payment_date_time of this Payment.
        :param status: The status of this Payment.
        :param type: The type of this Payment.
        """
        self.openapi_types = {
            'action': str,
            'amount': float,
            'channel': str,
            'commision': float,
            'id': str,
            'ip_address': str,
            'method_id': str,
            'payment_date_time': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'action': 'action',
            'amount': 'amount',
            'channel': 'channel',
            'commision': 'commision',
            'id': 'id',
            'ip_address': 'ipAddress',
            'method_id': 'methodId',
            'payment_date_time': 'paymentDateTime',
            'status': 'status',
            'type': 'type'
        }

        self._action = action
        self._amount = amount
        self._channel = channel
        self._commision = commision
        self._id = id
        self._ip_address = ip_address
        self._method_id = method_id
        self._payment_date_time = payment_date_time
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Payment.

        Action of the payment (D = Deposit, W = withdrawal)

        :return: The action of this Payment.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Payment.

        Action of the payment (D = Deposit, W = withdrawal)

        :param action: The action of this Payment.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")
        if action is not None and not re.search(r'(D|W)', action):
            raise ValueError("Invalid value for `action`, must be a follow pattern or equal to `/(D|W)/`")

        self._action = action

    @property
    def amount(self):
        """Gets the amount of this Payment.

        The amount of the payment

        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.

        The amount of the payment

        :param amount: The amount of this Payment.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def channel(self):
        """Gets the channel of this Payment.

        The channel through which the payment was made

        :return: The channel of this Payment.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Payment.

        The channel through which the payment was made

        :param channel: The channel of this Payment.
        :type channel: str
        """

        self._channel = channel

    @property
    def commision(self):
        """Gets the commision of this Payment.

        The commision for the payment

        :return: The commision of this Payment.
        :rtype: float
        """
        return self._commision

    @commision.setter
    def commision(self, commision):
        """Sets the commision of this Payment.

        The commision for the payment

        :param commision: The commision of this Payment.
        :type commision: float
        """

        self._commision = commision

    @property
    def id(self):
        """Gets the id of this Payment.

        ID of the payment

        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        ID of the payment

        :param id: The id of this Payment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this Payment.

        The IP address from which the payment was made

        :return: The ip_address of this Payment.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Payment.

        The IP address from which the payment was made

        :param ip_address: The ip_address of this Payment.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def method_id(self):
        """Gets the method_id of this Payment.

        ID of the payment method

        :return: The method_id of this Payment.
        :rtype: str
        """
        return self._method_id

    @method_id.setter
    def method_id(self, method_id):
        """Sets the method_id of this Payment.

        ID of the payment method

        :param method_id: The method_id of this Payment.
        :type method_id: str
        """

        self._method_id = method_id

    @property
    def payment_date_time(self):
        """Gets the payment_date_time of this Payment.

        The date and time when the payment was made

        :return: The payment_date_time of this Payment.
        :rtype: str
        """
        return self._payment_date_time

    @payment_date_time.setter
    def payment_date_time(self, payment_date_time):
        """Sets the payment_date_time of this Payment.

        The date and time when the payment was made

        :param payment_date_time: The payment_date_time of this Payment.
        :type payment_date_time: str
        """
        if payment_date_time is None:
            raise ValueError("Invalid value for `payment_date_time`, must not be `None`")

        self._payment_date_time = payment_date_time

    @property
    def status(self):
        """Gets the status of this Payment.

        The status of the payment

        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        The status of the payment

        :param status: The status of this Payment.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this Payment.

        Type of the payment

        :return: The type of this Payment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Payment.

        Type of the payment

        :param type: The type of this Payment.
        :type type: str
        """
        if type is not None and not re.search(r'([A-Za-z]*)', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/([A-Za-z]*)/`")

        self._type = type
