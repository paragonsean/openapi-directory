# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flags_inner import FlagsInner
from openapi_server import util


class Accounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_num: str=None, additional_system_statuses: str=None, birth_place: str=None, city: str=None, contactable: bool=None, country: str=None, country_code: str=None, county: str=None, currency_code: str=None, customer_id: str=None, email: str=None, fax: str=None, first_name: str=None, flags: List[FlagsInner]=None, ip_address: str=None, language: str=None, last_login: str=None, last_name: str=None, mobile: str=None, nif: str=None, office: str=None, partner_contactable: bool=None, postcode: str=None, second_last_name: str=None, status: str=None, street1: str=None, street2: str=None, street3: str=None, terms_and_conditions: str=None, time_zone: str=None, title: str=None):
        """Accounts - a model defined in OpenAPI

        :param account_id: The account_id of this Accounts.
        :param account_num: The account_num of this Accounts.
        :param additional_system_statuses: The additional_system_statuses of this Accounts.
        :param birth_place: The birth_place of this Accounts.
        :param city: The city of this Accounts.
        :param contactable: The contactable of this Accounts.
        :param country: The country of this Accounts.
        :param country_code: The country_code of this Accounts.
        :param county: The county of this Accounts.
        :param currency_code: The currency_code of this Accounts.
        :param customer_id: The customer_id of this Accounts.
        :param email: The email of this Accounts.
        :param fax: The fax of this Accounts.
        :param first_name: The first_name of this Accounts.
        :param flags: The flags of this Accounts.
        :param ip_address: The ip_address of this Accounts.
        :param language: The language of this Accounts.
        :param last_login: The last_login of this Accounts.
        :param last_name: The last_name of this Accounts.
        :param mobile: The mobile of this Accounts.
        :param nif: The nif of this Accounts.
        :param office: The office of this Accounts.
        :param partner_contactable: The partner_contactable of this Accounts.
        :param postcode: The postcode of this Accounts.
        :param second_last_name: The second_last_name of this Accounts.
        :param status: The status of this Accounts.
        :param street1: The street1 of this Accounts.
        :param street2: The street2 of this Accounts.
        :param street3: The street3 of this Accounts.
        :param terms_and_conditions: The terms_and_conditions of this Accounts.
        :param time_zone: The time_zone of this Accounts.
        :param title: The title of this Accounts.
        """
        self.openapi_types = {
            'account_id': str,
            'account_num': str,
            'additional_system_statuses': str,
            'birth_place': str,
            'city': str,
            'contactable': bool,
            'country': str,
            'country_code': str,
            'county': str,
            'currency_code': str,
            'customer_id': str,
            'email': str,
            'fax': str,
            'first_name': str,
            'flags': List[FlagsInner],
            'ip_address': str,
            'language': str,
            'last_login': str,
            'last_name': str,
            'mobile': str,
            'nif': str,
            'office': str,
            'partner_contactable': bool,
            'postcode': str,
            'second_last_name': str,
            'status': str,
            'street1': str,
            'street2': str,
            'street3': str,
            'terms_and_conditions': str,
            'time_zone': str,
            'title': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_num': 'accountNum',
            'additional_system_statuses': 'additionalSystemStatuses',
            'birth_place': 'birthPlace',
            'city': 'city',
            'contactable': 'contactable',
            'country': 'country',
            'country_code': 'countryCode',
            'county': 'county',
            'currency_code': 'currencyCode',
            'customer_id': 'customerId',
            'email': 'email',
            'fax': 'fax',
            'first_name': 'firstName',
            'flags': 'flags',
            'ip_address': 'ipAddress',
            'language': 'language',
            'last_login': 'lastLogin',
            'last_name': 'lastName',
            'mobile': 'mobile',
            'nif': 'nif',
            'office': 'office',
            'partner_contactable': 'partnerContactable',
            'postcode': 'postcode',
            'second_last_name': 'secondLastName',
            'status': 'status',
            'street1': 'street1',
            'street2': 'street2',
            'street3': 'street3',
            'terms_and_conditions': 'terms and conditions',
            'time_zone': 'timeZone',
            'title': 'title'
        }

        self._account_id = account_id
        self._account_num = account_num
        self._additional_system_statuses = additional_system_statuses
        self._birth_place = birth_place
        self._city = city
        self._contactable = contactable
        self._country = country
        self._country_code = country_code
        self._county = county
        self._currency_code = currency_code
        self._customer_id = customer_id
        self._email = email
        self._fax = fax
        self._first_name = first_name
        self._flags = flags
        self._ip_address = ip_address
        self._language = language
        self._last_login = last_login
        self._last_name = last_name
        self._mobile = mobile
        self._nif = nif
        self._office = office
        self._partner_contactable = partner_contactable
        self._postcode = postcode
        self._second_last_name = second_last_name
        self._status = status
        self._street1 = street1
        self._street2 = street2
        self._street3 = street3
        self._terms_and_conditions = terms_and_conditions
        self._time_zone = time_zone
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Accounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accounts of this Accounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Accounts.

        Account ID

        :return: The account_id of this Accounts.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Accounts.

        Account ID

        :param account_id: The account_id of this Accounts.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_num(self):
        """Gets the account_num of this Accounts.

        Account number

        :return: The account_num of this Accounts.
        :rtype: str
        """
        return self._account_num

    @account_num.setter
    def account_num(self, account_num):
        """Sets the account_num of this Accounts.

        Account number

        :param account_num: The account_num of this Accounts.
        :type account_num: str
        """
        if account_num is None:
            raise ValueError("Invalid value for `account_num`, must not be `None`")

        self._account_num = account_num

    @property
    def additional_system_statuses(self):
        """Gets the additional_system_statuses of this Accounts.

        Statuses of systems specific to that account - seperate from account status

        :return: The additional_system_statuses of this Accounts.
        :rtype: str
        """
        return self._additional_system_statuses

    @additional_system_statuses.setter
    def additional_system_statuses(self, additional_system_statuses):
        """Sets the additional_system_statuses of this Accounts.

        Statuses of systems specific to that account - seperate from account status

        :param additional_system_statuses: The additional_system_statuses of this Accounts.
        :type additional_system_statuses: str
        """

        self._additional_system_statuses = additional_system_statuses

    @property
    def birth_place(self):
        """Gets the birth_place of this Accounts.

        Birthplace details (city, province country code) for customer - primaly used in italy

        :return: The birth_place of this Accounts.
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this Accounts.

        Birthplace details (city, province country code) for customer - primaly used in italy

        :param birth_place: The birth_place of this Accounts.
        :type birth_place: str
        """

        self._birth_place = birth_place

    @property
    def city(self):
        """Gets the city of this Accounts.

        The city of the customer's address

        :return: The city of this Accounts.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Accounts.

        The city of the customer's address

        :param city: The city of this Accounts.
        :type city: str
        """

        self._city = city

    @property
    def contactable(self):
        """Gets the contactable of this Accounts.

        Is it okay for the bookmaker to contact the customer with marketing information

        :return: The contactable of this Accounts.
        :rtype: bool
        """
        return self._contactable

    @contactable.setter
    def contactable(self, contactable):
        """Sets the contactable of this Accounts.

        Is it okay for the bookmaker to contact the customer with marketing information

        :param contactable: The contactable of this Accounts.
        :type contactable: bool
        """

        self._contactable = contactable

    @property
    def country(self):
        """Gets the country of this Accounts.

        The country of the customer's address

        :return: The country of this Accounts.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Accounts.

        The country of the customer's address

        :param country: The country of this Accounts.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Accounts.

        A two-character ISO 3166-1-Alpha-2 code representing the customer's country of registration

        :return: The country_code of this Accounts.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Accounts.

        A two-character ISO 3166-1-Alpha-2 code representing the customer's country of registration

        :param country_code: The country_code of this Accounts.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def county(self):
        """Gets the county of this Accounts.

        The county of the customer's address

        :return: The county of this Accounts.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Accounts.

        The county of the customer's address

        :param county: The county of this Accounts.
        :type county: str
        """

        self._county = county

    @property
    def currency_code(self):
        """Gets the currency_code of this Accounts.

        A three-character ISO4217 currency code. This will be the currency that the customer registered in

        :return: The currency_code of this Accounts.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Accounts.

        A three-character ISO4217 currency code. This will be the currency that the customer registered in

        :param currency_code: The currency_code of this Accounts.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def customer_id(self):
        """Gets the customer_id of this Accounts.

        Customer ID

        :return: The customer_id of this Accounts.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Accounts.

        Customer ID

        :param customer_id: The customer_id of this Accounts.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this Accounts.

        The primary email address of the customer with that account. Must be unique.

        :return: The email of this Accounts.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Accounts.

        The primary email address of the customer with that account. Must be unique.

        :param email: The email of this Accounts.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this Accounts.

        The fax number of the customer

        :return: The fax of this Accounts.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Accounts.

        The fax number of the customer

        :param fax: The fax of this Accounts.
        :type fax: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this Accounts.

        The first name of the customer with that account

        :return: The first_name of this Accounts.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Accounts.

        The first name of the customer with that account

        :param first_name: The first_name of this Accounts.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def flags(self):
        """Gets the flags of this Accounts.


        :return: The flags of this Accounts.
        :rtype: List[FlagsInner]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Accounts.


        :param flags: The flags of this Accounts.
        :type flags: List[FlagsInner]
        """

        self._flags = flags

    @property
    def ip_address(self):
        """Gets the ip_address of this Accounts.

        Registered ip address of user

        :return: The ip_address of this Accounts.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Accounts.

        Registered ip address of user

        :param ip_address: The ip_address of this Accounts.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def language(self):
        """Gets the language of this Accounts.

        The registered language of the customer

        :return: The language of this Accounts.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Accounts.

        The registered language of the customer

        :param language: The language of this Accounts.
        :type language: str
        """

        self._language = language

    @property
    def last_login(self):
        """Gets the last_login of this Accounts.

        The last time customer logged in - mandatory in italy - available if populated in other territories

        :return: The last_login of this Accounts.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Accounts.

        The last time customer logged in - mandatory in italy - available if populated in other territories

        :param last_login: The last_login of this Accounts.
        :type last_login: str
        """

        self._last_login = last_login

    @property
    def last_name(self):
        """Gets the last_name of this Accounts.

        The last name of the customer with that account

        :return: The last_name of this Accounts.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Accounts.

        The last name of the customer with that account

        :param last_name: The last_name of this Accounts.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def mobile(self):
        """Gets the mobile of this Accounts.

        The mobile number of the customer with that account

        :return: The mobile of this Accounts.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Accounts.

        The mobile number of the customer with that account

        :param mobile: The mobile of this Accounts.
        :type mobile: str
        """

        self._mobile = mobile

    @property
    def nif(self):
        """Gets the nif of this Accounts.

        The national identifcation number of the customer (italy only - mandatory response field)

        :return: The nif of this Accounts.
        :rtype: str
        """
        return self._nif

    @nif.setter
    def nif(self, nif):
        """Sets the nif of this Accounts.

        The national identifcation number of the customer (italy only - mandatory response field)

        :param nif: The nif of this Accounts.
        :type nif: str
        """

        self._nif = nif

    @property
    def office(self):
        """Gets the office of this Accounts.

        Office phone number of customer

        :return: The office of this Accounts.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Accounts.

        Office phone number of customer

        :param office: The office of this Accounts.
        :type office: str
        """

        self._office = office

    @property
    def partner_contactable(self):
        """Gets the partner_contactable of this Accounts.

        Is it okay for the bookmaker to give the user's contact details to companies with which it has partnerships

        :return: The partner_contactable of this Accounts.
        :rtype: bool
        """
        return self._partner_contactable

    @partner_contactable.setter
    def partner_contactable(self, partner_contactable):
        """Sets the partner_contactable of this Accounts.

        Is it okay for the bookmaker to give the user's contact details to companies with which it has partnerships

        :param partner_contactable: The partner_contactable of this Accounts.
        :type partner_contactable: bool
        """

        self._partner_contactable = partner_contactable

    @property
    def postcode(self):
        """Gets the postcode of this Accounts.

        The postCode of the customer's address

        :return: The postcode of this Accounts.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Accounts.

        The postCode of the customer's address

        :param postcode: The postcode of this Accounts.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def second_last_name(self):
        """Gets the second_last_name of this Accounts.

        The second last name of the customer with that account - primarily used in Spanish territory

        :return: The second_last_name of this Accounts.
        :rtype: str
        """
        return self._second_last_name

    @second_last_name.setter
    def second_last_name(self, second_last_name):
        """Sets the second_last_name of this Accounts.

        The second last name of the customer with that account - primarily used in Spanish territory

        :param second_last_name: The second_last_name of this Accounts.
        :type second_last_name: str
        """
        if second_last_name is None:
            raise ValueError("Invalid value for `second_last_name`, must not be `None`")

        self._second_last_name = second_last_name

    @property
    def status(self):
        """Gets the status of this Accounts.

        Account status

        :return: The status of this Accounts.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Accounts.

        Account status

        :param status: The status of this Accounts.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def street1(self):
        """Gets the street1 of this Accounts.

        Line number 1 of the customer's street address written out in full

        :return: The street1 of this Accounts.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this Accounts.

        Line number 1 of the customer's street address written out in full

        :param street1: The street1 of this Accounts.
        :type street1: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this Accounts.

        Line number 2 of the customer's street address written out in full

        :return: The street2 of this Accounts.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this Accounts.

        Line number 2 of the customer's street address written out in full

        :param street2: The street2 of this Accounts.
        :type street2: str
        """

        self._street2 = street2

    @property
    def street3(self):
        """Gets the street3 of this Accounts.

        Line number 3 of the customer's street address written out in full

        :return: The street3 of this Accounts.
        :rtype: str
        """
        return self._street3

    @street3.setter
    def street3(self, street3):
        """Sets the street3 of this Accounts.

        Line number 3 of the customer's street address written out in full

        :param street3: The street3 of this Accounts.
        :type street3: str
        """

        self._street3 = street3

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Accounts.

        name and url location of terms and conditions applicable to this account

        :return: The terms_and_conditions of this Accounts.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Accounts.

        name and url location of terms and conditions applicable to this account

        :param terms_and_conditions: The terms_and_conditions of this Accounts.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def time_zone(self):
        """Gets the time_zone of this Accounts.

        The primary time zone for the customer

        :return: The time_zone of this Accounts.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Accounts.

        The primary time zone for the customer

        :param time_zone: The time_zone of this Accounts.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this Accounts.

        The title of the name of the customer with that account

        :return: The title of this Accounts.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Accounts.

        The title of the name of the customer with that account

        :param title: The title of this Accounts.
        :type title: str
        """

        self._title = title
