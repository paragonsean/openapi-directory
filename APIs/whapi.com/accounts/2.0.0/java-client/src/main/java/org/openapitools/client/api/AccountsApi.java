/*
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountBalance;
import org.openapitools.client.model.AccountErrors;
import org.openapitools.client.model.Accounts;
import java.math.BigDecimal;
import org.openapitools.client.model.GetPayments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBalance
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getBalance(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getBalance(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling getBalance(Async)");
        }

        return getBalanceCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Get a customers account balance
     * This method can be used to retrieve the customer’s account balance in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return AccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public AccountBalance getBalance(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<AccountBalance> localVarResp = getBalanceWithHttpInfo(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Get a customers account balance
     * This method can be used to retrieve the customer’s account balance in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;AccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountBalance> getBalanceWithHttpInfo(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<AccountBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a customers account balance (asynchronously)
     * This method can be used to retrieve the customer’s account balance in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceAsync(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback<AccountBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<AccountBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDetails
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailsCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDetails(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getDetails(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling getDetails(Async)");
        }

        return getDetailsCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Retrieves details of a customers account
     * Retrieves a limited set of customer account details. For security purposes, only a subset is supplied, which does not include fields such as security questions and answers. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default, others need to be selected. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default only in italian region.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getDetails(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<Accounts> localVarResp = getDetailsWithHttpInfo(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Retrieves details of a customers account
     * Retrieves a limited set of customer account details. For security purposes, only a subset is supplied, which does not include fields such as security questions and answers. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default, others need to be selected. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default only in italian region.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getDetailsWithHttpInfo(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves details of a customers account (asynchronously)
     * Retrieves a limited set of customer account details. For security purposes, only a subset is supplied, which does not include fields such as security questions and answers. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default, others need to be selected. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default only in italian region.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not Authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailsAsync(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayments
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param page The page number to return (Used with pageSize) (optional, default to 1.0)
     * @param pageSize Specify the number of results to return per page. (optional, default to 100.0)
     * @param dateFrom The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param sort The order the response will be retuned by. i.e. date,desc (optional, default to date,asc)
     * @param transactionType Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Payments obtained </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCall(String apiKey, String apiSecret, String apiTicket, BigDecimal page, BigDecimal pageSize, String dateFrom, String dateTo, String sort, String transactionType, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionType", transactionType));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, BigDecimal page, BigDecimal pageSize, String dateFrom, String dateTo, String sort, String transactionType, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPayments(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getPayments(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling getPayments(Async)");
        }

        return getPaymentsCall(apiKey, apiSecret, apiTicket, page, pageSize, dateFrom, dateTo, sort, transactionType, fields, include, exclude, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Gets a customer&#39;s account payments
     * Retrieves the customer’s account payments in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param page The page number to return (Used with pageSize) (optional, default to 1.0)
     * @param pageSize Specify the number of results to return per page. (optional, default to 100.0)
     * @param dateFrom The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param sort The order the response will be retuned by. i.e. date,desc (optional, default to date,asc)
     * @param transactionType Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return GetPayments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Payments obtained </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public GetPayments getPayments(String apiKey, String apiSecret, String apiTicket, BigDecimal page, BigDecimal pageSize, String dateFrom, String dateTo, String sort, String transactionType, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<GetPayments> localVarResp = getPaymentsWithHttpInfo(apiKey, apiSecret, apiTicket, page, pageSize, dateFrom, dateTo, sort, transactionType, fields, include, exclude, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Gets a customer&#39;s account payments
     * Retrieves the customer’s account payments in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param page The page number to return (Used with pageSize) (optional, default to 1.0)
     * @param pageSize Specify the number of results to return per page. (optional, default to 100.0)
     * @param dateFrom The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param sort The order the response will be retuned by. i.e. date,desc (optional, default to date,asc)
     * @param transactionType Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;GetPayments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Payments obtained </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPayments> getPaymentsWithHttpInfo(String apiKey, String apiSecret, String apiTicket, BigDecimal page, BigDecimal pageSize, String dateFrom, String dateTo, String sort, String transactionType, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(apiKey, apiSecret, apiTicket, page, pageSize, dateFrom, dateTo, sort, transactionType, fields, include, exclude, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<GetPayments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a customer&#39;s account payments (asynchronously)
     * Retrieves the customer’s account payments in UK Sterling.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param page The page number to return (Used with pageSize) (optional, default to 1.0)
     * @param pageSize Specify the number of results to return per page. (optional, default to 100.0)
     * @param dateFrom The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param sort The order the response will be retuned by. i.e. date,desc (optional, default to date,asc)
     * @param transactionType Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Payments obtained </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsAsync(String apiKey, String apiSecret, String apiTicket, BigDecimal page, BigDecimal pageSize, String dateFrom, String dateTo, String sort, String transactionType, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback<GetPayments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(apiKey, apiSecret, apiTicket, page, pageSize, dateFrom, dateTo, sort, transactionType, fields, include, exclude, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<GetPayments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
