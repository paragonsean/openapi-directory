/*
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FlagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Accounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:50.794310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Accounts {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUM = "accountNum";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUM)
  private String accountNum;

  public static final String SERIALIZED_NAME_ADDITIONAL_SYSTEM_STATUSES = "additionalSystemStatuses";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SYSTEM_STATUSES)
  private String additionalSystemStatuses;

  public static final String SERIALIZED_NAME_BIRTH_PLACE = "birthPlace";
  @SerializedName(SERIALIZED_NAME_BIRTH_PLACE)
  private String birthPlace;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONTACTABLE = "contactable";
  @SerializedName(SERIALIZED_NAME_CONTACTABLE)
  private Boolean contactable;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<FlagsInner> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "lastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private String lastLogin;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_NIF = "nif";
  @SerializedName(SERIALIZED_NAME_NIF)
  private String nif;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_PARTNER_CONTACTABLE = "partnerContactable";
  @SerializedName(SERIALIZED_NAME_PARTNER_CONTACTABLE)
  private Boolean partnerContactable;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_SECOND_LAST_NAME = "secondLastName";
  @SerializedName(SERIALIZED_NAME_SECOND_LAST_NAME)
  private String secondLastName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STREET1 = "street1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_STREET3 = "street3";
  @SerializedName(SERIALIZED_NAME_STREET3)
  private String street3;

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "terms and conditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Accounts() {
  }

  public Accounts accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Accounts accountNum(String accountNum) {
    this.accountNum = accountNum;
    return this;
  }

  /**
   * Account number
   * @return accountNum
   */
  @javax.annotation.Nonnull
  public String getAccountNum() {
    return accountNum;
  }

  public void setAccountNum(String accountNum) {
    this.accountNum = accountNum;
  }


  public Accounts additionalSystemStatuses(String additionalSystemStatuses) {
    this.additionalSystemStatuses = additionalSystemStatuses;
    return this;
  }

  /**
   * Statuses of systems specific to that account - seperate from account status
   * @return additionalSystemStatuses
   */
  @javax.annotation.Nullable
  public String getAdditionalSystemStatuses() {
    return additionalSystemStatuses;
  }

  public void setAdditionalSystemStatuses(String additionalSystemStatuses) {
    this.additionalSystemStatuses = additionalSystemStatuses;
  }


  public Accounts birthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
    return this;
  }

  /**
   * Birthplace details (city, province country code) for customer - primaly used in italy
   * @return birthPlace
   */
  @javax.annotation.Nullable
  public String getBirthPlace() {
    return birthPlace;
  }

  public void setBirthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
  }


  public Accounts city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city of the customer&#39;s address
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Accounts contactable(Boolean contactable) {
    this.contactable = contactable;
    return this;
  }

  /**
   * Is it okay for the bookmaker to contact the customer with marketing information
   * @return contactable
   */
  @javax.annotation.Nullable
  public Boolean getContactable() {
    return contactable;
  }

  public void setContactable(Boolean contactable) {
    this.contactable = contactable;
  }


  public Accounts country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the customer&#39;s address
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Accounts countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * A two-character ISO 3166-1-Alpha-2 code representing the customer&#39;s country of registration
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Accounts county(String county) {
    this.county = county;
    return this;
  }

  /**
   * The county of the customer&#39;s address
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public Accounts currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * A three-character ISO4217 currency code. This will be the currency that the customer registered in
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Accounts customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Accounts email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The primary email address of the customer with that account. Must be unique.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Accounts fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * The fax number of the customer
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public Accounts firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the customer with that account
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Accounts flags(List<FlagsInner> flags) {
    this.flags = flags;
    return this;
  }

  public Accounts addFlagsItem(FlagsInner flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public List<FlagsInner> getFlags() {
    return flags;
  }

  public void setFlags(List<FlagsInner> flags) {
    this.flags = flags;
  }


  public Accounts ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Registered ip address of user
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Accounts language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The registered language of the customer
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Accounts lastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  /**
   * The last time customer logged in - mandatory in italy - available if populated in other territories
   * @return lastLogin
   */
  @javax.annotation.Nullable
  public String getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
  }


  public Accounts lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the customer with that account
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Accounts mobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * The mobile number of the customer with that account
   * @return mobile
   */
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }

  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public Accounts nif(String nif) {
    this.nif = nif;
    return this;
  }

  /**
   * The national identifcation number of the customer (italy only - mandatory response field)
   * @return nif
   */
  @javax.annotation.Nullable
  public String getNif() {
    return nif;
  }

  public void setNif(String nif) {
    this.nif = nif;
  }


  public Accounts office(String office) {
    this.office = office;
    return this;
  }

  /**
   * Office phone number of customer
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public Accounts partnerContactable(Boolean partnerContactable) {
    this.partnerContactable = partnerContactable;
    return this;
  }

  /**
   * Is it okay for the bookmaker to give the user&#39;s contact details to companies with which it has partnerships
   * @return partnerContactable
   */
  @javax.annotation.Nullable
  public Boolean getPartnerContactable() {
    return partnerContactable;
  }

  public void setPartnerContactable(Boolean partnerContactable) {
    this.partnerContactable = partnerContactable;
  }


  public Accounts postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * The postCode of the customer&#39;s address
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public Accounts secondLastName(String secondLastName) {
    this.secondLastName = secondLastName;
    return this;
  }

  /**
   * The second last name of the customer with that account - primarily used in Spanish territory
   * @return secondLastName
   */
  @javax.annotation.Nonnull
  public String getSecondLastName() {
    return secondLastName;
  }

  public void setSecondLastName(String secondLastName) {
    this.secondLastName = secondLastName;
  }


  public Accounts status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Account status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Accounts street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   * Line number 1 of the customer&#39;s street address written out in full
   * @return street1
   */
  @javax.annotation.Nullable
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public Accounts street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   * Line number 2 of the customer&#39;s street address written out in full
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public Accounts street3(String street3) {
    this.street3 = street3;
    return this;
  }

  /**
   * Line number 3 of the customer&#39;s street address written out in full
   * @return street3
   */
  @javax.annotation.Nullable
  public String getStreet3() {
    return street3;
  }

  public void setStreet3(String street3) {
    this.street3 = street3;
  }


  public Accounts termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

  /**
   * name and url location of terms and conditions applicable to this account
   * @return termsAndConditions
   */
  @javax.annotation.Nullable
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public Accounts timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The primary time zone for the customer
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public Accounts title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the name of the customer with that account
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Accounts accounts = (Accounts) o;
    return Objects.equals(this.accountId, accounts.accountId) &&
        Objects.equals(this.accountNum, accounts.accountNum) &&
        Objects.equals(this.additionalSystemStatuses, accounts.additionalSystemStatuses) &&
        Objects.equals(this.birthPlace, accounts.birthPlace) &&
        Objects.equals(this.city, accounts.city) &&
        Objects.equals(this.contactable, accounts.contactable) &&
        Objects.equals(this.country, accounts.country) &&
        Objects.equals(this.countryCode, accounts.countryCode) &&
        Objects.equals(this.county, accounts.county) &&
        Objects.equals(this.currencyCode, accounts.currencyCode) &&
        Objects.equals(this.customerId, accounts.customerId) &&
        Objects.equals(this.email, accounts.email) &&
        Objects.equals(this.fax, accounts.fax) &&
        Objects.equals(this.firstName, accounts.firstName) &&
        Objects.equals(this.flags, accounts.flags) &&
        Objects.equals(this.ipAddress, accounts.ipAddress) &&
        Objects.equals(this.language, accounts.language) &&
        Objects.equals(this.lastLogin, accounts.lastLogin) &&
        Objects.equals(this.lastName, accounts.lastName) &&
        Objects.equals(this.mobile, accounts.mobile) &&
        Objects.equals(this.nif, accounts.nif) &&
        Objects.equals(this.office, accounts.office) &&
        Objects.equals(this.partnerContactable, accounts.partnerContactable) &&
        Objects.equals(this.postcode, accounts.postcode) &&
        Objects.equals(this.secondLastName, accounts.secondLastName) &&
        Objects.equals(this.status, accounts.status) &&
        Objects.equals(this.street1, accounts.street1) &&
        Objects.equals(this.street2, accounts.street2) &&
        Objects.equals(this.street3, accounts.street3) &&
        Objects.equals(this.termsAndConditions, accounts.termsAndConditions) &&
        Objects.equals(this.timeZone, accounts.timeZone) &&
        Objects.equals(this.title, accounts.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountNum, additionalSystemStatuses, birthPlace, city, contactable, country, countryCode, county, currencyCode, customerId, email, fax, firstName, flags, ipAddress, language, lastLogin, lastName, mobile, nif, office, partnerContactable, postcode, secondLastName, status, street1, street2, street3, termsAndConditions, timeZone, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Accounts {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountNum: ").append(toIndentedString(accountNum)).append("\n");
    sb.append("    additionalSystemStatuses: ").append(toIndentedString(additionalSystemStatuses)).append("\n");
    sb.append("    birthPlace: ").append(toIndentedString(birthPlace)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    contactable: ").append(toIndentedString(contactable)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    nif: ").append(toIndentedString(nif)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    partnerContactable: ").append(toIndentedString(partnerContactable)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    secondLastName: ").append(toIndentedString(secondLastName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    street3: ").append(toIndentedString(street3)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountNum");
    openapiFields.add("additionalSystemStatuses");
    openapiFields.add("birthPlace");
    openapiFields.add("city");
    openapiFields.add("contactable");
    openapiFields.add("country");
    openapiFields.add("countryCode");
    openapiFields.add("county");
    openapiFields.add("currencyCode");
    openapiFields.add("customerId");
    openapiFields.add("email");
    openapiFields.add("fax");
    openapiFields.add("firstName");
    openapiFields.add("flags");
    openapiFields.add("ipAddress");
    openapiFields.add("language");
    openapiFields.add("lastLogin");
    openapiFields.add("lastName");
    openapiFields.add("mobile");
    openapiFields.add("nif");
    openapiFields.add("office");
    openapiFields.add("partnerContactable");
    openapiFields.add("postcode");
    openapiFields.add("secondLastName");
    openapiFields.add("status");
    openapiFields.add("street1");
    openapiFields.add("street2");
    openapiFields.add("street3");
    openapiFields.add("terms and conditions");
    openapiFields.add("timeZone");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountNum");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("secondLastName");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Accounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Accounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Accounts is not found in the empty JSON string", Accounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Accounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Accounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Accounts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("accountNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNum").toString()));
      }
      if ((jsonObj.get("additionalSystemStatuses") != null && !jsonObj.get("additionalSystemStatuses").isJsonNull()) && !jsonObj.get("additionalSystemStatuses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalSystemStatuses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalSystemStatuses").toString()));
      }
      if ((jsonObj.get("birthPlace") != null && !jsonObj.get("birthPlace").isJsonNull()) && !jsonObj.get("birthPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthPlace").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) {
        JsonArray jsonArrayflags = jsonObj.getAsJsonArray("flags");
        if (jsonArrayflags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
          }

          // validate the optional field `flags` (array)
          for (int i = 0; i < jsonArrayflags.size(); i++) {
            FlagsInner.validateJsonElement(jsonArrayflags.get(i));
          };
        }
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("lastLogin") != null && !jsonObj.get("lastLogin").isJsonNull()) && !jsonObj.get("lastLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLogin").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("nif") != null && !jsonObj.get("nif").isJsonNull()) && !jsonObj.get("nif").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nif` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nif").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if (!jsonObj.get("secondLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondLastName").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("street1") != null && !jsonObj.get("street1").isJsonNull()) && !jsonObj.get("street1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street1").toString()));
      }
      if ((jsonObj.get("street2") != null && !jsonObj.get("street2").isJsonNull()) && !jsonObj.get("street2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street2").toString()));
      }
      if ((jsonObj.get("street3") != null && !jsonObj.get("street3").isJsonNull()) && !jsonObj.get("street3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street3").toString()));
      }
      if ((jsonObj.get("terms and conditions") != null && !jsonObj.get("terms and conditions").isJsonNull()) && !jsonObj.get("terms and conditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms and conditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms and conditions").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Accounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Accounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Accounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Accounts.class));

       return (TypeAdapter<T>) new TypeAdapter<Accounts>() {
           @Override
           public void write(JsonWriter out, Accounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Accounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Accounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Accounts
   * @throws IOException if the JSON string is invalid with respect to Accounts
   */
  public static Accounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Accounts.class);
  }

  /**
   * Convert an instance of Accounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

