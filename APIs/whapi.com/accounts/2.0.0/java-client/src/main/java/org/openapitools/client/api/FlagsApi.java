/*
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountErrors;
import org.openapitools.client.model.AccountFlagsSet;
import org.openapitools.client.model.FlagsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setAccountFlags
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param flags Array of KVP for setting flags. (required)
     * @param apiCountryCode A two-character ISO 3166-1-Alpha-2 code representing the country API to use. (optional, default to GB)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAccountFlagsCall(String apiKey, String apiSecret, String apiTicket, List<FlagsInner> flags, String apiCountryCode, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flags;

        // create path and map variables
        String localVarPath = "/account/flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        if (apiCountryCode != null) {
            localVarHeaderParams.put("apiCountryCode", localVarApiClient.parameterToString(apiCountryCode));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAccountFlagsValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, List<FlagsInner> flags, String apiCountryCode, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling setAccountFlags(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling setAccountFlags(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling setAccountFlags(Async)");
        }

        // verify the required parameter 'flags' is set
        if (flags == null) {
            throw new ApiException("Missing the required parameter 'flags' when calling setAccountFlags(Async)");
        }

        return setAccountFlagsCall(apiKey, apiSecret, apiTicket, flags, apiCountryCode, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Sets a flag based on name to value provided for the user.
     * Sets a flag based on name to value provided for the user.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param flags Array of KVP for setting flags. (required)
     * @param apiCountryCode A two-character ISO 3166-1-Alpha-2 code representing the country API to use. (optional, default to GB)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return AccountFlagsSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public AccountFlagsSet setAccountFlags(String apiKey, String apiSecret, String apiTicket, List<FlagsInner> flags, String apiCountryCode, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<AccountFlagsSet> localVarResp = setAccountFlagsWithHttpInfo(apiKey, apiSecret, apiTicket, flags, apiCountryCode, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Sets a flag based on name to value provided for the user.
     * Sets a flag based on name to value provided for the user.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param flags Array of KVP for setting flags. (required)
     * @param apiCountryCode A two-character ISO 3166-1-Alpha-2 code representing the country API to use. (optional, default to GB)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;AccountFlagsSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountFlagsSet> setAccountFlagsWithHttpInfo(String apiKey, String apiSecret, String apiTicket, List<FlagsInner> flags, String apiCountryCode, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = setAccountFlagsValidateBeforeCall(apiKey, apiSecret, apiTicket, flags, apiCountryCode, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<AccountFlagsSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets a flag based on name to value provided for the user. (asynchronously)
     * Sets a flag based on name to value provided for the user.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param flags Array of KVP for setting flags. (required)
     * @param apiCountryCode A two-character ISO 3166-1-Alpha-2 code representing the country API to use. (optional, default to GB)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAccountFlagsAsync(String apiKey, String apiSecret, String apiTicket, List<FlagsInner> flags, String apiCountryCode, String territory, String languageAsPerTerritory, final ApiCallback<AccountFlagsSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAccountFlagsValidateBeforeCall(apiKey, apiSecret, apiTicket, flags, apiCountryCode, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<AccountFlagsSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
