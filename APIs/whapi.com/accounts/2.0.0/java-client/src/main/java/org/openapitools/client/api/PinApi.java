/*
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountErrors;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PinApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PinApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PinApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setPin_3
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - PIN Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPin_3Call(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pin;

        // create path and map variables
        String localVarPath = "/account/plusCard/pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPin_3ValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling setPin_3(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling setPin_3(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling setPin_3(Async)");
        }

        // verify the required parameter 'pin' is set
        if (pin == null) {
            throw new ApiException("Missing the required parameter 'pin' when calling setPin_3(Async)");
        }

        return setPin_3Call(apiKey, apiSecret, apiTicket, pin, _callback);

    }

    /**
     * Sets a customer&#39;s plus card pin
     * Sets a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - PIN Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public void setPin_3(String apiKey, String apiSecret, String apiTicket, BigDecimal pin) throws ApiException {
        setPin_3WithHttpInfo(apiKey, apiSecret, apiTicket, pin);
    }

    /**
     * Sets a customer&#39;s plus card pin
     * Sets a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - PIN Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setPin_3WithHttpInfo(String apiKey, String apiSecret, String apiTicket, BigDecimal pin) throws ApiException {
        okhttp3.Call localVarCall = setPin_3ValidateBeforeCall(apiKey, apiSecret, apiTicket, pin, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets a customer&#39;s plus card pin (asynchronously)
     * Sets a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success - PIN Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPin_3Async(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPin_3ValidateBeforeCall(apiKey, apiSecret, apiTicket, pin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePin_3
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - PIN Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePin_3Call(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pin;

        // create path and map variables
        String localVarPath = "/account/plusCard/pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePin_3ValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updatePin_3(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling updatePin_3(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling updatePin_3(Async)");
        }

        // verify the required parameter 'pin' is set
        if (pin == null) {
            throw new ApiException("Missing the required parameter 'pin' when calling updatePin_3(Async)");
        }

        return updatePin_3Call(apiKey, apiSecret, apiTicket, pin, _callback);

    }

    /**
     * Updates a customer&#39;s plus card pin
     * Updates a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - PIN Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public void updatePin_3(String apiKey, String apiSecret, String apiTicket, BigDecimal pin) throws ApiException {
        updatePin_3WithHttpInfo(apiKey, apiSecret, apiTicket, pin);
    }

    /**
     * Updates a customer&#39;s plus card pin
     * Updates a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - PIN Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePin_3WithHttpInfo(String apiKey, String apiSecret, String apiTicket, BigDecimal pin) throws ApiException {
        okhttp3.Call localVarCall = updatePin_3ValidateBeforeCall(apiKey, apiSecret, apiTicket, pin, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a customer&#39;s plus card pin (asynchronously)
     * Updates a customer&#39;s plus card pin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket Ticket Granting Ticket obtained from a previous request (required)
     * @param pin PIN to be set. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - PIN Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such plus card customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePin_3Async(String apiKey, String apiSecret, String apiTicket, BigDecimal pin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePin_3ValidateBeforeCall(apiKey, apiSecret, apiTicket, pin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
