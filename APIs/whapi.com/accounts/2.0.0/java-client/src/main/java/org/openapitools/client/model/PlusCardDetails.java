/*
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OnlineAccount;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.PinStatus;
import org.openapitools.client.model.PlusCard;
import org.openapitools.client.model.RetailAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Plus Card Details and linked accounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:50.794310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlusCardDetails {
  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private PlusCard card;

  public static final String SERIALIZED_NAME_ONLINE_ACCOUNT = "onlineAccount";
  @SerializedName(SERIALIZED_NAME_ONLINE_ACCOUNT)
  private OnlineAccount onlineAccount;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private PinStatus pin;

  public static final String SERIALIZED_NAME_RETAIL_ACCOUNT = "retailAccount";
  @SerializedName(SERIALIZED_NAME_RETAIL_ACCOUNT)
  private RetailAccount retailAccount;

  public PlusCardDetails() {
  }

  public PlusCardDetails card(PlusCard card) {
    this.card = card;
    return this;
  }

  /**
   * Get card
   * @return card
   */
  @javax.annotation.Nullable
  public PlusCard getCard() {
    return card;
  }

  public void setCard(PlusCard card) {
    this.card = card;
  }


  public PlusCardDetails onlineAccount(OnlineAccount onlineAccount) {
    this.onlineAccount = onlineAccount;
    return this;
  }

  /**
   * Get onlineAccount
   * @return onlineAccount
   */
  @javax.annotation.Nullable
  public OnlineAccount getOnlineAccount() {
    return onlineAccount;
  }

  public void setOnlineAccount(OnlineAccount onlineAccount) {
    this.onlineAccount = onlineAccount;
  }


  public PlusCardDetails phone(Phone phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public Phone getPhone() {
    return phone;
  }

  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public PlusCardDetails pin(PinStatus pin) {
    this.pin = pin;
    return this;
  }

  /**
   * Get pin
   * @return pin
   */
  @javax.annotation.Nullable
  public PinStatus getPin() {
    return pin;
  }

  public void setPin(PinStatus pin) {
    this.pin = pin;
  }


  public PlusCardDetails retailAccount(RetailAccount retailAccount) {
    this.retailAccount = retailAccount;
    return this;
  }

  /**
   * Get retailAccount
   * @return retailAccount
   */
  @javax.annotation.Nullable
  public RetailAccount getRetailAccount() {
    return retailAccount;
  }

  public void setRetailAccount(RetailAccount retailAccount) {
    this.retailAccount = retailAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlusCardDetails plusCardDetails = (PlusCardDetails) o;
    return Objects.equals(this.card, plusCardDetails.card) &&
        Objects.equals(this.onlineAccount, plusCardDetails.onlineAccount) &&
        Objects.equals(this.phone, plusCardDetails.phone) &&
        Objects.equals(this.pin, plusCardDetails.pin) &&
        Objects.equals(this.retailAccount, plusCardDetails.retailAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(card, onlineAccount, phone, pin, retailAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlusCardDetails {\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    onlineAccount: ").append(toIndentedString(onlineAccount)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    retailAccount: ").append(toIndentedString(retailAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card");
    openapiFields.add("onlineAccount");
    openapiFields.add("phone");
    openapiFields.add("pin");
    openapiFields.add("retailAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlusCardDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlusCardDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlusCardDetails is not found in the empty JSON string", PlusCardDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlusCardDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlusCardDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        PlusCard.validateJsonElement(jsonObj.get("card"));
      }
      // validate the optional field `onlineAccount`
      if (jsonObj.get("onlineAccount") != null && !jsonObj.get("onlineAccount").isJsonNull()) {
        OnlineAccount.validateJsonElement(jsonObj.get("onlineAccount"));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        Phone.validateJsonElement(jsonObj.get("phone"));
      }
      // validate the optional field `pin`
      if (jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) {
        PinStatus.validateJsonElement(jsonObj.get("pin"));
      }
      // validate the optional field `retailAccount`
      if (jsonObj.get("retailAccount") != null && !jsonObj.get("retailAccount").isJsonNull()) {
        RetailAccount.validateJsonElement(jsonObj.get("retailAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlusCardDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlusCardDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlusCardDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlusCardDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PlusCardDetails>() {
           @Override
           public void write(JsonWriter out, PlusCardDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlusCardDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlusCardDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlusCardDetails
   * @throws IOException if the JSON string is invalid with respect to PlusCardDetails
   */
  public static PlusCardDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlusCardDetails.class);
  }

  /**
   * Convert an instance of PlusCardDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

