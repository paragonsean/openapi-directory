/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountBalance model module.
 * @module model/AccountBalance
 * @version 2.0.0
 */
class AccountBalance {
    /**
     * Constructs a new <code>AccountBalance</code>.
     * @alias module:model/AccountBalance
     * @param balance {Number} Current balance of account
     * @param currencyCode {String} A three-character ISO4217 currency code. This will be the currency that the user registered in
     */
    constructor(balance, currencyCode) { 
        
        AccountBalance.initialize(this, balance, currencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balance, currencyCode) { 
        obj['balance'] = balance;
        obj['currencyCode'] = currencyCode;
    }

    /**
     * Constructs a <code>AccountBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountBalance} obj Optional instance to populate.
     * @return {module:model/AccountBalance} The populated <code>AccountBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountBalance();

            if (data.hasOwnProperty('availableFunds')) {
                obj['availableFunds'] = ApiClient.convertToType(data['availableFunds'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('withdrawableFunds')) {
                obj['withdrawableFunds'] = ApiClient.convertToType(data['withdrawableFunds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountBalance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountBalance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }

        return true;
    }


}

AccountBalance.RequiredProperties = ["balance", "currencyCode"];

/**
 * Current available funds in this account
 * @member {Number} availableFunds
 */
AccountBalance.prototype['availableFunds'] = undefined;

/**
 * Current balance of account
 * @member {Number} balance
 */
AccountBalance.prototype['balance'] = undefined;

/**
 * A three-character ISO4217 currency code. This will be the currency that the user registered in
 * @member {String} currencyCode
 */
AccountBalance.prototype['currencyCode'] = undefined;

/**
 * Current withdrawable balance of this account
 * @member {Number} withdrawableFunds
 */
AccountBalance.prototype['withdrawableFunds'] = undefined;






export default AccountBalance;

