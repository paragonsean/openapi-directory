/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 2.0.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * @alias module:model/Payment
     * @param action {String} Action of the payment (D = Deposit, W = withdrawal)
     * @param amount {Number} The amount of the payment
     * @param id {String} ID of the payment
     * @param paymentDateTime {String} The date and time when the payment was made
     * @param status {String} The status of the payment
     */
    constructor(action, amount, id, paymentDateTime, status) { 
        
        Payment.initialize(this, action, amount, id, paymentDateTime, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, amount, id, paymentDateTime, status) { 
        obj['action'] = action;
        obj['amount'] = amount;
        obj['id'] = id;
        obj['paymentDateTime'] = paymentDateTime;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('commision')) {
                obj['commision'] = ApiClient.convertToType(data['commision'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('methodId')) {
                obj['methodId'] = ApiClient.convertToType(data['methodId'], 'String');
            }
            if (data.hasOwnProperty('paymentDateTime')) {
                obj['paymentDateTime'] = ApiClient.convertToType(data['paymentDateTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Payment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['methodId'] && !(typeof data['methodId'] === 'string' || data['methodId'] instanceof String)) {
            throw new Error("Expected the field `methodId` to be a primitive type in the JSON string but got " + data['methodId']);
        }
        // ensure the json data is a string
        if (data['paymentDateTime'] && !(typeof data['paymentDateTime'] === 'string' || data['paymentDateTime'] instanceof String)) {
            throw new Error("Expected the field `paymentDateTime` to be a primitive type in the JSON string but got " + data['paymentDateTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Payment.RequiredProperties = ["action", "amount", "id", "paymentDateTime", "status"];

/**
 * Action of the payment (D = Deposit, W = withdrawal)
 * @member {String} action
 */
Payment.prototype['action'] = undefined;

/**
 * The amount of the payment
 * @member {Number} amount
 */
Payment.prototype['amount'] = undefined;

/**
 * The channel through which the payment was made
 * @member {String} channel
 */
Payment.prototype['channel'] = undefined;

/**
 * The commision for the payment
 * @member {Number} commision
 */
Payment.prototype['commision'] = undefined;

/**
 * ID of the payment
 * @member {String} id
 */
Payment.prototype['id'] = undefined;

/**
 * The IP address from which the payment was made
 * @member {String} ipAddress
 */
Payment.prototype['ipAddress'] = undefined;

/**
 * ID of the payment method
 * @member {String} methodId
 */
Payment.prototype['methodId'] = undefined;

/**
 * The date and time when the payment was made
 * @member {String} paymentDateTime
 */
Payment.prototype['paymentDateTime'] = undefined;

/**
 * The status of the payment
 * @member {String} status
 */
Payment.prototype['status'] = undefined;

/**
 * Type of the payment
 * @member {String} type
 */
Payment.prototype['type'] = undefined;






export default Payment;

