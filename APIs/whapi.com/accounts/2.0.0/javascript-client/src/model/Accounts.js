/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlagsInner from './FlagsInner';

/**
 * The Accounts model module.
 * @module model/Accounts
 * @version 2.0.0
 */
class Accounts {
    /**
     * Constructs a new <code>Accounts</code>.
     * @alias module:model/Accounts
     * @param accountNum {String} Account number
     * @param firstName {String} The first name of the customer with that account
     * @param lastName {String} The last name of the customer with that account
     * @param secondLastName {String} The second last name of the customer with that account - primarily used in Spanish territory
     * @param status {String} Account status
     */
    constructor(accountNum, firstName, lastName, secondLastName, status) { 
        
        Accounts.initialize(this, accountNum, firstName, lastName, secondLastName, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountNum, firstName, lastName, secondLastName, status) { 
        obj['accountNum'] = accountNum;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['secondLastName'] = secondLastName;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Accounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Accounts} obj Optional instance to populate.
     * @return {module:model/Accounts} The populated <code>Accounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Accounts();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountNum')) {
                obj['accountNum'] = ApiClient.convertToType(data['accountNum'], 'String');
            }
            if (data.hasOwnProperty('additionalSystemStatuses')) {
                obj['additionalSystemStatuses'] = ApiClient.convertToType(data['additionalSystemStatuses'], 'String');
            }
            if (data.hasOwnProperty('birthPlace')) {
                obj['birthPlace'] = ApiClient.convertToType(data['birthPlace'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('contactable')) {
                obj['contactable'] = ApiClient.convertToType(data['contactable'], 'Boolean');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], [FlagsInner]);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastLogin')) {
                obj['lastLogin'] = ApiClient.convertToType(data['lastLogin'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'String');
            }
            if (data.hasOwnProperty('nif')) {
                obj['nif'] = ApiClient.convertToType(data['nif'], 'String');
            }
            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('partnerContactable')) {
                obj['partnerContactable'] = ApiClient.convertToType(data['partnerContactable'], 'Boolean');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('secondLastName')) {
                obj['secondLastName'] = ApiClient.convertToType(data['secondLastName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('street1')) {
                obj['street1'] = ApiClient.convertToType(data['street1'], 'String');
            }
            if (data.hasOwnProperty('street2')) {
                obj['street2'] = ApiClient.convertToType(data['street2'], 'String');
            }
            if (data.hasOwnProperty('street3')) {
                obj['street3'] = ApiClient.convertToType(data['street3'], 'String');
            }
            if (data.hasOwnProperty('terms and conditions')) {
                obj['terms and conditions'] = ApiClient.convertToType(data['terms and conditions'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Accounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Accounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Accounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountNum'] && !(typeof data['accountNum'] === 'string' || data['accountNum'] instanceof String)) {
            throw new Error("Expected the field `accountNum` to be a primitive type in the JSON string but got " + data['accountNum']);
        }
        // ensure the json data is a string
        if (data['additionalSystemStatuses'] && !(typeof data['additionalSystemStatuses'] === 'string' || data['additionalSystemStatuses'] instanceof String)) {
            throw new Error("Expected the field `additionalSystemStatuses` to be a primitive type in the JSON string but got " + data['additionalSystemStatuses']);
        }
        // ensure the json data is a string
        if (data['birthPlace'] && !(typeof data['birthPlace'] === 'string' || data['birthPlace'] instanceof String)) {
            throw new Error("Expected the field `birthPlace` to be a primitive type in the JSON string but got " + data['birthPlace']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        if (data['flags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flags'])) {
                throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
            }
            // validate the optional field `flags` (array)
            for (const item of data['flags']) {
                FlagsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['lastLogin'] && !(typeof data['lastLogin'] === 'string' || data['lastLogin'] instanceof String)) {
            throw new Error("Expected the field `lastLogin` to be a primitive type in the JSON string but got " + data['lastLogin']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['mobile'] && !(typeof data['mobile'] === 'string' || data['mobile'] instanceof String)) {
            throw new Error("Expected the field `mobile` to be a primitive type in the JSON string but got " + data['mobile']);
        }
        // ensure the json data is a string
        if (data['nif'] && !(typeof data['nif'] === 'string' || data['nif'] instanceof String)) {
            throw new Error("Expected the field `nif` to be a primitive type in the JSON string but got " + data['nif']);
        }
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['secondLastName'] && !(typeof data['secondLastName'] === 'string' || data['secondLastName'] instanceof String)) {
            throw new Error("Expected the field `secondLastName` to be a primitive type in the JSON string but got " + data['secondLastName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['street1'] && !(typeof data['street1'] === 'string' || data['street1'] instanceof String)) {
            throw new Error("Expected the field `street1` to be a primitive type in the JSON string but got " + data['street1']);
        }
        // ensure the json data is a string
        if (data['street2'] && !(typeof data['street2'] === 'string' || data['street2'] instanceof String)) {
            throw new Error("Expected the field `street2` to be a primitive type in the JSON string but got " + data['street2']);
        }
        // ensure the json data is a string
        if (data['street3'] && !(typeof data['street3'] === 'string' || data['street3'] instanceof String)) {
            throw new Error("Expected the field `street3` to be a primitive type in the JSON string but got " + data['street3']);
        }
        // ensure the json data is a string
        if (data['terms and conditions'] && !(typeof data['terms and conditions'] === 'string' || data['terms and conditions'] instanceof String)) {
            throw new Error("Expected the field `terms and conditions` to be a primitive type in the JSON string but got " + data['terms and conditions']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Accounts.RequiredProperties = ["accountNum", "firstName", "lastName", "secondLastName", "status"];

/**
 * Account ID
 * @member {String} accountId
 */
Accounts.prototype['accountId'] = undefined;

/**
 * Account number
 * @member {String} accountNum
 */
Accounts.prototype['accountNum'] = undefined;

/**
 * Statuses of systems specific to that account - seperate from account status
 * @member {String} additionalSystemStatuses
 */
Accounts.prototype['additionalSystemStatuses'] = undefined;

/**
 * Birthplace details (city, province country code) for customer - primaly used in italy
 * @member {String} birthPlace
 */
Accounts.prototype['birthPlace'] = undefined;

/**
 * The city of the customer's address
 * @member {String} city
 */
Accounts.prototype['city'] = undefined;

/**
 * Is it okay for the bookmaker to contact the customer with marketing information
 * @member {Boolean} contactable
 */
Accounts.prototype['contactable'] = undefined;

/**
 * The country of the customer's address
 * @member {String} country
 */
Accounts.prototype['country'] = undefined;

/**
 * A two-character ISO 3166-1-Alpha-2 code representing the customer's country of registration
 * @member {String} countryCode
 */
Accounts.prototype['countryCode'] = undefined;

/**
 * The county of the customer's address
 * @member {String} county
 */
Accounts.prototype['county'] = undefined;

/**
 * A three-character ISO4217 currency code. This will be the currency that the customer registered in
 * @member {String} currencyCode
 */
Accounts.prototype['currencyCode'] = undefined;

/**
 * Customer ID
 * @member {String} customerId
 */
Accounts.prototype['customerId'] = undefined;

/**
 * The primary email address of the customer with that account. Must be unique.
 * @member {String} email
 */
Accounts.prototype['email'] = undefined;

/**
 * The fax number of the customer
 * @member {String} fax
 */
Accounts.prototype['fax'] = undefined;

/**
 * The first name of the customer with that account
 * @member {String} firstName
 */
Accounts.prototype['firstName'] = undefined;

/**
 * @member {Array.<module:model/FlagsInner>} flags
 */
Accounts.prototype['flags'] = undefined;

/**
 * Registered ip address of user
 * @member {String} ipAddress
 */
Accounts.prototype['ipAddress'] = undefined;

/**
 * The registered language of the customer
 * @member {String} language
 */
Accounts.prototype['language'] = undefined;

/**
 * The last time customer logged in - mandatory in italy - available if populated in other territories
 * @member {String} lastLogin
 */
Accounts.prototype['lastLogin'] = undefined;

/**
 * The last name of the customer with that account
 * @member {String} lastName
 */
Accounts.prototype['lastName'] = undefined;

/**
 * The mobile number of the customer with that account
 * @member {String} mobile
 */
Accounts.prototype['mobile'] = undefined;

/**
 * The national identifcation number of the customer (italy only - mandatory response field)
 * @member {String} nif
 */
Accounts.prototype['nif'] = undefined;

/**
 * Office phone number of customer
 * @member {String} office
 */
Accounts.prototype['office'] = undefined;

/**
 * Is it okay for the bookmaker to give the user's contact details to companies with which it has partnerships
 * @member {Boolean} partnerContactable
 */
Accounts.prototype['partnerContactable'] = undefined;

/**
 * The postCode of the customer's address
 * @member {String} postcode
 */
Accounts.prototype['postcode'] = undefined;

/**
 * The second last name of the customer with that account - primarily used in Spanish territory
 * @member {String} secondLastName
 */
Accounts.prototype['secondLastName'] = undefined;

/**
 * Account status
 * @member {String} status
 */
Accounts.prototype['status'] = undefined;

/**
 * Line number 1 of the customer's street address written out in full
 * @member {String} street1
 */
Accounts.prototype['street1'] = undefined;

/**
 * Line number 2 of the customer's street address written out in full
 * @member {String} street2
 */
Accounts.prototype['street2'] = undefined;

/**
 * Line number 3 of the customer's street address written out in full
 * @member {String} street3
 */
Accounts.prototype['street3'] = undefined;

/**
 * name and url location of terms and conditions applicable to this account
 * @member {String} terms and conditions
 */
Accounts.prototype['terms and conditions'] = undefined;

/**
 * The primary time zone for the customer
 * @member {String} timeZone
 */
Accounts.prototype['timeZone'] = undefined;

/**
 * The title of the name of the customer with that account
 * @member {String} title
 */
Accounts.prototype['title'] = undefined;






export default Accounts;

