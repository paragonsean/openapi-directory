/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FlagsInner model module.
 * @module model/FlagsInner
 * @version 2.0.0
 */
class FlagsInner {
    /**
     * Constructs a new <code>FlagsInner</code>.
     * @alias module:model/FlagsInner
     * @param flagName {String} Name of the flag to set.
     * @param flagValue {String} Value to set the flag to.
     */
    constructor(flagName, flagValue) { 
        
        FlagsInner.initialize(this, flagName, flagValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flagName, flagValue) { 
        obj['flagName'] = flagName;
        obj['flagValue'] = flagValue;
    }

    /**
     * Constructs a <code>FlagsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlagsInner} obj Optional instance to populate.
     * @return {module:model/FlagsInner} The populated <code>FlagsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlagsInner();

            if (data.hasOwnProperty('flagName')) {
                obj['flagName'] = ApiClient.convertToType(data['flagName'], 'String');
            }
            if (data.hasOwnProperty('flagReason')) {
                obj['flagReason'] = ApiClient.convertToType(data['flagReason'], 'String');
            }
            if (data.hasOwnProperty('flagValue')) {
                obj['flagValue'] = ApiClient.convertToType(data['flagValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlagsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlagsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlagsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['flagName'] && !(typeof data['flagName'] === 'string' || data['flagName'] instanceof String)) {
            throw new Error("Expected the field `flagName` to be a primitive type in the JSON string but got " + data['flagName']);
        }
        // ensure the json data is a string
        if (data['flagReason'] && !(typeof data['flagReason'] === 'string' || data['flagReason'] instanceof String)) {
            throw new Error("Expected the field `flagReason` to be a primitive type in the JSON string but got " + data['flagReason']);
        }
        // ensure the json data is a string
        if (data['flagValue'] && !(typeof data['flagValue'] === 'string' || data['flagValue'] instanceof String)) {
            throw new Error("Expected the field `flagValue` to be a primitive type in the JSON string but got " + data['flagValue']);
        }

        return true;
    }


}

FlagsInner.RequiredProperties = ["flagName", "flagValue"];

/**
 * Name of the flag to set.
 * @member {String} flagName
 */
FlagsInner.prototype['flagName'] = undefined;

/**
 * The reason that the flag has been set.
 * @member {String} flagReason
 */
FlagsInner.prototype['flagReason'] = undefined;

/**
 * Value to set the flag to.
 * @member {String} flagValue
 */
FlagsInner.prototype['flagValue'] = undefined;






export default FlagsInner;

