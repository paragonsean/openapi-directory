/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountBalance from '../model/AccountBalance';
import AccountErrors from '../model/AccountErrors';
import Accounts from '../model/Accounts';
import GetPayments from '../model/GetPayments';

/**
* Accounts service.
* @module api/AccountsApi
* @version 2.0.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBalance operation.
     * @callback module:api/AccountsApi~getBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a customers account balance
     * This method can be used to retrieve the customer’s account balance in UK Sterling.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket Ticket Granting Ticket obtained from a previous request
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/AccountsApi~getBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountBalance}
     */
    getBalance(apiKey, apiSecret, apiTicket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getBalance");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getBalance");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling getBalance");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountBalance;
      return this.apiClient.callApi(
        '/account/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetails operation.
     * @callback module:api/AccountsApi~getDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves details of a customers account
     * Retrieves a limited set of customer account details. For security purposes, only a subset is supplied, which does not include fields such as security questions and answers. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default, others need to be selected. argFileDR1.properties argFileDR2.properties argFileGIB1.properties argFileGIB2.properties argFileGIB3.properties argFileGIB4.properties argFilePP1.properties argFilePP2.properties argFilePP3.properties argFile.properties argFilePT1.properties argFilePTE.properties argFileSCC1.properties argFileSCC2.properties argFileSCC3.properties argFileSTG.properties argFileSYS.properties CWP GatewayMigrationUtility-1.4.00-85 GatewayMigrationUtility.jar GatewayMigrationUtility.sh gmu.log inputFile.xml lib logs migratePolicy.sh migratev2CWP.sh migratev2Policy.sh retrieveCWP.sh retrievePolicy.sh updateCWP.sh updatePolicyById.sh updatePolicy.sh returned by default only in italian region.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket Ticket Granting Ticket obtained from a previous request
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/AccountsApi~getDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getDetails(apiKey, apiSecret, apiTicket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDetails");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getDetails");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling getDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/AccountsApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPayments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a customer's account payments
     * Retrieves the customer’s account payments in UK Sterling.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket Ticket Granting Ticket obtained from a previous request
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1.0)] The page number to return (Used with pageSize)
     * @param {Number} [pageSize = 100.0)] Specify the number of results to return per page.
     * @param {String} [dateFrom] The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [dateTo] The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [sort = 'date,asc')] The order the response will be retuned by. i.e. date,desc
     * @param {String} [transactionType] Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/AccountsApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPayments}
     */
    getPayments(apiKey, apiSecret, apiTicket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getPayments");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getPayments");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling getPayments");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'sort': opts['sort'],
        'transactionType': opts['transactionType'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPayments;
      return this.apiClient.callApi(
        '/account/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
