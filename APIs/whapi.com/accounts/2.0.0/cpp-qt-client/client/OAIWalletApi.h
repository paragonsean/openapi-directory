/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWalletApi_H
#define OAI_OAIWalletApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountErrors.h"
#include "OAIPhone.h"
#include "OAIPlusCardDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWalletApi : public QObject {
    Q_OBJECT

public:
    OAIWalletApi(const int timeOut = 0);
    ~OAIWalletApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void getPlusCardDetails(const QString &api_key, const QString &api_secret, const QString &api_ticket, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    */
    virtual void setLostStolen(const QString &api_key, const QString &api_secret, const QString &api_ticket);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  old_phone_number QString [required]
    * @param[in]  phone_number OAIPhone [required]
    */
    virtual void setPhoneNumber(const QString &api_key, const QString &api_secret, const QString &api_ticket, const QString &old_phone_number, const OAIPhone &phone_number);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  pin double [required]
    */
    virtual void setPin(const QString &api_key, const QString &api_secret, const QString &api_ticket, const double &pin);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  pin double [required]
    */
    virtual void updatePin(const QString &api_key, const QString &api_secret, const QString &api_ticket, const double &pin);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPlusCardDetailsCallback(OAIHttpRequestWorker *worker);
    void setLostStolenCallback(OAIHttpRequestWorker *worker);
    void setPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void setPinCallback(OAIHttpRequestWorker *worker);
    void updatePinCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPlusCardDetailsSignal(OAIPlusCardDetails summary);
    void setLostStolenSignal();
    void setPhoneNumberSignal();
    void setPinSignal();
    void updatePinSignal();


    void getPlusCardDetailsSignalFull(OAIHttpRequestWorker *worker, OAIPlusCardDetails summary);
    void setLostStolenSignalFull(OAIHttpRequestWorker *worker);
    void setPhoneNumberSignalFull(OAIHttpRequestWorker *worker);
    void setPinSignalFull(OAIHttpRequestWorker *worker);
    void updatePinSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getPlusCardDetailsSignalError() instead")
    void getPlusCardDetailsSignalE(OAIPlusCardDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlusCardDetailsSignalError(OAIPlusCardDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLostStolenSignalError() instead")
    void setLostStolenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setLostStolenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPhoneNumberSignalError() instead")
    void setPhoneNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPhoneNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPinSignalError() instead")
    void setPinSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPinSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePinSignalError() instead")
    void updatePinSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePinSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPlusCardDetailsSignalErrorFull() instead")
    void getPlusCardDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlusCardDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLostStolenSignalErrorFull() instead")
    void setLostStolenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLostStolenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPhoneNumberSignalErrorFull() instead")
    void setPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPinSignalErrorFull() instead")
    void setPinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePinSignalErrorFull() instead")
    void updatePinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
