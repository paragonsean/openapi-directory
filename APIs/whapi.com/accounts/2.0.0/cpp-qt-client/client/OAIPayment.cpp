/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_commision_isSet = false;
    m_commision_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_method_id_isSet = false;
    m_method_id_isValid = false;

    m_payment_date_time_isSet = false;
    m_payment_date_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_commision_isValid = ::OpenAPI::fromJsonValue(m_commision, json[QString("commision")]);
    m_commision_isSet = !json[QString("commision")].isNull() && m_commision_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_method_id_isValid = ::OpenAPI::fromJsonValue(m_method_id, json[QString("methodId")]);
    m_method_id_isSet = !json[QString("methodId")].isNull() && m_method_id_isValid;

    m_payment_date_time_isValid = ::OpenAPI::fromJsonValue(m_payment_date_time, json[QString("paymentDateTime")]);
    m_payment_date_time_isSet = !json[QString("paymentDateTime")].isNull() && m_payment_date_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_commision_isSet) {
        obj.insert(QString("commision"), ::OpenAPI::toJsonValue(m_commision));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_method_id_isSet) {
        obj.insert(QString("methodId"), ::OpenAPI::toJsonValue(m_method_id));
    }
    if (m_payment_date_time_isSet) {
        obj.insert(QString("paymentDateTime"), ::OpenAPI::toJsonValue(m_payment_date_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPayment::getAction() const {
    return m_action;
}
void OAIPayment::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPayment::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPayment::is_action_Valid() const{
    return m_action_isValid;
}

double OAIPayment::getAmount() const {
    return m_amount;
}
void OAIPayment::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayment::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPayment::getChannel() const {
    return m_channel;
}
void OAIPayment::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIPayment::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIPayment::is_channel_Valid() const{
    return m_channel_isValid;
}

double OAIPayment::getCommision() const {
    return m_commision;
}
void OAIPayment::setCommision(const double &commision) {
    m_commision = commision;
    m_commision_isSet = true;
}

bool OAIPayment::is_commision_Set() const{
    return m_commision_isSet;
}

bool OAIPayment::is_commision_Valid() const{
    return m_commision_isValid;
}

QString OAIPayment::getId() const {
    return m_id;
}
void OAIPayment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPayment::getIpAddress() const {
    return m_ip_address;
}
void OAIPayment::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIPayment::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIPayment::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIPayment::getMethodId() const {
    return m_method_id;
}
void OAIPayment::setMethodId(const QString &method_id) {
    m_method_id = method_id;
    m_method_id_isSet = true;
}

bool OAIPayment::is_method_id_Set() const{
    return m_method_id_isSet;
}

bool OAIPayment::is_method_id_Valid() const{
    return m_method_id_isValid;
}

QString OAIPayment::getPaymentDateTime() const {
    return m_payment_date_time;
}
void OAIPayment::setPaymentDateTime(const QString &payment_date_time) {
    m_payment_date_time = payment_date_time;
    m_payment_date_time_isSet = true;
}

bool OAIPayment::is_payment_date_time_Set() const{
    return m_payment_date_time_isSet;
}

bool OAIPayment::is_payment_date_time_Valid() const{
    return m_payment_date_time_isValid;
}

QString OAIPayment::getStatus() const {
    return m_status;
}
void OAIPayment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPayment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPayment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPayment::getType() const {
    return m_type;
}
void OAIPayment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPayment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPayment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_amount_isValid && m_id_isValid && m_payment_date_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
