/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlags_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlags_inner::OAIFlags_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlags_inner::OAIFlags_inner() {
    this->initializeModel();
}

OAIFlags_inner::~OAIFlags_inner() {}

void OAIFlags_inner::initializeModel() {

    m_flag_name_isSet = false;
    m_flag_name_isValid = false;

    m_flag_reason_isSet = false;
    m_flag_reason_isValid = false;

    m_flag_value_isSet = false;
    m_flag_value_isValid = false;
}

void OAIFlags_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlags_inner::fromJsonObject(QJsonObject json) {

    m_flag_name_isValid = ::OpenAPI::fromJsonValue(m_flag_name, json[QString("flagName")]);
    m_flag_name_isSet = !json[QString("flagName")].isNull() && m_flag_name_isValid;

    m_flag_reason_isValid = ::OpenAPI::fromJsonValue(m_flag_reason, json[QString("flagReason")]);
    m_flag_reason_isSet = !json[QString("flagReason")].isNull() && m_flag_reason_isValid;

    m_flag_value_isValid = ::OpenAPI::fromJsonValue(m_flag_value, json[QString("flagValue")]);
    m_flag_value_isSet = !json[QString("flagValue")].isNull() && m_flag_value_isValid;
}

QString OAIFlags_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlags_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_flag_name_isSet) {
        obj.insert(QString("flagName"), ::OpenAPI::toJsonValue(m_flag_name));
    }
    if (m_flag_reason_isSet) {
        obj.insert(QString("flagReason"), ::OpenAPI::toJsonValue(m_flag_reason));
    }
    if (m_flag_value_isSet) {
        obj.insert(QString("flagValue"), ::OpenAPI::toJsonValue(m_flag_value));
    }
    return obj;
}

QString OAIFlags_inner::getFlagName() const {
    return m_flag_name;
}
void OAIFlags_inner::setFlagName(const QString &flag_name) {
    m_flag_name = flag_name;
    m_flag_name_isSet = true;
}

bool OAIFlags_inner::is_flag_name_Set() const{
    return m_flag_name_isSet;
}

bool OAIFlags_inner::is_flag_name_Valid() const{
    return m_flag_name_isValid;
}

QString OAIFlags_inner::getFlagReason() const {
    return m_flag_reason;
}
void OAIFlags_inner::setFlagReason(const QString &flag_reason) {
    m_flag_reason = flag_reason;
    m_flag_reason_isSet = true;
}

bool OAIFlags_inner::is_flag_reason_Set() const{
    return m_flag_reason_isSet;
}

bool OAIFlags_inner::is_flag_reason_Valid() const{
    return m_flag_reason_isValid;
}

QString OAIFlags_inner::getFlagValue() const {
    return m_flag_value;
}
void OAIFlags_inner::setFlagValue(const QString &flag_value) {
    m_flag_value = flag_value;
    m_flag_value_isSet = true;
}

bool OAIFlags_inner::is_flag_value_Set() const{
    return m_flag_value_isSet;
}

bool OAIFlags_inner::is_flag_value_Valid() const{
    return m_flag_value_isValid;
}

bool OAIFlags_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlags_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flag_name_isValid && m_flag_value_isValid && true;
}

} // namespace OpenAPI
