/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccounts::OAIAccounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccounts::OAIAccounts() {
    this->initializeModel();
}

OAIAccounts::~OAIAccounts() {}

void OAIAccounts::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_num_isSet = false;
    m_account_num_isValid = false;

    m_additional_system_statuses_isSet = false;
    m_additional_system_statuses_isValid = false;

    m_birth_place_isSet = false;
    m_birth_place_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_contactable_isSet = false;
    m_contactable_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_nif_isSet = false;
    m_nif_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_partner_contactable_isSet = false;
    m_partner_contactable_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_second_last_name_isSet = false;
    m_second_last_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_street1_isSet = false;
    m_street1_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_street3_isSet = false;
    m_street3_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAccounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccounts::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_num_isValid = ::OpenAPI::fromJsonValue(m_account_num, json[QString("accountNum")]);
    m_account_num_isSet = !json[QString("accountNum")].isNull() && m_account_num_isValid;

    m_additional_system_statuses_isValid = ::OpenAPI::fromJsonValue(m_additional_system_statuses, json[QString("additionalSystemStatuses")]);
    m_additional_system_statuses_isSet = !json[QString("additionalSystemStatuses")].isNull() && m_additional_system_statuses_isValid;

    m_birth_place_isValid = ::OpenAPI::fromJsonValue(m_birth_place, json[QString("birthPlace")]);
    m_birth_place_isSet = !json[QString("birthPlace")].isNull() && m_birth_place_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_contactable_isValid = ::OpenAPI::fromJsonValue(m_contactable, json[QString("contactable")]);
    m_contactable_isSet = !json[QString("contactable")].isNull() && m_contactable_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("lastLogin")]);
    m_last_login_isSet = !json[QString("lastLogin")].isNull() && m_last_login_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_nif_isValid = ::OpenAPI::fromJsonValue(m_nif, json[QString("nif")]);
    m_nif_isSet = !json[QString("nif")].isNull() && m_nif_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_partner_contactable_isValid = ::OpenAPI::fromJsonValue(m_partner_contactable, json[QString("partnerContactable")]);
    m_partner_contactable_isSet = !json[QString("partnerContactable")].isNull() && m_partner_contactable_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_second_last_name_isValid = ::OpenAPI::fromJsonValue(m_second_last_name, json[QString("secondLastName")]);
    m_second_last_name_isSet = !json[QString("secondLastName")].isNull() && m_second_last_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_street1_isValid = ::OpenAPI::fromJsonValue(m_street1, json[QString("street1")]);
    m_street1_isSet = !json[QString("street1")].isNull() && m_street1_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("street2")]);
    m_street2_isSet = !json[QString("street2")].isNull() && m_street2_isValid;

    m_street3_isValid = ::OpenAPI::fromJsonValue(m_street3, json[QString("street3")]);
    m_street3_isSet = !json[QString("street3")].isNull() && m_street3_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("terms and conditions")]);
    m_terms_and_conditions_isSet = !json[QString("terms and conditions")].isNull() && m_terms_and_conditions_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAccounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccounts::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_num_isSet) {
        obj.insert(QString("accountNum"), ::OpenAPI::toJsonValue(m_account_num));
    }
    if (m_additional_system_statuses_isSet) {
        obj.insert(QString("additionalSystemStatuses"), ::OpenAPI::toJsonValue(m_additional_system_statuses));
    }
    if (m_birth_place_isSet) {
        obj.insert(QString("birthPlace"), ::OpenAPI::toJsonValue(m_birth_place));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_contactable_isSet) {
        obj.insert(QString("contactable"), ::OpenAPI::toJsonValue(m_contactable));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("lastLogin"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_nif_isSet) {
        obj.insert(QString("nif"), ::OpenAPI::toJsonValue(m_nif));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_partner_contactable_isSet) {
        obj.insert(QString("partnerContactable"), ::OpenAPI::toJsonValue(m_partner_contactable));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_second_last_name_isSet) {
        obj.insert(QString("secondLastName"), ::OpenAPI::toJsonValue(m_second_last_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_street1_isSet) {
        obj.insert(QString("street1"), ::OpenAPI::toJsonValue(m_street1));
    }
    if (m_street2_isSet) {
        obj.insert(QString("street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_street3_isSet) {
        obj.insert(QString("street3"), ::OpenAPI::toJsonValue(m_street3));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("terms and conditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAccounts::getAccountId() const {
    return m_account_id;
}
void OAIAccounts::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccounts::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccounts::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAccounts::getAccountNum() const {
    return m_account_num;
}
void OAIAccounts::setAccountNum(const QString &account_num) {
    m_account_num = account_num;
    m_account_num_isSet = true;
}

bool OAIAccounts::is_account_num_Set() const{
    return m_account_num_isSet;
}

bool OAIAccounts::is_account_num_Valid() const{
    return m_account_num_isValid;
}

QString OAIAccounts::getAdditionalSystemStatuses() const {
    return m_additional_system_statuses;
}
void OAIAccounts::setAdditionalSystemStatuses(const QString &additional_system_statuses) {
    m_additional_system_statuses = additional_system_statuses;
    m_additional_system_statuses_isSet = true;
}

bool OAIAccounts::is_additional_system_statuses_Set() const{
    return m_additional_system_statuses_isSet;
}

bool OAIAccounts::is_additional_system_statuses_Valid() const{
    return m_additional_system_statuses_isValid;
}

QString OAIAccounts::getBirthPlace() const {
    return m_birth_place;
}
void OAIAccounts::setBirthPlace(const QString &birth_place) {
    m_birth_place = birth_place;
    m_birth_place_isSet = true;
}

bool OAIAccounts::is_birth_place_Set() const{
    return m_birth_place_isSet;
}

bool OAIAccounts::is_birth_place_Valid() const{
    return m_birth_place_isValid;
}

QString OAIAccounts::getCity() const {
    return m_city;
}
void OAIAccounts::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAccounts::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAccounts::is_city_Valid() const{
    return m_city_isValid;
}

bool OAIAccounts::isContactable() const {
    return m_contactable;
}
void OAIAccounts::setContactable(const bool &contactable) {
    m_contactable = contactable;
    m_contactable_isSet = true;
}

bool OAIAccounts::is_contactable_Set() const{
    return m_contactable_isSet;
}

bool OAIAccounts::is_contactable_Valid() const{
    return m_contactable_isValid;
}

QString OAIAccounts::getCountry() const {
    return m_country;
}
void OAIAccounts::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccounts::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccounts::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAccounts::getCountryCode() const {
    return m_country_code;
}
void OAIAccounts::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAccounts::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAccounts::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAccounts::getCounty() const {
    return m_county;
}
void OAIAccounts::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIAccounts::is_county_Set() const{
    return m_county_isSet;
}

bool OAIAccounts::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIAccounts::getCurrencyCode() const {
    return m_currency_code;
}
void OAIAccounts::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIAccounts::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIAccounts::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIAccounts::getCustomerId() const {
    return m_customer_id;
}
void OAIAccounts::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAccounts::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAccounts::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIAccounts::getEmail() const {
    return m_email;
}
void OAIAccounts::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccounts::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccounts::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccounts::getFax() const {
    return m_fax;
}
void OAIAccounts::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIAccounts::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIAccounts::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIAccounts::getFirstName() const {
    return m_first_name;
}
void OAIAccounts::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAccounts::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAccounts::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QList<OAIFlags_inner> OAIAccounts::getFlags() const {
    return m_flags;
}
void OAIAccounts::setFlags(const QList<OAIFlags_inner> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIAccounts::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIAccounts::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIAccounts::getIpAddress() const {
    return m_ip_address;
}
void OAIAccounts::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAccounts::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAccounts::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAccounts::getLanguage() const {
    return m_language;
}
void OAIAccounts::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAccounts::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAccounts::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIAccounts::getLastLogin() const {
    return m_last_login;
}
void OAIAccounts::setLastLogin(const QString &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIAccounts::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIAccounts::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIAccounts::getLastName() const {
    return m_last_name;
}
void OAIAccounts::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAccounts::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAccounts::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIAccounts::getMobile() const {
    return m_mobile;
}
void OAIAccounts::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIAccounts::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIAccounts::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAIAccounts::getNif() const {
    return m_nif;
}
void OAIAccounts::setNif(const QString &nif) {
    m_nif = nif;
    m_nif_isSet = true;
}

bool OAIAccounts::is_nif_Set() const{
    return m_nif_isSet;
}

bool OAIAccounts::is_nif_Valid() const{
    return m_nif_isValid;
}

QString OAIAccounts::getOffice() const {
    return m_office;
}
void OAIAccounts::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAIAccounts::is_office_Set() const{
    return m_office_isSet;
}

bool OAIAccounts::is_office_Valid() const{
    return m_office_isValid;
}

bool OAIAccounts::isPartnerContactable() const {
    return m_partner_contactable;
}
void OAIAccounts::setPartnerContactable(const bool &partner_contactable) {
    m_partner_contactable = partner_contactable;
    m_partner_contactable_isSet = true;
}

bool OAIAccounts::is_partner_contactable_Set() const{
    return m_partner_contactable_isSet;
}

bool OAIAccounts::is_partner_contactable_Valid() const{
    return m_partner_contactable_isValid;
}

QString OAIAccounts::getPostcode() const {
    return m_postcode;
}
void OAIAccounts::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIAccounts::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIAccounts::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIAccounts::getSecondLastName() const {
    return m_second_last_name;
}
void OAIAccounts::setSecondLastName(const QString &second_last_name) {
    m_second_last_name = second_last_name;
    m_second_last_name_isSet = true;
}

bool OAIAccounts::is_second_last_name_Set() const{
    return m_second_last_name_isSet;
}

bool OAIAccounts::is_second_last_name_Valid() const{
    return m_second_last_name_isValid;
}

QString OAIAccounts::getStatus() const {
    return m_status;
}
void OAIAccounts::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccounts::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccounts::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAccounts::getStreet1() const {
    return m_street1;
}
void OAIAccounts::setStreet1(const QString &street1) {
    m_street1 = street1;
    m_street1_isSet = true;
}

bool OAIAccounts::is_street1_Set() const{
    return m_street1_isSet;
}

bool OAIAccounts::is_street1_Valid() const{
    return m_street1_isValid;
}

QString OAIAccounts::getStreet2() const {
    return m_street2;
}
void OAIAccounts::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAIAccounts::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAIAccounts::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAIAccounts::getStreet3() const {
    return m_street3;
}
void OAIAccounts::setStreet3(const QString &street3) {
    m_street3 = street3;
    m_street3_isSet = true;
}

bool OAIAccounts::is_street3_Set() const{
    return m_street3_isSet;
}

bool OAIAccounts::is_street3_Valid() const{
    return m_street3_isValid;
}

QString OAIAccounts::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIAccounts::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIAccounts::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIAccounts::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

QString OAIAccounts::getTimeZone() const {
    return m_time_zone;
}
void OAIAccounts::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIAccounts::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIAccounts::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIAccounts::getTitle() const {
    return m_title;
}
void OAIAccounts::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAccounts::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAccounts::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAccounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_system_statuses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contactable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nif_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_contactable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_num_isValid && m_first_name_isValid && m_last_name_isValid && m_second_last_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
