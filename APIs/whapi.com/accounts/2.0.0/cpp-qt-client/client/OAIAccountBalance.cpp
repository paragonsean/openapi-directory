/**
 * Accounts API
 * The Accounts API is a collection of methods used to query a customer account. It allows the developer to retrieve account-related data such as the user account balance. It should be noted that regional variations may exist - so some fields may not be returned for certain territories.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountBalance::OAIAccountBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountBalance::OAIAccountBalance() {
    this->initializeModel();
}

OAIAccountBalance::~OAIAccountBalance() {}

void OAIAccountBalance::initializeModel() {

    m_available_funds_isSet = false;
    m_available_funds_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_withdrawable_funds_isSet = false;
    m_withdrawable_funds_isValid = false;
}

void OAIAccountBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountBalance::fromJsonObject(QJsonObject json) {

    m_available_funds_isValid = ::OpenAPI::fromJsonValue(m_available_funds, json[QString("availableFunds")]);
    m_available_funds_isSet = !json[QString("availableFunds")].isNull() && m_available_funds_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_withdrawable_funds_isValid = ::OpenAPI::fromJsonValue(m_withdrawable_funds, json[QString("withdrawableFunds")]);
    m_withdrawable_funds_isSet = !json[QString("withdrawableFunds")].isNull() && m_withdrawable_funds_isValid;
}

QString OAIAccountBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_available_funds_isSet) {
        obj.insert(QString("availableFunds"), ::OpenAPI::toJsonValue(m_available_funds));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_withdrawable_funds_isSet) {
        obj.insert(QString("withdrawableFunds"), ::OpenAPI::toJsonValue(m_withdrawable_funds));
    }
    return obj;
}

double OAIAccountBalance::getAvailableFunds() const {
    return m_available_funds;
}
void OAIAccountBalance::setAvailableFunds(const double &available_funds) {
    m_available_funds = available_funds;
    m_available_funds_isSet = true;
}

bool OAIAccountBalance::is_available_funds_Set() const{
    return m_available_funds_isSet;
}

bool OAIAccountBalance::is_available_funds_Valid() const{
    return m_available_funds_isValid;
}

double OAIAccountBalance::getBalance() const {
    return m_balance;
}
void OAIAccountBalance::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAccountBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAccountBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIAccountBalance::getCurrencyCode() const {
    return m_currency_code;
}
void OAIAccountBalance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIAccountBalance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIAccountBalance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIAccountBalance::getWithdrawableFunds() const {
    return m_withdrawable_funds;
}
void OAIAccountBalance::setWithdrawableFunds(const double &withdrawable_funds) {
    m_withdrawable_funds = withdrawable_funds;
    m_withdrawable_funds_isSet = true;
}

bool OAIAccountBalance::is_withdrawable_funds_Set() const{
    return m_withdrawable_funds_isSet;
}

bool OAIAccountBalance::is_withdrawable_funds_Valid() const{
    return m_withdrawable_funds_isValid;
}

bool OAIAccountBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_withdrawable_funds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_currency_code_isValid && true;
}

} // namespace OpenAPI
