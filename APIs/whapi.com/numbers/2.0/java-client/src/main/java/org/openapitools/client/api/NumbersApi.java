/*
 * Numbers API
 * The William Hill Numbers API uses a single method that allows you to generate random numbers for your application. Numbers can either be unique or can be produced with the chance that some might be the same. For example, you can have a highest value of 6 and a lowest value of 1 with a count of 2 with a unique value of false - this will give you two numbers between 1 and 6 which are independent, just like two dice being rolled.<br /><br />The Numbers API is a Private API and therefore not automatically available to developers. To use this API, contact your business manager who will guide you through the separate Terms and Conditions of use before you can have the API assigned to your application.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NumbersErrors;
import org.openapitools.client.model.Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumbersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NumbersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumbersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRandomNumbers
     * @param apiKey A unique identifier of your application that is generated by the API portal and presented in the header. (required)
     * @param apiSecret Another unique identifier for your application. The secret must never be sent over HTTP. (required)
     * @param gameCode Identifier that indicates the game for which the RNG (Random Number Generator) has been used. (required)
     * @param highest Highest possible value to be returned. (required)
     * @param lowest Lowest possible value to be returned. (required)
     * @param count Number of values to be returned. (required)
     * @param unique Should the numbers returned be unique (required)
     * @param apiTicket The authentication ticket associated with the user session. The getRandomNumbers method operates in two different ways – ‘Demo’ mode and ‘Live’ mode. In Demo mode, where no money is involved, the ticket is not required and can be used without it. In Live mode, when there is a financial outcome, the developer must supply a valid authentication and the ticket must be supplied. Important: The service should not be used in Live mode without a ticket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomNumbersCall(String apiKey, String apiSecret, String gameCode, Integer highest, Integer lowest, Integer count, Boolean unique, String apiTicket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/generate/integers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameCode", gameCode));
        }

        if (highest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highest", highest));
        }

        if (lowest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lowest", lowest));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomNumbersValidateBeforeCall(String apiKey, String apiSecret, String gameCode, Integer highest, Integer lowest, Integer count, Boolean unique, String apiTicket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'gameCode' is set
        if (gameCode == null) {
            throw new ApiException("Missing the required parameter 'gameCode' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'highest' is set
        if (highest == null) {
            throw new ApiException("Missing the required parameter 'highest' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'lowest' is set
        if (lowest == null) {
            throw new ApiException("Missing the required parameter 'lowest' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling getRandomNumbers(Async)");
        }

        // verify the required parameter 'unique' is set
        if (unique == null) {
            throw new ApiException("Missing the required parameter 'unique' when calling getRandomNumbers(Async)");
        }

        return getRandomNumbersCall(apiKey, apiSecret, gameCode, highest, lowest, count, unique, apiTicket, _callback);

    }

    /**
     * 
     * This method is used to generate random numbers for your app. Within the request, you can specify the lowest number, the highest number and the amount of numbers returned. There is also an option to generate a unique set of numbers with no repetition of the same numbers allowed in the return.
     * @param apiKey A unique identifier of your application that is generated by the API portal and presented in the header. (required)
     * @param apiSecret Another unique identifier for your application. The secret must never be sent over HTTP. (required)
     * @param gameCode Identifier that indicates the game for which the RNG (Random Number Generator) has been used. (required)
     * @param highest Highest possible value to be returned. (required)
     * @param lowest Lowest possible value to be returned. (required)
     * @param count Number of values to be returned. (required)
     * @param unique Should the numbers returned be unique (required)
     * @param apiTicket The authentication ticket associated with the user session. The getRandomNumbers method operates in two different ways – ‘Demo’ mode and ‘Live’ mode. In Demo mode, where no money is involved, the ticket is not required and can be used without it. In Live mode, when there is a financial outcome, the developer must supply a valid authentication and the ticket must be supplied. Important: The service should not be used in Live mode without a ticket. (optional)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Success getRandomNumbers(String apiKey, String apiSecret, String gameCode, Integer highest, Integer lowest, Integer count, Boolean unique, String apiTicket) throws ApiException {
        ApiResponse<Success> localVarResp = getRandomNumbersWithHttpInfo(apiKey, apiSecret, gameCode, highest, lowest, count, unique, apiTicket);
        return localVarResp.getData();
    }

    /**
     * 
     * This method is used to generate random numbers for your app. Within the request, you can specify the lowest number, the highest number and the amount of numbers returned. There is also an option to generate a unique set of numbers with no repetition of the same numbers allowed in the return.
     * @param apiKey A unique identifier of your application that is generated by the API portal and presented in the header. (required)
     * @param apiSecret Another unique identifier for your application. The secret must never be sent over HTTP. (required)
     * @param gameCode Identifier that indicates the game for which the RNG (Random Number Generator) has been used. (required)
     * @param highest Highest possible value to be returned. (required)
     * @param lowest Lowest possible value to be returned. (required)
     * @param count Number of values to be returned. (required)
     * @param unique Should the numbers returned be unique (required)
     * @param apiTicket The authentication ticket associated with the user session. The getRandomNumbers method operates in two different ways – ‘Demo’ mode and ‘Live’ mode. In Demo mode, where no money is involved, the ticket is not required and can be used without it. In Live mode, when there is a financial outcome, the developer must supply a valid authentication and the ticket must be supplied. Important: The service should not be used in Live mode without a ticket. (optional)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> getRandomNumbersWithHttpInfo(String apiKey, String apiSecret, String gameCode, Integer highest, Integer lowest, Integer count, Boolean unique, String apiTicket) throws ApiException {
        okhttp3.Call localVarCall = getRandomNumbersValidateBeforeCall(apiKey, apiSecret, gameCode, highest, lowest, count, unique, apiTicket, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is used to generate random numbers for your app. Within the request, you can specify the lowest number, the highest number and the amount of numbers returned. There is also an option to generate a unique set of numbers with no repetition of the same numbers allowed in the return.
     * @param apiKey A unique identifier of your application that is generated by the API portal and presented in the header. (required)
     * @param apiSecret Another unique identifier for your application. The secret must never be sent over HTTP. (required)
     * @param gameCode Identifier that indicates the game for which the RNG (Random Number Generator) has been used. (required)
     * @param highest Highest possible value to be returned. (required)
     * @param lowest Lowest possible value to be returned. (required)
     * @param count Number of values to be returned. (required)
     * @param unique Should the numbers returned be unique (required)
     * @param apiTicket The authentication ticket associated with the user session. The getRandomNumbers method operates in two different ways – ‘Demo’ mode and ‘Live’ mode. In Demo mode, where no money is involved, the ticket is not required and can be used without it. In Live mode, when there is a financial outcome, the developer must supply a valid authentication and the ticket must be supplied. Important: The service should not be used in Live mode without a ticket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomNumbersAsync(String apiKey, String apiSecret, String gameCode, Integer highest, Integer lowest, Integer count, Boolean unique, String apiTicket, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomNumbersValidateBeforeCall(apiKey, apiSecret, gameCode, highest, lowest, count, unique, apiTicket, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
