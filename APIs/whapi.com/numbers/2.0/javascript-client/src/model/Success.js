/**
 * Numbers API
 * The William Hill Numbers API uses a single method that allows you to generate random numbers for your application. Numbers can either be unique or can be produced with the chance that some might be the same. For example, you can have a highest value of 6 and a lowest value of 1 with a count of 2 with a unique value of false - this will give you two numbers between 1 and 6 which are independent, just like two dice being rolled.<br /><br />The Numbers API is a Private API and therefore not automatically available to developers. To use this API, contact your business manager who will guide you through the separate Terms and Conditions of use before you can have the API assigned to your application.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Success model module.
 * @module model/Success
 * @version 2.0
 */
class Success {
    /**
     * Constructs a new <code>Success</code>.
     * @alias module:model/Success
     */
    constructor() { 
        
        Success.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Success</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Success} obj Optional instance to populate.
     * @return {module:model/Success} The populated <code>Success</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Success();

            if (data.hasOwnProperty('randomNumbers')) {
                obj['randomNumbers'] = ApiClient.convertToType(data['randomNumbers'], ['Number']);
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Success</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Success</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['randomNumbers'])) {
            throw new Error("Expected the field `randomNumbers` to be an array in the JSON data but got " + data['randomNumbers']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }

        return true;
    }


}



/**
 * An array of random numbers
 * @member {Array.<Number>} randomNumbers
 */
Success.prototype['randomNumbers'] = undefined;

/**
 * This is either the IP address of the customer if not authenticated, or if used in ‘Live’ mode, when there is a financial outcome, it is the IP address and customerId for the account the ticket was generated for. This is used for audit purposes in case of financial query about a game outcome.
 * @member {String} sessionId
 */
Success.prototype['sessionId'] = undefined;






export default Success;

