/**
 * Numbers API
 * The William Hill Numbers API uses a single method that allows you to generate random numbers for your application. Numbers can either be unique or can be produced with the chance that some might be the same. For example, you can have a highest value of 6 and a lowest value of 1 with a count of 2 with a unique value of false - this will give you two numbers between 1 and 6 which are independent, just like two dice being rolled.<br /><br />The Numbers API is a Private API and therefore not automatically available to developers. To use this API, contact your business manager who will guide you through the separate Terms and Conditions of use before you can have the API assigned to your application.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NumbersErrors from '../model/NumbersErrors';
import Success from '../model/Success';

/**
* Numbers service.
* @module api/NumbersApi
* @version 2.0
*/
export default class NumbersApi {

    /**
    * Constructs a new NumbersApi. 
    * @alias module:api/NumbersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRandomNumbers operation.
     * @callback module:api/NumbersApi~getRandomNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is used to generate random numbers for your app. Within the request, you can specify the lowest number, the highest number and the amount of numbers returned. There is also an option to generate a unique set of numbers with no repetition of the same numbers allowed in the return.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal and presented in the header.
     * @param {String} apiSecret Another unique identifier for your application. The secret must never be sent over HTTP.
     * @param {String} gameCode Identifier that indicates the game for which the RNG (Random Number Generator) has been used.
     * @param {Number} highest Highest possible value to be returned.
     * @param {Number} lowest Lowest possible value to be returned.
     * @param {Number} count Number of values to be returned.
     * @param {Boolean} unique Should the numbers returned be unique
     * @param {Object} opts Optional parameters
     * @param {String} [apiTicket] The authentication ticket associated with the user session. The getRandomNumbers method operates in two different ways – ‘Demo’ mode and ‘Live’ mode. In Demo mode, where no money is involved, the ticket is not required and can be used without it. In Live mode, when there is a financial outcome, the developer must supply a valid authentication and the ticket must be supplied. Important: The service should not be used in Live mode without a ticket.
     * @param {module:api/NumbersApi~getRandomNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    getRandomNumbers(apiKey, apiSecret, gameCode, highest, lowest, count, unique, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getRandomNumbers");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getRandomNumbers");
      }
      // verify the required parameter 'gameCode' is set
      if (gameCode === undefined || gameCode === null) {
        throw new Error("Missing the required parameter 'gameCode' when calling getRandomNumbers");
      }
      // verify the required parameter 'highest' is set
      if (highest === undefined || highest === null) {
        throw new Error("Missing the required parameter 'highest' when calling getRandomNumbers");
      }
      // verify the required parameter 'lowest' is set
      if (lowest === undefined || lowest === null) {
        throw new Error("Missing the required parameter 'lowest' when calling getRandomNumbers");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getRandomNumbers");
      }
      // verify the required parameter 'unique' is set
      if (unique === undefined || unique === null) {
        throw new Error("Missing the required parameter 'unique' when calling getRandomNumbers");
      }

      let pathParams = {
      };
      let queryParams = {
        'gameCode': gameCode,
        'highest': highest,
        'lowest': lowest,
        'count': count,
        'unique': unique
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': opts['apiTicket']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/generate/integers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
