from typing import List, Dict
from aiohttp import web

from openapi_server.models.bet_delayed import BetDelayed
from openapi_server.models.bet_history_response import BetHistoryResponse
from openapi_server.models.bet_placed import BetPlaced
from openapi_server.models.bet_slip_request import BetSlipRequest
from openapi_server.models.bet_slip_response import BetSlipResponse
from openapi_server.models.cash_in_response import CashInResponse
from openapi_server.models.complex_bet_request_body import ComplexBetRequestBody
from openapi_server.models.errors import Errors
from openapi_server.models.free_bet_detail import FreeBetDetail
from openapi_server.models.single_bet_request_body import SingleBetRequestBody
from openapi_server import util


async def cashin(request: web.Request, api_key, api_secret, api_ticket, bet_id, cash_in_value, cashin_bet_delay_id) -> web.Response:
    """Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer

    Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param api_ticket: The ticket obtained from the sessions API
    :type api_ticket: str
    :param bet_id: The identifier of the bet
    :type bet_id: str
    :param cash_in_value: The cash in value of the bet
    :type cash_in_value: float
    :param cashin_bet_delay_id: The ID of this bet delay
    :type cashin_bet_delay_id: str

    """
    return web.Response(status=200)


async def get_bet_history(request: web.Request, api_key, api_secret, api_ticket, date_from, date_to, fields=None, include=None, exclude=None, page=None, page_size=None, sort=None, settled=None) -> web.Response:
    """Retrieves the customer’s bet history.

    Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param api_ticket: The ticket obtained from the sessions API
    :type api_ticket: str
    :param date_from: The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss)
    :type date_from: str
    :param date_to: The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss)
    :type date_to: str
    :param fields: Specify an absolute field list to return (Comma Separated List)
    :type fields: List[str]
    :param include: Specify fields in addition to the default to return (Comma Separated List)
    :type include: List[str]
    :param exclude: Specify fields from the default to exclude (Comma Separated List)
    :type exclude: List[str]
    :param page: The index of the page to return
    :type page: 
    :param page_size: The number of results per page
    :type page_size: 
    :param sort: The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently
    :type sort: str
    :param settled: Filter by settled bets. If omitted, both settled and unsettled will be returned.
    :type settled: bool

    """
    return web.Response(status=200)


async def get_free_bets(request: web.Request, api_key, api_secret, api_ticket, fields=None, include=None, exclude=None) -> web.Response:
    """Returns available free bets

    Retrieves the current free bets available for a customer.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param api_ticket: The ticket obtained from the sessions API
    :type api_ticket: str
    :param fields: Specify an absolute field list to return (Comma Separated List)
    :type fields: List[str]
    :param include: Specify fields in addition to the default to return (Comma Separated List)
    :type include: List[str]
    :param exclude: Specify fields from the default to exclude (Comma Separated List)
    :type exclude: List[str]

    """
    return web.Response(status=200)


async def place_complex_bet(request: web.Request, api_key, api_secret, api_ticket, body, fields=None, include=None, exclude=None) -> web.Response:
    """Places a multiple or a complex bet.

    Places a multiple or a complex bet.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param api_ticket: The ticket obtained from the sessions API
    :type api_ticket: str
    :param body: Complex bet request body
    :type body: dict | bytes
    :param fields: Specify an absolute field list to return (Comma Separated List)
    :type fields: List[str]
    :param include: Specify fields in addition to the default to return (Comma Separated List)
    :type include: List[str]
    :param exclude: Specify fields from the default to exclude (Comma Separated List)
    :type exclude: List[str]

    """
    body = ComplexBetRequestBody.from_dict(body)
    return web.Response(status=200)


async def place_single_bet(request: web.Request, api_key, api_secret, api_ticket, body, fields=None, include=None, exclude=None) -> web.Response:
    """Places a single bet

    Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param api_ticket: The ticket obtained from the sessions API
    :type api_ticket: str
    :param body: Single bet request body
    :type body: dict | bytes
    :param fields: Specify an absolute field list to return (Comma Separated List)
    :type fields: List[str]
    :param include: Specify fields in addition to the default to return (Comma Separated List)
    :type include: List[str]
    :param exclude: Specify fields from the default to exclude (Comma Separated List)
    :type exclude: List[str]

    """
    body = SingleBetRequestBody.from_dict(body)
    return web.Response(status=200)


async def validate_betslip(request: web.Request, api_key, api_secret, body, expanded=None) -> web.Response:
    """validate_betslip

    Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.

    :param api_key: A unique identifier of your application that is generated by the API portal.
    :type api_key: str
    :param api_secret: Another unique identifier for your application.
    :type api_secret: str
    :param body: Betslip Body
    :type body: dict | bytes
    :param expanded: Allows for all bets for given selections to be returned - not just the specified type
    :type expanded: str

    """
    body = BetSlipRequest.from_dict(body)
    return web.Response(status=200)
