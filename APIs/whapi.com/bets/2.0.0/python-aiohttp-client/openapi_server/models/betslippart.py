# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Betslippart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, each_way_available: bool=None, include_in_multiple: bool=None, leg_group: int=None, price_changed: bool=None, price_den: int=None, price_num: int=None, price_type: int=None, selection_id: int=None, single_available: bool=None, starting_price_available: bool=None, status: str=None, status_changed: bool=None):
        """Betslippart - a model defined in OpenAPI

        :param each_way_available: The each_way_available of this Betslippart.
        :param include_in_multiple: The include_in_multiple of this Betslippart.
        :param leg_group: The leg_group of this Betslippart.
        :param price_changed: The price_changed of this Betslippart.
        :param price_den: The price_den of this Betslippart.
        :param price_num: The price_num of this Betslippart.
        :param price_type: The price_type of this Betslippart.
        :param selection_id: The selection_id of this Betslippart.
        :param single_available: The single_available of this Betslippart.
        :param starting_price_available: The starting_price_available of this Betslippart.
        :param status: The status of this Betslippart.
        :param status_changed: The status_changed of this Betslippart.
        """
        self.openapi_types = {
            'each_way_available': bool,
            'include_in_multiple': bool,
            'leg_group': int,
            'price_changed': bool,
            'price_den': int,
            'price_num': int,
            'price_type': int,
            'selection_id': int,
            'single_available': bool,
            'starting_price_available': bool,
            'status': str,
            'status_changed': bool
        }

        self.attribute_map = {
            'each_way_available': 'eachWayAvailable',
            'include_in_multiple': 'includeInMultiple',
            'leg_group': 'legGroup',
            'price_changed': 'priceChanged',
            'price_den': 'priceDen',
            'price_num': 'priceNum',
            'price_type': 'priceType',
            'selection_id': 'selectionId',
            'single_available': 'singleAvailable',
            'starting_price_available': 'startingPriceAvailable',
            'status': 'status',
            'status_changed': 'statusChanged'
        }

        self._each_way_available = each_way_available
        self._include_in_multiple = include_in_multiple
        self._leg_group = leg_group
        self._price_changed = price_changed
        self._price_den = price_den
        self._price_num = price_num
        self._price_type = price_type
        self._selection_id = selection_id
        self._single_available = single_available
        self._starting_price_available = starting_price_available
        self._status = status
        self._status_changed = status_changed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Betslippart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The betslippart of this Betslippart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def each_way_available(self):
        """Gets the each_way_available of this Betslippart.

        Indicates whether each way is available

        :return: The each_way_available of this Betslippart.
        :rtype: bool
        """
        return self._each_way_available

    @each_way_available.setter
    def each_way_available(self, each_way_available):
        """Sets the each_way_available of this Betslippart.

        Indicates whether each way is available

        :param each_way_available: The each_way_available of this Betslippart.
        :type each_way_available: bool
        """

        self._each_way_available = each_way_available

    @property
    def include_in_multiple(self):
        """Gets the include_in_multiple of this Betslippart.

        Indicates if the bet can be used in a multiple bet

        :return: The include_in_multiple of this Betslippart.
        :rtype: bool
        """
        return self._include_in_multiple

    @include_in_multiple.setter
    def include_in_multiple(self, include_in_multiple):
        """Sets the include_in_multiple of this Betslippart.

        Indicates if the bet can be used in a multiple bet

        :param include_in_multiple: The include_in_multiple of this Betslippart.
        :type include_in_multiple: bool
        """
        if include_in_multiple is None:
            raise ValueError("Invalid value for `include_in_multiple`, must not be `None`")

        self._include_in_multiple = include_in_multiple

    @property
    def leg_group(self):
        """Gets the leg_group of this Betslippart.

        To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc

        :return: The leg_group of this Betslippart.
        :rtype: int
        """
        return self._leg_group

    @leg_group.setter
    def leg_group(self, leg_group):
        """Sets the leg_group of this Betslippart.

        To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc

        :param leg_group: The leg_group of this Betslippart.
        :type leg_group: int
        """

        self._leg_group = leg_group

    @property
    def price_changed(self):
        """Gets the price_changed of this Betslippart.

        Indicates if there has been a change in the price

        :return: The price_changed of this Betslippart.
        :rtype: bool
        """
        return self._price_changed

    @price_changed.setter
    def price_changed(self, price_changed):
        """Sets the price_changed of this Betslippart.

        Indicates if there has been a change in the price

        :param price_changed: The price_changed of this Betslippart.
        :type price_changed: bool
        """

        self._price_changed = price_changed

    @property
    def price_den(self):
        """Gets the price_den of this Betslippart.

        Price denominator - will be ignored for types other than L (Fixed Price)

        :return: The price_den of this Betslippart.
        :rtype: int
        """
        return self._price_den

    @price_den.setter
    def price_den(self, price_den):
        """Sets the price_den of this Betslippart.

        Price denominator - will be ignored for types other than L (Fixed Price)

        :param price_den: The price_den of this Betslippart.
        :type price_den: int
        """
        if price_den is None:
            raise ValueError("Invalid value for `price_den`, must not be `None`")

        self._price_den = price_den

    @property
    def price_num(self):
        """Gets the price_num of this Betslippart.

        Price numerator - will be ignored for types other than L (Fixed Price)

        :return: The price_num of this Betslippart.
        :rtype: int
        """
        return self._price_num

    @price_num.setter
    def price_num(self, price_num):
        """Sets the price_num of this Betslippart.

        Price numerator - will be ignored for types other than L (Fixed Price)

        :param price_num: The price_num of this Betslippart.
        :type price_num: int
        """
        if price_num is None:
            raise ValueError("Invalid value for `price_num`, must not be `None`")

        self._price_num = price_num

    @property
    def price_type(self):
        """Gets the price_type of this Betslippart.

        The type of price selected. For example - ‘L’ (Fixed)

        :return: The price_type of this Betslippart.
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this Betslippart.

        The type of price selected. For example - ‘L’ (Fixed)

        :param price_type: The price_type of this Betslippart.
        :type price_type: int
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def selection_id(self):
        """Gets the selection_id of this Betslippart.

        The selection identifier

        :return: The selection_id of this Betslippart.
        :rtype: int
        """
        return self._selection_id

    @selection_id.setter
    def selection_id(self, selection_id):
        """Sets the selection_id of this Betslippart.

        The selection identifier

        :param selection_id: The selection_id of this Betslippart.
        :type selection_id: int
        """
        if selection_id is None:
            raise ValueError("Invalid value for `selection_id`, must not be `None`")

        self._selection_id = selection_id

    @property
    def single_available(self):
        """Gets the single_available of this Betslippart.

        Indicates whether the bet can be used in a single bet

        :return: The single_available of this Betslippart.
        :rtype: bool
        """
        return self._single_available

    @single_available.setter
    def single_available(self, single_available):
        """Sets the single_available of this Betslippart.

        Indicates whether the bet can be used in a single bet

        :param single_available: The single_available of this Betslippart.
        :type single_available: bool
        """

        self._single_available = single_available

    @property
    def starting_price_available(self):
        """Gets the starting_price_available of this Betslippart.

        Indicates whether starting prices are available

        :return: The starting_price_available of this Betslippart.
        :rtype: bool
        """
        return self._starting_price_available

    @starting_price_available.setter
    def starting_price_available(self, starting_price_available):
        """Sets the starting_price_available of this Betslippart.

        Indicates whether starting prices are available

        :param starting_price_available: The starting_price_available of this Betslippart.
        :type starting_price_available: bool
        """

        self._starting_price_available = starting_price_available

    @property
    def status(self):
        """Gets the status of this Betslippart.

        Indicates the current status of the bet

        :return: The status of this Betslippart.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Betslippart.

        Indicates the current status of the bet

        :param status: The status of this Betslippart.
        :type status: str
        """
        if status is not None and not re.search(r'(A|S)', status):
            raise ValueError("Invalid value for `status`, must be a follow pattern or equal to `/(A|S)/`")

        self._status = status

    @property
    def status_changed(self):
        """Gets the status_changed of this Betslippart.

        Indicates whether the status of the bet has changed

        :return: The status_changed of this Betslippart.
        :rtype: bool
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this Betslippart.

        Indicates whether the status of the bet has changed

        :param status_changed: The status_changed of this Betslippart.
        :type status_changed: bool
        """

        self._status_changed = status_changed
