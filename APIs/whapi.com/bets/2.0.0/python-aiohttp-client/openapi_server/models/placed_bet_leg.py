# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.placed_bet_part import PlacedBetPart
from openapi_server import util


class PlacedBetLeg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: int=None, parts: List[PlacedBetPart]=None, sort: str=None, type: str=None):
        """PlacedBetLeg - a model defined in OpenAPI

        :param number: The number of this PlacedBetLeg.
        :param parts: The parts of this PlacedBetLeg.
        :param sort: The sort of this PlacedBetLeg.
        :param type: The type of this PlacedBetLeg.
        """
        self.openapi_types = {
            'number': int,
            'parts': List[PlacedBetPart],
            'sort': str,
            'type': str
        }

        self.attribute_map = {
            'number': 'number',
            'parts': 'parts',
            'sort': 'sort',
            'type': 'type'
        }

        self._number = number
        self._parts = parts
        self._sort = sort
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacedBetLeg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The placedBetLeg of this PlacedBetLeg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this PlacedBetLeg.

        The leg number of the bet

        :return: The number of this PlacedBetLeg.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PlacedBetLeg.

        The leg number of the bet

        :param number: The number of this PlacedBetLeg.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def parts(self):
        """Gets the parts of this PlacedBetLeg.


        :return: The parts of this PlacedBetLeg.
        :rtype: List[PlacedBetPart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this PlacedBetLeg.


        :param parts: The parts of this PlacedBetLeg.
        :type parts: List[PlacedBetPart]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")

        self._parts = parts

    @property
    def sort(self):
        """Gets the sort of this PlacedBetLeg.

        The leg sort. This element is present for complex bets but not for single bets.

        :return: The sort of this PlacedBetLeg.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this PlacedBetLeg.

        The leg sort. This element is present for complex bets but not for single bets.

        :param sort: The sort of this PlacedBetLeg.
        :type sort: str
        """

        self._sort = sort

    @property
    def type(self):
        """Gets the type of this PlacedBetLeg.

        The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.

        :return: The type of this PlacedBetLeg.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlacedBetLeg.

        The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.

        :param type: The type of this PlacedBetLeg.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
