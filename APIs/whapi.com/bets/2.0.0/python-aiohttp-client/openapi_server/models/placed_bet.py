# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.placed_bet_leg import PlacedBetLeg
from openapi_server import util


class PlacedBet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cashin_value: float=None, estimated_returns: float=None, free_bet_value: float=None, id: str=None, legs: List[PlacedBetLeg]=None, num_lines: int=None, num_selections: int=None, receipt: str=None, settled: bool=None, stake: float=None, stake_per_line: float=None, status: str=None, trans_date_time: str=None, type_code: str=None, type_name: str=None, winnings: float=None):
        """PlacedBet - a model defined in OpenAPI

        :param cashin_value: The cashin_value of this PlacedBet.
        :param estimated_returns: The estimated_returns of this PlacedBet.
        :param free_bet_value: The free_bet_value of this PlacedBet.
        :param id: The id of this PlacedBet.
        :param legs: The legs of this PlacedBet.
        :param num_lines: The num_lines of this PlacedBet.
        :param num_selections: The num_selections of this PlacedBet.
        :param receipt: The receipt of this PlacedBet.
        :param settled: The settled of this PlacedBet.
        :param stake: The stake of this PlacedBet.
        :param stake_per_line: The stake_per_line of this PlacedBet.
        :param status: The status of this PlacedBet.
        :param trans_date_time: The trans_date_time of this PlacedBet.
        :param type_code: The type_code of this PlacedBet.
        :param type_name: The type_name of this PlacedBet.
        :param winnings: The winnings of this PlacedBet.
        """
        self.openapi_types = {
            'cashin_value': float,
            'estimated_returns': float,
            'free_bet_value': float,
            'id': str,
            'legs': List[PlacedBetLeg],
            'num_lines': int,
            'num_selections': int,
            'receipt': str,
            'settled': bool,
            'stake': float,
            'stake_per_line': float,
            'status': str,
            'trans_date_time': str,
            'type_code': str,
            'type_name': str,
            'winnings': float
        }

        self.attribute_map = {
            'cashin_value': 'cashinValue',
            'estimated_returns': 'estimatedReturns',
            'free_bet_value': 'freeBetValue',
            'id': 'id',
            'legs': 'legs',
            'num_lines': 'numLines',
            'num_selections': 'numSelections',
            'receipt': 'receipt',
            'settled': 'settled',
            'stake': 'stake',
            'stake_per_line': 'stakePerLine',
            'status': 'status',
            'trans_date_time': 'transDateTime',
            'type_code': 'typeCode',
            'type_name': 'typeName',
            'winnings': 'winnings'
        }

        self._cashin_value = cashin_value
        self._estimated_returns = estimated_returns
        self._free_bet_value = free_bet_value
        self._id = id
        self._legs = legs
        self._num_lines = num_lines
        self._num_selections = num_selections
        self._receipt = receipt
        self._settled = settled
        self._stake = stake
        self._stake_per_line = stake_per_line
        self._status = status
        self._trans_date_time = trans_date_time
        self._type_code = type_code
        self._type_name = type_name
        self._winnings = winnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacedBet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The placedBet of this PlacedBet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cashin_value(self):
        """Gets the cashin_value of this PlacedBet.

        The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available

        :return: The cashin_value of this PlacedBet.
        :rtype: float
        """
        return self._cashin_value

    @cashin_value.setter
    def cashin_value(self, cashin_value):
        """Sets the cashin_value of this PlacedBet.

        The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available

        :param cashin_value: The cashin_value of this PlacedBet.
        :type cashin_value: float
        """

        self._cashin_value = cashin_value

    @property
    def estimated_returns(self):
        """Gets the estimated_returns of this PlacedBet.

        The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.

        :return: The estimated_returns of this PlacedBet.
        :rtype: float
        """
        return self._estimated_returns

    @estimated_returns.setter
    def estimated_returns(self, estimated_returns):
        """Sets the estimated_returns of this PlacedBet.

        The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.

        :param estimated_returns: The estimated_returns of this PlacedBet.
        :type estimated_returns: float
        """
        if estimated_returns is None:
            raise ValueError("Invalid value for `estimated_returns`, must not be `None`")

        self._estimated_returns = estimated_returns

    @property
    def free_bet_value(self):
        """Gets the free_bet_value of this PlacedBet.

        If a free bet token is used for the bet, this element represents the value

        :return: The free_bet_value of this PlacedBet.
        :rtype: float
        """
        return self._free_bet_value

    @free_bet_value.setter
    def free_bet_value(self, free_bet_value):
        """Sets the free_bet_value of this PlacedBet.

        If a free bet token is used for the bet, this element represents the value

        :param free_bet_value: The free_bet_value of this PlacedBet.
        :type free_bet_value: float
        """

        self._free_bet_value = free_bet_value

    @property
    def id(self):
        """Gets the id of this PlacedBet.

        The unique identifier of the bet

        :return: The id of this PlacedBet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlacedBet.

        The unique identifier of the bet

        :param id: The id of this PlacedBet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def legs(self):
        """Gets the legs of this PlacedBet.


        :return: The legs of this PlacedBet.
        :rtype: List[PlacedBetLeg]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this PlacedBet.


        :param legs: The legs of this PlacedBet.
        :type legs: List[PlacedBetLeg]
        """

        self._legs = legs

    @property
    def num_lines(self):
        """Gets the num_lines of this PlacedBet.

        Number of lines of bets

        :return: The num_lines of this PlacedBet.
        :rtype: int
        """
        return self._num_lines

    @num_lines.setter
    def num_lines(self, num_lines):
        """Sets the num_lines of this PlacedBet.

        Number of lines of bets

        :param num_lines: The num_lines of this PlacedBet.
        :type num_lines: int
        """

        self._num_lines = num_lines

    @property
    def num_selections(self):
        """Gets the num_selections of this PlacedBet.

        Number of selections that the bet is made of

        :return: The num_selections of this PlacedBet.
        :rtype: int
        """
        return self._num_selections

    @num_selections.setter
    def num_selections(self, num_selections):
        """Sets the num_selections of this PlacedBet.

        Number of selections that the bet is made of

        :param num_selections: The num_selections of this PlacedBet.
        :type num_selections: int
        """

        self._num_selections = num_selections

    @property
    def receipt(self):
        """Gets the receipt of this PlacedBet.

        The unique identifier of the receipt for the bet

        :return: The receipt of this PlacedBet.
        :rtype: str
        """
        return self._receipt

    @receipt.setter
    def receipt(self, receipt):
        """Sets the receipt of this PlacedBet.

        The unique identifier of the receipt for the bet

        :param receipt: The receipt of this PlacedBet.
        :type receipt: str
        """

        self._receipt = receipt

    @property
    def settled(self):
        """Gets the settled of this PlacedBet.

        Whether the bet is settled

        :return: The settled of this PlacedBet.
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this PlacedBet.

        Whether the bet is settled

        :param settled: The settled of this PlacedBet.
        :type settled: bool
        """
        if settled is None:
            raise ValueError("Invalid value for `settled`, must not be `None`")

        self._settled = settled

    @property
    def stake(self):
        """Gets the stake of this PlacedBet.

        The bet stake, which represents the total value of the bet. For example: £ 12.34

        :return: The stake of this PlacedBet.
        :rtype: float
        """
        return self._stake

    @stake.setter
    def stake(self, stake):
        """Sets the stake of this PlacedBet.

        The bet stake, which represents the total value of the bet. For example: £ 12.34

        :param stake: The stake of this PlacedBet.
        :type stake: float
        """
        if stake is None:
            raise ValueError("Invalid value for `stake`, must not be `None`")

        self._stake = stake

    @property
    def stake_per_line(self):
        """Gets the stake_per_line of this PlacedBet.

        The individual stake on each line of the bet. For example: £ 6.17

        :return: The stake_per_line of this PlacedBet.
        :rtype: float
        """
        return self._stake_per_line

    @stake_per_line.setter
    def stake_per_line(self, stake_per_line):
        """Sets the stake_per_line of this PlacedBet.

        The individual stake on each line of the bet. For example: £ 6.17

        :param stake_per_line: The stake_per_line of this PlacedBet.
        :type stake_per_line: float
        """

        self._stake_per_line = stake_per_line

    @property
    def status(self):
        """Gets the status of this PlacedBet.

        The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out

        :return: The status of this PlacedBet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlacedBet.

        The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out

        :param status: The status of this PlacedBet.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def trans_date_time(self):
        """Gets the trans_date_time of this PlacedBet.

        The time the bet was placed

        :return: The trans_date_time of this PlacedBet.
        :rtype: str
        """
        return self._trans_date_time

    @trans_date_time.setter
    def trans_date_time(self, trans_date_time):
        """Sets the trans_date_time of this PlacedBet.

        The time the bet was placed

        :param trans_date_time: The trans_date_time of this PlacedBet.
        :type trans_date_time: str
        """
        if trans_date_time is None:
            raise ValueError("Invalid value for `trans_date_time`, must not be `None`")

        self._trans_date_time = trans_date_time

    @property
    def type_code(self):
        """Gets the type_code of this PlacedBet.

        The bet type code of the bet. For example: TBL (Treble)

        :return: The type_code of this PlacedBet.
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this PlacedBet.

        The bet type code of the bet. For example: TBL (Treble)

        :param type_code: The type_code of this PlacedBet.
        :type type_code: str
        """
        if type_code is None:
            raise ValueError("Invalid value for `type_code`, must not be `None`")

        self._type_code = type_code

    @property
    def type_name(self):
        """Gets the type_name of this PlacedBet.

        The name of the bet type. For example: Double

        :return: The type_name of this PlacedBet.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this PlacedBet.

        The name of the bet type. For example: Double

        :param type_name: The type_name of this PlacedBet.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name

    @property
    def winnings(self):
        """Gets the winnings of this PlacedBet.

        Actual value of the returns from this bet

        :return: The winnings of this PlacedBet.
        :rtype: float
        """
        return self._winnings

    @winnings.setter
    def winnings(self, winnings):
        """Sets the winnings of this PlacedBet.

        Actual value of the returns from this bet

        :param winnings: The winnings of this PlacedBet.
        :type winnings: float
        """
        if winnings is None:
            raise ValueError("Invalid value for `winnings`, must not be `None`")

        self._winnings = winnings
