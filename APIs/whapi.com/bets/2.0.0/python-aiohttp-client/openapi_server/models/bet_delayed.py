# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BetDelayed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay_period_seconds: int=None, delayed_bet_id: str=None, id: str=None, number: float=None):
        """BetDelayed - a model defined in OpenAPI

        :param delay_period_seconds: The delay_period_seconds of this BetDelayed.
        :param delayed_bet_id: The delayed_bet_id of this BetDelayed.
        :param id: The id of this BetDelayed.
        :param number: The number of this BetDelayed.
        """
        self.openapi_types = {
            'delay_period_seconds': int,
            'delayed_bet_id': str,
            'id': str,
            'number': float
        }

        self.attribute_map = {
            'delay_period_seconds': 'delayPeriodSeconds',
            'delayed_bet_id': 'delayedBetId',
            'id': 'id',
            'number': 'number'
        }

        self._delay_period_seconds = delay_period_seconds
        self._delayed_bet_id = delayed_bet_id
        self._id = id
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BetDelayed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The betDelayed of this BetDelayed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay_period_seconds(self):
        """Gets the delay_period_seconds of this BetDelayed.

        The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.

        :return: The delay_period_seconds of this BetDelayed.
        :rtype: int
        """
        return self._delay_period_seconds

    @delay_period_seconds.setter
    def delay_period_seconds(self, delay_period_seconds):
        """Sets the delay_period_seconds of this BetDelayed.

        The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.

        :param delay_period_seconds: The delay_period_seconds of this BetDelayed.
        :type delay_period_seconds: int
        """
        if delay_period_seconds is None:
            raise ValueError("Invalid value for `delay_period_seconds`, must not be `None`")

        self._delay_period_seconds = delay_period_seconds

    @property
    def delayed_bet_id(self):
        """Gets the delayed_bet_id of this BetDelayed.

        The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.

        :return: The delayed_bet_id of this BetDelayed.
        :rtype: str
        """
        return self._delayed_bet_id

    @delayed_bet_id.setter
    def delayed_bet_id(self, delayed_bet_id):
        """Sets the delayed_bet_id of this BetDelayed.

        The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.

        :param delayed_bet_id: The delayed_bet_id of this BetDelayed.
        :type delayed_bet_id: str
        """
        if delayed_bet_id is None:
            raise ValueError("Invalid value for `delayed_bet_id`, must not be `None`")

        self._delayed_bet_id = delayed_bet_id

    @property
    def id(self):
        """Gets the id of this BetDelayed.

        The number of the bet

        :return: The id of this BetDelayed.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BetDelayed.

        The number of the bet

        :param id: The id of this BetDelayed.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def number(self):
        """Gets the number of this BetDelayed.

        Number of the bet if this is part of a multiple bet

        :return: The number of this BetDelayed.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BetDelayed.

        Number of the bet if this is part of a multiple bet

        :param number: The number of this BetDelayed.
        :type number: float
        """

        self._number = number
