# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.leg import Leg
from openapi_server import util


class Bet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delayed_bet_id: str=None, free_bet_id: str=None, legs: List[Leg]=None, number: int=None, stake: float=None, type_code: str=None):
        """Bet - a model defined in OpenAPI

        :param delayed_bet_id: The delayed_bet_id of this Bet.
        :param free_bet_id: The free_bet_id of this Bet.
        :param legs: The legs of this Bet.
        :param number: The number of this Bet.
        :param stake: The stake of this Bet.
        :param type_code: The type_code of this Bet.
        """
        self.openapi_types = {
            'delayed_bet_id': str,
            'free_bet_id': str,
            'legs': List[Leg],
            'number': int,
            'stake': float,
            'type_code': str
        }

        self.attribute_map = {
            'delayed_bet_id': 'delayedBetId',
            'free_bet_id': 'freeBetId',
            'legs': 'legs',
            'number': 'number',
            'stake': 'stake',
            'type_code': 'typeCode'
        }

        self._delayed_bet_id = delayed_bet_id
        self._free_bet_id = free_bet_id
        self._legs = legs
        self._number = number
        self._stake = stake
        self._type_code = type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bet of this Bet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delayed_bet_id(self):
        """Gets the delayed_bet_id of this Bet.

        The delayed bet identifier

        :return: The delayed_bet_id of this Bet.
        :rtype: str
        """
        return self._delayed_bet_id

    @delayed_bet_id.setter
    def delayed_bet_id(self, delayed_bet_id):
        """Sets the delayed_bet_id of this Bet.

        The delayed bet identifier

        :param delayed_bet_id: The delayed_bet_id of this Bet.
        :type delayed_bet_id: str
        """

        self._delayed_bet_id = delayed_bet_id

    @property
    def free_bet_id(self):
        """Gets the free_bet_id of this Bet.

        The ID number of the free bet token if used in conjunction with this bet

        :return: The free_bet_id of this Bet.
        :rtype: str
        """
        return self._free_bet_id

    @free_bet_id.setter
    def free_bet_id(self, free_bet_id):
        """Sets the free_bet_id of this Bet.

        The ID number of the free bet token if used in conjunction with this bet

        :param free_bet_id: The free_bet_id of this Bet.
        :type free_bet_id: str
        """

        self._free_bet_id = free_bet_id

    @property
    def legs(self):
        """Gets the legs of this Bet.


        :return: The legs of this Bet.
        :rtype: List[Leg]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this Bet.


        :param legs: The legs of this Bet.
        :type legs: List[Leg]
        """
        if legs is None:
            raise ValueError("Invalid value for `legs`, must not be `None`")

        self._legs = legs

    @property
    def number(self):
        """Gets the number of this Bet.

        The bet number

        :return: The number of this Bet.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Bet.

        The bet number

        :param number: The number of this Bet.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def stake(self):
        """Gets the stake of this Bet.

        The amount of the stake placed on the bet

        :return: The stake of this Bet.
        :rtype: float
        """
        return self._stake

    @stake.setter
    def stake(self, stake):
        """Sets the stake of this Bet.

        The amount of the stake placed on the bet

        :param stake: The stake of this Bet.
        :type stake: float
        """
        if stake is None:
            raise ValueError("Invalid value for `stake`, must not be `None`")

        self._stake = stake

    @property
    def type_code(self):
        """Gets the type_code of this Bet.

        The bet type code of the bet. For example: TBL (Treble)

        :return: The type_code of this Bet.
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this Bet.

        The bet type code of the bet. For example: TBL (Treble)

        :param type_code: The type_code of this Bet.
        :type type_code: str
        """
        if type_code is None:
            raise ValueError("Invalid value for `type_code`, must not be `None`")

        self._type_code = type_code
