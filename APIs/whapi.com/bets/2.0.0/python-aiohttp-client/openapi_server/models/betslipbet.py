# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.betslipleg import Betslipleg
from openapi_server.models.free_bet_detail import FreeBetDetail
from openapi_server import util


class Betslipbet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bet_multiplier: float=None, free_bets: List[FreeBetDetail]=None, legs: List[Betslipleg]=None, max_stake: float=None, min_stake: float=None, num_lines: float=None, number: int=None, type_code: str=None, type_name: str=None):
        """Betslipbet - a model defined in OpenAPI

        :param bet_multiplier: The bet_multiplier of this Betslipbet.
        :param free_bets: The free_bets of this Betslipbet.
        :param legs: The legs of this Betslipbet.
        :param max_stake: The max_stake of this Betslipbet.
        :param min_stake: The min_stake of this Betslipbet.
        :param num_lines: The num_lines of this Betslipbet.
        :param number: The number of this Betslipbet.
        :param type_code: The type_code of this Betslipbet.
        :param type_name: The type_name of this Betslipbet.
        """
        self.openapi_types = {
            'bet_multiplier': float,
            'free_bets': List[FreeBetDetail],
            'legs': List[Betslipleg],
            'max_stake': float,
            'min_stake': float,
            'num_lines': float,
            'number': int,
            'type_code': str,
            'type_name': str
        }

        self.attribute_map = {
            'bet_multiplier': 'betMultiplier',
            'free_bets': 'freeBets',
            'legs': 'legs',
            'max_stake': 'maxStake',
            'min_stake': 'minStake',
            'num_lines': 'numLines',
            'number': 'number',
            'type_code': 'typeCode',
            'type_name': 'typeName'
        }

        self._bet_multiplier = bet_multiplier
        self._free_bets = free_bets
        self._legs = legs
        self._max_stake = max_stake
        self._min_stake = min_stake
        self._num_lines = num_lines
        self._number = number
        self._type_code = type_code
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Betslipbet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The betslipbet of this Betslipbet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bet_multiplier(self):
        """Gets the bet_multiplier of this Betslipbet.

        The total aggregated odds, as a decimal, of the multiple bet placed

        :return: The bet_multiplier of this Betslipbet.
        :rtype: float
        """
        return self._bet_multiplier

    @bet_multiplier.setter
    def bet_multiplier(self, bet_multiplier):
        """Sets the bet_multiplier of this Betslipbet.

        The total aggregated odds, as a decimal, of the multiple bet placed

        :param bet_multiplier: The bet_multiplier of this Betslipbet.
        :type bet_multiplier: float
        """

        self._bet_multiplier = bet_multiplier

    @property
    def free_bets(self):
        """Gets the free_bets of this Betslipbet.

        Free bets that can be used with this bet

        :return: The free_bets of this Betslipbet.
        :rtype: List[FreeBetDetail]
        """
        return self._free_bets

    @free_bets.setter
    def free_bets(self, free_bets):
        """Sets the free_bets of this Betslipbet.

        Free bets that can be used with this bet

        :param free_bets: The free_bets of this Betslipbet.
        :type free_bets: List[FreeBetDetail]
        """

        self._free_bets = free_bets

    @property
    def legs(self):
        """Gets the legs of this Betslipbet.


        :return: The legs of this Betslipbet.
        :rtype: List[Betslipleg]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this Betslipbet.


        :param legs: The legs of this Betslipbet.
        :type legs: List[Betslipleg]
        """
        if legs is None:
            raise ValueError("Invalid value for `legs`, must not be `None`")

        self._legs = legs

    @property
    def max_stake(self):
        """Gets the max_stake of this Betslipbet.

        Maximum stake allowable on the bet. For example: 2500.00 (GBP)

        :return: The max_stake of this Betslipbet.
        :rtype: float
        """
        return self._max_stake

    @max_stake.setter
    def max_stake(self, max_stake):
        """Sets the max_stake of this Betslipbet.

        Maximum stake allowable on the bet. For example: 2500.00 (GBP)

        :param max_stake: The max_stake of this Betslipbet.
        :type max_stake: float
        """

        self._max_stake = max_stake

    @property
    def min_stake(self):
        """Gets the min_stake of this Betslipbet.

        Minumum stake allowable on the bet. For example: 0.05 (GBP)

        :return: The min_stake of this Betslipbet.
        :rtype: float
        """
        return self._min_stake

    @min_stake.setter
    def min_stake(self, min_stake):
        """Sets the min_stake of this Betslipbet.

        Minumum stake allowable on the bet. For example: 0.05 (GBP)

        :param min_stake: The min_stake of this Betslipbet.
        :type min_stake: float
        """

        self._min_stake = min_stake

    @property
    def num_lines(self):
        """Gets the num_lines of this Betslipbet.

        The number of lines (selections) of a bet

        :return: The num_lines of this Betslipbet.
        :rtype: float
        """
        return self._num_lines

    @num_lines.setter
    def num_lines(self, num_lines):
        """Sets the num_lines of this Betslipbet.

        The number of lines (selections) of a bet

        :param num_lines: The num_lines of this Betslipbet.
        :type num_lines: float
        """

        self._num_lines = num_lines

    @property
    def number(self):
        """Gets the number of this Betslipbet.

        The bet number

        :return: The number of this Betslipbet.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Betslipbet.

        The bet number

        :param number: The number of this Betslipbet.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def type_code(self):
        """Gets the type_code of this Betslipbet.

        The bet type code of the bet. For example: TBL (Treble)

        :return: The type_code of this Betslipbet.
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this Betslipbet.

        The bet type code of the bet. For example: TBL (Treble)

        :param type_code: The type_code of this Betslipbet.
        :type type_code: str
        """
        if type_code is None:
            raise ValueError("Invalid value for `type_code`, must not be `None`")

        self._type_code = type_code

    @property
    def type_name(self):
        """Gets the type_name of this Betslipbet.

        The TypeCode of the bet. For example: TBL (Treble)

        :return: The type_name of this Betslipbet.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this Betslipbet.

        The TypeCode of the bet. For example: TBL (Treble)

        :param type_name: The type_name of this Betslipbet.
        :type type_name: str
        """

        self._type_name = type_name
