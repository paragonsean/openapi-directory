# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.part import Part
from openapi_server import util


class Leg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parts: List[Part]=None, sort: str=None, type: str=None):
        """Leg - a model defined in OpenAPI

        :param parts: The parts of this Leg.
        :param sort: The sort of this Leg.
        :param type: The type of this Leg.
        """
        self.openapi_types = {
            'parts': List[Part],
            'sort': str,
            'type': str
        }

        self.attribute_map = {
            'parts': 'parts',
            'sort': 'sort',
            'type': 'type'
        }

        self._parts = parts
        self._sort = sort
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Leg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The leg of this Leg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parts(self):
        """Gets the parts of this Leg.


        :return: The parts of this Leg.
        :rtype: List[Part]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this Leg.


        :param parts: The parts of this Leg.
        :type parts: List[Part]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")

        self._parts = parts

    @property
    def sort(self):
        """Gets the sort of this Leg.

        The leg sort. This element is present for complex bets but not for single bets.

        :return: The sort of this Leg.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Leg.

        The leg sort. This element is present for complex bets but not for single bets.

        :param sort: The sort of this Leg.
        :type sort: str
        """

        self._sort = sort

    @property
    def type(self):
        """Gets the type of this Leg.

        The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.

        :return: The type of this Leg.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Leg.

        The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.

        :param type: The type of this Leg.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
