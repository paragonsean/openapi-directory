# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_formatted import PriceFormatted
import re
from openapi_server import util


class PlacedBetPart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, each_way_den: int=None, each_way_num: int=None, each_way_places: int=None, event_description: str=None, event_id: str=None, event_market_description: str=None, event_type_description: str=None, handicap: float=None, number: int=None, price_den: int=None, price_formatted: PriceFormatted=None, price_num: int=None, price_type: str=None, result: str=None, rule4_deductions: float=None, selection_id: str=None, start_date_time: str=None):
        """PlacedBetPart - a model defined in OpenAPI

        :param description: The description of this PlacedBetPart.
        :param each_way_den: The each_way_den of this PlacedBetPart.
        :param each_way_num: The each_way_num of this PlacedBetPart.
        :param each_way_places: The each_way_places of this PlacedBetPart.
        :param event_description: The event_description of this PlacedBetPart.
        :param event_id: The event_id of this PlacedBetPart.
        :param event_market_description: The event_market_description of this PlacedBetPart.
        :param event_type_description: The event_type_description of this PlacedBetPart.
        :param handicap: The handicap of this PlacedBetPart.
        :param number: The number of this PlacedBetPart.
        :param price_den: The price_den of this PlacedBetPart.
        :param price_formatted: The price_formatted of this PlacedBetPart.
        :param price_num: The price_num of this PlacedBetPart.
        :param price_type: The price_type of this PlacedBetPart.
        :param result: The result of this PlacedBetPart.
        :param rule4_deductions: The rule4_deductions of this PlacedBetPart.
        :param selection_id: The selection_id of this PlacedBetPart.
        :param start_date_time: The start_date_time of this PlacedBetPart.
        """
        self.openapi_types = {
            'description': str,
            'each_way_den': int,
            'each_way_num': int,
            'each_way_places': int,
            'event_description': str,
            'event_id': str,
            'event_market_description': str,
            'event_type_description': str,
            'handicap': float,
            'number': int,
            'price_den': int,
            'price_formatted': PriceFormatted,
            'price_num': int,
            'price_type': str,
            'result': str,
            'rule4_deductions': float,
            'selection_id': str,
            'start_date_time': str
        }

        self.attribute_map = {
            'description': 'description',
            'each_way_den': 'eachWayDen',
            'each_way_num': 'eachWayNum',
            'each_way_places': 'eachWayPlaces',
            'event_description': 'eventDescription',
            'event_id': 'eventId',
            'event_market_description': 'eventMarketDescription',
            'event_type_description': 'eventTypeDescription',
            'handicap': 'handicap',
            'number': 'number',
            'price_den': 'priceDen',
            'price_formatted': 'priceFormatted',
            'price_num': 'priceNum',
            'price_type': 'priceType',
            'result': 'result',
            'rule4_deductions': 'rule4Deductions',
            'selection_id': 'selectionId',
            'start_date_time': 'startDateTime'
        }

        self._description = description
        self._each_way_den = each_way_den
        self._each_way_num = each_way_num
        self._each_way_places = each_way_places
        self._event_description = event_description
        self._event_id = event_id
        self._event_market_description = event_market_description
        self._event_type_description = event_type_description
        self._handicap = handicap
        self._number = number
        self._price_den = price_den
        self._price_formatted = price_formatted
        self._price_num = price_num
        self._price_type = price_type
        self._result = result
        self._rule4_deductions = rule4_deductions
        self._selection_id = selection_id
        self._start_date_time = start_date_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacedBetPart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The placedBetPart of this PlacedBetPart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PlacedBetPart.

        Human-friendly description of the bet

        :return: The description of this PlacedBetPart.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlacedBetPart.

        Human-friendly description of the bet

        :param description: The description of this PlacedBetPart.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def each_way_den(self):
        """Gets the each_way_den of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :return: The each_way_den of this PlacedBetPart.
        :rtype: int
        """
        return self._each_way_den

    @each_way_den.setter
    def each_way_den(self, each_way_den):
        """Sets the each_way_den of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :param each_way_den: The each_way_den of this PlacedBetPart.
        :type each_way_den: int
        """

        self._each_way_den = each_way_den

    @property
    def each_way_num(self):
        """Gets the each_way_num of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :return: The each_way_num of this PlacedBetPart.
        :rtype: int
        """
        return self._each_way_num

    @each_way_num.setter
    def each_way_num(self, each_way_num):
        """Sets the each_way_num of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :param each_way_num: The each_way_num of this PlacedBetPart.
        :type each_way_num: int
        """

        self._each_way_num = each_way_num

    @property
    def each_way_places(self):
        """Gets the each_way_places of this PlacedBetPart.

        The Each-way places available for the bet

        :return: The each_way_places of this PlacedBetPart.
        :rtype: int
        """
        return self._each_way_places

    @each_way_places.setter
    def each_way_places(self, each_way_places):
        """Sets the each_way_places of this PlacedBetPart.

        The Each-way places available for the bet

        :param each_way_places: The each_way_places of this PlacedBetPart.
        :type each_way_places: int
        """

        self._each_way_places = each_way_places

    @property
    def event_description(self):
        """Gets the event_description of this PlacedBetPart.

        The description of the event

        :return: The event_description of this PlacedBetPart.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this PlacedBetPart.

        The description of the event

        :param event_description: The event_description of this PlacedBetPart.
        :type event_description: str
        """
        if event_description is None:
            raise ValueError("Invalid value for `event_description`, must not be `None`")

        self._event_description = event_description

    @property
    def event_id(self):
        """Gets the event_id of this PlacedBetPart.

        Unique identifier of the event

        :return: The event_id of this PlacedBetPart.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PlacedBetPart.

        Unique identifier of the event

        :param event_id: The event_id of this PlacedBetPart.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")
        if event_id is not None and not re.search(r'^(OB_EV\d+)$', event_id):
            raise ValueError("Invalid value for `event_id`, must be a follow pattern or equal to `/^(OB_EV\d+)$/`")

        self._event_id = event_id

    @property
    def event_market_description(self):
        """Gets the event_market_description of this PlacedBetPart.

        The description of the market within an event

        :return: The event_market_description of this PlacedBetPart.
        :rtype: str
        """
        return self._event_market_description

    @event_market_description.setter
    def event_market_description(self, event_market_description):
        """Sets the event_market_description of this PlacedBetPart.

        The description of the market within an event

        :param event_market_description: The event_market_description of this PlacedBetPart.
        :type event_market_description: str
        """

        self._event_market_description = event_market_description

    @property
    def event_type_description(self):
        """Gets the event_type_description of this PlacedBetPart.

        The description of type of the event

        :return: The event_type_description of this PlacedBetPart.
        :rtype: str
        """
        return self._event_type_description

    @event_type_description.setter
    def event_type_description(self, event_type_description):
        """Sets the event_type_description of this PlacedBetPart.

        The description of type of the event

        :param event_type_description: The event_type_description of this PlacedBetPart.
        :type event_type_description: str
        """

        self._event_type_description = event_type_description

    @property
    def handicap(self):
        """Gets the handicap of this PlacedBetPart.

        Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)

        :return: The handicap of this PlacedBetPart.
        :rtype: float
        """
        return self._handicap

    @handicap.setter
    def handicap(self, handicap):
        """Sets the handicap of this PlacedBetPart.

        Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)

        :param handicap: The handicap of this PlacedBetPart.
        :type handicap: float
        """

        self._handicap = handicap

    @property
    def number(self):
        """Gets the number of this PlacedBetPart.

        The number of the bet

        :return: The number of this PlacedBetPart.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PlacedBetPart.

        The number of the bet

        :param number: The number of this PlacedBetPart.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def price_den(self):
        """Gets the price_den of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :return: The price_den of this PlacedBetPart.
        :rtype: int
        """
        return self._price_den

    @price_den.setter
    def price_den(self, price_den):
        """Sets the price_den of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :param price_den: The price_den of this PlacedBetPart.
        :type price_den: int
        """
        if price_den is None:
            raise ValueError("Invalid value for `price_den`, must not be `None`")

        self._price_den = price_den

    @property
    def price_formatted(self):
        """Gets the price_formatted of this PlacedBetPart.


        :return: The price_formatted of this PlacedBetPart.
        :rtype: PriceFormatted
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this PlacedBetPart.


        :param price_formatted: The price_formatted of this PlacedBetPart.
        :type price_formatted: PriceFormatted
        """

        self._price_formatted = price_formatted

    @property
    def price_num(self):
        """Gets the price_num of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :return: The price_num of this PlacedBetPart.
        :rtype: int
        """
        return self._price_num

    @price_num.setter
    def price_num(self, price_num):
        """Sets the price_num of this PlacedBetPart.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :param price_num: The price_num of this PlacedBetPart.
        :type price_num: int
        """
        if price_num is None:
            raise ValueError("Invalid value for `price_num`, must not be `None`")

        self._price_num = price_num

    @property
    def price_type(self):
        """Gets the price_type of this PlacedBetPart.

        The price type chosen when the bet was placed. For example: L (Win)

        :return: The price_type of this PlacedBetPart.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this PlacedBetPart.

        The price type chosen when the bet was placed. For example: L (Win)

        :param price_type: The price_type of this PlacedBetPart.
        :type price_type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def result(self):
        """Gets the result of this PlacedBetPart.

        The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available

        :return: The result of this PlacedBetPart.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PlacedBetPart.

        The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available

        :param result: The result of this PlacedBetPart.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def rule4_deductions(self):
        """Gets the rule4_deductions of this PlacedBetPart.

        The official scale of deductions that apply when a runner is withdrawn

        :return: The rule4_deductions of this PlacedBetPart.
        :rtype: float
        """
        return self._rule4_deductions

    @rule4_deductions.setter
    def rule4_deductions(self, rule4_deductions):
        """Sets the rule4_deductions of this PlacedBetPart.

        The official scale of deductions that apply when a runner is withdrawn

        :param rule4_deductions: The rule4_deductions of this PlacedBetPart.
        :type rule4_deductions: float
        """

        self._rule4_deductions = rule4_deductions

    @property
    def selection_id(self):
        """Gets the selection_id of this PlacedBetPart.

        Unique identifier of the selection

        :return: The selection_id of this PlacedBetPart.
        :rtype: str
        """
        return self._selection_id

    @selection_id.setter
    def selection_id(self, selection_id):
        """Sets the selection_id of this PlacedBetPart.

        Unique identifier of the selection

        :param selection_id: The selection_id of this PlacedBetPart.
        :type selection_id: str
        """
        if selection_id is not None and not re.search(r'^(OB_OU\d+)$', selection_id):
            raise ValueError("Invalid value for `selection_id`, must be a follow pattern or equal to `/^(OB_OU\d+)$/`")

        self._selection_id = selection_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this PlacedBetPart.

        Time the event will start. For example: 2013-01-30 11:01:01

        :return: The start_date_time of this PlacedBetPart.
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this PlacedBetPart.

        Time the event will start. For example: 2013-01-30 11:01:01

        :param start_date_time: The start_date_time of this PlacedBetPart.
        :type start_date_time: str
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time
