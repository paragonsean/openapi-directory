# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BetPlaced(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, num_lines: int=None, number: float=None, placed_date_time: str=None, receipt: str=None, total_stake: float=None):
        """BetPlaced - a model defined in OpenAPI

        :param id: The id of this BetPlaced.
        :param num_lines: The num_lines of this BetPlaced.
        :param number: The number of this BetPlaced.
        :param placed_date_time: The placed_date_time of this BetPlaced.
        :param receipt: The receipt of this BetPlaced.
        :param total_stake: The total_stake of this BetPlaced.
        """
        self.openapi_types = {
            'id': str,
            'num_lines': int,
            'number': float,
            'placed_date_time': str,
            'receipt': str,
            'total_stake': float
        }

        self.attribute_map = {
            'id': 'id',
            'num_lines': 'numLines',
            'number': 'number',
            'placed_date_time': 'placedDateTime',
            'receipt': 'receipt',
            'total_stake': 'totalStake'
        }

        self._id = id
        self._num_lines = num_lines
        self._number = number
        self._placed_date_time = placed_date_time
        self._receipt = receipt
        self._total_stake = total_stake

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BetPlaced':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The betPlaced of this BetPlaced.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BetPlaced.

        The bet id

        :return: The id of this BetPlaced.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BetPlaced.

        The bet id

        :param id: The id of this BetPlaced.
        :type id: str
        """

        self._id = id

    @property
    def num_lines(self):
        """Gets the num_lines of this BetPlaced.

        The number of lines the bet consists of

        :return: The num_lines of this BetPlaced.
        :rtype: int
        """
        return self._num_lines

    @num_lines.setter
    def num_lines(self, num_lines):
        """Sets the num_lines of this BetPlaced.

        The number of lines the bet consists of

        :param num_lines: The num_lines of this BetPlaced.
        :type num_lines: int
        """

        self._num_lines = num_lines

    @property
    def number(self):
        """Gets the number of this BetPlaced.

        Number of the bet if this is part of a multiple bet

        :return: The number of this BetPlaced.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BetPlaced.

        Number of the bet if this is part of a multiple bet

        :param number: The number of this BetPlaced.
        :type number: float
        """

        self._number = number

    @property
    def placed_date_time(self):
        """Gets the placed_date_time of this BetPlaced.

        The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.

        :return: The placed_date_time of this BetPlaced.
        :rtype: str
        """
        return self._placed_date_time

    @placed_date_time.setter
    def placed_date_time(self, placed_date_time):
        """Sets the placed_date_time of this BetPlaced.

        The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.

        :param placed_date_time: The placed_date_time of this BetPlaced.
        :type placed_date_time: str
        """

        self._placed_date_time = placed_date_time

    @property
    def receipt(self):
        """Gets the receipt of this BetPlaced.

        The unique ID of the bet receipt

        :return: The receipt of this BetPlaced.
        :rtype: str
        """
        return self._receipt

    @receipt.setter
    def receipt(self, receipt):
        """Sets the receipt of this BetPlaced.

        The unique ID of the bet receipt

        :param receipt: The receipt of this BetPlaced.
        :type receipt: str
        """
        if receipt is None:
            raise ValueError("Invalid value for `receipt`, must not be `None`")

        self._receipt = receipt

    @property
    def total_stake(self):
        """Gets the total_stake of this BetPlaced.

        The total amount staked on the bet

        :return: The total_stake of this BetPlaced.
        :rtype: float
        """
        return self._total_stake

    @total_stake.setter
    def total_stake(self, total_stake):
        """Sets the total_stake of this BetPlaced.

        The total amount staked on the bet

        :param total_stake: The total_stake of this BetPlaced.
        :type total_stake: float
        """

        self._total_stake = total_stake
