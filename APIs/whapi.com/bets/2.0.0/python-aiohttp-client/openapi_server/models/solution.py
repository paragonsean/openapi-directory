# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Solution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bet_num: str=None, event_id: str=None, handicap: str=None, handicap_precision: str=None, price_den: str=None, price_num: str=None, selection_handicap: str=None, selection_id: str=None):
        """Solution - a model defined in OpenAPI

        :param bet_num: The bet_num of this Solution.
        :param event_id: The event_id of this Solution.
        :param handicap: The handicap of this Solution.
        :param handicap_precision: The handicap_precision of this Solution.
        :param price_den: The price_den of this Solution.
        :param price_num: The price_num of this Solution.
        :param selection_handicap: The selection_handicap of this Solution.
        :param selection_id: The selection_id of this Solution.
        """
        self.openapi_types = {
            'bet_num': str,
            'event_id': str,
            'handicap': str,
            'handicap_precision': str,
            'price_den': str,
            'price_num': str,
            'selection_handicap': str,
            'selection_id': str
        }

        self.attribute_map = {
            'bet_num': 'betNum',
            'event_id': 'eventId',
            'handicap': 'handicap',
            'handicap_precision': 'handicapPrecision',
            'price_den': 'priceDen',
            'price_num': 'priceNum',
            'selection_handicap': 'selectionHandicap',
            'selection_id': 'selectionId'
        }

        self._bet_num = bet_num
        self._event_id = event_id
        self._handicap = handicap
        self._handicap_precision = handicap_precision
        self._price_den = price_den
        self._price_num = price_num
        self._selection_handicap = selection_handicap
        self._selection_id = selection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Solution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The solution of this Solution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bet_num(self):
        """Gets the bet_num of this Solution.

        The bet number

        :return: The bet_num of this Solution.
        :rtype: str
        """
        return self._bet_num

    @bet_num.setter
    def bet_num(self, bet_num):
        """Sets the bet_num of this Solution.

        The bet number

        :param bet_num: The bet_num of this Solution.
        :type bet_num: str
        """

        self._bet_num = bet_num

    @property
    def event_id(self):
        """Gets the event_id of this Solution.

        The identifier of the event

        :return: The event_id of this Solution.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Solution.

        The identifier of the event

        :param event_id: The event_id of this Solution.
        :type event_id: str
        """
        if event_id is not None and not re.search(r'^(OB_EV\d+)$', event_id):
            raise ValueError("Invalid value for `event_id`, must be a follow pattern or equal to `/^(OB_EV\d+)$/`")

        self._event_id = event_id

    @property
    def handicap(self):
        """Gets the handicap of this Solution.

        The updated handicap

        :return: The handicap of this Solution.
        :rtype: str
        """
        return self._handicap

    @handicap.setter
    def handicap(self, handicap):
        """Sets the handicap of this Solution.

        The updated handicap

        :param handicap: The handicap of this Solution.
        :type handicap: str
        """

        self._handicap = handicap

    @property
    def handicap_precision(self):
        """Gets the handicap_precision of this Solution.

        The handicap precision

        :return: The handicap_precision of this Solution.
        :rtype: str
        """
        return self._handicap_precision

    @handicap_precision.setter
    def handicap_precision(self, handicap_precision):
        """Sets the handicap_precision of this Solution.

        The handicap precision

        :param handicap_precision: The handicap_precision of this Solution.
        :type handicap_precision: str
        """

        self._handicap_precision = handicap_precision

    @property
    def price_den(self):
        """Gets the price_den of this Solution.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :return: The price_den of this Solution.
        :rtype: str
        """
        return self._price_den

    @price_den.setter
    def price_den(self, price_den):
        """Sets the price_den of this Solution.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :param price_den: The price_den of this Solution.
        :type price_den: str
        """

        self._price_den = price_den

    @property
    def price_num(self):
        """Gets the price_num of this Solution.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :return: The price_num of this Solution.
        :rtype: str
        """
        return self._price_num

    @price_num.setter
    def price_num(self, price_num):
        """Sets the price_num of this Solution.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :param price_num: The price_num of this Solution.
        :type price_num: str
        """

        self._price_num = price_num

    @property
    def selection_handicap(self):
        """Gets the selection_handicap of this Solution.

        The selection handicap

        :return: The selection_handicap of this Solution.
        :rtype: str
        """
        return self._selection_handicap

    @selection_handicap.setter
    def selection_handicap(self, selection_handicap):
        """Sets the selection_handicap of this Solution.

        The selection handicap

        :param selection_handicap: The selection_handicap of this Solution.
        :type selection_handicap: str
        """

        self._selection_handicap = selection_handicap

    @property
    def selection_id(self):
        """Gets the selection_id of this Solution.

        The identifier of the selection

        :return: The selection_id of this Solution.
        :rtype: str
        """
        return self._selection_id

    @selection_id.setter
    def selection_id(self, selection_id):
        """Sets the selection_id of this Solution.

        The identifier of the selection

        :param selection_id: The selection_id of this Solution.
        :type selection_id: str
        """
        if selection_id is not None and not re.search(r'^(OB_OU\d+)$', selection_id):
            raise ValueError("Invalid value for `selection_id`, must be a follow pattern or equal to `/^(OB_OU\d+)$/`")

        self._selection_id = selection_id
