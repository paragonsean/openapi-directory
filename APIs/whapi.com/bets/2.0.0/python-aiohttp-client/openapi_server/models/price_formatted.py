# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceFormatted(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, american: str=None, decimal: float=None, fractional: str=None):
        """PriceFormatted - a model defined in OpenAPI

        :param american: The american of this PriceFormatted.
        :param decimal: The decimal of this PriceFormatted.
        :param fractional: The fractional of this PriceFormatted.
        """
        self.openapi_types = {
            'american': str,
            'decimal': float,
            'fractional': str
        }

        self.attribute_map = {
            'american': 'american',
            'decimal': 'decimal',
            'fractional': 'fractional'
        }

        self._american = american
        self._decimal = decimal
        self._fractional = fractional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceFormatted':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The priceFormatted of this PriceFormatted.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def american(self):
        """Gets the american of this PriceFormatted.

        The price in American format

        :return: The american of this PriceFormatted.
        :rtype: str
        """
        return self._american

    @american.setter
    def american(self, american):
        """Sets the american of this PriceFormatted.

        The price in American format

        :param american: The american of this PriceFormatted.
        :type american: str
        """

        self._american = american

    @property
    def decimal(self):
        """Gets the decimal of this PriceFormatted.

        The decimal format of the price

        :return: The decimal of this PriceFormatted.
        :rtype: float
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this PriceFormatted.

        The decimal format of the price

        :param decimal: The decimal of this PriceFormatted.
        :type decimal: float
        """

        self._decimal = decimal

    @property
    def fractional(self):
        """Gets the fractional of this PriceFormatted.

        The fractional format of the price or EVS when the price evens.

        :return: The fractional of this PriceFormatted.
        :rtype: str
        """
        return self._fractional

    @fractional.setter
    def fractional(self, fractional):
        """Sets the fractional of this PriceFormatted.

        The fractional format of the price or EVS when the price evens.

        :param fractional: The fractional of this PriceFormatted.
        :type fractional: str
        """

        self._fractional = fractional
