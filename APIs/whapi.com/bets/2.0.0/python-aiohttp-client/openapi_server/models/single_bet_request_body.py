# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SingleBetRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delayed_bet_id: str=None, free_bet_id: str=None, price_den: int=None, price_num: int=None, price_type: str=None, selection_id: str=None, stake: float=None, type: str=None):
        """SingleBetRequestBody - a model defined in OpenAPI

        :param delayed_bet_id: The delayed_bet_id of this SingleBetRequestBody.
        :param free_bet_id: The free_bet_id of this SingleBetRequestBody.
        :param price_den: The price_den of this SingleBetRequestBody.
        :param price_num: The price_num of this SingleBetRequestBody.
        :param price_type: The price_type of this SingleBetRequestBody.
        :param selection_id: The selection_id of this SingleBetRequestBody.
        :param stake: The stake of this SingleBetRequestBody.
        :param type: The type of this SingleBetRequestBody.
        """
        self.openapi_types = {
            'delayed_bet_id': str,
            'free_bet_id': str,
            'price_den': int,
            'price_num': int,
            'price_type': str,
            'selection_id': str,
            'stake': float,
            'type': str
        }

        self.attribute_map = {
            'delayed_bet_id': 'delayedBetId',
            'free_bet_id': 'freeBetId',
            'price_den': 'priceDen',
            'price_num': 'priceNum',
            'price_type': 'priceType',
            'selection_id': 'selectionId',
            'stake': 'stake',
            'type': 'type'
        }

        self._delayed_bet_id = delayed_bet_id
        self._free_bet_id = free_bet_id
        self._price_den = price_den
        self._price_num = price_num
        self._price_type = price_type
        self._selection_id = selection_id
        self._stake = stake
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SingleBetRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The singleBetRequestBody of this SingleBetRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delayed_bet_id(self):
        """Gets the delayed_bet_id of this SingleBetRequestBody.

        The delayed bet identifier

        :return: The delayed_bet_id of this SingleBetRequestBody.
        :rtype: str
        """
        return self._delayed_bet_id

    @delayed_bet_id.setter
    def delayed_bet_id(self, delayed_bet_id):
        """Sets the delayed_bet_id of this SingleBetRequestBody.

        The delayed bet identifier

        :param delayed_bet_id: The delayed_bet_id of this SingleBetRequestBody.
        :type delayed_bet_id: str
        """

        self._delayed_bet_id = delayed_bet_id

    @property
    def free_bet_id(self):
        """Gets the free_bet_id of this SingleBetRequestBody.

        The ID number of the free bet token if used in conjunction with this bet

        :return: The free_bet_id of this SingleBetRequestBody.
        :rtype: str
        """
        return self._free_bet_id

    @free_bet_id.setter
    def free_bet_id(self, free_bet_id):
        """Sets the free_bet_id of this SingleBetRequestBody.

        The ID number of the free bet token if used in conjunction with this bet

        :param free_bet_id: The free_bet_id of this SingleBetRequestBody.
        :type free_bet_id: str
        """

        self._free_bet_id = free_bet_id

    @property
    def price_den(self):
        """Gets the price_den of this SingleBetRequestBody.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :return: The price_den of this SingleBetRequestBody.
        :rtype: int
        """
        return self._price_den

    @price_den.setter
    def price_den(self, price_den):
        """Sets the price_den of this SingleBetRequestBody.

        When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2

        :param price_den: The price_den of this SingleBetRequestBody.
        :type price_den: int
        """

        self._price_den = price_den

    @property
    def price_num(self):
        """Gets the price_num of this SingleBetRequestBody.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :return: The price_num of this SingleBetRequestBody.
        :rtype: int
        """
        return self._price_num

    @price_num.setter
    def price_num(self, price_num):
        """Sets the price_num of this SingleBetRequestBody.

        When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2

        :param price_num: The price_num of this SingleBetRequestBody.
        :type price_num: int
        """

        self._price_num = price_num

    @property
    def price_type(self):
        """Gets the price_type of this SingleBetRequestBody.

        The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.

        :return: The price_type of this SingleBetRequestBody.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this SingleBetRequestBody.

        The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.

        :param price_type: The price_type of this SingleBetRequestBody.
        :type price_type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")
        if price_type is not None and not re.search(r'^(L|S|G)$', price_type):
            raise ValueError("Invalid value for `price_type`, must be a follow pattern or equal to `/^(L|S|G)$/`")

        self._price_type = price_type

    @property
    def selection_id(self):
        """Gets the selection_id of this SingleBetRequestBody.

        The unique ID for the selection of the bet

        :return: The selection_id of this SingleBetRequestBody.
        :rtype: str
        """
        return self._selection_id

    @selection_id.setter
    def selection_id(self, selection_id):
        """Sets the selection_id of this SingleBetRequestBody.

        The unique ID for the selection of the bet

        :param selection_id: The selection_id of this SingleBetRequestBody.
        :type selection_id: str
        """
        if selection_id is None:
            raise ValueError("Invalid value for `selection_id`, must not be `None`")
        if selection_id is not None and not re.search(r'^(OB_OU\d+)$', selection_id):
            raise ValueError("Invalid value for `selection_id`, must be a follow pattern or equal to `/^(OB_OU\d+)$/`")

        self._selection_id = selection_id

    @property
    def stake(self):
        """Gets the stake of this SingleBetRequestBody.

        The amount of the stake placed on the bet

        :return: The stake of this SingleBetRequestBody.
        :rtype: float
        """
        return self._stake

    @stake.setter
    def stake(self, stake):
        """Sets the stake of this SingleBetRequestBody.

        The amount of the stake placed on the bet

        :param stake: The stake of this SingleBetRequestBody.
        :type stake: float
        """
        if stake is None:
            raise ValueError("Invalid value for `stake`, must not be `None`")

        self._stake = stake

    @property
    def type(self):
        """Gets the type of this SingleBetRequestBody.

        The type of bet placed. Can be one of the following: W - Win or E- EachWay

        :return: The type of this SingleBetRequestBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SingleBetRequestBody.

        The type of bet placed. Can be one of the following: W - Win or E- EachWay

        :param type: The type of this SingleBetRequestBody.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and not re.search(r'^(W|E)$', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/^(W|E)$/`")

        self._type = type
