# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Part(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_in_multiple: bool=None, price_den: int=None, price_num: int=None, price_type: int=None, selection_id: int=None):
        """Part - a model defined in OpenAPI

        :param include_in_multiple: The include_in_multiple of this Part.
        :param price_den: The price_den of this Part.
        :param price_num: The price_num of this Part.
        :param price_type: The price_type of this Part.
        :param selection_id: The selection_id of this Part.
        """
        self.openapi_types = {
            'include_in_multiple': bool,
            'price_den': int,
            'price_num': int,
            'price_type': int,
            'selection_id': int
        }

        self.attribute_map = {
            'include_in_multiple': 'includeInMultiple',
            'price_den': 'priceDen',
            'price_num': 'priceNum',
            'price_type': 'priceType',
            'selection_id': 'selectionId'
        }

        self._include_in_multiple = include_in_multiple
        self._price_den = price_den
        self._price_num = price_num
        self._price_type = price_type
        self._selection_id = selection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Part':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The part of this Part.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_in_multiple(self):
        """Gets the include_in_multiple of this Part.

        Indicates if the bet can be used in a multiple bet

        :return: The include_in_multiple of this Part.
        :rtype: bool
        """
        return self._include_in_multiple

    @include_in_multiple.setter
    def include_in_multiple(self, include_in_multiple):
        """Sets the include_in_multiple of this Part.

        Indicates if the bet can be used in a multiple bet

        :param include_in_multiple: The include_in_multiple of this Part.
        :type include_in_multiple: bool
        """
        if include_in_multiple is None:
            raise ValueError("Invalid value for `include_in_multiple`, must not be `None`")

        self._include_in_multiple = include_in_multiple

    @property
    def price_den(self):
        """Gets the price_den of this Part.

        Price denominator - will be ignored for types other than L (Fixed Price)

        :return: The price_den of this Part.
        :rtype: int
        """
        return self._price_den

    @price_den.setter
    def price_den(self, price_den):
        """Sets the price_den of this Part.

        Price denominator - will be ignored for types other than L (Fixed Price)

        :param price_den: The price_den of this Part.
        :type price_den: int
        """
        if price_den is None:
            raise ValueError("Invalid value for `price_den`, must not be `None`")

        self._price_den = price_den

    @property
    def price_num(self):
        """Gets the price_num of this Part.

        Price numerator - will be ignored for types other than L (Fixed Price)

        :return: The price_num of this Part.
        :rtype: int
        """
        return self._price_num

    @price_num.setter
    def price_num(self, price_num):
        """Sets the price_num of this Part.

        Price numerator - will be ignored for types other than L (Fixed Price)

        :param price_num: The price_num of this Part.
        :type price_num: int
        """
        if price_num is None:
            raise ValueError("Invalid value for `price_num`, must not be `None`")

        self._price_num = price_num

    @property
    def price_type(self):
        """Gets the price_type of this Part.

        The type of price selected. For example - ‘L’ (Fixed)

        :return: The price_type of this Part.
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this Part.

        The type of price selected. For example - ‘L’ (Fixed)

        :param price_type: The price_type of this Part.
        :type price_type: int
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def selection_id(self):
        """Gets the selection_id of this Part.

        The selection identifier

        :return: The selection_id of this Part.
        :rtype: int
        """
        return self._selection_id

    @selection_id.setter
    def selection_id(self, selection_id):
        """Sets the selection_id of this Part.

        The selection identifier

        :param selection_id: The selection_id of this Part.
        :type selection_id: int
        """
        if selection_id is None:
            raise ValueError("Invalid value for `selection_id`, must not be `None`")

        self._selection_id = selection_id
