/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Part
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Part {
  public static final String SERIALIZED_NAME_INCLUDE_IN_MULTIPLE = "includeInMultiple";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_MULTIPLE)
  private Boolean includeInMultiple;

  public static final String SERIALIZED_NAME_PRICE_DEN = "priceDen";
  @SerializedName(SERIALIZED_NAME_PRICE_DEN)
  private Integer priceDen;

  public static final String SERIALIZED_NAME_PRICE_NUM = "priceNum";
  @SerializedName(SERIALIZED_NAME_PRICE_NUM)
  private Integer priceNum;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "priceType";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private Integer priceType;

  public static final String SERIALIZED_NAME_SELECTION_ID = "selectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private Integer selectionId;

  public Part() {
  }

  public Part includeInMultiple(Boolean includeInMultiple) {
    this.includeInMultiple = includeInMultiple;
    return this;
  }

  /**
   * Indicates if the bet can be used in a multiple bet
   * @return includeInMultiple
   */
  @javax.annotation.Nonnull
  public Boolean getIncludeInMultiple() {
    return includeInMultiple;
  }

  public void setIncludeInMultiple(Boolean includeInMultiple) {
    this.includeInMultiple = includeInMultiple;
  }


  public Part priceDen(Integer priceDen) {
    this.priceDen = priceDen;
    return this;
  }

  /**
   * Price denominator - will be ignored for types other than L (Fixed Price)
   * @return priceDen
   */
  @javax.annotation.Nonnull
  public Integer getPriceDen() {
    return priceDen;
  }

  public void setPriceDen(Integer priceDen) {
    this.priceDen = priceDen;
  }


  public Part priceNum(Integer priceNum) {
    this.priceNum = priceNum;
    return this;
  }

  /**
   * Price numerator - will be ignored for types other than L (Fixed Price)
   * @return priceNum
   */
  @javax.annotation.Nonnull
  public Integer getPriceNum() {
    return priceNum;
  }

  public void setPriceNum(Integer priceNum) {
    this.priceNum = priceNum;
  }


  public Part priceType(Integer priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * The type of price selected. For example - ‘L’ (Fixed)
   * @return priceType
   */
  @javax.annotation.Nonnull
  public Integer getPriceType() {
    return priceType;
  }

  public void setPriceType(Integer priceType) {
    this.priceType = priceType;
  }


  public Part selectionId(Integer selectionId) {
    this.selectionId = selectionId;
    return this;
  }

  /**
   * The selection identifier
   * @return selectionId
   */
  @javax.annotation.Nonnull
  public Integer getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(Integer selectionId) {
    this.selectionId = selectionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Part part = (Part) o;
    return Objects.equals(this.includeInMultiple, part.includeInMultiple) &&
        Objects.equals(this.priceDen, part.priceDen) &&
        Objects.equals(this.priceNum, part.priceNum) &&
        Objects.equals(this.priceType, part.priceType) &&
        Objects.equals(this.selectionId, part.selectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeInMultiple, priceDen, priceNum, priceType, selectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Part {\n");
    sb.append("    includeInMultiple: ").append(toIndentedString(includeInMultiple)).append("\n");
    sb.append("    priceDen: ").append(toIndentedString(priceDen)).append("\n");
    sb.append("    priceNum: ").append(toIndentedString(priceNum)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeInMultiple");
    openapiFields.add("priceDen");
    openapiFields.add("priceNum");
    openapiFields.add("priceType");
    openapiFields.add("selectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("includeInMultiple");
    openapiRequiredFields.add("priceDen");
    openapiRequiredFields.add("priceNum");
    openapiRequiredFields.add("priceType");
    openapiRequiredFields.add("selectionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Part
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Part.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Part is not found in the empty JSON string", Part.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Part.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Part` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Part.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Part.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Part' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Part> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Part.class));

       return (TypeAdapter<T>) new TypeAdapter<Part>() {
           @Override
           public void write(JsonWriter out, Part value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Part read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Part given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Part
   * @throws IOException if the JSON string is invalid with respect to Part
   */
  public static Part fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Part.class);
  }

  /**
   * Convert an instance of Part to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

