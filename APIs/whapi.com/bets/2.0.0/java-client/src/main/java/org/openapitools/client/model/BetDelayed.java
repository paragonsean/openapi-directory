/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BetDelayed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BetDelayed {
  public static final String SERIALIZED_NAME_DELAY_PERIOD_SECONDS = "delayPeriodSeconds";
  @SerializedName(SERIALIZED_NAME_DELAY_PERIOD_SECONDS)
  private Integer delayPeriodSeconds;

  public static final String SERIALIZED_NAME_DELAYED_BET_ID = "delayedBetId";
  @SerializedName(SERIALIZED_NAME_DELAYED_BET_ID)
  private String delayedBetId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private BigDecimal number;

  public BetDelayed() {
  }

  public BetDelayed delayPeriodSeconds(Integer delayPeriodSeconds) {
    this.delayPeriodSeconds = delayPeriodSeconds;
    return this;
  }

  /**
   * The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.
   * @return delayPeriodSeconds
   */
  @javax.annotation.Nonnull
  public Integer getDelayPeriodSeconds() {
    return delayPeriodSeconds;
  }

  public void setDelayPeriodSeconds(Integer delayPeriodSeconds) {
    this.delayPeriodSeconds = delayPeriodSeconds;
  }


  public BetDelayed delayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
    return this;
  }

  /**
   * The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.
   * @return delayedBetId
   */
  @javax.annotation.Nonnull
  public String getDelayedBetId() {
    return delayedBetId;
  }

  public void setDelayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
  }


  public BetDelayed id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The number of the bet
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BetDelayed number(BigDecimal number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the bet if this is part of a multiple bet
   * @return number
   */
  @javax.annotation.Nullable
  public BigDecimal getNumber() {
    return number;
  }

  public void setNumber(BigDecimal number) {
    this.number = number;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BetDelayed betDelayed = (BetDelayed) o;
    return Objects.equals(this.delayPeriodSeconds, betDelayed.delayPeriodSeconds) &&
        Objects.equals(this.delayedBetId, betDelayed.delayedBetId) &&
        Objects.equals(this.id, betDelayed.id) &&
        Objects.equals(this.number, betDelayed.number);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delayPeriodSeconds, delayedBetId, id, number);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BetDelayed {\n");
    sb.append("    delayPeriodSeconds: ").append(toIndentedString(delayPeriodSeconds)).append("\n");
    sb.append("    delayedBetId: ").append(toIndentedString(delayedBetId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delayPeriodSeconds");
    openapiFields.add("delayedBetId");
    openapiFields.add("id");
    openapiFields.add("number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("delayPeriodSeconds");
    openapiRequiredFields.add("delayedBetId");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BetDelayed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BetDelayed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BetDelayed is not found in the empty JSON string", BetDelayed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BetDelayed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BetDelayed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BetDelayed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("delayedBetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayedBetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayedBetId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BetDelayed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BetDelayed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BetDelayed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BetDelayed.class));

       return (TypeAdapter<T>) new TypeAdapter<BetDelayed>() {
           @Override
           public void write(JsonWriter out, BetDelayed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BetDelayed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BetDelayed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BetDelayed
   * @throws IOException if the JSON string is invalid with respect to BetDelayed
   */
  public static BetDelayed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BetDelayed.class);
  }

  /**
   * Convert an instance of BetDelayed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

