/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Betslipleg;
import org.openapitools.client.model.FreeBetDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Betslipbet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Betslipbet {
  public static final String SERIALIZED_NAME_BET_MULTIPLIER = "betMultiplier";
  @SerializedName(SERIALIZED_NAME_BET_MULTIPLIER)
  private BigDecimal betMultiplier;

  public static final String SERIALIZED_NAME_FREE_BETS = "freeBets";
  @SerializedName(SERIALIZED_NAME_FREE_BETS)
  private List<FreeBetDetail> freeBets = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGS = "legs";
  @SerializedName(SERIALIZED_NAME_LEGS)
  private List<Betslipleg> legs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_STAKE = "maxStake";
  @SerializedName(SERIALIZED_NAME_MAX_STAKE)
  private Double maxStake;

  public static final String SERIALIZED_NAME_MIN_STAKE = "minStake";
  @SerializedName(SERIALIZED_NAME_MIN_STAKE)
  private Double minStake;

  public static final String SERIALIZED_NAME_NUM_LINES = "numLines";
  @SerializedName(SERIALIZED_NAME_NUM_LINES)
  private BigDecimal numLines;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private String typeCode;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public Betslipbet() {
  }

  public Betslipbet betMultiplier(BigDecimal betMultiplier) {
    this.betMultiplier = betMultiplier;
    return this;
  }

  /**
   * The total aggregated odds, as a decimal, of the multiple bet placed
   * @return betMultiplier
   */
  @javax.annotation.Nullable
  public BigDecimal getBetMultiplier() {
    return betMultiplier;
  }

  public void setBetMultiplier(BigDecimal betMultiplier) {
    this.betMultiplier = betMultiplier;
  }


  public Betslipbet freeBets(List<FreeBetDetail> freeBets) {
    this.freeBets = freeBets;
    return this;
  }

  public Betslipbet addFreeBetsItem(FreeBetDetail freeBetsItem) {
    if (this.freeBets == null) {
      this.freeBets = new ArrayList<>();
    }
    this.freeBets.add(freeBetsItem);
    return this;
  }

  /**
   * Free bets that can be used with this bet
   * @return freeBets
   */
  @javax.annotation.Nullable
  public List<FreeBetDetail> getFreeBets() {
    return freeBets;
  }

  public void setFreeBets(List<FreeBetDetail> freeBets) {
    this.freeBets = freeBets;
  }


  public Betslipbet legs(List<Betslipleg> legs) {
    this.legs = legs;
    return this;
  }

  public Betslipbet addLegsItem(Betslipleg legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<>();
    }
    this.legs.add(legsItem);
    return this;
  }

  /**
   * Get legs
   * @return legs
   */
  @javax.annotation.Nonnull
  public List<Betslipleg> getLegs() {
    return legs;
  }

  public void setLegs(List<Betslipleg> legs) {
    this.legs = legs;
  }


  public Betslipbet maxStake(Double maxStake) {
    this.maxStake = maxStake;
    return this;
  }

  /**
   * Maximum stake allowable on the bet. For example: 2500.00 (GBP)
   * @return maxStake
   */
  @javax.annotation.Nullable
  public Double getMaxStake() {
    return maxStake;
  }

  public void setMaxStake(Double maxStake) {
    this.maxStake = maxStake;
  }


  public Betslipbet minStake(Double minStake) {
    this.minStake = minStake;
    return this;
  }

  /**
   * Minumum stake allowable on the bet. For example: 0.05 (GBP)
   * @return minStake
   */
  @javax.annotation.Nullable
  public Double getMinStake() {
    return minStake;
  }

  public void setMinStake(Double minStake) {
    this.minStake = minStake;
  }


  public Betslipbet numLines(BigDecimal numLines) {
    this.numLines = numLines;
    return this;
  }

  /**
   * The number of lines (selections) of a bet
   * @return numLines
   */
  @javax.annotation.Nullable
  public BigDecimal getNumLines() {
    return numLines;
  }

  public void setNumLines(BigDecimal numLines) {
    this.numLines = numLines;
  }


  public Betslipbet number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The bet number
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Betslipbet typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * The bet type code of the bet. For example: TBL (Treble)
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }


  public Betslipbet typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * The TypeCode of the bet. For example: TBL (Treble)
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Betslipbet betslipbet = (Betslipbet) o;
    return Objects.equals(this.betMultiplier, betslipbet.betMultiplier) &&
        Objects.equals(this.freeBets, betslipbet.freeBets) &&
        Objects.equals(this.legs, betslipbet.legs) &&
        Objects.equals(this.maxStake, betslipbet.maxStake) &&
        Objects.equals(this.minStake, betslipbet.minStake) &&
        Objects.equals(this.numLines, betslipbet.numLines) &&
        Objects.equals(this.number, betslipbet.number) &&
        Objects.equals(this.typeCode, betslipbet.typeCode) &&
        Objects.equals(this.typeName, betslipbet.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(betMultiplier, freeBets, legs, maxStake, minStake, numLines, number, typeCode, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Betslipbet {\n");
    sb.append("    betMultiplier: ").append(toIndentedString(betMultiplier)).append("\n");
    sb.append("    freeBets: ").append(toIndentedString(freeBets)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    maxStake: ").append(toIndentedString(maxStake)).append("\n");
    sb.append("    minStake: ").append(toIndentedString(minStake)).append("\n");
    sb.append("    numLines: ").append(toIndentedString(numLines)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("betMultiplier");
    openapiFields.add("freeBets");
    openapiFields.add("legs");
    openapiFields.add("maxStake");
    openapiFields.add("minStake");
    openapiFields.add("numLines");
    openapiFields.add("number");
    openapiFields.add("typeCode");
    openapiFields.add("typeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("legs");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("typeCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Betslipbet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Betslipbet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Betslipbet is not found in the empty JSON string", Betslipbet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Betslipbet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Betslipbet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Betslipbet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("freeBets") != null && !jsonObj.get("freeBets").isJsonNull()) {
        JsonArray jsonArrayfreeBets = jsonObj.getAsJsonArray("freeBets");
        if (jsonArrayfreeBets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("freeBets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `freeBets` to be an array in the JSON string but got `%s`", jsonObj.get("freeBets").toString()));
          }

          // validate the optional field `freeBets` (array)
          for (int i = 0; i < jsonArrayfreeBets.size(); i++) {
            FreeBetDetail.validateJsonElement(jsonArrayfreeBets.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("legs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legs` to be an array in the JSON string but got `%s`", jsonObj.get("legs").toString()));
      }

      JsonArray jsonArraylegs = jsonObj.getAsJsonArray("legs");
      // validate the required field `legs` (array)
      for (int i = 0; i < jsonArraylegs.size(); i++) {
        Betslipleg.validateJsonElement(jsonArraylegs.get(i));
      };
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Betslipbet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Betslipbet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Betslipbet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Betslipbet.class));

       return (TypeAdapter<T>) new TypeAdapter<Betslipbet>() {
           @Override
           public void write(JsonWriter out, Betslipbet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Betslipbet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Betslipbet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Betslipbet
   * @throws IOException if the JSON string is invalid with respect to Betslipbet
   */
  public static Betslipbet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Betslipbet.class);
  }

  /**
   * Convert an instance of Betslipbet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

