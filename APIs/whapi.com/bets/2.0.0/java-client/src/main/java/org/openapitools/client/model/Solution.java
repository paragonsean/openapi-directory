/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Solution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Solution {
  public static final String SERIALIZED_NAME_BET_NUM = "betNum";
  @SerializedName(SERIALIZED_NAME_BET_NUM)
  private String betNum;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_HANDICAP = "handicap";
  @SerializedName(SERIALIZED_NAME_HANDICAP)
  private String handicap;

  public static final String SERIALIZED_NAME_HANDICAP_PRECISION = "handicapPrecision";
  @SerializedName(SERIALIZED_NAME_HANDICAP_PRECISION)
  private String handicapPrecision;

  public static final String SERIALIZED_NAME_PRICE_DEN = "priceDen";
  @SerializedName(SERIALIZED_NAME_PRICE_DEN)
  private String priceDen;

  public static final String SERIALIZED_NAME_PRICE_NUM = "priceNum";
  @SerializedName(SERIALIZED_NAME_PRICE_NUM)
  private String priceNum;

  public static final String SERIALIZED_NAME_SELECTION_HANDICAP = "selectionHandicap";
  @SerializedName(SERIALIZED_NAME_SELECTION_HANDICAP)
  private String selectionHandicap;

  public static final String SERIALIZED_NAME_SELECTION_ID = "selectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private String selectionId;

  public Solution() {
  }

  public Solution betNum(String betNum) {
    this.betNum = betNum;
    return this;
  }

  /**
   * The bet number
   * @return betNum
   */
  @javax.annotation.Nullable
  public String getBetNum() {
    return betNum;
  }

  public void setBetNum(String betNum) {
    this.betNum = betNum;
  }


  public Solution eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The identifier of the event
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Solution handicap(String handicap) {
    this.handicap = handicap;
    return this;
  }

  /**
   * The updated handicap
   * @return handicap
   */
  @javax.annotation.Nullable
  public String getHandicap() {
    return handicap;
  }

  public void setHandicap(String handicap) {
    this.handicap = handicap;
  }


  public Solution handicapPrecision(String handicapPrecision) {
    this.handicapPrecision = handicapPrecision;
    return this;
  }

  /**
   * The handicap precision
   * @return handicapPrecision
   */
  @javax.annotation.Nullable
  public String getHandicapPrecision() {
    return handicapPrecision;
  }

  public void setHandicapPrecision(String handicapPrecision) {
    this.handicapPrecision = handicapPrecision;
  }


  public Solution priceDen(String priceDen) {
    this.priceDen = priceDen;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
   * @return priceDen
   */
  @javax.annotation.Nullable
  public String getPriceDen() {
    return priceDen;
  }

  public void setPriceDen(String priceDen) {
    this.priceDen = priceDen;
  }


  public Solution priceNum(String priceNum) {
    this.priceNum = priceNum;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
   * @return priceNum
   */
  @javax.annotation.Nullable
  public String getPriceNum() {
    return priceNum;
  }

  public void setPriceNum(String priceNum) {
    this.priceNum = priceNum;
  }


  public Solution selectionHandicap(String selectionHandicap) {
    this.selectionHandicap = selectionHandicap;
    return this;
  }

  /**
   * The selection handicap
   * @return selectionHandicap
   */
  @javax.annotation.Nullable
  public String getSelectionHandicap() {
    return selectionHandicap;
  }

  public void setSelectionHandicap(String selectionHandicap) {
    this.selectionHandicap = selectionHandicap;
  }


  public Solution selectionId(String selectionId) {
    this.selectionId = selectionId;
    return this;
  }

  /**
   * The identifier of the selection
   * @return selectionId
   */
  @javax.annotation.Nullable
  public String getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(String selectionId) {
    this.selectionId = selectionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Solution solution = (Solution) o;
    return Objects.equals(this.betNum, solution.betNum) &&
        Objects.equals(this.eventId, solution.eventId) &&
        Objects.equals(this.handicap, solution.handicap) &&
        Objects.equals(this.handicapPrecision, solution.handicapPrecision) &&
        Objects.equals(this.priceDen, solution.priceDen) &&
        Objects.equals(this.priceNum, solution.priceNum) &&
        Objects.equals(this.selectionHandicap, solution.selectionHandicap) &&
        Objects.equals(this.selectionId, solution.selectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(betNum, eventId, handicap, handicapPrecision, priceDen, priceNum, selectionHandicap, selectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Solution {\n");
    sb.append("    betNum: ").append(toIndentedString(betNum)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    handicap: ").append(toIndentedString(handicap)).append("\n");
    sb.append("    handicapPrecision: ").append(toIndentedString(handicapPrecision)).append("\n");
    sb.append("    priceDen: ").append(toIndentedString(priceDen)).append("\n");
    sb.append("    priceNum: ").append(toIndentedString(priceNum)).append("\n");
    sb.append("    selectionHandicap: ").append(toIndentedString(selectionHandicap)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("betNum");
    openapiFields.add("eventId");
    openapiFields.add("handicap");
    openapiFields.add("handicapPrecision");
    openapiFields.add("priceDen");
    openapiFields.add("priceNum");
    openapiFields.add("selectionHandicap");
    openapiFields.add("selectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Solution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Solution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Solution is not found in the empty JSON string", Solution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Solution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Solution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("betNum") != null && !jsonObj.get("betNum").isJsonNull()) && !jsonObj.get("betNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `betNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("betNum").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("handicap") != null && !jsonObj.get("handicap").isJsonNull()) && !jsonObj.get("handicap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handicap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handicap").toString()));
      }
      if ((jsonObj.get("handicapPrecision") != null && !jsonObj.get("handicapPrecision").isJsonNull()) && !jsonObj.get("handicapPrecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handicapPrecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handicapPrecision").toString()));
      }
      if ((jsonObj.get("priceDen") != null && !jsonObj.get("priceDen").isJsonNull()) && !jsonObj.get("priceDen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceDen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceDen").toString()));
      }
      if ((jsonObj.get("priceNum") != null && !jsonObj.get("priceNum").isJsonNull()) && !jsonObj.get("priceNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceNum").toString()));
      }
      if ((jsonObj.get("selectionHandicap") != null && !jsonObj.get("selectionHandicap").isJsonNull()) && !jsonObj.get("selectionHandicap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionHandicap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionHandicap").toString()));
      }
      if ((jsonObj.get("selectionId") != null && !jsonObj.get("selectionId").isJsonNull()) && !jsonObj.get("selectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Solution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Solution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Solution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Solution.class));

       return (TypeAdapter<T>) new TypeAdapter<Solution>() {
           @Override
           public void write(JsonWriter out, Solution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Solution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Solution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Solution
   * @throws IOException if the JSON string is invalid with respect to Solution
   */
  public static Solution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Solution.class);
  }

  /**
   * Convert an instance of Solution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

