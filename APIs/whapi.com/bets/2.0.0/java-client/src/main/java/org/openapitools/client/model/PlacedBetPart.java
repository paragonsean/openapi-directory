/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PriceFormatted;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlacedBetPart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlacedBetPart {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EACH_WAY_DEN = "eachWayDen";
  @SerializedName(SERIALIZED_NAME_EACH_WAY_DEN)
  private Integer eachWayDen;

  public static final String SERIALIZED_NAME_EACH_WAY_NUM = "eachWayNum";
  @SerializedName(SERIALIZED_NAME_EACH_WAY_NUM)
  private Integer eachWayNum;

  public static final String SERIALIZED_NAME_EACH_WAY_PLACES = "eachWayPlaces";
  @SerializedName(SERIALIZED_NAME_EACH_WAY_PLACES)
  private Integer eachWayPlaces;

  public static final String SERIALIZED_NAME_EVENT_DESCRIPTION = "eventDescription";
  @SerializedName(SERIALIZED_NAME_EVENT_DESCRIPTION)
  private String eventDescription;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_MARKET_DESCRIPTION = "eventMarketDescription";
  @SerializedName(SERIALIZED_NAME_EVENT_MARKET_DESCRIPTION)
  private String eventMarketDescription;

  public static final String SERIALIZED_NAME_EVENT_TYPE_DESCRIPTION = "eventTypeDescription";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_DESCRIPTION)
  private String eventTypeDescription;

  public static final String SERIALIZED_NAME_HANDICAP = "handicap";
  @SerializedName(SERIALIZED_NAME_HANDICAP)
  private Double handicap;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PRICE_DEN = "priceDen";
  @SerializedName(SERIALIZED_NAME_PRICE_DEN)
  private Integer priceDen;

  public static final String SERIALIZED_NAME_PRICE_FORMATTED = "priceFormatted";
  @SerializedName(SERIALIZED_NAME_PRICE_FORMATTED)
  private PriceFormatted priceFormatted;

  public static final String SERIALIZED_NAME_PRICE_NUM = "priceNum";
  @SerializedName(SERIALIZED_NAME_PRICE_NUM)
  private Integer priceNum;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "priceType";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private String priceType;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_RULE4_DEDUCTIONS = "rule4Deductions";
  @SerializedName(SERIALIZED_NAME_RULE4_DEDUCTIONS)
  private Double rule4Deductions;

  public static final String SERIALIZED_NAME_SELECTION_ID = "selectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private String selectionId;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public PlacedBetPart() {
  }

  public PlacedBetPart description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human-friendly description of the bet
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlacedBetPart eachWayDen(Integer eachWayDen) {
    this.eachWayDen = eachWayDen;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
   * @return eachWayDen
   */
  @javax.annotation.Nullable
  public Integer getEachWayDen() {
    return eachWayDen;
  }

  public void setEachWayDen(Integer eachWayDen) {
    this.eachWayDen = eachWayDen;
  }


  public PlacedBetPart eachWayNum(Integer eachWayNum) {
    this.eachWayNum = eachWayNum;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
   * @return eachWayNum
   */
  @javax.annotation.Nullable
  public Integer getEachWayNum() {
    return eachWayNum;
  }

  public void setEachWayNum(Integer eachWayNum) {
    this.eachWayNum = eachWayNum;
  }


  public PlacedBetPart eachWayPlaces(Integer eachWayPlaces) {
    this.eachWayPlaces = eachWayPlaces;
    return this;
  }

  /**
   * The Each-way places available for the bet
   * @return eachWayPlaces
   */
  @javax.annotation.Nullable
  public Integer getEachWayPlaces() {
    return eachWayPlaces;
  }

  public void setEachWayPlaces(Integer eachWayPlaces) {
    this.eachWayPlaces = eachWayPlaces;
  }


  public PlacedBetPart eventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
    return this;
  }

  /**
   * The description of the event
   * @return eventDescription
   */
  @javax.annotation.Nonnull
  public String getEventDescription() {
    return eventDescription;
  }

  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }


  public PlacedBetPart eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Unique identifier of the event
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public PlacedBetPart eventMarketDescription(String eventMarketDescription) {
    this.eventMarketDescription = eventMarketDescription;
    return this;
  }

  /**
   * The description of the market within an event
   * @return eventMarketDescription
   */
  @javax.annotation.Nullable
  public String getEventMarketDescription() {
    return eventMarketDescription;
  }

  public void setEventMarketDescription(String eventMarketDescription) {
    this.eventMarketDescription = eventMarketDescription;
  }


  public PlacedBetPart eventTypeDescription(String eventTypeDescription) {
    this.eventTypeDescription = eventTypeDescription;
    return this;
  }

  /**
   * The description of type of the event
   * @return eventTypeDescription
   */
  @javax.annotation.Nullable
  public String getEventTypeDescription() {
    return eventTypeDescription;
  }

  public void setEventTypeDescription(String eventTypeDescription) {
    this.eventTypeDescription = eventTypeDescription;
  }


  public PlacedBetPart handicap(Double handicap) {
    this.handicap = handicap;
    return this;
  }

  /**
   * Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)
   * @return handicap
   */
  @javax.annotation.Nullable
  public Double getHandicap() {
    return handicap;
  }

  public void setHandicap(Double handicap) {
    this.handicap = handicap;
  }


  public PlacedBetPart number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the bet
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlacedBetPart priceDen(Integer priceDen) {
    this.priceDen = priceDen;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
   * @return priceDen
   */
  @javax.annotation.Nonnull
  public Integer getPriceDen() {
    return priceDen;
  }

  public void setPriceDen(Integer priceDen) {
    this.priceDen = priceDen;
  }


  public PlacedBetPart priceFormatted(PriceFormatted priceFormatted) {
    this.priceFormatted = priceFormatted;
    return this;
  }

  /**
   * Get priceFormatted
   * @return priceFormatted
   */
  @javax.annotation.Nullable
  public PriceFormatted getPriceFormatted() {
    return priceFormatted;
  }

  public void setPriceFormatted(PriceFormatted priceFormatted) {
    this.priceFormatted = priceFormatted;
  }


  public PlacedBetPart priceNum(Integer priceNum) {
    this.priceNum = priceNum;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
   * @return priceNum
   */
  @javax.annotation.Nonnull
  public Integer getPriceNum() {
    return priceNum;
  }

  public void setPriceNum(Integer priceNum) {
    this.priceNum = priceNum;
  }


  public PlacedBetPart priceType(String priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * The price type chosen when the bet was placed. For example: L (Win)
   * @return priceType
   */
  @javax.annotation.Nonnull
  public String getPriceType() {
    return priceType;
  }

  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }


  public PlacedBetPart result(String result) {
    this.result = result;
    return this;
  }

  /**
   * The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available
   * @return result
   */
  @javax.annotation.Nonnull
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public PlacedBetPart rule4Deductions(Double rule4Deductions) {
    this.rule4Deductions = rule4Deductions;
    return this;
  }

  /**
   * The official scale of deductions that apply when a runner is withdrawn
   * @return rule4Deductions
   */
  @javax.annotation.Nullable
  public Double getRule4Deductions() {
    return rule4Deductions;
  }

  public void setRule4Deductions(Double rule4Deductions) {
    this.rule4Deductions = rule4Deductions;
  }


  public PlacedBetPart selectionId(String selectionId) {
    this.selectionId = selectionId;
    return this;
  }

  /**
   * Unique identifier of the selection
   * @return selectionId
   */
  @javax.annotation.Nullable
  public String getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(String selectionId) {
    this.selectionId = selectionId;
  }


  public PlacedBetPart startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Time the event will start. For example: 2013-01-30 11:01:01
   * @return startDateTime
   */
  @javax.annotation.Nonnull
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlacedBetPart placedBetPart = (PlacedBetPart) o;
    return Objects.equals(this.description, placedBetPart.description) &&
        Objects.equals(this.eachWayDen, placedBetPart.eachWayDen) &&
        Objects.equals(this.eachWayNum, placedBetPart.eachWayNum) &&
        Objects.equals(this.eachWayPlaces, placedBetPart.eachWayPlaces) &&
        Objects.equals(this.eventDescription, placedBetPart.eventDescription) &&
        Objects.equals(this.eventId, placedBetPart.eventId) &&
        Objects.equals(this.eventMarketDescription, placedBetPart.eventMarketDescription) &&
        Objects.equals(this.eventTypeDescription, placedBetPart.eventTypeDescription) &&
        Objects.equals(this.handicap, placedBetPart.handicap) &&
        Objects.equals(this.number, placedBetPart.number) &&
        Objects.equals(this.priceDen, placedBetPart.priceDen) &&
        Objects.equals(this.priceFormatted, placedBetPart.priceFormatted) &&
        Objects.equals(this.priceNum, placedBetPart.priceNum) &&
        Objects.equals(this.priceType, placedBetPart.priceType) &&
        Objects.equals(this.result, placedBetPart.result) &&
        Objects.equals(this.rule4Deductions, placedBetPart.rule4Deductions) &&
        Objects.equals(this.selectionId, placedBetPart.selectionId) &&
        Objects.equals(this.startDateTime, placedBetPart.startDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, eachWayDen, eachWayNum, eachWayPlaces, eventDescription, eventId, eventMarketDescription, eventTypeDescription, handicap, number, priceDen, priceFormatted, priceNum, priceType, result, rule4Deductions, selectionId, startDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlacedBetPart {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eachWayDen: ").append(toIndentedString(eachWayDen)).append("\n");
    sb.append("    eachWayNum: ").append(toIndentedString(eachWayNum)).append("\n");
    sb.append("    eachWayPlaces: ").append(toIndentedString(eachWayPlaces)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventMarketDescription: ").append(toIndentedString(eventMarketDescription)).append("\n");
    sb.append("    eventTypeDescription: ").append(toIndentedString(eventTypeDescription)).append("\n");
    sb.append("    handicap: ").append(toIndentedString(handicap)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    priceDen: ").append(toIndentedString(priceDen)).append("\n");
    sb.append("    priceFormatted: ").append(toIndentedString(priceFormatted)).append("\n");
    sb.append("    priceNum: ").append(toIndentedString(priceNum)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    rule4Deductions: ").append(toIndentedString(rule4Deductions)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("eachWayDen");
    openapiFields.add("eachWayNum");
    openapiFields.add("eachWayPlaces");
    openapiFields.add("eventDescription");
    openapiFields.add("eventId");
    openapiFields.add("eventMarketDescription");
    openapiFields.add("eventTypeDescription");
    openapiFields.add("handicap");
    openapiFields.add("number");
    openapiFields.add("priceDen");
    openapiFields.add("priceFormatted");
    openapiFields.add("priceNum");
    openapiFields.add("priceType");
    openapiFields.add("result");
    openapiFields.add("rule4Deductions");
    openapiFields.add("selectionId");
    openapiFields.add("startDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("eventDescription");
    openapiRequiredFields.add("eventId");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("priceDen");
    openapiRequiredFields.add("priceNum");
    openapiRequiredFields.add("priceType");
    openapiRequiredFields.add("result");
    openapiRequiredFields.add("startDateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlacedBetPart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlacedBetPart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlacedBetPart is not found in the empty JSON string", PlacedBetPart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlacedBetPart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlacedBetPart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlacedBetPart.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("eventDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDescription").toString()));
      }
      if (!jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("eventMarketDescription") != null && !jsonObj.get("eventMarketDescription").isJsonNull()) && !jsonObj.get("eventMarketDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventMarketDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventMarketDescription").toString()));
      }
      if ((jsonObj.get("eventTypeDescription") != null && !jsonObj.get("eventTypeDescription").isJsonNull()) && !jsonObj.get("eventTypeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTypeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTypeDescription").toString()));
      }
      // validate the optional field `priceFormatted`
      if (jsonObj.get("priceFormatted") != null && !jsonObj.get("priceFormatted").isJsonNull()) {
        PriceFormatted.validateJsonElement(jsonObj.get("priceFormatted"));
      }
      if (!jsonObj.get("priceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceType").toString()));
      }
      if (!jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("selectionId") != null && !jsonObj.get("selectionId").isJsonNull()) && !jsonObj.get("selectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionId").toString()));
      }
      if (!jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlacedBetPart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlacedBetPart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlacedBetPart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlacedBetPart.class));

       return (TypeAdapter<T>) new TypeAdapter<PlacedBetPart>() {
           @Override
           public void write(JsonWriter out, PlacedBetPart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlacedBetPart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlacedBetPart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlacedBetPart
   * @throws IOException if the JSON string is invalid with respect to PlacedBetPart
   */
  public static PlacedBetPart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlacedBetPart.class);
  }

  /**
   * Convert an instance of PlacedBetPart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

