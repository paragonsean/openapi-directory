/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BetDelayed;
import org.openapitools.client.model.BetHistoryResponse;
import org.openapitools.client.model.BetPlaced;
import org.openapitools.client.model.BetSlipRequest;
import org.openapitools.client.model.BetSlipResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CashInResponse;
import org.openapitools.client.model.ComplexBetRequestBody;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.FreeBetDetail;
import org.openapitools.client.model.SingleBetRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cashin
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param betId The identifier of the bet (required)
     * @param cashInValue The cash in value of the bet (required)
     * @param cashinBetDelayId The ID of this bet delay (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashinCall(String apiKey, String apiSecret, String apiTicket, String betId, Double cashInValue, String cashinBetDelayId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{betId}/cashin"
            .replace("{" + "betId" + "}", localVarApiClient.escapeString(betId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cashInValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cashInValue", cashInValue));
        }

        if (cashinBetDelayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cashinBetDelayId", cashinBetDelayId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cashinValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, String betId, Double cashInValue, String cashinBetDelayId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling cashin(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling cashin(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling cashin(Async)");
        }

        // verify the required parameter 'betId' is set
        if (betId == null) {
            throw new ApiException("Missing the required parameter 'betId' when calling cashin(Async)");
        }

        // verify the required parameter 'cashInValue' is set
        if (cashInValue == null) {
            throw new ApiException("Missing the required parameter 'cashInValue' when calling cashin(Async)");
        }

        // verify the required parameter 'cashinBetDelayId' is set
        if (cashinBetDelayId == null) {
            throw new ApiException("Missing the required parameter 'cashinBetDelayId' when calling cashin(Async)");
        }

        return cashinCall(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId, _callback);

    }

    /**
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param betId The identifier of the bet (required)
     * @param cashInValue The cash in value of the bet (required)
     * @param cashinBetDelayId The ID of this bet delay (required)
     * @return CashInResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public CashInResponse cashin(String apiKey, String apiSecret, String apiTicket, String betId, Double cashInValue, String cashinBetDelayId) throws ApiException {
        ApiResponse<CashInResponse> localVarResp = cashinWithHttpInfo(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId);
        return localVarResp.getData();
    }

    /**
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param betId The identifier of the bet (required)
     * @param cashInValue The cash in value of the bet (required)
     * @param cashinBetDelayId The ID of this bet delay (required)
     * @return ApiResponse&lt;CashInResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CashInResponse> cashinWithHttpInfo(String apiKey, String apiSecret, String apiTicket, String betId, Double cashInValue, String cashinBetDelayId) throws ApiException {
        okhttp3.Call localVarCall = cashinValidateBeforeCall(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId, null);
        Type localVarReturnType = new TypeToken<CashInResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer (asynchronously)
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param betId The identifier of the bet (required)
     * @param cashInValue The cash in value of the bet (required)
     * @param cashinBetDelayId The ID of this bet delay (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashinAsync(String apiKey, String apiSecret, String apiTicket, String betId, Double cashInValue, String cashinBetDelayId, final ApiCallback<CashInResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cashinValidateBeforeCall(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId, _callback);
        Type localVarReturnType = new TypeToken<CashInResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBetHistory
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param dateFrom The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param dateTo The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param page The index of the page to return (optional, default to 1)
     * @param pageSize The number of results per page (optional, default to 100)
     * @param sort The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently (optional, default to transDateTime,asc)
     * @param settled Filter by settled bets. If omitted, both settled and unsettled will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBetHistoryCall(String apiKey, String apiSecret, String apiTicket, String dateFrom, String dateTo, List<String> fields, List<String> include, List<String> exclude, BigDecimal page, BigDecimal pageSize, String sort, Boolean settled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (settled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settled", settled));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBetHistoryValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, String dateFrom, String dateTo, List<String> fields, List<String> include, List<String> exclude, BigDecimal page, BigDecimal pageSize, String sort, Boolean settled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getBetHistory(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getBetHistory(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling getBetHistory(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getBetHistory(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getBetHistory(Async)");
        }

        return getBetHistoryCall(apiKey, apiSecret, apiTicket, dateFrom, dateTo, fields, include, exclude, page, pageSize, sort, settled, _callback);

    }

    /**
     * Retrieves the customer’s bet history.
     * Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param dateFrom The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param dateTo The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param page The index of the page to return (optional, default to 1)
     * @param pageSize The number of results per page (optional, default to 100)
     * @param sort The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently (optional, default to transDateTime,asc)
     * @param settled Filter by settled bets. If omitted, both settled and unsettled will be returned. (optional)
     * @return BetHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public BetHistoryResponse getBetHistory(String apiKey, String apiSecret, String apiTicket, String dateFrom, String dateTo, List<String> fields, List<String> include, List<String> exclude, BigDecimal page, BigDecimal pageSize, String sort, Boolean settled) throws ApiException {
        ApiResponse<BetHistoryResponse> localVarResp = getBetHistoryWithHttpInfo(apiKey, apiSecret, apiTicket, dateFrom, dateTo, fields, include, exclude, page, pageSize, sort, settled);
        return localVarResp.getData();
    }

    /**
     * Retrieves the customer’s bet history.
     * Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param dateFrom The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param dateTo The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param page The index of the page to return (optional, default to 1)
     * @param pageSize The number of results per page (optional, default to 100)
     * @param sort The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently (optional, default to transDateTime,asc)
     * @param settled Filter by settled bets. If omitted, both settled and unsettled will be returned. (optional)
     * @return ApiResponse&lt;BetHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetHistoryResponse> getBetHistoryWithHttpInfo(String apiKey, String apiSecret, String apiTicket, String dateFrom, String dateTo, List<String> fields, List<String> include, List<String> exclude, BigDecimal page, BigDecimal pageSize, String sort, Boolean settled) throws ApiException {
        okhttp3.Call localVarCall = getBetHistoryValidateBeforeCall(apiKey, apiSecret, apiTicket, dateFrom, dateTo, fields, include, exclude, page, pageSize, sort, settled, null);
        Type localVarReturnType = new TypeToken<BetHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the customer’s bet history. (asynchronously)
     * Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param dateFrom The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param dateTo The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss) (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param page The index of the page to return (optional, default to 1)
     * @param pageSize The number of results per page (optional, default to 100)
     * @param sort The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently (optional, default to transDateTime,asc)
     * @param settled Filter by settled bets. If omitted, both settled and unsettled will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBetHistoryAsync(String apiKey, String apiSecret, String apiTicket, String dateFrom, String dateTo, List<String> fields, List<String> include, List<String> exclude, BigDecimal page, BigDecimal pageSize, String sort, Boolean settled, final ApiCallback<BetHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBetHistoryValidateBeforeCall(apiKey, apiSecret, apiTicket, dateFrom, dateTo, fields, include, exclude, page, pageSize, sort, settled, _callback);
        Type localVarReturnType = new TypeToken<BetHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFreeBets
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Free Bets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFreeBetsCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/freebets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFreeBetsValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFreeBets(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getFreeBets(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling getFreeBets(Async)");
        }

        return getFreeBetsCall(apiKey, apiSecret, apiTicket, fields, include, exclude, _callback);

    }

    /**
     * Returns available free bets
     * Retrieves the current free bets available for a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return List&lt;FreeBetDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Free Bets </td><td>  -  </td></tr>
     </table>
     */
    public List<FreeBetDetail> getFreeBets(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<List<FreeBetDetail>> localVarResp = getFreeBetsWithHttpInfo(apiKey, apiSecret, apiTicket, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Returns available free bets
     * Retrieves the current free bets available for a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return ApiResponse&lt;List&lt;FreeBetDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Free Bets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FreeBetDetail>> getFreeBetsWithHttpInfo(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getFreeBetsValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<FreeBetDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns available free bets (asynchronously)
     * Retrieves the current free bets available for a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Free Bets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFreeBetsAsync(String apiKey, String apiSecret, String apiTicket, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<List<FreeBetDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFreeBetsValidateBeforeCall(apiKey, apiSecret, apiTicket, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<FreeBetDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeComplexBet
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param complexBetRequestBody Complex bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeComplexBetCall(String apiKey, String apiSecret, String apiTicket, ComplexBetRequestBody complexBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = complexBetRequestBody;

        // create path and map variables
        String localVarPath = "/bet/complex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeComplexBetValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, ComplexBetRequestBody complexBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling placeComplexBet(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling placeComplexBet(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling placeComplexBet(Async)");
        }

        // verify the required parameter 'complexBetRequestBody' is set
        if (complexBetRequestBody == null) {
            throw new ApiException("Missing the required parameter 'complexBetRequestBody' when calling placeComplexBet(Async)");
        }

        return placeComplexBetCall(apiKey, apiSecret, apiTicket, complexBetRequestBody, fields, include, exclude, _callback);

    }

    /**
     * Places a multiple or a complex bet.
     * Places a multiple or a complex bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param complexBetRequestBody Complex bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return List&lt;BetPlaced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public List<BetPlaced> placeComplexBet(String apiKey, String apiSecret, String apiTicket, ComplexBetRequestBody complexBetRequestBody, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<List<BetPlaced>> localVarResp = placeComplexBetWithHttpInfo(apiKey, apiSecret, apiTicket, complexBetRequestBody, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Places a multiple or a complex bet.
     * Places a multiple or a complex bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param complexBetRequestBody Complex bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return ApiResponse&lt;List&lt;BetPlaced&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BetPlaced>> placeComplexBetWithHttpInfo(String apiKey, String apiSecret, String apiTicket, ComplexBetRequestBody complexBetRequestBody, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = placeComplexBetValidateBeforeCall(apiKey, apiSecret, apiTicket, complexBetRequestBody, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<BetPlaced>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Places a multiple or a complex bet. (asynchronously)
     * Places a multiple or a complex bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param complexBetRequestBody Complex bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeComplexBetAsync(String apiKey, String apiSecret, String apiTicket, ComplexBetRequestBody complexBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<List<BetPlaced>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeComplexBetValidateBeforeCall(apiKey, apiSecret, apiTicket, complexBetRequestBody, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<BetPlaced>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeSingleBet
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param singleBetRequestBody Single bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeSingleBetCall(String apiKey, String apiSecret, String apiTicket, SingleBetRequestBody singleBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleBetRequestBody;

        // create path and map variables
        String localVarPath = "/bet/single";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (apiTicket != null) {
            localVarHeaderParams.put("apiTicket", localVarApiClient.parameterToString(apiTicket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeSingleBetValidateBeforeCall(String apiKey, String apiSecret, String apiTicket, SingleBetRequestBody singleBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling placeSingleBet(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling placeSingleBet(Async)");
        }

        // verify the required parameter 'apiTicket' is set
        if (apiTicket == null) {
            throw new ApiException("Missing the required parameter 'apiTicket' when calling placeSingleBet(Async)");
        }

        // verify the required parameter 'singleBetRequestBody' is set
        if (singleBetRequestBody == null) {
            throw new ApiException("Missing the required parameter 'singleBetRequestBody' when calling placeSingleBet(Async)");
        }

        return placeSingleBetCall(apiKey, apiSecret, apiTicket, singleBetRequestBody, fields, include, exclude, _callback);

    }

    /**
     * Places a single bet
     * Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param singleBetRequestBody Single bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return List&lt;BetPlaced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public List<BetPlaced> placeSingleBet(String apiKey, String apiSecret, String apiTicket, SingleBetRequestBody singleBetRequestBody, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<List<BetPlaced>> localVarResp = placeSingleBetWithHttpInfo(apiKey, apiSecret, apiTicket, singleBetRequestBody, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Places a single bet
     * Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param singleBetRequestBody Single bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return ApiResponse&lt;List&lt;BetPlaced&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BetPlaced>> placeSingleBetWithHttpInfo(String apiKey, String apiSecret, String apiTicket, SingleBetRequestBody singleBetRequestBody, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = placeSingleBetValidateBeforeCall(apiKey, apiSecret, apiTicket, singleBetRequestBody, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<BetPlaced>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Places a single bet (asynchronously)
     * Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param apiTicket The ticket obtained from the sessions API (required)
     * @param singleBetRequestBody Single bet request body (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Delayed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeSingleBetAsync(String apiKey, String apiSecret, String apiTicket, SingleBetRequestBody singleBetRequestBody, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<List<BetPlaced>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeSingleBetValidateBeforeCall(apiKey, apiSecret, apiTicket, singleBetRequestBody, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<BetPlaced>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateBetslip
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param betSlipRequest Betslip Body (required)
     * @param expanded Allows for all bets for given selections to be returned - not just the specified type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateBetslipCall(String apiKey, String apiSecret, BetSlipRequest betSlipRequest, String expanded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = betSlipRequest;

        // create path and map variables
        String localVarPath = "/betslips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expanded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expanded", expanded));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateBetslipValidateBeforeCall(String apiKey, String apiSecret, BetSlipRequest betSlipRequest, String expanded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling validateBetslip(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling validateBetslip(Async)");
        }

        // verify the required parameter 'betSlipRequest' is set
        if (betSlipRequest == null) {
            throw new ApiException("Missing the required parameter 'betSlipRequest' when calling validateBetslip(Async)");
        }

        return validateBetslipCall(apiKey, apiSecret, betSlipRequest, expanded, _callback);

    }

    /**
     * 
     * Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param betSlipRequest Betslip Body (required)
     * @param expanded Allows for all bets for given selections to be returned - not just the specified type (optional)
     * @return BetSlipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BetSlipResponse validateBetslip(String apiKey, String apiSecret, BetSlipRequest betSlipRequest, String expanded) throws ApiException {
        ApiResponse<BetSlipResponse> localVarResp = validateBetslipWithHttpInfo(apiKey, apiSecret, betSlipRequest, expanded);
        return localVarResp.getData();
    }

    /**
     * 
     * Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param betSlipRequest Betslip Body (required)
     * @param expanded Allows for all bets for given selections to be returned - not just the specified type (optional)
     * @return ApiResponse&lt;BetSlipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BetSlipResponse> validateBetslipWithHttpInfo(String apiKey, String apiSecret, BetSlipRequest betSlipRequest, String expanded) throws ApiException {
        okhttp3.Call localVarCall = validateBetslipValidateBeforeCall(apiKey, apiSecret, betSlipRequest, expanded, null);
        Type localVarReturnType = new TypeToken<BetSlipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param betSlipRequest Betslip Body (required)
     * @param expanded Allows for all bets for given selections to be returned - not just the specified type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateBetslipAsync(String apiKey, String apiSecret, BetSlipRequest betSlipRequest, String expanded, final ApiCallback<BetSlipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateBetslipValidateBeforeCall(apiKey, apiSecret, betSlipRequest, expanded, _callback);
        Type localVarReturnType = new TypeToken<BetSlipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
