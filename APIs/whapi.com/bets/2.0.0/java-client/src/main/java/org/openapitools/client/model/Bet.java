/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Leg;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bet {
  public static final String SERIALIZED_NAME_DELAYED_BET_ID = "delayedBetId";
  @SerializedName(SERIALIZED_NAME_DELAYED_BET_ID)
  private String delayedBetId;

  public static final String SERIALIZED_NAME_FREE_BET_ID = "freeBetId";
  @SerializedName(SERIALIZED_NAME_FREE_BET_ID)
  private String freeBetId;

  public static final String SERIALIZED_NAME_LEGS = "legs";
  @SerializedName(SERIALIZED_NAME_LEGS)
  private List<Leg> legs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_STAKE = "stake";
  @SerializedName(SERIALIZED_NAME_STAKE)
  private Double stake;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private String typeCode;

  public Bet() {
  }

  public Bet delayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
    return this;
  }

  /**
   * The delayed bet identifier
   * @return delayedBetId
   */
  @javax.annotation.Nullable
  public String getDelayedBetId() {
    return delayedBetId;
  }

  public void setDelayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
  }


  public Bet freeBetId(String freeBetId) {
    this.freeBetId = freeBetId;
    return this;
  }

  /**
   * The ID number of the free bet token if used in conjunction with this bet
   * @return freeBetId
   */
  @javax.annotation.Nullable
  public String getFreeBetId() {
    return freeBetId;
  }

  public void setFreeBetId(String freeBetId) {
    this.freeBetId = freeBetId;
  }


  public Bet legs(List<Leg> legs) {
    this.legs = legs;
    return this;
  }

  public Bet addLegsItem(Leg legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<>();
    }
    this.legs.add(legsItem);
    return this;
  }

  /**
   * Get legs
   * @return legs
   */
  @javax.annotation.Nonnull
  public List<Leg> getLegs() {
    return legs;
  }

  public void setLegs(List<Leg> legs) {
    this.legs = legs;
  }


  public Bet number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The bet number
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Bet stake(Double stake) {
    this.stake = stake;
    return this;
  }

  /**
   * The amount of the stake placed on the bet
   * @return stake
   */
  @javax.annotation.Nonnull
  public Double getStake() {
    return stake;
  }

  public void setStake(Double stake) {
    this.stake = stake;
  }


  public Bet typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * The bet type code of the bet. For example: TBL (Treble)
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bet bet = (Bet) o;
    return Objects.equals(this.delayedBetId, bet.delayedBetId) &&
        Objects.equals(this.freeBetId, bet.freeBetId) &&
        Objects.equals(this.legs, bet.legs) &&
        Objects.equals(this.number, bet.number) &&
        Objects.equals(this.stake, bet.stake) &&
        Objects.equals(this.typeCode, bet.typeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delayedBetId, freeBetId, legs, number, stake, typeCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bet {\n");
    sb.append("    delayedBetId: ").append(toIndentedString(delayedBetId)).append("\n");
    sb.append("    freeBetId: ").append(toIndentedString(freeBetId)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delayedBetId");
    openapiFields.add("freeBetId");
    openapiFields.add("legs");
    openapiFields.add("number");
    openapiFields.add("stake");
    openapiFields.add("typeCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("legs");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("stake");
    openapiRequiredFields.add("typeCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bet is not found in the empty JSON string", Bet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Bet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delayedBetId") != null && !jsonObj.get("delayedBetId").isJsonNull()) && !jsonObj.get("delayedBetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayedBetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayedBetId").toString()));
      }
      if ((jsonObj.get("freeBetId") != null && !jsonObj.get("freeBetId").isJsonNull()) && !jsonObj.get("freeBetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBetId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("legs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legs` to be an array in the JSON string but got `%s`", jsonObj.get("legs").toString()));
      }

      JsonArray jsonArraylegs = jsonObj.getAsJsonArray("legs");
      // validate the required field `legs` (array)
      for (int i = 0; i < jsonArraylegs.size(); i++) {
        Leg.validateJsonElement(jsonArraylegs.get(i));
      };
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bet.class));

       return (TypeAdapter<T>) new TypeAdapter<Bet>() {
           @Override
           public void write(JsonWriter out, Bet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bet
   * @throws IOException if the JSON string is invalid with respect to Bet
   */
  public static Bet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bet.class);
  }

  /**
   * Convert an instance of Bet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

