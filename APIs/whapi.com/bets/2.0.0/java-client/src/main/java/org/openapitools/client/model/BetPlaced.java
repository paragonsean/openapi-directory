/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BetPlaced
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BetPlaced {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUM_LINES = "numLines";
  @SerializedName(SERIALIZED_NAME_NUM_LINES)
  private Integer numLines;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private BigDecimal number;

  public static final String SERIALIZED_NAME_PLACED_DATE_TIME = "placedDateTime";
  @SerializedName(SERIALIZED_NAME_PLACED_DATE_TIME)
  private String placedDateTime;

  public static final String SERIALIZED_NAME_RECEIPT = "receipt";
  @SerializedName(SERIALIZED_NAME_RECEIPT)
  private String receipt;

  public static final String SERIALIZED_NAME_TOTAL_STAKE = "totalStake";
  @SerializedName(SERIALIZED_NAME_TOTAL_STAKE)
  private Double totalStake;

  public BetPlaced() {
  }

  public BetPlaced id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The bet id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BetPlaced numLines(Integer numLines) {
    this.numLines = numLines;
    return this;
  }

  /**
   * The number of lines the bet consists of
   * @return numLines
   */
  @javax.annotation.Nullable
  public Integer getNumLines() {
    return numLines;
  }

  public void setNumLines(Integer numLines) {
    this.numLines = numLines;
  }


  public BetPlaced number(BigDecimal number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the bet if this is part of a multiple bet
   * @return number
   */
  @javax.annotation.Nullable
  public BigDecimal getNumber() {
    return number;
  }

  public void setNumber(BigDecimal number) {
    this.number = number;
  }


  public BetPlaced placedDateTime(String placedDateTime) {
    this.placedDateTime = placedDateTime;
    return this;
  }

  /**
   * The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.
   * @return placedDateTime
   */
  @javax.annotation.Nullable
  public String getPlacedDateTime() {
    return placedDateTime;
  }

  public void setPlacedDateTime(String placedDateTime) {
    this.placedDateTime = placedDateTime;
  }


  public BetPlaced receipt(String receipt) {
    this.receipt = receipt;
    return this;
  }

  /**
   * The unique ID of the bet receipt
   * @return receipt
   */
  @javax.annotation.Nonnull
  public String getReceipt() {
    return receipt;
  }

  public void setReceipt(String receipt) {
    this.receipt = receipt;
  }


  public BetPlaced totalStake(Double totalStake) {
    this.totalStake = totalStake;
    return this;
  }

  /**
   * The total amount staked on the bet
   * @return totalStake
   */
  @javax.annotation.Nullable
  public Double getTotalStake() {
    return totalStake;
  }

  public void setTotalStake(Double totalStake) {
    this.totalStake = totalStake;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BetPlaced betPlaced = (BetPlaced) o;
    return Objects.equals(this.id, betPlaced.id) &&
        Objects.equals(this.numLines, betPlaced.numLines) &&
        Objects.equals(this.number, betPlaced.number) &&
        Objects.equals(this.placedDateTime, betPlaced.placedDateTime) &&
        Objects.equals(this.receipt, betPlaced.receipt) &&
        Objects.equals(this.totalStake, betPlaced.totalStake);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, numLines, number, placedDateTime, receipt, totalStake);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BetPlaced {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    numLines: ").append(toIndentedString(numLines)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    placedDateTime: ").append(toIndentedString(placedDateTime)).append("\n");
    sb.append("    receipt: ").append(toIndentedString(receipt)).append("\n");
    sb.append("    totalStake: ").append(toIndentedString(totalStake)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("numLines");
    openapiFields.add("number");
    openapiFields.add("placedDateTime");
    openapiFields.add("receipt");
    openapiFields.add("totalStake");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("receipt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BetPlaced
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BetPlaced.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BetPlaced is not found in the empty JSON string", BetPlaced.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BetPlaced.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BetPlaced` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BetPlaced.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("placedDateTime") != null && !jsonObj.get("placedDateTime").isJsonNull()) && !jsonObj.get("placedDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placedDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placedDateTime").toString()));
      }
      if (!jsonObj.get("receipt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BetPlaced.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BetPlaced' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BetPlaced> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BetPlaced.class));

       return (TypeAdapter<T>) new TypeAdapter<BetPlaced>() {
           @Override
           public void write(JsonWriter out, BetPlaced value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BetPlaced read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BetPlaced given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BetPlaced
   * @throws IOException if the JSON string is invalid with respect to BetPlaced
   */
  public static BetPlaced fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BetPlaced.class);
  }

  /**
   * Convert an instance of BetPlaced to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

