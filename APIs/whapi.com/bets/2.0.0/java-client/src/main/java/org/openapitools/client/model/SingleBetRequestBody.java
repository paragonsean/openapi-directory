/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SingleBetRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleBetRequestBody {
  public static final String SERIALIZED_NAME_DELAYED_BET_ID = "delayedBetId";
  @SerializedName(SERIALIZED_NAME_DELAYED_BET_ID)
  private String delayedBetId;

  public static final String SERIALIZED_NAME_FREE_BET_ID = "freeBetId";
  @SerializedName(SERIALIZED_NAME_FREE_BET_ID)
  private String freeBetId;

  public static final String SERIALIZED_NAME_PRICE_DEN = "priceDen";
  @SerializedName(SERIALIZED_NAME_PRICE_DEN)
  private Integer priceDen;

  public static final String SERIALIZED_NAME_PRICE_NUM = "priceNum";
  @SerializedName(SERIALIZED_NAME_PRICE_NUM)
  private Integer priceNum;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "priceType";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private String priceType;

  public static final String SERIALIZED_NAME_SELECTION_ID = "selectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private String selectionId;

  public static final String SERIALIZED_NAME_STAKE = "stake";
  @SerializedName(SERIALIZED_NAME_STAKE)
  private Double stake;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SingleBetRequestBody() {
  }

  public SingleBetRequestBody delayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
    return this;
  }

  /**
   * The delayed bet identifier
   * @return delayedBetId
   */
  @javax.annotation.Nullable
  public String getDelayedBetId() {
    return delayedBetId;
  }

  public void setDelayedBetId(String delayedBetId) {
    this.delayedBetId = delayedBetId;
  }


  public SingleBetRequestBody freeBetId(String freeBetId) {
    this.freeBetId = freeBetId;
    return this;
  }

  /**
   * The ID number of the free bet token if used in conjunction with this bet
   * @return freeBetId
   */
  @javax.annotation.Nullable
  public String getFreeBetId() {
    return freeBetId;
  }

  public void setFreeBetId(String freeBetId) {
    this.freeBetId = freeBetId;
  }


  public SingleBetRequestBody priceDen(Integer priceDen) {
    this.priceDen = priceDen;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
   * @return priceDen
   */
  @javax.annotation.Nullable
  public Integer getPriceDen() {
    return priceDen;
  }

  public void setPriceDen(Integer priceDen) {
    this.priceDen = priceDen;
  }


  public SingleBetRequestBody priceNum(Integer priceNum) {
    this.priceNum = priceNum;
    return this;
  }

  /**
   * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
   * @return priceNum
   */
  @javax.annotation.Nullable
  public Integer getPriceNum() {
    return priceNum;
  }

  public void setPriceNum(Integer priceNum) {
    this.priceNum = priceNum;
  }


  public SingleBetRequestBody priceType(String priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.
   * @return priceType
   */
  @javax.annotation.Nonnull
  public String getPriceType() {
    return priceType;
  }

  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }


  public SingleBetRequestBody selectionId(String selectionId) {
    this.selectionId = selectionId;
    return this;
  }

  /**
   * The unique ID for the selection of the bet
   * @return selectionId
   */
  @javax.annotation.Nonnull
  public String getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(String selectionId) {
    this.selectionId = selectionId;
  }


  public SingleBetRequestBody stake(Double stake) {
    this.stake = stake;
    return this;
  }

  /**
   * The amount of the stake placed on the bet
   * @return stake
   */
  @javax.annotation.Nonnull
  public Double getStake() {
    return stake;
  }

  public void setStake(Double stake) {
    this.stake = stake;
  }


  public SingleBetRequestBody type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of bet placed. Can be one of the following: W - Win or E- EachWay
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleBetRequestBody singleBetRequestBody = (SingleBetRequestBody) o;
    return Objects.equals(this.delayedBetId, singleBetRequestBody.delayedBetId) &&
        Objects.equals(this.freeBetId, singleBetRequestBody.freeBetId) &&
        Objects.equals(this.priceDen, singleBetRequestBody.priceDen) &&
        Objects.equals(this.priceNum, singleBetRequestBody.priceNum) &&
        Objects.equals(this.priceType, singleBetRequestBody.priceType) &&
        Objects.equals(this.selectionId, singleBetRequestBody.selectionId) &&
        Objects.equals(this.stake, singleBetRequestBody.stake) &&
        Objects.equals(this.type, singleBetRequestBody.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delayedBetId, freeBetId, priceDen, priceNum, priceType, selectionId, stake, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleBetRequestBody {\n");
    sb.append("    delayedBetId: ").append(toIndentedString(delayedBetId)).append("\n");
    sb.append("    freeBetId: ").append(toIndentedString(freeBetId)).append("\n");
    sb.append("    priceDen: ").append(toIndentedString(priceDen)).append("\n");
    sb.append("    priceNum: ").append(toIndentedString(priceNum)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delayedBetId");
    openapiFields.add("freeBetId");
    openapiFields.add("priceDen");
    openapiFields.add("priceNum");
    openapiFields.add("priceType");
    openapiFields.add("selectionId");
    openapiFields.add("stake");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("priceType");
    openapiRequiredFields.add("selectionId");
    openapiRequiredFields.add("stake");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleBetRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleBetRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleBetRequestBody is not found in the empty JSON string", SingleBetRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleBetRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleBetRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleBetRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delayedBetId") != null && !jsonObj.get("delayedBetId").isJsonNull()) && !jsonObj.get("delayedBetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delayedBetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delayedBetId").toString()));
      }
      if ((jsonObj.get("freeBetId") != null && !jsonObj.get("freeBetId").isJsonNull()) && !jsonObj.get("freeBetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBetId").toString()));
      }
      if (!jsonObj.get("priceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceType").toString()));
      }
      if (!jsonObj.get("selectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleBetRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleBetRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleBetRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleBetRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleBetRequestBody>() {
           @Override
           public void write(JsonWriter out, SingleBetRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleBetRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleBetRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleBetRequestBody
   * @throws IOException if the JSON string is invalid with respect to SingleBetRequestBody
   */
  public static SingleBetRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleBetRequestBody.class);
  }

  /**
   * Convert an instance of SingleBetRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

