/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FreeBetDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:46.039338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FreeBetDetail {
  public static final String SERIALIZED_NAME_AWARD_DATE_TIME = "awardDateTime";
  @SerializedName(SERIALIZED_NAME_AWARD_DATE_TIME)
  private String awardDateTime;

  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "displayText";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_EXPIRY_DATE_TIME = "expiryDateTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_TIME)
  private String expiryDateTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OFFER_DESC = "offerDesc";
  @SerializedName(SERIALIZED_NAME_OFFER_DESC)
  private String offerDesc;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private Integer offerId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public FreeBetDetail() {
  }

  public FreeBetDetail awardDateTime(String awardDateTime) {
    this.awardDateTime = awardDateTime;
    return this;
  }

  /**
   * The time the free bet was awarded. For example 2014-11-013T23:59:10
   * @return awardDateTime
   */
  @javax.annotation.Nullable
  public String getAwardDateTime() {
    return awardDateTime;
  }

  public void setAwardDateTime(String awardDateTime) {
    this.awardDateTime = awardDateTime;
  }


  public FreeBetDetail displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

  /**
   * The message explaining the offer displayed to the customer along with the free bet
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }


  public FreeBetDetail expiryDateTime(String expiryDateTime) {
    this.expiryDateTime = expiryDateTime;
    return this;
  }

  /**
   * The time the free bet expired. For example 2014-11-013T23:59:10
   * @return expiryDateTime
   */
  @javax.annotation.Nullable
  public String getExpiryDateTime() {
    return expiryDateTime;
  }

  public void setExpiryDateTime(String expiryDateTime) {
    this.expiryDateTime = expiryDateTime;
  }


  public FreeBetDetail id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the free bet
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public FreeBetDetail offerDesc(String offerDesc) {
    this.offerDesc = offerDesc;
    return this;
  }

  /**
   * The description of the offer that enabled the customer to place a free bet
   * @return offerDesc
   */
  @javax.annotation.Nullable
  public String getOfferDesc() {
    return offerDesc;
  }

  public void setOfferDesc(String offerDesc) {
    this.offerDesc = offerDesc;
  }


  public FreeBetDetail offerId(Integer offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * The identifier of the offer
   * @return offerId
   */
  @javax.annotation.Nullable
  public Integer getOfferId() {
    return offerId;
  }

  public void setOfferId(Integer offerId) {
    this.offerId = offerId;
  }


  public FreeBetDetail offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * The name of the offer that enabled the customer to place a free bet
   * @return offerName
   */
  @javax.annotation.Nonnull
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public FreeBetDetail startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * The time the free bet offer started. For example 2014-11-013T23:59:10
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public FreeBetDetail value(BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the free bet
   * @return value
   */
  @javax.annotation.Nonnull
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreeBetDetail freeBetDetail = (FreeBetDetail) o;
    return Objects.equals(this.awardDateTime, freeBetDetail.awardDateTime) &&
        Objects.equals(this.displayText, freeBetDetail.displayText) &&
        Objects.equals(this.expiryDateTime, freeBetDetail.expiryDateTime) &&
        Objects.equals(this.id, freeBetDetail.id) &&
        Objects.equals(this.offerDesc, freeBetDetail.offerDesc) &&
        Objects.equals(this.offerId, freeBetDetail.offerId) &&
        Objects.equals(this.offerName, freeBetDetail.offerName) &&
        Objects.equals(this.startDateTime, freeBetDetail.startDateTime) &&
        Objects.equals(this.value, freeBetDetail.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awardDateTime, displayText, expiryDateTime, id, offerDesc, offerId, offerName, startDateTime, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreeBetDetail {\n");
    sb.append("    awardDateTime: ").append(toIndentedString(awardDateTime)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    expiryDateTime: ").append(toIndentedString(expiryDateTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offerDesc: ").append(toIndentedString(offerDesc)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awardDateTime");
    openapiFields.add("displayText");
    openapiFields.add("expiryDateTime");
    openapiFields.add("id");
    openapiFields.add("offerDesc");
    openapiFields.add("offerId");
    openapiFields.add("offerName");
    openapiFields.add("startDateTime");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("offerName");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FreeBetDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FreeBetDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FreeBetDetail is not found in the empty JSON string", FreeBetDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FreeBetDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FreeBetDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FreeBetDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awardDateTime") != null && !jsonObj.get("awardDateTime").isJsonNull()) && !jsonObj.get("awardDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awardDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awardDateTime").toString()));
      }
      if ((jsonObj.get("displayText") != null && !jsonObj.get("displayText").isJsonNull()) && !jsonObj.get("displayText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayText").toString()));
      }
      if ((jsonObj.get("expiryDateTime") != null && !jsonObj.get("expiryDateTime").isJsonNull()) && !jsonObj.get("expiryDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDateTime").toString()));
      }
      if ((jsonObj.get("offerDesc") != null && !jsonObj.get("offerDesc").isJsonNull()) && !jsonObj.get("offerDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerDesc").toString()));
      }
      if (!jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      if ((jsonObj.get("startDateTime") != null && !jsonObj.get("startDateTime").isJsonNull()) && !jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FreeBetDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FreeBetDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FreeBetDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FreeBetDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<FreeBetDetail>() {
           @Override
           public void write(JsonWriter out, FreeBetDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FreeBetDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FreeBetDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FreeBetDetail
   * @throws IOException if the JSON string is invalid with respect to FreeBetDetail
   */
  public static FreeBetDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FreeBetDetail.class);
  }

  /**
   * Convert an instance of FreeBetDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

