/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlacedBetLeg;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PlacedBet
 */
public class PlacedBetTest {
    private final PlacedBet model = new PlacedBet();

    /**
     * Model tests for PlacedBet
     */
    @Test
    public void testPlacedBet() {
        // TODO: test PlacedBet
    }

    /**
     * Test the property 'cashinValue'
     */
    @Test
    public void cashinValueTest() {
        // TODO: test cashinValue
    }

    /**
     * Test the property 'estimatedReturns'
     */
    @Test
    public void estimatedReturnsTest() {
        // TODO: test estimatedReturns
    }

    /**
     * Test the property 'freeBetValue'
     */
    @Test
    public void freeBetValueTest() {
        // TODO: test freeBetValue
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'legs'
     */
    @Test
    public void legsTest() {
        // TODO: test legs
    }

    /**
     * Test the property 'numLines'
     */
    @Test
    public void numLinesTest() {
        // TODO: test numLines
    }

    /**
     * Test the property 'numSelections'
     */
    @Test
    public void numSelectionsTest() {
        // TODO: test numSelections
    }

    /**
     * Test the property 'receipt'
     */
    @Test
    public void receiptTest() {
        // TODO: test receipt
    }

    /**
     * Test the property 'settled'
     */
    @Test
    public void settledTest() {
        // TODO: test settled
    }

    /**
     * Test the property 'stake'
     */
    @Test
    public void stakeTest() {
        // TODO: test stake
    }

    /**
     * Test the property 'stakePerLine'
     */
    @Test
    public void stakePerLineTest() {
        // TODO: test stakePerLine
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'transDateTime'
     */
    @Test
    public void transDateTimeTest() {
        // TODO: test transDateTime
    }

    /**
     * Test the property 'typeCode'
     */
    @Test
    public void typeCodeTest() {
        // TODO: test typeCode
    }

    /**
     * Test the property 'typeName'
     */
    @Test
    public void typeNameTest() {
        // TODO: test typeName
    }

    /**
     * Test the property 'winnings'
     */
    @Test
    public void winningsTest() {
        // TODO: test winnings
    }

}
