/*
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BetDelayed;
import org.openapitools.client.model.BetHistoryResponse;
import org.openapitools.client.model.BetPlaced;
import org.openapitools.client.model.BetSlipRequest;
import org.openapitools.client.model.BetSlipResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CashInResponse;
import org.openapitools.client.model.ComplexBetRequestBody;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.FreeBetDetail;
import org.openapitools.client.model.SingleBetRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BetsApi
 */
@Disabled
public class BetsApiTest {

    private final BetsApi api = new BetsApi();

    /**
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
     *
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cashinTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        String apiTicket = null;
        String betId = null;
        Double cashInValue = null;
        String cashinBetDelayId = null;
        CashInResponse response = api.cashin(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId);
        // TODO: test validations
    }

    /**
     * Retrieves the customer’s bet history.
     *
     * Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBetHistoryTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        String apiTicket = null;
        String dateFrom = null;
        String dateTo = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        BigDecimal page = null;
        BigDecimal pageSize = null;
        String sort = null;
        Boolean settled = null;
        BetHistoryResponse response = api.getBetHistory(apiKey, apiSecret, apiTicket, dateFrom, dateTo, fields, include, exclude, page, pageSize, sort, settled);
        // TODO: test validations
    }

    /**
     * Returns available free bets
     *
     * Retrieves the current free bets available for a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFreeBetsTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        String apiTicket = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        List<FreeBetDetail> response = api.getFreeBets(apiKey, apiSecret, apiTicket, fields, include, exclude);
        // TODO: test validations
    }

    /**
     * Places a multiple or a complex bet.
     *
     * Places a multiple or a complex bet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeComplexBetTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        String apiTicket = null;
        ComplexBetRequestBody complexBetRequestBody = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        List<BetPlaced> response = api.placeComplexBet(apiKey, apiSecret, apiTicket, complexBetRequestBody, fields, include, exclude);
        // TODO: test validations
    }

    /**
     * Places a single bet
     *
     * Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeSingleBetTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        String apiTicket = null;
        SingleBetRequestBody singleBetRequestBody = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        List<BetPlaced> response = api.placeSingleBet(apiKey, apiSecret, apiTicket, singleBetRequestBody, fields, include, exclude);
        // TODO: test validations
    }

    /**
     * Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateBetslipTest() throws ApiException {
        String apiKey = null;
        String apiSecret = null;
        BetSlipRequest betSlipRequest = null;
        String expanded = null;
        BetSlipResponse response = api.validateBetslip(apiKey, apiSecret, betSlipRequest, expanded);
        // TODO: test validations
    }

}
