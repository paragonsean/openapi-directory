/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISolution.h
 *
 * 
 */

#ifndef OAISolution_H
#define OAISolution_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISolution : public OAIObject {
public:
    OAISolution();
    OAISolution(QString json);
    ~OAISolution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBetNum() const;
    void setBetNum(const QString &bet_num);
    bool is_bet_num_Set() const;
    bool is_bet_num_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getHandicap() const;
    void setHandicap(const QString &handicap);
    bool is_handicap_Set() const;
    bool is_handicap_Valid() const;

    QString getHandicapPrecision() const;
    void setHandicapPrecision(const QString &handicap_precision);
    bool is_handicap_precision_Set() const;
    bool is_handicap_precision_Valid() const;

    QString getPriceDen() const;
    void setPriceDen(const QString &price_den);
    bool is_price_den_Set() const;
    bool is_price_den_Valid() const;

    QString getPriceNum() const;
    void setPriceNum(const QString &price_num);
    bool is_price_num_Set() const;
    bool is_price_num_Valid() const;

    QString getSelectionHandicap() const;
    void setSelectionHandicap(const QString &selection_handicap);
    bool is_selection_handicap_Set() const;
    bool is_selection_handicap_Valid() const;

    QString getSelectionId() const;
    void setSelectionId(const QString &selection_id);
    bool is_selection_id_Set() const;
    bool is_selection_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bet_num;
    bool m_bet_num_isSet;
    bool m_bet_num_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_handicap;
    bool m_handicap_isSet;
    bool m_handicap_isValid;

    QString m_handicap_precision;
    bool m_handicap_precision_isSet;
    bool m_handicap_precision_isValid;

    QString m_price_den;
    bool m_price_den_isSet;
    bool m_price_den_isValid;

    QString m_price_num;
    bool m_price_num_isSet;
    bool m_price_num_isValid;

    QString m_selection_handicap;
    bool m_selection_handicap_isSet;
    bool m_selection_handicap_isValid;

    QString m_selection_id;
    bool m_selection_id_isSet;
    bool m_selection_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISolution)

#endif // OAISolution_H
