/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplexBetRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplexBetRequestBody::OAIComplexBetRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplexBetRequestBody::OAIComplexBetRequestBody() {
    this->initializeModel();
}

OAIComplexBetRequestBody::~OAIComplexBetRequestBody() {}

void OAIComplexBetRequestBody::initializeModel() {

    m_bets_isSet = false;
    m_bets_isValid = false;
}

void OAIComplexBetRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplexBetRequestBody::fromJsonObject(QJsonObject json) {

    m_bets_isValid = ::OpenAPI::fromJsonValue(m_bets, json[QString("bets")]);
    m_bets_isSet = !json[QString("bets")].isNull() && m_bets_isValid;
}

QString OAIComplexBetRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplexBetRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_bets.size() > 0) {
        obj.insert(QString("bets"), ::OpenAPI::toJsonValue(m_bets));
    }
    return obj;
}

QList<OAIBet> OAIComplexBetRequestBody::getBets() const {
    return m_bets;
}
void OAIComplexBetRequestBody::setBets(const QList<OAIBet> &bets) {
    m_bets = bets;
    m_bets_isSet = true;
}

bool OAIComplexBetRequestBody::is_bets_Set() const{
    return m_bets_isSet;
}

bool OAIComplexBetRequestBody::is_bets_Valid() const{
    return m_bets_isValid;
}

bool OAIComplexBetRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplexBetRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
