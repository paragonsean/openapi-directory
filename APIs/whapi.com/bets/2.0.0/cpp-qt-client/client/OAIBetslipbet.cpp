/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetslipbet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetslipbet::OAIBetslipbet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetslipbet::OAIBetslipbet() {
    this->initializeModel();
}

OAIBetslipbet::~OAIBetslipbet() {}

void OAIBetslipbet::initializeModel() {

    m_bet_multiplier_isSet = false;
    m_bet_multiplier_isValid = false;

    m_free_bets_isSet = false;
    m_free_bets_isValid = false;

    m_legs_isSet = false;
    m_legs_isValid = false;

    m_max_stake_isSet = false;
    m_max_stake_isValid = false;

    m_min_stake_isSet = false;
    m_min_stake_isValid = false;

    m_num_lines_isSet = false;
    m_num_lines_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_code_isSet = false;
    m_type_code_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIBetslipbet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetslipbet::fromJsonObject(QJsonObject json) {

    m_bet_multiplier_isValid = ::OpenAPI::fromJsonValue(m_bet_multiplier, json[QString("betMultiplier")]);
    m_bet_multiplier_isSet = !json[QString("betMultiplier")].isNull() && m_bet_multiplier_isValid;

    m_free_bets_isValid = ::OpenAPI::fromJsonValue(m_free_bets, json[QString("freeBets")]);
    m_free_bets_isSet = !json[QString("freeBets")].isNull() && m_free_bets_isValid;

    m_legs_isValid = ::OpenAPI::fromJsonValue(m_legs, json[QString("legs")]);
    m_legs_isSet = !json[QString("legs")].isNull() && m_legs_isValid;

    m_max_stake_isValid = ::OpenAPI::fromJsonValue(m_max_stake, json[QString("maxStake")]);
    m_max_stake_isSet = !json[QString("maxStake")].isNull() && m_max_stake_isValid;

    m_min_stake_isValid = ::OpenAPI::fromJsonValue(m_min_stake, json[QString("minStake")]);
    m_min_stake_isSet = !json[QString("minStake")].isNull() && m_min_stake_isValid;

    m_num_lines_isValid = ::OpenAPI::fromJsonValue(m_num_lines, json[QString("numLines")]);
    m_num_lines_isSet = !json[QString("numLines")].isNull() && m_num_lines_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_code_isValid = ::OpenAPI::fromJsonValue(m_type_code, json[QString("typeCode")]);
    m_type_code_isSet = !json[QString("typeCode")].isNull() && m_type_code_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;
}

QString OAIBetslipbet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetslipbet::asJsonObject() const {
    QJsonObject obj;
    if (m_bet_multiplier_isSet) {
        obj.insert(QString("betMultiplier"), ::OpenAPI::toJsonValue(m_bet_multiplier));
    }
    if (m_free_bets.size() > 0) {
        obj.insert(QString("freeBets"), ::OpenAPI::toJsonValue(m_free_bets));
    }
    if (m_legs.size() > 0) {
        obj.insert(QString("legs"), ::OpenAPI::toJsonValue(m_legs));
    }
    if (m_max_stake_isSet) {
        obj.insert(QString("maxStake"), ::OpenAPI::toJsonValue(m_max_stake));
    }
    if (m_min_stake_isSet) {
        obj.insert(QString("minStake"), ::OpenAPI::toJsonValue(m_min_stake));
    }
    if (m_num_lines_isSet) {
        obj.insert(QString("numLines"), ::OpenAPI::toJsonValue(m_num_lines));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_code_isSet) {
        obj.insert(QString("typeCode"), ::OpenAPI::toJsonValue(m_type_code));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

double OAIBetslipbet::getBetMultiplier() const {
    return m_bet_multiplier;
}
void OAIBetslipbet::setBetMultiplier(const double &bet_multiplier) {
    m_bet_multiplier = bet_multiplier;
    m_bet_multiplier_isSet = true;
}

bool OAIBetslipbet::is_bet_multiplier_Set() const{
    return m_bet_multiplier_isSet;
}

bool OAIBetslipbet::is_bet_multiplier_Valid() const{
    return m_bet_multiplier_isValid;
}

QList<OAIFreeBetDetail> OAIBetslipbet::getFreeBets() const {
    return m_free_bets;
}
void OAIBetslipbet::setFreeBets(const QList<OAIFreeBetDetail> &free_bets) {
    m_free_bets = free_bets;
    m_free_bets_isSet = true;
}

bool OAIBetslipbet::is_free_bets_Set() const{
    return m_free_bets_isSet;
}

bool OAIBetslipbet::is_free_bets_Valid() const{
    return m_free_bets_isValid;
}

QList<OAIBetslipleg> OAIBetslipbet::getLegs() const {
    return m_legs;
}
void OAIBetslipbet::setLegs(const QList<OAIBetslipleg> &legs) {
    m_legs = legs;
    m_legs_isSet = true;
}

bool OAIBetslipbet::is_legs_Set() const{
    return m_legs_isSet;
}

bool OAIBetslipbet::is_legs_Valid() const{
    return m_legs_isValid;
}

double OAIBetslipbet::getMaxStake() const {
    return m_max_stake;
}
void OAIBetslipbet::setMaxStake(const double &max_stake) {
    m_max_stake = max_stake;
    m_max_stake_isSet = true;
}

bool OAIBetslipbet::is_max_stake_Set() const{
    return m_max_stake_isSet;
}

bool OAIBetslipbet::is_max_stake_Valid() const{
    return m_max_stake_isValid;
}

double OAIBetslipbet::getMinStake() const {
    return m_min_stake;
}
void OAIBetslipbet::setMinStake(const double &min_stake) {
    m_min_stake = min_stake;
    m_min_stake_isSet = true;
}

bool OAIBetslipbet::is_min_stake_Set() const{
    return m_min_stake_isSet;
}

bool OAIBetslipbet::is_min_stake_Valid() const{
    return m_min_stake_isValid;
}

double OAIBetslipbet::getNumLines() const {
    return m_num_lines;
}
void OAIBetslipbet::setNumLines(const double &num_lines) {
    m_num_lines = num_lines;
    m_num_lines_isSet = true;
}

bool OAIBetslipbet::is_num_lines_Set() const{
    return m_num_lines_isSet;
}

bool OAIBetslipbet::is_num_lines_Valid() const{
    return m_num_lines_isValid;
}

qint32 OAIBetslipbet::getNumber() const {
    return m_number;
}
void OAIBetslipbet::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIBetslipbet::is_number_Set() const{
    return m_number_isSet;
}

bool OAIBetslipbet::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIBetslipbet::getTypeCode() const {
    return m_type_code;
}
void OAIBetslipbet::setTypeCode(const QString &type_code) {
    m_type_code = type_code;
    m_type_code_isSet = true;
}

bool OAIBetslipbet::is_type_code_Set() const{
    return m_type_code_isSet;
}

bool OAIBetslipbet::is_type_code_Valid() const{
    return m_type_code_isValid;
}

QString OAIBetslipbet::getTypeName() const {
    return m_type_name;
}
void OAIBetslipbet::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIBetslipbet::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIBetslipbet::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIBetslipbet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bet_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_stake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_stake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetslipbet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_legs_isValid && m_number_isValid && m_type_code_isValid && true;
}

} // namespace OpenAPI
