/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetDelayed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetDelayed::OAIBetDelayed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetDelayed::OAIBetDelayed() {
    this->initializeModel();
}

OAIBetDelayed::~OAIBetDelayed() {}

void OAIBetDelayed::initializeModel() {

    m_delay_period_seconds_isSet = false;
    m_delay_period_seconds_isValid = false;

    m_delayed_bet_id_isSet = false;
    m_delayed_bet_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;
}

void OAIBetDelayed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetDelayed::fromJsonObject(QJsonObject json) {

    m_delay_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_delay_period_seconds, json[QString("delayPeriodSeconds")]);
    m_delay_period_seconds_isSet = !json[QString("delayPeriodSeconds")].isNull() && m_delay_period_seconds_isValid;

    m_delayed_bet_id_isValid = ::OpenAPI::fromJsonValue(m_delayed_bet_id, json[QString("delayedBetId")]);
    m_delayed_bet_id_isSet = !json[QString("delayedBetId")].isNull() && m_delayed_bet_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;
}

QString OAIBetDelayed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetDelayed::asJsonObject() const {
    QJsonObject obj;
    if (m_delay_period_seconds_isSet) {
        obj.insert(QString("delayPeriodSeconds"), ::OpenAPI::toJsonValue(m_delay_period_seconds));
    }
    if (m_delayed_bet_id_isSet) {
        obj.insert(QString("delayedBetId"), ::OpenAPI::toJsonValue(m_delayed_bet_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    return obj;
}

qint32 OAIBetDelayed::getDelayPeriodSeconds() const {
    return m_delay_period_seconds;
}
void OAIBetDelayed::setDelayPeriodSeconds(const qint32 &delay_period_seconds) {
    m_delay_period_seconds = delay_period_seconds;
    m_delay_period_seconds_isSet = true;
}

bool OAIBetDelayed::is_delay_period_seconds_Set() const{
    return m_delay_period_seconds_isSet;
}

bool OAIBetDelayed::is_delay_period_seconds_Valid() const{
    return m_delay_period_seconds_isValid;
}

QString OAIBetDelayed::getDelayedBetId() const {
    return m_delayed_bet_id;
}
void OAIBetDelayed::setDelayedBetId(const QString &delayed_bet_id) {
    m_delayed_bet_id = delayed_bet_id;
    m_delayed_bet_id_isSet = true;
}

bool OAIBetDelayed::is_delayed_bet_id_Set() const{
    return m_delayed_bet_id_isSet;
}

bool OAIBetDelayed::is_delayed_bet_id_Valid() const{
    return m_delayed_bet_id_isValid;
}

QString OAIBetDelayed::getId() const {
    return m_id;
}
void OAIBetDelayed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBetDelayed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBetDelayed::is_id_Valid() const{
    return m_id_isValid;
}

double OAIBetDelayed::getNumber() const {
    return m_number;
}
void OAIBetDelayed::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIBetDelayed::is_number_Set() const{
    return m_number_isSet;
}

bool OAIBetDelayed::is_number_Valid() const{
    return m_number_isValid;
}

bool OAIBetDelayed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delay_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delayed_bet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetDelayed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delay_period_seconds_isValid && m_delayed_bet_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
