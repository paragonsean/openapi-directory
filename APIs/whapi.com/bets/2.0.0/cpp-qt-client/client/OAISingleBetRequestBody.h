/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISingleBetRequestBody.h
 *
 * 
 */

#ifndef OAISingleBetRequestBody_H
#define OAISingleBetRequestBody_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISingleBetRequestBody : public OAIObject {
public:
    OAISingleBetRequestBody();
    OAISingleBetRequestBody(QString json);
    ~OAISingleBetRequestBody() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDelayedBetId() const;
    void setDelayedBetId(const QString &delayed_bet_id);
    bool is_delayed_bet_id_Set() const;
    bool is_delayed_bet_id_Valid() const;

    QString getFreeBetId() const;
    void setFreeBetId(const QString &free_bet_id);
    bool is_free_bet_id_Set() const;
    bool is_free_bet_id_Valid() const;

    qint32 getPriceDen() const;
    void setPriceDen(const qint32 &price_den);
    bool is_price_den_Set() const;
    bool is_price_den_Valid() const;

    qint32 getPriceNum() const;
    void setPriceNum(const qint32 &price_num);
    bool is_price_num_Set() const;
    bool is_price_num_Valid() const;

    QString getPriceType() const;
    void setPriceType(const QString &price_type);
    bool is_price_type_Set() const;
    bool is_price_type_Valid() const;

    QString getSelectionId() const;
    void setSelectionId(const QString &selection_id);
    bool is_selection_id_Set() const;
    bool is_selection_id_Valid() const;

    double getStake() const;
    void setStake(const double &stake);
    bool is_stake_Set() const;
    bool is_stake_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_delayed_bet_id;
    bool m_delayed_bet_id_isSet;
    bool m_delayed_bet_id_isValid;

    QString m_free_bet_id;
    bool m_free_bet_id_isSet;
    bool m_free_bet_id_isValid;

    qint32 m_price_den;
    bool m_price_den_isSet;
    bool m_price_den_isValid;

    qint32 m_price_num;
    bool m_price_num_isSet;
    bool m_price_num_isValid;

    QString m_price_type;
    bool m_price_type_isSet;
    bool m_price_type_isValid;

    QString m_selection_id;
    bool m_selection_id_isSet;
    bool m_selection_id_isValid;

    double m_stake;
    bool m_stake_isSet;
    bool m_stake_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISingleBetRequestBody)

#endif // OAISingleBetRequestBody_H
