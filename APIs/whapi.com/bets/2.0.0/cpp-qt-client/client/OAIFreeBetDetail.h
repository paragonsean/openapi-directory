/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFreeBetDetail.h
 *
 * 
 */

#ifndef OAIFreeBetDetail_H
#define OAIFreeBetDetail_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFreeBetDetail : public OAIObject {
public:
    OAIFreeBetDetail();
    OAIFreeBetDetail(QString json);
    ~OAIFreeBetDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAwardDateTime() const;
    void setAwardDateTime(const QString &award_date_time);
    bool is_award_date_time_Set() const;
    bool is_award_date_time_Valid() const;

    QString getDisplayText() const;
    void setDisplayText(const QString &display_text);
    bool is_display_text_Set() const;
    bool is_display_text_Valid() const;

    QString getExpiryDateTime() const;
    void setExpiryDateTime(const QString &expiry_date_time);
    bool is_expiry_date_time_Set() const;
    bool is_expiry_date_time_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOfferDesc() const;
    void setOfferDesc(const QString &offer_desc);
    bool is_offer_desc_Set() const;
    bool is_offer_desc_Valid() const;

    qint32 getOfferId() const;
    void setOfferId(const qint32 &offer_id);
    bool is_offer_id_Set() const;
    bool is_offer_id_Valid() const;

    QString getOfferName() const;
    void setOfferName(const QString &offer_name);
    bool is_offer_name_Set() const;
    bool is_offer_name_Valid() const;

    QString getStartDateTime() const;
    void setStartDateTime(const QString &start_date_time);
    bool is_start_date_time_Set() const;
    bool is_start_date_time_Valid() const;

    double getValue() const;
    void setValue(const double &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_award_date_time;
    bool m_award_date_time_isSet;
    bool m_award_date_time_isValid;

    QString m_display_text;
    bool m_display_text_isSet;
    bool m_display_text_isValid;

    QString m_expiry_date_time;
    bool m_expiry_date_time_isSet;
    bool m_expiry_date_time_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_offer_desc;
    bool m_offer_desc_isSet;
    bool m_offer_desc_isValid;

    qint32 m_offer_id;
    bool m_offer_id_isSet;
    bool m_offer_id_isValid;

    QString m_offer_name;
    bool m_offer_name_isSet;
    bool m_offer_name_isValid;

    QString m_start_date_time;
    bool m_start_date_time_isSet;
    bool m_start_date_time_isValid;

    double m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFreeBetDetail)

#endif // OAIFreeBetDetail_H
