/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlacedBet.h
 *
 * 
 */

#ifndef OAIPlacedBet_H
#define OAIPlacedBet_H

#include <QJsonObject>

#include "OAIPlacedBetLeg.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlacedBetLeg;

class OAIPlacedBet : public OAIObject {
public:
    OAIPlacedBet();
    OAIPlacedBet(QString json);
    ~OAIPlacedBet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCashinValue() const;
    void setCashinValue(const double &cashin_value);
    bool is_cashin_value_Set() const;
    bool is_cashin_value_Valid() const;

    double getEstimatedReturns() const;
    void setEstimatedReturns(const double &estimated_returns);
    bool is_estimated_returns_Set() const;
    bool is_estimated_returns_Valid() const;

    double getFreeBetValue() const;
    void setFreeBetValue(const double &free_bet_value);
    bool is_free_bet_value_Set() const;
    bool is_free_bet_value_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIPlacedBetLeg> getLegs() const;
    void setLegs(const QList<OAIPlacedBetLeg> &legs);
    bool is_legs_Set() const;
    bool is_legs_Valid() const;

    qint32 getNumLines() const;
    void setNumLines(const qint32 &num_lines);
    bool is_num_lines_Set() const;
    bool is_num_lines_Valid() const;

    qint32 getNumSelections() const;
    void setNumSelections(const qint32 &num_selections);
    bool is_num_selections_Set() const;
    bool is_num_selections_Valid() const;

    QString getReceipt() const;
    void setReceipt(const QString &receipt);
    bool is_receipt_Set() const;
    bool is_receipt_Valid() const;

    bool isSettled() const;
    void setSettled(const bool &settled);
    bool is_settled_Set() const;
    bool is_settled_Valid() const;

    double getStake() const;
    void setStake(const double &stake);
    bool is_stake_Set() const;
    bool is_stake_Valid() const;

    double getStakePerLine() const;
    void setStakePerLine(const double &stake_per_line);
    bool is_stake_per_line_Set() const;
    bool is_stake_per_line_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTransDateTime() const;
    void setTransDateTime(const QString &trans_date_time);
    bool is_trans_date_time_Set() const;
    bool is_trans_date_time_Valid() const;

    QString getTypeCode() const;
    void setTypeCode(const QString &type_code);
    bool is_type_code_Set() const;
    bool is_type_code_Valid() const;

    QString getTypeName() const;
    void setTypeName(const QString &type_name);
    bool is_type_name_Set() const;
    bool is_type_name_Valid() const;

    double getWinnings() const;
    void setWinnings(const double &winnings);
    bool is_winnings_Set() const;
    bool is_winnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cashin_value;
    bool m_cashin_value_isSet;
    bool m_cashin_value_isValid;

    double m_estimated_returns;
    bool m_estimated_returns_isSet;
    bool m_estimated_returns_isValid;

    double m_free_bet_value;
    bool m_free_bet_value_isSet;
    bool m_free_bet_value_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIPlacedBetLeg> m_legs;
    bool m_legs_isSet;
    bool m_legs_isValid;

    qint32 m_num_lines;
    bool m_num_lines_isSet;
    bool m_num_lines_isValid;

    qint32 m_num_selections;
    bool m_num_selections_isSet;
    bool m_num_selections_isValid;

    QString m_receipt;
    bool m_receipt_isSet;
    bool m_receipt_isValid;

    bool m_settled;
    bool m_settled_isSet;
    bool m_settled_isValid;

    double m_stake;
    bool m_stake_isSet;
    bool m_stake_isValid;

    double m_stake_per_line;
    bool m_stake_per_line_isSet;
    bool m_stake_per_line_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_trans_date_time;
    bool m_trans_date_time_isSet;
    bool m_trans_date_time_isValid;

    QString m_type_code;
    bool m_type_code_isSet;
    bool m_type_code_isValid;

    QString m_type_name;
    bool m_type_name_isSet;
    bool m_type_name_isValid;

    double m_winnings;
    bool m_winnings_isSet;
    bool m_winnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlacedBet)

#endif // OAIPlacedBet_H
