/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleBetRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleBetRequestBody::OAISingleBetRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleBetRequestBody::OAISingleBetRequestBody() {
    this->initializeModel();
}

OAISingleBetRequestBody::~OAISingleBetRequestBody() {}

void OAISingleBetRequestBody::initializeModel() {

    m_delayed_bet_id_isSet = false;
    m_delayed_bet_id_isValid = false;

    m_free_bet_id_isSet = false;
    m_free_bet_id_isValid = false;

    m_price_den_isSet = false;
    m_price_den_isValid = false;

    m_price_num_isSet = false;
    m_price_num_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;

    m_stake_isSet = false;
    m_stake_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISingleBetRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleBetRequestBody::fromJsonObject(QJsonObject json) {

    m_delayed_bet_id_isValid = ::OpenAPI::fromJsonValue(m_delayed_bet_id, json[QString("delayedBetId")]);
    m_delayed_bet_id_isSet = !json[QString("delayedBetId")].isNull() && m_delayed_bet_id_isValid;

    m_free_bet_id_isValid = ::OpenAPI::fromJsonValue(m_free_bet_id, json[QString("freeBetId")]);
    m_free_bet_id_isSet = !json[QString("freeBetId")].isNull() && m_free_bet_id_isValid;

    m_price_den_isValid = ::OpenAPI::fromJsonValue(m_price_den, json[QString("priceDen")]);
    m_price_den_isSet = !json[QString("priceDen")].isNull() && m_price_den_isValid;

    m_price_num_isValid = ::OpenAPI::fromJsonValue(m_price_num, json[QString("priceNum")]);
    m_price_num_isSet = !json[QString("priceNum")].isNull() && m_price_num_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("selectionId")]);
    m_selection_id_isSet = !json[QString("selectionId")].isNull() && m_selection_id_isValid;

    m_stake_isValid = ::OpenAPI::fromJsonValue(m_stake, json[QString("stake")]);
    m_stake_isSet = !json[QString("stake")].isNull() && m_stake_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISingleBetRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleBetRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_delayed_bet_id_isSet) {
        obj.insert(QString("delayedBetId"), ::OpenAPI::toJsonValue(m_delayed_bet_id));
    }
    if (m_free_bet_id_isSet) {
        obj.insert(QString("freeBetId"), ::OpenAPI::toJsonValue(m_free_bet_id));
    }
    if (m_price_den_isSet) {
        obj.insert(QString("priceDen"), ::OpenAPI::toJsonValue(m_price_den));
    }
    if (m_price_num_isSet) {
        obj.insert(QString("priceNum"), ::OpenAPI::toJsonValue(m_price_num));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("selectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    if (m_stake_isSet) {
        obj.insert(QString("stake"), ::OpenAPI::toJsonValue(m_stake));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISingleBetRequestBody::getDelayedBetId() const {
    return m_delayed_bet_id;
}
void OAISingleBetRequestBody::setDelayedBetId(const QString &delayed_bet_id) {
    m_delayed_bet_id = delayed_bet_id;
    m_delayed_bet_id_isSet = true;
}

bool OAISingleBetRequestBody::is_delayed_bet_id_Set() const{
    return m_delayed_bet_id_isSet;
}

bool OAISingleBetRequestBody::is_delayed_bet_id_Valid() const{
    return m_delayed_bet_id_isValid;
}

QString OAISingleBetRequestBody::getFreeBetId() const {
    return m_free_bet_id;
}
void OAISingleBetRequestBody::setFreeBetId(const QString &free_bet_id) {
    m_free_bet_id = free_bet_id;
    m_free_bet_id_isSet = true;
}

bool OAISingleBetRequestBody::is_free_bet_id_Set() const{
    return m_free_bet_id_isSet;
}

bool OAISingleBetRequestBody::is_free_bet_id_Valid() const{
    return m_free_bet_id_isValid;
}

qint32 OAISingleBetRequestBody::getPriceDen() const {
    return m_price_den;
}
void OAISingleBetRequestBody::setPriceDen(const qint32 &price_den) {
    m_price_den = price_den;
    m_price_den_isSet = true;
}

bool OAISingleBetRequestBody::is_price_den_Set() const{
    return m_price_den_isSet;
}

bool OAISingleBetRequestBody::is_price_den_Valid() const{
    return m_price_den_isValid;
}

qint32 OAISingleBetRequestBody::getPriceNum() const {
    return m_price_num;
}
void OAISingleBetRequestBody::setPriceNum(const qint32 &price_num) {
    m_price_num = price_num;
    m_price_num_isSet = true;
}

bool OAISingleBetRequestBody::is_price_num_Set() const{
    return m_price_num_isSet;
}

bool OAISingleBetRequestBody::is_price_num_Valid() const{
    return m_price_num_isValid;
}

QString OAISingleBetRequestBody::getPriceType() const {
    return m_price_type;
}
void OAISingleBetRequestBody::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAISingleBetRequestBody::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAISingleBetRequestBody::is_price_type_Valid() const{
    return m_price_type_isValid;
}

QString OAISingleBetRequestBody::getSelectionId() const {
    return m_selection_id;
}
void OAISingleBetRequestBody::setSelectionId(const QString &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAISingleBetRequestBody::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAISingleBetRequestBody::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

double OAISingleBetRequestBody::getStake() const {
    return m_stake;
}
void OAISingleBetRequestBody::setStake(const double &stake) {
    m_stake = stake;
    m_stake_isSet = true;
}

bool OAISingleBetRequestBody::is_stake_Set() const{
    return m_stake_isSet;
}

bool OAISingleBetRequestBody::is_stake_Valid() const{
    return m_stake_isValid;
}

QString OAISingleBetRequestBody::getType() const {
    return m_type;
}
void OAISingleBetRequestBody::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISingleBetRequestBody::is_type_Set() const{
    return m_type_isSet;
}

bool OAISingleBetRequestBody::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISingleBetRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delayed_bet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleBetRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_price_type_isValid && m_selection_id_isValid && m_stake_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
