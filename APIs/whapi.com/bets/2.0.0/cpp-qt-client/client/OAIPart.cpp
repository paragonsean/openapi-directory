/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPart::OAIPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPart::OAIPart() {
    this->initializeModel();
}

OAIPart::~OAIPart() {}

void OAIPart::initializeModel() {

    m_include_in_multiple_isSet = false;
    m_include_in_multiple_isValid = false;

    m_price_den_isSet = false;
    m_price_den_isValid = false;

    m_price_num_isSet = false;
    m_price_num_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;
}

void OAIPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPart::fromJsonObject(QJsonObject json) {

    m_include_in_multiple_isValid = ::OpenAPI::fromJsonValue(m_include_in_multiple, json[QString("includeInMultiple")]);
    m_include_in_multiple_isSet = !json[QString("includeInMultiple")].isNull() && m_include_in_multiple_isValid;

    m_price_den_isValid = ::OpenAPI::fromJsonValue(m_price_den, json[QString("priceDen")]);
    m_price_den_isSet = !json[QString("priceDen")].isNull() && m_price_den_isValid;

    m_price_num_isValid = ::OpenAPI::fromJsonValue(m_price_num, json[QString("priceNum")]);
    m_price_num_isSet = !json[QString("priceNum")].isNull() && m_price_num_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("selectionId")]);
    m_selection_id_isSet = !json[QString("selectionId")].isNull() && m_selection_id_isValid;
}

QString OAIPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPart::asJsonObject() const {
    QJsonObject obj;
    if (m_include_in_multiple_isSet) {
        obj.insert(QString("includeInMultiple"), ::OpenAPI::toJsonValue(m_include_in_multiple));
    }
    if (m_price_den_isSet) {
        obj.insert(QString("priceDen"), ::OpenAPI::toJsonValue(m_price_den));
    }
    if (m_price_num_isSet) {
        obj.insert(QString("priceNum"), ::OpenAPI::toJsonValue(m_price_num));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("selectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    return obj;
}

bool OAIPart::isIncludeInMultiple() const {
    return m_include_in_multiple;
}
void OAIPart::setIncludeInMultiple(const bool &include_in_multiple) {
    m_include_in_multiple = include_in_multiple;
    m_include_in_multiple_isSet = true;
}

bool OAIPart::is_include_in_multiple_Set() const{
    return m_include_in_multiple_isSet;
}

bool OAIPart::is_include_in_multiple_Valid() const{
    return m_include_in_multiple_isValid;
}

qint32 OAIPart::getPriceDen() const {
    return m_price_den;
}
void OAIPart::setPriceDen(const qint32 &price_den) {
    m_price_den = price_den;
    m_price_den_isSet = true;
}

bool OAIPart::is_price_den_Set() const{
    return m_price_den_isSet;
}

bool OAIPart::is_price_den_Valid() const{
    return m_price_den_isValid;
}

qint32 OAIPart::getPriceNum() const {
    return m_price_num;
}
void OAIPart::setPriceNum(const qint32 &price_num) {
    m_price_num = price_num;
    m_price_num_isSet = true;
}

bool OAIPart::is_price_num_Set() const{
    return m_price_num_isSet;
}

bool OAIPart::is_price_num_Valid() const{
    return m_price_num_isValid;
}

qint32 OAIPart::getPriceType() const {
    return m_price_type;
}
void OAIPart::setPriceType(const qint32 &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAIPart::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAIPart::is_price_type_Valid() const{
    return m_price_type_isValid;
}

qint32 OAIPart::getSelectionId() const {
    return m_selection_id;
}
void OAIPart::setSelectionId(const qint32 &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAIPart::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAIPart::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

bool OAIPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_in_multiple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_include_in_multiple_isValid && m_price_den_isValid && m_price_num_isValid && m_price_type_isValid && m_selection_id_isValid && true;
}

} // namespace OpenAPI
