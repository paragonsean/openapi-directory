/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPart.h
 *
 * 
 */

#ifndef OAIPart_H
#define OAIPart_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPart : public OAIObject {
public:
    OAIPart();
    OAIPart(QString json);
    ~OAIPart() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIncludeInMultiple() const;
    void setIncludeInMultiple(const bool &include_in_multiple);
    bool is_include_in_multiple_Set() const;
    bool is_include_in_multiple_Valid() const;

    qint32 getPriceDen() const;
    void setPriceDen(const qint32 &price_den);
    bool is_price_den_Set() const;
    bool is_price_den_Valid() const;

    qint32 getPriceNum() const;
    void setPriceNum(const qint32 &price_num);
    bool is_price_num_Set() const;
    bool is_price_num_Valid() const;

    qint32 getPriceType() const;
    void setPriceType(const qint32 &price_type);
    bool is_price_type_Set() const;
    bool is_price_type_Valid() const;

    qint32 getSelectionId() const;
    void setSelectionId(const qint32 &selection_id);
    bool is_selection_id_Set() const;
    bool is_selection_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_include_in_multiple;
    bool m_include_in_multiple_isSet;
    bool m_include_in_multiple_isValid;

    qint32 m_price_den;
    bool m_price_den_isSet;
    bool m_price_den_isValid;

    qint32 m_price_num;
    bool m_price_num_isSet;
    bool m_price_num_isValid;

    qint32 m_price_type;
    bool m_price_type_isSet;
    bool m_price_type_isValid;

    qint32 m_selection_id;
    bool m_selection_id_isSet;
    bool m_selection_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPart)

#endif // OAIPart_H
