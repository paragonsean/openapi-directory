/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBetsApi_H
#define OAI_OAIBetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBetDelayed.h"
#include "OAIBetHistoryResponse.h"
#include "OAIBetPlaced.h"
#include "OAIBetSlipRequest.h"
#include "OAIBetSlipResponse.h"
#include "OAICashInResponse.h"
#include "OAIComplexBetRequestBody.h"
#include "OAIErrors.h"
#include "OAIFreeBetDetail.h"
#include "OAISingleBetRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBetsApi : public QObject {
    Q_OBJECT

public:
    OAIBetsApi(const int timeOut = 0);
    ~OAIBetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  bet_id QString [required]
    * @param[in]  cash_in_value double [required]
    * @param[in]  cashin_bet_delay_id QString [required]
    */
    virtual void cashin(const QString &api_key, const QString &api_secret, const QString &api_ticket, const QString &bet_id, const double &cash_in_value, const QString &cashin_bet_delay_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  page double [optional]
    * @param[in]  page_size double [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  settled bool [optional]
    */
    virtual void getBetHistory(const QString &api_key, const QString &api_secret, const QString &api_ticket, const QString &date_from, const QString &date_to, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &settled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void getFreeBets(const QString &api_key, const QString &api_secret, const QString &api_ticket, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  oai_complex_bet_request_body OAIComplexBetRequestBody [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void placeComplexBet(const QString &api_key, const QString &api_secret, const QString &api_ticket, const OAIComplexBetRequestBody &oai_complex_bet_request_body, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  api_ticket QString [required]
    * @param[in]  oai_single_bet_request_body OAISingleBetRequestBody [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void placeSingleBet(const QString &api_key, const QString &api_secret, const QString &api_ticket, const OAISingleBetRequestBody &oai_single_bet_request_body, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  oai_bet_slip_request OAIBetSlipRequest [required]
    * @param[in]  expanded QString [optional]
    */
    virtual void validateBetslip(const QString &api_key, const QString &api_secret, const OAIBetSlipRequest &oai_bet_slip_request, const ::OpenAPI::OptionalParam<QString> &expanded = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cashinCallback(OAIHttpRequestWorker *worker);
    void getBetHistoryCallback(OAIHttpRequestWorker *worker);
    void getFreeBetsCallback(OAIHttpRequestWorker *worker);
    void placeComplexBetCallback(OAIHttpRequestWorker *worker);
    void placeSingleBetCallback(OAIHttpRequestWorker *worker);
    void validateBetslipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cashinSignal(OAICashInResponse summary);
    void getBetHistorySignal(OAIBetHistoryResponse summary);
    void getFreeBetsSignal(QList<OAIFreeBetDetail> summary);
    void placeComplexBetSignal(QList<OAIBetPlaced> summary);
    void placeSingleBetSignal(QList<OAIBetPlaced> summary);
    void validateBetslipSignal(OAIBetSlipResponse summary);


    void cashinSignalFull(OAIHttpRequestWorker *worker, OAICashInResponse summary);
    void getBetHistorySignalFull(OAIHttpRequestWorker *worker, OAIBetHistoryResponse summary);
    void getFreeBetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFreeBetDetail> summary);
    void placeComplexBetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBetPlaced> summary);
    void placeSingleBetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBetPlaced> summary);
    void validateBetslipSignalFull(OAIHttpRequestWorker *worker, OAIBetSlipResponse summary);

    Q_DECL_DEPRECATED_X("Use cashinSignalError() instead")
    void cashinSignalE(OAICashInResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cashinSignalError(OAICashInResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBetHistorySignalError() instead")
    void getBetHistorySignalE(OAIBetHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBetHistorySignalError(OAIBetHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFreeBetsSignalError() instead")
    void getFreeBetsSignalE(QList<OAIFreeBetDetail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFreeBetsSignalError(QList<OAIFreeBetDetail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeComplexBetSignalError() instead")
    void placeComplexBetSignalE(QList<OAIBetPlaced> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeComplexBetSignalError(QList<OAIBetPlaced> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeSingleBetSignalError() instead")
    void placeSingleBetSignalE(QList<OAIBetPlaced> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void placeSingleBetSignalError(QList<OAIBetPlaced> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateBetslipSignalError() instead")
    void validateBetslipSignalE(OAIBetSlipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateBetslipSignalError(OAIBetSlipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cashinSignalErrorFull() instead")
    void cashinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cashinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBetHistorySignalErrorFull() instead")
    void getBetHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBetHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFreeBetsSignalErrorFull() instead")
    void getFreeBetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFreeBetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeComplexBetSignalErrorFull() instead")
    void placeComplexBetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeComplexBetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use placeSingleBetSignalErrorFull() instead")
    void placeSingleBetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeSingleBetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateBetslipSignalErrorFull() instead")
    void validateBetslipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateBetslipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
