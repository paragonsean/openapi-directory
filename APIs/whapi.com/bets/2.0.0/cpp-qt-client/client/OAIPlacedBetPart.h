/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlacedBetPart.h
 *
 * 
 */

#ifndef OAIPlacedBetPart_H
#define OAIPlacedBetPart_H

#include <QJsonObject>

#include "OAIPriceFormatted.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPriceFormatted;

class OAIPlacedBetPart : public OAIObject {
public:
    OAIPlacedBetPart();
    OAIPlacedBetPart(QString json);
    ~OAIPlacedBetPart() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getEachWayDen() const;
    void setEachWayDen(const qint32 &each_way_den);
    bool is_each_way_den_Set() const;
    bool is_each_way_den_Valid() const;

    qint32 getEachWayNum() const;
    void setEachWayNum(const qint32 &each_way_num);
    bool is_each_way_num_Set() const;
    bool is_each_way_num_Valid() const;

    qint32 getEachWayPlaces() const;
    void setEachWayPlaces(const qint32 &each_way_places);
    bool is_each_way_places_Set() const;
    bool is_each_way_places_Valid() const;

    QString getEventDescription() const;
    void setEventDescription(const QString &event_description);
    bool is_event_description_Set() const;
    bool is_event_description_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getEventMarketDescription() const;
    void setEventMarketDescription(const QString &event_market_description);
    bool is_event_market_description_Set() const;
    bool is_event_market_description_Valid() const;

    QString getEventTypeDescription() const;
    void setEventTypeDescription(const QString &event_type_description);
    bool is_event_type_description_Set() const;
    bool is_event_type_description_Valid() const;

    double getHandicap() const;
    void setHandicap(const double &handicap);
    bool is_handicap_Set() const;
    bool is_handicap_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    qint32 getPriceDen() const;
    void setPriceDen(const qint32 &price_den);
    bool is_price_den_Set() const;
    bool is_price_den_Valid() const;

    OAIPriceFormatted getPriceFormatted() const;
    void setPriceFormatted(const OAIPriceFormatted &price_formatted);
    bool is_price_formatted_Set() const;
    bool is_price_formatted_Valid() const;

    qint32 getPriceNum() const;
    void setPriceNum(const qint32 &price_num);
    bool is_price_num_Set() const;
    bool is_price_num_Valid() const;

    QString getPriceType() const;
    void setPriceType(const QString &price_type);
    bool is_price_type_Set() const;
    bool is_price_type_Valid() const;

    QString getResult() const;
    void setResult(const QString &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    double getRule4Deductions() const;
    void setRule4Deductions(const double &rule4_deductions);
    bool is_rule4_deductions_Set() const;
    bool is_rule4_deductions_Valid() const;

    QString getSelectionId() const;
    void setSelectionId(const QString &selection_id);
    bool is_selection_id_Set() const;
    bool is_selection_id_Valid() const;

    QString getStartDateTime() const;
    void setStartDateTime(const QString &start_date_time);
    bool is_start_date_time_Set() const;
    bool is_start_date_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_each_way_den;
    bool m_each_way_den_isSet;
    bool m_each_way_den_isValid;

    qint32 m_each_way_num;
    bool m_each_way_num_isSet;
    bool m_each_way_num_isValid;

    qint32 m_each_way_places;
    bool m_each_way_places_isSet;
    bool m_each_way_places_isValid;

    QString m_event_description;
    bool m_event_description_isSet;
    bool m_event_description_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_event_market_description;
    bool m_event_market_description_isSet;
    bool m_event_market_description_isValid;

    QString m_event_type_description;
    bool m_event_type_description_isSet;
    bool m_event_type_description_isValid;

    double m_handicap;
    bool m_handicap_isSet;
    bool m_handicap_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    qint32 m_price_den;
    bool m_price_den_isSet;
    bool m_price_den_isValid;

    OAIPriceFormatted m_price_formatted;
    bool m_price_formatted_isSet;
    bool m_price_formatted_isValid;

    qint32 m_price_num;
    bool m_price_num_isSet;
    bool m_price_num_isValid;

    QString m_price_type;
    bool m_price_type_isSet;
    bool m_price_type_isValid;

    QString m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    double m_rule4_deductions;
    bool m_rule4_deductions_isSet;
    bool m_rule4_deductions_isValid;

    QString m_selection_id;
    bool m_selection_id_isSet;
    bool m_selection_id_isValid;

    QString m_start_date_time;
    bool m_start_date_time_isSet;
    bool m_start_date_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlacedBetPart)

#endif // OAIPlacedBetPart_H
