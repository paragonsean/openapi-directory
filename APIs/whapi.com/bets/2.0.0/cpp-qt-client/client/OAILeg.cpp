/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeg::OAILeg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeg::OAILeg() {
    this->initializeModel();
}

OAILeg::~OAILeg() {}

void OAILeg::initializeModel() {

    m_parts_isSet = false;
    m_parts_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILeg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeg::fromJsonObject(QJsonObject json) {

    m_parts_isValid = ::OpenAPI::fromJsonValue(m_parts, json[QString("parts")]);
    m_parts_isSet = !json[QString("parts")].isNull() && m_parts_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILeg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeg::asJsonObject() const {
    QJsonObject obj;
    if (m_parts.size() > 0) {
        obj.insert(QString("parts"), ::OpenAPI::toJsonValue(m_parts));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIPart> OAILeg::getParts() const {
    return m_parts;
}
void OAILeg::setParts(const QList<OAIPart> &parts) {
    m_parts = parts;
    m_parts_isSet = true;
}

bool OAILeg::is_parts_Set() const{
    return m_parts_isSet;
}

bool OAILeg::is_parts_Valid() const{
    return m_parts_isValid;
}

QString OAILeg::getSort() const {
    return m_sort;
}
void OAILeg::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAILeg::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAILeg::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAILeg::getType() const {
    return m_type;
}
void OAILeg::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILeg::is_type_Set() const{
    return m_type_isSet;
}

bool OAILeg::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILeg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeg::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parts_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
