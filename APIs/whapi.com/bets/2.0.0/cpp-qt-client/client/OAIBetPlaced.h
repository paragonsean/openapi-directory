/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBetPlaced.h
 *
 * 
 */

#ifndef OAIBetPlaced_H
#define OAIBetPlaced_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBetPlaced : public OAIObject {
public:
    OAIBetPlaced();
    OAIBetPlaced(QString json);
    ~OAIBetPlaced() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getNumLines() const;
    void setNumLines(const qint32 &num_lines);
    bool is_num_lines_Set() const;
    bool is_num_lines_Valid() const;

    double getNumber() const;
    void setNumber(const double &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getPlacedDateTime() const;
    void setPlacedDateTime(const QString &placed_date_time);
    bool is_placed_date_time_Set() const;
    bool is_placed_date_time_Valid() const;

    QString getReceipt() const;
    void setReceipt(const QString &receipt);
    bool is_receipt_Set() const;
    bool is_receipt_Valid() const;

    double getTotalStake() const;
    void setTotalStake(const double &total_stake);
    bool is_total_stake_Set() const;
    bool is_total_stake_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_num_lines;
    bool m_num_lines_isSet;
    bool m_num_lines_isValid;

    double m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_placed_date_time;
    bool m_placed_date_time_isSet;
    bool m_placed_date_time_isValid;

    QString m_receipt;
    bool m_receipt_isSet;
    bool m_receipt_isValid;

    double m_total_stake;
    bool m_total_stake_isSet;
    bool m_total_stake_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBetPlaced)

#endif // OAIBetPlaced_H
