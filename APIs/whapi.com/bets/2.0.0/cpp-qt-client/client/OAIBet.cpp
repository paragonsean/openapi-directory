/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBet::OAIBet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBet::OAIBet() {
    this->initializeModel();
}

OAIBet::~OAIBet() {}

void OAIBet::initializeModel() {

    m_delayed_bet_id_isSet = false;
    m_delayed_bet_id_isValid = false;

    m_free_bet_id_isSet = false;
    m_free_bet_id_isValid = false;

    m_legs_isSet = false;
    m_legs_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_stake_isSet = false;
    m_stake_isValid = false;

    m_type_code_isSet = false;
    m_type_code_isValid = false;
}

void OAIBet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBet::fromJsonObject(QJsonObject json) {

    m_delayed_bet_id_isValid = ::OpenAPI::fromJsonValue(m_delayed_bet_id, json[QString("delayedBetId")]);
    m_delayed_bet_id_isSet = !json[QString("delayedBetId")].isNull() && m_delayed_bet_id_isValid;

    m_free_bet_id_isValid = ::OpenAPI::fromJsonValue(m_free_bet_id, json[QString("freeBetId")]);
    m_free_bet_id_isSet = !json[QString("freeBetId")].isNull() && m_free_bet_id_isValid;

    m_legs_isValid = ::OpenAPI::fromJsonValue(m_legs, json[QString("legs")]);
    m_legs_isSet = !json[QString("legs")].isNull() && m_legs_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_stake_isValid = ::OpenAPI::fromJsonValue(m_stake, json[QString("stake")]);
    m_stake_isSet = !json[QString("stake")].isNull() && m_stake_isValid;

    m_type_code_isValid = ::OpenAPI::fromJsonValue(m_type_code, json[QString("typeCode")]);
    m_type_code_isSet = !json[QString("typeCode")].isNull() && m_type_code_isValid;
}

QString OAIBet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBet::asJsonObject() const {
    QJsonObject obj;
    if (m_delayed_bet_id_isSet) {
        obj.insert(QString("delayedBetId"), ::OpenAPI::toJsonValue(m_delayed_bet_id));
    }
    if (m_free_bet_id_isSet) {
        obj.insert(QString("freeBetId"), ::OpenAPI::toJsonValue(m_free_bet_id));
    }
    if (m_legs.size() > 0) {
        obj.insert(QString("legs"), ::OpenAPI::toJsonValue(m_legs));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_stake_isSet) {
        obj.insert(QString("stake"), ::OpenAPI::toJsonValue(m_stake));
    }
    if (m_type_code_isSet) {
        obj.insert(QString("typeCode"), ::OpenAPI::toJsonValue(m_type_code));
    }
    return obj;
}

QString OAIBet::getDelayedBetId() const {
    return m_delayed_bet_id;
}
void OAIBet::setDelayedBetId(const QString &delayed_bet_id) {
    m_delayed_bet_id = delayed_bet_id;
    m_delayed_bet_id_isSet = true;
}

bool OAIBet::is_delayed_bet_id_Set() const{
    return m_delayed_bet_id_isSet;
}

bool OAIBet::is_delayed_bet_id_Valid() const{
    return m_delayed_bet_id_isValid;
}

QString OAIBet::getFreeBetId() const {
    return m_free_bet_id;
}
void OAIBet::setFreeBetId(const QString &free_bet_id) {
    m_free_bet_id = free_bet_id;
    m_free_bet_id_isSet = true;
}

bool OAIBet::is_free_bet_id_Set() const{
    return m_free_bet_id_isSet;
}

bool OAIBet::is_free_bet_id_Valid() const{
    return m_free_bet_id_isValid;
}

QList<OAILeg> OAIBet::getLegs() const {
    return m_legs;
}
void OAIBet::setLegs(const QList<OAILeg> &legs) {
    m_legs = legs;
    m_legs_isSet = true;
}

bool OAIBet::is_legs_Set() const{
    return m_legs_isSet;
}

bool OAIBet::is_legs_Valid() const{
    return m_legs_isValid;
}

qint32 OAIBet::getNumber() const {
    return m_number;
}
void OAIBet::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIBet::is_number_Set() const{
    return m_number_isSet;
}

bool OAIBet::is_number_Valid() const{
    return m_number_isValid;
}

double OAIBet::getStake() const {
    return m_stake;
}
void OAIBet::setStake(const double &stake) {
    m_stake = stake;
    m_stake_isSet = true;
}

bool OAIBet::is_stake_Set() const{
    return m_stake_isSet;
}

bool OAIBet::is_stake_Valid() const{
    return m_stake_isValid;
}

QString OAIBet::getTypeCode() const {
    return m_type_code;
}
void OAIBet::setTypeCode(const QString &type_code) {
    m_type_code = type_code;
    m_type_code_isSet = true;
}

bool OAIBet::is_type_code_Set() const{
    return m_type_code_isSet;
}

bool OAIBet::is_type_code_Valid() const{
    return m_type_code_isValid;
}

bool OAIBet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delayed_bet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_legs_isValid && m_number_isValid && m_stake_isValid && m_type_code_isValid && true;
}

} // namespace OpenAPI
