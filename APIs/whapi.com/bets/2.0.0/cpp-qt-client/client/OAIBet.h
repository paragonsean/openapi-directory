/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBet.h
 *
 * 
 */

#ifndef OAIBet_H
#define OAIBet_H

#include <QJsonObject>

#include "OAILeg.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILeg;

class OAIBet : public OAIObject {
public:
    OAIBet();
    OAIBet(QString json);
    ~OAIBet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDelayedBetId() const;
    void setDelayedBetId(const QString &delayed_bet_id);
    bool is_delayed_bet_id_Set() const;
    bool is_delayed_bet_id_Valid() const;

    QString getFreeBetId() const;
    void setFreeBetId(const QString &free_bet_id);
    bool is_free_bet_id_Set() const;
    bool is_free_bet_id_Valid() const;

    QList<OAILeg> getLegs() const;
    void setLegs(const QList<OAILeg> &legs);
    bool is_legs_Set() const;
    bool is_legs_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    double getStake() const;
    void setStake(const double &stake);
    bool is_stake_Set() const;
    bool is_stake_Valid() const;

    QString getTypeCode() const;
    void setTypeCode(const QString &type_code);
    bool is_type_code_Set() const;
    bool is_type_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_delayed_bet_id;
    bool m_delayed_bet_id_isSet;
    bool m_delayed_bet_id_isValid;

    QString m_free_bet_id;
    bool m_free_bet_id_isSet;
    bool m_free_bet_id_isValid;

    QList<OAILeg> m_legs;
    bool m_legs_isSet;
    bool m_legs_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    double m_stake;
    bool m_stake_isSet;
    bool m_stake_isValid;

    QString m_type_code;
    bool m_type_code_isSet;
    bool m_type_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBet)

#endif // OAIBet_H
