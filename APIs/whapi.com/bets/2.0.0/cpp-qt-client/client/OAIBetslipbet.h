/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBetslipbet.h
 *
 * 
 */

#ifndef OAIBetslipbet_H
#define OAIBetslipbet_H

#include <QJsonObject>

#include "OAIBetslipleg.h"
#include "OAIFreeBetDetail.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFreeBetDetail;
class OAIBetslipleg;

class OAIBetslipbet : public OAIObject {
public:
    OAIBetslipbet();
    OAIBetslipbet(QString json);
    ~OAIBetslipbet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBetMultiplier() const;
    void setBetMultiplier(const double &bet_multiplier);
    bool is_bet_multiplier_Set() const;
    bool is_bet_multiplier_Valid() const;

    QList<OAIFreeBetDetail> getFreeBets() const;
    void setFreeBets(const QList<OAIFreeBetDetail> &free_bets);
    bool is_free_bets_Set() const;
    bool is_free_bets_Valid() const;

    QList<OAIBetslipleg> getLegs() const;
    void setLegs(const QList<OAIBetslipleg> &legs);
    bool is_legs_Set() const;
    bool is_legs_Valid() const;

    double getMaxStake() const;
    void setMaxStake(const double &max_stake);
    bool is_max_stake_Set() const;
    bool is_max_stake_Valid() const;

    double getMinStake() const;
    void setMinStake(const double &min_stake);
    bool is_min_stake_Set() const;
    bool is_min_stake_Valid() const;

    double getNumLines() const;
    void setNumLines(const double &num_lines);
    bool is_num_lines_Set() const;
    bool is_num_lines_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getTypeCode() const;
    void setTypeCode(const QString &type_code);
    bool is_type_code_Set() const;
    bool is_type_code_Valid() const;

    QString getTypeName() const;
    void setTypeName(const QString &type_name);
    bool is_type_name_Set() const;
    bool is_type_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bet_multiplier;
    bool m_bet_multiplier_isSet;
    bool m_bet_multiplier_isValid;

    QList<OAIFreeBetDetail> m_free_bets;
    bool m_free_bets_isSet;
    bool m_free_bets_isValid;

    QList<OAIBetslipleg> m_legs;
    bool m_legs_isSet;
    bool m_legs_isValid;

    double m_max_stake;
    bool m_max_stake_isSet;
    bool m_max_stake_isValid;

    double m_min_stake;
    bool m_min_stake_isSet;
    bool m_min_stake_isValid;

    double m_num_lines;
    bool m_num_lines_isSet;
    bool m_num_lines_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_type_code;
    bool m_type_code_isSet;
    bool m_type_code_isValid;

    QString m_type_name;
    bool m_type_name_isSet;
    bool m_type_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBetslipbet)

#endif // OAIBetslipbet_H
