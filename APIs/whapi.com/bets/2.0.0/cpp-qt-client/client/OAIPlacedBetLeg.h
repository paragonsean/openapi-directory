/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlacedBetLeg.h
 *
 * 
 */

#ifndef OAIPlacedBetLeg_H
#define OAIPlacedBetLeg_H

#include <QJsonObject>

#include "OAIPlacedBetPart.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlacedBetPart;

class OAIPlacedBetLeg : public OAIObject {
public:
    OAIPlacedBetLeg();
    OAIPlacedBetLeg(QString json);
    ~OAIPlacedBetLeg() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QList<OAIPlacedBetPart> getParts() const;
    void setParts(const QList<OAIPlacedBetPart> &parts);
    bool is_parts_Set() const;
    bool is_parts_Valid() const;

    QString getSort() const;
    void setSort(const QString &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QList<OAIPlacedBetPart> m_parts;
    bool m_parts_isSet;
    bool m_parts_isValid;

    QString m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlacedBetLeg)

#endif // OAIPlacedBetLeg_H
