/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeBetDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeBetDetail::OAIFreeBetDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeBetDetail::OAIFreeBetDetail() {
    this->initializeModel();
}

OAIFreeBetDetail::~OAIFreeBetDetail() {}

void OAIFreeBetDetail::initializeModel() {

    m_award_date_time_isSet = false;
    m_award_date_time_isValid = false;

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_expiry_date_time_isSet = false;
    m_expiry_date_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_offer_desc_isSet = false;
    m_offer_desc_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFreeBetDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeBetDetail::fromJsonObject(QJsonObject json) {

    m_award_date_time_isValid = ::OpenAPI::fromJsonValue(m_award_date_time, json[QString("awardDateTime")]);
    m_award_date_time_isSet = !json[QString("awardDateTime")].isNull() && m_award_date_time_isValid;

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("displayText")]);
    m_display_text_isSet = !json[QString("displayText")].isNull() && m_display_text_isValid;

    m_expiry_date_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_date_time, json[QString("expiryDateTime")]);
    m_expiry_date_time_isSet = !json[QString("expiryDateTime")].isNull() && m_expiry_date_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offer_desc_isValid = ::OpenAPI::fromJsonValue(m_offer_desc, json[QString("offerDesc")]);
    m_offer_desc_isSet = !json[QString("offerDesc")].isNull() && m_offer_desc_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(m_offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFreeBetDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeBetDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_award_date_time_isSet) {
        obj.insert(QString("awardDateTime"), ::OpenAPI::toJsonValue(m_award_date_time));
    }
    if (m_display_text_isSet) {
        obj.insert(QString("displayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_expiry_date_time_isSet) {
        obj.insert(QString("expiryDateTime"), ::OpenAPI::toJsonValue(m_expiry_date_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_offer_desc_isSet) {
        obj.insert(QString("offerDesc"), ::OpenAPI::toJsonValue(m_offer_desc));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(m_offer_name));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFreeBetDetail::getAwardDateTime() const {
    return m_award_date_time;
}
void OAIFreeBetDetail::setAwardDateTime(const QString &award_date_time) {
    m_award_date_time = award_date_time;
    m_award_date_time_isSet = true;
}

bool OAIFreeBetDetail::is_award_date_time_Set() const{
    return m_award_date_time_isSet;
}

bool OAIFreeBetDetail::is_award_date_time_Valid() const{
    return m_award_date_time_isValid;
}

QString OAIFreeBetDetail::getDisplayText() const {
    return m_display_text;
}
void OAIFreeBetDetail::setDisplayText(const QString &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAIFreeBetDetail::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAIFreeBetDetail::is_display_text_Valid() const{
    return m_display_text_isValid;
}

QString OAIFreeBetDetail::getExpiryDateTime() const {
    return m_expiry_date_time;
}
void OAIFreeBetDetail::setExpiryDateTime(const QString &expiry_date_time) {
    m_expiry_date_time = expiry_date_time;
    m_expiry_date_time_isSet = true;
}

bool OAIFreeBetDetail::is_expiry_date_time_Set() const{
    return m_expiry_date_time_isSet;
}

bool OAIFreeBetDetail::is_expiry_date_time_Valid() const{
    return m_expiry_date_time_isValid;
}

qint32 OAIFreeBetDetail::getId() const {
    return m_id;
}
void OAIFreeBetDetail::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFreeBetDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFreeBetDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFreeBetDetail::getOfferDesc() const {
    return m_offer_desc;
}
void OAIFreeBetDetail::setOfferDesc(const QString &offer_desc) {
    m_offer_desc = offer_desc;
    m_offer_desc_isSet = true;
}

bool OAIFreeBetDetail::is_offer_desc_Set() const{
    return m_offer_desc_isSet;
}

bool OAIFreeBetDetail::is_offer_desc_Valid() const{
    return m_offer_desc_isValid;
}

qint32 OAIFreeBetDetail::getOfferId() const {
    return m_offer_id;
}
void OAIFreeBetDetail::setOfferId(const qint32 &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIFreeBetDetail::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIFreeBetDetail::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIFreeBetDetail::getOfferName() const {
    return m_offer_name;
}
void OAIFreeBetDetail::setOfferName(const QString &offer_name) {
    m_offer_name = offer_name;
    m_offer_name_isSet = true;
}

bool OAIFreeBetDetail::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIFreeBetDetail::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

QString OAIFreeBetDetail::getStartDateTime() const {
    return m_start_date_time;
}
void OAIFreeBetDetail::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIFreeBetDetail::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIFreeBetDetail::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

double OAIFreeBetDetail::getValue() const {
    return m_value;
}
void OAIFreeBetDetail::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFreeBetDetail::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFreeBetDetail::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFreeBetDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_award_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeBetDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_offer_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
