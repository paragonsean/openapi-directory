/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolution::OAISolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolution::OAISolution() {
    this->initializeModel();
}

OAISolution::~OAISolution() {}

void OAISolution::initializeModel() {

    m_bet_num_isSet = false;
    m_bet_num_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_handicap_isSet = false;
    m_handicap_isValid = false;

    m_handicap_precision_isSet = false;
    m_handicap_precision_isValid = false;

    m_price_den_isSet = false;
    m_price_den_isValid = false;

    m_price_num_isSet = false;
    m_price_num_isValid = false;

    m_selection_handicap_isSet = false;
    m_selection_handicap_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;
}

void OAISolution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolution::fromJsonObject(QJsonObject json) {

    m_bet_num_isValid = ::OpenAPI::fromJsonValue(m_bet_num, json[QString("betNum")]);
    m_bet_num_isSet = !json[QString("betNum")].isNull() && m_bet_num_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_handicap_isValid = ::OpenAPI::fromJsonValue(m_handicap, json[QString("handicap")]);
    m_handicap_isSet = !json[QString("handicap")].isNull() && m_handicap_isValid;

    m_handicap_precision_isValid = ::OpenAPI::fromJsonValue(m_handicap_precision, json[QString("handicapPrecision")]);
    m_handicap_precision_isSet = !json[QString("handicapPrecision")].isNull() && m_handicap_precision_isValid;

    m_price_den_isValid = ::OpenAPI::fromJsonValue(m_price_den, json[QString("priceDen")]);
    m_price_den_isSet = !json[QString("priceDen")].isNull() && m_price_den_isValid;

    m_price_num_isValid = ::OpenAPI::fromJsonValue(m_price_num, json[QString("priceNum")]);
    m_price_num_isSet = !json[QString("priceNum")].isNull() && m_price_num_isValid;

    m_selection_handicap_isValid = ::OpenAPI::fromJsonValue(m_selection_handicap, json[QString("selectionHandicap")]);
    m_selection_handicap_isSet = !json[QString("selectionHandicap")].isNull() && m_selection_handicap_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("selectionId")]);
    m_selection_id_isSet = !json[QString("selectionId")].isNull() && m_selection_id_isValid;
}

QString OAISolution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolution::asJsonObject() const {
    QJsonObject obj;
    if (m_bet_num_isSet) {
        obj.insert(QString("betNum"), ::OpenAPI::toJsonValue(m_bet_num));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_handicap_isSet) {
        obj.insert(QString("handicap"), ::OpenAPI::toJsonValue(m_handicap));
    }
    if (m_handicap_precision_isSet) {
        obj.insert(QString("handicapPrecision"), ::OpenAPI::toJsonValue(m_handicap_precision));
    }
    if (m_price_den_isSet) {
        obj.insert(QString("priceDen"), ::OpenAPI::toJsonValue(m_price_den));
    }
    if (m_price_num_isSet) {
        obj.insert(QString("priceNum"), ::OpenAPI::toJsonValue(m_price_num));
    }
    if (m_selection_handicap_isSet) {
        obj.insert(QString("selectionHandicap"), ::OpenAPI::toJsonValue(m_selection_handicap));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("selectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    return obj;
}

QString OAISolution::getBetNum() const {
    return m_bet_num;
}
void OAISolution::setBetNum(const QString &bet_num) {
    m_bet_num = bet_num;
    m_bet_num_isSet = true;
}

bool OAISolution::is_bet_num_Set() const{
    return m_bet_num_isSet;
}

bool OAISolution::is_bet_num_Valid() const{
    return m_bet_num_isValid;
}

QString OAISolution::getEventId() const {
    return m_event_id;
}
void OAISolution::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAISolution::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAISolution::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAISolution::getHandicap() const {
    return m_handicap;
}
void OAISolution::setHandicap(const QString &handicap) {
    m_handicap = handicap;
    m_handicap_isSet = true;
}

bool OAISolution::is_handicap_Set() const{
    return m_handicap_isSet;
}

bool OAISolution::is_handicap_Valid() const{
    return m_handicap_isValid;
}

QString OAISolution::getHandicapPrecision() const {
    return m_handicap_precision;
}
void OAISolution::setHandicapPrecision(const QString &handicap_precision) {
    m_handicap_precision = handicap_precision;
    m_handicap_precision_isSet = true;
}

bool OAISolution::is_handicap_precision_Set() const{
    return m_handicap_precision_isSet;
}

bool OAISolution::is_handicap_precision_Valid() const{
    return m_handicap_precision_isValid;
}

QString OAISolution::getPriceDen() const {
    return m_price_den;
}
void OAISolution::setPriceDen(const QString &price_den) {
    m_price_den = price_den;
    m_price_den_isSet = true;
}

bool OAISolution::is_price_den_Set() const{
    return m_price_den_isSet;
}

bool OAISolution::is_price_den_Valid() const{
    return m_price_den_isValid;
}

QString OAISolution::getPriceNum() const {
    return m_price_num;
}
void OAISolution::setPriceNum(const QString &price_num) {
    m_price_num = price_num;
    m_price_num_isSet = true;
}

bool OAISolution::is_price_num_Set() const{
    return m_price_num_isSet;
}

bool OAISolution::is_price_num_Valid() const{
    return m_price_num_isValid;
}

QString OAISolution::getSelectionHandicap() const {
    return m_selection_handicap;
}
void OAISolution::setSelectionHandicap(const QString &selection_handicap) {
    m_selection_handicap = selection_handicap;
    m_selection_handicap_isSet = true;
}

bool OAISolution::is_selection_handicap_Set() const{
    return m_selection_handicap_isSet;
}

bool OAISolution::is_selection_handicap_Valid() const{
    return m_selection_handicap_isValid;
}

QString OAISolution::getSelectionId() const {
    return m_selection_id;
}
void OAISolution::setSelectionId(const QString &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAISolution::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAISolution::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

bool OAISolution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bet_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handicap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handicap_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_handicap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
