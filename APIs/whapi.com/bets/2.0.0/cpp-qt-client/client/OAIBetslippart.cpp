/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetslippart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetslippart::OAIBetslippart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetslippart::OAIBetslippart() {
    this->initializeModel();
}

OAIBetslippart::~OAIBetslippart() {}

void OAIBetslippart::initializeModel() {

    m_each_way_available_isSet = false;
    m_each_way_available_isValid = false;

    m_include_in_multiple_isSet = false;
    m_include_in_multiple_isValid = false;

    m_leg_group_isSet = false;
    m_leg_group_isValid = false;

    m_price_changed_isSet = false;
    m_price_changed_isValid = false;

    m_price_den_isSet = false;
    m_price_den_isValid = false;

    m_price_num_isSet = false;
    m_price_num_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;

    m_single_available_isSet = false;
    m_single_available_isValid = false;

    m_starting_price_available_isSet = false;
    m_starting_price_available_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_changed_isSet = false;
    m_status_changed_isValid = false;
}

void OAIBetslippart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetslippart::fromJsonObject(QJsonObject json) {

    m_each_way_available_isValid = ::OpenAPI::fromJsonValue(m_each_way_available, json[QString("eachWayAvailable")]);
    m_each_way_available_isSet = !json[QString("eachWayAvailable")].isNull() && m_each_way_available_isValid;

    m_include_in_multiple_isValid = ::OpenAPI::fromJsonValue(m_include_in_multiple, json[QString("includeInMultiple")]);
    m_include_in_multiple_isSet = !json[QString("includeInMultiple")].isNull() && m_include_in_multiple_isValid;

    m_leg_group_isValid = ::OpenAPI::fromJsonValue(m_leg_group, json[QString("legGroup")]);
    m_leg_group_isSet = !json[QString("legGroup")].isNull() && m_leg_group_isValid;

    m_price_changed_isValid = ::OpenAPI::fromJsonValue(m_price_changed, json[QString("priceChanged")]);
    m_price_changed_isSet = !json[QString("priceChanged")].isNull() && m_price_changed_isValid;

    m_price_den_isValid = ::OpenAPI::fromJsonValue(m_price_den, json[QString("priceDen")]);
    m_price_den_isSet = !json[QString("priceDen")].isNull() && m_price_den_isValid;

    m_price_num_isValid = ::OpenAPI::fromJsonValue(m_price_num, json[QString("priceNum")]);
    m_price_num_isSet = !json[QString("priceNum")].isNull() && m_price_num_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("selectionId")]);
    m_selection_id_isSet = !json[QString("selectionId")].isNull() && m_selection_id_isValid;

    m_single_available_isValid = ::OpenAPI::fromJsonValue(m_single_available, json[QString("singleAvailable")]);
    m_single_available_isSet = !json[QString("singleAvailable")].isNull() && m_single_available_isValid;

    m_starting_price_available_isValid = ::OpenAPI::fromJsonValue(m_starting_price_available, json[QString("startingPriceAvailable")]);
    m_starting_price_available_isSet = !json[QString("startingPriceAvailable")].isNull() && m_starting_price_available_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_changed_isValid = ::OpenAPI::fromJsonValue(m_status_changed, json[QString("statusChanged")]);
    m_status_changed_isSet = !json[QString("statusChanged")].isNull() && m_status_changed_isValid;
}

QString OAIBetslippart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetslippart::asJsonObject() const {
    QJsonObject obj;
    if (m_each_way_available_isSet) {
        obj.insert(QString("eachWayAvailable"), ::OpenAPI::toJsonValue(m_each_way_available));
    }
    if (m_include_in_multiple_isSet) {
        obj.insert(QString("includeInMultiple"), ::OpenAPI::toJsonValue(m_include_in_multiple));
    }
    if (m_leg_group_isSet) {
        obj.insert(QString("legGroup"), ::OpenAPI::toJsonValue(m_leg_group));
    }
    if (m_price_changed_isSet) {
        obj.insert(QString("priceChanged"), ::OpenAPI::toJsonValue(m_price_changed));
    }
    if (m_price_den_isSet) {
        obj.insert(QString("priceDen"), ::OpenAPI::toJsonValue(m_price_den));
    }
    if (m_price_num_isSet) {
        obj.insert(QString("priceNum"), ::OpenAPI::toJsonValue(m_price_num));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("selectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    if (m_single_available_isSet) {
        obj.insert(QString("singleAvailable"), ::OpenAPI::toJsonValue(m_single_available));
    }
    if (m_starting_price_available_isSet) {
        obj.insert(QString("startingPriceAvailable"), ::OpenAPI::toJsonValue(m_starting_price_available));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_changed_isSet) {
        obj.insert(QString("statusChanged"), ::OpenAPI::toJsonValue(m_status_changed));
    }
    return obj;
}

bool OAIBetslippart::isEachWayAvailable() const {
    return m_each_way_available;
}
void OAIBetslippart::setEachWayAvailable(const bool &each_way_available) {
    m_each_way_available = each_way_available;
    m_each_way_available_isSet = true;
}

bool OAIBetslippart::is_each_way_available_Set() const{
    return m_each_way_available_isSet;
}

bool OAIBetslippart::is_each_way_available_Valid() const{
    return m_each_way_available_isValid;
}

bool OAIBetslippart::isIncludeInMultiple() const {
    return m_include_in_multiple;
}
void OAIBetslippart::setIncludeInMultiple(const bool &include_in_multiple) {
    m_include_in_multiple = include_in_multiple;
    m_include_in_multiple_isSet = true;
}

bool OAIBetslippart::is_include_in_multiple_Set() const{
    return m_include_in_multiple_isSet;
}

bool OAIBetslippart::is_include_in_multiple_Valid() const{
    return m_include_in_multiple_isValid;
}

qint32 OAIBetslippart::getLegGroup() const {
    return m_leg_group;
}
void OAIBetslippart::setLegGroup(const qint32 &leg_group) {
    m_leg_group = leg_group;
    m_leg_group_isSet = true;
}

bool OAIBetslippart::is_leg_group_Set() const{
    return m_leg_group_isSet;
}

bool OAIBetslippart::is_leg_group_Valid() const{
    return m_leg_group_isValid;
}

bool OAIBetslippart::isPriceChanged() const {
    return m_price_changed;
}
void OAIBetslippart::setPriceChanged(const bool &price_changed) {
    m_price_changed = price_changed;
    m_price_changed_isSet = true;
}

bool OAIBetslippart::is_price_changed_Set() const{
    return m_price_changed_isSet;
}

bool OAIBetslippart::is_price_changed_Valid() const{
    return m_price_changed_isValid;
}

qint32 OAIBetslippart::getPriceDen() const {
    return m_price_den;
}
void OAIBetslippart::setPriceDen(const qint32 &price_den) {
    m_price_den = price_den;
    m_price_den_isSet = true;
}

bool OAIBetslippart::is_price_den_Set() const{
    return m_price_den_isSet;
}

bool OAIBetslippart::is_price_den_Valid() const{
    return m_price_den_isValid;
}

qint32 OAIBetslippart::getPriceNum() const {
    return m_price_num;
}
void OAIBetslippart::setPriceNum(const qint32 &price_num) {
    m_price_num = price_num;
    m_price_num_isSet = true;
}

bool OAIBetslippart::is_price_num_Set() const{
    return m_price_num_isSet;
}

bool OAIBetslippart::is_price_num_Valid() const{
    return m_price_num_isValid;
}

qint32 OAIBetslippart::getPriceType() const {
    return m_price_type;
}
void OAIBetslippart::setPriceType(const qint32 &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAIBetslippart::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAIBetslippart::is_price_type_Valid() const{
    return m_price_type_isValid;
}

qint32 OAIBetslippart::getSelectionId() const {
    return m_selection_id;
}
void OAIBetslippart::setSelectionId(const qint32 &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAIBetslippart::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAIBetslippart::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

bool OAIBetslippart::isSingleAvailable() const {
    return m_single_available;
}
void OAIBetslippart::setSingleAvailable(const bool &single_available) {
    m_single_available = single_available;
    m_single_available_isSet = true;
}

bool OAIBetslippart::is_single_available_Set() const{
    return m_single_available_isSet;
}

bool OAIBetslippart::is_single_available_Valid() const{
    return m_single_available_isValid;
}

bool OAIBetslippart::isStartingPriceAvailable() const {
    return m_starting_price_available;
}
void OAIBetslippart::setStartingPriceAvailable(const bool &starting_price_available) {
    m_starting_price_available = starting_price_available;
    m_starting_price_available_isSet = true;
}

bool OAIBetslippart::is_starting_price_available_Set() const{
    return m_starting_price_available_isSet;
}

bool OAIBetslippart::is_starting_price_available_Valid() const{
    return m_starting_price_available_isValid;
}

QString OAIBetslippart::getStatus() const {
    return m_status;
}
void OAIBetslippart::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBetslippart::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBetslippart::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBetslippart::isStatusChanged() const {
    return m_status_changed;
}
void OAIBetslippart::setStatusChanged(const bool &status_changed) {
    m_status_changed = status_changed;
    m_status_changed_isSet = true;
}

bool OAIBetslippart::is_status_changed_Set() const{
    return m_status_changed_isSet;
}

bool OAIBetslippart::is_status_changed_Valid() const{
    return m_status_changed_isValid;
}

bool OAIBetslippart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_each_way_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_multiple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leg_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_price_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_changed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetslippart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_include_in_multiple_isValid && m_price_den_isValid && m_price_num_isValid && m_price_type_isValid && m_selection_id_isValid && true;
}

} // namespace OpenAPI
