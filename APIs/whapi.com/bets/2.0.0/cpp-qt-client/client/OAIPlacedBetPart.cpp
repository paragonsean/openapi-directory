/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacedBetPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacedBetPart::OAIPlacedBetPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacedBetPart::OAIPlacedBetPart() {
    this->initializeModel();
}

OAIPlacedBetPart::~OAIPlacedBetPart() {}

void OAIPlacedBetPart::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_each_way_den_isSet = false;
    m_each_way_den_isValid = false;

    m_each_way_num_isSet = false;
    m_each_way_num_isValid = false;

    m_each_way_places_isSet = false;
    m_each_way_places_isValid = false;

    m_event_description_isSet = false;
    m_event_description_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_market_description_isSet = false;
    m_event_market_description_isValid = false;

    m_event_type_description_isSet = false;
    m_event_type_description_isValid = false;

    m_handicap_isSet = false;
    m_handicap_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_den_isSet = false;
    m_price_den_isValid = false;

    m_price_formatted_isSet = false;
    m_price_formatted_isValid = false;

    m_price_num_isSet = false;
    m_price_num_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_rule4_deductions_isSet = false;
    m_rule4_deductions_isValid = false;

    m_selection_id_isSet = false;
    m_selection_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;
}

void OAIPlacedBetPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacedBetPart::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_each_way_den_isValid = ::OpenAPI::fromJsonValue(m_each_way_den, json[QString("eachWayDen")]);
    m_each_way_den_isSet = !json[QString("eachWayDen")].isNull() && m_each_way_den_isValid;

    m_each_way_num_isValid = ::OpenAPI::fromJsonValue(m_each_way_num, json[QString("eachWayNum")]);
    m_each_way_num_isSet = !json[QString("eachWayNum")].isNull() && m_each_way_num_isValid;

    m_each_way_places_isValid = ::OpenAPI::fromJsonValue(m_each_way_places, json[QString("eachWayPlaces")]);
    m_each_way_places_isSet = !json[QString("eachWayPlaces")].isNull() && m_each_way_places_isValid;

    m_event_description_isValid = ::OpenAPI::fromJsonValue(m_event_description, json[QString("eventDescription")]);
    m_event_description_isSet = !json[QString("eventDescription")].isNull() && m_event_description_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_market_description_isValid = ::OpenAPI::fromJsonValue(m_event_market_description, json[QString("eventMarketDescription")]);
    m_event_market_description_isSet = !json[QString("eventMarketDescription")].isNull() && m_event_market_description_isValid;

    m_event_type_description_isValid = ::OpenAPI::fromJsonValue(m_event_type_description, json[QString("eventTypeDescription")]);
    m_event_type_description_isSet = !json[QString("eventTypeDescription")].isNull() && m_event_type_description_isValid;

    m_handicap_isValid = ::OpenAPI::fromJsonValue(m_handicap, json[QString("handicap")]);
    m_handicap_isSet = !json[QString("handicap")].isNull() && m_handicap_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_den_isValid = ::OpenAPI::fromJsonValue(m_price_den, json[QString("priceDen")]);
    m_price_den_isSet = !json[QString("priceDen")].isNull() && m_price_den_isValid;

    m_price_formatted_isValid = ::OpenAPI::fromJsonValue(m_price_formatted, json[QString("priceFormatted")]);
    m_price_formatted_isSet = !json[QString("priceFormatted")].isNull() && m_price_formatted_isValid;

    m_price_num_isValid = ::OpenAPI::fromJsonValue(m_price_num, json[QString("priceNum")]);
    m_price_num_isSet = !json[QString("priceNum")].isNull() && m_price_num_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("priceType")]);
    m_price_type_isSet = !json[QString("priceType")].isNull() && m_price_type_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_rule4_deductions_isValid = ::OpenAPI::fromJsonValue(m_rule4_deductions, json[QString("rule4Deductions")]);
    m_rule4_deductions_isSet = !json[QString("rule4Deductions")].isNull() && m_rule4_deductions_isValid;

    m_selection_id_isValid = ::OpenAPI::fromJsonValue(m_selection_id, json[QString("selectionId")]);
    m_selection_id_isSet = !json[QString("selectionId")].isNull() && m_selection_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;
}

QString OAIPlacedBetPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacedBetPart::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_each_way_den_isSet) {
        obj.insert(QString("eachWayDen"), ::OpenAPI::toJsonValue(m_each_way_den));
    }
    if (m_each_way_num_isSet) {
        obj.insert(QString("eachWayNum"), ::OpenAPI::toJsonValue(m_each_way_num));
    }
    if (m_each_way_places_isSet) {
        obj.insert(QString("eachWayPlaces"), ::OpenAPI::toJsonValue(m_each_way_places));
    }
    if (m_event_description_isSet) {
        obj.insert(QString("eventDescription"), ::OpenAPI::toJsonValue(m_event_description));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_market_description_isSet) {
        obj.insert(QString("eventMarketDescription"), ::OpenAPI::toJsonValue(m_event_market_description));
    }
    if (m_event_type_description_isSet) {
        obj.insert(QString("eventTypeDescription"), ::OpenAPI::toJsonValue(m_event_type_description));
    }
    if (m_handicap_isSet) {
        obj.insert(QString("handicap"), ::OpenAPI::toJsonValue(m_handicap));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_den_isSet) {
        obj.insert(QString("priceDen"), ::OpenAPI::toJsonValue(m_price_den));
    }
    if (m_price_formatted.isSet()) {
        obj.insert(QString("priceFormatted"), ::OpenAPI::toJsonValue(m_price_formatted));
    }
    if (m_price_num_isSet) {
        obj.insert(QString("priceNum"), ::OpenAPI::toJsonValue(m_price_num));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("priceType"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_rule4_deductions_isSet) {
        obj.insert(QString("rule4Deductions"), ::OpenAPI::toJsonValue(m_rule4_deductions));
    }
    if (m_selection_id_isSet) {
        obj.insert(QString("selectionId"), ::OpenAPI::toJsonValue(m_selection_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    return obj;
}

QString OAIPlacedBetPart::getDescription() const {
    return m_description;
}
void OAIPlacedBetPart::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlacedBetPart::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlacedBetPart::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPlacedBetPart::getEachWayDen() const {
    return m_each_way_den;
}
void OAIPlacedBetPart::setEachWayDen(const qint32 &each_way_den) {
    m_each_way_den = each_way_den;
    m_each_way_den_isSet = true;
}

bool OAIPlacedBetPart::is_each_way_den_Set() const{
    return m_each_way_den_isSet;
}

bool OAIPlacedBetPart::is_each_way_den_Valid() const{
    return m_each_way_den_isValid;
}

qint32 OAIPlacedBetPart::getEachWayNum() const {
    return m_each_way_num;
}
void OAIPlacedBetPart::setEachWayNum(const qint32 &each_way_num) {
    m_each_way_num = each_way_num;
    m_each_way_num_isSet = true;
}

bool OAIPlacedBetPart::is_each_way_num_Set() const{
    return m_each_way_num_isSet;
}

bool OAIPlacedBetPart::is_each_way_num_Valid() const{
    return m_each_way_num_isValid;
}

qint32 OAIPlacedBetPart::getEachWayPlaces() const {
    return m_each_way_places;
}
void OAIPlacedBetPart::setEachWayPlaces(const qint32 &each_way_places) {
    m_each_way_places = each_way_places;
    m_each_way_places_isSet = true;
}

bool OAIPlacedBetPart::is_each_way_places_Set() const{
    return m_each_way_places_isSet;
}

bool OAIPlacedBetPart::is_each_way_places_Valid() const{
    return m_each_way_places_isValid;
}

QString OAIPlacedBetPart::getEventDescription() const {
    return m_event_description;
}
void OAIPlacedBetPart::setEventDescription(const QString &event_description) {
    m_event_description = event_description;
    m_event_description_isSet = true;
}

bool OAIPlacedBetPart::is_event_description_Set() const{
    return m_event_description_isSet;
}

bool OAIPlacedBetPart::is_event_description_Valid() const{
    return m_event_description_isValid;
}

QString OAIPlacedBetPart::getEventId() const {
    return m_event_id;
}
void OAIPlacedBetPart::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIPlacedBetPart::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIPlacedBetPart::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIPlacedBetPart::getEventMarketDescription() const {
    return m_event_market_description;
}
void OAIPlacedBetPart::setEventMarketDescription(const QString &event_market_description) {
    m_event_market_description = event_market_description;
    m_event_market_description_isSet = true;
}

bool OAIPlacedBetPart::is_event_market_description_Set() const{
    return m_event_market_description_isSet;
}

bool OAIPlacedBetPart::is_event_market_description_Valid() const{
    return m_event_market_description_isValid;
}

QString OAIPlacedBetPart::getEventTypeDescription() const {
    return m_event_type_description;
}
void OAIPlacedBetPart::setEventTypeDescription(const QString &event_type_description) {
    m_event_type_description = event_type_description;
    m_event_type_description_isSet = true;
}

bool OAIPlacedBetPart::is_event_type_description_Set() const{
    return m_event_type_description_isSet;
}

bool OAIPlacedBetPart::is_event_type_description_Valid() const{
    return m_event_type_description_isValid;
}

double OAIPlacedBetPart::getHandicap() const {
    return m_handicap;
}
void OAIPlacedBetPart::setHandicap(const double &handicap) {
    m_handicap = handicap;
    m_handicap_isSet = true;
}

bool OAIPlacedBetPart::is_handicap_Set() const{
    return m_handicap_isSet;
}

bool OAIPlacedBetPart::is_handicap_Valid() const{
    return m_handicap_isValid;
}

qint32 OAIPlacedBetPart::getNumber() const {
    return m_number;
}
void OAIPlacedBetPart::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlacedBetPart::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlacedBetPart::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlacedBetPart::getPriceDen() const {
    return m_price_den;
}
void OAIPlacedBetPart::setPriceDen(const qint32 &price_den) {
    m_price_den = price_den;
    m_price_den_isSet = true;
}

bool OAIPlacedBetPart::is_price_den_Set() const{
    return m_price_den_isSet;
}

bool OAIPlacedBetPart::is_price_den_Valid() const{
    return m_price_den_isValid;
}

OAIPriceFormatted OAIPlacedBetPart::getPriceFormatted() const {
    return m_price_formatted;
}
void OAIPlacedBetPart::setPriceFormatted(const OAIPriceFormatted &price_formatted) {
    m_price_formatted = price_formatted;
    m_price_formatted_isSet = true;
}

bool OAIPlacedBetPart::is_price_formatted_Set() const{
    return m_price_formatted_isSet;
}

bool OAIPlacedBetPart::is_price_formatted_Valid() const{
    return m_price_formatted_isValid;
}

qint32 OAIPlacedBetPart::getPriceNum() const {
    return m_price_num;
}
void OAIPlacedBetPart::setPriceNum(const qint32 &price_num) {
    m_price_num = price_num;
    m_price_num_isSet = true;
}

bool OAIPlacedBetPart::is_price_num_Set() const{
    return m_price_num_isSet;
}

bool OAIPlacedBetPart::is_price_num_Valid() const{
    return m_price_num_isValid;
}

QString OAIPlacedBetPart::getPriceType() const {
    return m_price_type;
}
void OAIPlacedBetPart::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAIPlacedBetPart::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAIPlacedBetPart::is_price_type_Valid() const{
    return m_price_type_isValid;
}

QString OAIPlacedBetPart::getResult() const {
    return m_result;
}
void OAIPlacedBetPart::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIPlacedBetPart::is_result_Set() const{
    return m_result_isSet;
}

bool OAIPlacedBetPart::is_result_Valid() const{
    return m_result_isValid;
}

double OAIPlacedBetPart::getRule4Deductions() const {
    return m_rule4_deductions;
}
void OAIPlacedBetPart::setRule4Deductions(const double &rule4_deductions) {
    m_rule4_deductions = rule4_deductions;
    m_rule4_deductions_isSet = true;
}

bool OAIPlacedBetPart::is_rule4_deductions_Set() const{
    return m_rule4_deductions_isSet;
}

bool OAIPlacedBetPart::is_rule4_deductions_Valid() const{
    return m_rule4_deductions_isValid;
}

QString OAIPlacedBetPart::getSelectionId() const {
    return m_selection_id;
}
void OAIPlacedBetPart::setSelectionId(const QString &selection_id) {
    m_selection_id = selection_id;
    m_selection_id_isSet = true;
}

bool OAIPlacedBetPart::is_selection_id_Set() const{
    return m_selection_id_isSet;
}

bool OAIPlacedBetPart::is_selection_id_Valid() const{
    return m_selection_id_isValid;
}

QString OAIPlacedBetPart::getStartDateTime() const {
    return m_start_date_time;
}
void OAIPlacedBetPart::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIPlacedBetPart::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIPlacedBetPart::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

bool OAIPlacedBetPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_market_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handicap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_formatted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule4_deductions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacedBetPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_event_description_isValid && m_event_id_isValid && m_number_isValid && m_price_den_isValid && m_price_num_isValid && m_price_type_isValid && m_result_isValid && m_start_date_time_isValid && true;
}

} // namespace OpenAPI
