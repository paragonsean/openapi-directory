/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBetPlaced.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBetPlaced::OAIBetPlaced(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBetPlaced::OAIBetPlaced() {
    this->initializeModel();
}

OAIBetPlaced::~OAIBetPlaced() {}

void OAIBetPlaced::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_num_lines_isSet = false;
    m_num_lines_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_placed_date_time_isSet = false;
    m_placed_date_time_isValid = false;

    m_receipt_isSet = false;
    m_receipt_isValid = false;

    m_total_stake_isSet = false;
    m_total_stake_isValid = false;
}

void OAIBetPlaced::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBetPlaced::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_num_lines_isValid = ::OpenAPI::fromJsonValue(m_num_lines, json[QString("numLines")]);
    m_num_lines_isSet = !json[QString("numLines")].isNull() && m_num_lines_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_placed_date_time_isValid = ::OpenAPI::fromJsonValue(m_placed_date_time, json[QString("placedDateTime")]);
    m_placed_date_time_isSet = !json[QString("placedDateTime")].isNull() && m_placed_date_time_isValid;

    m_receipt_isValid = ::OpenAPI::fromJsonValue(m_receipt, json[QString("receipt")]);
    m_receipt_isSet = !json[QString("receipt")].isNull() && m_receipt_isValid;

    m_total_stake_isValid = ::OpenAPI::fromJsonValue(m_total_stake, json[QString("totalStake")]);
    m_total_stake_isSet = !json[QString("totalStake")].isNull() && m_total_stake_isValid;
}

QString OAIBetPlaced::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBetPlaced::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_num_lines_isSet) {
        obj.insert(QString("numLines"), ::OpenAPI::toJsonValue(m_num_lines));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_placed_date_time_isSet) {
        obj.insert(QString("placedDateTime"), ::OpenAPI::toJsonValue(m_placed_date_time));
    }
    if (m_receipt_isSet) {
        obj.insert(QString("receipt"), ::OpenAPI::toJsonValue(m_receipt));
    }
    if (m_total_stake_isSet) {
        obj.insert(QString("totalStake"), ::OpenAPI::toJsonValue(m_total_stake));
    }
    return obj;
}

QString OAIBetPlaced::getId() const {
    return m_id;
}
void OAIBetPlaced::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBetPlaced::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBetPlaced::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBetPlaced::getNumLines() const {
    return m_num_lines;
}
void OAIBetPlaced::setNumLines(const qint32 &num_lines) {
    m_num_lines = num_lines;
    m_num_lines_isSet = true;
}

bool OAIBetPlaced::is_num_lines_Set() const{
    return m_num_lines_isSet;
}

bool OAIBetPlaced::is_num_lines_Valid() const{
    return m_num_lines_isValid;
}

double OAIBetPlaced::getNumber() const {
    return m_number;
}
void OAIBetPlaced::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIBetPlaced::is_number_Set() const{
    return m_number_isSet;
}

bool OAIBetPlaced::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIBetPlaced::getPlacedDateTime() const {
    return m_placed_date_time;
}
void OAIBetPlaced::setPlacedDateTime(const QString &placed_date_time) {
    m_placed_date_time = placed_date_time;
    m_placed_date_time_isSet = true;
}

bool OAIBetPlaced::is_placed_date_time_Set() const{
    return m_placed_date_time_isSet;
}

bool OAIBetPlaced::is_placed_date_time_Valid() const{
    return m_placed_date_time_isValid;
}

QString OAIBetPlaced::getReceipt() const {
    return m_receipt;
}
void OAIBetPlaced::setReceipt(const QString &receipt) {
    m_receipt = receipt;
    m_receipt_isSet = true;
}

bool OAIBetPlaced::is_receipt_Set() const{
    return m_receipt_isSet;
}

bool OAIBetPlaced::is_receipt_Valid() const{
    return m_receipt_isValid;
}

double OAIBetPlaced::getTotalStake() const {
    return m_total_stake;
}
void OAIBetPlaced::setTotalStake(const double &total_stake) {
    m_total_stake = total_stake;
    m_total_stake_isSet = true;
}

bool OAIBetPlaced::is_total_stake_Set() const{
    return m_total_stake_isSet;
}

bool OAIBetPlaced::is_total_stake_Valid() const{
    return m_total_stake_isValid;
}

bool OAIBetPlaced::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placed_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stake_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBetPlaced::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_receipt_isValid && true;
}

} // namespace OpenAPI
