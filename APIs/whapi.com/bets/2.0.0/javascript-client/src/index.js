/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Bet from './model/Bet';
import BetDelayed from './model/BetDelayed';
import BetHistoryResponse from './model/BetHistoryResponse';
import BetPlaced from './model/BetPlaced';
import BetSlipRequest from './model/BetSlipRequest';
import BetSlipResponse from './model/BetSlipResponse';
import Betslipbet from './model/Betslipbet';
import Betslipleg from './model/Betslipleg';
import Betslippart from './model/Betslippart';
import CashInResponse from './model/CashInResponse';
import ComplexBetRequestBody from './model/ComplexBetRequestBody';
import Error from './model/Error';
import Errors from './model/Errors';
import FreeBetDetail from './model/FreeBetDetail';
import Leg from './model/Leg';
import Part from './model/Part';
import PlacedBet from './model/PlacedBet';
import PlacedBetLeg from './model/PlacedBetLeg';
import PlacedBetPart from './model/PlacedBetPart';
import PriceFormatted from './model/PriceFormatted';
import SingleBetRequestBody from './model/SingleBetRequestBody';
import Solution from './model/Solution';
import BetsApi from './api/BetsApi';


/**
* The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. &lt;br /&gt;&lt;br /&gt; The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BetsApi = require('index'); // See note below*.
* var xxxSvc = new BetsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BetsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BetsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BetsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Bet model constructor.
     * @property {module:model/Bet}
     */
    Bet,

    /**
     * The BetDelayed model constructor.
     * @property {module:model/BetDelayed}
     */
    BetDelayed,

    /**
     * The BetHistoryResponse model constructor.
     * @property {module:model/BetHistoryResponse}
     */
    BetHistoryResponse,

    /**
     * The BetPlaced model constructor.
     * @property {module:model/BetPlaced}
     */
    BetPlaced,

    /**
     * The BetSlipRequest model constructor.
     * @property {module:model/BetSlipRequest}
     */
    BetSlipRequest,

    /**
     * The BetSlipResponse model constructor.
     * @property {module:model/BetSlipResponse}
     */
    BetSlipResponse,

    /**
     * The Betslipbet model constructor.
     * @property {module:model/Betslipbet}
     */
    Betslipbet,

    /**
     * The Betslipleg model constructor.
     * @property {module:model/Betslipleg}
     */
    Betslipleg,

    /**
     * The Betslippart model constructor.
     * @property {module:model/Betslippart}
     */
    Betslippart,

    /**
     * The CashInResponse model constructor.
     * @property {module:model/CashInResponse}
     */
    CashInResponse,

    /**
     * The ComplexBetRequestBody model constructor.
     * @property {module:model/ComplexBetRequestBody}
     */
    ComplexBetRequestBody,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Errors model constructor.
     * @property {module:model/Errors}
     */
    Errors,

    /**
     * The FreeBetDetail model constructor.
     * @property {module:model/FreeBetDetail}
     */
    FreeBetDetail,

    /**
     * The Leg model constructor.
     * @property {module:model/Leg}
     */
    Leg,

    /**
     * The Part model constructor.
     * @property {module:model/Part}
     */
    Part,

    /**
     * The PlacedBet model constructor.
     * @property {module:model/PlacedBet}
     */
    PlacedBet,

    /**
     * The PlacedBetLeg model constructor.
     * @property {module:model/PlacedBetLeg}
     */
    PlacedBetLeg,

    /**
     * The PlacedBetPart model constructor.
     * @property {module:model/PlacedBetPart}
     */
    PlacedBetPart,

    /**
     * The PriceFormatted model constructor.
     * @property {module:model/PriceFormatted}
     */
    PriceFormatted,

    /**
     * The SingleBetRequestBody model constructor.
     * @property {module:model/SingleBetRequestBody}
     */
    SingleBetRequestBody,

    /**
     * The Solution model constructor.
     * @property {module:model/Solution}
     */
    Solution,

    /**
    * The BetsApi service constructor.
    * @property {module:api/BetsApi}
    */
    BetsApi
};
