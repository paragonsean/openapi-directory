/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetDelayed from '../model/BetDelayed';
import BetHistoryResponse from '../model/BetHistoryResponse';
import BetPlaced from '../model/BetPlaced';
import BetSlipRequest from '../model/BetSlipRequest';
import BetSlipResponse from '../model/BetSlipResponse';
import CashInResponse from '../model/CashInResponse';
import ComplexBetRequestBody from '../model/ComplexBetRequestBody';
import Errors from '../model/Errors';
import FreeBetDetail from '../model/FreeBetDetail';
import SingleBetRequestBody from '../model/SingleBetRequestBody';

/**
* Bets service.
* @module api/BetsApi
* @version 2.0.0
*/
export default class BetsApi {

    /**
    * Constructs a new BetsApi. 
    * @alias module:api/BetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cashin operation.
     * @callback module:api/BetsApi~cashinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashInResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
     * Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket The ticket obtained from the sessions API
     * @param {String} betId The identifier of the bet
     * @param {Number} cashInValue The cash in value of the bet
     * @param {String} cashinBetDelayId The ID of this bet delay
     * @param {module:api/BetsApi~cashinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashInResponse}
     */
    cashin(apiKey, apiSecret, apiTicket, betId, cashInValue, cashinBetDelayId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling cashin");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling cashin");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling cashin");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling cashin");
      }
      // verify the required parameter 'cashInValue' is set
      if (cashInValue === undefined || cashInValue === null) {
        throw new Error("Missing the required parameter 'cashInValue' when calling cashin");
      }
      // verify the required parameter 'cashinBetDelayId' is set
      if (cashinBetDelayId === undefined || cashinBetDelayId === null) {
        throw new Error("Missing the required parameter 'cashinBetDelayId' when calling cashin");
      }

      let pathParams = {
        'betId': betId
      };
      let queryParams = {
        'cashInValue': cashInValue,
        'cashinBetDelayId': cashinBetDelayId
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CashInResponse;
      return this.apiClient.callApi(
        '/{betId}/cashin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBetHistory operation.
     * @callback module:api/BetsApi~getBetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the customer’s bet history.
     * Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket The ticket obtained from the sessions API
     * @param {String} dateFrom The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} dateTo The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {Number} [page = 1)] The index of the page to return
     * @param {Number} [pageSize = 100)] The number of results per page
     * @param {String} [sort = 'transDateTime,asc')] The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently
     * @param {Boolean} [settled] Filter by settled bets. If omitted, both settled and unsettled will be returned.
     * @param {module:api/BetsApi~getBetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetHistoryResponse}
     */
    getBetHistory(apiKey, apiSecret, apiTicket, dateFrom, dateTo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getBetHistory");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getBetHistory");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling getBetHistory");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling getBetHistory");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling getBetHistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'dateFrom': dateFrom,
        'dateTo': dateTo,
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort'],
        'settled': opts['settled']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetHistoryResponse;
      return this.apiClient.callApi(
        '/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFreeBets operation.
     * @callback module:api/BetsApi~getFreeBetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FreeBetDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns available free bets
     * Retrieves the current free bets available for a customer.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket The ticket obtained from the sessions API
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {module:api/BetsApi~getFreeBetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FreeBetDetail>}
     */
    getFreeBets(apiKey, apiSecret, apiTicket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFreeBets");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getFreeBets");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling getFreeBets");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv')
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FreeBetDetail];
      return this.apiClient.callApi(
        '/freebets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeComplexBet operation.
     * @callback module:api/BetsApi~placeComplexBetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BetPlaced>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a multiple or a complex bet.
     * Places a multiple or a complex bet.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket The ticket obtained from the sessions API
     * @param {module:model/ComplexBetRequestBody} complexBetRequestBody Complex bet request body
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {module:api/BetsApi~placeComplexBetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BetPlaced>}
     */
    placeComplexBet(apiKey, apiSecret, apiTicket, complexBetRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = complexBetRequestBody;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling placeComplexBet");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling placeComplexBet");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling placeComplexBet");
      }
      // verify the required parameter 'complexBetRequestBody' is set
      if (complexBetRequestBody === undefined || complexBetRequestBody === null) {
        throw new Error("Missing the required parameter 'complexBetRequestBody' when calling placeComplexBet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv')
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BetPlaced];
      return this.apiClient.callApi(
        '/bet/complex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeSingleBet operation.
     * @callback module:api/BetsApi~placeSingleBetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BetPlaced>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places a single bet
     * Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} apiTicket The ticket obtained from the sessions API
     * @param {module:model/SingleBetRequestBody} singleBetRequestBody Single bet request body
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {module:api/BetsApi~placeSingleBetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BetPlaced>}
     */
    placeSingleBet(apiKey, apiSecret, apiTicket, singleBetRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = singleBetRequestBody;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling placeSingleBet");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling placeSingleBet");
      }
      // verify the required parameter 'apiTicket' is set
      if (apiTicket === undefined || apiTicket === null) {
        throw new Error("Missing the required parameter 'apiTicket' when calling placeSingleBet");
      }
      // verify the required parameter 'singleBetRequestBody' is set
      if (singleBetRequestBody === undefined || singleBetRequestBody === null) {
        throw new Error("Missing the required parameter 'singleBetRequestBody' when calling placeSingleBet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv')
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'apiTicket': apiTicket
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BetPlaced];
      return this.apiClient.callApi(
        '/bet/single', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateBetslip operation.
     * @callback module:api/BetsApi~validateBetslipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetSlipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {module:model/BetSlipRequest} betSlipRequest Betslip Body
     * @param {Object} opts Optional parameters
     * @param {String} [expanded] Allows for all bets for given selections to be returned - not just the specified type
     * @param {module:api/BetsApi~validateBetslipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetSlipResponse}
     */
    validateBetslip(apiKey, apiSecret, betSlipRequest, opts, callback) {
      opts = opts || {};
      let postBody = betSlipRequest;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling validateBetslip");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling validateBetslip");
      }
      // verify the required parameter 'betSlipRequest' is set
      if (betSlipRequest === undefined || betSlipRequest === null) {
        throw new Error("Missing the required parameter 'betSlipRequest' when calling validateBetslip");
      }

      let pathParams = {
      };
      let queryParams = {
        'expanded': opts['expanded']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetSlipResponse;
      return this.apiClient.callApi(
        '/betslips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
