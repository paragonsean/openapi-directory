/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BetDelayed model module.
 * @module model/BetDelayed
 * @version 2.0.0
 */
class BetDelayed {
    /**
     * Constructs a new <code>BetDelayed</code>.
     * @alias module:model/BetDelayed
     * @param delayPeriodSeconds {Number} The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.
     * @param delayedBetId {String} The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.
     * @param id {String} The number of the bet
     */
    constructor(delayPeriodSeconds, delayedBetId, id) { 
        
        BetDelayed.initialize(this, delayPeriodSeconds, delayedBetId, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, delayPeriodSeconds, delayedBetId, id) { 
        obj['delayPeriodSeconds'] = delayPeriodSeconds;
        obj['delayedBetId'] = delayedBetId;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>BetDelayed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BetDelayed} obj Optional instance to populate.
     * @return {module:model/BetDelayed} The populated <code>BetDelayed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BetDelayed();

            if (data.hasOwnProperty('delayPeriodSeconds')) {
                obj['delayPeriodSeconds'] = ApiClient.convertToType(data['delayPeriodSeconds'], 'Number');
            }
            if (data.hasOwnProperty('delayedBetId')) {
                obj['delayedBetId'] = ApiClient.convertToType(data['delayedBetId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BetDelayed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BetDelayed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BetDelayed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['delayedBetId'] && !(typeof data['delayedBetId'] === 'string' || data['delayedBetId'] instanceof String)) {
            throw new Error("Expected the field `delayedBetId` to be a primitive type in the JSON string but got " + data['delayedBetId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

BetDelayed.RequiredProperties = ["delayPeriodSeconds", "delayedBetId", "id"];

/**
 * The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.
 * @member {Number} delayPeriodSeconds
 */
BetDelayed.prototype['delayPeriodSeconds'] = undefined;

/**
 * The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.
 * @member {String} delayedBetId
 */
BetDelayed.prototype['delayedBetId'] = undefined;

/**
 * The number of the bet
 * @member {String} id
 */
BetDelayed.prototype['id'] = undefined;

/**
 * Number of the bet if this is part of a multiple bet
 * @member {Number} number
 */
BetDelayed.prototype['number'] = undefined;






export default BetDelayed;

