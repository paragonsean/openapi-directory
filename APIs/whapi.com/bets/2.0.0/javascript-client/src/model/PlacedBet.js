/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlacedBetLeg from './PlacedBetLeg';

/**
 * The PlacedBet model module.
 * @module model/PlacedBet
 * @version 2.0.0
 */
class PlacedBet {
    /**
     * Constructs a new <code>PlacedBet</code>.
     * @alias module:model/PlacedBet
     * @param estimatedReturns {Number} The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.
     * @param id {String} The unique identifier of the bet
     * @param settled {Boolean} Whether the bet is settled
     * @param stake {Number} The bet stake, which represents the total value of the bet. For example: £ 12.34
     * @param status {String} The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out
     * @param transDateTime {String} The time the bet was placed
     * @param typeCode {String} The bet type code of the bet. For example: TBL (Treble)
     * @param typeName {String} The name of the bet type. For example: Double
     * @param winnings {Number} Actual value of the returns from this bet
     */
    constructor(estimatedReturns, id, settled, stake, status, transDateTime, typeCode, typeName, winnings) { 
        
        PlacedBet.initialize(this, estimatedReturns, id, settled, stake, status, transDateTime, typeCode, typeName, winnings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, estimatedReturns, id, settled, stake, status, transDateTime, typeCode, typeName, winnings) { 
        obj['estimatedReturns'] = estimatedReturns;
        obj['id'] = id;
        obj['settled'] = settled;
        obj['stake'] = stake;
        obj['status'] = status;
        obj['transDateTime'] = transDateTime;
        obj['typeCode'] = typeCode;
        obj['typeName'] = typeName;
        obj['winnings'] = winnings;
    }

    /**
     * Constructs a <code>PlacedBet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlacedBet} obj Optional instance to populate.
     * @return {module:model/PlacedBet} The populated <code>PlacedBet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlacedBet();

            if (data.hasOwnProperty('cashinValue')) {
                obj['cashinValue'] = ApiClient.convertToType(data['cashinValue'], 'Number');
            }
            if (data.hasOwnProperty('estimatedReturns')) {
                obj['estimatedReturns'] = ApiClient.convertToType(data['estimatedReturns'], 'Number');
            }
            if (data.hasOwnProperty('freeBetValue')) {
                obj['freeBetValue'] = ApiClient.convertToType(data['freeBetValue'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('legs')) {
                obj['legs'] = ApiClient.convertToType(data['legs'], [PlacedBetLeg]);
            }
            if (data.hasOwnProperty('numLines')) {
                obj['numLines'] = ApiClient.convertToType(data['numLines'], 'Number');
            }
            if (data.hasOwnProperty('numSelections')) {
                obj['numSelections'] = ApiClient.convertToType(data['numSelections'], 'Number');
            }
            if (data.hasOwnProperty('receipt')) {
                obj['receipt'] = ApiClient.convertToType(data['receipt'], 'String');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('stake')) {
                obj['stake'] = ApiClient.convertToType(data['stake'], 'Number');
            }
            if (data.hasOwnProperty('stakePerLine')) {
                obj['stakePerLine'] = ApiClient.convertToType(data['stakePerLine'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transDateTime')) {
                obj['transDateTime'] = ApiClient.convertToType(data['transDateTime'], 'String');
            }
            if (data.hasOwnProperty('typeCode')) {
                obj['typeCode'] = ApiClient.convertToType(data['typeCode'], 'String');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('winnings')) {
                obj['winnings'] = ApiClient.convertToType(data['winnings'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlacedBet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlacedBet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlacedBet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['legs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['legs'])) {
                throw new Error("Expected the field `legs` to be an array in the JSON data but got " + data['legs']);
            }
            // validate the optional field `legs` (array)
            for (const item of data['legs']) {
                PlacedBetLeg.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['receipt'] && !(typeof data['receipt'] === 'string' || data['receipt'] instanceof String)) {
            throw new Error("Expected the field `receipt` to be a primitive type in the JSON string but got " + data['receipt']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transDateTime'] && !(typeof data['transDateTime'] === 'string' || data['transDateTime'] instanceof String)) {
            throw new Error("Expected the field `transDateTime` to be a primitive type in the JSON string but got " + data['transDateTime']);
        }
        // ensure the json data is a string
        if (data['typeCode'] && !(typeof data['typeCode'] === 'string' || data['typeCode'] instanceof String)) {
            throw new Error("Expected the field `typeCode` to be a primitive type in the JSON string but got " + data['typeCode']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }

        return true;
    }


}

PlacedBet.RequiredProperties = ["estimatedReturns", "id", "settled", "stake", "status", "transDateTime", "typeCode", "typeName", "winnings"];

/**
 * The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available
 * @member {Number} cashinValue
 */
PlacedBet.prototype['cashinValue'] = undefined;

/**
 * The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.
 * @member {Number} estimatedReturns
 */
PlacedBet.prototype['estimatedReturns'] = undefined;

/**
 * If a free bet token is used for the bet, this element represents the value
 * @member {Number} freeBetValue
 */
PlacedBet.prototype['freeBetValue'] = undefined;

/**
 * The unique identifier of the bet
 * @member {String} id
 */
PlacedBet.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/PlacedBetLeg>} legs
 */
PlacedBet.prototype['legs'] = undefined;

/**
 * Number of lines of bets
 * @member {Number} numLines
 */
PlacedBet.prototype['numLines'] = undefined;

/**
 * Number of selections that the bet is made of
 * @member {Number} numSelections
 */
PlacedBet.prototype['numSelections'] = undefined;

/**
 * The unique identifier of the receipt for the bet
 * @member {String} receipt
 */
PlacedBet.prototype['receipt'] = undefined;

/**
 * Whether the bet is settled
 * @member {Boolean} settled
 */
PlacedBet.prototype['settled'] = undefined;

/**
 * The bet stake, which represents the total value of the bet. For example: £ 12.34
 * @member {Number} stake
 */
PlacedBet.prototype['stake'] = undefined;

/**
 * The individual stake on each line of the bet. For example: £ 6.17
 * @member {Number} stakePerLine
 */
PlacedBet.prototype['stakePerLine'] = undefined;

/**
 * The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out
 * @member {String} status
 */
PlacedBet.prototype['status'] = undefined;

/**
 * The time the bet was placed
 * @member {String} transDateTime
 */
PlacedBet.prototype['transDateTime'] = undefined;

/**
 * The bet type code of the bet. For example: TBL (Treble)
 * @member {String} typeCode
 */
PlacedBet.prototype['typeCode'] = undefined;

/**
 * The name of the bet type. For example: Double
 * @member {String} typeName
 */
PlacedBet.prototype['typeName'] = undefined;

/**
 * Actual value of the returns from this bet
 * @member {Number} winnings
 */
PlacedBet.prototype['winnings'] = undefined;






export default PlacedBet;

