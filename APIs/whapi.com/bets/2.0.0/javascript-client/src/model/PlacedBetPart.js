/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PriceFormatted from './PriceFormatted';

/**
 * The PlacedBetPart model module.
 * @module model/PlacedBetPart
 * @version 2.0.0
 */
class PlacedBetPart {
    /**
     * Constructs a new <code>PlacedBetPart</code>.
     * @alias module:model/PlacedBetPart
     * @param description {String} Human-friendly description of the bet
     * @param eventDescription {String} The description of the event
     * @param eventId {String} Unique identifier of the event
     * @param number {Number} The number of the bet
     * @param priceDen {Number} When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
     * @param priceNum {Number} When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
     * @param priceType {String} The price type chosen when the bet was placed. For example: L (Win)
     * @param result {String} The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available
     * @param startDateTime {String} Time the event will start. For example: 2013-01-30 11:01:01
     */
    constructor(description, eventDescription, eventId, number, priceDen, priceNum, priceType, result, startDateTime) { 
        
        PlacedBetPart.initialize(this, description, eventDescription, eventId, number, priceDen, priceNum, priceType, result, startDateTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, eventDescription, eventId, number, priceDen, priceNum, priceType, result, startDateTime) { 
        obj['description'] = description;
        obj['eventDescription'] = eventDescription;
        obj['eventId'] = eventId;
        obj['number'] = number;
        obj['priceDen'] = priceDen;
        obj['priceNum'] = priceNum;
        obj['priceType'] = priceType;
        obj['result'] = result;
        obj['startDateTime'] = startDateTime;
    }

    /**
     * Constructs a <code>PlacedBetPart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlacedBetPart} obj Optional instance to populate.
     * @return {module:model/PlacedBetPart} The populated <code>PlacedBetPart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlacedBetPart();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eachWayDen')) {
                obj['eachWayDen'] = ApiClient.convertToType(data['eachWayDen'], 'Number');
            }
            if (data.hasOwnProperty('eachWayNum')) {
                obj['eachWayNum'] = ApiClient.convertToType(data['eachWayNum'], 'Number');
            }
            if (data.hasOwnProperty('eachWayPlaces')) {
                obj['eachWayPlaces'] = ApiClient.convertToType(data['eachWayPlaces'], 'Number');
            }
            if (data.hasOwnProperty('eventDescription')) {
                obj['eventDescription'] = ApiClient.convertToType(data['eventDescription'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('eventMarketDescription')) {
                obj['eventMarketDescription'] = ApiClient.convertToType(data['eventMarketDescription'], 'String');
            }
            if (data.hasOwnProperty('eventTypeDescription')) {
                obj['eventTypeDescription'] = ApiClient.convertToType(data['eventTypeDescription'], 'String');
            }
            if (data.hasOwnProperty('handicap')) {
                obj['handicap'] = ApiClient.convertToType(data['handicap'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('priceDen')) {
                obj['priceDen'] = ApiClient.convertToType(data['priceDen'], 'Number');
            }
            if (data.hasOwnProperty('priceFormatted')) {
                obj['priceFormatted'] = PriceFormatted.constructFromObject(data['priceFormatted']);
            }
            if (data.hasOwnProperty('priceNum')) {
                obj['priceNum'] = ApiClient.convertToType(data['priceNum'], 'Number');
            }
            if (data.hasOwnProperty('priceType')) {
                obj['priceType'] = ApiClient.convertToType(data['priceType'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('rule4Deductions')) {
                obj['rule4Deductions'] = ApiClient.convertToType(data['rule4Deductions'], 'Number');
            }
            if (data.hasOwnProperty('selectionId')) {
                obj['selectionId'] = ApiClient.convertToType(data['selectionId'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlacedBetPart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlacedBetPart</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlacedBetPart.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventDescription'] && !(typeof data['eventDescription'] === 'string' || data['eventDescription'] instanceof String)) {
            throw new Error("Expected the field `eventDescription` to be a primitive type in the JSON string but got " + data['eventDescription']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['eventMarketDescription'] && !(typeof data['eventMarketDescription'] === 'string' || data['eventMarketDescription'] instanceof String)) {
            throw new Error("Expected the field `eventMarketDescription` to be a primitive type in the JSON string but got " + data['eventMarketDescription']);
        }
        // ensure the json data is a string
        if (data['eventTypeDescription'] && !(typeof data['eventTypeDescription'] === 'string' || data['eventTypeDescription'] instanceof String)) {
            throw new Error("Expected the field `eventTypeDescription` to be a primitive type in the JSON string but got " + data['eventTypeDescription']);
        }
        // validate the optional field `priceFormatted`
        if (data['priceFormatted']) { // data not null
          PriceFormatted.validateJSON(data['priceFormatted']);
        }
        // ensure the json data is a string
        if (data['priceType'] && !(typeof data['priceType'] === 'string' || data['priceType'] instanceof String)) {
            throw new Error("Expected the field `priceType` to be a primitive type in the JSON string but got " + data['priceType']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['selectionId'] && !(typeof data['selectionId'] === 'string' || data['selectionId'] instanceof String)) {
            throw new Error("Expected the field `selectionId` to be a primitive type in the JSON string but got " + data['selectionId']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }

        return true;
    }


}

PlacedBetPart.RequiredProperties = ["description", "eventDescription", "eventId", "number", "priceDen", "priceNum", "priceType", "result", "startDateTime"];

/**
 * Human-friendly description of the bet
 * @member {String} description
 */
PlacedBetPart.prototype['description'] = undefined;

/**
 * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
 * @member {Number} eachWayDen
 */
PlacedBetPart.prototype['eachWayDen'] = undefined;

/**
 * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
 * @member {Number} eachWayNum
 */
PlacedBetPart.prototype['eachWayNum'] = undefined;

/**
 * The Each-way places available for the bet
 * @member {Number} eachWayPlaces
 */
PlacedBetPart.prototype['eachWayPlaces'] = undefined;

/**
 * The description of the event
 * @member {String} eventDescription
 */
PlacedBetPart.prototype['eventDescription'] = undefined;

/**
 * Unique identifier of the event
 * @member {String} eventId
 */
PlacedBetPart.prototype['eventId'] = undefined;

/**
 * The description of the market within an event
 * @member {String} eventMarketDescription
 */
PlacedBetPart.prototype['eventMarketDescription'] = undefined;

/**
 * The description of type of the event
 * @member {String} eventTypeDescription
 */
PlacedBetPart.prototype['eventTypeDescription'] = undefined;

/**
 * Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)
 * @member {Number} handicap
 */
PlacedBetPart.prototype['handicap'] = undefined;

/**
 * The number of the bet
 * @member {Number} number
 */
PlacedBetPart.prototype['number'] = undefined;

/**
 * When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
 * @member {Number} priceDen
 */
PlacedBetPart.prototype['priceDen'] = undefined;

/**
 * @member {module:model/PriceFormatted} priceFormatted
 */
PlacedBetPart.prototype['priceFormatted'] = undefined;

/**
 * When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
 * @member {Number} priceNum
 */
PlacedBetPart.prototype['priceNum'] = undefined;

/**
 * The price type chosen when the bet was placed. For example: L (Win)
 * @member {String} priceType
 */
PlacedBetPart.prototype['priceType'] = undefined;

/**
 * The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available
 * @member {String} result
 */
PlacedBetPart.prototype['result'] = undefined;

/**
 * The official scale of deductions that apply when a runner is withdrawn
 * @member {Number} rule4Deductions
 */
PlacedBetPart.prototype['rule4Deductions'] = undefined;

/**
 * Unique identifier of the selection
 * @member {String} selectionId
 */
PlacedBetPart.prototype['selectionId'] = undefined;

/**
 * Time the event will start. For example: 2013-01-30 11:01:01
 * @member {String} startDateTime
 */
PlacedBetPart.prototype['startDateTime'] = undefined;






export default PlacedBetPart;

