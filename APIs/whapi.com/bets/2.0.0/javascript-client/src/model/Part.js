/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Part model module.
 * @module model/Part
 * @version 2.0.0
 */
class Part {
    /**
     * Constructs a new <code>Part</code>.
     * @alias module:model/Part
     * @param includeInMultiple {Boolean} Indicates if the bet can be used in a multiple bet
     * @param priceDen {Number} Price denominator - will be ignored for types other than L (Fixed Price)
     * @param priceNum {Number} Price numerator - will be ignored for types other than L (Fixed Price)
     * @param priceType {Number} The type of price selected. For example - ‘L’ (Fixed)
     * @param selectionId {Number} The selection identifier
     */
    constructor(includeInMultiple, priceDen, priceNum, priceType, selectionId) { 
        
        Part.initialize(this, includeInMultiple, priceDen, priceNum, priceType, selectionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, includeInMultiple, priceDen, priceNum, priceType, selectionId) { 
        obj['includeInMultiple'] = includeInMultiple;
        obj['priceDen'] = priceDen;
        obj['priceNum'] = priceNum;
        obj['priceType'] = priceType;
        obj['selectionId'] = selectionId;
    }

    /**
     * Constructs a <code>Part</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Part} obj Optional instance to populate.
     * @return {module:model/Part} The populated <code>Part</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Part();

            if (data.hasOwnProperty('includeInMultiple')) {
                obj['includeInMultiple'] = ApiClient.convertToType(data['includeInMultiple'], 'Boolean');
            }
            if (data.hasOwnProperty('priceDen')) {
                obj['priceDen'] = ApiClient.convertToType(data['priceDen'], 'Number');
            }
            if (data.hasOwnProperty('priceNum')) {
                obj['priceNum'] = ApiClient.convertToType(data['priceNum'], 'Number');
            }
            if (data.hasOwnProperty('priceType')) {
                obj['priceType'] = ApiClient.convertToType(data['priceType'], 'Number');
            }
            if (data.hasOwnProperty('selectionId')) {
                obj['selectionId'] = ApiClient.convertToType(data['selectionId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Part</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Part</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Part.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Part.RequiredProperties = ["includeInMultiple", "priceDen", "priceNum", "priceType", "selectionId"];

/**
 * Indicates if the bet can be used in a multiple bet
 * @member {Boolean} includeInMultiple
 */
Part.prototype['includeInMultiple'] = undefined;

/**
 * Price denominator - will be ignored for types other than L (Fixed Price)
 * @member {Number} priceDen
 */
Part.prototype['priceDen'] = undefined;

/**
 * Price numerator - will be ignored for types other than L (Fixed Price)
 * @member {Number} priceNum
 */
Part.prototype['priceNum'] = undefined;

/**
 * The type of price selected. For example - ‘L’ (Fixed)
 * @member {Number} priceType
 */
Part.prototype['priceType'] = undefined;

/**
 * The selection identifier
 * @member {Number} selectionId
 */
Part.prototype['selectionId'] = undefined;






export default Part;

