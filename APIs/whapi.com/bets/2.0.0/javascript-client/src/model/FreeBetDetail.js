/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FreeBetDetail model module.
 * @module model/FreeBetDetail
 * @version 2.0.0
 */
class FreeBetDetail {
    /**
     * Constructs a new <code>FreeBetDetail</code>.
     * @alias module:model/FreeBetDetail
     * @param id {Number} The identifier of the free bet
     * @param offerName {String} The name of the offer that enabled the customer to place a free bet
     * @param value {Number} The value of the free bet
     */
    constructor(id, offerName, value) { 
        
        FreeBetDetail.initialize(this, id, offerName, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, offerName, value) { 
        obj['id'] = id;
        obj['offerName'] = offerName;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>FreeBetDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FreeBetDetail} obj Optional instance to populate.
     * @return {module:model/FreeBetDetail} The populated <code>FreeBetDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FreeBetDetail();

            if (data.hasOwnProperty('awardDateTime')) {
                obj['awardDateTime'] = ApiClient.convertToType(data['awardDateTime'], 'String');
            }
            if (data.hasOwnProperty('displayText')) {
                obj['displayText'] = ApiClient.convertToType(data['displayText'], 'String');
            }
            if (data.hasOwnProperty('expiryDateTime')) {
                obj['expiryDateTime'] = ApiClient.convertToType(data['expiryDateTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('offerDesc')) {
                obj['offerDesc'] = ApiClient.convertToType(data['offerDesc'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'Number');
            }
            if (data.hasOwnProperty('offerName')) {
                obj['offerName'] = ApiClient.convertToType(data['offerName'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FreeBetDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FreeBetDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FreeBetDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['awardDateTime'] && !(typeof data['awardDateTime'] === 'string' || data['awardDateTime'] instanceof String)) {
            throw new Error("Expected the field `awardDateTime` to be a primitive type in the JSON string but got " + data['awardDateTime']);
        }
        // ensure the json data is a string
        if (data['displayText'] && !(typeof data['displayText'] === 'string' || data['displayText'] instanceof String)) {
            throw new Error("Expected the field `displayText` to be a primitive type in the JSON string but got " + data['displayText']);
        }
        // ensure the json data is a string
        if (data['expiryDateTime'] && !(typeof data['expiryDateTime'] === 'string' || data['expiryDateTime'] instanceof String)) {
            throw new Error("Expected the field `expiryDateTime` to be a primitive type in the JSON string but got " + data['expiryDateTime']);
        }
        // ensure the json data is a string
        if (data['offerDesc'] && !(typeof data['offerDesc'] === 'string' || data['offerDesc'] instanceof String)) {
            throw new Error("Expected the field `offerDesc` to be a primitive type in the JSON string but got " + data['offerDesc']);
        }
        // ensure the json data is a string
        if (data['offerName'] && !(typeof data['offerName'] === 'string' || data['offerName'] instanceof String)) {
            throw new Error("Expected the field `offerName` to be a primitive type in the JSON string but got " + data['offerName']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }

        return true;
    }


}

FreeBetDetail.RequiredProperties = ["id", "offerName", "value"];

/**
 * The time the free bet was awarded. For example 2014-11-013T23:59:10
 * @member {String} awardDateTime
 */
FreeBetDetail.prototype['awardDateTime'] = undefined;

/**
 * The message explaining the offer displayed to the customer along with the free bet
 * @member {String} displayText
 */
FreeBetDetail.prototype['displayText'] = undefined;

/**
 * The time the free bet expired. For example 2014-11-013T23:59:10
 * @member {String} expiryDateTime
 */
FreeBetDetail.prototype['expiryDateTime'] = undefined;

/**
 * The identifier of the free bet
 * @member {Number} id
 */
FreeBetDetail.prototype['id'] = undefined;

/**
 * The description of the offer that enabled the customer to place a free bet
 * @member {String} offerDesc
 */
FreeBetDetail.prototype['offerDesc'] = undefined;

/**
 * The identifier of the offer
 * @member {Number} offerId
 */
FreeBetDetail.prototype['offerId'] = undefined;

/**
 * The name of the offer that enabled the customer to place a free bet
 * @member {String} offerName
 */
FreeBetDetail.prototype['offerName'] = undefined;

/**
 * The time the free bet offer started. For example 2014-11-013T23:59:10
 * @member {String} startDateTime
 */
FreeBetDetail.prototype['startDateTime'] = undefined;

/**
 * The value of the free bet
 * @member {Number} value
 */
FreeBetDetail.prototype['value'] = undefined;






export default FreeBetDetail;

