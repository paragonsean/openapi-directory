/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BetsApi);
  }
}(this, function(expect, BetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BetsApi.Betslipbet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Betslipbet', function() {
    it('should create an instance of Betslipbet', function() {
      // uncomment below and update the code to test Betslipbet
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be.a(BetsApi.Betslipbet);
    });

    it('should have the property betMultiplier (base name: "betMultiplier")', function() {
      // uncomment below and update the code to test the property betMultiplier
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property freeBets (base name: "freeBets")', function() {
      // uncomment below and update the code to test the property freeBets
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property legs (base name: "legs")', function() {
      // uncomment below and update the code to test the property legs
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property maxStake (base name: "maxStake")', function() {
      // uncomment below and update the code to test the property maxStake
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property minStake (base name: "minStake")', function() {
      // uncomment below and update the code to test the property minStake
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property numLines (base name: "numLines")', function() {
      // uncomment below and update the code to test the property numLines
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property typeCode (base name: "typeCode")', function() {
      // uncomment below and update the code to test the property typeCode
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

    it('should have the property typeName (base name: "typeName")', function() {
      // uncomment below and update the code to test the property typeName
      //var instance = new BetsApi.Betslipbet();
      //expect(instance).to.be();
    });

  });

}));
