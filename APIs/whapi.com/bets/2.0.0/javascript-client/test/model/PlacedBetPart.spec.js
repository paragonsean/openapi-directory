/**
 * Bets API
 * The Bets API methods are used to place single, multiple and complex bets and to retrieve a customer’s bet history. When retrieving a customer’s bet history you can organize the bets from the betting history in terms of date, bet type and whether the bet is settled or not. You can also specify what fields to be included/excluded or return a list of all default fields the method returns. <br /><br /> The Bets API will also generate a bet delay if you’re placing a single/multiple bet in-Play by creating a time margin to negate the effects of major changes to the market (for example, goals during a football match). Note that in version 2 of our APIs, Bets API contains the functionality of both Bets API v1 and the Betslips API v1.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BetsApi);
  }
}(this, function(expect, BetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BetsApi.PlacedBetPart();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlacedBetPart', function() {
    it('should create an instance of PlacedBetPart', function() {
      // uncomment below and update the code to test PlacedBetPart
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be.a(BetsApi.PlacedBetPart);
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eachWayDen (base name: "eachWayDen")', function() {
      // uncomment below and update the code to test the property eachWayDen
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eachWayNum (base name: "eachWayNum")', function() {
      // uncomment below and update the code to test the property eachWayNum
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eachWayPlaces (base name: "eachWayPlaces")', function() {
      // uncomment below and update the code to test the property eachWayPlaces
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eventDescription (base name: "eventDescription")', function() {
      // uncomment below and update the code to test the property eventDescription
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "eventId")', function() {
      // uncomment below and update the code to test the property eventId
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eventMarketDescription (base name: "eventMarketDescription")', function() {
      // uncomment below and update the code to test the property eventMarketDescription
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property eventTypeDescription (base name: "eventTypeDescription")', function() {
      // uncomment below and update the code to test the property eventTypeDescription
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property handicap (base name: "handicap")', function() {
      // uncomment below and update the code to test the property handicap
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property priceDen (base name: "priceDen")', function() {
      // uncomment below and update the code to test the property priceDen
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property priceFormatted (base name: "priceFormatted")', function() {
      // uncomment below and update the code to test the property priceFormatted
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property priceNum (base name: "priceNum")', function() {
      // uncomment below and update the code to test the property priceNum
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property priceType (base name: "priceType")', function() {
      // uncomment below and update the code to test the property priceType
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property result (base name: "result")', function() {
      // uncomment below and update the code to test the property result
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property rule4Deductions (base name: "rule4Deductions")', function() {
      // uncomment below and update the code to test the property rule4Deductions
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property selectionId (base name: "selectionId")', function() {
      // uncomment below and update the code to test the property selectionId
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

    it('should have the property startDateTime (base name: "startDateTime")', function() {
      // uncomment below and update the code to test the property startDateTime
      //var instance = new BetsApi.PlacedBetPart();
      //expect(instance).to.be();
    });

  });

}));
