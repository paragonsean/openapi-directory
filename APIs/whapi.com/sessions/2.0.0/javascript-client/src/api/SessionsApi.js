/**
 * Sessions API
 * The William Hill Sessions API uses a central authentication service (CAS*) on all resources that require access to a customer’s account or betting functionality. To authenticate, you’ll need to supply a sportsbook username and password, in return you will be given an authentication ticket, which you can use on the majority of requests found within our services. <br /><br /><br /> The Sessions API should be used whenever you want to login a customer and:<br /><br /> <ul> <li>continue to use the William Hill API for that customer’s transactions</li> <li>use other CAS-enabled William Hill services outside the suite of APIs</li> </ul> <br /> CAS is an enterprise Single Sign-On solution for web services (see https://wiki.jasig.org/display/CAS/Home). It is used by many William Hill services. <br /> Note: all requests must be executed over HTTPS and include an API key and secret.<br /><br /><br /> <b>Authentication Ticket Expiration Times</b><br /><br /> When a customer is logged in using the Sessions API, they are given an Authentication Ticket; using this ticket on subsequent API requests gives you access to account activities (such as placing a bet, deposits, etc). However, this ticket is only valid for a given period of time depending on how it is used. If the ticket is used and then has a period of inactivity longer than 7,200 seconds (2 hours), then the ticket will expire and further requests using the ticket will be denied - in effect, a customer has been logged out and will need to authenticate again. <br /><br /><br /> Normally, any ticket issued only has a maximum life expectancy of 28,000 seconds (8 hours) after which it can no longer be used, even if it has been used regularly. The customer again will be effectively logged out and will need to authenticate again. If you wish to avoid this, you need to set the query parameter extended to Y, which will enable your application to generate a ticket valid for 60 days without expiring due to inactivity. <br />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginRequest from '../model/LoginRequest';
import Logoutresponse from '../model/Logoutresponse';
import ServiceTicket from '../model/ServiceTicket';
import Session from '../model/Session';
import SessionsErrors from '../model/SessionsErrors';
import Ticketvalidityresponse from '../model/Ticketvalidityresponse';

/**
* Sessions service.
* @module api/SessionsApi
* @version 2.0.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getServiceTicket operation.
     * @callback module:api/SessionsApi~getServiceTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTicket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains a one-time Service Ticket that can be used to access other William Hill services.
     * Obtains a one-time Service Ticket that can be used to access other CAS enabled William Hill services that are not available through the standard suite of APIs. You first need to have logged in a customer to obtain an Authentication Ticket.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} tgt Ticket Granting Ticket obtained from a previous request
     * @param {String} target The target URL of the CAS enabled service that you want to use with the service ticket.
     * @param {Object} opts Optional parameters
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {module:api/SessionsApi~getServiceTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTicket}
     */
    getServiceTicket(apiKey, apiSecret, tgt, target, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getServiceTicket");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling getServiceTicket");
      }
      // verify the required parameter 'tgt' is set
      if (tgt === undefined || tgt === null) {
        throw new Error("Missing the required parameter 'tgt' when calling getServiceTicket");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling getServiceTicket");
      }

      let pathParams = {
        'tgt': tgt
      };
      let queryParams = {
        'languageAsPerTerritory': opts['languageAsPerTerritory'],
        'target': target,
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv')
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceTicket;
      return this.apiClient.callApi(
        '/tickets/{tgt}/serviceTicket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logIn operation.
     * @callback module:api/SessionsApi~logInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs in a customer and obtains an authentication ticket.
     * Logs in a customer by obtaining an authentication ticket. It can then be used directly with the other William Hill APIs to access a customer’s sportsbook account, place a bet, etc. 
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {module:model/LoginRequest} login Login request object
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma Separated List)
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/SessionsApi~logInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    logIn(apiKey, apiSecret, login, opts, callback) {
      opts = opts || {};
      let postBody = login;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling logIn");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling logIn");
      }
      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling logIn");
      }

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logOut operation.
     * @callback module:api/SessionsApi~logOutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Logoutresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out a customer.
     * Logs out a customer.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} tgt Ticket Granting Ticket obtained from a previous request
     * @param {Object} opts Optional parameters
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/SessionsApi~logOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Logoutresponse}
     */
    logOut(apiKey, apiSecret, tgt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling logOut");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling logOut");
      }
      // verify the required parameter 'tgt' is set
      if (tgt === undefined || tgt === null) {
        throw new Error("Missing the required parameter 'tgt' when calling logOut");
      }

      let pathParams = {
        'tgt': tgt
      };
      let queryParams = {
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Logoutresponse;
      return this.apiClient.callApi(
        '/tickets/{tgt}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateSession operation.
     * @callback module:api/SessionsApi~validateSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticketvalidityresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the validity of a session ticket.
     * Checks the validity of a session ticket.
     * @param {String} apiKey A unique identifier of your application that is generated by the API portal.
     * @param {String} apiSecret Another unique identifier for your application.
     * @param {String} tgt Ticket Granting Ticket obtained from a previous request
     * @param {Object} opts Optional parameters
     * @param {String} [territory] Territory from which request originates
     * @param {String} [languageAsPerTerritory = 'true')] Defines response field name language, true (default) returns in language defined by territory, false returns in English
     * @param {module:api/SessionsApi~validateSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticketvalidityresponse}
     */
    validateSession(apiKey, apiSecret, tgt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling validateSession");
      }
      // verify the required parameter 'apiSecret' is set
      if (apiSecret === undefined || apiSecret === null) {
        throw new Error("Missing the required parameter 'apiSecret' when calling validateSession");
      }
      // verify the required parameter 'tgt' is set
      if (tgt === undefined || tgt === null) {
        throw new Error("Missing the required parameter 'tgt' when calling validateSession");
      }

      let pathParams = {
        'tgt': tgt
      };
      let queryParams = {
        'languageAsPerTerritory': opts['languageAsPerTerritory']
      };
      let headerParams = {
        'apiKey': apiKey,
        'apiSecret': apiSecret,
        'territory': opts['territory']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = Ticketvalidityresponse;
      return this.apiClient.callApi(
        '/tickets/{tgt}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
