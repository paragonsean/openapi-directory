# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceTicket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, ticket: str=None):
        """ServiceTicket - a model defined in OpenAPI

        :param location: The location of this ServiceTicket.
        :param ticket: The ticket of this ServiceTicket.
        """
        self.openapi_types = {
            'location': str,
            'ticket': str
        }

        self.attribute_map = {
            'location': 'location',
            'ticket': 'ticket'
        }

        self._location = location
        self._ticket = ticket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceTicket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serviceTicket of this ServiceTicket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this ServiceTicket.

        This is the URL of the target service sent in the request. This is a combination of the endpoint and the ticket for future operations such as DELETE.

        :return: The location of this ServiceTicket.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ServiceTicket.

        This is the URL of the target service sent in the request. This is a combination of the endpoint and the ticket for future operations such as DELETE.

        :param location: The location of this ServiceTicket.
        :type location: str
        """

        self._location = location

    @property
    def ticket(self):
        """Gets the ticket of this ServiceTicket.

        The TGT ticket

        :return: The ticket of this ServiceTicket.
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this ServiceTicket.

        The TGT ticket

        :param ticket: The ticket of this ServiceTicket.
        :type ticket: str
        """
        if ticket is None:
            raise ValueError("Invalid value for `ticket`, must not be `None`")

        self._ticket = ticket
