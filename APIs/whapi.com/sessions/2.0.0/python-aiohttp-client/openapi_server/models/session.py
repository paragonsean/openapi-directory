# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_date_time: str=None, extended: bool=None, location: str=None, temporary_password: bool=None, temporary_password_url: str=None, ticket: str=None):
        """Session - a model defined in OpenAPI

        :param expiry_date_time: The expiry_date_time of this Session.
        :param extended: The extended of this Session.
        :param location: The location of this Session.
        :param temporary_password: The temporary_password of this Session.
        :param temporary_password_url: The temporary_password_url of this Session.
        :param ticket: The ticket of this Session.
        """
        self.openapi_types = {
            'expiry_date_time': str,
            'extended': bool,
            'location': str,
            'temporary_password': bool,
            'temporary_password_url': str,
            'ticket': str
        }

        self.attribute_map = {
            'expiry_date_time': 'expiryDateTime',
            'extended': 'extended',
            'location': 'location',
            'temporary_password': 'temporaryPassword',
            'temporary_password_url': 'temporaryPasswordUrl',
            'ticket': 'ticket'
        }

        self._expiry_date_time = expiry_date_time
        self._extended = extended
        self._location = location
        self._temporary_password = temporary_password
        self._temporary_password_url = temporary_password_url
        self._ticket = ticket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_date_time(self):
        """Gets the expiry_date_time of this Session.

        The UTC time when the ticket expires.

        :return: The expiry_date_time of this Session.
        :rtype: str
        """
        return self._expiry_date_time

    @expiry_date_time.setter
    def expiry_date_time(self, expiry_date_time):
        """Sets the expiry_date_time of this Session.

        The UTC time when the ticket expires.

        :param expiry_date_time: The expiry_date_time of this Session.
        :type expiry_date_time: str
        """
        if expiry_date_time is None:
            raise ValueError("Invalid value for `expiry_date_time`, must not be `None`")

        self._expiry_date_time = expiry_date_time

    @property
    def extended(self):
        """Gets the extended of this Session.

        The value you have selected previous to executing the request. If the value is Y, this enables your application to generate a ticket valid for 60 days without expiring due to inactivity.

        :return: The extended of this Session.
        :rtype: bool
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this Session.

        The value you have selected previous to executing the request. If the value is Y, this enables your application to generate a ticket valid for 60 days without expiring due to inactivity.

        :param extended: The extended of this Session.
        :type extended: bool
        """

        self._extended = extended

    @property
    def location(self):
        """Gets the location of this Session.

        This is the URL of the target service sent in the request. This is a combination of the endpoint and the ticket for future operations such as DELETE.

        :return: The location of this Session.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Session.

        This is the URL of the target service sent in the request. This is a combination of the endpoint and the ticket for future operations such as DELETE.

        :param location: The location of this Session.
        :type location: str
        """

        self._location = location

    @property
    def temporary_password(self):
        """Gets the temporary_password of this Session.

        Indicates that the account has a temporary password set and hence the user must be prompted to change their password.

        :return: The temporary_password of this Session.
        :rtype: bool
        """
        return self._temporary_password

    @temporary_password.setter
    def temporary_password(self, temporary_password):
        """Sets the temporary_password of this Session.

        Indicates that the account has a temporary password set and hence the user must be prompted to change their password.

        :param temporary_password: The temporary_password of this Session.
        :type temporary_password: bool
        """

        self._temporary_password = temporary_password

    @property
    def temporary_password_url(self):
        """Gets the temporary_password_url of this Session.

        Url for user to change password. A TGT must be added to the URL

        :return: The temporary_password_url of this Session.
        :rtype: str
        """
        return self._temporary_password_url

    @temporary_password_url.setter
    def temporary_password_url(self, temporary_password_url):
        """Sets the temporary_password_url of this Session.

        Url for user to change password. A TGT must be added to the URL

        :param temporary_password_url: The temporary_password_url of this Session.
        :type temporary_password_url: str
        """

        self._temporary_password_url = temporary_password_url

    @property
    def ticket(self):
        """Gets the ticket of this Session.

        The TGT ticket

        :return: The ticket of this Session.
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this Session.

        The TGT ticket

        :param ticket: The ticket of this Session.
        :type ticket: str
        """
        if ticket is None:
            raise ValueError("Invalid value for `ticket`, must not be `None`")

        self._ticket = ticket
