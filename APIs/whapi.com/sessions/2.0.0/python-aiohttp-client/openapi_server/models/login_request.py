# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class LoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extended: bool=False, password: str=None, username: str=None):
        """LoginRequest - a model defined in OpenAPI

        :param extended: The extended of this LoginRequest.
        :param password: The password of this LoginRequest.
        :param username: The username of this LoginRequest.
        """
        self.openapi_types = {
            'extended': bool,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'extended': 'extended',
            'password': 'password',
            'username': 'username'
        }

        self._extended = extended
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The loginRequest of this LoginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extended(self):
        """Gets the extended of this LoginRequest.

        Whether extended login or normal login is required. If the parameter is set to Y your application will generate an authentication ticket valid for a period of 60 days, without expiring due to inactivity. If the parameter is left blank or set to N this means your application will support the normal expiry times for tickets: The ticket expires after 2 hours of inactivity. The ticket is valid for a maximum of 8 hours after it has been issued.

        :return: The extended of this LoginRequest.
        :rtype: bool
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this LoginRequest.

        Whether extended login or normal login is required. If the parameter is set to Y your application will generate an authentication ticket valid for a period of 60 days, without expiring due to inactivity. If the parameter is left blank or set to N this means your application will support the normal expiry times for tickets: The ticket expires after 2 hours of inactivity. The ticket is valid for a maximum of 8 hours after it has been issued.

        :param extended: The extended of this LoginRequest.
        :type extended: bool
        """

        self._extended = extended

    @property
    def password(self):
        """Gets the password of this LoginRequest.

        Customer Password

        :return: The password of this LoginRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginRequest.

        Customer Password

        :param password: The password of this LoginRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and not re.search(r'^[a-zA-Z0-9_\-]{6,15}$', password):
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-]{6,15}$/`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this LoginRequest.

        Customer Username

        :return: The username of this LoginRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LoginRequest.

        Customer Username

        :param username: The username of this LoginRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and not re.search(r'^[A-Za-z0-9_@\ \.]{5,15}$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[A-Za-z0-9_@\ \.]{5,15}$/`")

        self._username = username
