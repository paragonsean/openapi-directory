/**
 * Sessions API
 * The William Hill Sessions API uses a central authentication service (CAS*) on all resources that require access to a customer’s account or betting functionality. To authenticate, you’ll need to supply a sportsbook username and password, in return you will be given an authentication ticket, which you can use on the majority of requests found within our services. <br /><br /><br /> The Sessions API should be used whenever you want to login a customer and:<br /><br /> <ul> <li>continue to use the William Hill API for that customer’s transactions</li> <li>use other CAS-enabled William Hill services outside the suite of APIs</li> </ul> <br /> CAS is an enterprise Single Sign-On solution for web services (see https://wiki.jasig.org/display/CAS/Home). It is used by many William Hill services. <br /> Note: all requests must be executed over HTTPS and include an API key and secret.<br /><br /><br /> <b>Authentication Ticket Expiration Times</b><br /><br /> When a customer is logged in using the Sessions API, they are given an Authentication Ticket; using this ticket on subsequent API requests gives you access to account activities (such as placing a bet, deposits, etc). However, this ticket is only valid for a given period of time depending on how it is used. If the ticket is used and then has a period of inactivity longer than 7,200 seconds (2 hours), then the ticket will expire and further requests using the ticket will be denied - in effect, a customer has been logged out and will need to authenticate again. <br /><br /><br /> Normally, any ticket issued only has a maximum life expectancy of 28,000 seconds (8 hours) after which it can no longer be used, even if it has been used regularly. The customer again will be effectively logged out and will need to authenticate again. If you wish to avoid this, you need to set the query parameter extended to Y, which will enable your application to generate a ticket valid for 60 days without expiring due to inactivity. <br />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionsApi_H
#define OAI_OAISessionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILoginRequest.h"
#include "OAILogoutresponse.h"
#include "OAIServiceTicket.h"
#include "OAISession.h"
#include "OAISessionsErrors.h"
#include "OAITicketvalidityresponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionsApi : public QObject {
    Q_OBJECT

public:
    OAISessionsApi(const int timeOut = 0);
    ~OAISessionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  tgt QString [required]
    * @param[in]  target QString [required]
    * @param[in]  territory QString [optional]
    * @param[in]  language_as_per_territory QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void getServiceTicket(const QString &api_key, const QString &api_secret, const QString &tgt, const QString &target, const ::OpenAPI::OptionalParam<QString> &territory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_as_per_territory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  login OAILoginRequest [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  territory QString [optional]
    * @param[in]  language_as_per_territory QString [optional]
    */
    virtual void logIn(const QString &api_key, const QString &api_secret, const OAILoginRequest &login, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &territory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_as_per_territory = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  tgt QString [required]
    * @param[in]  territory QString [optional]
    * @param[in]  language_as_per_territory QString [optional]
    */
    virtual void logOut(const QString &api_key, const QString &api_secret, const QString &tgt, const ::OpenAPI::OptionalParam<QString> &territory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_as_per_territory = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  api_secret QString [required]
    * @param[in]  tgt QString [required]
    * @param[in]  territory QString [optional]
    * @param[in]  language_as_per_territory QString [optional]
    */
    virtual void validateSession(const QString &api_key, const QString &api_secret, const QString &tgt, const ::OpenAPI::OptionalParam<QString> &territory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_as_per_territory = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getServiceTicketCallback(OAIHttpRequestWorker *worker);
    void logInCallback(OAIHttpRequestWorker *worker);
    void logOutCallback(OAIHttpRequestWorker *worker);
    void validateSessionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getServiceTicketSignal(OAIServiceTicket summary);
    void logInSignal(OAISession summary);
    void logOutSignal(OAILogoutresponse summary);
    void validateSessionSignal(OAITicketvalidityresponse summary);


    void getServiceTicketSignalFull(OAIHttpRequestWorker *worker, OAIServiceTicket summary);
    void logInSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void logOutSignalFull(OAIHttpRequestWorker *worker, OAILogoutresponse summary);
    void validateSessionSignalFull(OAIHttpRequestWorker *worker, OAITicketvalidityresponse summary);

    Q_DECL_DEPRECATED_X("Use getServiceTicketSignalError() instead")
    void getServiceTicketSignalE(OAIServiceTicket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceTicketSignalError(OAIServiceTicket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logInSignalError() instead")
    void logInSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logInSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutSignalError() instead")
    void logOutSignalE(OAILogoutresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutSignalError(OAILogoutresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSessionSignalError() instead")
    void validateSessionSignalE(OAITicketvalidityresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSessionSignalError(OAITicketvalidityresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getServiceTicketSignalErrorFull() instead")
    void getServiceTicketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceTicketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logInSignalErrorFull() instead")
    void logInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logOutSignalErrorFull() instead")
    void logOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSessionSignalErrorFull() instead")
    void validateSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
