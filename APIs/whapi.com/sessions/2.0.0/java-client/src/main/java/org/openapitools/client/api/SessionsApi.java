/*
 * Sessions API
 * The William Hill Sessions API uses a central authentication service (CAS*) on all resources that require access to a customer’s account or betting functionality. To authenticate, you’ll need to supply a sportsbook username and password, in return you will be given an authentication ticket, which you can use on the majority of requests found within our services. <br /><br /><br /> The Sessions API should be used whenever you want to login a customer and:<br /><br /> <ul> <li>continue to use the William Hill API for that customer’s transactions</li> <li>use other CAS-enabled William Hill services outside the suite of APIs</li> </ul> <br /> CAS is an enterprise Single Sign-On solution for web services (see https://wiki.jasig.org/display/CAS/Home). It is used by many William Hill services. <br /> Note: all requests must be executed over HTTPS and include an API key and secret.<br /><br /><br /> <b>Authentication Ticket Expiration Times</b><br /><br /> When a customer is logged in using the Sessions API, they are given an Authentication Ticket; using this ticket on subsequent API requests gives you access to account activities (such as placing a bet, deposits, etc). However, this ticket is only valid for a given period of time depending on how it is used. If the ticket is used and then has a period of inactivity longer than 7,200 seconds (2 hours), then the ticket will expire and further requests using the ticket will be denied - in effect, a customer has been logged out and will need to authenticate again. <br /><br /><br /> Normally, any ticket issued only has a maximum life expectancy of 28,000 seconds (8 hours) after which it can no longer be used, even if it has been used regularly. The customer again will be effectively logged out and will need to authenticate again. If you wish to avoid this, you need to set the query parameter extended to Y, which will enable your application to generate a ticket valid for 60 days without expiring due to inactivity. <br />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: platform@williamhill.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.Logoutresponse;
import org.openapitools.client.model.ServiceTicket;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.SessionsErrors;
import org.openapitools.client.model.Ticketvalidityresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getServiceTicket
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param target The target URL of the CAS enabled service that you want to use with the service ticket. (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Service Ticket created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTicketCall(String apiKey, String apiSecret, String tgt, String target, String territory, String languageAsPerTerritory, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tickets/{tgt}/serviceTicket"
            .replace("{" + "tgt" + "}", localVarApiClient.escapeString(tgt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceTicketValidateBeforeCall(String apiKey, String apiSecret, String tgt, String target, String territory, String languageAsPerTerritory, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getServiceTicket(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling getServiceTicket(Async)");
        }

        // verify the required parameter 'tgt' is set
        if (tgt == null) {
            throw new ApiException("Missing the required parameter 'tgt' when calling getServiceTicket(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling getServiceTicket(Async)");
        }

        return getServiceTicketCall(apiKey, apiSecret, tgt, target, territory, languageAsPerTerritory, fields, include, exclude, _callback);

    }

    /**
     * Obtains a one-time Service Ticket that can be used to access other William Hill services.
     * Obtains a one-time Service Ticket that can be used to access other CAS enabled William Hill services that are not available through the standard suite of APIs. You first need to have logged in a customer to obtain an Authentication Ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param target The target URL of the CAS enabled service that you want to use with the service ticket. (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return ServiceTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Service Ticket created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceTicket getServiceTicket(String apiKey, String apiSecret, String tgt, String target, String territory, String languageAsPerTerritory, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<ServiceTicket> localVarResp = getServiceTicketWithHttpInfo(apiKey, apiSecret, tgt, target, territory, languageAsPerTerritory, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Obtains a one-time Service Ticket that can be used to access other William Hill services.
     * Obtains a one-time Service Ticket that can be used to access other CAS enabled William Hill services that are not available through the standard suite of APIs. You first need to have logged in a customer to obtain an Authentication Ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param target The target URL of the CAS enabled service that you want to use with the service ticket. (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @return ApiResponse&lt;ServiceTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Service Ticket created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceTicket> getServiceTicketWithHttpInfo(String apiKey, String apiSecret, String tgt, String target, String territory, String languageAsPerTerritory, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getServiceTicketValidateBeforeCall(apiKey, apiSecret, tgt, target, territory, languageAsPerTerritory, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<ServiceTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtains a one-time Service Ticket that can be used to access other William Hill services. (asynchronously)
     * Obtains a one-time Service Ticket that can be used to access other CAS enabled William Hill services that are not available through the standard suite of APIs. You first need to have logged in a customer to obtain an Authentication Ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param target The target URL of the CAS enabled service that you want to use with the service ticket. (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Service Ticket created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceTicketAsync(String apiKey, String apiSecret, String tgt, String target, String territory, String languageAsPerTerritory, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<ServiceTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceTicketValidateBeforeCall(apiKey, apiSecret, tgt, target, territory, languageAsPerTerritory, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<ServiceTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logIn
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param login Login request object (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Login - failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application metadata not configured correctly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logInCall(String apiKey, String apiSecret, LoginRequest login, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = login;

        // create path and map variables
        String localVarPath = "/tickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logInValidateBeforeCall(String apiKey, String apiSecret, LoginRequest login, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling logIn(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling logIn(Async)");
        }

        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling logIn(Async)");
        }

        return logInCall(apiKey, apiSecret, login, fields, include, exclude, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Logs in a customer and obtains an authentication ticket.
     * Logs in a customer by obtaining an authentication ticket. It can then be used directly with the other William Hill APIs to access a customer’s sportsbook account, place a bet, etc. 
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param login Login request object (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return Session
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Login - failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application metadata not configured correctly </td><td>  -  </td></tr>
     </table>
     */
    public Session logIn(String apiKey, String apiSecret, LoginRequest login, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<Session> localVarResp = logInWithHttpInfo(apiKey, apiSecret, login, fields, include, exclude, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Logs in a customer and obtains an authentication ticket.
     * Logs in a customer by obtaining an authentication ticket. It can then be used directly with the other William Hill APIs to access a customer’s sportsbook account, place a bet, etc. 
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param login Login request object (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Login - failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application metadata not configured correctly </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Session> logInWithHttpInfo(String apiKey, String apiSecret, LoginRequest login, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = logInValidateBeforeCall(apiKey, apiSecret, login, fields, include, exclude, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logs in a customer and obtains an authentication ticket. (asynchronously)
     * Logs in a customer by obtaining an authentication ticket. It can then be used directly with the other William Hill APIs to access a customer’s sportsbook account, place a bet, etc. 
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param login Login request object (required)
     * @param fields Specify an absolute field list to return (Comma Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma Separated List) (optional)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Login - failed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Application metadata not configured correctly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logInAsync(String apiKey, String apiSecret, LoginRequest login, List<String> fields, List<String> include, List<String> exclude, String territory, String languageAsPerTerritory, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = logInValidateBeforeCall(apiKey, apiSecret, login, fields, include, exclude, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logOut
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Logout </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logOutCall(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tickets/{tgt}"
            .replace("{" + "tgt" + "}", localVarApiClient.escapeString(tgt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logOutValidateBeforeCall(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling logOut(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling logOut(Async)");
        }

        // verify the required parameter 'tgt' is set
        if (tgt == null) {
            throw new ApiException("Missing the required parameter 'tgt' when calling logOut(Async)");
        }

        return logOutCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Log out a customer.
     * Logs out a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return Logoutresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Logout </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Logoutresponse logOut(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<Logoutresponse> localVarResp = logOutWithHttpInfo(apiKey, apiSecret, tgt, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Log out a customer.
     * Logs out a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;Logoutresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Logout </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Logoutresponse> logOutWithHttpInfo(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = logOutValidateBeforeCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<Logoutresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log out a customer. (asynchronously)
     * Logs out a customer.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Logout </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logOutAsync(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback<Logoutresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logOutValidateBeforeCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<Logoutresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateSession
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The validity status of the tgt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateSessionCall(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tickets/{tgt}"
            .replace("{" + "tgt" + "}", localVarApiClient.escapeString(tgt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languageAsPerTerritory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageAsPerTerritory", languageAsPerTerritory));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        if (apiSecret != null) {
            localVarHeaderParams.put("apiSecret", localVarApiClient.parameterToString(apiSecret));
        }

        if (territory != null) {
            localVarHeaderParams.put("territory", localVarApiClient.parameterToString(territory));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateSessionValidateBeforeCall(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling validateSession(Async)");
        }

        // verify the required parameter 'apiSecret' is set
        if (apiSecret == null) {
            throw new ApiException("Missing the required parameter 'apiSecret' when calling validateSession(Async)");
        }

        // verify the required parameter 'tgt' is set
        if (tgt == null) {
            throw new ApiException("Missing the required parameter 'tgt' when calling validateSession(Async)");
        }

        return validateSessionCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, _callback);

    }

    /**
     * Checks the validity of a session ticket.
     * Checks the validity of a session ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return Ticketvalidityresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The validity status of the tgt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Ticketvalidityresponse validateSession(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory) throws ApiException {
        ApiResponse<Ticketvalidityresponse> localVarResp = validateSessionWithHttpInfo(apiKey, apiSecret, tgt, territory, languageAsPerTerritory);
        return localVarResp.getData();
    }

    /**
     * Checks the validity of a session ticket.
     * Checks the validity of a session ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @return ApiResponse&lt;Ticketvalidityresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The validity status of the tgt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ticketvalidityresponse> validateSessionWithHttpInfo(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory) throws ApiException {
        okhttp3.Call localVarCall = validateSessionValidateBeforeCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, null);
        Type localVarReturnType = new TypeToken<Ticketvalidityresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the validity of a session ticket. (asynchronously)
     * Checks the validity of a session ticket.
     * @param apiKey A unique identifier of your application that is generated by the API portal. (required)
     * @param apiSecret Another unique identifier for your application. (required)
     * @param tgt Ticket Granting Ticket obtained from a previous request (required)
     * @param territory Territory from which request originates (optional)
     * @param languageAsPerTerritory Defines response field name language, true (default) returns in language defined by territory, false returns in English (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The validity status of the tgt </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateSessionAsync(String apiKey, String apiSecret, String tgt, String territory, String languageAsPerTerritory, final ApiCallback<Ticketvalidityresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateSessionValidateBeforeCall(apiKey, apiSecret, tgt, territory, languageAsPerTerritory, _callback);
        Type localVarReturnType = new TypeToken<Ticketvalidityresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
