/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Currency model module.
 * @module model/Currency
 * @version 2.0
 */
class Currency {
    /**
     * Constructs a new <code>Currency</code>.
     * @alias module:model/Currency
     */
    constructor() { 
        
        Currency.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Currency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Currency} obj Optional instance to populate.
     * @return {module:model/Currency} The populated <code>Currency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Currency();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('exchangeRate')) {
                obj['exchangeRate'] = ApiClient.convertToType(data['exchangeRate'], 'Number');
            }
            if (data.hasOwnProperty('maxDeposit')) {
                obj['maxDeposit'] = ApiClient.convertToType(data['maxDeposit'], 'Number');
            }
            if (data.hasOwnProperty('maxWithdrawal')) {
                obj['maxWithdrawal'] = ApiClient.convertToType(data['maxWithdrawal'], 'Number');
            }
            if (data.hasOwnProperty('minDeposit')) {
                obj['minDeposit'] = ApiClient.convertToType(data['minDeposit'], 'Number');
            }
            if (data.hasOwnProperty('minWithdrawal')) {
                obj['minWithdrawal'] = ApiClient.convertToType(data['minWithdrawal'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Currency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Currency</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The code of the currency
 * @member {String} code
 */
Currency.prototype['code'] = undefined;

/**
 * The exchange rate for the currency
 * @member {Number} exchangeRate
 */
Currency.prototype['exchangeRate'] = undefined;

/**
 * The maximum deposit for the currency
 * @member {Number} maxDeposit
 */
Currency.prototype['maxDeposit'] = undefined;

/**
 * The maximum withdrawl for the currency
 * @member {Number} maxWithdrawal
 */
Currency.prototype['maxWithdrawal'] = undefined;

/**
 * The minimum deposit for the currency
 * @member {Number} minDeposit
 */
Currency.prototype['minDeposit'] = undefined;

/**
 * The minimum withdrawal for the currency
 * @member {Number} minWithdrawal
 */
Currency.prototype['minWithdrawal'] = undefined;

/**
 * The name of the currency
 * @member {String} name
 */
Currency.prototype['name'] = undefined;






export default Currency;

