/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Addresses from '../model/Addresses';
import Countries from '../model/Countries';
import Country from '../model/Country';
import Currencies from '../model/Currencies';
import Currency from '../model/Currency';
import LocationsErrors from '../model/LocationsErrors';

/**
* Locations service.
* @module api/LocationsApi
* @version 2.0
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressLookup operation.
     * @callback module:api/LocationsApi~addressLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Addresses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details. 
     * @param {String} houseNum House number or name of the address.
     * @param {String} postCode Postcode of the address, no spaces required.
     * @param {module:api/LocationsApi~addressLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Addresses}
     */
    addressLookup(houseNum, postCode, callback) {
      let postBody = null;
      // verify the required parameter 'houseNum' is set
      if (houseNum === undefined || houseNum === null) {
        throw new Error("Missing the required parameter 'houseNum' when calling addressLookup");
      }
      // verify the required parameter 'postCode' is set
      if (postCode === undefined || postCode === null) {
        throw new Error("Missing the required parameter 'postCode' when calling addressLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'houseNum': houseNum,
        'postCode': postCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Addresses;
      return this.apiClient.callApi(
        '/address/lookup/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:api/LocationsApi~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Countries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of countries and its currencies.
     * @param {module:api/LocationsApi~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Countries}
     */
    getCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Countries;
      return this.apiClient.callApi(
        '/countries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountry operation.
     * @callback module:api/LocationsApi~getCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified country and its currency.
     * @param {String} countryCode Code of the country
     * @param {module:api/LocationsApi~getCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    getCountry(countryCode, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getCountry");
      }

      let pathParams = {
        'countryCode': countryCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/countries/{countryCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencies operation.
     * @callback module:api/LocationsApi~getCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Currencies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retreives the list of currencies.
     * @param {module:api/LocationsApi~getCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Currencies}
     */
    getCurrencies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Currencies;
      return this.apiClient.callApi(
        '/currencies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrency operation.
     * @callback module:api/LocationsApi~getCurrencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Currency} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retreives the specified currency.
     * @param {String} currencyCode Code of the currency
     * @param {module:api/LocationsApi~getCurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Currency}
     */
    getCurrency(currencyCode, callback) {
      let postBody = null;
      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling getCurrency");
      }

      let pathParams = {
        'currencyCode': currencyCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Currency;
      return this.apiClient.callApi(
        '/currencies/{currencyCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
