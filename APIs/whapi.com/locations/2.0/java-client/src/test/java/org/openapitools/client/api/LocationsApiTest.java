/*
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Addresses;
import org.openapitools.client.model.Countries;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Currencies;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.LocationsErrors;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addressLookupTest() throws ApiException {
        String houseNum = null;
        String postCode = null;
        Addresses response = api.addressLookup(houseNum, postCode);
        // TODO: test validations
    }

    /**
     * Retrieves a list of countries and its currencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCountriesTest() throws ApiException {
        Countries response = api.getCountries();
        // TODO: test validations
    }

    /**
     * Retrieves the specified country and its currency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCountryTest() throws ApiException {
        String countryCode = null;
        Country response = api.getCountry(countryCode);
        // TODO: test validations
    }

    /**
     * Retreives the list of currencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrenciesTest() throws ApiException {
        Currencies response = api.getCurrencies();
        // TODO: test validations
    }

    /**
     * Retreives the specified currency.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyTest() throws ApiException {
        String currencyCode = null;
        Currency response = api.getCurrency(currencyCode);
        // TODO: test validations
    }

}
