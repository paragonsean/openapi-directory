/*
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Addresses;
import org.openapitools.client.model.Countries;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Currencies;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.LocationsErrors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addressLookup
     * @param houseNum House number or name of the address. (required)
     * @param postCode Postcode of the address, no spaces required. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressLookupCall(String houseNum, String postCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/address/lookup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (houseNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("houseNum", houseNum));
        }

        if (postCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postCode", postCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressLookupValidateBeforeCall(String houseNum, String postCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'houseNum' is set
        if (houseNum == null) {
            throw new ApiException("Missing the required parameter 'houseNum' when calling addressLookup(Async)");
        }

        // verify the required parameter 'postCode' is set
        if (postCode == null) {
            throw new ApiException("Missing the required parameter 'postCode' when calling addressLookup(Async)");
        }

        return addressLookupCall(houseNum, postCode, _callback);

    }

    /**
     * 
     * Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details. 
     * @param houseNum House number or name of the address. (required)
     * @param postCode Postcode of the address, no spaces required. (required)
     * @return Addresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public Addresses addressLookup(String houseNum, String postCode) throws ApiException {
        ApiResponse<Addresses> localVarResp = addressLookupWithHttpInfo(houseNum, postCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details. 
     * @param houseNum House number or name of the address. (required)
     * @param postCode Postcode of the address, no spaces required. (required)
     * @return ApiResponse&lt;Addresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addresses> addressLookupWithHttpInfo(String houseNum, String postCode) throws ApiException {
        okhttp3.Call localVarCall = addressLookupValidateBeforeCall(houseNum, postCode, null);
        Type localVarReturnType = new TypeToken<Addresses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details. 
     * @param houseNum House number or name of the address. (required)
     * @param postCode Postcode of the address, no spaces required. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressLookupAsync(String houseNum, String postCode, final ApiCallback<Addresses> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressLookupValidateBeforeCall(houseNum, postCode, _callback);
        Type localVarReturnType = new TypeToken<Addresses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCountriesCall(_callback);

    }

    /**
     * 
     * Retrieves a list of countries and its currencies.
     * @return Countries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public Countries getCountries() throws ApiException {
        ApiResponse<Countries> localVarResp = getCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of countries and its currencies.
     * @return ApiResponse&lt;Countries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Countries> getCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Countries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of countries and its currencies.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesAsync(final ApiCallback<Countries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Countries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountry
     * @param countryCode Code of the country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryCall(String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{countryCode}"
            .replace("{" + "countryCode" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryValidateBeforeCall(String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getCountry(Async)");
        }

        return getCountryCall(countryCode, _callback);

    }

    /**
     * 
     * Retrieves the specified country and its currency.
     * @param countryCode Code of the country (required)
     * @return Country
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public Country getCountry(String countryCode) throws ApiException {
        ApiResponse<Country> localVarResp = getCountryWithHttpInfo(countryCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified country and its currency.
     * @param countryCode Code of the country (required)
     * @return ApiResponse&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Country> getCountryWithHttpInfo(String countryCode) throws ApiException {
        okhttp3.Call localVarCall = getCountryValidateBeforeCall(countryCode, null);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified country and its currency.
     * @param countryCode Code of the country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Country/Countries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountryAsync(String countryCode, final ApiCallback<Country> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryValidateBeforeCall(countryCode, _callback);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currencies/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrenciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrenciesCall(_callback);

    }

    /**
     * 
     * Retreives the list of currencies.
     * @return Currencies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public Currencies getCurrencies() throws ApiException {
        ApiResponse<Currencies> localVarResp = getCurrenciesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retreives the list of currencies.
     * @return ApiResponse&lt;Currencies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Currencies> getCurrenciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retreives the list of currencies.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrenciesAsync(final ApiCallback<Currencies> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrenciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Currencies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrency
     * @param currencyCode Code of the currency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/currencies/{currencyCode}"
            .replace("{" + "currencyCode" + "}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyValidateBeforeCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getCurrency(Async)");
        }

        return getCurrencyCall(currencyCode, _callback);

    }

    /**
     * 
     * Retreives the specified currency.
     * @param currencyCode Code of the currency (required)
     * @return Currency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public Currency getCurrency(String currencyCode) throws ApiException {
        ApiResponse<Currency> localVarResp = getCurrencyWithHttpInfo(currencyCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retreives the specified currency.
     * @param currencyCode Code of the currency (required)
     * @return ApiResponse&lt;Currency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Currency> getCurrencyWithHttpInfo(String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyValidateBeforeCall(currencyCode, null);
        Type localVarReturnType = new TypeToken<Currency>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retreives the specified currency.
     * @param currencyCode Code of the currency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or Invalid Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Currency not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyAsync(String currencyCode, final ApiCallback<Currency> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyValidateBeforeCall(currencyCode, _callback);
        Type localVarReturnType = new TypeToken<Currency>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
