/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrency::OAICurrency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrency::OAICurrency() {
    this->initializeModel();
}

OAICurrency::~OAICurrency() {}

void OAICurrency::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_max_deposit_isSet = false;
    m_max_deposit_isValid = false;

    m_max_withdrawal_isSet = false;
    m_max_withdrawal_isValid = false;

    m_min_deposit_isSet = false;
    m_min_deposit_isValid = false;

    m_min_withdrawal_isSet = false;
    m_min_withdrawal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICurrency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrency::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_max_deposit_isValid = ::OpenAPI::fromJsonValue(m_max_deposit, json[QString("maxDeposit")]);
    m_max_deposit_isSet = !json[QString("maxDeposit")].isNull() && m_max_deposit_isValid;

    m_max_withdrawal_isValid = ::OpenAPI::fromJsonValue(m_max_withdrawal, json[QString("maxWithdrawal")]);
    m_max_withdrawal_isSet = !json[QString("maxWithdrawal")].isNull() && m_max_withdrawal_isValid;

    m_min_deposit_isValid = ::OpenAPI::fromJsonValue(m_min_deposit, json[QString("minDeposit")]);
    m_min_deposit_isSet = !json[QString("minDeposit")].isNull() && m_min_deposit_isValid;

    m_min_withdrawal_isValid = ::OpenAPI::fromJsonValue(m_min_withdrawal, json[QString("minWithdrawal")]);
    m_min_withdrawal_isSet = !json[QString("minWithdrawal")].isNull() && m_min_withdrawal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICurrency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrency::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_max_deposit_isSet) {
        obj.insert(QString("maxDeposit"), ::OpenAPI::toJsonValue(m_max_deposit));
    }
    if (m_max_withdrawal_isSet) {
        obj.insert(QString("maxWithdrawal"), ::OpenAPI::toJsonValue(m_max_withdrawal));
    }
    if (m_min_deposit_isSet) {
        obj.insert(QString("minDeposit"), ::OpenAPI::toJsonValue(m_min_deposit));
    }
    if (m_min_withdrawal_isSet) {
        obj.insert(QString("minWithdrawal"), ::OpenAPI::toJsonValue(m_min_withdrawal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICurrency::getCode() const {
    return m_code;
}
void OAICurrency::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICurrency::is_code_Set() const{
    return m_code_isSet;
}

bool OAICurrency::is_code_Valid() const{
    return m_code_isValid;
}

double OAICurrency::getExchangeRate() const {
    return m_exchange_rate;
}
void OAICurrency::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAICurrency::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAICurrency::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

double OAICurrency::getMaxDeposit() const {
    return m_max_deposit;
}
void OAICurrency::setMaxDeposit(const double &max_deposit) {
    m_max_deposit = max_deposit;
    m_max_deposit_isSet = true;
}

bool OAICurrency::is_max_deposit_Set() const{
    return m_max_deposit_isSet;
}

bool OAICurrency::is_max_deposit_Valid() const{
    return m_max_deposit_isValid;
}

double OAICurrency::getMaxWithdrawal() const {
    return m_max_withdrawal;
}
void OAICurrency::setMaxWithdrawal(const double &max_withdrawal) {
    m_max_withdrawal = max_withdrawal;
    m_max_withdrawal_isSet = true;
}

bool OAICurrency::is_max_withdrawal_Set() const{
    return m_max_withdrawal_isSet;
}

bool OAICurrency::is_max_withdrawal_Valid() const{
    return m_max_withdrawal_isValid;
}

double OAICurrency::getMinDeposit() const {
    return m_min_deposit;
}
void OAICurrency::setMinDeposit(const double &min_deposit) {
    m_min_deposit = min_deposit;
    m_min_deposit_isSet = true;
}

bool OAICurrency::is_min_deposit_Set() const{
    return m_min_deposit_isSet;
}

bool OAICurrency::is_min_deposit_Valid() const{
    return m_min_deposit_isValid;
}

double OAICurrency::getMinWithdrawal() const {
    return m_min_withdrawal;
}
void OAICurrency::setMinWithdrawal(const double &min_withdrawal) {
    m_min_withdrawal = min_withdrawal;
    m_min_withdrawal_isSet = true;
}

bool OAICurrency::is_min_withdrawal_Set() const{
    return m_min_withdrawal_isSet;
}

bool OAICurrency::is_min_withdrawal_Valid() const{
    return m_min_withdrawal_isValid;
}

QString OAICurrency::getName() const {
    return m_name;
}
void OAICurrency::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICurrency::is_name_Set() const{
    return m_name_isSet;
}

bool OAICurrency::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICurrency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_deposit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_withdrawal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_deposit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_withdrawal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
