/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddresses.h"
#include "OAICountries.h"
#include "OAICountry.h"
#include "OAICurrencies.h"
#include "OAICurrency.h"
#include "OAILocationsErrors.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  house_num QString [required]
    * @param[in]  post_code QString [required]
    */
    virtual void addressLookup(const QString &house_num, const QString &post_code);


    virtual void getCountries();

    /**
    * @param[in]  country_code QString [required]
    */
    virtual void getCountry(const QString &country_code);


    virtual void getCurrencies();

    /**
    * @param[in]  currency_code QString [required]
    */
    virtual void getCurrency(const QString &currency_code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressLookupCallback(OAIHttpRequestWorker *worker);
    void getCountriesCallback(OAIHttpRequestWorker *worker);
    void getCountryCallback(OAIHttpRequestWorker *worker);
    void getCurrenciesCallback(OAIHttpRequestWorker *worker);
    void getCurrencyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressLookupSignal(OAIAddresses summary);
    void getCountriesSignal(OAICountries summary);
    void getCountrySignal(OAICountry summary);
    void getCurrenciesSignal(OAICurrencies summary);
    void getCurrencySignal(OAICurrency summary);


    void addressLookupSignalFull(OAIHttpRequestWorker *worker, OAIAddresses summary);
    void getCountriesSignalFull(OAIHttpRequestWorker *worker, OAICountries summary);
    void getCountrySignalFull(OAIHttpRequestWorker *worker, OAICountry summary);
    void getCurrenciesSignalFull(OAIHttpRequestWorker *worker, OAICurrencies summary);
    void getCurrencySignalFull(OAIHttpRequestWorker *worker, OAICurrency summary);

    Q_DECL_DEPRECATED_X("Use addressLookupSignalError() instead")
    void addressLookupSignalE(OAIAddresses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addressLookupSignalError(OAIAddresses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesSignalError() instead")
    void getCountriesSignalE(OAICountries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesSignalError(OAICountries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountrySignalError() instead")
    void getCountrySignalE(OAICountry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountrySignalError(OAICountry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrenciesSignalError() instead")
    void getCurrenciesSignalE(OAICurrencies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesSignalError(OAICurrencies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrencySignalError() instead")
    void getCurrencySignalE(OAICurrency summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrencySignalError(OAICurrency summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressLookupSignalErrorFull() instead")
    void addressLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesSignalErrorFull() instead")
    void getCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountrySignalErrorFull() instead")
    void getCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrenciesSignalErrorFull() instead")
    void getCurrenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrencySignalErrorFull() instead")
    void getCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
