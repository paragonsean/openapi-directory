/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountries::OAICountries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountries::OAICountries() {
    this->initializeModel();
}

OAICountries::~OAICountries() {}

void OAICountries::initializeModel() {

    m_countries_isSet = false;
    m_countries_isValid = false;
}

void OAICountries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountries::fromJsonObject(QJsonObject json) {

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;
}

QString OAICountries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountries::asJsonObject() const {
    QJsonObject obj;
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    return obj;
}

QList<OAICountry> OAICountries::getCountries() const {
    return m_countries;
}
void OAICountries::setCountries(const QList<OAICountry> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAICountries::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAICountries::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAICountries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
