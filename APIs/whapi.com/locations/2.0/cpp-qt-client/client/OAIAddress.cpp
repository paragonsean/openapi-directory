/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_full_address_isSet = false;
    m_full_address_isValid = false;

    m_post_code_isSet = false;
    m_post_code_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_full_address_isValid = ::OpenAPI::fromJsonValue(m_full_address, json[QString("fullAddress")]);
    m_full_address_isSet = !json[QString("fullAddress")].isNull() && m_full_address_isValid;

    m_post_code_isValid = ::OpenAPI::fromJsonValue(m_post_code, json[QString("postCode")]);
    m_post_code_isSet = !json[QString("postCode")].isNull() && m_post_code_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_full_address_isSet) {
        obj.insert(QString("fullAddress"), ::OpenAPI::toJsonValue(m_full_address));
    }
    if (m_post_code_isSet) {
        obj.insert(QString("postCode"), ::OpenAPI::toJsonValue(m_post_code));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getCounty() const {
    return m_county;
}
void OAIAddress::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIAddress::is_county_Set() const{
    return m_county_isSet;
}

bool OAIAddress::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIAddress::getFullAddress() const {
    return m_full_address;
}
void OAIAddress::setFullAddress(const QString &full_address) {
    m_full_address = full_address;
    m_full_address_isSet = true;
}

bool OAIAddress::is_full_address_Set() const{
    return m_full_address_isSet;
}

bool OAIAddress::is_full_address_Valid() const{
    return m_full_address_isValid;
}

QString OAIAddress::getPostCode() const {
    return m_post_code;
}
void OAIAddress::setPostCode(const QString &post_code) {
    m_post_code = post_code;
    m_post_code_isSet = true;
}

bool OAIAddress::is_post_code_Set() const{
    return m_post_code_isSet;
}

bool OAIAddress::is_post_code_Valid() const{
    return m_post_code_isValid;
}

QString OAIAddress::getStreet() const {
    return m_street;
}
void OAIAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAddress::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
