/**
 * Locations
 * The Locations API is a collection of methods that support geographical information. The first method is an address lookup service for UK addresses. This service can be used to provide a new customer with a list of possible addresses from which they can populate a registration form.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry::OAICountry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry::OAICountry() {
    this->initializeModel();
}

OAICountry::~OAICountry() {}

void OAICountry::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_dial_code_isSet = false;
    m_dial_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICountry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_dial_code_isValid = ::OpenAPI::fromJsonValue(m_dial_code, json[QString("dialCode")]);
    m_dial_code_isSet = !json[QString("dialCode")].isNull() && m_dial_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICountry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_dial_code_isSet) {
        obj.insert(QString("dialCode"), ::OpenAPI::toJsonValue(m_dial_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICountry::getCode() const {
    return m_code;
}
void OAICountry::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICountry::is_code_Set() const{
    return m_code_isSet;
}

bool OAICountry::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICountry::getCurrencyCode() const {
    return m_currency_code;
}
void OAICountry::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICountry::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICountry::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAICountry::getDialCode() const {
    return m_dial_code;
}
void OAICountry::setDialCode(const QString &dial_code) {
    m_dial_code = dial_code;
    m_dial_code_isSet = true;
}

bool OAICountry::is_dial_code_Set() const{
    return m_dial_code_isSet;
}

bool OAICountry::is_dial_code_Valid() const{
    return m_dial_code_isValid;
}

QString OAICountry::getName() const {
    return m_name;
}
void OAICountry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountry::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountry::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICountry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dial_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
