# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, exchange_rate: float=None, max_deposit: float=None, max_withdrawal: float=None, min_deposit: float=None, min_withdrawal: float=None, name: str=None):
        """Currency - a model defined in OpenAPI

        :param code: The code of this Currency.
        :param exchange_rate: The exchange_rate of this Currency.
        :param max_deposit: The max_deposit of this Currency.
        :param max_withdrawal: The max_withdrawal of this Currency.
        :param min_deposit: The min_deposit of this Currency.
        :param min_withdrawal: The min_withdrawal of this Currency.
        :param name: The name of this Currency.
        """
        self.openapi_types = {
            'code': str,
            'exchange_rate': float,
            'max_deposit': float,
            'max_withdrawal': float,
            'min_deposit': float,
            'min_withdrawal': float,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'exchange_rate': 'exchangeRate',
            'max_deposit': 'maxDeposit',
            'max_withdrawal': 'maxWithdrawal',
            'min_deposit': 'minDeposit',
            'min_withdrawal': 'minWithdrawal',
            'name': 'name'
        }

        self._code = code
        self._exchange_rate = exchange_rate
        self._max_deposit = max_deposit
        self._max_withdrawal = max_withdrawal
        self._min_deposit = min_deposit
        self._min_withdrawal = min_withdrawal
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Currency.

        The code of the currency

        :return: The code of this Currency.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Currency.

        The code of the currency

        :param code: The code of this Currency.
        :type code: str
        """

        self._code = code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this Currency.

        The exchange rate for the currency

        :return: The exchange_rate of this Currency.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this Currency.

        The exchange rate for the currency

        :param exchange_rate: The exchange_rate of this Currency.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def max_deposit(self):
        """Gets the max_deposit of this Currency.

        The maximum deposit for the currency

        :return: The max_deposit of this Currency.
        :rtype: float
        """
        return self._max_deposit

    @max_deposit.setter
    def max_deposit(self, max_deposit):
        """Sets the max_deposit of this Currency.

        The maximum deposit for the currency

        :param max_deposit: The max_deposit of this Currency.
        :type max_deposit: float
        """

        self._max_deposit = max_deposit

    @property
    def max_withdrawal(self):
        """Gets the max_withdrawal of this Currency.

        The maximum withdrawl for the currency

        :return: The max_withdrawal of this Currency.
        :rtype: float
        """
        return self._max_withdrawal

    @max_withdrawal.setter
    def max_withdrawal(self, max_withdrawal):
        """Sets the max_withdrawal of this Currency.

        The maximum withdrawl for the currency

        :param max_withdrawal: The max_withdrawal of this Currency.
        :type max_withdrawal: float
        """

        self._max_withdrawal = max_withdrawal

    @property
    def min_deposit(self):
        """Gets the min_deposit of this Currency.

        The minimum deposit for the currency

        :return: The min_deposit of this Currency.
        :rtype: float
        """
        return self._min_deposit

    @min_deposit.setter
    def min_deposit(self, min_deposit):
        """Sets the min_deposit of this Currency.

        The minimum deposit for the currency

        :param min_deposit: The min_deposit of this Currency.
        :type min_deposit: float
        """

        self._min_deposit = min_deposit

    @property
    def min_withdrawal(self):
        """Gets the min_withdrawal of this Currency.

        The minimum withdrawal for the currency

        :return: The min_withdrawal of this Currency.
        :rtype: float
        """
        return self._min_withdrawal

    @min_withdrawal.setter
    def min_withdrawal(self, min_withdrawal):
        """Sets the min_withdrawal of this Currency.

        The minimum withdrawal for the currency

        :param min_withdrawal: The min_withdrawal of this Currency.
        :type min_withdrawal: float
        """

        self._min_withdrawal = min_withdrawal

    @property
    def name(self):
        """Gets the name of this Currency.

        The name of the currency

        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.

        The name of the currency

        :param name: The name of this Currency.
        :type name: str
        """

        self._name = name
