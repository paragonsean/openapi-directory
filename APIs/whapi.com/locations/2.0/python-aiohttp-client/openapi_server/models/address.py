# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, county: str=None, full_address: str=None, post_code: str=None, street: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param county: The county of this Address.
        :param full_address: The full_address of this Address.
        :param post_code: The post_code of this Address.
        :param street: The street of this Address.
        """
        self.openapi_types = {
            'city': str,
            'county': str,
            'full_address': str,
            'post_code': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'county': 'county',
            'full_address': 'fullAddress',
            'post_code': 'postCode',
            'street': 'street'
        }

        self._city = city
        self._county = county
        self._full_address = full_address
        self._post_code = post_code
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        The name of the postal city/town

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The name of the postal city/town

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def county(self):
        """Gets the county of this Address.

        The name of the county

        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        The name of the county

        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def full_address(self):
        """Gets the full_address of this Address.

        The customer’s complete address including postcode

        :return: The full_address of this Address.
        :rtype: str
        """
        return self._full_address

    @full_address.setter
    def full_address(self, full_address):
        """Sets the full_address of this Address.

        The customer’s complete address including postcode

        :param full_address: The full_address of this Address.
        :type full_address: str
        """

        self._full_address = full_address

    @property
    def post_code(self):
        """Gets the post_code of this Address.

        The postcode of the address

        :return: The post_code of this Address.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this Address.

        The postcode of the address

        :param post_code: The post_code of this Address.
        :type post_code: str
        """

        self._post_code = post_code

    @property
    def street(self):
        """Gets the street of this Address.

        The name of the street including the house number/house name

        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        The name of the street including the house number/house name

        :param street: The street of this Address.
        :type street: str
        """

        self._street = street
