# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.market import Market
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bet_in_running_delay: float=None, betting_status: str=None, cashin_available: bool=None, channels: List[str]=None, country: str=None, description: str=None, displayed: bool=None, event_sort: str=None, flags: List[str]=None, has_in_play_markets: bool=None, has_live_prices: bool=None, id: str=None, is_in_play: bool=None, is_published: bool=None, market_count_active_in_play: float=None, market_count_active_pre_match: float=None, market_count_active_total: float=None, market_count_in_play: float=None, market_count_pre_match: float=None, markets: List[Market]=None, name: str=None, order: float=None, parent_ids: List[str]=None, race_num: str=None, settled: bool=None, start_date_time: str=None, status: str=None):
        """Event - a model defined in OpenAPI

        :param bet_in_running_delay: The bet_in_running_delay of this Event.
        :param betting_status: The betting_status of this Event.
        :param cashin_available: The cashin_available of this Event.
        :param channels: The channels of this Event.
        :param country: The country of this Event.
        :param description: The description of this Event.
        :param displayed: The displayed of this Event.
        :param event_sort: The event_sort of this Event.
        :param flags: The flags of this Event.
        :param has_in_play_markets: The has_in_play_markets of this Event.
        :param has_live_prices: The has_live_prices of this Event.
        :param id: The id of this Event.
        :param is_in_play: The is_in_play of this Event.
        :param is_published: The is_published of this Event.
        :param market_count_active_in_play: The market_count_active_in_play of this Event.
        :param market_count_active_pre_match: The market_count_active_pre_match of this Event.
        :param market_count_active_total: The market_count_active_total of this Event.
        :param market_count_in_play: The market_count_in_play of this Event.
        :param market_count_pre_match: The market_count_pre_match of this Event.
        :param markets: The markets of this Event.
        :param name: The name of this Event.
        :param order: The order of this Event.
        :param parent_ids: The parent_ids of this Event.
        :param race_num: The race_num of this Event.
        :param settled: The settled of this Event.
        :param start_date_time: The start_date_time of this Event.
        :param status: The status of this Event.
        """
        self.openapi_types = {
            'bet_in_running_delay': float,
            'betting_status': str,
            'cashin_available': bool,
            'channels': List[str],
            'country': str,
            'description': str,
            'displayed': bool,
            'event_sort': str,
            'flags': List[str],
            'has_in_play_markets': bool,
            'has_live_prices': bool,
            'id': str,
            'is_in_play': bool,
            'is_published': bool,
            'market_count_active_in_play': float,
            'market_count_active_pre_match': float,
            'market_count_active_total': float,
            'market_count_in_play': float,
            'market_count_pre_match': float,
            'markets': List[Market],
            'name': str,
            'order': float,
            'parent_ids': List[str],
            'race_num': str,
            'settled': bool,
            'start_date_time': str,
            'status': str
        }

        self.attribute_map = {
            'bet_in_running_delay': 'betInRunningDelay',
            'betting_status': 'bettingStatus',
            'cashin_available': 'cashinAvailable',
            'channels': 'channels',
            'country': 'country',
            'description': 'description',
            'displayed': 'displayed',
            'event_sort': 'eventSort',
            'flags': 'flags',
            'has_in_play_markets': 'hasInPlayMarkets',
            'has_live_prices': 'hasLivePrices',
            'id': 'id',
            'is_in_play': 'isInPlay',
            'is_published': 'isPublished',
            'market_count_active_in_play': 'marketCountActiveInPlay',
            'market_count_active_pre_match': 'marketCountActivePreMatch',
            'market_count_active_total': 'marketCountActiveTotal',
            'market_count_in_play': 'marketCountInPlay',
            'market_count_pre_match': 'marketCountPreMatch',
            'markets': 'markets',
            'name': 'name',
            'order': 'order',
            'parent_ids': 'parentIds',
            'race_num': 'raceNum',
            'settled': 'settled',
            'start_date_time': 'startDateTime',
            'status': 'status'
        }

        self._bet_in_running_delay = bet_in_running_delay
        self._betting_status = betting_status
        self._cashin_available = cashin_available
        self._channels = channels
        self._country = country
        self._description = description
        self._displayed = displayed
        self._event_sort = event_sort
        self._flags = flags
        self._has_in_play_markets = has_in_play_markets
        self._has_live_prices = has_live_prices
        self._id = id
        self._is_in_play = is_in_play
        self._is_published = is_published
        self._market_count_active_in_play = market_count_active_in_play
        self._market_count_active_pre_match = market_count_active_pre_match
        self._market_count_active_total = market_count_active_total
        self._market_count_in_play = market_count_in_play
        self._market_count_pre_match = market_count_pre_match
        self._markets = markets
        self._name = name
        self._order = order
        self._parent_ids = parent_ids
        self._race_num = race_num
        self._settled = settled
        self._start_date_time = start_date_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bet_in_running_delay(self):
        """Gets the bet_in_running_delay of this Event.

        Delay in seconds between bet being sent and bet being placed

        :return: The bet_in_running_delay of this Event.
        :rtype: float
        """
        return self._bet_in_running_delay

    @bet_in_running_delay.setter
    def bet_in_running_delay(self, bet_in_running_delay):
        """Sets the bet_in_running_delay of this Event.

        Delay in seconds between bet being sent and bet being placed

        :param bet_in_running_delay: The bet_in_running_delay of this Event.
        :type bet_in_running_delay: float
        """

        self._bet_in_running_delay = bet_in_running_delay

    @property
    def betting_status(self):
        """Gets the betting_status of this Event.

        Betting status of the event

        :return: The betting_status of this Event.
        :rtype: str
        """
        return self._betting_status

    @betting_status.setter
    def betting_status(self, betting_status):
        """Sets the betting_status of this Event.

        Betting status of the event

        :param betting_status: The betting_status of this Event.
        :type betting_status: str
        """

        self._betting_status = betting_status

    @property
    def cashin_available(self):
        """Gets the cashin_available of this Event.

        Whether cashin is available on this event

        :return: The cashin_available of this Event.
        :rtype: bool
        """
        return self._cashin_available

    @cashin_available.setter
    def cashin_available(self, cashin_available):
        """Sets the cashin_available of this Event.

        Whether cashin is available on this event

        :param cashin_available: The cashin_available of this Event.
        :type cashin_available: bool
        """

        self._cashin_available = cashin_available

    @property
    def channels(self):
        """Gets the channels of this Event.

        A list of channels that apply to this event

        :return: The channels of this Event.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Event.

        A list of channels that apply to this event

        :param channels: The channels of this Event.
        :type channels: List[str]
        """

        self._channels = channels

    @property
    def country(self):
        """Gets the country of this Event.

        A string indicating the country code of this event if available

        :return: The country of this Event.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Event.

        A string indicating the country code of this event if available

        :param country: The country of this Event.
        :type country: str
        """

        self._country = country

    @property
    def description(self):
        """Gets the description of this Event.

        The description of the event

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        The description of the event

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def displayed(self):
        """Gets the displayed of this Event.

        whether the event should be displayed or not

        :return: The displayed of this Event.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this Event.

        whether the event should be displayed or not

        :param displayed: The displayed of this Event.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def event_sort(self):
        """Gets the event_sort of this Event.

        What type of event is this? (e.g. MTCH, TRNMT)

        :return: The event_sort of this Event.
        :rtype: str
        """
        return self._event_sort

    @event_sort.setter
    def event_sort(self, event_sort):
        """Sets the event_sort of this Event.

        What type of event is this? (e.g. MTCH, TRNMT)

        :param event_sort: The event_sort of this Event.
        :type event_sort: str
        """

        self._event_sort = event_sort

    @property
    def flags(self):
        """Gets the flags of this Event.

        A list of flags that apply to this event

        :return: The flags of this Event.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Event.

        A list of flags that apply to this event

        :param flags: The flags of this Event.
        :type flags: List[str]
        """

        self._flags = flags

    @property
    def has_in_play_markets(self):
        """Gets the has_in_play_markets of this Event.

        Whether this event has inplay markets

        :return: The has_in_play_markets of this Event.
        :rtype: bool
        """
        return self._has_in_play_markets

    @has_in_play_markets.setter
    def has_in_play_markets(self, has_in_play_markets):
        """Sets the has_in_play_markets of this Event.

        Whether this event has inplay markets

        :param has_in_play_markets: The has_in_play_markets of this Event.
        :type has_in_play_markets: bool
        """

        self._has_in_play_markets = has_in_play_markets

    @property
    def has_live_prices(self):
        """Gets the has_live_prices of this Event.

        Whether this event has Live Prices

        :return: The has_live_prices of this Event.
        :rtype: bool
        """
        return self._has_live_prices

    @has_live_prices.setter
    def has_live_prices(self, has_live_prices):
        """Sets the has_live_prices of this Event.

        Whether this event has Live Prices

        :param has_live_prices: The has_live_prices of this Event.
        :type has_live_prices: bool
        """

        self._has_live_prices = has_live_prices

    @property
    def id(self):
        """Gets the id of this Event.

        The Id of the event

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        The Id of the event

        :param id: The id of this Event.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_in_play(self):
        """Gets the is_in_play of this Event.

        Whether this event has started and therefore is inplay

        :return: The is_in_play of this Event.
        :rtype: bool
        """
        return self._is_in_play

    @is_in_play.setter
    def is_in_play(self, is_in_play):
        """Sets the is_in_play of this Event.

        Whether this event has started and therefore is inplay

        :param is_in_play: The is_in_play of this Event.
        :type is_in_play: bool
        """

        self._is_in_play = is_in_play

    @property
    def is_published(self):
        """Gets the is_published of this Event.

        Indicates if the item is published

        :return: The is_published of this Event.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Event.

        Indicates if the item is published

        :param is_published: The is_published of this Event.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def market_count_active_in_play(self):
        """Gets the market_count_active_in_play of this Event.

        Count of active markets in play

        :return: The market_count_active_in_play of this Event.
        :rtype: float
        """
        return self._market_count_active_in_play

    @market_count_active_in_play.setter
    def market_count_active_in_play(self, market_count_active_in_play):
        """Sets the market_count_active_in_play of this Event.

        Count of active markets in play

        :param market_count_active_in_play: The market_count_active_in_play of this Event.
        :type market_count_active_in_play: float
        """

        self._market_count_active_in_play = market_count_active_in_play

    @property
    def market_count_active_pre_match(self):
        """Gets the market_count_active_pre_match of this Event.

        count of active market pre-match

        :return: The market_count_active_pre_match of this Event.
        :rtype: float
        """
        return self._market_count_active_pre_match

    @market_count_active_pre_match.setter
    def market_count_active_pre_match(self, market_count_active_pre_match):
        """Sets the market_count_active_pre_match of this Event.

        count of active market pre-match

        :param market_count_active_pre_match: The market_count_active_pre_match of this Event.
        :type market_count_active_pre_match: float
        """

        self._market_count_active_pre_match = market_count_active_pre_match

    @property
    def market_count_active_total(self):
        """Gets the market_count_active_total of this Event.

        Total market count

        :return: The market_count_active_total of this Event.
        :rtype: float
        """
        return self._market_count_active_total

    @market_count_active_total.setter
    def market_count_active_total(self, market_count_active_total):
        """Sets the market_count_active_total of this Event.

        Total market count

        :param market_count_active_total: The market_count_active_total of this Event.
        :type market_count_active_total: float
        """

        self._market_count_active_total = market_count_active_total

    @property
    def market_count_in_play(self):
        """Gets the market_count_in_play of this Event.

        Total inplay markets

        :return: The market_count_in_play of this Event.
        :rtype: float
        """
        return self._market_count_in_play

    @market_count_in_play.setter
    def market_count_in_play(self, market_count_in_play):
        """Sets the market_count_in_play of this Event.

        Total inplay markets

        :param market_count_in_play: The market_count_in_play of this Event.
        :type market_count_in_play: float
        """

        self._market_count_in_play = market_count_in_play

    @property
    def market_count_pre_match(self):
        """Gets the market_count_pre_match of this Event.

        Total prematch markets

        :return: The market_count_pre_match of this Event.
        :rtype: float
        """
        return self._market_count_pre_match

    @market_count_pre_match.setter
    def market_count_pre_match(self, market_count_pre_match):
        """Sets the market_count_pre_match of this Event.

        Total prematch markets

        :param market_count_pre_match: The market_count_pre_match of this Event.
        :type market_count_pre_match: float
        """

        self._market_count_pre_match = market_count_pre_match

    @property
    def markets(self):
        """Gets the markets of this Event.

        A list of markets belonging to this event

        :return: The markets of this Event.
        :rtype: List[Market]
        """
        return self._markets

    @markets.setter
    def markets(self, markets):
        """Sets the markets of this Event.

        A list of markets belonging to this event

        :param markets: The markets of this Event.
        :type markets: List[Market]
        """

        self._markets = markets

    @property
    def name(self):
        """Gets the name of this Event.

        The name of the event

        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.

        The name of the event

        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """Gets the order of this Event.

        Display order of the event

        :return: The order of this Event.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Event.

        Display order of the event

        :param order: The order of this Event.
        :type order: float
        """

        self._order = order

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Event.

        A list of IDs of parent entities

        :return: The parent_ids of this Event.
        :rtype: List[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Event.

        A list of IDs of parent entities

        :param parent_ids: The parent_ids of this Event.
        :type parent_ids: List[str]
        """

        self._parent_ids = parent_ids

    @property
    def race_num(self):
        """Gets the race_num of this Event.

        Race number for race events

        :return: The race_num of this Event.
        :rtype: str
        """
        return self._race_num

    @race_num.setter
    def race_num(self, race_num):
        """Sets the race_num of this Event.

        Race number for race events

        :param race_num: The race_num of this Event.
        :type race_num: str
        """

        self._race_num = race_num

    @property
    def settled(self):
        """Gets the settled of this Event.

        Whether the event has been settled

        :return: The settled of this Event.
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Event.

        Whether the event has been settled

        :param settled: The settled of this Event.
        :type settled: bool
        """

        self._settled = settled

    @property
    def start_date_time(self):
        """Gets the start_date_time of this Event.

        The start date and time of the event

        :return: The start_date_time of this Event.
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this Event.

        The start date and time of the event

        :param start_date_time: The start_date_time of this Event.
        :type start_date_time: str
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")

        self._start_date_time = start_date_time

    @property
    def status(self):
        """Gets the status of this Event.

        Status of the event (A for Active, S for Suspended)

        :return: The status of this Event.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Event.

        Status of the event (A for Active, S for Suspended)

        :param status: The status of this Event.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
