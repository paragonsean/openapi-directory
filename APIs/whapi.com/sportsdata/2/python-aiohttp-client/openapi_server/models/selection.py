# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_formatted import PriceFormatted
from openapi_server import util


class Selection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cashin_price_den: float=None, cashin_price_num: float=None, channels: List[str]=None, cs_away: float=None, cs_home: float=None, current_price_den: float=None, current_price_num: float=None, description: str=None, displayed: bool=None, id: str=None, is_published: bool=None, name: str=None, odds_decimal: float=None, odds_fractional: float=None, order: float=None, parent_ids: List[str]=None, price_formatted: PriceFormatted=None, result: str=None, result_type: str=None, runner_num: float=None, settled: bool=None, status: str=None):
        """Selection - a model defined in OpenAPI

        :param cashin_price_den: The cashin_price_den of this Selection.
        :param cashin_price_num: The cashin_price_num of this Selection.
        :param channels: The channels of this Selection.
        :param cs_away: The cs_away of this Selection.
        :param cs_home: The cs_home of this Selection.
        :param current_price_den: The current_price_den of this Selection.
        :param current_price_num: The current_price_num of this Selection.
        :param description: The description of this Selection.
        :param displayed: The displayed of this Selection.
        :param id: The id of this Selection.
        :param is_published: The is_published of this Selection.
        :param name: The name of this Selection.
        :param odds_decimal: The odds_decimal of this Selection.
        :param odds_fractional: The odds_fractional of this Selection.
        :param order: The order of this Selection.
        :param parent_ids: The parent_ids of this Selection.
        :param price_formatted: The price_formatted of this Selection.
        :param result: The result of this Selection.
        :param result_type: The result_type of this Selection.
        :param runner_num: The runner_num of this Selection.
        :param settled: The settled of this Selection.
        :param status: The status of this Selection.
        """
        self.openapi_types = {
            'cashin_price_den': float,
            'cashin_price_num': float,
            'channels': List[str],
            'cs_away': float,
            'cs_home': float,
            'current_price_den': float,
            'current_price_num': float,
            'description': str,
            'displayed': bool,
            'id': str,
            'is_published': bool,
            'name': str,
            'odds_decimal': float,
            'odds_fractional': float,
            'order': float,
            'parent_ids': List[str],
            'price_formatted': PriceFormatted,
            'result': str,
            'result_type': str,
            'runner_num': float,
            'settled': bool,
            'status': str
        }

        self.attribute_map = {
            'cashin_price_den': 'cashinPriceDen',
            'cashin_price_num': 'cashinPriceNum',
            'channels': 'channels',
            'cs_away': 'csAway',
            'cs_home': 'csHome',
            'current_price_den': 'currentPriceDen',
            'current_price_num': 'currentPriceNum',
            'description': 'description',
            'displayed': 'displayed',
            'id': 'id',
            'is_published': 'isPublished',
            'name': 'name',
            'odds_decimal': 'oddsDecimal',
            'odds_fractional': 'oddsFractional',
            'order': 'order',
            'parent_ids': 'parentIds',
            'price_formatted': 'priceFormatted',
            'result': 'result',
            'result_type': 'resultType',
            'runner_num': 'runnerNum',
            'settled': 'settled',
            'status': 'status'
        }

        self._cashin_price_den = cashin_price_den
        self._cashin_price_num = cashin_price_num
        self._channels = channels
        self._cs_away = cs_away
        self._cs_home = cs_home
        self._current_price_den = current_price_den
        self._current_price_num = current_price_num
        self._description = description
        self._displayed = displayed
        self._id = id
        self._is_published = is_published
        self._name = name
        self._odds_decimal = odds_decimal
        self._odds_fractional = odds_fractional
        self._order = order
        self._parent_ids = parent_ids
        self._price_formatted = price_formatted
        self._result = result
        self._result_type = result_type
        self._runner_num = runner_num
        self._settled = settled
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Selection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The selection of this Selection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cashin_price_den(self):
        """Gets the cashin_price_den of this Selection.

        The cashin price denominator

        :return: The cashin_price_den of this Selection.
        :rtype: float
        """
        return self._cashin_price_den

    @cashin_price_den.setter
    def cashin_price_den(self, cashin_price_den):
        """Sets the cashin_price_den of this Selection.

        The cashin price denominator

        :param cashin_price_den: The cashin_price_den of this Selection.
        :type cashin_price_den: float
        """

        self._cashin_price_den = cashin_price_den

    @property
    def cashin_price_num(self):
        """Gets the cashin_price_num of this Selection.

        The cashin price numerator

        :return: The cashin_price_num of this Selection.
        :rtype: float
        """
        return self._cashin_price_num

    @cashin_price_num.setter
    def cashin_price_num(self, cashin_price_num):
        """Sets the cashin_price_num of this Selection.

        The cashin price numerator

        :param cashin_price_num: The cashin_price_num of this Selection.
        :type cashin_price_num: float
        """

        self._cashin_price_num = cashin_price_num

    @property
    def channels(self):
        """Gets the channels of this Selection.

        A list of channels that applies to this selection

        :return: The channels of this Selection.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Selection.

        A list of channels that applies to this selection

        :param channels: The channels of this Selection.
        :type channels: List[str]
        """

        self._channels = channels

    @property
    def cs_away(self):
        """Gets the cs_away of this Selection.

        The away score in a correct score event

        :return: The cs_away of this Selection.
        :rtype: float
        """
        return self._cs_away

    @cs_away.setter
    def cs_away(self, cs_away):
        """Sets the cs_away of this Selection.

        The away score in a correct score event

        :param cs_away: The cs_away of this Selection.
        :type cs_away: float
        """

        self._cs_away = cs_away

    @property
    def cs_home(self):
        """Gets the cs_home of this Selection.

        The home score in a correct score event

        :return: The cs_home of this Selection.
        :rtype: float
        """
        return self._cs_home

    @cs_home.setter
    def cs_home(self, cs_home):
        """Sets the cs_home of this Selection.

        The home score in a correct score event

        :param cs_home: The cs_home of this Selection.
        :type cs_home: float
        """

        self._cs_home = cs_home

    @property
    def current_price_den(self):
        """Gets the current_price_den of this Selection.

        Denominator of the price

        :return: The current_price_den of this Selection.
        :rtype: float
        """
        return self._current_price_den

    @current_price_den.setter
    def current_price_den(self, current_price_den):
        """Sets the current_price_den of this Selection.

        Denominator of the price

        :param current_price_den: The current_price_den of this Selection.
        :type current_price_den: float
        """

        self._current_price_den = current_price_den

    @property
    def current_price_num(self):
        """Gets the current_price_num of this Selection.

        Numerator of the price

        :return: The current_price_num of this Selection.
        :rtype: float
        """
        return self._current_price_num

    @current_price_num.setter
    def current_price_num(self, current_price_num):
        """Sets the current_price_num of this Selection.

        Numerator of the price

        :param current_price_num: The current_price_num of this Selection.
        :type current_price_num: float
        """

        self._current_price_num = current_price_num

    @property
    def description(self):
        """Gets the description of this Selection.

        The description of the selection

        :return: The description of this Selection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Selection.

        The description of the selection

        :param description: The description of this Selection.
        :type description: str
        """

        self._description = description

    @property
    def displayed(self):
        """Gets the displayed of this Selection.

        Wether this selection should be displayed or not

        :return: The displayed of this Selection.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this Selection.

        Wether this selection should be displayed or not

        :param displayed: The displayed of this Selection.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def id(self):
        """Gets the id of this Selection.

        The Id of the selection

        :return: The id of this Selection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Selection.

        The Id of the selection

        :param id: The id of this Selection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_published(self):
        """Gets the is_published of this Selection.

        Indicates if the item is published

        :return: The is_published of this Selection.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Selection.

        Indicates if the item is published

        :param is_published: The is_published of this Selection.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def name(self):
        """Gets the name of this Selection.

        The name of the selection

        :return: The name of this Selection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Selection.

        The name of the selection

        :param name: The name of this Selection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def odds_decimal(self):
        """Gets the odds_decimal of this Selection.

        The selection price, in decimal format

        :return: The odds_decimal of this Selection.
        :rtype: float
        """
        return self._odds_decimal

    @odds_decimal.setter
    def odds_decimal(self, odds_decimal):
        """Sets the odds_decimal of this Selection.

        The selection price, in decimal format

        :param odds_decimal: The odds_decimal of this Selection.
        :type odds_decimal: float
        """
        if odds_decimal is None:
            raise ValueError("Invalid value for `odds_decimal`, must not be `None`")

        self._odds_decimal = odds_decimal

    @property
    def odds_fractional(self):
        """Gets the odds_fractional of this Selection.

        The selection price, in fractional format

        :return: The odds_fractional of this Selection.
        :rtype: float
        """
        return self._odds_fractional

    @odds_fractional.setter
    def odds_fractional(self, odds_fractional):
        """Sets the odds_fractional of this Selection.

        The selection price, in fractional format

        :param odds_fractional: The odds_fractional of this Selection.
        :type odds_fractional: float
        """
        if odds_fractional is None:
            raise ValueError("Invalid value for `odds_fractional`, must not be `None`")

        self._odds_fractional = odds_fractional

    @property
    def order(self):
        """Gets the order of this Selection.

        The display order of the selection

        :return: The order of this Selection.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Selection.

        The display order of the selection

        :param order: The order of this Selection.
        :type order: float
        """

        self._order = order

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Selection.

        A list of IDs of parent entities

        :return: The parent_ids of this Selection.
        :rtype: List[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Selection.

        A list of IDs of parent entities

        :param parent_ids: The parent_ids of this Selection.
        :type parent_ids: List[str]
        """

        self._parent_ids = parent_ids

    @property
    def price_formatted(self):
        """Gets the price_formatted of this Selection.


        :return: The price_formatted of this Selection.
        :rtype: PriceFormatted
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this Selection.


        :param price_formatted: The price_formatted of this Selection.
        :type price_formatted: PriceFormatted
        """

        self._price_formatted = price_formatted

    @property
    def result(self):
        """Gets the result of this Selection.

        The result of this selection

        :return: The result of this Selection.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Selection.

        The result of this selection

        :param result: The result of this Selection.
        :type result: str
        """

        self._result = result

    @property
    def result_type(self):
        """Gets the result_type of this Selection.

        football Result

        :return: The result_type of this Selection.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Selection.

        football Result

        :param result_type: The result_type of this Selection.
        :type result_type: str
        """

        self._result_type = result_type

    @property
    def runner_num(self):
        """Gets the runner_num of this Selection.

        The runner number in race events

        :return: The runner_num of this Selection.
        :rtype: float
        """
        return self._runner_num

    @runner_num.setter
    def runner_num(self, runner_num):
        """Sets the runner_num of this Selection.

        The runner number in race events

        :param runner_num: The runner_num of this Selection.
        :type runner_num: float
        """

        self._runner_num = runner_num

    @property
    def settled(self):
        """Gets the settled of this Selection.

        Wether this selection has been settled or not

        :return: The settled of this Selection.
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Selection.

        Wether this selection has been settled or not

        :param settled: The settled of this Selection.
        :type settled: bool
        """

        self._settled = settled

    @property
    def status(self):
        """Gets the status of this Selection.

        The status of the selection (A for Active or S for Suspended)

        :return: The status of this Selection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Selection.

        The status of the selection (A for Active or S for Suspended)

        :param status: The status of this Selection.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
