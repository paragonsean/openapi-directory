# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Competition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bet_in_running_delay: float=None, cashin_available: bool=None, channels: List[str]=None, description: str=None, displayed: bool=None, flags: List[str]=None, id: str=None, is_published: bool=None, name: str=None, order: int=None, parent_ids: List[str]=None, status: str=None):
        """Competition - a model defined in OpenAPI

        :param bet_in_running_delay: The bet_in_running_delay of this Competition.
        :param cashin_available: The cashin_available of this Competition.
        :param channels: The channels of this Competition.
        :param description: The description of this Competition.
        :param displayed: The displayed of this Competition.
        :param flags: The flags of this Competition.
        :param id: The id of this Competition.
        :param is_published: The is_published of this Competition.
        :param name: The name of this Competition.
        :param order: The order of this Competition.
        :param parent_ids: The parent_ids of this Competition.
        :param status: The status of this Competition.
        """
        self.openapi_types = {
            'bet_in_running_delay': float,
            'cashin_available': bool,
            'channels': List[str],
            'description': str,
            'displayed': bool,
            'flags': List[str],
            'id': str,
            'is_published': bool,
            'name': str,
            'order': int,
            'parent_ids': List[str],
            'status': str
        }

        self.attribute_map = {
            'bet_in_running_delay': 'betInRunningDelay',
            'cashin_available': 'cashinAvailable',
            'channels': 'channels',
            'description': 'description',
            'displayed': 'displayed',
            'flags': 'flags',
            'id': 'id',
            'is_published': 'isPublished',
            'name': 'name',
            'order': 'order',
            'parent_ids': 'parentIds',
            'status': 'status'
        }

        self._bet_in_running_delay = bet_in_running_delay
        self._cashin_available = cashin_available
        self._channels = channels
        self._description = description
        self._displayed = displayed
        self._flags = flags
        self._id = id
        self._is_published = is_published
        self._name = name
        self._order = order
        self._parent_ids = parent_ids
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Competition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The competition of this Competition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bet_in_running_delay(self):
        """Gets the bet_in_running_delay of this Competition.

        Delay in seconds between bet being sent and bet being placed

        :return: The bet_in_running_delay of this Competition.
        :rtype: float
        """
        return self._bet_in_running_delay

    @bet_in_running_delay.setter
    def bet_in_running_delay(self, bet_in_running_delay):
        """Sets the bet_in_running_delay of this Competition.

        Delay in seconds between bet being sent and bet being placed

        :param bet_in_running_delay: The bet_in_running_delay of this Competition.
        :type bet_in_running_delay: float
        """

        self._bet_in_running_delay = bet_in_running_delay

    @property
    def cashin_available(self):
        """Gets the cashin_available of this Competition.

        Indicates whether cashin is available on the events of this competition

        :return: The cashin_available of this Competition.
        :rtype: bool
        """
        return self._cashin_available

    @cashin_available.setter
    def cashin_available(self, cashin_available):
        """Sets the cashin_available of this Competition.

        Indicates whether cashin is available on the events of this competition

        :param cashin_available: The cashin_available of this Competition.
        :type cashin_available: bool
        """

        self._cashin_available = cashin_available

    @property
    def channels(self):
        """Gets the channels of this Competition.

        A list of channels that apply to this competition

        :return: The channels of this Competition.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Competition.

        A list of channels that apply to this competition

        :param channels: The channels of this Competition.
        :type channels: List[str]
        """

        self._channels = channels

    @property
    def description(self):
        """Gets the description of this Competition.

        The description of the competition

        :return: The description of this Competition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Competition.

        The description of the competition

        :param description: The description of this Competition.
        :type description: str
        """

        self._description = description

    @property
    def displayed(self):
        """Gets the displayed of this Competition.

        Whether the competition should be displayed or not

        :return: The displayed of this Competition.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this Competition.

        Whether the competition should be displayed or not

        :param displayed: The displayed of this Competition.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def flags(self):
        """Gets the flags of this Competition.

        A list of flags that apply to this competition

        :return: The flags of this Competition.
        :rtype: List[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Competition.

        A list of flags that apply to this competition

        :param flags: The flags of this Competition.
        :type flags: List[str]
        """

        self._flags = flags

    @property
    def id(self):
        """Gets the id of this Competition.

        The Id of the Competition

        :return: The id of this Competition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Competition.

        The Id of the Competition

        :param id: The id of this Competition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_published(self):
        """Gets the is_published of this Competition.

        Indicates if the item is published or not

        :return: The is_published of this Competition.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Competition.

        Indicates if the item is published or not

        :param is_published: The is_published of this Competition.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def name(self):
        """Gets the name of this Competition.

        The name of the competition

        :return: The name of this Competition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Competition.

        The name of the competition

        :param name: The name of this Competition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """Gets the order of this Competition.

        The display order of the competition

        :return: The order of this Competition.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Competition.

        The display order of the competition

        :param order: The order of this Competition.
        :type order: int
        """

        self._order = order

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Competition.

        A list of IDs of parent entities

        :return: The parent_ids of this Competition.
        :rtype: List[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Competition.

        A list of IDs of parent entities

        :param parent_ids: The parent_ids of this Competition.
        :type parent_ids: List[str]
        """

        self._parent_ids = parent_ids

    @property
    def status(self):
        """Gets the status of this Competition.

        The status of the competition (A for Active, S for Suspended)

        :return: The status of this Competition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Competition.

        The status of the competition (A for Active, S for Suspended)

        :param status: The status of this Competition.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
