# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.selection import Selection
from openapi_server import util


class Market(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antepost_market: bool=None, best_odds_guaranteed: bool=None, bet_in_running_delay: float=None, channels: str=None, description: str=None, displayed: bool=None, each_way: bool=None, each_way_factor_den: float=None, each_way_factor_num: float=None, each_way_places: float=None, early_price_available: bool=None, fc_available: bool=None, first_four_available: bool=None, first_price_available: bool=None, flags: str=None, hcap_makeup: float=None, hcap_value: float=None, id: str=None, is_in_play_market: bool=None, is_published: bool=None, live_price_available: bool=None, market_group_collection_id: str=None, market_group_id: str=None, market_group_name: str=None, market_sort: str=None, name: str=None, order: float=None, parent_ids: List[str]=None, quinella_available: bool=None, selections: List[Selection]=None, settled: bool=None, starting_price_available: bool=None, status: str=None, tc_available: bool=None):
        """Market - a model defined in OpenAPI

        :param antepost_market: The antepost_market of this Market.
        :param best_odds_guaranteed: The best_odds_guaranteed of this Market.
        :param bet_in_running_delay: The bet_in_running_delay of this Market.
        :param channels: The channels of this Market.
        :param description: The description of this Market.
        :param displayed: The displayed of this Market.
        :param each_way: The each_way of this Market.
        :param each_way_factor_den: The each_way_factor_den of this Market.
        :param each_way_factor_num: The each_way_factor_num of this Market.
        :param each_way_places: The each_way_places of this Market.
        :param early_price_available: The early_price_available of this Market.
        :param fc_available: The fc_available of this Market.
        :param first_four_available: The first_four_available of this Market.
        :param first_price_available: The first_price_available of this Market.
        :param flags: The flags of this Market.
        :param hcap_makeup: The hcap_makeup of this Market.
        :param hcap_value: The hcap_value of this Market.
        :param id: The id of this Market.
        :param is_in_play_market: The is_in_play_market of this Market.
        :param is_published: The is_published of this Market.
        :param live_price_available: The live_price_available of this Market.
        :param market_group_collection_id: The market_group_collection_id of this Market.
        :param market_group_id: The market_group_id of this Market.
        :param market_group_name: The market_group_name of this Market.
        :param market_sort: The market_sort of this Market.
        :param name: The name of this Market.
        :param order: The order of this Market.
        :param parent_ids: The parent_ids of this Market.
        :param quinella_available: The quinella_available of this Market.
        :param selections: The selections of this Market.
        :param settled: The settled of this Market.
        :param starting_price_available: The starting_price_available of this Market.
        :param status: The status of this Market.
        :param tc_available: The tc_available of this Market.
        """
        self.openapi_types = {
            'antepost_market': bool,
            'best_odds_guaranteed': bool,
            'bet_in_running_delay': float,
            'channels': str,
            'description': str,
            'displayed': bool,
            'each_way': bool,
            'each_way_factor_den': float,
            'each_way_factor_num': float,
            'each_way_places': float,
            'early_price_available': bool,
            'fc_available': bool,
            'first_four_available': bool,
            'first_price_available': bool,
            'flags': str,
            'hcap_makeup': float,
            'hcap_value': float,
            'id': str,
            'is_in_play_market': bool,
            'is_published': bool,
            'live_price_available': bool,
            'market_group_collection_id': str,
            'market_group_id': str,
            'market_group_name': str,
            'market_sort': str,
            'name': str,
            'order': float,
            'parent_ids': List[str],
            'quinella_available': bool,
            'selections': List[Selection],
            'settled': bool,
            'starting_price_available': bool,
            'status': str,
            'tc_available': bool
        }

        self.attribute_map = {
            'antepost_market': 'antepostMarket',
            'best_odds_guaranteed': 'bestOddsGuaranteed',
            'bet_in_running_delay': 'betInRunningDelay',
            'channels': 'channels',
            'description': 'description',
            'displayed': 'displayed',
            'each_way': 'eachWay',
            'each_way_factor_den': 'eachWayFactorDen',
            'each_way_factor_num': 'eachWayFactorNum',
            'each_way_places': 'eachWayPlaces',
            'early_price_available': 'earlyPriceAvailable',
            'fc_available': 'fcAvailable',
            'first_four_available': 'firstFourAvailable',
            'first_price_available': 'firstPriceAvailable',
            'flags': 'flags',
            'hcap_makeup': 'hcapMakeup',
            'hcap_value': 'hcapValue',
            'id': 'id',
            'is_in_play_market': 'isInPlayMarket',
            'is_published': 'isPublished',
            'live_price_available': 'livePriceAvailable',
            'market_group_collection_id': 'marketGroupCollectionId',
            'market_group_id': 'marketGroupId',
            'market_group_name': 'marketGroupName',
            'market_sort': 'marketSort',
            'name': 'name',
            'order': 'order',
            'parent_ids': 'parentIds',
            'quinella_available': 'quinellaAvailable',
            'selections': 'selections',
            'settled': 'settled',
            'starting_price_available': 'startingPriceAvailable',
            'status': 'status',
            'tc_available': 'tcAvailable'
        }

        self._antepost_market = antepost_market
        self._best_odds_guaranteed = best_odds_guaranteed
        self._bet_in_running_delay = bet_in_running_delay
        self._channels = channels
        self._description = description
        self._displayed = displayed
        self._each_way = each_way
        self._each_way_factor_den = each_way_factor_den
        self._each_way_factor_num = each_way_factor_num
        self._each_way_places = each_way_places
        self._early_price_available = early_price_available
        self._fc_available = fc_available
        self._first_four_available = first_four_available
        self._first_price_available = first_price_available
        self._flags = flags
        self._hcap_makeup = hcap_makeup
        self._hcap_value = hcap_value
        self._id = id
        self._is_in_play_market = is_in_play_market
        self._is_published = is_published
        self._live_price_available = live_price_available
        self._market_group_collection_id = market_group_collection_id
        self._market_group_id = market_group_id
        self._market_group_name = market_group_name
        self._market_sort = market_sort
        self._name = name
        self._order = order
        self._parent_ids = parent_ids
        self._quinella_available = quinella_available
        self._selections = selections
        self._settled = settled
        self._starting_price_available = starting_price_available
        self._status = status
        self._tc_available = tc_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Market':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The market of this Market.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antepost_market(self):
        """Gets the antepost_market of this Market.

        Antepost Market

        :return: The antepost_market of this Market.
        :rtype: bool
        """
        return self._antepost_market

    @antepost_market.setter
    def antepost_market(self, antepost_market):
        """Sets the antepost_market of this Market.

        Antepost Market

        :param antepost_market: The antepost_market of this Market.
        :type antepost_market: bool
        """

        self._antepost_market = antepost_market

    @property
    def best_odds_guaranteed(self):
        """Gets the best_odds_guaranteed of this Market.

        BOG Available

        :return: The best_odds_guaranteed of this Market.
        :rtype: bool
        """
        return self._best_odds_guaranteed

    @best_odds_guaranteed.setter
    def best_odds_guaranteed(self, best_odds_guaranteed):
        """Sets the best_odds_guaranteed of this Market.

        BOG Available

        :param best_odds_guaranteed: The best_odds_guaranteed of this Market.
        :type best_odds_guaranteed: bool
        """

        self._best_odds_guaranteed = best_odds_guaranteed

    @property
    def bet_in_running_delay(self):
        """Gets the bet_in_running_delay of this Market.


        :return: The bet_in_running_delay of this Market.
        :rtype: float
        """
        return self._bet_in_running_delay

    @bet_in_running_delay.setter
    def bet_in_running_delay(self, bet_in_running_delay):
        """Sets the bet_in_running_delay of this Market.


        :param bet_in_running_delay: The bet_in_running_delay of this Market.
        :type bet_in_running_delay: float
        """

        self._bet_in_running_delay = bet_in_running_delay

    @property
    def channels(self):
        """Gets the channels of this Market.

        A channel indicates where an entry can be accessed. Its made up of a string containing a number of characters

        :return: The channels of this Market.
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Market.

        A channel indicates where an entry can be accessed. Its made up of a string containing a number of characters

        :param channels: The channels of this Market.
        :type channels: str
        """

        self._channels = channels

    @property
    def description(self):
        """Gets the description of this Market.

        Additional market information

        :return: The description of this Market.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Market.

        Additional market information

        :param description: The description of this Market.
        :type description: str
        """

        self._description = description

    @property
    def displayed(self):
        """Gets the displayed of this Market.

        Indicates if the item should be displayed

        :return: The displayed of this Market.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this Market.

        Indicates if the item should be displayed

        :param displayed: The displayed of this Market.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def each_way(self):
        """Gets the each_way of this Market.

        Indicates if each way betting is available

        :return: The each_way of this Market.
        :rtype: bool
        """
        return self._each_way

    @each_way.setter
    def each_way(self, each_way):
        """Sets the each_way of this Market.

        Indicates if each way betting is available

        :param each_way: The each_way of this Market.
        :type each_way: bool
        """

        self._each_way = each_way

    @property
    def each_way_factor_den(self):
        """Gets the each_way_factor_den of this Market.

        Where each way terms are stored with the bet, this holds the denominator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 4

        :return: The each_way_factor_den of this Market.
        :rtype: float
        """
        return self._each_way_factor_den

    @each_way_factor_den.setter
    def each_way_factor_den(self, each_way_factor_den):
        """Sets the each_way_factor_den of this Market.

        Where each way terms are stored with the bet, this holds the denominator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 4

        :param each_way_factor_den: The each_way_factor_den of this Market.
        :type each_way_factor_den: float
        """

        self._each_way_factor_den = each_way_factor_den

    @property
    def each_way_factor_num(self):
        """Gets the each_way_factor_num of this Market.

        Where each way terms are stored with the bet, this holds the numerator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 1

        :return: The each_way_factor_num of this Market.
        :rtype: float
        """
        return self._each_way_factor_num

    @each_way_factor_num.setter
    def each_way_factor_num(self, each_way_factor_num):
        """Sets the each_way_factor_num of this Market.

        Where each way terms are stored with the bet, this holds the numerator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 1

        :param each_way_factor_num: The each_way_factor_num of this Market.
        :type each_way_factor_num: float
        """

        self._each_way_factor_num = each_way_factor_num

    @property
    def each_way_places(self):
        """Gets the each_way_places of this Market.

        Where each way terms are stored with the bet, this holds the number of places paid. For example, if the each way terms are: 5 places pay ¼, this value will be 5

        :return: The each_way_places of this Market.
        :rtype: float
        """
        return self._each_way_places

    @each_way_places.setter
    def each_way_places(self, each_way_places):
        """Sets the each_way_places of this Market.

        Where each way terms are stored with the bet, this holds the number of places paid. For example, if the each way terms are: 5 places pay ¼, this value will be 5

        :param each_way_places: The each_way_places of this Market.
        :type each_way_places: float
        """

        self._each_way_places = each_way_places

    @property
    def early_price_available(self):
        """Gets the early_price_available of this Market.

        Early Pricing Active

        :return: The early_price_available of this Market.
        :rtype: bool
        """
        return self._early_price_available

    @early_price_available.setter
    def early_price_available(self, early_price_available):
        """Sets the early_price_available of this Market.

        Early Pricing Active

        :param early_price_available: The early_price_available of this Market.
        :type early_price_available: bool
        """

        self._early_price_available = early_price_available

    @property
    def fc_available(self):
        """Gets the fc_available of this Market.

        Is tricast betting available

        :return: The fc_available of this Market.
        :rtype: bool
        """
        return self._fc_available

    @fc_available.setter
    def fc_available(self, fc_available):
        """Sets the fc_available of this Market.

        Is tricast betting available

        :param fc_available: The fc_available of this Market.
        :type fc_available: bool
        """

        self._fc_available = fc_available

    @property
    def first_four_available(self):
        """Gets the first_four_available of this Market.

        Is firstFour betting available

        :return: The first_four_available of this Market.
        :rtype: bool
        """
        return self._first_four_available

    @first_four_available.setter
    def first_four_available(self, first_four_available):
        """Sets the first_four_available of this Market.

        Is firstFour betting available

        :param first_four_available: The first_four_available of this Market.
        :type first_four_available: bool
        """

        self._first_four_available = first_four_available

    @property
    def first_price_available(self):
        """Gets the first_price_available of this Market.

        Is firstPrice betting available

        :return: The first_price_available of this Market.
        :rtype: bool
        """
        return self._first_price_available

    @first_price_available.setter
    def first_price_available(self, first_price_available):
        """Sets the first_price_available of this Market.

        Is firstPrice betting available

        :param first_price_available: The first_price_available of this Market.
        :type first_price_available: bool
        """

        self._first_price_available = first_price_available

    @property
    def flags(self):
        """Gets the flags of this Market.

        Flags for the market

        :return: The flags of this Market.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Market.

        Flags for the market

        :param flags: The flags of this Market.
        :type flags: str
        """

        self._flags = flags

    @property
    def hcap_makeup(self):
        """Gets the hcap_makeup of this Market.

        Handicap score

        :return: The hcap_makeup of this Market.
        :rtype: float
        """
        return self._hcap_makeup

    @hcap_makeup.setter
    def hcap_makeup(self, hcap_makeup):
        """Sets the hcap_makeup of this Market.

        Handicap score

        :param hcap_makeup: The hcap_makeup of this Market.
        :type hcap_makeup: float
        """

        self._hcap_makeup = hcap_makeup

    @property
    def hcap_value(self):
        """Gets the hcap_value of this Market.

        This value indicates the current handicap set on the Event Market, assuming it has a handicap type.

        :return: The hcap_value of this Market.
        :rtype: float
        """
        return self._hcap_value

    @hcap_value.setter
    def hcap_value(self, hcap_value):
        """Sets the hcap_value of this Market.

        This value indicates the current handicap set on the Event Market, assuming it has a handicap type.

        :param hcap_value: The hcap_value of this Market.
        :type hcap_value: float
        """

        self._hcap_value = hcap_value

    @property
    def id(self):
        """Gets the id of this Market.

        ID (e.g. OB_MA{id} (e.g. OB_MA1), OB_SP (Sport), OB_CL (Class), OB_TY (Competition / type), OB_EV (event) OB_MA (Market), OB_OU (Selection / outcome)

        :return: The id of this Market.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Market.

        ID (e.g. OB_MA{id} (e.g. OB_MA1), OB_SP (Sport), OB_CL (Class), OB_TY (Competition / type), OB_EV (event) OB_MA (Market), OB_OU (Selection / outcome)

        :param id: The id of this Market.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_in_play_market(self):
        """Gets the is_in_play_market of this Market.

        Is this an in-play market

        :return: The is_in_play_market of this Market.
        :rtype: bool
        """
        return self._is_in_play_market

    @is_in_play_market.setter
    def is_in_play_market(self, is_in_play_market):
        """Sets the is_in_play_market of this Market.

        Is this an in-play market

        :param is_in_play_market: The is_in_play_market of this Market.
        :type is_in_play_market: bool
        """

        self._is_in_play_market = is_in_play_market

    @property
    def is_published(self):
        """Gets the is_published of this Market.

        Indicates if the item is published

        :return: The is_published of this Market.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Market.

        Indicates if the item is published

        :param is_published: The is_published of this Market.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def live_price_available(self):
        """Gets the live_price_available of this Market.

        Live Price

        :return: The live_price_available of this Market.
        :rtype: bool
        """
        return self._live_price_available

    @live_price_available.setter
    def live_price_available(self, live_price_available):
        """Sets the live_price_available of this Market.

        Live Price

        :param live_price_available: The live_price_available of this Market.
        :type live_price_available: bool
        """

        self._live_price_available = live_price_available

    @property
    def market_group_collection_id(self):
        """Gets the market_group_collection_id of this Market.

        The collectionId of the Market Group inherited from

        :return: The market_group_collection_id of this Market.
        :rtype: str
        """
        return self._market_group_collection_id

    @market_group_collection_id.setter
    def market_group_collection_id(self, market_group_collection_id):
        """Sets the market_group_collection_id of this Market.

        The collectionId of the Market Group inherited from

        :param market_group_collection_id: The market_group_collection_id of this Market.
        :type market_group_collection_id: str
        """

        self._market_group_collection_id = market_group_collection_id

    @property
    def market_group_id(self):
        """Gets the market_group_id of this Market.

        The group id the market was inherited from

        :return: The market_group_id of this Market.
        :rtype: str
        """
        return self._market_group_id

    @market_group_id.setter
    def market_group_id(self, market_group_id):
        """Sets the market_group_id of this Market.

        The group id the market was inherited from

        :param market_group_id: The market_group_id of this Market.
        :type market_group_id: str
        """

        self._market_group_id = market_group_id

    @property
    def market_group_name(self):
        """Gets the market_group_name of this Market.

        The group name the market was inherited from

        :return: The market_group_name of this Market.
        :rtype: str
        """
        return self._market_group_name

    @market_group_name.setter
    def market_group_name(self, market_group_name):
        """Sets the market_group_name of this Market.

        The group name the market was inherited from

        :param market_group_name: The market_group_name of this Market.
        :type market_group_name: str
        """

        self._market_group_name = market_group_name

    @property
    def market_sort(self):
        """Gets the market_sort of this Market.

        The sort defines the market template

        :return: The market_sort of this Market.
        :rtype: str
        """
        return self._market_sort

    @market_sort.setter
    def market_sort(self, market_sort):
        """Sets the market_sort of this Market.

        The sort defines the market template

        :param market_sort: The market_sort of this Market.
        :type market_sort: str
        """

        self._market_sort = market_sort

    @property
    def name(self):
        """Gets the name of this Market.

        Human-friendly name of the market

        :return: The name of this Market.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Market.

        Human-friendly name of the market

        :param name: The name of this Market.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """Gets the order of this Market.

        Display order of the items (Ascending)

        :return: The order of this Market.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Market.

        Display order of the items (Ascending)

        :param order: The order of this Market.
        :type order: float
        """

        self._order = order

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Market.

        A list of IDs of parent entities

        :return: The parent_ids of this Market.
        :rtype: List[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Market.

        A list of IDs of parent entities

        :param parent_ids: The parent_ids of this Market.
        :type parent_ids: List[str]
        """

        self._parent_ids = parent_ids

    @property
    def quinella_available(self):
        """Gets the quinella_available of this Market.

        Is firstFour betting available

        :return: The quinella_available of this Market.
        :rtype: bool
        """
        return self._quinella_available

    @quinella_available.setter
    def quinella_available(self, quinella_available):
        """Sets the quinella_available of this Market.

        Is firstFour betting available

        :param quinella_available: The quinella_available of this Market.
        :type quinella_available: bool
        """

        self._quinella_available = quinella_available

    @property
    def selections(self):
        """Gets the selections of this Market.

        A list of selections belonging to the market

        :return: The selections of this Market.
        :rtype: List[Selection]
        """
        return self._selections

    @selections.setter
    def selections(self, selections):
        """Sets the selections of this Market.

        A list of selections belonging to the market

        :param selections: The selections of this Market.
        :type selections: List[Selection]
        """

        self._selections = selections

    @property
    def settled(self):
        """Gets the settled of this Market.

        Whether the market is settled or not

        :return: The settled of this Market.
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Market.

        Whether the market is settled or not

        :param settled: The settled of this Market.
        :type settled: bool
        """

        self._settled = settled

    @property
    def starting_price_available(self):
        """Gets the starting_price_available of this Market.

        Starting Price Available

        :return: The starting_price_available of this Market.
        :rtype: bool
        """
        return self._starting_price_available

    @starting_price_available.setter
    def starting_price_available(self, starting_price_available):
        """Sets the starting_price_available of this Market.

        Starting Price Available

        :param starting_price_available: The starting_price_available of this Market.
        :type starting_price_available: bool
        """

        self._starting_price_available = starting_price_available

    @property
    def status(self):
        """Gets the status of this Market.

        Indicates the status of the Market (A = Active/S = Suspended)

        :return: The status of this Market.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Market.

        Indicates the status of the Market (A = Active/S = Suspended)

        :param status: The status of this Market.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tc_available(self):
        """Gets the tc_available of this Market.

        Is forecast betting available

        :return: The tc_available of this Market.
        :rtype: bool
        """
        return self._tc_available

    @tc_available.setter
    def tc_available(self, tc_available):
        """Sets the tc_available of this Market.

        Is forecast betting available

        :param tc_available: The tc_available of this Market.
        :type tc_available: bool
        """

        self._tc_available = tc_available
