# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_published: bool=None, name: str=None):
        """Sport - a model defined in OpenAPI

        :param id: The id of this Sport.
        :param is_published: The is_published of this Sport.
        :param name: The name of this Sport.
        """
        self.openapi_types = {
            'id': str,
            'is_published': bool,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_published': 'isPublished',
            'name': 'name'
        }

        self._id = id
        self._is_published = is_published
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sport of this Sport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Sport.

        The Id of the Sport

        :return: The id of this Sport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sport.

        The Id of the Sport

        :param id: The id of this Sport.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_published(self):
        """Gets the is_published of this Sport.

        Indicates if the item is published

        :return: The is_published of this Sport.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Sport.

        Indicates if the item is published

        :param is_published: The is_published of this Sport.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def name(self):
        """Gets the name of this Sport.

        The description of the Sport

        :return: The name of this Sport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sport.

        The description of the Sport

        :param name: The name of this Sport.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
