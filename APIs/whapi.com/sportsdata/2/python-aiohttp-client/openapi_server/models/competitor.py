# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Competitor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: float=None, colour: str=None, draw_number: float=None, form_guide: str=None, id: float=None, jockey_name: str=None, name: str=None, overview: str=None, owner_name: str=None, rating: str=None, sex: str=None, silk_image_url: str=None, trainer_name: str=None, weight_pounds: str=None):
        """Competitor - a model defined in OpenAPI

        :param age: The age of this Competitor.
        :param colour: The colour of this Competitor.
        :param draw_number: The draw_number of this Competitor.
        :param form_guide: The form_guide of this Competitor.
        :param id: The id of this Competitor.
        :param jockey_name: The jockey_name of this Competitor.
        :param name: The name of this Competitor.
        :param overview: The overview of this Competitor.
        :param owner_name: The owner_name of this Competitor.
        :param rating: The rating of this Competitor.
        :param sex: The sex of this Competitor.
        :param silk_image_url: The silk_image_url of this Competitor.
        :param trainer_name: The trainer_name of this Competitor.
        :param weight_pounds: The weight_pounds of this Competitor.
        """
        self.openapi_types = {
            'age': float,
            'colour': str,
            'draw_number': float,
            'form_guide': str,
            'id': float,
            'jockey_name': str,
            'name': str,
            'overview': str,
            'owner_name': str,
            'rating': str,
            'sex': str,
            'silk_image_url': str,
            'trainer_name': str,
            'weight_pounds': str
        }

        self.attribute_map = {
            'age': 'age',
            'colour': 'colour',
            'draw_number': 'drawNumber',
            'form_guide': 'formGuide',
            'id': 'id',
            'jockey_name': 'jockeyName',
            'name': 'name',
            'overview': 'overview',
            'owner_name': 'ownerName',
            'rating': 'rating',
            'sex': 'sex',
            'silk_image_url': 'silkImageUrl',
            'trainer_name': 'trainerName',
            'weight_pounds': 'weightPounds'
        }

        self._age = age
        self._colour = colour
        self._draw_number = draw_number
        self._form_guide = form_guide
        self._id = id
        self._jockey_name = jockey_name
        self._name = name
        self._overview = overview
        self._owner_name = owner_name
        self._rating = rating
        self._sex = sex
        self._silk_image_url = silk_image_url
        self._trainer_name = trainer_name
        self._weight_pounds = weight_pounds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Competitor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The competitor of this Competitor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this Competitor.

        The age of the horse

        :return: The age of this Competitor.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Competitor.

        The age of the horse

        :param age: The age of this Competitor.
        :type age: float
        """

        self._age = age

    @property
    def colour(self):
        """Gets the colour of this Competitor.

        The colour of the horse (There are 5 colours. b = Bay. bl = Black. br = Brown. ch = Chestnut. gr = Grey)

        :return: The colour of this Competitor.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this Competitor.

        The colour of the horse (There are 5 colours. b = Bay. bl = Black. br = Brown. ch = Chestnut. gr = Grey)

        :param colour: The colour of this Competitor.
        :type colour: str
        """

        self._colour = colour

    @property
    def draw_number(self):
        """Gets the draw_number of this Competitor.

        The stall number that the horse is allocated and will start from

        :return: The draw_number of this Competitor.
        :rtype: float
        """
        return self._draw_number

    @draw_number.setter
    def draw_number(self, draw_number):
        """Sets the draw_number of this Competitor.

        The stall number that the horse is allocated and will start from

        :param draw_number: The draw_number of this Competitor.
        :type draw_number: float
        """

        self._draw_number = draw_number

    @property
    def form_guide(self):
        """Gets the form_guide of this Competitor.

        The form of a horse is a record of significant events, mainly its performance in previous races. For example: The value 874-1 means that the horse finished 8th, then 7th in the next race, then 4th, hyphen here means he did not finish in the race, and was 1st in the last race he was running in.

        :return: The form_guide of this Competitor.
        :rtype: str
        """
        return self._form_guide

    @form_guide.setter
    def form_guide(self, form_guide):
        """Sets the form_guide of this Competitor.

        The form of a horse is a record of significant events, mainly its performance in previous races. For example: The value 874-1 means that the horse finished 8th, then 7th in the next race, then 4th, hyphen here means he did not finish in the race, and was 1st in the last race he was running in.

        :param form_guide: The form_guide of this Competitor.
        :type form_guide: str
        """

        self._form_guide = form_guide

    @property
    def id(self):
        """Gets the id of this Competitor.

        Unique identifier of the competitor in the event

        :return: The id of this Competitor.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Competitor.

        Unique identifier of the competitor in the event

        :param id: The id of this Competitor.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def jockey_name(self):
        """Gets the jockey_name of this Competitor.

        The name of the Jockey who's riding the horse

        :return: The jockey_name of this Competitor.
        :rtype: str
        """
        return self._jockey_name

    @jockey_name.setter
    def jockey_name(self, jockey_name):
        """Sets the jockey_name of this Competitor.

        The name of the Jockey who's riding the horse

        :param jockey_name: The jockey_name of this Competitor.
        :type jockey_name: str
        """

        self._jockey_name = jockey_name

    @property
    def name(self):
        """Gets the name of this Competitor.

        The name of competitor that the information is being given for

        :return: The name of this Competitor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Competitor.

        The name of competitor that the information is being given for

        :param name: The name of this Competitor.
        :type name: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this Competitor.

        Additional information about the horse's performance

        :return: The overview of this Competitor.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Competitor.

        Additional information about the horse's performance

        :param overview: The overview of this Competitor.
        :type overview: str
        """

        self._overview = overview

    @property
    def owner_name(self):
        """Gets the owner_name of this Competitor.

        The name of the horses owner(s)

        :return: The owner_name of this Competitor.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Competitor.

        The name of the horses owner(s)

        :param owner_name: The owner_name of this Competitor.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def rating(self):
        """Gets the rating of this Competitor.

        The rating of the horse which is defined by a rating provider. It represents the horse's performance (the higher the rating, the better the horse is)

        :return: The rating of this Competitor.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Competitor.

        The rating of the horse which is defined by a rating provider. It represents the horse's performance (the higher the rating, the better the horse is)

        :param rating: The rating of this Competitor.
        :type rating: str
        """

        self._rating = rating

    @property
    def sex(self):
        """Gets the sex of this Competitor.

        The sex of the horse (F|M)

        :return: The sex of this Competitor.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this Competitor.

        The sex of the horse (F|M)

        :param sex: The sex of this Competitor.
        :type sex: str
        """

        self._sex = sex

    @property
    def silk_image_url(self):
        """Gets the silk_image_url of this Competitor.

        The URL for the image that represents the 'silk' (Coathing pattern) worn by the jockey.

        :return: The silk_image_url of this Competitor.
        :rtype: str
        """
        return self._silk_image_url

    @silk_image_url.setter
    def silk_image_url(self, silk_image_url):
        """Sets the silk_image_url of this Competitor.

        The URL for the image that represents the 'silk' (Coathing pattern) worn by the jockey.

        :param silk_image_url: The silk_image_url of this Competitor.
        :type silk_image_url: str
        """
        if silk_image_url is None:
            raise ValueError("Invalid value for `silk_image_url`, must not be `None`")

        self._silk_image_url = silk_image_url

    @property
    def trainer_name(self):
        """Gets the trainer_name of this Competitor.

        The name of the horses trainer

        :return: The trainer_name of this Competitor.
        :rtype: str
        """
        return self._trainer_name

    @trainer_name.setter
    def trainer_name(self, trainer_name):
        """Sets the trainer_name of this Competitor.

        The name of the horses trainer

        :param trainer_name: The trainer_name of this Competitor.
        :type trainer_name: str
        """

        self._trainer_name = trainer_name

    @property
    def weight_pounds(self):
        """Gets the weight_pounds of this Competitor.

        The rider weight (in pounds)

        :return: The weight_pounds of this Competitor.
        :rtype: str
        """
        return self._weight_pounds

    @weight_pounds.setter
    def weight_pounds(self, weight_pounds):
        """Sets the weight_pounds of this Competitor.

        The rider weight (in pounds)

        :param weight_pounds: The weight_pounds of this Competitor.
        :type weight_pounds: str
        """

        self._weight_pounds = weight_pounds
