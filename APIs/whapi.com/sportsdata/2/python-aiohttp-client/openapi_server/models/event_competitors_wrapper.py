# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.competitor import Competitor
from openapi_server import util


class EventCompetitorsWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, competitors: List[Competitor]=None):
        """EventCompetitorsWrapper - a model defined in OpenAPI

        :param competitors: The competitors of this EventCompetitorsWrapper.
        """
        self.openapi_types = {
            'competitors': List[Competitor]
        }

        self.attribute_map = {
            'competitors': 'competitors'
        }

        self._competitors = competitors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventCompetitorsWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventCompetitorsWrapper of this EventCompetitorsWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def competitors(self):
        """Gets the competitors of this EventCompetitorsWrapper.


        :return: The competitors of this EventCompetitorsWrapper.
        :rtype: List[Competitor]
        """
        return self._competitors

    @competitors.setter
    def competitors(self, competitors):
        """Sets the competitors of this EventCompetitorsWrapper.


        :param competitors: The competitors of this EventCompetitorsWrapper.
        :type competitors: List[Competitor]
        """

        self._competitors = competitors
