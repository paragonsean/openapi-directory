# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Marketgroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, competition_id: str=None, id: str=None, market_sort: str=None, name: str=None):
        """Marketgroup - a model defined in OpenAPI

        :param collection_id: The collection_id of this Marketgroup.
        :param competition_id: The competition_id of this Marketgroup.
        :param id: The id of this Marketgroup.
        :param market_sort: The market_sort of this Marketgroup.
        :param name: The name of this Marketgroup.
        """
        self.openapi_types = {
            'collection_id': str,
            'competition_id': str,
            'id': str,
            'market_sort': str,
            'name': str
        }

        self.attribute_map = {
            'collection_id': 'collectionId',
            'competition_id': 'competitionId',
            'id': 'id',
            'market_sort': 'marketSort',
            'name': 'name'
        }

        self._collection_id = collection_id
        self._competition_id = competition_id
        self._id = id
        self._market_sort = market_sort
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Marketgroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The marketgroup of this Marketgroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this Marketgroup.

        The collectionId of the Market Group, If it has one

        :return: The collection_id of this Marketgroup.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Marketgroup.

        The collectionId of the Market Group, If it has one

        :param collection_id: The collection_id of this Marketgroup.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def competition_id(self):
        """Gets the competition_id of this Marketgroup.

        The CompetitionId of the Market Group

        :return: The competition_id of this Marketgroup.
        :rtype: str
        """
        return self._competition_id

    @competition_id.setter
    def competition_id(self, competition_id):
        """Sets the competition_id of this Marketgroup.

        The CompetitionId of the Market Group

        :param competition_id: The competition_id of this Marketgroup.
        :type competition_id: str
        """

        self._competition_id = competition_id

    @property
    def id(self):
        """Gets the id of this Marketgroup.

        The Id of the Market Group

        :return: The id of this Marketgroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Marketgroup.

        The Id of the Market Group

        :param id: The id of this Marketgroup.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def market_sort(self):
        """Gets the market_sort of this Marketgroup.

        The market sort of this group

        :return: The market_sort of this Marketgroup.
        :rtype: str
        """
        return self._market_sort

    @market_sort.setter
    def market_sort(self, market_sort):
        """Sets the market_sort of this Marketgroup.

        The market sort of this group

        :param market_sort: The market_sort of this Marketgroup.
        :type market_sort: str
        """

        self._market_sort = market_sort

    @property
    def name(self):
        """Gets the name of this Marketgroup.

        The Name of the Market Group

        :return: The name of this Marketgroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Marketgroup.

        The Name of the Market Group

        :param name: The name of this Marketgroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
