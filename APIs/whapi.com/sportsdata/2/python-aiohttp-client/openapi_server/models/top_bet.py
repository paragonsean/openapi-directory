# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.competition import Competition
from openapi_server.models.event import Event
from openapi_server.models.market import Market
from openapi_server.models.selection import Selection
from openapi_server.models.sport import Sport
from openapi_server import util


class TopBet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, competition: Competition=None, event: Event=None, market: Market=None, selection: Selection=None, sport: Sport=None, weight: str=None):
        """TopBet - a model defined in OpenAPI

        :param competition: The competition of this TopBet.
        :param event: The event of this TopBet.
        :param market: The market of this TopBet.
        :param selection: The selection of this TopBet.
        :param sport: The sport of this TopBet.
        :param weight: The weight of this TopBet.
        """
        self.openapi_types = {
            'competition': Competition,
            'event': Event,
            'market': Market,
            'selection': Selection,
            'sport': Sport,
            'weight': str
        }

        self.attribute_map = {
            'competition': 'competition',
            'event': 'event',
            'market': 'market',
            'selection': 'selection',
            'sport': 'sport',
            'weight': 'weight'
        }

        self._competition = competition
        self._event = event
        self._market = market
        self._selection = selection
        self._sport = sport
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopBet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The topBet of this TopBet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def competition(self):
        """Gets the competition of this TopBet.


        :return: The competition of this TopBet.
        :rtype: Competition
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this TopBet.


        :param competition: The competition of this TopBet.
        :type competition: Competition
        """

        self._competition = competition

    @property
    def event(self):
        """Gets the event of this TopBet.


        :return: The event of this TopBet.
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TopBet.


        :param event: The event of this TopBet.
        :type event: Event
        """

        self._event = event

    @property
    def market(self):
        """Gets the market of this TopBet.


        :return: The market of this TopBet.
        :rtype: Market
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this TopBet.


        :param market: The market of this TopBet.
        :type market: Market
        """

        self._market = market

    @property
    def selection(self):
        """Gets the selection of this TopBet.


        :return: The selection of this TopBet.
        :rtype: Selection
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this TopBet.


        :param selection: The selection of this TopBet.
        :type selection: Selection
        """

        self._selection = selection

    @property
    def sport(self):
        """Gets the sport of this TopBet.


        :return: The sport of this TopBet.
        :rtype: Sport
        """
        return self._sport

    @sport.setter
    def sport(self, sport):
        """Sets the sport of this TopBet.


        :param sport: The sport of this TopBet.
        :type sport: Sport
        """

        self._sport = sport

    @property
    def weight(self):
        """Gets the weight of this TopBet.

        The weighting of the bet in the Top bets ranking

        :return: The weight of this TopBet.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TopBet.

        The weighting of the bet in the Top bets ranking

        :param weight: The weight of this TopBet.
        :type weight: str
        """

        self._weight = weight
