# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.competition import Competition
from openapi_server import util


class CompetitionsWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, competitions: List[Competition]=None):
        """CompetitionsWrapper - a model defined in OpenAPI

        :param competitions: The competitions of this CompetitionsWrapper.
        """
        self.openapi_types = {
            'competitions': List[Competition]
        }

        self.attribute_map = {
            'competitions': 'competitions'
        }

        self._competitions = competitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompetitionsWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The competitionsWrapper of this CompetitionsWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def competitions(self):
        """Gets the competitions of this CompetitionsWrapper.


        :return: The competitions of this CompetitionsWrapper.
        :rtype: List[Competition]
        """
        return self._competitions

    @competitions.setter
    def competitions(self, competitions):
        """Sets the competitions of this CompetitionsWrapper.


        :param competitions: The competitions of this CompetitionsWrapper.
        :type competitions: List[Competition]
        """

        self._competitions = competitions
