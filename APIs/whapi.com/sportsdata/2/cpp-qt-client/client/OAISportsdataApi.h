/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISportsdataApi_H
#define OAI_OAISportsdataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClassesWrapper.h"
#include "OAICompetition.h"
#include "OAICompetitionsWrapper.h"
#include "OAIErrorsWrapper.h"
#include "OAIEventsWrapper.h"
#include "OAIMarketGroupsWrapper.h"
#include "OAIMarketsWrapper.h"
#include "OAISelectionsWrapper.h"
#include "OAISportsWrapper.h"
#include "OAITopBetsWrapper.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISportsdataApi : public QObject {
    Q_OBJECT

public:
    OAISportsdataApi(const int timeOut = 0);
    ~OAISportsdataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sport_id QString [required]
    * @param[in]  is_published QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  displayed QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  culture QString [optional]
    */
    virtual void getClassesForSport(const QString &api_key, const QString &sport_id, const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  competition_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  culture QString [optional]
    */
    virtual void getCompetition(const QString &api_key, const QString &competition_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  class_id QString [required]
    * @param[in]  is_published QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  displayed QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  culture QString [optional]
    */
    virtual void getCompetitionsForClass(const QString &api_key, const QString &class_id, const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sport_id QString [required]
    * @param[in]  is_published QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  displayed QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  culture QString [optional]
    */
    virtual void getCompetitionsForSport(const QString &api_key, const QString &sport_id, const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  include_all_descendants bool [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  headline_summary bool [optional]
    * @param[in]  market_count qint32 [optional]
    * @param[in]  market_ids QList<QString> [optional]
    * @param[in]  include_empty bool [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  market_published QString [optional]
    * @param[in]  market_status QString [optional]
    * @param[in]  market_displayed QString [optional]
    * @param[in]  market_channel QString [optional]
    * @param[in]  market_sort QString [optional]
    * @param[in]  market_ew QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getEvent(const QString &api_key, const QString &event_id, const ::OpenAPI::OptionalParam<bool> &include_all_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &headline_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &market_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_ew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  is_published QString [optional]
    * @param[in]  include_all_descendants bool [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  settled bool [optional]
    * @param[in]  include_empty bool [optional]
    * @param[in]  headline_summary bool [optional]
    * @param[in]  market_count qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  market_ids QList<QString> [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  market_published QString [optional]
    * @param[in]  market_status QString [optional]
    * @param[in]  market_displayed QString [optional]
    * @param[in]  market_channel QString [optional]
    * @param[in]  market_sort QString [optional]
    * @param[in]  market_ew QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getEvents(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_all_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &settled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &headline_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &market_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &market_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_ew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  class_id QString [required]
    * @param[in]  is_published QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  displayed QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  settled bool [optional]
    * @param[in]  include_empty bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  headline_summary bool [optional]
    * @param[in]  include_all_descendants bool [optional]
    * @param[in]  is_in_play bool [optional]
    * @param[in]  market_count qint32 [optional]
    * @param[in]  date QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  event_sort QString [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  market_published QString [optional]
    * @param[in]  market_status QString [optional]
    * @param[in]  market_displayed QString [optional]
    * @param[in]  market_channel QString [optional]
    * @param[in]  market_sort QString [optional]
    * @param[in]  market_ew QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getEventsForClass(const QString &api_key, const QString &class_id, const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &settled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &headline_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_all_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_in_play = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &market_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_ew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  competition_id QString [required]
    * @param[in]  is_published QString [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  displayed QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  settled bool [optional]
    * @param[in]  include_empty bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  headline_summary bool [optional]
    * @param[in]  include_all_descendants bool [optional]
    * @param[in]  is_in_play bool [optional]
    * @param[in]  market_count qint32 [optional]
    * @param[in]  date QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  market_group_id QString [optional]
    * @param[in]  event_sort QString [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  market_published QString [optional]
    * @param[in]  market_status QString [optional]
    * @param[in]  market_displayed QString [optional]
    * @param[in]  market_channel QString [optional]
    * @param[in]  market_sort QString [optional]
    * @param[in]  market_ew QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getEventsForCompetition(const QString &api_key, const QString &competition_id, const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &settled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &headline_summary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_all_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_in_play = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &market_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_ew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  competition_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void getMarketGroupsForCompetition(const QString &api_key, const QString &competition_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  include_all_descendants bool [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  include_empty bool [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  market_published QString [optional]
    * @param[in]  market_status QString [optional]
    * @param[in]  market_displayed QString [optional]
    * @param[in]  market_channel QString [optional]
    * @param[in]  market_sort QString [optional]
    * @param[in]  market_ew QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getMarkets(const QString &api_key, const QString &event_id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_all_descendants = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &include_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_displayed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &market_ew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  competition_id QString [required]
    * @param[in]  market_sort QString [required]
    * @param[in]  market_group_id QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void getMarketsByGroupId(const QString &api_key, const QString &competition_id, const QString &market_sort, const QString &market_group_id, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  market_id QString [required]
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  selection_status QString [optional]
    * @param[in]  selection_channel QString [optional]
    * @param[in]  selection_published QString [optional]
    */
    virtual void getSelections(const QString &api_key, const QString &event_id, const QString &market_id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &selection_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  is_published QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  culture QString [optional]
    */
    virtual void getSports(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sport_ids QList<QString> [optional]
    * @param[in]  competition_ids QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  param_top_bet_event_id QString [optional]
    * @param[in]  sort_name QString [optional]
    * @param[in]  culture QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void getTopBets(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &sport_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &competition_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &param_top_bet_event_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &culture = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getClassesForSportCallback(OAIHttpRequestWorker *worker);
    void getCompetitionCallback(OAIHttpRequestWorker *worker);
    void getCompetitionsForClassCallback(OAIHttpRequestWorker *worker);
    void getCompetitionsForSportCallback(OAIHttpRequestWorker *worker);
    void getEventCallback(OAIHttpRequestWorker *worker);
    void getEventsCallback(OAIHttpRequestWorker *worker);
    void getEventsForClassCallback(OAIHttpRequestWorker *worker);
    void getEventsForCompetitionCallback(OAIHttpRequestWorker *worker);
    void getMarketGroupsForCompetitionCallback(OAIHttpRequestWorker *worker);
    void getMarketsCallback(OAIHttpRequestWorker *worker);
    void getMarketsByGroupIdCallback(OAIHttpRequestWorker *worker);
    void getSelectionsCallback(OAIHttpRequestWorker *worker);
    void getSportsCallback(OAIHttpRequestWorker *worker);
    void getTopBetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getClassesForSportSignal(OAIClassesWrapper summary);
    void getCompetitionSignal(OAICompetition summary);
    void getCompetitionsForClassSignal(OAICompetitionsWrapper summary);
    void getCompetitionsForSportSignal(OAICompetitionsWrapper summary);
    void getEventSignal(OAIEventsWrapper summary);
    void getEventsSignal(OAIEventsWrapper summary);
    void getEventsForClassSignal(OAIEventsWrapper summary);
    void getEventsForCompetitionSignal(OAIEventsWrapper summary);
    void getMarketGroupsForCompetitionSignal(OAIMarketGroupsWrapper summary);
    void getMarketsSignal(OAIMarketsWrapper summary);
    void getMarketsByGroupIdSignal(OAIMarketGroupsWrapper summary);
    void getSelectionsSignal(OAISelectionsWrapper summary);
    void getSportsSignal(OAISportsWrapper summary);
    void getTopBetsSignal(OAITopBetsWrapper summary);


    void getClassesForSportSignalFull(OAIHttpRequestWorker *worker, OAIClassesWrapper summary);
    void getCompetitionSignalFull(OAIHttpRequestWorker *worker, OAICompetition summary);
    void getCompetitionsForClassSignalFull(OAIHttpRequestWorker *worker, OAICompetitionsWrapper summary);
    void getCompetitionsForSportSignalFull(OAIHttpRequestWorker *worker, OAICompetitionsWrapper summary);
    void getEventSignalFull(OAIHttpRequestWorker *worker, OAIEventsWrapper summary);
    void getEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsWrapper summary);
    void getEventsForClassSignalFull(OAIHttpRequestWorker *worker, OAIEventsWrapper summary);
    void getEventsForCompetitionSignalFull(OAIHttpRequestWorker *worker, OAIEventsWrapper summary);
    void getMarketGroupsForCompetitionSignalFull(OAIHttpRequestWorker *worker, OAIMarketGroupsWrapper summary);
    void getMarketsSignalFull(OAIHttpRequestWorker *worker, OAIMarketsWrapper summary);
    void getMarketsByGroupIdSignalFull(OAIHttpRequestWorker *worker, OAIMarketGroupsWrapper summary);
    void getSelectionsSignalFull(OAIHttpRequestWorker *worker, OAISelectionsWrapper summary);
    void getSportsSignalFull(OAIHttpRequestWorker *worker, OAISportsWrapper summary);
    void getTopBetsSignalFull(OAIHttpRequestWorker *worker, OAITopBetsWrapper summary);

    Q_DECL_DEPRECATED_X("Use getClassesForSportSignalError() instead")
    void getClassesForSportSignalE(OAIClassesWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassesForSportSignalError(OAIClassesWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionSignalError() instead")
    void getCompetitionSignalE(OAICompetition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionSignalError(OAICompetition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionsForClassSignalError() instead")
    void getCompetitionsForClassSignalE(OAICompetitionsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionsForClassSignalError(OAICompetitionsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionsForSportSignalError() instead")
    void getCompetitionsForSportSignalE(OAICompetitionsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionsForSportSignalError(OAICompetitionsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalError() instead")
    void getEventSignalE(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalError(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalError() instead")
    void getEventsSignalE(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalError(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsForClassSignalError() instead")
    void getEventsForClassSignalE(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsForClassSignalError(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsForCompetitionSignalError() instead")
    void getEventsForCompetitionSignalE(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsForCompetitionSignalError(OAIEventsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketGroupsForCompetitionSignalError() instead")
    void getMarketGroupsForCompetitionSignalE(OAIMarketGroupsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketGroupsForCompetitionSignalError(OAIMarketGroupsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsSignalError() instead")
    void getMarketsSignalE(OAIMarketsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsSignalError(OAIMarketsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsByGroupIdSignalError() instead")
    void getMarketsByGroupIdSignalE(OAIMarketGroupsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsByGroupIdSignalError(OAIMarketGroupsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelectionsSignalError() instead")
    void getSelectionsSignalE(OAISelectionsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelectionsSignalError(OAISelectionsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSportsSignalError() instead")
    void getSportsSignalE(OAISportsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSportsSignalError(OAISportsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopBetsSignalError() instead")
    void getTopBetsSignalE(OAITopBetsWrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopBetsSignalError(OAITopBetsWrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getClassesForSportSignalErrorFull() instead")
    void getClassesForSportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassesForSportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionSignalErrorFull() instead")
    void getCompetitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionsForClassSignalErrorFull() instead")
    void getCompetitionsForClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionsForClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetitionsForSportSignalErrorFull() instead")
    void getCompetitionsForSportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetitionsForSportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalErrorFull() instead")
    void getEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsSignalErrorFull() instead")
    void getEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsForClassSignalErrorFull() instead")
    void getEventsForClassSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsForClassSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsForCompetitionSignalErrorFull() instead")
    void getEventsForCompetitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsForCompetitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketGroupsForCompetitionSignalErrorFull() instead")
    void getMarketGroupsForCompetitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketGroupsForCompetitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsSignalErrorFull() instead")
    void getMarketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMarketsByGroupIdSignalErrorFull() instead")
    void getMarketsByGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMarketsByGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelectionsSignalErrorFull() instead")
    void getSelectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSportsSignalErrorFull() instead")
    void getSportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopBetsSignalErrorFull() instead")
    void getTopBetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopBetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
