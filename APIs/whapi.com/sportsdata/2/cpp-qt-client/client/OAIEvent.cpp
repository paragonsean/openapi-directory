/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_bet_in_running_delay_isSet = false;
    m_bet_in_running_delay_isValid = false;

    m_betting_status_isSet = false;
    m_betting_status_isValid = false;

    m_cashin_available_isSet = false;
    m_cashin_available_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_displayed_isSet = false;
    m_displayed_isValid = false;

    m_event_sort_isSet = false;
    m_event_sort_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_has_in_play_markets_isSet = false;
    m_has_in_play_markets_isValid = false;

    m_has_live_prices_isSet = false;
    m_has_live_prices_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_in_play_isSet = false;
    m_is_in_play_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_market_count_active_in_play_isSet = false;
    m_market_count_active_in_play_isValid = false;

    m_market_count_active_pre_match_isSet = false;
    m_market_count_active_pre_match_isValid = false;

    m_market_count_active_total_isSet = false;
    m_market_count_active_total_isValid = false;

    m_market_count_in_play_isSet = false;
    m_market_count_in_play_isValid = false;

    m_market_count_pre_match_isSet = false;
    m_market_count_pre_match_isValid = false;

    m_markets_isSet = false;
    m_markets_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_race_num_isSet = false;
    m_race_num_isValid = false;

    m_settled_isSet = false;
    m_settled_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_bet_in_running_delay_isValid = ::OpenAPI::fromJsonValue(m_bet_in_running_delay, json[QString("betInRunningDelay")]);
    m_bet_in_running_delay_isSet = !json[QString("betInRunningDelay")].isNull() && m_bet_in_running_delay_isValid;

    m_betting_status_isValid = ::OpenAPI::fromJsonValue(m_betting_status, json[QString("bettingStatus")]);
    m_betting_status_isSet = !json[QString("bettingStatus")].isNull() && m_betting_status_isValid;

    m_cashin_available_isValid = ::OpenAPI::fromJsonValue(m_cashin_available, json[QString("cashinAvailable")]);
    m_cashin_available_isSet = !json[QString("cashinAvailable")].isNull() && m_cashin_available_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_displayed_isValid = ::OpenAPI::fromJsonValue(m_displayed, json[QString("displayed")]);
    m_displayed_isSet = !json[QString("displayed")].isNull() && m_displayed_isValid;

    m_event_sort_isValid = ::OpenAPI::fromJsonValue(m_event_sort, json[QString("eventSort")]);
    m_event_sort_isSet = !json[QString("eventSort")].isNull() && m_event_sort_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_has_in_play_markets_isValid = ::OpenAPI::fromJsonValue(m_has_in_play_markets, json[QString("hasInPlayMarkets")]);
    m_has_in_play_markets_isSet = !json[QString("hasInPlayMarkets")].isNull() && m_has_in_play_markets_isValid;

    m_has_live_prices_isValid = ::OpenAPI::fromJsonValue(m_has_live_prices, json[QString("hasLivePrices")]);
    m_has_live_prices_isSet = !json[QString("hasLivePrices")].isNull() && m_has_live_prices_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_in_play_isValid = ::OpenAPI::fromJsonValue(m_is_in_play, json[QString("isInPlay")]);
    m_is_in_play_isSet = !json[QString("isInPlay")].isNull() && m_is_in_play_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_market_count_active_in_play_isValid = ::OpenAPI::fromJsonValue(m_market_count_active_in_play, json[QString("marketCountActiveInPlay")]);
    m_market_count_active_in_play_isSet = !json[QString("marketCountActiveInPlay")].isNull() && m_market_count_active_in_play_isValid;

    m_market_count_active_pre_match_isValid = ::OpenAPI::fromJsonValue(m_market_count_active_pre_match, json[QString("marketCountActivePreMatch")]);
    m_market_count_active_pre_match_isSet = !json[QString("marketCountActivePreMatch")].isNull() && m_market_count_active_pre_match_isValid;

    m_market_count_active_total_isValid = ::OpenAPI::fromJsonValue(m_market_count_active_total, json[QString("marketCountActiveTotal")]);
    m_market_count_active_total_isSet = !json[QString("marketCountActiveTotal")].isNull() && m_market_count_active_total_isValid;

    m_market_count_in_play_isValid = ::OpenAPI::fromJsonValue(m_market_count_in_play, json[QString("marketCountInPlay")]);
    m_market_count_in_play_isSet = !json[QString("marketCountInPlay")].isNull() && m_market_count_in_play_isValid;

    m_market_count_pre_match_isValid = ::OpenAPI::fromJsonValue(m_market_count_pre_match, json[QString("marketCountPreMatch")]);
    m_market_count_pre_match_isSet = !json[QString("marketCountPreMatch")].isNull() && m_market_count_pre_match_isValid;

    m_markets_isValid = ::OpenAPI::fromJsonValue(m_markets, json[QString("markets")]);
    m_markets_isSet = !json[QString("markets")].isNull() && m_markets_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parentIds")]);
    m_parent_ids_isSet = !json[QString("parentIds")].isNull() && m_parent_ids_isValid;

    m_race_num_isValid = ::OpenAPI::fromJsonValue(m_race_num, json[QString("raceNum")]);
    m_race_num_isSet = !json[QString("raceNum")].isNull() && m_race_num_isValid;

    m_settled_isValid = ::OpenAPI::fromJsonValue(m_settled, json[QString("settled")]);
    m_settled_isSet = !json[QString("settled")].isNull() && m_settled_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_bet_in_running_delay_isSet) {
        obj.insert(QString("betInRunningDelay"), ::OpenAPI::toJsonValue(m_bet_in_running_delay));
    }
    if (m_betting_status_isSet) {
        obj.insert(QString("bettingStatus"), ::OpenAPI::toJsonValue(m_betting_status));
    }
    if (m_cashin_available_isSet) {
        obj.insert(QString("cashinAvailable"), ::OpenAPI::toJsonValue(m_cashin_available));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_displayed_isSet) {
        obj.insert(QString("displayed"), ::OpenAPI::toJsonValue(m_displayed));
    }
    if (m_event_sort_isSet) {
        obj.insert(QString("eventSort"), ::OpenAPI::toJsonValue(m_event_sort));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_has_in_play_markets_isSet) {
        obj.insert(QString("hasInPlayMarkets"), ::OpenAPI::toJsonValue(m_has_in_play_markets));
    }
    if (m_has_live_prices_isSet) {
        obj.insert(QString("hasLivePrices"), ::OpenAPI::toJsonValue(m_has_live_prices));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_in_play_isSet) {
        obj.insert(QString("isInPlay"), ::OpenAPI::toJsonValue(m_is_in_play));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_market_count_active_in_play_isSet) {
        obj.insert(QString("marketCountActiveInPlay"), ::OpenAPI::toJsonValue(m_market_count_active_in_play));
    }
    if (m_market_count_active_pre_match_isSet) {
        obj.insert(QString("marketCountActivePreMatch"), ::OpenAPI::toJsonValue(m_market_count_active_pre_match));
    }
    if (m_market_count_active_total_isSet) {
        obj.insert(QString("marketCountActiveTotal"), ::OpenAPI::toJsonValue(m_market_count_active_total));
    }
    if (m_market_count_in_play_isSet) {
        obj.insert(QString("marketCountInPlay"), ::OpenAPI::toJsonValue(m_market_count_in_play));
    }
    if (m_market_count_pre_match_isSet) {
        obj.insert(QString("marketCountPreMatch"), ::OpenAPI::toJsonValue(m_market_count_pre_match));
    }
    if (m_markets.size() > 0) {
        obj.insert(QString("markets"), ::OpenAPI::toJsonValue(m_markets));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("parentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_race_num_isSet) {
        obj.insert(QString("raceNum"), ::OpenAPI::toJsonValue(m_race_num));
    }
    if (m_settled_isSet) {
        obj.insert(QString("settled"), ::OpenAPI::toJsonValue(m_settled));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIEvent::getBetInRunningDelay() const {
    return m_bet_in_running_delay;
}
void OAIEvent::setBetInRunningDelay(const double &bet_in_running_delay) {
    m_bet_in_running_delay = bet_in_running_delay;
    m_bet_in_running_delay_isSet = true;
}

bool OAIEvent::is_bet_in_running_delay_Set() const{
    return m_bet_in_running_delay_isSet;
}

bool OAIEvent::is_bet_in_running_delay_Valid() const{
    return m_bet_in_running_delay_isValid;
}

QString OAIEvent::getBettingStatus() const {
    return m_betting_status;
}
void OAIEvent::setBettingStatus(const QString &betting_status) {
    m_betting_status = betting_status;
    m_betting_status_isSet = true;
}

bool OAIEvent::is_betting_status_Set() const{
    return m_betting_status_isSet;
}

bool OAIEvent::is_betting_status_Valid() const{
    return m_betting_status_isValid;
}

bool OAIEvent::isCashinAvailable() const {
    return m_cashin_available;
}
void OAIEvent::setCashinAvailable(const bool &cashin_available) {
    m_cashin_available = cashin_available;
    m_cashin_available_isSet = true;
}

bool OAIEvent::is_cashin_available_Set() const{
    return m_cashin_available_isSet;
}

bool OAIEvent::is_cashin_available_Valid() const{
    return m_cashin_available_isValid;
}

QList<QString> OAIEvent::getChannels() const {
    return m_channels;
}
void OAIEvent::setChannels(const QList<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIEvent::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIEvent::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIEvent::getCountry() const {
    return m_country;
}
void OAIEvent::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIEvent::is_country_Set() const{
    return m_country_isSet;
}

bool OAIEvent::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEvent::isDisplayed() const {
    return m_displayed;
}
void OAIEvent::setDisplayed(const bool &displayed) {
    m_displayed = displayed;
    m_displayed_isSet = true;
}

bool OAIEvent::is_displayed_Set() const{
    return m_displayed_isSet;
}

bool OAIEvent::is_displayed_Valid() const{
    return m_displayed_isValid;
}

QString OAIEvent::getEventSort() const {
    return m_event_sort;
}
void OAIEvent::setEventSort(const QString &event_sort) {
    m_event_sort = event_sort;
    m_event_sort_isSet = true;
}

bool OAIEvent::is_event_sort_Set() const{
    return m_event_sort_isSet;
}

bool OAIEvent::is_event_sort_Valid() const{
    return m_event_sort_isValid;
}

QList<QString> OAIEvent::getFlags() const {
    return m_flags;
}
void OAIEvent::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIEvent::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIEvent::is_flags_Valid() const{
    return m_flags_isValid;
}

bool OAIEvent::isHasInPlayMarkets() const {
    return m_has_in_play_markets;
}
void OAIEvent::setHasInPlayMarkets(const bool &has_in_play_markets) {
    m_has_in_play_markets = has_in_play_markets;
    m_has_in_play_markets_isSet = true;
}

bool OAIEvent::is_has_in_play_markets_Set() const{
    return m_has_in_play_markets_isSet;
}

bool OAIEvent::is_has_in_play_markets_Valid() const{
    return m_has_in_play_markets_isValid;
}

bool OAIEvent::isHasLivePrices() const {
    return m_has_live_prices;
}
void OAIEvent::setHasLivePrices(const bool &has_live_prices) {
    m_has_live_prices = has_live_prices;
    m_has_live_prices_isSet = true;
}

bool OAIEvent::is_has_live_prices_Set() const{
    return m_has_live_prices_isSet;
}

bool OAIEvent::is_has_live_prices_Valid() const{
    return m_has_live_prices_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEvent::isIsInPlay() const {
    return m_is_in_play;
}
void OAIEvent::setIsInPlay(const bool &is_in_play) {
    m_is_in_play = is_in_play;
    m_is_in_play_isSet = true;
}

bool OAIEvent::is_is_in_play_Set() const{
    return m_is_in_play_isSet;
}

bool OAIEvent::is_is_in_play_Valid() const{
    return m_is_in_play_isValid;
}

bool OAIEvent::isIsPublished() const {
    return m_is_published;
}
void OAIEvent::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAIEvent::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAIEvent::is_is_published_Valid() const{
    return m_is_published_isValid;
}

double OAIEvent::getMarketCountActiveInPlay() const {
    return m_market_count_active_in_play;
}
void OAIEvent::setMarketCountActiveInPlay(const double &market_count_active_in_play) {
    m_market_count_active_in_play = market_count_active_in_play;
    m_market_count_active_in_play_isSet = true;
}

bool OAIEvent::is_market_count_active_in_play_Set() const{
    return m_market_count_active_in_play_isSet;
}

bool OAIEvent::is_market_count_active_in_play_Valid() const{
    return m_market_count_active_in_play_isValid;
}

double OAIEvent::getMarketCountActivePreMatch() const {
    return m_market_count_active_pre_match;
}
void OAIEvent::setMarketCountActivePreMatch(const double &market_count_active_pre_match) {
    m_market_count_active_pre_match = market_count_active_pre_match;
    m_market_count_active_pre_match_isSet = true;
}

bool OAIEvent::is_market_count_active_pre_match_Set() const{
    return m_market_count_active_pre_match_isSet;
}

bool OAIEvent::is_market_count_active_pre_match_Valid() const{
    return m_market_count_active_pre_match_isValid;
}

double OAIEvent::getMarketCountActiveTotal() const {
    return m_market_count_active_total;
}
void OAIEvent::setMarketCountActiveTotal(const double &market_count_active_total) {
    m_market_count_active_total = market_count_active_total;
    m_market_count_active_total_isSet = true;
}

bool OAIEvent::is_market_count_active_total_Set() const{
    return m_market_count_active_total_isSet;
}

bool OAIEvent::is_market_count_active_total_Valid() const{
    return m_market_count_active_total_isValid;
}

double OAIEvent::getMarketCountInPlay() const {
    return m_market_count_in_play;
}
void OAIEvent::setMarketCountInPlay(const double &market_count_in_play) {
    m_market_count_in_play = market_count_in_play;
    m_market_count_in_play_isSet = true;
}

bool OAIEvent::is_market_count_in_play_Set() const{
    return m_market_count_in_play_isSet;
}

bool OAIEvent::is_market_count_in_play_Valid() const{
    return m_market_count_in_play_isValid;
}

double OAIEvent::getMarketCountPreMatch() const {
    return m_market_count_pre_match;
}
void OAIEvent::setMarketCountPreMatch(const double &market_count_pre_match) {
    m_market_count_pre_match = market_count_pre_match;
    m_market_count_pre_match_isSet = true;
}

bool OAIEvent::is_market_count_pre_match_Set() const{
    return m_market_count_pre_match_isSet;
}

bool OAIEvent::is_market_count_pre_match_Valid() const{
    return m_market_count_pre_match_isValid;
}

QList<OAIMarket> OAIEvent::getMarkets() const {
    return m_markets;
}
void OAIEvent::setMarkets(const QList<OAIMarket> &markets) {
    m_markets = markets;
    m_markets_isSet = true;
}

bool OAIEvent::is_markets_Set() const{
    return m_markets_isSet;
}

bool OAIEvent::is_markets_Valid() const{
    return m_markets_isValid;
}

QString OAIEvent::getName() const {
    return m_name;
}
void OAIEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvent::is_name_Valid() const{
    return m_name_isValid;
}

double OAIEvent::getOrder() const {
    return m_order;
}
void OAIEvent::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIEvent::is_order_Set() const{
    return m_order_isSet;
}

bool OAIEvent::is_order_Valid() const{
    return m_order_isValid;
}

QList<QString> OAIEvent::getParentIds() const {
    return m_parent_ids;
}
void OAIEvent::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAIEvent::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAIEvent::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

QString OAIEvent::getRaceNum() const {
    return m_race_num;
}
void OAIEvent::setRaceNum(const QString &race_num) {
    m_race_num = race_num;
    m_race_num_isSet = true;
}

bool OAIEvent::is_race_num_Set() const{
    return m_race_num_isSet;
}

bool OAIEvent::is_race_num_Valid() const{
    return m_race_num_isValid;
}

bool OAIEvent::isSettled() const {
    return m_settled;
}
void OAIEvent::setSettled(const bool &settled) {
    m_settled = settled;
    m_settled_isSet = true;
}

bool OAIEvent::is_settled_Set() const{
    return m_settled_isSet;
}

bool OAIEvent::is_settled_Valid() const{
    return m_settled_isValid;
}

QString OAIEvent::getStartDateTime() const {
    return m_start_date_time;
}
void OAIEvent::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIEvent::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIEvent::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIEvent::getStatus() const {
    return m_status;
}
void OAIEvent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvent::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bet_in_running_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_betting_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cashin_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_in_play_markets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_live_prices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_count_active_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_count_active_pre_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_count_active_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_count_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_count_pre_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_start_date_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
