/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISelection.h
 *
 * 
 */

#ifndef OAISelection_H
#define OAISelection_H

#include <QJsonObject>

#include "OAIPriceFormatted.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPriceFormatted;

class OAISelection : public OAIObject {
public:
    OAISelection();
    OAISelection(QString json);
    ~OAISelection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCashinPriceDen() const;
    void setCashinPriceDen(const double &cashin_price_den);
    bool is_cashin_price_den_Set() const;
    bool is_cashin_price_den_Valid() const;

    double getCashinPriceNum() const;
    void setCashinPriceNum(const double &cashin_price_num);
    bool is_cashin_price_num_Set() const;
    bool is_cashin_price_num_Valid() const;

    QList<QString> getChannels() const;
    void setChannels(const QList<QString> &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    double getCsAway() const;
    void setCsAway(const double &cs_away);
    bool is_cs_away_Set() const;
    bool is_cs_away_Valid() const;

    double getCsHome() const;
    void setCsHome(const double &cs_home);
    bool is_cs_home_Set() const;
    bool is_cs_home_Valid() const;

    double getCurrentPriceDen() const;
    void setCurrentPriceDen(const double &current_price_den);
    bool is_current_price_den_Set() const;
    bool is_current_price_den_Valid() const;

    double getCurrentPriceNum() const;
    void setCurrentPriceNum(const double &current_price_num);
    bool is_current_price_num_Set() const;
    bool is_current_price_num_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisplayed() const;
    void setDisplayed(const bool &displayed);
    bool is_displayed_Set() const;
    bool is_displayed_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsPublished() const;
    void setIsPublished(const bool &is_published);
    bool is_is_published_Set() const;
    bool is_is_published_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getOddsDecimal() const;
    void setOddsDecimal(const double &odds_decimal);
    bool is_odds_decimal_Set() const;
    bool is_odds_decimal_Valid() const;

    double getOddsFractional() const;
    void setOddsFractional(const double &odds_fractional);
    bool is_odds_fractional_Set() const;
    bool is_odds_fractional_Valid() const;

    double getOrder() const;
    void setOrder(const double &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<QString> getParentIds() const;
    void setParentIds(const QList<QString> &parent_ids);
    bool is_parent_ids_Set() const;
    bool is_parent_ids_Valid() const;

    OAIPriceFormatted getPriceFormatted() const;
    void setPriceFormatted(const OAIPriceFormatted &price_formatted);
    bool is_price_formatted_Set() const;
    bool is_price_formatted_Valid() const;

    QString getResult() const;
    void setResult(const QString &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    QString getResultType() const;
    void setResultType(const QString &result_type);
    bool is_result_type_Set() const;
    bool is_result_type_Valid() const;

    double getRunnerNum() const;
    void setRunnerNum(const double &runner_num);
    bool is_runner_num_Set() const;
    bool is_runner_num_Valid() const;

    bool isSettled() const;
    void setSettled(const bool &settled);
    bool is_settled_Set() const;
    bool is_settled_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cashin_price_den;
    bool m_cashin_price_den_isSet;
    bool m_cashin_price_den_isValid;

    double m_cashin_price_num;
    bool m_cashin_price_num_isSet;
    bool m_cashin_price_num_isValid;

    QList<QString> m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;

    double m_cs_away;
    bool m_cs_away_isSet;
    bool m_cs_away_isValid;

    double m_cs_home;
    bool m_cs_home_isSet;
    bool m_cs_home_isValid;

    double m_current_price_den;
    bool m_current_price_den_isSet;
    bool m_current_price_den_isValid;

    double m_current_price_num;
    bool m_current_price_num_isSet;
    bool m_current_price_num_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_displayed;
    bool m_displayed_isSet;
    bool m_displayed_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_published;
    bool m_is_published_isSet;
    bool m_is_published_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_odds_decimal;
    bool m_odds_decimal_isSet;
    bool m_odds_decimal_isValid;

    double m_odds_fractional;
    bool m_odds_fractional_isSet;
    bool m_odds_fractional_isValid;

    double m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<QString> m_parent_ids;
    bool m_parent_ids_isSet;
    bool m_parent_ids_isValid;

    OAIPriceFormatted m_price_formatted;
    bool m_price_formatted_isSet;
    bool m_price_formatted_isValid;

    QString m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    QString m_result_type;
    bool m_result_type_isSet;
    bool m_result_type_isValid;

    double m_runner_num;
    bool m_runner_num_isSet;
    bool m_runner_num_isValid;

    bool m_settled;
    bool m_settled_isSet;
    bool m_settled_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISelection)

#endif // OAISelection_H
