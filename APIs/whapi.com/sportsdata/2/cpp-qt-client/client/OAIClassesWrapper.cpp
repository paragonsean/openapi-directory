/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassesWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassesWrapper::OAIClassesWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassesWrapper::OAIClassesWrapper() {
    this->initializeModel();
}

OAIClassesWrapper::~OAIClassesWrapper() {}

void OAIClassesWrapper::initializeModel() {

    m_classes_isSet = false;
    m_classes_isValid = false;
}

void OAIClassesWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassesWrapper::fromJsonObject(QJsonObject json) {

    m_classes_isValid = ::OpenAPI::fromJsonValue(m_classes, json[QString("classes")]);
    m_classes_isSet = !json[QString("classes")].isNull() && m_classes_isValid;
}

QString OAIClassesWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassesWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_classes.size() > 0) {
        obj.insert(QString("classes"), ::OpenAPI::toJsonValue(m_classes));
    }
    return obj;
}

QList<OAIClass> OAIClassesWrapper::getClasses() const {
    return m_classes;
}
void OAIClassesWrapper::setClasses(const QList<OAIClass> &classes) {
    m_classes = classes;
    m_classes_isSet = true;
}

bool OAIClassesWrapper::is_classes_Set() const{
    return m_classes_isSet;
}

bool OAIClassesWrapper::is_classes_Valid() const{
    return m_classes_isValid;
}

bool OAIClassesWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassesWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
