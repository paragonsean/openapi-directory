/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompetition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompetition::OAICompetition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompetition::OAICompetition() {
    this->initializeModel();
}

OAICompetition::~OAICompetition() {}

void OAICompetition::initializeModel() {

    m_bet_in_running_delay_isSet = false;
    m_bet_in_running_delay_isValid = false;

    m_cashin_available_isSet = false;
    m_cashin_available_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_displayed_isSet = false;
    m_displayed_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICompetition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompetition::fromJsonObject(QJsonObject json) {

    m_bet_in_running_delay_isValid = ::OpenAPI::fromJsonValue(m_bet_in_running_delay, json[QString("betInRunningDelay")]);
    m_bet_in_running_delay_isSet = !json[QString("betInRunningDelay")].isNull() && m_bet_in_running_delay_isValid;

    m_cashin_available_isValid = ::OpenAPI::fromJsonValue(m_cashin_available, json[QString("cashinAvailable")]);
    m_cashin_available_isSet = !json[QString("cashinAvailable")].isNull() && m_cashin_available_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_displayed_isValid = ::OpenAPI::fromJsonValue(m_displayed, json[QString("displayed")]);
    m_displayed_isSet = !json[QString("displayed")].isNull() && m_displayed_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parentIds")]);
    m_parent_ids_isSet = !json[QString("parentIds")].isNull() && m_parent_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICompetition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompetition::asJsonObject() const {
    QJsonObject obj;
    if (m_bet_in_running_delay_isSet) {
        obj.insert(QString("betInRunningDelay"), ::OpenAPI::toJsonValue(m_bet_in_running_delay));
    }
    if (m_cashin_available_isSet) {
        obj.insert(QString("cashinAvailable"), ::OpenAPI::toJsonValue(m_cashin_available));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_displayed_isSet) {
        obj.insert(QString("displayed"), ::OpenAPI::toJsonValue(m_displayed));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("parentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAICompetition::getBetInRunningDelay() const {
    return m_bet_in_running_delay;
}
void OAICompetition::setBetInRunningDelay(const double &bet_in_running_delay) {
    m_bet_in_running_delay = bet_in_running_delay;
    m_bet_in_running_delay_isSet = true;
}

bool OAICompetition::is_bet_in_running_delay_Set() const{
    return m_bet_in_running_delay_isSet;
}

bool OAICompetition::is_bet_in_running_delay_Valid() const{
    return m_bet_in_running_delay_isValid;
}

bool OAICompetition::isCashinAvailable() const {
    return m_cashin_available;
}
void OAICompetition::setCashinAvailable(const bool &cashin_available) {
    m_cashin_available = cashin_available;
    m_cashin_available_isSet = true;
}

bool OAICompetition::is_cashin_available_Set() const{
    return m_cashin_available_isSet;
}

bool OAICompetition::is_cashin_available_Valid() const{
    return m_cashin_available_isValid;
}

QList<QString> OAICompetition::getChannels() const {
    return m_channels;
}
void OAICompetition::setChannels(const QList<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAICompetition::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAICompetition::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAICompetition::getDescription() const {
    return m_description;
}
void OAICompetition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICompetition::is_description_Set() const{
    return m_description_isSet;
}

bool OAICompetition::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICompetition::isDisplayed() const {
    return m_displayed;
}
void OAICompetition::setDisplayed(const bool &displayed) {
    m_displayed = displayed;
    m_displayed_isSet = true;
}

bool OAICompetition::is_displayed_Set() const{
    return m_displayed_isSet;
}

bool OAICompetition::is_displayed_Valid() const{
    return m_displayed_isValid;
}

QList<QString> OAICompetition::getFlags() const {
    return m_flags;
}
void OAICompetition::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAICompetition::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAICompetition::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAICompetition::getId() const {
    return m_id;
}
void OAICompetition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompetition::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompetition::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICompetition::isIsPublished() const {
    return m_is_published;
}
void OAICompetition::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAICompetition::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAICompetition::is_is_published_Valid() const{
    return m_is_published_isValid;
}

QString OAICompetition::getName() const {
    return m_name;
}
void OAICompetition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompetition::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompetition::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICompetition::getOrder() const {
    return m_order;
}
void OAICompetition::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAICompetition::is_order_Set() const{
    return m_order_isSet;
}

bool OAICompetition::is_order_Valid() const{
    return m_order_isValid;
}

QList<QString> OAICompetition::getParentIds() const {
    return m_parent_ids;
}
void OAICompetition::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAICompetition::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAICompetition::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

QString OAICompetition::getStatus() const {
    return m_status;
}
void OAICompetition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICompetition::is_status_Set() const{
    return m_status_isSet;
}

bool OAICompetition::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICompetition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bet_in_running_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cashin_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompetition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
