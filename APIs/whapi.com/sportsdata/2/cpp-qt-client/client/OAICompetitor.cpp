/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompetitor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompetitor::OAICompetitor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompetitor::OAICompetitor() {
    this->initializeModel();
}

OAICompetitor::~OAICompetitor() {}

void OAICompetitor::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_draw_number_isSet = false;
    m_draw_number_isValid = false;

    m_form_guide_isSet = false;
    m_form_guide_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jockey_name_isSet = false;
    m_jockey_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_sex_isSet = false;
    m_sex_isValid = false;

    m_silk_image_url_isSet = false;
    m_silk_image_url_isValid = false;

    m_trainer_name_isSet = false;
    m_trainer_name_isValid = false;

    m_weight_pounds_isSet = false;
    m_weight_pounds_isValid = false;
}

void OAICompetitor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompetitor::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_draw_number_isValid = ::OpenAPI::fromJsonValue(m_draw_number, json[QString("drawNumber")]);
    m_draw_number_isSet = !json[QString("drawNumber")].isNull() && m_draw_number_isValid;

    m_form_guide_isValid = ::OpenAPI::fromJsonValue(m_form_guide, json[QString("formGuide")]);
    m_form_guide_isSet = !json[QString("formGuide")].isNull() && m_form_guide_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jockey_name_isValid = ::OpenAPI::fromJsonValue(m_jockey_name, json[QString("jockeyName")]);
    m_jockey_name_isSet = !json[QString("jockeyName")].isNull() && m_jockey_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_sex_isValid = ::OpenAPI::fromJsonValue(m_sex, json[QString("sex")]);
    m_sex_isSet = !json[QString("sex")].isNull() && m_sex_isValid;

    m_silk_image_url_isValid = ::OpenAPI::fromJsonValue(m_silk_image_url, json[QString("silkImageUrl")]);
    m_silk_image_url_isSet = !json[QString("silkImageUrl")].isNull() && m_silk_image_url_isValid;

    m_trainer_name_isValid = ::OpenAPI::fromJsonValue(m_trainer_name, json[QString("trainerName")]);
    m_trainer_name_isSet = !json[QString("trainerName")].isNull() && m_trainer_name_isValid;

    m_weight_pounds_isValid = ::OpenAPI::fromJsonValue(m_weight_pounds, json[QString("weightPounds")]);
    m_weight_pounds_isSet = !json[QString("weightPounds")].isNull() && m_weight_pounds_isValid;
}

QString OAICompetitor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompetitor::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_draw_number_isSet) {
        obj.insert(QString("drawNumber"), ::OpenAPI::toJsonValue(m_draw_number));
    }
    if (m_form_guide_isSet) {
        obj.insert(QString("formGuide"), ::OpenAPI::toJsonValue(m_form_guide));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jockey_name_isSet) {
        obj.insert(QString("jockeyName"), ::OpenAPI::toJsonValue(m_jockey_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_sex_isSet) {
        obj.insert(QString("sex"), ::OpenAPI::toJsonValue(m_sex));
    }
    if (m_silk_image_url_isSet) {
        obj.insert(QString("silkImageUrl"), ::OpenAPI::toJsonValue(m_silk_image_url));
    }
    if (m_trainer_name_isSet) {
        obj.insert(QString("trainerName"), ::OpenAPI::toJsonValue(m_trainer_name));
    }
    if (m_weight_pounds_isSet) {
        obj.insert(QString("weightPounds"), ::OpenAPI::toJsonValue(m_weight_pounds));
    }
    return obj;
}

double OAICompetitor::getAge() const {
    return m_age;
}
void OAICompetitor::setAge(const double &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAICompetitor::is_age_Set() const{
    return m_age_isSet;
}

bool OAICompetitor::is_age_Valid() const{
    return m_age_isValid;
}

QString OAICompetitor::getColour() const {
    return m_colour;
}
void OAICompetitor::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAICompetitor::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAICompetitor::is_colour_Valid() const{
    return m_colour_isValid;
}

double OAICompetitor::getDrawNumber() const {
    return m_draw_number;
}
void OAICompetitor::setDrawNumber(const double &draw_number) {
    m_draw_number = draw_number;
    m_draw_number_isSet = true;
}

bool OAICompetitor::is_draw_number_Set() const{
    return m_draw_number_isSet;
}

bool OAICompetitor::is_draw_number_Valid() const{
    return m_draw_number_isValid;
}

QString OAICompetitor::getFormGuide() const {
    return m_form_guide;
}
void OAICompetitor::setFormGuide(const QString &form_guide) {
    m_form_guide = form_guide;
    m_form_guide_isSet = true;
}

bool OAICompetitor::is_form_guide_Set() const{
    return m_form_guide_isSet;
}

bool OAICompetitor::is_form_guide_Valid() const{
    return m_form_guide_isValid;
}

double OAICompetitor::getId() const {
    return m_id;
}
void OAICompetitor::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompetitor::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompetitor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompetitor::getJockeyName() const {
    return m_jockey_name;
}
void OAICompetitor::setJockeyName(const QString &jockey_name) {
    m_jockey_name = jockey_name;
    m_jockey_name_isSet = true;
}

bool OAICompetitor::is_jockey_name_Set() const{
    return m_jockey_name_isSet;
}

bool OAICompetitor::is_jockey_name_Valid() const{
    return m_jockey_name_isValid;
}

QString OAICompetitor::getName() const {
    return m_name;
}
void OAICompetitor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompetitor::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompetitor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompetitor::getOverview() const {
    return m_overview;
}
void OAICompetitor::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAICompetitor::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAICompetitor::is_overview_Valid() const{
    return m_overview_isValid;
}

QString OAICompetitor::getOwnerName() const {
    return m_owner_name;
}
void OAICompetitor::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAICompetitor::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAICompetitor::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAICompetitor::getRating() const {
    return m_rating;
}
void OAICompetitor::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAICompetitor::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAICompetitor::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAICompetitor::getSex() const {
    return m_sex;
}
void OAICompetitor::setSex(const QString &sex) {
    m_sex = sex;
    m_sex_isSet = true;
}

bool OAICompetitor::is_sex_Set() const{
    return m_sex_isSet;
}

bool OAICompetitor::is_sex_Valid() const{
    return m_sex_isValid;
}

QString OAICompetitor::getSilkImageUrl() const {
    return m_silk_image_url;
}
void OAICompetitor::setSilkImageUrl(const QString &silk_image_url) {
    m_silk_image_url = silk_image_url;
    m_silk_image_url_isSet = true;
}

bool OAICompetitor::is_silk_image_url_Set() const{
    return m_silk_image_url_isSet;
}

bool OAICompetitor::is_silk_image_url_Valid() const{
    return m_silk_image_url_isValid;
}

QString OAICompetitor::getTrainerName() const {
    return m_trainer_name;
}
void OAICompetitor::setTrainerName(const QString &trainer_name) {
    m_trainer_name = trainer_name;
    m_trainer_name_isSet = true;
}

bool OAICompetitor::is_trainer_name_Set() const{
    return m_trainer_name_isSet;
}

bool OAICompetitor::is_trainer_name_Valid() const{
    return m_trainer_name_isValid;
}

QString OAICompetitor::getWeightPounds() const {
    return m_weight_pounds;
}
void OAICompetitor::setWeightPounds(const QString &weight_pounds) {
    m_weight_pounds = weight_pounds;
    m_weight_pounds_isSet = true;
}

bool OAICompetitor::is_weight_pounds_Set() const{
    return m_weight_pounds_isSet;
}

bool OAICompetitor::is_weight_pounds_Valid() const{
    return m_weight_pounds_isValid;
}

bool OAICompetitor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draw_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_guide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jockey_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silk_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trainer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_pounds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompetitor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_silk_image_url_isValid && true;
}

} // namespace OpenAPI
