/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelection::OAISelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelection::OAISelection() {
    this->initializeModel();
}

OAISelection::~OAISelection() {}

void OAISelection::initializeModel() {

    m_cashin_price_den_isSet = false;
    m_cashin_price_den_isValid = false;

    m_cashin_price_num_isSet = false;
    m_cashin_price_num_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_cs_away_isSet = false;
    m_cs_away_isValid = false;

    m_cs_home_isSet = false;
    m_cs_home_isValid = false;

    m_current_price_den_isSet = false;
    m_current_price_den_isValid = false;

    m_current_price_num_isSet = false;
    m_current_price_num_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_displayed_isSet = false;
    m_displayed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_odds_decimal_isSet = false;
    m_odds_decimal_isValid = false;

    m_odds_fractional_isSet = false;
    m_odds_fractional_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_price_formatted_isSet = false;
    m_price_formatted_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;

    m_runner_num_isSet = false;
    m_runner_num_isValid = false;

    m_settled_isSet = false;
    m_settled_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelection::fromJsonObject(QJsonObject json) {

    m_cashin_price_den_isValid = ::OpenAPI::fromJsonValue(m_cashin_price_den, json[QString("cashinPriceDen")]);
    m_cashin_price_den_isSet = !json[QString("cashinPriceDen")].isNull() && m_cashin_price_den_isValid;

    m_cashin_price_num_isValid = ::OpenAPI::fromJsonValue(m_cashin_price_num, json[QString("cashinPriceNum")]);
    m_cashin_price_num_isSet = !json[QString("cashinPriceNum")].isNull() && m_cashin_price_num_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_cs_away_isValid = ::OpenAPI::fromJsonValue(m_cs_away, json[QString("csAway")]);
    m_cs_away_isSet = !json[QString("csAway")].isNull() && m_cs_away_isValid;

    m_cs_home_isValid = ::OpenAPI::fromJsonValue(m_cs_home, json[QString("csHome")]);
    m_cs_home_isSet = !json[QString("csHome")].isNull() && m_cs_home_isValid;

    m_current_price_den_isValid = ::OpenAPI::fromJsonValue(m_current_price_den, json[QString("currentPriceDen")]);
    m_current_price_den_isSet = !json[QString("currentPriceDen")].isNull() && m_current_price_den_isValid;

    m_current_price_num_isValid = ::OpenAPI::fromJsonValue(m_current_price_num, json[QString("currentPriceNum")]);
    m_current_price_num_isSet = !json[QString("currentPriceNum")].isNull() && m_current_price_num_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_displayed_isValid = ::OpenAPI::fromJsonValue(m_displayed, json[QString("displayed")]);
    m_displayed_isSet = !json[QString("displayed")].isNull() && m_displayed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_odds_decimal_isValid = ::OpenAPI::fromJsonValue(m_odds_decimal, json[QString("oddsDecimal")]);
    m_odds_decimal_isSet = !json[QString("oddsDecimal")].isNull() && m_odds_decimal_isValid;

    m_odds_fractional_isValid = ::OpenAPI::fromJsonValue(m_odds_fractional, json[QString("oddsFractional")]);
    m_odds_fractional_isSet = !json[QString("oddsFractional")].isNull() && m_odds_fractional_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parentIds")]);
    m_parent_ids_isSet = !json[QString("parentIds")].isNull() && m_parent_ids_isValid;

    m_price_formatted_isValid = ::OpenAPI::fromJsonValue(m_price_formatted, json[QString("priceFormatted")]);
    m_price_formatted_isSet = !json[QString("priceFormatted")].isNull() && m_price_formatted_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("resultType")]);
    m_result_type_isSet = !json[QString("resultType")].isNull() && m_result_type_isValid;

    m_runner_num_isValid = ::OpenAPI::fromJsonValue(m_runner_num, json[QString("runnerNum")]);
    m_runner_num_isSet = !json[QString("runnerNum")].isNull() && m_runner_num_isValid;

    m_settled_isValid = ::OpenAPI::fromJsonValue(m_settled, json[QString("settled")]);
    m_settled_isSet = !json[QString("settled")].isNull() && m_settled_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelection::asJsonObject() const {
    QJsonObject obj;
    if (m_cashin_price_den_isSet) {
        obj.insert(QString("cashinPriceDen"), ::OpenAPI::toJsonValue(m_cashin_price_den));
    }
    if (m_cashin_price_num_isSet) {
        obj.insert(QString("cashinPriceNum"), ::OpenAPI::toJsonValue(m_cashin_price_num));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_cs_away_isSet) {
        obj.insert(QString("csAway"), ::OpenAPI::toJsonValue(m_cs_away));
    }
    if (m_cs_home_isSet) {
        obj.insert(QString("csHome"), ::OpenAPI::toJsonValue(m_cs_home));
    }
    if (m_current_price_den_isSet) {
        obj.insert(QString("currentPriceDen"), ::OpenAPI::toJsonValue(m_current_price_den));
    }
    if (m_current_price_num_isSet) {
        obj.insert(QString("currentPriceNum"), ::OpenAPI::toJsonValue(m_current_price_num));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_displayed_isSet) {
        obj.insert(QString("displayed"), ::OpenAPI::toJsonValue(m_displayed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_odds_decimal_isSet) {
        obj.insert(QString("oddsDecimal"), ::OpenAPI::toJsonValue(m_odds_decimal));
    }
    if (m_odds_fractional_isSet) {
        obj.insert(QString("oddsFractional"), ::OpenAPI::toJsonValue(m_odds_fractional));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("parentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_price_formatted.isSet()) {
        obj.insert(QString("priceFormatted"), ::OpenAPI::toJsonValue(m_price_formatted));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("resultType"), ::OpenAPI::toJsonValue(m_result_type));
    }
    if (m_runner_num_isSet) {
        obj.insert(QString("runnerNum"), ::OpenAPI::toJsonValue(m_runner_num));
    }
    if (m_settled_isSet) {
        obj.insert(QString("settled"), ::OpenAPI::toJsonValue(m_settled));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAISelection::getCashinPriceDen() const {
    return m_cashin_price_den;
}
void OAISelection::setCashinPriceDen(const double &cashin_price_den) {
    m_cashin_price_den = cashin_price_den;
    m_cashin_price_den_isSet = true;
}

bool OAISelection::is_cashin_price_den_Set() const{
    return m_cashin_price_den_isSet;
}

bool OAISelection::is_cashin_price_den_Valid() const{
    return m_cashin_price_den_isValid;
}

double OAISelection::getCashinPriceNum() const {
    return m_cashin_price_num;
}
void OAISelection::setCashinPriceNum(const double &cashin_price_num) {
    m_cashin_price_num = cashin_price_num;
    m_cashin_price_num_isSet = true;
}

bool OAISelection::is_cashin_price_num_Set() const{
    return m_cashin_price_num_isSet;
}

bool OAISelection::is_cashin_price_num_Valid() const{
    return m_cashin_price_num_isValid;
}

QList<QString> OAISelection::getChannels() const {
    return m_channels;
}
void OAISelection::setChannels(const QList<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAISelection::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAISelection::is_channels_Valid() const{
    return m_channels_isValid;
}

double OAISelection::getCsAway() const {
    return m_cs_away;
}
void OAISelection::setCsAway(const double &cs_away) {
    m_cs_away = cs_away;
    m_cs_away_isSet = true;
}

bool OAISelection::is_cs_away_Set() const{
    return m_cs_away_isSet;
}

bool OAISelection::is_cs_away_Valid() const{
    return m_cs_away_isValid;
}

double OAISelection::getCsHome() const {
    return m_cs_home;
}
void OAISelection::setCsHome(const double &cs_home) {
    m_cs_home = cs_home;
    m_cs_home_isSet = true;
}

bool OAISelection::is_cs_home_Set() const{
    return m_cs_home_isSet;
}

bool OAISelection::is_cs_home_Valid() const{
    return m_cs_home_isValid;
}

double OAISelection::getCurrentPriceDen() const {
    return m_current_price_den;
}
void OAISelection::setCurrentPriceDen(const double &current_price_den) {
    m_current_price_den = current_price_den;
    m_current_price_den_isSet = true;
}

bool OAISelection::is_current_price_den_Set() const{
    return m_current_price_den_isSet;
}

bool OAISelection::is_current_price_den_Valid() const{
    return m_current_price_den_isValid;
}

double OAISelection::getCurrentPriceNum() const {
    return m_current_price_num;
}
void OAISelection::setCurrentPriceNum(const double &current_price_num) {
    m_current_price_num = current_price_num;
    m_current_price_num_isSet = true;
}

bool OAISelection::is_current_price_num_Set() const{
    return m_current_price_num_isSet;
}

bool OAISelection::is_current_price_num_Valid() const{
    return m_current_price_num_isValid;
}

QString OAISelection::getDescription() const {
    return m_description;
}
void OAISelection::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISelection::is_description_Set() const{
    return m_description_isSet;
}

bool OAISelection::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISelection::isDisplayed() const {
    return m_displayed;
}
void OAISelection::setDisplayed(const bool &displayed) {
    m_displayed = displayed;
    m_displayed_isSet = true;
}

bool OAISelection::is_displayed_Set() const{
    return m_displayed_isSet;
}

bool OAISelection::is_displayed_Valid() const{
    return m_displayed_isValid;
}

QString OAISelection::getId() const {
    return m_id;
}
void OAISelection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISelection::is_id_Set() const{
    return m_id_isSet;
}

bool OAISelection::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISelection::isIsPublished() const {
    return m_is_published;
}
void OAISelection::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAISelection::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAISelection::is_is_published_Valid() const{
    return m_is_published_isValid;
}

QString OAISelection::getName() const {
    return m_name;
}
void OAISelection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISelection::is_name_Set() const{
    return m_name_isSet;
}

bool OAISelection::is_name_Valid() const{
    return m_name_isValid;
}

double OAISelection::getOddsDecimal() const {
    return m_odds_decimal;
}
void OAISelection::setOddsDecimal(const double &odds_decimal) {
    m_odds_decimal = odds_decimal;
    m_odds_decimal_isSet = true;
}

bool OAISelection::is_odds_decimal_Set() const{
    return m_odds_decimal_isSet;
}

bool OAISelection::is_odds_decimal_Valid() const{
    return m_odds_decimal_isValid;
}

double OAISelection::getOddsFractional() const {
    return m_odds_fractional;
}
void OAISelection::setOddsFractional(const double &odds_fractional) {
    m_odds_fractional = odds_fractional;
    m_odds_fractional_isSet = true;
}

bool OAISelection::is_odds_fractional_Set() const{
    return m_odds_fractional_isSet;
}

bool OAISelection::is_odds_fractional_Valid() const{
    return m_odds_fractional_isValid;
}

double OAISelection::getOrder() const {
    return m_order;
}
void OAISelection::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISelection::is_order_Set() const{
    return m_order_isSet;
}

bool OAISelection::is_order_Valid() const{
    return m_order_isValid;
}

QList<QString> OAISelection::getParentIds() const {
    return m_parent_ids;
}
void OAISelection::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAISelection::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAISelection::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

OAIPriceFormatted OAISelection::getPriceFormatted() const {
    return m_price_formatted;
}
void OAISelection::setPriceFormatted(const OAIPriceFormatted &price_formatted) {
    m_price_formatted = price_formatted;
    m_price_formatted_isSet = true;
}

bool OAISelection::is_price_formatted_Set() const{
    return m_price_formatted_isSet;
}

bool OAISelection::is_price_formatted_Valid() const{
    return m_price_formatted_isValid;
}

QString OAISelection::getResult() const {
    return m_result;
}
void OAISelection::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAISelection::is_result_Set() const{
    return m_result_isSet;
}

bool OAISelection::is_result_Valid() const{
    return m_result_isValid;
}

QString OAISelection::getResultType() const {
    return m_result_type;
}
void OAISelection::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAISelection::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAISelection::is_result_type_Valid() const{
    return m_result_type_isValid;
}

double OAISelection::getRunnerNum() const {
    return m_runner_num;
}
void OAISelection::setRunnerNum(const double &runner_num) {
    m_runner_num = runner_num;
    m_runner_num_isSet = true;
}

bool OAISelection::is_runner_num_Set() const{
    return m_runner_num_isSet;
}

bool OAISelection::is_runner_num_Valid() const{
    return m_runner_num_isValid;
}

bool OAISelection::isSettled() const {
    return m_settled;
}
void OAISelection::setSettled(const bool &settled) {
    m_settled = settled;
    m_settled_isSet = true;
}

bool OAISelection::is_settled_Set() const{
    return m_settled_isSet;
}

bool OAISelection::is_settled_Valid() const{
    return m_settled_isValid;
}

QString OAISelection::getStatus() const {
    return m_status;
}
void OAISelection::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISelection::is_status_Set() const{
    return m_status_isSet;
}

bool OAISelection::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cashin_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cashin_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_price_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_price_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odds_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odds_fractional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_formatted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_odds_decimal_isValid && m_odds_fractional_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
