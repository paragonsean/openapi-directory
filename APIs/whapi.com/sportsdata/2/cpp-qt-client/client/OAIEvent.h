/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * 
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include "OAIMarket.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMarket;

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBetInRunningDelay() const;
    void setBetInRunningDelay(const double &bet_in_running_delay);
    bool is_bet_in_running_delay_Set() const;
    bool is_bet_in_running_delay_Valid() const;

    QString getBettingStatus() const;
    void setBettingStatus(const QString &betting_status);
    bool is_betting_status_Set() const;
    bool is_betting_status_Valid() const;

    bool isCashinAvailable() const;
    void setCashinAvailable(const bool &cashin_available);
    bool is_cashin_available_Set() const;
    bool is_cashin_available_Valid() const;

    QList<QString> getChannels() const;
    void setChannels(const QList<QString> &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisplayed() const;
    void setDisplayed(const bool &displayed);
    bool is_displayed_Set() const;
    bool is_displayed_Valid() const;

    QString getEventSort() const;
    void setEventSort(const QString &event_sort);
    bool is_event_sort_Set() const;
    bool is_event_sort_Valid() const;

    QList<QString> getFlags() const;
    void setFlags(const QList<QString> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    bool isHasInPlayMarkets() const;
    void setHasInPlayMarkets(const bool &has_in_play_markets);
    bool is_has_in_play_markets_Set() const;
    bool is_has_in_play_markets_Valid() const;

    bool isHasLivePrices() const;
    void setHasLivePrices(const bool &has_live_prices);
    bool is_has_live_prices_Set() const;
    bool is_has_live_prices_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsInPlay() const;
    void setIsInPlay(const bool &is_in_play);
    bool is_is_in_play_Set() const;
    bool is_is_in_play_Valid() const;

    bool isIsPublished() const;
    void setIsPublished(const bool &is_published);
    bool is_is_published_Set() const;
    bool is_is_published_Valid() const;

    double getMarketCountActiveInPlay() const;
    void setMarketCountActiveInPlay(const double &market_count_active_in_play);
    bool is_market_count_active_in_play_Set() const;
    bool is_market_count_active_in_play_Valid() const;

    double getMarketCountActivePreMatch() const;
    void setMarketCountActivePreMatch(const double &market_count_active_pre_match);
    bool is_market_count_active_pre_match_Set() const;
    bool is_market_count_active_pre_match_Valid() const;

    double getMarketCountActiveTotal() const;
    void setMarketCountActiveTotal(const double &market_count_active_total);
    bool is_market_count_active_total_Set() const;
    bool is_market_count_active_total_Valid() const;

    double getMarketCountInPlay() const;
    void setMarketCountInPlay(const double &market_count_in_play);
    bool is_market_count_in_play_Set() const;
    bool is_market_count_in_play_Valid() const;

    double getMarketCountPreMatch() const;
    void setMarketCountPreMatch(const double &market_count_pre_match);
    bool is_market_count_pre_match_Set() const;
    bool is_market_count_pre_match_Valid() const;

    QList<OAIMarket> getMarkets() const;
    void setMarkets(const QList<OAIMarket> &markets);
    bool is_markets_Set() const;
    bool is_markets_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getOrder() const;
    void setOrder(const double &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<QString> getParentIds() const;
    void setParentIds(const QList<QString> &parent_ids);
    bool is_parent_ids_Set() const;
    bool is_parent_ids_Valid() const;

    QString getRaceNum() const;
    void setRaceNum(const QString &race_num);
    bool is_race_num_Set() const;
    bool is_race_num_Valid() const;

    bool isSettled() const;
    void setSettled(const bool &settled);
    bool is_settled_Set() const;
    bool is_settled_Valid() const;

    QString getStartDateTime() const;
    void setStartDateTime(const QString &start_date_time);
    bool is_start_date_time_Set() const;
    bool is_start_date_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bet_in_running_delay;
    bool m_bet_in_running_delay_isSet;
    bool m_bet_in_running_delay_isValid;

    QString m_betting_status;
    bool m_betting_status_isSet;
    bool m_betting_status_isValid;

    bool m_cashin_available;
    bool m_cashin_available_isSet;
    bool m_cashin_available_isValid;

    QList<QString> m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_displayed;
    bool m_displayed_isSet;
    bool m_displayed_isValid;

    QString m_event_sort;
    bool m_event_sort_isSet;
    bool m_event_sort_isValid;

    QList<QString> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    bool m_has_in_play_markets;
    bool m_has_in_play_markets_isSet;
    bool m_has_in_play_markets_isValid;

    bool m_has_live_prices;
    bool m_has_live_prices_isSet;
    bool m_has_live_prices_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_in_play;
    bool m_is_in_play_isSet;
    bool m_is_in_play_isValid;

    bool m_is_published;
    bool m_is_published_isSet;
    bool m_is_published_isValid;

    double m_market_count_active_in_play;
    bool m_market_count_active_in_play_isSet;
    bool m_market_count_active_in_play_isValid;

    double m_market_count_active_pre_match;
    bool m_market_count_active_pre_match_isSet;
    bool m_market_count_active_pre_match_isValid;

    double m_market_count_active_total;
    bool m_market_count_active_total_isSet;
    bool m_market_count_active_total_isValid;

    double m_market_count_in_play;
    bool m_market_count_in_play_isSet;
    bool m_market_count_in_play_isValid;

    double m_market_count_pre_match;
    bool m_market_count_pre_match_isSet;
    bool m_market_count_pre_match_isValid;

    QList<OAIMarket> m_markets;
    bool m_markets_isSet;
    bool m_markets_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<QString> m_parent_ids;
    bool m_parent_ids_isSet;
    bool m_parent_ids_isValid;

    QString m_race_num;
    bool m_race_num_isSet;
    bool m_race_num_isValid;

    bool m_settled;
    bool m_settled_isSet;
    bool m_settled_isValid;

    QString m_start_date_time;
    bool m_start_date_time_isSet;
    bool m_start_date_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
