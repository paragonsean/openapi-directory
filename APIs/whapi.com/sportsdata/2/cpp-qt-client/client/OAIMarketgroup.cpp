/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketgroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketgroup::OAIMarketgroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketgroup::OAIMarketgroup() {
    this->initializeModel();
}

OAIMarketgroup::~OAIMarketgroup() {}

void OAIMarketgroup::initializeModel() {

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_competition_id_isSet = false;
    m_competition_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_market_sort_isSet = false;
    m_market_sort_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIMarketgroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketgroup::fromJsonObject(QJsonObject json) {

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collectionId")]);
    m_collection_id_isSet = !json[QString("collectionId")].isNull() && m_collection_id_isValid;

    m_competition_id_isValid = ::OpenAPI::fromJsonValue(m_competition_id, json[QString("competitionId")]);
    m_competition_id_isSet = !json[QString("competitionId")].isNull() && m_competition_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_market_sort_isValid = ::OpenAPI::fromJsonValue(m_market_sort, json[QString("marketSort")]);
    m_market_sort_isSet = !json[QString("marketSort")].isNull() && m_market_sort_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIMarketgroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketgroup::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_id_isSet) {
        obj.insert(QString("collectionId"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_competition_id_isSet) {
        obj.insert(QString("competitionId"), ::OpenAPI::toJsonValue(m_competition_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_market_sort_isSet) {
        obj.insert(QString("marketSort"), ::OpenAPI::toJsonValue(m_market_sort));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIMarketgroup::getCollectionId() const {
    return m_collection_id;
}
void OAIMarketgroup::setCollectionId(const QString &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAIMarketgroup::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAIMarketgroup::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

QString OAIMarketgroup::getCompetitionId() const {
    return m_competition_id;
}
void OAIMarketgroup::setCompetitionId(const QString &competition_id) {
    m_competition_id = competition_id;
    m_competition_id_isSet = true;
}

bool OAIMarketgroup::is_competition_id_Set() const{
    return m_competition_id_isSet;
}

bool OAIMarketgroup::is_competition_id_Valid() const{
    return m_competition_id_isValid;
}

QString OAIMarketgroup::getId() const {
    return m_id;
}
void OAIMarketgroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarketgroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarketgroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMarketgroup::getMarketSort() const {
    return m_market_sort;
}
void OAIMarketgroup::setMarketSort(const QString &market_sort) {
    m_market_sort = market_sort;
    m_market_sort_isSet = true;
}

bool OAIMarketgroup::is_market_sort_Set() const{
    return m_market_sort_isSet;
}

bool OAIMarketgroup::is_market_sort_Valid() const{
    return m_market_sort_isValid;
}

QString OAIMarketgroup::getName() const {
    return m_name;
}
void OAIMarketgroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarketgroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarketgroup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIMarketgroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_competition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketgroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
