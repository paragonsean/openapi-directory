/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopBet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopBet::OAITopBet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopBet::OAITopBet() {
    this->initializeModel();
}

OAITopBet::~OAITopBet() {}

void OAITopBet::initializeModel() {

    m_competition_isSet = false;
    m_competition_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_market_isSet = false;
    m_market_isValid = false;

    m_selection_isSet = false;
    m_selection_isValid = false;

    m_sport_isSet = false;
    m_sport_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAITopBet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopBet::fromJsonObject(QJsonObject json) {

    m_competition_isValid = ::OpenAPI::fromJsonValue(m_competition, json[QString("competition")]);
    m_competition_isSet = !json[QString("competition")].isNull() && m_competition_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_market_isValid = ::OpenAPI::fromJsonValue(m_market, json[QString("market")]);
    m_market_isSet = !json[QString("market")].isNull() && m_market_isValid;

    m_selection_isValid = ::OpenAPI::fromJsonValue(m_selection, json[QString("selection")]);
    m_selection_isSet = !json[QString("selection")].isNull() && m_selection_isValid;

    m_sport_isValid = ::OpenAPI::fromJsonValue(m_sport, json[QString("sport")]);
    m_sport_isSet = !json[QString("sport")].isNull() && m_sport_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAITopBet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopBet::asJsonObject() const {
    QJsonObject obj;
    if (m_competition.isSet()) {
        obj.insert(QString("competition"), ::OpenAPI::toJsonValue(m_competition));
    }
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_market.isSet()) {
        obj.insert(QString("market"), ::OpenAPI::toJsonValue(m_market));
    }
    if (m_selection.isSet()) {
        obj.insert(QString("selection"), ::OpenAPI::toJsonValue(m_selection));
    }
    if (m_sport.isSet()) {
        obj.insert(QString("sport"), ::OpenAPI::toJsonValue(m_sport));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAICompetition OAITopBet::getCompetition() const {
    return m_competition;
}
void OAITopBet::setCompetition(const OAICompetition &competition) {
    m_competition = competition;
    m_competition_isSet = true;
}

bool OAITopBet::is_competition_Set() const{
    return m_competition_isSet;
}

bool OAITopBet::is_competition_Valid() const{
    return m_competition_isValid;
}

OAIEvent OAITopBet::getEvent() const {
    return m_event;
}
void OAITopBet::setEvent(const OAIEvent &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAITopBet::is_event_Set() const{
    return m_event_isSet;
}

bool OAITopBet::is_event_Valid() const{
    return m_event_isValid;
}

OAIMarket OAITopBet::getMarket() const {
    return m_market;
}
void OAITopBet::setMarket(const OAIMarket &market) {
    m_market = market;
    m_market_isSet = true;
}

bool OAITopBet::is_market_Set() const{
    return m_market_isSet;
}

bool OAITopBet::is_market_Valid() const{
    return m_market_isValid;
}

OAISelection OAITopBet::getSelection() const {
    return m_selection;
}
void OAITopBet::setSelection(const OAISelection &selection) {
    m_selection = selection;
    m_selection_isSet = true;
}

bool OAITopBet::is_selection_Set() const{
    return m_selection_isSet;
}

bool OAITopBet::is_selection_Valid() const{
    return m_selection_isValid;
}

OAISport OAITopBet::getSport() const {
    return m_sport;
}
void OAITopBet::setSport(const OAISport &sport) {
    m_sport = sport;
    m_sport_isSet = true;
}

bool OAITopBet::is_sport_Set() const{
    return m_sport_isSet;
}

bool OAITopBet::is_sport_Valid() const{
    return m_sport_isValid;
}

QString OAITopBet::getWeight() const {
    return m_weight;
}
void OAITopBet::setWeight(const QString &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAITopBet::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAITopBet::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAITopBet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_competition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopBet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
