/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceFormatted.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceFormatted::OAIPriceFormatted(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceFormatted::OAIPriceFormatted() {
    this->initializeModel();
}

OAIPriceFormatted::~OAIPriceFormatted() {}

void OAIPriceFormatted::initializeModel() {

    m_american_isSet = false;
    m_american_isValid = false;

    m_decimal_isSet = false;
    m_decimal_isValid = false;

    m_fractional_isSet = false;
    m_fractional_isValid = false;
}

void OAIPriceFormatted::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceFormatted::fromJsonObject(QJsonObject json) {

    m_american_isValid = ::OpenAPI::fromJsonValue(m_american, json[QString("american")]);
    m_american_isSet = !json[QString("american")].isNull() && m_american_isValid;

    m_decimal_isValid = ::OpenAPI::fromJsonValue(m_decimal, json[QString("decimal")]);
    m_decimal_isSet = !json[QString("decimal")].isNull() && m_decimal_isValid;

    m_fractional_isValid = ::OpenAPI::fromJsonValue(m_fractional, json[QString("fractional")]);
    m_fractional_isSet = !json[QString("fractional")].isNull() && m_fractional_isValid;
}

QString OAIPriceFormatted::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceFormatted::asJsonObject() const {
    QJsonObject obj;
    if (m_american_isSet) {
        obj.insert(QString("american"), ::OpenAPI::toJsonValue(m_american));
    }
    if (m_decimal_isSet) {
        obj.insert(QString("decimal"), ::OpenAPI::toJsonValue(m_decimal));
    }
    if (m_fractional_isSet) {
        obj.insert(QString("fractional"), ::OpenAPI::toJsonValue(m_fractional));
    }
    return obj;
}

QString OAIPriceFormatted::getAmerican() const {
    return m_american;
}
void OAIPriceFormatted::setAmerican(const QString &american) {
    m_american = american;
    m_american_isSet = true;
}

bool OAIPriceFormatted::is_american_Set() const{
    return m_american_isSet;
}

bool OAIPriceFormatted::is_american_Valid() const{
    return m_american_isValid;
}

double OAIPriceFormatted::getDecimal() const {
    return m_decimal;
}
void OAIPriceFormatted::setDecimal(const double &decimal) {
    m_decimal = decimal;
    m_decimal_isSet = true;
}

bool OAIPriceFormatted::is_decimal_Set() const{
    return m_decimal_isSet;
}

bool OAIPriceFormatted::is_decimal_Valid() const{
    return m_decimal_isValid;
}

QString OAIPriceFormatted::getFractional() const {
    return m_fractional;
}
void OAIPriceFormatted::setFractional(const QString &fractional) {
    m_fractional = fractional;
    m_fractional_isSet = true;
}

bool OAIPriceFormatted::is_fractional_Set() const{
    return m_fractional_isSet;
}

bool OAIPriceFormatted::is_fractional_Valid() const{
    return m_fractional_isValid;
}

bool OAIPriceFormatted::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_american_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fractional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceFormatted::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
