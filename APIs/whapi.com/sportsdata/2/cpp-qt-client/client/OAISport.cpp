/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISport::OAISport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISport::OAISport() {
    this->initializeModel();
}

OAISport::~OAISport() {}

void OAISport::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISport::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISport::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISport::getId() const {
    return m_id;
}
void OAISport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISport::is_id_Set() const{
    return m_id_isSet;
}

bool OAISport::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISport::isIsPublished() const {
    return m_is_published;
}
void OAISport::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAISport::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAISport::is_is_published_Valid() const{
    return m_is_published_isValid;
}

QString OAISport::getName() const {
    return m_name;
}
void OAISport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISport::is_name_Set() const{
    return m_name_isSet;
}

bool OAISport::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
