/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarket::OAIMarket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarket::OAIMarket() {
    this->initializeModel();
}

OAIMarket::~OAIMarket() {}

void OAIMarket::initializeModel() {

    m_antepost_market_isSet = false;
    m_antepost_market_isValid = false;

    m_best_odds_guaranteed_isSet = false;
    m_best_odds_guaranteed_isValid = false;

    m_bet_in_running_delay_isSet = false;
    m_bet_in_running_delay_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_displayed_isSet = false;
    m_displayed_isValid = false;

    m_each_way_isSet = false;
    m_each_way_isValid = false;

    m_each_way_factor_den_isSet = false;
    m_each_way_factor_den_isValid = false;

    m_each_way_factor_num_isSet = false;
    m_each_way_factor_num_isValid = false;

    m_each_way_places_isSet = false;
    m_each_way_places_isValid = false;

    m_early_price_available_isSet = false;
    m_early_price_available_isValid = false;

    m_fc_available_isSet = false;
    m_fc_available_isValid = false;

    m_first_four_available_isSet = false;
    m_first_four_available_isValid = false;

    m_first_price_available_isSet = false;
    m_first_price_available_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_hcap_makeup_isSet = false;
    m_hcap_makeup_isValid = false;

    m_hcap_value_isSet = false;
    m_hcap_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_in_play_market_isSet = false;
    m_is_in_play_market_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_live_price_available_isSet = false;
    m_live_price_available_isValid = false;

    m_market_group_collection_id_isSet = false;
    m_market_group_collection_id_isValid = false;

    m_market_group_id_isSet = false;
    m_market_group_id_isValid = false;

    m_market_group_name_isSet = false;
    m_market_group_name_isValid = false;

    m_market_sort_isSet = false;
    m_market_sort_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_quinella_available_isSet = false;
    m_quinella_available_isValid = false;

    m_selections_isSet = false;
    m_selections_isValid = false;

    m_settled_isSet = false;
    m_settled_isValid = false;

    m_starting_price_available_isSet = false;
    m_starting_price_available_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tc_available_isSet = false;
    m_tc_available_isValid = false;
}

void OAIMarket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarket::fromJsonObject(QJsonObject json) {

    m_antepost_market_isValid = ::OpenAPI::fromJsonValue(m_antepost_market, json[QString("antepostMarket")]);
    m_antepost_market_isSet = !json[QString("antepostMarket")].isNull() && m_antepost_market_isValid;

    m_best_odds_guaranteed_isValid = ::OpenAPI::fromJsonValue(m_best_odds_guaranteed, json[QString("bestOddsGuaranteed")]);
    m_best_odds_guaranteed_isSet = !json[QString("bestOddsGuaranteed")].isNull() && m_best_odds_guaranteed_isValid;

    m_bet_in_running_delay_isValid = ::OpenAPI::fromJsonValue(m_bet_in_running_delay, json[QString("betInRunningDelay")]);
    m_bet_in_running_delay_isSet = !json[QString("betInRunningDelay")].isNull() && m_bet_in_running_delay_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_displayed_isValid = ::OpenAPI::fromJsonValue(m_displayed, json[QString("displayed")]);
    m_displayed_isSet = !json[QString("displayed")].isNull() && m_displayed_isValid;

    m_each_way_isValid = ::OpenAPI::fromJsonValue(m_each_way, json[QString("eachWay")]);
    m_each_way_isSet = !json[QString("eachWay")].isNull() && m_each_way_isValid;

    m_each_way_factor_den_isValid = ::OpenAPI::fromJsonValue(m_each_way_factor_den, json[QString("eachWayFactorDen")]);
    m_each_way_factor_den_isSet = !json[QString("eachWayFactorDen")].isNull() && m_each_way_factor_den_isValid;

    m_each_way_factor_num_isValid = ::OpenAPI::fromJsonValue(m_each_way_factor_num, json[QString("eachWayFactorNum")]);
    m_each_way_factor_num_isSet = !json[QString("eachWayFactorNum")].isNull() && m_each_way_factor_num_isValid;

    m_each_way_places_isValid = ::OpenAPI::fromJsonValue(m_each_way_places, json[QString("eachWayPlaces")]);
    m_each_way_places_isSet = !json[QString("eachWayPlaces")].isNull() && m_each_way_places_isValid;

    m_early_price_available_isValid = ::OpenAPI::fromJsonValue(m_early_price_available, json[QString("earlyPriceAvailable")]);
    m_early_price_available_isSet = !json[QString("earlyPriceAvailable")].isNull() && m_early_price_available_isValid;

    m_fc_available_isValid = ::OpenAPI::fromJsonValue(m_fc_available, json[QString("fcAvailable")]);
    m_fc_available_isSet = !json[QString("fcAvailable")].isNull() && m_fc_available_isValid;

    m_first_four_available_isValid = ::OpenAPI::fromJsonValue(m_first_four_available, json[QString("firstFourAvailable")]);
    m_first_four_available_isSet = !json[QString("firstFourAvailable")].isNull() && m_first_four_available_isValid;

    m_first_price_available_isValid = ::OpenAPI::fromJsonValue(m_first_price_available, json[QString("firstPriceAvailable")]);
    m_first_price_available_isSet = !json[QString("firstPriceAvailable")].isNull() && m_first_price_available_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_hcap_makeup_isValid = ::OpenAPI::fromJsonValue(m_hcap_makeup, json[QString("hcapMakeup")]);
    m_hcap_makeup_isSet = !json[QString("hcapMakeup")].isNull() && m_hcap_makeup_isValid;

    m_hcap_value_isValid = ::OpenAPI::fromJsonValue(m_hcap_value, json[QString("hcapValue")]);
    m_hcap_value_isSet = !json[QString("hcapValue")].isNull() && m_hcap_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_in_play_market_isValid = ::OpenAPI::fromJsonValue(m_is_in_play_market, json[QString("isInPlayMarket")]);
    m_is_in_play_market_isSet = !json[QString("isInPlayMarket")].isNull() && m_is_in_play_market_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_live_price_available_isValid = ::OpenAPI::fromJsonValue(m_live_price_available, json[QString("livePriceAvailable")]);
    m_live_price_available_isSet = !json[QString("livePriceAvailable")].isNull() && m_live_price_available_isValid;

    m_market_group_collection_id_isValid = ::OpenAPI::fromJsonValue(m_market_group_collection_id, json[QString("marketGroupCollectionId")]);
    m_market_group_collection_id_isSet = !json[QString("marketGroupCollectionId")].isNull() && m_market_group_collection_id_isValid;

    m_market_group_id_isValid = ::OpenAPI::fromJsonValue(m_market_group_id, json[QString("marketGroupId")]);
    m_market_group_id_isSet = !json[QString("marketGroupId")].isNull() && m_market_group_id_isValid;

    m_market_group_name_isValid = ::OpenAPI::fromJsonValue(m_market_group_name, json[QString("marketGroupName")]);
    m_market_group_name_isSet = !json[QString("marketGroupName")].isNull() && m_market_group_name_isValid;

    m_market_sort_isValid = ::OpenAPI::fromJsonValue(m_market_sort, json[QString("marketSort")]);
    m_market_sort_isSet = !json[QString("marketSort")].isNull() && m_market_sort_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parentIds")]);
    m_parent_ids_isSet = !json[QString("parentIds")].isNull() && m_parent_ids_isValid;

    m_quinella_available_isValid = ::OpenAPI::fromJsonValue(m_quinella_available, json[QString("quinellaAvailable")]);
    m_quinella_available_isSet = !json[QString("quinellaAvailable")].isNull() && m_quinella_available_isValid;

    m_selections_isValid = ::OpenAPI::fromJsonValue(m_selections, json[QString("selections")]);
    m_selections_isSet = !json[QString("selections")].isNull() && m_selections_isValid;

    m_settled_isValid = ::OpenAPI::fromJsonValue(m_settled, json[QString("settled")]);
    m_settled_isSet = !json[QString("settled")].isNull() && m_settled_isValid;

    m_starting_price_available_isValid = ::OpenAPI::fromJsonValue(m_starting_price_available, json[QString("startingPriceAvailable")]);
    m_starting_price_available_isSet = !json[QString("startingPriceAvailable")].isNull() && m_starting_price_available_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tc_available_isValid = ::OpenAPI::fromJsonValue(m_tc_available, json[QString("tcAvailable")]);
    m_tc_available_isSet = !json[QString("tcAvailable")].isNull() && m_tc_available_isValid;
}

QString OAIMarket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarket::asJsonObject() const {
    QJsonObject obj;
    if (m_antepost_market_isSet) {
        obj.insert(QString("antepostMarket"), ::OpenAPI::toJsonValue(m_antepost_market));
    }
    if (m_best_odds_guaranteed_isSet) {
        obj.insert(QString("bestOddsGuaranteed"), ::OpenAPI::toJsonValue(m_best_odds_guaranteed));
    }
    if (m_bet_in_running_delay_isSet) {
        obj.insert(QString("betInRunningDelay"), ::OpenAPI::toJsonValue(m_bet_in_running_delay));
    }
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_displayed_isSet) {
        obj.insert(QString("displayed"), ::OpenAPI::toJsonValue(m_displayed));
    }
    if (m_each_way_isSet) {
        obj.insert(QString("eachWay"), ::OpenAPI::toJsonValue(m_each_way));
    }
    if (m_each_way_factor_den_isSet) {
        obj.insert(QString("eachWayFactorDen"), ::OpenAPI::toJsonValue(m_each_way_factor_den));
    }
    if (m_each_way_factor_num_isSet) {
        obj.insert(QString("eachWayFactorNum"), ::OpenAPI::toJsonValue(m_each_way_factor_num));
    }
    if (m_each_way_places_isSet) {
        obj.insert(QString("eachWayPlaces"), ::OpenAPI::toJsonValue(m_each_way_places));
    }
    if (m_early_price_available_isSet) {
        obj.insert(QString("earlyPriceAvailable"), ::OpenAPI::toJsonValue(m_early_price_available));
    }
    if (m_fc_available_isSet) {
        obj.insert(QString("fcAvailable"), ::OpenAPI::toJsonValue(m_fc_available));
    }
    if (m_first_four_available_isSet) {
        obj.insert(QString("firstFourAvailable"), ::OpenAPI::toJsonValue(m_first_four_available));
    }
    if (m_first_price_available_isSet) {
        obj.insert(QString("firstPriceAvailable"), ::OpenAPI::toJsonValue(m_first_price_available));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_hcap_makeup_isSet) {
        obj.insert(QString("hcapMakeup"), ::OpenAPI::toJsonValue(m_hcap_makeup));
    }
    if (m_hcap_value_isSet) {
        obj.insert(QString("hcapValue"), ::OpenAPI::toJsonValue(m_hcap_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_in_play_market_isSet) {
        obj.insert(QString("isInPlayMarket"), ::OpenAPI::toJsonValue(m_is_in_play_market));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_live_price_available_isSet) {
        obj.insert(QString("livePriceAvailable"), ::OpenAPI::toJsonValue(m_live_price_available));
    }
    if (m_market_group_collection_id_isSet) {
        obj.insert(QString("marketGroupCollectionId"), ::OpenAPI::toJsonValue(m_market_group_collection_id));
    }
    if (m_market_group_id_isSet) {
        obj.insert(QString("marketGroupId"), ::OpenAPI::toJsonValue(m_market_group_id));
    }
    if (m_market_group_name_isSet) {
        obj.insert(QString("marketGroupName"), ::OpenAPI::toJsonValue(m_market_group_name));
    }
    if (m_market_sort_isSet) {
        obj.insert(QString("marketSort"), ::OpenAPI::toJsonValue(m_market_sort));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("parentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_quinella_available_isSet) {
        obj.insert(QString("quinellaAvailable"), ::OpenAPI::toJsonValue(m_quinella_available));
    }
    if (m_selections.size() > 0) {
        obj.insert(QString("selections"), ::OpenAPI::toJsonValue(m_selections));
    }
    if (m_settled_isSet) {
        obj.insert(QString("settled"), ::OpenAPI::toJsonValue(m_settled));
    }
    if (m_starting_price_available_isSet) {
        obj.insert(QString("startingPriceAvailable"), ::OpenAPI::toJsonValue(m_starting_price_available));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tc_available_isSet) {
        obj.insert(QString("tcAvailable"), ::OpenAPI::toJsonValue(m_tc_available));
    }
    return obj;
}

bool OAIMarket::isAntepostMarket() const {
    return m_antepost_market;
}
void OAIMarket::setAntepostMarket(const bool &antepost_market) {
    m_antepost_market = antepost_market;
    m_antepost_market_isSet = true;
}

bool OAIMarket::is_antepost_market_Set() const{
    return m_antepost_market_isSet;
}

bool OAIMarket::is_antepost_market_Valid() const{
    return m_antepost_market_isValid;
}

bool OAIMarket::isBestOddsGuaranteed() const {
    return m_best_odds_guaranteed;
}
void OAIMarket::setBestOddsGuaranteed(const bool &best_odds_guaranteed) {
    m_best_odds_guaranteed = best_odds_guaranteed;
    m_best_odds_guaranteed_isSet = true;
}

bool OAIMarket::is_best_odds_guaranteed_Set() const{
    return m_best_odds_guaranteed_isSet;
}

bool OAIMarket::is_best_odds_guaranteed_Valid() const{
    return m_best_odds_guaranteed_isValid;
}

double OAIMarket::getBetInRunningDelay() const {
    return m_bet_in_running_delay;
}
void OAIMarket::setBetInRunningDelay(const double &bet_in_running_delay) {
    m_bet_in_running_delay = bet_in_running_delay;
    m_bet_in_running_delay_isSet = true;
}

bool OAIMarket::is_bet_in_running_delay_Set() const{
    return m_bet_in_running_delay_isSet;
}

bool OAIMarket::is_bet_in_running_delay_Valid() const{
    return m_bet_in_running_delay_isValid;
}

QString OAIMarket::getChannels() const {
    return m_channels;
}
void OAIMarket::setChannels(const QString &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIMarket::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIMarket::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIMarket::getDescription() const {
    return m_description;
}
void OAIMarket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMarket::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMarket::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIMarket::isDisplayed() const {
    return m_displayed;
}
void OAIMarket::setDisplayed(const bool &displayed) {
    m_displayed = displayed;
    m_displayed_isSet = true;
}

bool OAIMarket::is_displayed_Set() const{
    return m_displayed_isSet;
}

bool OAIMarket::is_displayed_Valid() const{
    return m_displayed_isValid;
}

bool OAIMarket::isEachWay() const {
    return m_each_way;
}
void OAIMarket::setEachWay(const bool &each_way) {
    m_each_way = each_way;
    m_each_way_isSet = true;
}

bool OAIMarket::is_each_way_Set() const{
    return m_each_way_isSet;
}

bool OAIMarket::is_each_way_Valid() const{
    return m_each_way_isValid;
}

double OAIMarket::getEachWayFactorDen() const {
    return m_each_way_factor_den;
}
void OAIMarket::setEachWayFactorDen(const double &each_way_factor_den) {
    m_each_way_factor_den = each_way_factor_den;
    m_each_way_factor_den_isSet = true;
}

bool OAIMarket::is_each_way_factor_den_Set() const{
    return m_each_way_factor_den_isSet;
}

bool OAIMarket::is_each_way_factor_den_Valid() const{
    return m_each_way_factor_den_isValid;
}

double OAIMarket::getEachWayFactorNum() const {
    return m_each_way_factor_num;
}
void OAIMarket::setEachWayFactorNum(const double &each_way_factor_num) {
    m_each_way_factor_num = each_way_factor_num;
    m_each_way_factor_num_isSet = true;
}

bool OAIMarket::is_each_way_factor_num_Set() const{
    return m_each_way_factor_num_isSet;
}

bool OAIMarket::is_each_way_factor_num_Valid() const{
    return m_each_way_factor_num_isValid;
}

double OAIMarket::getEachWayPlaces() const {
    return m_each_way_places;
}
void OAIMarket::setEachWayPlaces(const double &each_way_places) {
    m_each_way_places = each_way_places;
    m_each_way_places_isSet = true;
}

bool OAIMarket::is_each_way_places_Set() const{
    return m_each_way_places_isSet;
}

bool OAIMarket::is_each_way_places_Valid() const{
    return m_each_way_places_isValid;
}

bool OAIMarket::isEarlyPriceAvailable() const {
    return m_early_price_available;
}
void OAIMarket::setEarlyPriceAvailable(const bool &early_price_available) {
    m_early_price_available = early_price_available;
    m_early_price_available_isSet = true;
}

bool OAIMarket::is_early_price_available_Set() const{
    return m_early_price_available_isSet;
}

bool OAIMarket::is_early_price_available_Valid() const{
    return m_early_price_available_isValid;
}

bool OAIMarket::isFcAvailable() const {
    return m_fc_available;
}
void OAIMarket::setFcAvailable(const bool &fc_available) {
    m_fc_available = fc_available;
    m_fc_available_isSet = true;
}

bool OAIMarket::is_fc_available_Set() const{
    return m_fc_available_isSet;
}

bool OAIMarket::is_fc_available_Valid() const{
    return m_fc_available_isValid;
}

bool OAIMarket::isFirstFourAvailable() const {
    return m_first_four_available;
}
void OAIMarket::setFirstFourAvailable(const bool &first_four_available) {
    m_first_four_available = first_four_available;
    m_first_four_available_isSet = true;
}

bool OAIMarket::is_first_four_available_Set() const{
    return m_first_four_available_isSet;
}

bool OAIMarket::is_first_four_available_Valid() const{
    return m_first_four_available_isValid;
}

bool OAIMarket::isFirstPriceAvailable() const {
    return m_first_price_available;
}
void OAIMarket::setFirstPriceAvailable(const bool &first_price_available) {
    m_first_price_available = first_price_available;
    m_first_price_available_isSet = true;
}

bool OAIMarket::is_first_price_available_Set() const{
    return m_first_price_available_isSet;
}

bool OAIMarket::is_first_price_available_Valid() const{
    return m_first_price_available_isValid;
}

QString OAIMarket::getFlags() const {
    return m_flags;
}
void OAIMarket::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIMarket::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIMarket::is_flags_Valid() const{
    return m_flags_isValid;
}

double OAIMarket::getHcapMakeup() const {
    return m_hcap_makeup;
}
void OAIMarket::setHcapMakeup(const double &hcap_makeup) {
    m_hcap_makeup = hcap_makeup;
    m_hcap_makeup_isSet = true;
}

bool OAIMarket::is_hcap_makeup_Set() const{
    return m_hcap_makeup_isSet;
}

bool OAIMarket::is_hcap_makeup_Valid() const{
    return m_hcap_makeup_isValid;
}

double OAIMarket::getHcapValue() const {
    return m_hcap_value;
}
void OAIMarket::setHcapValue(const double &hcap_value) {
    m_hcap_value = hcap_value;
    m_hcap_value_isSet = true;
}

bool OAIMarket::is_hcap_value_Set() const{
    return m_hcap_value_isSet;
}

bool OAIMarket::is_hcap_value_Valid() const{
    return m_hcap_value_isValid;
}

QString OAIMarket::getId() const {
    return m_id;
}
void OAIMarket::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMarket::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMarket::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMarket::isIsInPlayMarket() const {
    return m_is_in_play_market;
}
void OAIMarket::setIsInPlayMarket(const bool &is_in_play_market) {
    m_is_in_play_market = is_in_play_market;
    m_is_in_play_market_isSet = true;
}

bool OAIMarket::is_is_in_play_market_Set() const{
    return m_is_in_play_market_isSet;
}

bool OAIMarket::is_is_in_play_market_Valid() const{
    return m_is_in_play_market_isValid;
}

bool OAIMarket::isIsPublished() const {
    return m_is_published;
}
void OAIMarket::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAIMarket::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAIMarket::is_is_published_Valid() const{
    return m_is_published_isValid;
}

bool OAIMarket::isLivePriceAvailable() const {
    return m_live_price_available;
}
void OAIMarket::setLivePriceAvailable(const bool &live_price_available) {
    m_live_price_available = live_price_available;
    m_live_price_available_isSet = true;
}

bool OAIMarket::is_live_price_available_Set() const{
    return m_live_price_available_isSet;
}

bool OAIMarket::is_live_price_available_Valid() const{
    return m_live_price_available_isValid;
}

QString OAIMarket::getMarketGroupCollectionId() const {
    return m_market_group_collection_id;
}
void OAIMarket::setMarketGroupCollectionId(const QString &market_group_collection_id) {
    m_market_group_collection_id = market_group_collection_id;
    m_market_group_collection_id_isSet = true;
}

bool OAIMarket::is_market_group_collection_id_Set() const{
    return m_market_group_collection_id_isSet;
}

bool OAIMarket::is_market_group_collection_id_Valid() const{
    return m_market_group_collection_id_isValid;
}

QString OAIMarket::getMarketGroupId() const {
    return m_market_group_id;
}
void OAIMarket::setMarketGroupId(const QString &market_group_id) {
    m_market_group_id = market_group_id;
    m_market_group_id_isSet = true;
}

bool OAIMarket::is_market_group_id_Set() const{
    return m_market_group_id_isSet;
}

bool OAIMarket::is_market_group_id_Valid() const{
    return m_market_group_id_isValid;
}

QString OAIMarket::getMarketGroupName() const {
    return m_market_group_name;
}
void OAIMarket::setMarketGroupName(const QString &market_group_name) {
    m_market_group_name = market_group_name;
    m_market_group_name_isSet = true;
}

bool OAIMarket::is_market_group_name_Set() const{
    return m_market_group_name_isSet;
}

bool OAIMarket::is_market_group_name_Valid() const{
    return m_market_group_name_isValid;
}

QString OAIMarket::getMarketSort() const {
    return m_market_sort;
}
void OAIMarket::setMarketSort(const QString &market_sort) {
    m_market_sort = market_sort;
    m_market_sort_isSet = true;
}

bool OAIMarket::is_market_sort_Set() const{
    return m_market_sort_isSet;
}

bool OAIMarket::is_market_sort_Valid() const{
    return m_market_sort_isValid;
}

QString OAIMarket::getName() const {
    return m_name;
}
void OAIMarket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarket::is_name_Valid() const{
    return m_name_isValid;
}

double OAIMarket::getOrder() const {
    return m_order;
}
void OAIMarket::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIMarket::is_order_Set() const{
    return m_order_isSet;
}

bool OAIMarket::is_order_Valid() const{
    return m_order_isValid;
}

QList<QString> OAIMarket::getParentIds() const {
    return m_parent_ids;
}
void OAIMarket::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAIMarket::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAIMarket::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

bool OAIMarket::isQuinellaAvailable() const {
    return m_quinella_available;
}
void OAIMarket::setQuinellaAvailable(const bool &quinella_available) {
    m_quinella_available = quinella_available;
    m_quinella_available_isSet = true;
}

bool OAIMarket::is_quinella_available_Set() const{
    return m_quinella_available_isSet;
}

bool OAIMarket::is_quinella_available_Valid() const{
    return m_quinella_available_isValid;
}

QList<OAISelection> OAIMarket::getSelections() const {
    return m_selections;
}
void OAIMarket::setSelections(const QList<OAISelection> &selections) {
    m_selections = selections;
    m_selections_isSet = true;
}

bool OAIMarket::is_selections_Set() const{
    return m_selections_isSet;
}

bool OAIMarket::is_selections_Valid() const{
    return m_selections_isValid;
}

bool OAIMarket::isSettled() const {
    return m_settled;
}
void OAIMarket::setSettled(const bool &settled) {
    m_settled = settled;
    m_settled_isSet = true;
}

bool OAIMarket::is_settled_Set() const{
    return m_settled_isSet;
}

bool OAIMarket::is_settled_Valid() const{
    return m_settled_isValid;
}

bool OAIMarket::isStartingPriceAvailable() const {
    return m_starting_price_available;
}
void OAIMarket::setStartingPriceAvailable(const bool &starting_price_available) {
    m_starting_price_available = starting_price_available;
    m_starting_price_available_isSet = true;
}

bool OAIMarket::is_starting_price_available_Set() const{
    return m_starting_price_available_isSet;
}

bool OAIMarket::is_starting_price_available_Valid() const{
    return m_starting_price_available_isValid;
}

QString OAIMarket::getStatus() const {
    return m_status;
}
void OAIMarket::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMarket::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMarket::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMarket::isTcAvailable() const {
    return m_tc_available;
}
void OAIMarket::setTcAvailable(const bool &tc_available) {
    m_tc_available = tc_available;
    m_tc_available_isSet = true;
}

bool OAIMarket::is_tc_available_Set() const{
    return m_tc_available_isSet;
}

bool OAIMarket::is_tc_available_Valid() const{
    return m_tc_available_isValid;
}

bool OAIMarket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antepost_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_odds_guaranteed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bet_in_running_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_factor_den_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_factor_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_each_way_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_early_price_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fc_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_four_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_price_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hcap_makeup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hcap_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_play_market_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_price_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_group_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quinella_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_price_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tc_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarket::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
