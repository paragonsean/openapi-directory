/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMarket.h
 *
 * 
 */

#ifndef OAIMarket_H
#define OAIMarket_H

#include <QJsonObject>

#include "OAISelection.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISelection;

class OAIMarket : public OAIObject {
public:
    OAIMarket();
    OAIMarket(QString json);
    ~OAIMarket() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAntepostMarket() const;
    void setAntepostMarket(const bool &antepost_market);
    bool is_antepost_market_Set() const;
    bool is_antepost_market_Valid() const;

    bool isBestOddsGuaranteed() const;
    void setBestOddsGuaranteed(const bool &best_odds_guaranteed);
    bool is_best_odds_guaranteed_Set() const;
    bool is_best_odds_guaranteed_Valid() const;

    double getBetInRunningDelay() const;
    void setBetInRunningDelay(const double &bet_in_running_delay);
    bool is_bet_in_running_delay_Set() const;
    bool is_bet_in_running_delay_Valid() const;

    QString getChannels() const;
    void setChannels(const QString &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisplayed() const;
    void setDisplayed(const bool &displayed);
    bool is_displayed_Set() const;
    bool is_displayed_Valid() const;

    bool isEachWay() const;
    void setEachWay(const bool &each_way);
    bool is_each_way_Set() const;
    bool is_each_way_Valid() const;

    double getEachWayFactorDen() const;
    void setEachWayFactorDen(const double &each_way_factor_den);
    bool is_each_way_factor_den_Set() const;
    bool is_each_way_factor_den_Valid() const;

    double getEachWayFactorNum() const;
    void setEachWayFactorNum(const double &each_way_factor_num);
    bool is_each_way_factor_num_Set() const;
    bool is_each_way_factor_num_Valid() const;

    double getEachWayPlaces() const;
    void setEachWayPlaces(const double &each_way_places);
    bool is_each_way_places_Set() const;
    bool is_each_way_places_Valid() const;

    bool isEarlyPriceAvailable() const;
    void setEarlyPriceAvailable(const bool &early_price_available);
    bool is_early_price_available_Set() const;
    bool is_early_price_available_Valid() const;

    bool isFcAvailable() const;
    void setFcAvailable(const bool &fc_available);
    bool is_fc_available_Set() const;
    bool is_fc_available_Valid() const;

    bool isFirstFourAvailable() const;
    void setFirstFourAvailable(const bool &first_four_available);
    bool is_first_four_available_Set() const;
    bool is_first_four_available_Valid() const;

    bool isFirstPriceAvailable() const;
    void setFirstPriceAvailable(const bool &first_price_available);
    bool is_first_price_available_Set() const;
    bool is_first_price_available_Valid() const;

    QString getFlags() const;
    void setFlags(const QString &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    double getHcapMakeup() const;
    void setHcapMakeup(const double &hcap_makeup);
    bool is_hcap_makeup_Set() const;
    bool is_hcap_makeup_Valid() const;

    double getHcapValue() const;
    void setHcapValue(const double &hcap_value);
    bool is_hcap_value_Set() const;
    bool is_hcap_value_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsInPlayMarket() const;
    void setIsInPlayMarket(const bool &is_in_play_market);
    bool is_is_in_play_market_Set() const;
    bool is_is_in_play_market_Valid() const;

    bool isIsPublished() const;
    void setIsPublished(const bool &is_published);
    bool is_is_published_Set() const;
    bool is_is_published_Valid() const;

    bool isLivePriceAvailable() const;
    void setLivePriceAvailable(const bool &live_price_available);
    bool is_live_price_available_Set() const;
    bool is_live_price_available_Valid() const;

    QString getMarketGroupCollectionId() const;
    void setMarketGroupCollectionId(const QString &market_group_collection_id);
    bool is_market_group_collection_id_Set() const;
    bool is_market_group_collection_id_Valid() const;

    QString getMarketGroupId() const;
    void setMarketGroupId(const QString &market_group_id);
    bool is_market_group_id_Set() const;
    bool is_market_group_id_Valid() const;

    QString getMarketGroupName() const;
    void setMarketGroupName(const QString &market_group_name);
    bool is_market_group_name_Set() const;
    bool is_market_group_name_Valid() const;

    QString getMarketSort() const;
    void setMarketSort(const QString &market_sort);
    bool is_market_sort_Set() const;
    bool is_market_sort_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getOrder() const;
    void setOrder(const double &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<QString> getParentIds() const;
    void setParentIds(const QList<QString> &parent_ids);
    bool is_parent_ids_Set() const;
    bool is_parent_ids_Valid() const;

    bool isQuinellaAvailable() const;
    void setQuinellaAvailable(const bool &quinella_available);
    bool is_quinella_available_Set() const;
    bool is_quinella_available_Valid() const;

    QList<OAISelection> getSelections() const;
    void setSelections(const QList<OAISelection> &selections);
    bool is_selections_Set() const;
    bool is_selections_Valid() const;

    bool isSettled() const;
    void setSettled(const bool &settled);
    bool is_settled_Set() const;
    bool is_settled_Valid() const;

    bool isStartingPriceAvailable() const;
    void setStartingPriceAvailable(const bool &starting_price_available);
    bool is_starting_price_available_Set() const;
    bool is_starting_price_available_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isTcAvailable() const;
    void setTcAvailable(const bool &tc_available);
    bool is_tc_available_Set() const;
    bool is_tc_available_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_antepost_market;
    bool m_antepost_market_isSet;
    bool m_antepost_market_isValid;

    bool m_best_odds_guaranteed;
    bool m_best_odds_guaranteed_isSet;
    bool m_best_odds_guaranteed_isValid;

    double m_bet_in_running_delay;
    bool m_bet_in_running_delay_isSet;
    bool m_bet_in_running_delay_isValid;

    QString m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_displayed;
    bool m_displayed_isSet;
    bool m_displayed_isValid;

    bool m_each_way;
    bool m_each_way_isSet;
    bool m_each_way_isValid;

    double m_each_way_factor_den;
    bool m_each_way_factor_den_isSet;
    bool m_each_way_factor_den_isValid;

    double m_each_way_factor_num;
    bool m_each_way_factor_num_isSet;
    bool m_each_way_factor_num_isValid;

    double m_each_way_places;
    bool m_each_way_places_isSet;
    bool m_each_way_places_isValid;

    bool m_early_price_available;
    bool m_early_price_available_isSet;
    bool m_early_price_available_isValid;

    bool m_fc_available;
    bool m_fc_available_isSet;
    bool m_fc_available_isValid;

    bool m_first_four_available;
    bool m_first_four_available_isSet;
    bool m_first_four_available_isValid;

    bool m_first_price_available;
    bool m_first_price_available_isSet;
    bool m_first_price_available_isValid;

    QString m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    double m_hcap_makeup;
    bool m_hcap_makeup_isSet;
    bool m_hcap_makeup_isValid;

    double m_hcap_value;
    bool m_hcap_value_isSet;
    bool m_hcap_value_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_in_play_market;
    bool m_is_in_play_market_isSet;
    bool m_is_in_play_market_isValid;

    bool m_is_published;
    bool m_is_published_isSet;
    bool m_is_published_isValid;

    bool m_live_price_available;
    bool m_live_price_available_isSet;
    bool m_live_price_available_isValid;

    QString m_market_group_collection_id;
    bool m_market_group_collection_id_isSet;
    bool m_market_group_collection_id_isValid;

    QString m_market_group_id;
    bool m_market_group_id_isSet;
    bool m_market_group_id_isValid;

    QString m_market_group_name;
    bool m_market_group_name_isSet;
    bool m_market_group_name_isValid;

    QString m_market_sort;
    bool m_market_sort_isSet;
    bool m_market_sort_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<QString> m_parent_ids;
    bool m_parent_ids_isSet;
    bool m_parent_ids_isValid;

    bool m_quinella_available;
    bool m_quinella_available_isSet;
    bool m_quinella_available_isValid;

    QList<OAISelection> m_selections;
    bool m_selections_isSet;
    bool m_selections_isValid;

    bool m_settled;
    bool m_settled_isSet;
    bool m_settled_isValid;

    bool m_starting_price_available;
    bool m_starting_price_available_isSet;
    bool m_starting_price_available_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_tc_available;
    bool m_tc_available_isSet;
    bool m_tc_available_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMarket)

#endif // OAIMarket_H
