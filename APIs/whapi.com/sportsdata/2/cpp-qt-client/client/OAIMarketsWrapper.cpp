/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketsWrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketsWrapper::OAIMarketsWrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketsWrapper::OAIMarketsWrapper() {
    this->initializeModel();
}

OAIMarketsWrapper::~OAIMarketsWrapper() {}

void OAIMarketsWrapper::initializeModel() {

    m_markets_isSet = false;
    m_markets_isValid = false;
}

void OAIMarketsWrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketsWrapper::fromJsonObject(QJsonObject json) {

    m_markets_isValid = ::OpenAPI::fromJsonValue(m_markets, json[QString("markets")]);
    m_markets_isSet = !json[QString("markets")].isNull() && m_markets_isValid;
}

QString OAIMarketsWrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketsWrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_markets.size() > 0) {
        obj.insert(QString("markets"), ::OpenAPI::toJsonValue(m_markets));
    }
    return obj;
}

QList<OAIMarket> OAIMarketsWrapper::getMarkets() const {
    return m_markets;
}
void OAIMarketsWrapper::setMarkets(const QList<OAIMarket> &markets) {
    m_markets = markets;
    m_markets_isSet = true;
}

bool OAIMarketsWrapper::is_markets_Set() const{
    return m_markets_isSet;
}

bool OAIMarketsWrapper::is_markets_Valid() const{
    return m_markets_isValid;
}

bool OAIMarketsWrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketsWrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
