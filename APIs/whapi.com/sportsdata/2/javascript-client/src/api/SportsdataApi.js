/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClassesWrapper from '../model/ClassesWrapper';
import Competition from '../model/Competition';
import CompetitionsWrapper from '../model/CompetitionsWrapper';
import ErrorsWrapper from '../model/ErrorsWrapper';
import EventsWrapper from '../model/EventsWrapper';
import MarketGroupsWrapper from '../model/MarketGroupsWrapper';
import MarketsWrapper from '../model/MarketsWrapper';
import SelectionsWrapper from '../model/SelectionsWrapper';
import SportsWrapper from '../model/SportsWrapper';
import TopBetsWrapper from '../model/TopBetsWrapper';

/**
* Sportsdata service.
* @module api/SportsdataApi
* @version 2
*/
export default class SportsdataApi {

    /**
    * Constructs a new SportsdataApi. 
    * @alias module:api/SportsdataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getClassesForSport operation.
     * @callback module:api/SportsdataApi~getClassesForSportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassesWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of classes for a given sport id.
     * Retrieves a list of classes for a given sport id.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} sportId The sport id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [displayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [status] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getClassesForSportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassesWrapper}
     */
    getClassesForSport(apiKey, sportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getClassesForSport");
      }
      // verify the required parameter 'sportId' is set
      if (sportId === undefined || sportId === null) {
        throw new Error("Missing the required parameter 'sportId' when calling getClassesForSport");
      }

      let pathParams = {
        'sportId': sportId
      };
      let queryParams = {
        'isPublished': opts['isPublished'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'displayed': opts['displayed'],
        'channel': opts['channel'],
        'status': opts['status'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'culture': opts['culture']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassesWrapper;
      return this.apiClient.callApi(
        '/sports/{sportId}/classes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetition operation.
     * @callback module:api/SportsdataApi~getCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Competition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific competition
     * Retrieves a specific competition
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} competitionId The competition id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Competition}
     */
    getCompetition(apiKey, competitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getCompetition");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling getCompetition");
      }

      let pathParams = {
        'competitionId': competitionId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'culture': opts['culture']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Competition;
      return this.apiClient.callApi(
        '/competitions/{competitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetitionsForClass operation.
     * @callback module:api/SportsdataApi~getCompetitionsForClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of competitions for a given class id.
     * Retrieves a list of competitions for a given class id.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} classId The class id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [displayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [status] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getCompetitionsForClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionsWrapper}
     */
    getCompetitionsForClass(apiKey, classId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getCompetitionsForClass");
      }
      // verify the required parameter 'classId' is set
      if (classId === undefined || classId === null) {
        throw new Error("Missing the required parameter 'classId' when calling getCompetitionsForClass");
      }

      let pathParams = {
        'classId': classId
      };
      let queryParams = {
        'isPublished': opts['isPublished'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'displayed': opts['displayed'],
        'channel': opts['channel'],
        'status': opts['status'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'culture': opts['culture']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetitionsWrapper;
      return this.apiClient.callApi(
        '/classes/{classId}/competitions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetitionsForSport operation.
     * @callback module:api/SportsdataApi~getCompetitionsForSportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of competitions for a given sport id.
     * Retrieves a list of competitions for a given sport id.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} sportId The sport id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [displayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [status] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getCompetitionsForSportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionsWrapper}
     */
    getCompetitionsForSport(apiKey, sportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getCompetitionsForSport");
      }
      // verify the required parameter 'sportId' is set
      if (sportId === undefined || sportId === null) {
        throw new Error("Missing the required parameter 'sportId' when calling getCompetitionsForSport");
      }

      let pathParams = {
        'sportId': sportId
      };
      let queryParams = {
        'isPublished': opts['isPublished'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'displayed': opts['displayed'],
        'channel': opts['channel'],
        'status': opts['status'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'culture': opts['culture']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetitionsWrapper;
      return this.apiClient.callApi(
        '/sports/{sportId}/competitions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/SportsdataApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single event by ID.
     * Retrieves a single event by ID.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} eventId The event ID to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeAllDescendants = false)] Include every descendant in the below heirarchy
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {Boolean} [headlineSummary = false)] Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.
     * @param {Number} [marketCount = 1)] Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
     * @param {Array.<String>} [marketIds] Comma-seaerated list of market IDs to filter by
     * @param {Boolean} [includeEmpty = true)] When declared as false it should exclude markets and events that have no selections / markets
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [marketPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {String} [marketStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [marketDisplayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [marketChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [marketSort] Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} [marketEW] Specify whether to return markets with each way betting or those without
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsWrapper}
     */
    getEvent(apiKey, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getEvent");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEvent");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'includeAllDescendants': opts['includeAllDescendants'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'headlineSummary': opts['headlineSummary'],
        'marketCount': opts['marketCount'],
        'marketIds': this.apiClient.buildCollectionParam(opts['marketIds'], 'csv'),
        'includeEmpty': opts['includeEmpty'],
        'culture': opts['culture'],
        'marketPublished': opts['marketPublished'],
        'marketStatus': opts['marketStatus'],
        'marketDisplayed': opts['marketDisplayed'],
        'marketChannel': opts['marketChannel'],
        'marketSort': opts['marketSort'],
        'marketEW': opts['marketEW'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsWrapper;
      return this.apiClient.callApi(
        '/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/SportsdataApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of events for the provided IDs.
     * Retrieves a list of events for the provided IDs.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] A comma-separated list of selectionIds
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Boolean} [includeAllDescendants = false)] Include every descendant in the below heirarchy
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {Boolean} [settled] Specify wether only settled entities should be returned
     * @param {Boolean} [includeEmpty = true)] When declared as false it should exclude markets and events that have no selections / markets
     * @param {Boolean} [headlineSummary = false)] Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.
     * @param {Number} [marketCount = 1)] Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {Array.<String>} [marketIds] Comma-seaerated list of market IDs to filter by
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [marketPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {String} [marketStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [marketDisplayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [marketChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [marketSort] Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} [marketEW] Specify whether to return markets with each way betting or those without
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsWrapper}
     */
    getEvents(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'isPublished': opts['isPublished'],
        'includeAllDescendants': opts['includeAllDescendants'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'channel': opts['channel'],
        'settled': opts['settled'],
        'includeEmpty': opts['includeEmpty'],
        'headlineSummary': opts['headlineSummary'],
        'marketCount': opts['marketCount'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'marketIds': this.apiClient.buildCollectionParam(opts['marketIds'], 'csv'),
        'culture': opts['culture'],
        'marketPublished': opts['marketPublished'],
        'marketStatus': opts['marketStatus'],
        'marketDisplayed': opts['marketDisplayed'],
        'marketChannel': opts['marketChannel'],
        'marketSort': opts['marketSort'],
        'marketEW': opts['marketEW'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsWrapper;
      return this.apiClient.callApi(
        '/events/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsForClass operation.
     * @callback module:api/SportsdataApi~getEventsForClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of events for a given class id.
     * Retrieves a list of events for a given class id. 'includeAllDescendants' parameter should be accompanied with 'date' filter or one of 'dateFrom' and 'dateTo' filters.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} classId The class id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [displayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {Boolean} [settled] Specify wether only settled entities should be returned
     * @param {Boolean} [includeEmpty = true)] When declared as false it should exclude markets and events that have no selections / markets
     * @param {String} [status] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {Boolean} [headlineSummary = false)] Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.
     * @param {Boolean} [includeAllDescendants = false)] Include every descendant in the below heirarchy
     * @param {Boolean} [isInPlay] Show only events that are in-play
     * @param {Number} [marketCount = 1)] Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
     * @param {String} [date] Return only events for the specified date (yyyy-MM-dd).
     * @param {String} [dateFrom] The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [dateTo] The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [eventSort] Filter event by event sort
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [marketPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {String} [marketStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [marketDisplayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [marketChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [marketSort] Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} [marketEW] Specify whether to return markets with each way betting or those without
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getEventsForClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsWrapper}
     */
    getEventsForClass(apiKey, classId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getEventsForClass");
      }
      // verify the required parameter 'classId' is set
      if (classId === undefined || classId === null) {
        throw new Error("Missing the required parameter 'classId' when calling getEventsForClass");
      }

      let pathParams = {
        'classId': classId
      };
      let queryParams = {
        'isPublished': opts['isPublished'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'displayed': opts['displayed'],
        'channel': opts['channel'],
        'settled': opts['settled'],
        'includeEmpty': opts['includeEmpty'],
        'status': opts['status'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'headlineSummary': opts['headlineSummary'],
        'includeAllDescendants': opts['includeAllDescendants'],
        'isInPlay': opts['isInPlay'],
        'marketCount': opts['marketCount'],
        'date': opts['date'],
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'eventSort': opts['eventSort'],
        'culture': opts['culture'],
        'marketPublished': opts['marketPublished'],
        'marketStatus': opts['marketStatus'],
        'marketDisplayed': opts['marketDisplayed'],
        'marketChannel': opts['marketChannel'],
        'marketSort': opts['marketSort'],
        'marketEW': opts['marketEW'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsWrapper;
      return this.apiClient.callApi(
        '/classes/{classId}/events/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsForCompetition operation.
     * @callback module:api/SportsdataApi~getEventsForCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of events for a given competition id.
     * Retrieves a list of events for a given competition id. 'headlineSummary' and includeAllDescendants parameters should be accompanied with 'date' filter or one of 'dateFrom' and 'dateTo' filters.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} competitionId The competition id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [displayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [channel] Specify a channel filter and only results from that channel will be returned
     * @param {Boolean} [settled] Specify wether only settled entities should be returned
     * @param {Boolean} [includeEmpty = true)] When declared as false it should exclude markets and events that have no selections / markets
     * @param {String} [status] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {Boolean} [headlineSummary = false)] Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.
     * @param {Boolean} [includeAllDescendants = false)] Include every descendant in the below heirarchy
     * @param {Boolean} [isInPlay] Show only events that are in-play
     * @param {Number} [marketCount = 1)] Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
     * @param {String} [date] Return only events for the specified date (yyyy-MM-dd).
     * @param {String} [dateFrom] The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [dateTo] The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss)
     * @param {String} [marketGroupId] Filter by marketGroupId (e.g. OB_MG1276585).
     * @param {String} [eventSort] Filter event by event sort
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [marketPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {String} [marketStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [marketDisplayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [marketChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [marketSort] Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} [marketEW] Specify whether to return markets with each way betting or those without
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getEventsForCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsWrapper}
     */
    getEventsForCompetition(apiKey, competitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getEventsForCompetition");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling getEventsForCompetition");
      }

      let pathParams = {
        'competitionId': competitionId
      };
      let queryParams = {
        'isPublished': opts['isPublished'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'displayed': opts['displayed'],
        'channel': opts['channel'],
        'settled': opts['settled'],
        'includeEmpty': opts['includeEmpty'],
        'status': opts['status'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'headlineSummary': opts['headlineSummary'],
        'includeAllDescendants': opts['includeAllDescendants'],
        'isInPlay': opts['isInPlay'],
        'marketCount': opts['marketCount'],
        'date': opts['date'],
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'marketGroupId': opts['marketGroupId'],
        'eventSort': opts['eventSort'],
        'culture': opts['culture'],
        'marketPublished': opts['marketPublished'],
        'marketStatus': opts['marketStatus'],
        'marketDisplayed': opts['marketDisplayed'],
        'marketChannel': opts['marketChannel'],
        'marketSort': opts['marketSort'],
        'marketEW': opts['marketEW'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsWrapper;
      return this.apiClient.callApi(
        '/competitions/{competitionId}/events/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketGroupsForCompetition operation.
     * @callback module:api/SportsdataApi~getMarketGroupsForCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketGroupsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of market groups for a given competition id
     * Retrieves a list of market groups for a given competition id
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} competitionId The competition id to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [name] Filter by market group name
     * @param {module:api/SportsdataApi~getMarketGroupsForCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketGroupsWrapper}
     */
    getMarketGroupsForCompetition(apiKey, competitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getMarketGroupsForCompetition");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling getMarketGroupsForCompetition");
      }

      let pathParams = {
        'competitionId': competitionId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'culture': opts['culture'],
        'name': opts['name']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketGroupsWrapper;
      return this.apiClient.callApi(
        '/competitions/{competitionId}/marketgroups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarkets operation.
     * @callback module:api/SportsdataApi~getMarketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one or more specific markets
     * Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} eventId The event ID to retrieve information for.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] A comma-separated list of selectionIds
     * @param {Boolean} [includeAllDescendants = false)] Include every descendant in the below heirarchy
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {Boolean} [includeEmpty = true)] When declared as false it should exclude markets and events that have no selections / markets
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [marketPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {String} [marketStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [marketDisplayed = 'true')] Specify whether to return displayed entities or not
     * @param {String} [marketChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [marketSort] Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} [marketEW] Specify whether to return markets with each way betting or those without
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getMarketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketsWrapper}
     */
    getMarkets(apiKey, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getMarkets");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getMarkets");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'includeAllDescendants': opts['includeAllDescendants'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'includeEmpty': opts['includeEmpty'],
        'culture': opts['culture'],
        'marketPublished': opts['marketPublished'],
        'marketStatus': opts['marketStatus'],
        'marketDisplayed': opts['marketDisplayed'],
        'marketChannel': opts['marketChannel'],
        'marketSort': opts['marketSort'],
        'marketEW': opts['marketEW'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketsWrapper;
      return this.apiClient.callApi(
        '/events/{eventId}/markets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsByGroupId operation.
     * @callback module:api/SportsdataApi~getMarketsByGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketGroupsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} competitionId The competition id to retrieve information for.
     * @param {String} marketSort Filter by market sort (e.g. MR (match result) -- (Outright)).
     * @param {String} marketGroupId Filter by marketGroupId (e.g. OB_MG1276585).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {module:api/SportsdataApi~getMarketsByGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketGroupsWrapper}
     */
    getMarketsByGroupId(apiKey, competitionId, marketSort, marketGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getMarketsByGroupId");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling getMarketsByGroupId");
      }
      // verify the required parameter 'marketSort' is set
      if (marketSort === undefined || marketSort === null) {
        throw new Error("Missing the required parameter 'marketSort' when calling getMarketsByGroupId");
      }
      // verify the required parameter 'marketGroupId' is set
      if (marketGroupId === undefined || marketGroupId === null) {
        throw new Error("Missing the required parameter 'marketGroupId' when calling getMarketsByGroupId");
      }

      let pathParams = {
        'competitionId': competitionId
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'marketSort': marketSort,
        'marketGroupId': marketGroupId
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketGroupsWrapper;
      return this.apiClient.callApi(
        '/competitions/{competitionId}/marketsByGroupid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelections operation.
     * @callback module:api/SportsdataApi~getSelectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectionsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one or more selections for a market
     * Retrieves one or more selections for a market
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {String} eventId The event ID to retrieve information for.
     * @param {String} marketId The market id to retrieve information for
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] A comma-separated list of selectionIds
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [selectionStatus] Specify a status to filter results by. This is currently A (active) or S (suspended)
     * @param {String} [selectionChannel] Specify a channel filter and only results from that channel will be returned
     * @param {String} [selectionPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {module:api/SportsdataApi~getSelectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectionsWrapper}
     */
    getSelections(apiKey, eventId, marketId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSelections");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getSelections");
      }
      // verify the required parameter 'marketId' is set
      if (marketId === undefined || marketId === null) {
        throw new Error("Missing the required parameter 'marketId' when calling getSelections");
      }

      let pathParams = {
        'eventId': eventId,
        'marketId': marketId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'culture': opts['culture'],
        'selectionStatus': opts['selectionStatus'],
        'selectionChannel': opts['selectionChannel'],
        'selectionPublished': opts['selectionPublished']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectionsWrapper;
      return this.apiClient.callApi(
        '/events/{eventId}/markets/{marketId}/selections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSports operation.
     * @callback module:api/SportsdataApi~getSportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SportsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all sports
     * Gets a list of all sports
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {Object} opts Optional parameters
     * @param {String} [sort = 'id,asc')] The field to order the response by, followed by the order. For example: name,desc
     * @param {Number} [offset = 0)] Skip over a number of elements by specifying a start value for the query
     * @param {String} [isPublished = 'true')] Specify whether only active entities should be returned, according to the William Hill definition of active
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getSportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SportsWrapper}
     */
    getSports(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSports");
      }

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'offset': opts['offset'],
        'isPublished': opts['isPublished'],
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'culture': opts['culture']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SportsWrapper;
      return this.apiClient.callApi(
        '/sports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopBets operation.
     * @callback module:api/SportsdataApi~getTopBetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopBetsWrapper} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a weighted list of Selections.
     * Retrieves a weighted list of Selections.
     * @param {String} apiKey Your API Key available from your developer portal
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sportIds] A comma-separated list of sportsIds for which to retrieve topBets for
     * @param {Array.<String>} [competitionIds] A comma-separated list of competitionIds for which to retrieve topBets for
     * @param {Number} [limit = 100)] Specify the number of results to return
     * @param {Array.<String>} [fields] Specify an absolute field list to return (Comma-Separated List)
     * @param {Array.<String>} [include] Specify fields in addition to the default to return (Comma-Separated List)
     * @param {Array.<String>} [exclude] Specify fields from the default to exclude (Comma-Separated List)
     * @param {String} [paramTopBetEventId] The event ID to retrieve top bet information for. Multiple events up to 5 may be used
     * @param {String} [sortName] The market sort code used to further filter event results. Please note this can only be used with event id(s).
     * @param {String} [culture] Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {String} [locale] Code used to select a set of top bets settings, default is \"whapi\" which allows events set in far future to be included, setting the value to \"en-GB\" will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR
     * @param {module:api/SportsdataApi~getTopBetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopBetsWrapper}
     */
    getTopBets(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getTopBets");
      }

      let pathParams = {
      };
      let queryParams = {
        'sportIds': this.apiClient.buildCollectionParam(opts['sportIds'], 'csv'),
        'competitionIds': this.apiClient.buildCollectionParam(opts['competitionIds'], 'csv'),
        'limit': opts['limit'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'param_topBetEventId': opts['paramTopBetEventId'],
        'sortName': opts['sortName'],
        'culture': opts['culture'],
        'Locale': opts['locale']
      };
      let headerParams = {
        'apiKey': apiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopBetsWrapper;
      return this.apiClient.callApi(
        '/topbets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
