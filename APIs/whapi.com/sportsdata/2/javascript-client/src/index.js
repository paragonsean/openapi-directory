/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Class from './model/Class';
import ClassesWrapper from './model/ClassesWrapper';
import Competition from './model/Competition';
import CompetitionsWrapper from './model/CompetitionsWrapper';
import Competitor from './model/Competitor';
import Error from './model/Error';
import ErrorsWrapper from './model/ErrorsWrapper';
import Event from './model/Event';
import EventCompetitorsWrapper from './model/EventCompetitorsWrapper';
import EventsWrapper from './model/EventsWrapper';
import Market from './model/Market';
import MarketGroupsWrapper from './model/MarketGroupsWrapper';
import Marketgroup from './model/Marketgroup';
import MarketsWrapper from './model/MarketsWrapper';
import PriceFormatted from './model/PriceFormatted';
import Selection from './model/Selection';
import SelectionsWrapper from './model/SelectionsWrapper';
import Sport from './model/Sport';
import SportsWrapper from './model/SportsWrapper';
import TopBet from './model/TopBet';
import TopBetsWrapper from './model/TopBetsWrapper';
import CompetitorsApi from './api/CompetitorsApi';
import SportsdataApi from './api/SportsdataApi';


/**
* The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SportsDataApi = require('index'); // See note below*.
* var xxxSvc = new SportsDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SportsDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SportsDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SportsDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Class model constructor.
     * @property {module:model/Class}
     */
    Class,

    /**
     * The ClassesWrapper model constructor.
     * @property {module:model/ClassesWrapper}
     */
    ClassesWrapper,

    /**
     * The Competition model constructor.
     * @property {module:model/Competition}
     */
    Competition,

    /**
     * The CompetitionsWrapper model constructor.
     * @property {module:model/CompetitionsWrapper}
     */
    CompetitionsWrapper,

    /**
     * The Competitor model constructor.
     * @property {module:model/Competitor}
     */
    Competitor,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorsWrapper model constructor.
     * @property {module:model/ErrorsWrapper}
     */
    ErrorsWrapper,

    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event,

    /**
     * The EventCompetitorsWrapper model constructor.
     * @property {module:model/EventCompetitorsWrapper}
     */
    EventCompetitorsWrapper,

    /**
     * The EventsWrapper model constructor.
     * @property {module:model/EventsWrapper}
     */
    EventsWrapper,

    /**
     * The Market model constructor.
     * @property {module:model/Market}
     */
    Market,

    /**
     * The MarketGroupsWrapper model constructor.
     * @property {module:model/MarketGroupsWrapper}
     */
    MarketGroupsWrapper,

    /**
     * The Marketgroup model constructor.
     * @property {module:model/Marketgroup}
     */
    Marketgroup,

    /**
     * The MarketsWrapper model constructor.
     * @property {module:model/MarketsWrapper}
     */
    MarketsWrapper,

    /**
     * The PriceFormatted model constructor.
     * @property {module:model/PriceFormatted}
     */
    PriceFormatted,

    /**
     * The Selection model constructor.
     * @property {module:model/Selection}
     */
    Selection,

    /**
     * The SelectionsWrapper model constructor.
     * @property {module:model/SelectionsWrapper}
     */
    SelectionsWrapper,

    /**
     * The Sport model constructor.
     * @property {module:model/Sport}
     */
    Sport,

    /**
     * The SportsWrapper model constructor.
     * @property {module:model/SportsWrapper}
     */
    SportsWrapper,

    /**
     * The TopBet model constructor.
     * @property {module:model/TopBet}
     */
    TopBet,

    /**
     * The TopBetsWrapper model constructor.
     * @property {module:model/TopBetsWrapper}
     */
    TopBetsWrapper,

    /**
    * The CompetitorsApi service constructor.
    * @property {module:api/CompetitorsApi}
    */
    CompetitorsApi,

    /**
    * The SportsdataApi service constructor.
    * @property {module:api/SportsdataApi}
    */
    SportsdataApi
};
