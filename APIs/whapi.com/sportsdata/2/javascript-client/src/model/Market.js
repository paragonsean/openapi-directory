/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Selection from './Selection';

/**
 * The Market model module.
 * @module model/Market
 * @version 2
 */
class Market {
    /**
     * Constructs a new <code>Market</code>.
     * @alias module:model/Market
     * @param id {String} ID (e.g. OB_MA{id} (e.g. OB_MA1), OB_SP (Sport), OB_CL (Class), OB_TY (Competition / type), OB_EV (event) OB_MA (Market), OB_OU (Selection / outcome)
     * @param name {String} Human-friendly name of the market
     * @param status {String} Indicates the status of the Market (A = Active/S = Suspended)
     */
    constructor(id, name, status) { 
        
        Market.initialize(this, id, name, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, status) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Market</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Market} obj Optional instance to populate.
     * @return {module:model/Market} The populated <code>Market</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Market();

            if (data.hasOwnProperty('antepostMarket')) {
                obj['antepostMarket'] = ApiClient.convertToType(data['antepostMarket'], 'Boolean');
            }
            if (data.hasOwnProperty('bestOddsGuaranteed')) {
                obj['bestOddsGuaranteed'] = ApiClient.convertToType(data['bestOddsGuaranteed'], 'Boolean');
            }
            if (data.hasOwnProperty('betInRunningDelay')) {
                obj['betInRunningDelay'] = ApiClient.convertToType(data['betInRunningDelay'], 'Number');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayed')) {
                obj['displayed'] = ApiClient.convertToType(data['displayed'], 'Boolean');
            }
            if (data.hasOwnProperty('eachWay')) {
                obj['eachWay'] = ApiClient.convertToType(data['eachWay'], 'Boolean');
            }
            if (data.hasOwnProperty('eachWayFactorDen')) {
                obj['eachWayFactorDen'] = ApiClient.convertToType(data['eachWayFactorDen'], 'Number');
            }
            if (data.hasOwnProperty('eachWayFactorNum')) {
                obj['eachWayFactorNum'] = ApiClient.convertToType(data['eachWayFactorNum'], 'Number');
            }
            if (data.hasOwnProperty('eachWayPlaces')) {
                obj['eachWayPlaces'] = ApiClient.convertToType(data['eachWayPlaces'], 'Number');
            }
            if (data.hasOwnProperty('earlyPriceAvailable')) {
                obj['earlyPriceAvailable'] = ApiClient.convertToType(data['earlyPriceAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('fcAvailable')) {
                obj['fcAvailable'] = ApiClient.convertToType(data['fcAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('firstFourAvailable')) {
                obj['firstFourAvailable'] = ApiClient.convertToType(data['firstFourAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('firstPriceAvailable')) {
                obj['firstPriceAvailable'] = ApiClient.convertToType(data['firstPriceAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], 'String');
            }
            if (data.hasOwnProperty('hcapMakeup')) {
                obj['hcapMakeup'] = ApiClient.convertToType(data['hcapMakeup'], 'Number');
            }
            if (data.hasOwnProperty('hcapValue')) {
                obj['hcapValue'] = ApiClient.convertToType(data['hcapValue'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isInPlayMarket')) {
                obj['isInPlayMarket'] = ApiClient.convertToType(data['isInPlayMarket'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('livePriceAvailable')) {
                obj['livePriceAvailable'] = ApiClient.convertToType(data['livePriceAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('marketGroupCollectionId')) {
                obj['marketGroupCollectionId'] = ApiClient.convertToType(data['marketGroupCollectionId'], 'String');
            }
            if (data.hasOwnProperty('marketGroupId')) {
                obj['marketGroupId'] = ApiClient.convertToType(data['marketGroupId'], 'String');
            }
            if (data.hasOwnProperty('marketGroupName')) {
                obj['marketGroupName'] = ApiClient.convertToType(data['marketGroupName'], 'String');
            }
            if (data.hasOwnProperty('marketSort')) {
                obj['marketSort'] = ApiClient.convertToType(data['marketSort'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parentIds')) {
                obj['parentIds'] = ApiClient.convertToType(data['parentIds'], ['String']);
            }
            if (data.hasOwnProperty('quinellaAvailable')) {
                obj['quinellaAvailable'] = ApiClient.convertToType(data['quinellaAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('selections')) {
                obj['selections'] = ApiClient.convertToType(data['selections'], [Selection]);
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('startingPriceAvailable')) {
                obj['startingPriceAvailable'] = ApiClient.convertToType(data['startingPriceAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tcAvailable')) {
                obj['tcAvailable'] = ApiClient.convertToType(data['tcAvailable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Market</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Market</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Market.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channels'] && !(typeof data['channels'] === 'string' || data['channels'] instanceof String)) {
            throw new Error("Expected the field `channels` to be a primitive type in the JSON string but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['flags'] && !(typeof data['flags'] === 'string' || data['flags'] instanceof String)) {
            throw new Error("Expected the field `flags` to be a primitive type in the JSON string but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['marketGroupCollectionId'] && !(typeof data['marketGroupCollectionId'] === 'string' || data['marketGroupCollectionId'] instanceof String)) {
            throw new Error("Expected the field `marketGroupCollectionId` to be a primitive type in the JSON string but got " + data['marketGroupCollectionId']);
        }
        // ensure the json data is a string
        if (data['marketGroupId'] && !(typeof data['marketGroupId'] === 'string' || data['marketGroupId'] instanceof String)) {
            throw new Error("Expected the field `marketGroupId` to be a primitive type in the JSON string but got " + data['marketGroupId']);
        }
        // ensure the json data is a string
        if (data['marketGroupName'] && !(typeof data['marketGroupName'] === 'string' || data['marketGroupName'] instanceof String)) {
            throw new Error("Expected the field `marketGroupName` to be a primitive type in the JSON string but got " + data['marketGroupName']);
        }
        // ensure the json data is a string
        if (data['marketSort'] && !(typeof data['marketSort'] === 'string' || data['marketSort'] instanceof String)) {
            throw new Error("Expected the field `marketSort` to be a primitive type in the JSON string but got " + data['marketSort']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentIds'])) {
            throw new Error("Expected the field `parentIds` to be an array in the JSON data but got " + data['parentIds']);
        }
        if (data['selections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selections'])) {
                throw new Error("Expected the field `selections` to be an array in the JSON data but got " + data['selections']);
            }
            // validate the optional field `selections` (array)
            for (const item of data['selections']) {
                Selection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Market.RequiredProperties = ["id", "name", "status"];

/**
 * Antepost Market
 * @member {Boolean} antepostMarket
 */
Market.prototype['antepostMarket'] = undefined;

/**
 * BOG Available
 * @member {Boolean} bestOddsGuaranteed
 */
Market.prototype['bestOddsGuaranteed'] = undefined;

/**
 * @member {Number} betInRunningDelay
 */
Market.prototype['betInRunningDelay'] = undefined;

/**
 * A channel indicates where an entry can be accessed. Its made up of a string containing a number of characters
 * @member {String} channels
 */
Market.prototype['channels'] = undefined;

/**
 * Additional market information
 * @member {String} description
 */
Market.prototype['description'] = undefined;

/**
 * Indicates if the item should be displayed
 * @member {Boolean} displayed
 */
Market.prototype['displayed'] = undefined;

/**
 * Indicates if each way betting is available
 * @member {Boolean} eachWay
 */
Market.prototype['eachWay'] = undefined;

/**
 * Where each way terms are stored with the bet, this holds the denominator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 4
 * @member {Number} eachWayFactorDen
 */
Market.prototype['eachWayFactorDen'] = undefined;

/**
 * Where each way terms are stored with the bet, this holds the numerator for the each way factor. For example, if the each way terms are: 5 places pay ¼, this value will be 1
 * @member {Number} eachWayFactorNum
 */
Market.prototype['eachWayFactorNum'] = undefined;

/**
 * Where each way terms are stored with the bet, this holds the number of places paid. For example, if the each way terms are: 5 places pay ¼, this value will be 5
 * @member {Number} eachWayPlaces
 */
Market.prototype['eachWayPlaces'] = undefined;

/**
 * Early Pricing Active
 * @member {Boolean} earlyPriceAvailable
 */
Market.prototype['earlyPriceAvailable'] = undefined;

/**
 * Is tricast betting available
 * @member {Boolean} fcAvailable
 */
Market.prototype['fcAvailable'] = undefined;

/**
 * Is firstFour betting available
 * @member {Boolean} firstFourAvailable
 */
Market.prototype['firstFourAvailable'] = undefined;

/**
 * Is firstPrice betting available
 * @member {Boolean} firstPriceAvailable
 */
Market.prototype['firstPriceAvailable'] = undefined;

/**
 * Flags for the market
 * @member {String} flags
 */
Market.prototype['flags'] = undefined;

/**
 * Handicap score
 * @member {Number} hcapMakeup
 */
Market.prototype['hcapMakeup'] = undefined;

/**
 * This value indicates the current handicap set on the Event Market, assuming it has a handicap type.
 * @member {Number} hcapValue
 */
Market.prototype['hcapValue'] = undefined;

/**
 * ID (e.g. OB_MA{id} (e.g. OB_MA1), OB_SP (Sport), OB_CL (Class), OB_TY (Competition / type), OB_EV (event) OB_MA (Market), OB_OU (Selection / outcome)
 * @member {String} id
 */
Market.prototype['id'] = undefined;

/**
 * Is this an in-play market
 * @member {Boolean} isInPlayMarket
 */
Market.prototype['isInPlayMarket'] = undefined;

/**
 * Indicates if the item is published
 * @member {Boolean} isPublished
 */
Market.prototype['isPublished'] = undefined;

/**
 * Live Price
 * @member {Boolean} livePriceAvailable
 */
Market.prototype['livePriceAvailable'] = undefined;

/**
 * The collectionId of the Market Group inherited from
 * @member {String} marketGroupCollectionId
 */
Market.prototype['marketGroupCollectionId'] = undefined;

/**
 * The group id the market was inherited from
 * @member {String} marketGroupId
 */
Market.prototype['marketGroupId'] = undefined;

/**
 * The group name the market was inherited from
 * @member {String} marketGroupName
 */
Market.prototype['marketGroupName'] = undefined;

/**
 * The sort defines the market template
 * @member {String} marketSort
 */
Market.prototype['marketSort'] = undefined;

/**
 * Human-friendly name of the market
 * @member {String} name
 */
Market.prototype['name'] = undefined;

/**
 * Display order of the items (Ascending)
 * @member {Number} order
 */
Market.prototype['order'] = undefined;

/**
 * A list of IDs of parent entities
 * @member {Array.<String>} parentIds
 */
Market.prototype['parentIds'] = undefined;

/**
 * Is firstFour betting available
 * @member {Boolean} quinellaAvailable
 */
Market.prototype['quinellaAvailable'] = undefined;

/**
 * A list of selections belonging to the market
 * @member {Array.<module:model/Selection>} selections
 */
Market.prototype['selections'] = undefined;

/**
 * Whether the market is settled or not
 * @member {Boolean} settled
 */
Market.prototype['settled'] = undefined;

/**
 * Starting Price Available
 * @member {Boolean} startingPriceAvailable
 */
Market.prototype['startingPriceAvailable'] = undefined;

/**
 * Indicates the status of the Market (A = Active/S = Suspended)
 * @member {String} status
 */
Market.prototype['status'] = undefined;

/**
 * Is forecast betting available
 * @member {Boolean} tcAvailable
 */
Market.prototype['tcAvailable'] = undefined;






export default Market;

