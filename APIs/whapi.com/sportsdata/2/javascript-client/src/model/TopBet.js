/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Competition from './Competition';
import Event from './Event';
import Market from './Market';
import Selection from './Selection';
import Sport from './Sport';

/**
 * The TopBet model module.
 * @module model/TopBet
 * @version 2
 */
class TopBet {
    /**
     * Constructs a new <code>TopBet</code>.
     * @alias module:model/TopBet
     */
    constructor() { 
        
        TopBet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopBet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopBet} obj Optional instance to populate.
     * @return {module:model/TopBet} The populated <code>TopBet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopBet();

            if (data.hasOwnProperty('competition')) {
                obj['competition'] = Competition.constructFromObject(data['competition']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = Event.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('market')) {
                obj['market'] = Market.constructFromObject(data['market']);
            }
            if (data.hasOwnProperty('selection')) {
                obj['selection'] = Selection.constructFromObject(data['selection']);
            }
            if (data.hasOwnProperty('sport')) {
                obj['sport'] = Sport.constructFromObject(data['sport']);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopBet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopBet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `competition`
        if (data['competition']) { // data not null
          Competition.validateJSON(data['competition']);
        }
        // validate the optional field `event`
        if (data['event']) { // data not null
          Event.validateJSON(data['event']);
        }
        // validate the optional field `market`
        if (data['market']) { // data not null
          Market.validateJSON(data['market']);
        }
        // validate the optional field `selection`
        if (data['selection']) { // data not null
          Selection.validateJSON(data['selection']);
        }
        // validate the optional field `sport`
        if (data['sport']) { // data not null
          Sport.validateJSON(data['sport']);
        }
        // ensure the json data is a string
        if (data['weight'] && !(typeof data['weight'] === 'string' || data['weight'] instanceof String)) {
            throw new Error("Expected the field `weight` to be a primitive type in the JSON string but got " + data['weight']);
        }

        return true;
    }


}



/**
 * @member {module:model/Competition} competition
 */
TopBet.prototype['competition'] = undefined;

/**
 * @member {module:model/Event} event
 */
TopBet.prototype['event'] = undefined;

/**
 * @member {module:model/Market} market
 */
TopBet.prototype['market'] = undefined;

/**
 * @member {module:model/Selection} selection
 */
TopBet.prototype['selection'] = undefined;

/**
 * @member {module:model/Sport} sport
 */
TopBet.prototype['sport'] = undefined;

/**
 * The weighting of the bet in the Top bets ranking
 * @member {String} weight
 */
TopBet.prototype['weight'] = undefined;






export default TopBet;

