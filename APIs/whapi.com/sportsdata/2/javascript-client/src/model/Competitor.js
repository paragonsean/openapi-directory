/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Competitor model module.
 * @module model/Competitor
 * @version 2
 */
class Competitor {
    /**
     * Constructs a new <code>Competitor</code>.
     * @alias module:model/Competitor
     * @param id {Number} Unique identifier of the competitor in the event
     * @param silkImageUrl {String} The URL for the image that represents the 'silk' (Coathing pattern) worn by the jockey.
     */
    constructor(id, silkImageUrl) { 
        
        Competitor.initialize(this, id, silkImageUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, silkImageUrl) { 
        obj['id'] = id;
        obj['silkImageUrl'] = silkImageUrl;
    }

    /**
     * Constructs a <code>Competitor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Competitor} obj Optional instance to populate.
     * @return {module:model/Competitor} The populated <code>Competitor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Competitor();

            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('drawNumber')) {
                obj['drawNumber'] = ApiClient.convertToType(data['drawNumber'], 'Number');
            }
            if (data.hasOwnProperty('formGuide')) {
                obj['formGuide'] = ApiClient.convertToType(data['formGuide'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jockeyName')) {
                obj['jockeyName'] = ApiClient.convertToType(data['jockeyName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overview')) {
                obj['overview'] = ApiClient.convertToType(data['overview'], 'String');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('sex')) {
                obj['sex'] = ApiClient.convertToType(data['sex'], 'String');
            }
            if (data.hasOwnProperty('silkImageUrl')) {
                obj['silkImageUrl'] = ApiClient.convertToType(data['silkImageUrl'], 'String');
            }
            if (data.hasOwnProperty('trainerName')) {
                obj['trainerName'] = ApiClient.convertToType(data['trainerName'], 'String');
            }
            if (data.hasOwnProperty('weightPounds')) {
                obj['weightPounds'] = ApiClient.convertToType(data['weightPounds'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Competitor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Competitor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Competitor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['formGuide'] && !(typeof data['formGuide'] === 'string' || data['formGuide'] instanceof String)) {
            throw new Error("Expected the field `formGuide` to be a primitive type in the JSON string but got " + data['formGuide']);
        }
        // ensure the json data is a string
        if (data['jockeyName'] && !(typeof data['jockeyName'] === 'string' || data['jockeyName'] instanceof String)) {
            throw new Error("Expected the field `jockeyName` to be a primitive type in the JSON string but got " + data['jockeyName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['overview'] && !(typeof data['overview'] === 'string' || data['overview'] instanceof String)) {
            throw new Error("Expected the field `overview` to be a primitive type in the JSON string but got " + data['overview']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }
        // ensure the json data is a string
        if (data['sex'] && !(typeof data['sex'] === 'string' || data['sex'] instanceof String)) {
            throw new Error("Expected the field `sex` to be a primitive type in the JSON string but got " + data['sex']);
        }
        // ensure the json data is a string
        if (data['silkImageUrl'] && !(typeof data['silkImageUrl'] === 'string' || data['silkImageUrl'] instanceof String)) {
            throw new Error("Expected the field `silkImageUrl` to be a primitive type in the JSON string but got " + data['silkImageUrl']);
        }
        // ensure the json data is a string
        if (data['trainerName'] && !(typeof data['trainerName'] === 'string' || data['trainerName'] instanceof String)) {
            throw new Error("Expected the field `trainerName` to be a primitive type in the JSON string but got " + data['trainerName']);
        }
        // ensure the json data is a string
        if (data['weightPounds'] && !(typeof data['weightPounds'] === 'string' || data['weightPounds'] instanceof String)) {
            throw new Error("Expected the field `weightPounds` to be a primitive type in the JSON string but got " + data['weightPounds']);
        }

        return true;
    }


}

Competitor.RequiredProperties = ["id", "silkImageUrl"];

/**
 * The age of the horse
 * @member {Number} age
 */
Competitor.prototype['age'] = undefined;

/**
 * The colour of the horse (There are 5 colours. b = Bay. bl = Black. br = Brown. ch = Chestnut. gr = Grey)
 * @member {String} colour
 */
Competitor.prototype['colour'] = undefined;

/**
 * The stall number that the horse is allocated and will start from
 * @member {Number} drawNumber
 */
Competitor.prototype['drawNumber'] = undefined;

/**
 * The form of a horse is a record of significant events, mainly its performance in previous races. For example: The value 874-1 means that the horse finished 8th, then 7th in the next race, then 4th, hyphen here means he did not finish in the race, and was 1st in the last race he was running in.
 * @member {String} formGuide
 */
Competitor.prototype['formGuide'] = undefined;

/**
 * Unique identifier of the competitor in the event
 * @member {Number} id
 */
Competitor.prototype['id'] = undefined;

/**
 * The name of the Jockey who's riding the horse
 * @member {String} jockeyName
 */
Competitor.prototype['jockeyName'] = undefined;

/**
 * The name of competitor that the information is being given for
 * @member {String} name
 */
Competitor.prototype['name'] = undefined;

/**
 * Additional information about the horse's performance
 * @member {String} overview
 */
Competitor.prototype['overview'] = undefined;

/**
 * The name of the horses owner(s)
 * @member {String} ownerName
 */
Competitor.prototype['ownerName'] = undefined;

/**
 * The rating of the horse which is defined by a rating provider. It represents the horse's performance (the higher the rating, the better the horse is)
 * @member {String} rating
 */
Competitor.prototype['rating'] = undefined;

/**
 * The sex of the horse (F|M)
 * @member {String} sex
 */
Competitor.prototype['sex'] = undefined;

/**
 * The URL for the image that represents the 'silk' (Coathing pattern) worn by the jockey.
 * @member {String} silkImageUrl
 */
Competitor.prototype['silkImageUrl'] = undefined;

/**
 * The name of the horses trainer
 * @member {String} trainerName
 */
Competitor.prototype['trainerName'] = undefined;

/**
 * The rider weight (in pounds)
 * @member {String} weightPounds
 */
Competitor.prototype['weightPounds'] = undefined;






export default Competitor;

