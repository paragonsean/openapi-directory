/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Market from './Market';

/**
 * The Event model module.
 * @module model/Event
 * @version 2
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     * @param id {String} The Id of the event
     * @param name {String} The name of the event
     * @param startDateTime {String} The start date and time of the event
     * @param status {String} Status of the event (A for Active, S for Suspended)
     */
    constructor(id, name, startDateTime, status) { 
        
        Event.initialize(this, id, name, startDateTime, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, startDateTime, status) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['startDateTime'] = startDateTime;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('betInRunningDelay')) {
                obj['betInRunningDelay'] = ApiClient.convertToType(data['betInRunningDelay'], 'Number');
            }
            if (data.hasOwnProperty('bettingStatus')) {
                obj['bettingStatus'] = ApiClient.convertToType(data['bettingStatus'], 'String');
            }
            if (data.hasOwnProperty('cashinAvailable')) {
                obj['cashinAvailable'] = ApiClient.convertToType(data['cashinAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayed')) {
                obj['displayed'] = ApiClient.convertToType(data['displayed'], 'Boolean');
            }
            if (data.hasOwnProperty('eventSort')) {
                obj['eventSort'] = ApiClient.convertToType(data['eventSort'], 'String');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], ['String']);
            }
            if (data.hasOwnProperty('hasInPlayMarkets')) {
                obj['hasInPlayMarkets'] = ApiClient.convertToType(data['hasInPlayMarkets'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLivePrices')) {
                obj['hasLivePrices'] = ApiClient.convertToType(data['hasLivePrices'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isInPlay')) {
                obj['isInPlay'] = ApiClient.convertToType(data['isInPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('marketCountActiveInPlay')) {
                obj['marketCountActiveInPlay'] = ApiClient.convertToType(data['marketCountActiveInPlay'], 'Number');
            }
            if (data.hasOwnProperty('marketCountActivePreMatch')) {
                obj['marketCountActivePreMatch'] = ApiClient.convertToType(data['marketCountActivePreMatch'], 'Number');
            }
            if (data.hasOwnProperty('marketCountActiveTotal')) {
                obj['marketCountActiveTotal'] = ApiClient.convertToType(data['marketCountActiveTotal'], 'Number');
            }
            if (data.hasOwnProperty('marketCountInPlay')) {
                obj['marketCountInPlay'] = ApiClient.convertToType(data['marketCountInPlay'], 'Number');
            }
            if (data.hasOwnProperty('marketCountPreMatch')) {
                obj['marketCountPreMatch'] = ApiClient.convertToType(data['marketCountPreMatch'], 'Number');
            }
            if (data.hasOwnProperty('markets')) {
                obj['markets'] = ApiClient.convertToType(data['markets'], [Market]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parentIds')) {
                obj['parentIds'] = ApiClient.convertToType(data['parentIds'], ['String']);
            }
            if (data.hasOwnProperty('raceNum')) {
                obj['raceNum'] = ApiClient.convertToType(data['raceNum'], 'String');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bettingStatus'] && !(typeof data['bettingStatus'] === 'string' || data['bettingStatus'] instanceof String)) {
            throw new Error("Expected the field `bettingStatus` to be a primitive type in the JSON string but got " + data['bettingStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['channels'])) {
            throw new Error("Expected the field `channels` to be an array in the JSON data but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventSort'] && !(typeof data['eventSort'] === 'string' || data['eventSort'] instanceof String)) {
            throw new Error("Expected the field `eventSort` to be a primitive type in the JSON string but got " + data['eventSort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flags'])) {
            throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['markets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['markets'])) {
                throw new Error("Expected the field `markets` to be an array in the JSON data but got " + data['markets']);
            }
            // validate the optional field `markets` (array)
            for (const item of data['markets']) {
                Market.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentIds'])) {
            throw new Error("Expected the field `parentIds` to be an array in the JSON data but got " + data['parentIds']);
        }
        // ensure the json data is a string
        if (data['raceNum'] && !(typeof data['raceNum'] === 'string' || data['raceNum'] instanceof String)) {
            throw new Error("Expected the field `raceNum` to be a primitive type in the JSON string but got " + data['raceNum']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Event.RequiredProperties = ["id", "name", "startDateTime", "status"];

/**
 * Delay in seconds between bet being sent and bet being placed
 * @member {Number} betInRunningDelay
 */
Event.prototype['betInRunningDelay'] = undefined;

/**
 * Betting status of the event
 * @member {String} bettingStatus
 */
Event.prototype['bettingStatus'] = undefined;

/**
 * Whether cashin is available on this event
 * @member {Boolean} cashinAvailable
 */
Event.prototype['cashinAvailable'] = undefined;

/**
 * A list of channels that apply to this event
 * @member {Array.<String>} channels
 */
Event.prototype['channels'] = undefined;

/**
 * A string indicating the country code of this event if available
 * @member {String} country
 */
Event.prototype['country'] = undefined;

/**
 * The description of the event
 * @member {String} description
 */
Event.prototype['description'] = undefined;

/**
 * whether the event should be displayed or not
 * @member {Boolean} displayed
 */
Event.prototype['displayed'] = undefined;

/**
 * What type of event is this? (e.g. MTCH, TRNMT)
 * @member {String} eventSort
 */
Event.prototype['eventSort'] = undefined;

/**
 * A list of flags that apply to this event
 * @member {Array.<String>} flags
 */
Event.prototype['flags'] = undefined;

/**
 * Whether this event has inplay markets
 * @member {Boolean} hasInPlayMarkets
 */
Event.prototype['hasInPlayMarkets'] = undefined;

/**
 * Whether this event has Live Prices
 * @member {Boolean} hasLivePrices
 */
Event.prototype['hasLivePrices'] = undefined;

/**
 * The Id of the event
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * Whether this event has started and therefore is inplay
 * @member {Boolean} isInPlay
 */
Event.prototype['isInPlay'] = undefined;

/**
 * Indicates if the item is published
 * @member {Boolean} isPublished
 */
Event.prototype['isPublished'] = undefined;

/**
 * Count of active markets in play
 * @member {Number} marketCountActiveInPlay
 */
Event.prototype['marketCountActiveInPlay'] = undefined;

/**
 * count of active market pre-match
 * @member {Number} marketCountActivePreMatch
 */
Event.prototype['marketCountActivePreMatch'] = undefined;

/**
 * Total market count
 * @member {Number} marketCountActiveTotal
 */
Event.prototype['marketCountActiveTotal'] = undefined;

/**
 * Total inplay markets
 * @member {Number} marketCountInPlay
 */
Event.prototype['marketCountInPlay'] = undefined;

/**
 * Total prematch markets
 * @member {Number} marketCountPreMatch
 */
Event.prototype['marketCountPreMatch'] = undefined;

/**
 * A list of markets belonging to this event
 * @member {Array.<module:model/Market>} markets
 */
Event.prototype['markets'] = undefined;

/**
 * The name of the event
 * @member {String} name
 */
Event.prototype['name'] = undefined;

/**
 * Display order of the event
 * @member {Number} order
 */
Event.prototype['order'] = undefined;

/**
 * A list of IDs of parent entities
 * @member {Array.<String>} parentIds
 */
Event.prototype['parentIds'] = undefined;

/**
 * Race number for race events
 * @member {String} raceNum
 */
Event.prototype['raceNum'] = undefined;

/**
 * Whether the event has been settled
 * @member {Boolean} settled
 */
Event.prototype['settled'] = undefined;

/**
 * The start date and time of the event
 * @member {String} startDateTime
 */
Event.prototype['startDateTime'] = undefined;

/**
 * Status of the event (A for Active, S for Suspended)
 * @member {String} status
 */
Event.prototype['status'] = undefined;






export default Event;

