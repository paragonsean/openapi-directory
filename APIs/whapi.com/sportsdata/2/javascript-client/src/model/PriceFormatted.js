/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PriceFormatted model module.
 * @module model/PriceFormatted
 * @version 2
 */
class PriceFormatted {
    /**
     * Constructs a new <code>PriceFormatted</code>.
     * @alias module:model/PriceFormatted
     */
    constructor() { 
        
        PriceFormatted.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceFormatted</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceFormatted} obj Optional instance to populate.
     * @return {module:model/PriceFormatted} The populated <code>PriceFormatted</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceFormatted();

            if (data.hasOwnProperty('american')) {
                obj['american'] = ApiClient.convertToType(data['american'], 'String');
            }
            if (data.hasOwnProperty('decimal')) {
                obj['decimal'] = ApiClient.convertToType(data['decimal'], 'Number');
            }
            if (data.hasOwnProperty('fractional')) {
                obj['fractional'] = ApiClient.convertToType(data['fractional'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceFormatted</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceFormatted</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['american'] && !(typeof data['american'] === 'string' || data['american'] instanceof String)) {
            throw new Error("Expected the field `american` to be a primitive type in the JSON string but got " + data['american']);
        }
        // ensure the json data is a string
        if (data['fractional'] && !(typeof data['fractional'] === 'string' || data['fractional'] instanceof String)) {
            throw new Error("Expected the field `fractional` to be a primitive type in the JSON string but got " + data['fractional']);
        }

        return true;
    }


}



/**
 * The price in American format
 * @member {String} american
 */
PriceFormatted.prototype['american'] = undefined;

/**
 * The decimal format of the price
 * @member {Number} decimal
 */
PriceFormatted.prototype['decimal'] = undefined;

/**
 * The fractional format of the price or EVS when the price evens.
 * @member {String} fractional
 */
PriceFormatted.prototype['fractional'] = undefined;






export default PriceFormatted;

