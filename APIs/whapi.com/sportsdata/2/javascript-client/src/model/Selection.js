/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PriceFormatted from './PriceFormatted';

/**
 * The Selection model module.
 * @module model/Selection
 * @version 2
 */
class Selection {
    /**
     * Constructs a new <code>Selection</code>.
     * @alias module:model/Selection
     * @param id {String} The Id of the selection
     * @param name {String} The name of the selection
     * @param oddsDecimal {Number} The selection price, in decimal format
     * @param oddsFractional {Number} The selection price, in fractional format
     * @param status {String} The status of the selection (A for Active or S for Suspended)
     */
    constructor(id, name, oddsDecimal, oddsFractional, status) { 
        
        Selection.initialize(this, id, name, oddsDecimal, oddsFractional, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, oddsDecimal, oddsFractional, status) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['oddsDecimal'] = oddsDecimal;
        obj['oddsFractional'] = oddsFractional;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Selection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Selection} obj Optional instance to populate.
     * @return {module:model/Selection} The populated <code>Selection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Selection();

            if (data.hasOwnProperty('cashinPriceDen')) {
                obj['cashinPriceDen'] = ApiClient.convertToType(data['cashinPriceDen'], 'Number');
            }
            if (data.hasOwnProperty('cashinPriceNum')) {
                obj['cashinPriceNum'] = ApiClient.convertToType(data['cashinPriceNum'], 'Number');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], ['String']);
            }
            if (data.hasOwnProperty('csAway')) {
                obj['csAway'] = ApiClient.convertToType(data['csAway'], 'Number');
            }
            if (data.hasOwnProperty('csHome')) {
                obj['csHome'] = ApiClient.convertToType(data['csHome'], 'Number');
            }
            if (data.hasOwnProperty('currentPriceDen')) {
                obj['currentPriceDen'] = ApiClient.convertToType(data['currentPriceDen'], 'Number');
            }
            if (data.hasOwnProperty('currentPriceNum')) {
                obj['currentPriceNum'] = ApiClient.convertToType(data['currentPriceNum'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayed')) {
                obj['displayed'] = ApiClient.convertToType(data['displayed'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oddsDecimal')) {
                obj['oddsDecimal'] = ApiClient.convertToType(data['oddsDecimal'], 'Number');
            }
            if (data.hasOwnProperty('oddsFractional')) {
                obj['oddsFractional'] = ApiClient.convertToType(data['oddsFractional'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parentIds')) {
                obj['parentIds'] = ApiClient.convertToType(data['parentIds'], ['String']);
            }
            if (data.hasOwnProperty('priceFormatted')) {
                obj['priceFormatted'] = PriceFormatted.constructFromObject(data['priceFormatted']);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('resultType')) {
                obj['resultType'] = ApiClient.convertToType(data['resultType'], 'String');
            }
            if (data.hasOwnProperty('runnerNum')) {
                obj['runnerNum'] = ApiClient.convertToType(data['runnerNum'], 'Number');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Selection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Selection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Selection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['channels'])) {
            throw new Error("Expected the field `channels` to be an array in the JSON data but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentIds'])) {
            throw new Error("Expected the field `parentIds` to be an array in the JSON data but got " + data['parentIds']);
        }
        // validate the optional field `priceFormatted`
        if (data['priceFormatted']) { // data not null
          PriceFormatted.validateJSON(data['priceFormatted']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['resultType'] && !(typeof data['resultType'] === 'string' || data['resultType'] instanceof String)) {
            throw new Error("Expected the field `resultType` to be a primitive type in the JSON string but got " + data['resultType']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Selection.RequiredProperties = ["id", "name", "oddsDecimal", "oddsFractional", "status"];

/**
 * The cashin price denominator
 * @member {Number} cashinPriceDen
 */
Selection.prototype['cashinPriceDen'] = undefined;

/**
 * The cashin price numerator
 * @member {Number} cashinPriceNum
 */
Selection.prototype['cashinPriceNum'] = undefined;

/**
 * A list of channels that applies to this selection
 * @member {Array.<String>} channels
 */
Selection.prototype['channels'] = undefined;

/**
 * The away score in a correct score event
 * @member {Number} csAway
 */
Selection.prototype['csAway'] = undefined;

/**
 * The home score in a correct score event
 * @member {Number} csHome
 */
Selection.prototype['csHome'] = undefined;

/**
 * Denominator of the price
 * @member {Number} currentPriceDen
 */
Selection.prototype['currentPriceDen'] = undefined;

/**
 * Numerator of the price
 * @member {Number} currentPriceNum
 */
Selection.prototype['currentPriceNum'] = undefined;

/**
 * The description of the selection
 * @member {String} description
 */
Selection.prototype['description'] = undefined;

/**
 * Wether this selection should be displayed or not
 * @member {Boolean} displayed
 */
Selection.prototype['displayed'] = undefined;

/**
 * The Id of the selection
 * @member {String} id
 */
Selection.prototype['id'] = undefined;

/**
 * Indicates if the item is published
 * @member {Boolean} isPublished
 */
Selection.prototype['isPublished'] = undefined;

/**
 * The name of the selection
 * @member {String} name
 */
Selection.prototype['name'] = undefined;

/**
 * The selection price, in decimal format
 * @member {Number} oddsDecimal
 */
Selection.prototype['oddsDecimal'] = undefined;

/**
 * The selection price, in fractional format
 * @member {Number} oddsFractional
 */
Selection.prototype['oddsFractional'] = undefined;

/**
 * The display order of the selection
 * @member {Number} order
 */
Selection.prototype['order'] = undefined;

/**
 * A list of IDs of parent entities
 * @member {Array.<String>} parentIds
 */
Selection.prototype['parentIds'] = undefined;

/**
 * @member {module:model/PriceFormatted} priceFormatted
 */
Selection.prototype['priceFormatted'] = undefined;

/**
 * The result of this selection
 * @member {String} result
 */
Selection.prototype['result'] = undefined;

/**
 * football Result
 * @member {String} resultType
 */
Selection.prototype['resultType'] = undefined;

/**
 * The runner number in race events
 * @member {Number} runnerNum
 */
Selection.prototype['runnerNum'] = undefined;

/**
 * Wether this selection has been settled or not
 * @member {Boolean} settled
 */
Selection.prototype['settled'] = undefined;

/**
 * The status of the selection (A for Active or S for Suspended)
 * @member {String} status
 */
Selection.prototype['status'] = undefined;






export default Selection;

