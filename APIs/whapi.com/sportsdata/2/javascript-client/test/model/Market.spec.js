/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SportsDataApi);
  }
}(this, function(expect, SportsDataApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SportsDataApi.Market();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Market', function() {
    it('should create an instance of Market', function() {
      // uncomment below and update the code to test Market
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be.a(SportsDataApi.Market);
    });

    it('should have the property antepostMarket (base name: "antepostMarket")', function() {
      // uncomment below and update the code to test the property antepostMarket
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property bestOddsGuaranteed (base name: "bestOddsGuaranteed")', function() {
      // uncomment below and update the code to test the property bestOddsGuaranteed
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property betInRunningDelay (base name: "betInRunningDelay")', function() {
      // uncomment below and update the code to test the property betInRunningDelay
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property channels (base name: "channels")', function() {
      // uncomment below and update the code to test the property channels
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property displayed (base name: "displayed")', function() {
      // uncomment below and update the code to test the property displayed
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property eachWay (base name: "eachWay")', function() {
      // uncomment below and update the code to test the property eachWay
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property eachWayFactorDen (base name: "eachWayFactorDen")', function() {
      // uncomment below and update the code to test the property eachWayFactorDen
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property eachWayFactorNum (base name: "eachWayFactorNum")', function() {
      // uncomment below and update the code to test the property eachWayFactorNum
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property eachWayPlaces (base name: "eachWayPlaces")', function() {
      // uncomment below and update the code to test the property eachWayPlaces
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property earlyPriceAvailable (base name: "earlyPriceAvailable")', function() {
      // uncomment below and update the code to test the property earlyPriceAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property fcAvailable (base name: "fcAvailable")', function() {
      // uncomment below and update the code to test the property fcAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property firstFourAvailable (base name: "firstFourAvailable")', function() {
      // uncomment below and update the code to test the property firstFourAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property firstPriceAvailable (base name: "firstPriceAvailable")', function() {
      // uncomment below and update the code to test the property firstPriceAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property flags (base name: "flags")', function() {
      // uncomment below and update the code to test the property flags
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property hcapMakeup (base name: "hcapMakeup")', function() {
      // uncomment below and update the code to test the property hcapMakeup
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property hcapValue (base name: "hcapValue")', function() {
      // uncomment below and update the code to test the property hcapValue
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property isInPlayMarket (base name: "isInPlayMarket")', function() {
      // uncomment below and update the code to test the property isInPlayMarket
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property isPublished (base name: "isPublished")', function() {
      // uncomment below and update the code to test the property isPublished
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property livePriceAvailable (base name: "livePriceAvailable")', function() {
      // uncomment below and update the code to test the property livePriceAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property marketGroupCollectionId (base name: "marketGroupCollectionId")', function() {
      // uncomment below and update the code to test the property marketGroupCollectionId
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property marketGroupId (base name: "marketGroupId")', function() {
      // uncomment below and update the code to test the property marketGroupId
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property marketGroupName (base name: "marketGroupName")', function() {
      // uncomment below and update the code to test the property marketGroupName
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property marketSort (base name: "marketSort")', function() {
      // uncomment below and update the code to test the property marketSort
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property order (base name: "order")', function() {
      // uncomment below and update the code to test the property order
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property parentIds (base name: "parentIds")', function() {
      // uncomment below and update the code to test the property parentIds
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property quinellaAvailable (base name: "quinellaAvailable")', function() {
      // uncomment below and update the code to test the property quinellaAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property selections (base name: "selections")', function() {
      // uncomment below and update the code to test the property selections
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property settled (base name: "settled")', function() {
      // uncomment below and update the code to test the property settled
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property startingPriceAvailable (base name: "startingPriceAvailable")', function() {
      // uncomment below and update the code to test the property startingPriceAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

    it('should have the property tcAvailable (base name: "tcAvailable")', function() {
      // uncomment below and update the code to test the property tcAvailable
      //var instance = new SportsDataApi.Market();
      //expect(instance).to.be();
    });

  });

}));
