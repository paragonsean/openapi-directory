/**
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SportsDataApi);
  }
}(this, function(expect, SportsDataApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SportsDataApi.Competitor();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Competitor', function() {
    it('should create an instance of Competitor', function() {
      // uncomment below and update the code to test Competitor
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be.a(SportsDataApi.Competitor);
    });

    it('should have the property age (base name: "age")', function() {
      // uncomment below and update the code to test the property age
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property colour (base name: "colour")', function() {
      // uncomment below and update the code to test the property colour
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property drawNumber (base name: "drawNumber")', function() {
      // uncomment below and update the code to test the property drawNumber
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property formGuide (base name: "formGuide")', function() {
      // uncomment below and update the code to test the property formGuide
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property jockeyName (base name: "jockeyName")', function() {
      // uncomment below and update the code to test the property jockeyName
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property overview (base name: "overview")', function() {
      // uncomment below and update the code to test the property overview
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property ownerName (base name: "ownerName")', function() {
      // uncomment below and update the code to test the property ownerName
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property sex (base name: "sex")', function() {
      // uncomment below and update the code to test the property sex
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property silkImageUrl (base name: "silkImageUrl")', function() {
      // uncomment below and update the code to test the property silkImageUrl
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property trainerName (base name: "trainerName")', function() {
      // uncomment below and update the code to test the property trainerName
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

    it('should have the property weightPounds (base name: "weightPounds")', function() {
      // uncomment below and update the code to test the property weightPounds
      //var instance = new SportsDataApi.Competitor();
      //expect(instance).to.be();
    });

  });

}));
