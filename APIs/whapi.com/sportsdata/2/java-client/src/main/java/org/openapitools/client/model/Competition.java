/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Competition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:47.763944-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Competition {
  public static final String SERIALIZED_NAME_BET_IN_RUNNING_DELAY = "betInRunningDelay";
  @SerializedName(SERIALIZED_NAME_BET_IN_RUNNING_DELAY)
  private BigDecimal betInRunningDelay;

  public static final String SERIALIZED_NAME_CASHIN_AVAILABLE = "cashinAvailable";
  @SerializedName(SERIALIZED_NAME_CASHIN_AVAILABLE)
  private Boolean cashinAvailable;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<String> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAYED = "displayed";
  @SerializedName(SERIALIZED_NAME_DISPLAYED)
  private Boolean displayed;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_PARENT_IDS = "parentIds";
  @SerializedName(SERIALIZED_NAME_PARENT_IDS)
  private List<String> parentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Competition() {
  }

  public Competition betInRunningDelay(BigDecimal betInRunningDelay) {
    this.betInRunningDelay = betInRunningDelay;
    return this;
  }

  /**
   * Delay in seconds between bet being sent and bet being placed
   * @return betInRunningDelay
   */
  @javax.annotation.Nullable
  public BigDecimal getBetInRunningDelay() {
    return betInRunningDelay;
  }

  public void setBetInRunningDelay(BigDecimal betInRunningDelay) {
    this.betInRunningDelay = betInRunningDelay;
  }


  public Competition cashinAvailable(Boolean cashinAvailable) {
    this.cashinAvailable = cashinAvailable;
    return this;
  }

  /**
   * Indicates whether cashin is available on the events of this competition
   * @return cashinAvailable
   */
  @javax.annotation.Nullable
  public Boolean getCashinAvailable() {
    return cashinAvailable;
  }

  public void setCashinAvailable(Boolean cashinAvailable) {
    this.cashinAvailable = cashinAvailable;
  }


  public Competition channels(List<String> channels) {
    this.channels = channels;
    return this;
  }

  public Competition addChannelsItem(String channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * A list of channels that apply to this competition
   * @return channels
   */
  @javax.annotation.Nullable
  public List<String> getChannels() {
    return channels;
  }

  public void setChannels(List<String> channels) {
    this.channels = channels;
  }


  public Competition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the competition
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Competition displayed(Boolean displayed) {
    this.displayed = displayed;
    return this;
  }

  /**
   * Whether the competition should be displayed or not
   * @return displayed
   */
  @javax.annotation.Nullable
  public Boolean getDisplayed() {
    return displayed;
  }

  public void setDisplayed(Boolean displayed) {
    this.displayed = displayed;
  }


  public Competition flags(List<String> flags) {
    this.flags = flags;
    return this;
  }

  public Competition addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * A list of flags that apply to this competition
   * @return flags
   */
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public Competition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of the Competition
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Competition isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

  /**
   * Indicates if the item is published or not
   * @return isPublished
   */
  @javax.annotation.Nullable
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public Competition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the competition
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Competition order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * The display order of the competition
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public Competition parentIds(List<String> parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public Competition addParentIdsItem(String parentIdsItem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<>();
    }
    this.parentIds.add(parentIdsItem);
    return this;
  }

  /**
   * A list of IDs of parent entities
   * @return parentIds
   */
  @javax.annotation.Nullable
  public List<String> getParentIds() {
    return parentIds;
  }

  public void setParentIds(List<String> parentIds) {
    this.parentIds = parentIds;
  }


  public Competition status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the competition (A for Active, S for Suspended)
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Competition competition = (Competition) o;
    return Objects.equals(this.betInRunningDelay, competition.betInRunningDelay) &&
        Objects.equals(this.cashinAvailable, competition.cashinAvailable) &&
        Objects.equals(this.channels, competition.channels) &&
        Objects.equals(this.description, competition.description) &&
        Objects.equals(this.displayed, competition.displayed) &&
        Objects.equals(this.flags, competition.flags) &&
        Objects.equals(this.id, competition.id) &&
        Objects.equals(this.isPublished, competition.isPublished) &&
        Objects.equals(this.name, competition.name) &&
        Objects.equals(this.order, competition.order) &&
        Objects.equals(this.parentIds, competition.parentIds) &&
        Objects.equals(this.status, competition.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(betInRunningDelay, cashinAvailable, channels, description, displayed, flags, id, isPublished, name, order, parentIds, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Competition {\n");
    sb.append("    betInRunningDelay: ").append(toIndentedString(betInRunningDelay)).append("\n");
    sb.append("    cashinAvailable: ").append(toIndentedString(cashinAvailable)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayed: ").append(toIndentedString(displayed)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    parentIds: ").append(toIndentedString(parentIds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("betInRunningDelay");
    openapiFields.add("cashinAvailable");
    openapiFields.add("channels");
    openapiFields.add("description");
    openapiFields.add("displayed");
    openapiFields.add("flags");
    openapiFields.add("id");
    openapiFields.add("isPublished");
    openapiFields.add("name");
    openapiFields.add("order");
    openapiFields.add("parentIds");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Competition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Competition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Competition is not found in the empty JSON string", Competition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Competition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Competition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Competition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull() && !jsonObj.get("channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentIds") != null && !jsonObj.get("parentIds").isJsonNull() && !jsonObj.get("parentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentIds` to be an array in the JSON string but got `%s`", jsonObj.get("parentIds").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Competition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Competition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Competition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Competition.class));

       return (TypeAdapter<T>) new TypeAdapter<Competition>() {
           @Override
           public void write(JsonWriter out, Competition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Competition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Competition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Competition
   * @throws IOException if the JSON string is invalid with respect to Competition
   */
  public static Competition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Competition.class);
  }

  /**
   * Convert an instance of Competition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

