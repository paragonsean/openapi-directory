/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Competition;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Market;
import org.openapitools.client.model.Selection;
import org.openapitools.client.model.Sport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopBet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:47.763944-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopBet {
  public static final String SERIALIZED_NAME_COMPETITION = "competition";
  @SerializedName(SERIALIZED_NAME_COMPETITION)
  private Competition competition;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private Event event;

  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private Market market;

  public static final String SERIALIZED_NAME_SELECTION = "selection";
  @SerializedName(SERIALIZED_NAME_SELECTION)
  private Selection selection;

  public static final String SERIALIZED_NAME_SPORT = "sport";
  @SerializedName(SERIALIZED_NAME_SPORT)
  private Sport sport;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private String weight;

  public TopBet() {
  }

  public TopBet competition(Competition competition) {
    this.competition = competition;
    return this;
  }

  /**
   * Get competition
   * @return competition
   */
  @javax.annotation.Nullable
  public Competition getCompetition() {
    return competition;
  }

  public void setCompetition(Competition competition) {
    this.competition = competition;
  }


  public TopBet event(Event event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public Event getEvent() {
    return event;
  }

  public void setEvent(Event event) {
    this.event = event;
  }


  public TopBet market(Market market) {
    this.market = market;
    return this;
  }

  /**
   * Get market
   * @return market
   */
  @javax.annotation.Nullable
  public Market getMarket() {
    return market;
  }

  public void setMarket(Market market) {
    this.market = market;
  }


  public TopBet selection(Selection selection) {
    this.selection = selection;
    return this;
  }

  /**
   * Get selection
   * @return selection
   */
  @javax.annotation.Nullable
  public Selection getSelection() {
    return selection;
  }

  public void setSelection(Selection selection) {
    this.selection = selection;
  }


  public TopBet sport(Sport sport) {
    this.sport = sport;
    return this;
  }

  /**
   * Get sport
   * @return sport
   */
  @javax.annotation.Nullable
  public Sport getSport() {
    return sport;
  }

  public void setSport(Sport sport) {
    this.sport = sport;
  }


  public TopBet weight(String weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The weighting of the bet in the Top bets ranking
   * @return weight
   */
  @javax.annotation.Nullable
  public String getWeight() {
    return weight;
  }

  public void setWeight(String weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopBet topBet = (TopBet) o;
    return Objects.equals(this.competition, topBet.competition) &&
        Objects.equals(this.event, topBet.event) &&
        Objects.equals(this.market, topBet.market) &&
        Objects.equals(this.selection, topBet.selection) &&
        Objects.equals(this.sport, topBet.sport) &&
        Objects.equals(this.weight, topBet.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competition, event, market, selection, sport, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopBet {\n");
    sb.append("    competition: ").append(toIndentedString(competition)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    selection: ").append(toIndentedString(selection)).append("\n");
    sb.append("    sport: ").append(toIndentedString(sport)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("competition");
    openapiFields.add("event");
    openapiFields.add("market");
    openapiFields.add("selection");
    openapiFields.add("sport");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopBet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopBet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopBet is not found in the empty JSON string", TopBet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopBet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopBet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `competition`
      if (jsonObj.get("competition") != null && !jsonObj.get("competition").isJsonNull()) {
        Competition.validateJsonElement(jsonObj.get("competition"));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        Event.validateJsonElement(jsonObj.get("event"));
      }
      // validate the optional field `market`
      if (jsonObj.get("market") != null && !jsonObj.get("market").isJsonNull()) {
        Market.validateJsonElement(jsonObj.get("market"));
      }
      // validate the optional field `selection`
      if (jsonObj.get("selection") != null && !jsonObj.get("selection").isJsonNull()) {
        Selection.validateJsonElement(jsonObj.get("selection"));
      }
      // validate the optional field `sport`
      if (jsonObj.get("sport") != null && !jsonObj.get("sport").isJsonNull()) {
        Sport.validateJsonElement(jsonObj.get("sport"));
      }
      if ((jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) && !jsonObj.get("weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weight").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopBet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopBet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopBet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopBet.class));

       return (TypeAdapter<T>) new TypeAdapter<TopBet>() {
           @Override
           public void write(JsonWriter out, TopBet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopBet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopBet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopBet
   * @throws IOException if the JSON string is invalid with respect to TopBet
   */
  public static TopBet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopBet.class);
  }

  /**
   * Convert an instance of TopBet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

