/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorsWrapper;
import org.openapitools.client.model.EventCompetitorsWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompetitorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompetitorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompetitorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEventCompetitors
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCompetitorsCall(String apiKey, String eventId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}/competitors"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventCompetitorsValidateBeforeCall(String apiKey, String eventId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEventCompetitors(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventCompetitors(Async)");
        }

        return getEventCompetitorsCall(apiKey, eventId, fields, include, exclude, _callback);

    }

    /**
     * Retrieves competitors for a single event by ID.
     * Retrieves competitors for a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @return EventCompetitorsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public EventCompetitorsWrapper getEventCompetitors(String apiKey, String eventId, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<EventCompetitorsWrapper> localVarResp = getEventCompetitorsWithHttpInfo(apiKey, eventId, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Retrieves competitors for a single event by ID.
     * Retrieves competitors for a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @return ApiResponse&lt;EventCompetitorsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventCompetitorsWrapper> getEventCompetitorsWithHttpInfo(String apiKey, String eventId, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getEventCompetitorsValidateBeforeCall(apiKey, eventId, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<EventCompetitorsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves competitors for a single event by ID. (asynchronously)
     * Retrieves competitors for a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCompetitorsAsync(String apiKey, String eventId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<EventCompetitorsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventCompetitorsValidateBeforeCall(apiKey, eventId, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<EventCompetitorsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
