/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PriceFormatted;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Selection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:47.763944-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Selection {
  public static final String SERIALIZED_NAME_CASHIN_PRICE_DEN = "cashinPriceDen";
  @SerializedName(SERIALIZED_NAME_CASHIN_PRICE_DEN)
  private BigDecimal cashinPriceDen;

  public static final String SERIALIZED_NAME_CASHIN_PRICE_NUM = "cashinPriceNum";
  @SerializedName(SERIALIZED_NAME_CASHIN_PRICE_NUM)
  private BigDecimal cashinPriceNum;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<String> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CS_AWAY = "csAway";
  @SerializedName(SERIALIZED_NAME_CS_AWAY)
  private BigDecimal csAway;

  public static final String SERIALIZED_NAME_CS_HOME = "csHome";
  @SerializedName(SERIALIZED_NAME_CS_HOME)
  private BigDecimal csHome;

  public static final String SERIALIZED_NAME_CURRENT_PRICE_DEN = "currentPriceDen";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE_DEN)
  private BigDecimal currentPriceDen;

  public static final String SERIALIZED_NAME_CURRENT_PRICE_NUM = "currentPriceNum";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRICE_NUM)
  private BigDecimal currentPriceNum;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAYED = "displayed";
  @SerializedName(SERIALIZED_NAME_DISPLAYED)
  private Boolean displayed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ODDS_DECIMAL = "oddsDecimal";
  @SerializedName(SERIALIZED_NAME_ODDS_DECIMAL)
  private BigDecimal oddsDecimal;

  public static final String SERIALIZED_NAME_ODDS_FRACTIONAL = "oddsFractional";
  @SerializedName(SERIALIZED_NAME_ODDS_FRACTIONAL)
  private BigDecimal oddsFractional;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_PARENT_IDS = "parentIds";
  @SerializedName(SERIALIZED_NAME_PARENT_IDS)
  private List<String> parentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_FORMATTED = "priceFormatted";
  @SerializedName(SERIALIZED_NAME_PRICE_FORMATTED)
  private PriceFormatted priceFormatted;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_RESULT_TYPE = "resultType";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  private String resultType;

  public static final String SERIALIZED_NAME_RUNNER_NUM = "runnerNum";
  @SerializedName(SERIALIZED_NAME_RUNNER_NUM)
  private BigDecimal runnerNum;

  public static final String SERIALIZED_NAME_SETTLED = "settled";
  @SerializedName(SERIALIZED_NAME_SETTLED)
  private Boolean settled;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Selection() {
  }

  public Selection cashinPriceDen(BigDecimal cashinPriceDen) {
    this.cashinPriceDen = cashinPriceDen;
    return this;
  }

  /**
   * The cashin price denominator
   * @return cashinPriceDen
   */
  @javax.annotation.Nullable
  public BigDecimal getCashinPriceDen() {
    return cashinPriceDen;
  }

  public void setCashinPriceDen(BigDecimal cashinPriceDen) {
    this.cashinPriceDen = cashinPriceDen;
  }


  public Selection cashinPriceNum(BigDecimal cashinPriceNum) {
    this.cashinPriceNum = cashinPriceNum;
    return this;
  }

  /**
   * The cashin price numerator
   * @return cashinPriceNum
   */
  @javax.annotation.Nullable
  public BigDecimal getCashinPriceNum() {
    return cashinPriceNum;
  }

  public void setCashinPriceNum(BigDecimal cashinPriceNum) {
    this.cashinPriceNum = cashinPriceNum;
  }


  public Selection channels(List<String> channels) {
    this.channels = channels;
    return this;
  }

  public Selection addChannelsItem(String channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * A list of channels that applies to this selection
   * @return channels
   */
  @javax.annotation.Nullable
  public List<String> getChannels() {
    return channels;
  }

  public void setChannels(List<String> channels) {
    this.channels = channels;
  }


  public Selection csAway(BigDecimal csAway) {
    this.csAway = csAway;
    return this;
  }

  /**
   * The away score in a correct score event
   * @return csAway
   */
  @javax.annotation.Nullable
  public BigDecimal getCsAway() {
    return csAway;
  }

  public void setCsAway(BigDecimal csAway) {
    this.csAway = csAway;
  }


  public Selection csHome(BigDecimal csHome) {
    this.csHome = csHome;
    return this;
  }

  /**
   * The home score in a correct score event
   * @return csHome
   */
  @javax.annotation.Nullable
  public BigDecimal getCsHome() {
    return csHome;
  }

  public void setCsHome(BigDecimal csHome) {
    this.csHome = csHome;
  }


  public Selection currentPriceDen(BigDecimal currentPriceDen) {
    this.currentPriceDen = currentPriceDen;
    return this;
  }

  /**
   * Denominator of the price
   * @return currentPriceDen
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentPriceDen() {
    return currentPriceDen;
  }

  public void setCurrentPriceDen(BigDecimal currentPriceDen) {
    this.currentPriceDen = currentPriceDen;
  }


  public Selection currentPriceNum(BigDecimal currentPriceNum) {
    this.currentPriceNum = currentPriceNum;
    return this;
  }

  /**
   * Numerator of the price
   * @return currentPriceNum
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentPriceNum() {
    return currentPriceNum;
  }

  public void setCurrentPriceNum(BigDecimal currentPriceNum) {
    this.currentPriceNum = currentPriceNum;
  }


  public Selection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the selection
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Selection displayed(Boolean displayed) {
    this.displayed = displayed;
    return this;
  }

  /**
   * Wether this selection should be displayed or not
   * @return displayed
   */
  @javax.annotation.Nullable
  public Boolean getDisplayed() {
    return displayed;
  }

  public void setDisplayed(Boolean displayed) {
    this.displayed = displayed;
  }


  public Selection id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of the selection
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Selection isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

  /**
   * Indicates if the item is published
   * @return isPublished
   */
  @javax.annotation.Nullable
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public Selection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the selection
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Selection oddsDecimal(BigDecimal oddsDecimal) {
    this.oddsDecimal = oddsDecimal;
    return this;
  }

  /**
   * The selection price, in decimal format
   * @return oddsDecimal
   */
  @javax.annotation.Nonnull
  public BigDecimal getOddsDecimal() {
    return oddsDecimal;
  }

  public void setOddsDecimal(BigDecimal oddsDecimal) {
    this.oddsDecimal = oddsDecimal;
  }


  public Selection oddsFractional(BigDecimal oddsFractional) {
    this.oddsFractional = oddsFractional;
    return this;
  }

  /**
   * The selection price, in fractional format
   * @return oddsFractional
   */
  @javax.annotation.Nonnull
  public BigDecimal getOddsFractional() {
    return oddsFractional;
  }

  public void setOddsFractional(BigDecimal oddsFractional) {
    this.oddsFractional = oddsFractional;
  }


  public Selection order(BigDecimal order) {
    this.order = order;
    return this;
  }

  /**
   * The display order of the selection
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }

  public void setOrder(BigDecimal order) {
    this.order = order;
  }


  public Selection parentIds(List<String> parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public Selection addParentIdsItem(String parentIdsItem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<>();
    }
    this.parentIds.add(parentIdsItem);
    return this;
  }

  /**
   * A list of IDs of parent entities
   * @return parentIds
   */
  @javax.annotation.Nullable
  public List<String> getParentIds() {
    return parentIds;
  }

  public void setParentIds(List<String> parentIds) {
    this.parentIds = parentIds;
  }


  public Selection priceFormatted(PriceFormatted priceFormatted) {
    this.priceFormatted = priceFormatted;
    return this;
  }

  /**
   * Get priceFormatted
   * @return priceFormatted
   */
  @javax.annotation.Nullable
  public PriceFormatted getPriceFormatted() {
    return priceFormatted;
  }

  public void setPriceFormatted(PriceFormatted priceFormatted) {
    this.priceFormatted = priceFormatted;
  }


  public Selection result(String result) {
    this.result = result;
    return this;
  }

  /**
   * The result of this selection
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public Selection resultType(String resultType) {
    this.resultType = resultType;
    return this;
  }

  /**
   * football Result
   * @return resultType
   */
  @javax.annotation.Nullable
  public String getResultType() {
    return resultType;
  }

  public void setResultType(String resultType) {
    this.resultType = resultType;
  }


  public Selection runnerNum(BigDecimal runnerNum) {
    this.runnerNum = runnerNum;
    return this;
  }

  /**
   * The runner number in race events
   * @return runnerNum
   */
  @javax.annotation.Nullable
  public BigDecimal getRunnerNum() {
    return runnerNum;
  }

  public void setRunnerNum(BigDecimal runnerNum) {
    this.runnerNum = runnerNum;
  }


  public Selection settled(Boolean settled) {
    this.settled = settled;
    return this;
  }

  /**
   * Wether this selection has been settled or not
   * @return settled
   */
  @javax.annotation.Nullable
  public Boolean getSettled() {
    return settled;
  }

  public void setSettled(Boolean settled) {
    this.settled = settled;
  }


  public Selection status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the selection (A for Active or S for Suspended)
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Selection selection = (Selection) o;
    return Objects.equals(this.cashinPriceDen, selection.cashinPriceDen) &&
        Objects.equals(this.cashinPriceNum, selection.cashinPriceNum) &&
        Objects.equals(this.channels, selection.channels) &&
        Objects.equals(this.csAway, selection.csAway) &&
        Objects.equals(this.csHome, selection.csHome) &&
        Objects.equals(this.currentPriceDen, selection.currentPriceDen) &&
        Objects.equals(this.currentPriceNum, selection.currentPriceNum) &&
        Objects.equals(this.description, selection.description) &&
        Objects.equals(this.displayed, selection.displayed) &&
        Objects.equals(this.id, selection.id) &&
        Objects.equals(this.isPublished, selection.isPublished) &&
        Objects.equals(this.name, selection.name) &&
        Objects.equals(this.oddsDecimal, selection.oddsDecimal) &&
        Objects.equals(this.oddsFractional, selection.oddsFractional) &&
        Objects.equals(this.order, selection.order) &&
        Objects.equals(this.parentIds, selection.parentIds) &&
        Objects.equals(this.priceFormatted, selection.priceFormatted) &&
        Objects.equals(this.result, selection.result) &&
        Objects.equals(this.resultType, selection.resultType) &&
        Objects.equals(this.runnerNum, selection.runnerNum) &&
        Objects.equals(this.settled, selection.settled) &&
        Objects.equals(this.status, selection.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashinPriceDen, cashinPriceNum, channels, csAway, csHome, currentPriceDen, currentPriceNum, description, displayed, id, isPublished, name, oddsDecimal, oddsFractional, order, parentIds, priceFormatted, result, resultType, runnerNum, settled, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Selection {\n");
    sb.append("    cashinPriceDen: ").append(toIndentedString(cashinPriceDen)).append("\n");
    sb.append("    cashinPriceNum: ").append(toIndentedString(cashinPriceNum)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    csAway: ").append(toIndentedString(csAway)).append("\n");
    sb.append("    csHome: ").append(toIndentedString(csHome)).append("\n");
    sb.append("    currentPriceDen: ").append(toIndentedString(currentPriceDen)).append("\n");
    sb.append("    currentPriceNum: ").append(toIndentedString(currentPriceNum)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayed: ").append(toIndentedString(displayed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oddsDecimal: ").append(toIndentedString(oddsDecimal)).append("\n");
    sb.append("    oddsFractional: ").append(toIndentedString(oddsFractional)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    parentIds: ").append(toIndentedString(parentIds)).append("\n");
    sb.append("    priceFormatted: ").append(toIndentedString(priceFormatted)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    runnerNum: ").append(toIndentedString(runnerNum)).append("\n");
    sb.append("    settled: ").append(toIndentedString(settled)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cashinPriceDen");
    openapiFields.add("cashinPriceNum");
    openapiFields.add("channels");
    openapiFields.add("csAway");
    openapiFields.add("csHome");
    openapiFields.add("currentPriceDen");
    openapiFields.add("currentPriceNum");
    openapiFields.add("description");
    openapiFields.add("displayed");
    openapiFields.add("id");
    openapiFields.add("isPublished");
    openapiFields.add("name");
    openapiFields.add("oddsDecimal");
    openapiFields.add("oddsFractional");
    openapiFields.add("order");
    openapiFields.add("parentIds");
    openapiFields.add("priceFormatted");
    openapiFields.add("result");
    openapiFields.add("resultType");
    openapiFields.add("runnerNum");
    openapiFields.add("settled");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("oddsDecimal");
    openapiRequiredFields.add("oddsFractional");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Selection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Selection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Selection is not found in the empty JSON string", Selection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Selection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Selection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Selection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull() && !jsonObj.get("channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentIds") != null && !jsonObj.get("parentIds").isJsonNull() && !jsonObj.get("parentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentIds` to be an array in the JSON string but got `%s`", jsonObj.get("parentIds").toString()));
      }
      // validate the optional field `priceFormatted`
      if (jsonObj.get("priceFormatted") != null && !jsonObj.get("priceFormatted").isJsonNull()) {
        PriceFormatted.validateJsonElement(jsonObj.get("priceFormatted"));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("resultType") != null && !jsonObj.get("resultType").isJsonNull()) && !jsonObj.get("resultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultType").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Selection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Selection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Selection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Selection.class));

       return (TypeAdapter<T>) new TypeAdapter<Selection>() {
           @Override
           public void write(JsonWriter out, Selection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Selection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Selection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Selection
   * @throws IOException if the JSON string is invalid with respect to Selection
   */
  public static Selection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Selection.class);
  }

  /**
   * Convert an instance of Selection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

