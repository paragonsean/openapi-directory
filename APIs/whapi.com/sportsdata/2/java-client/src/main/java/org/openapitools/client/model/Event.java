/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Market;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:47.763944-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_BET_IN_RUNNING_DELAY = "betInRunningDelay";
  @SerializedName(SERIALIZED_NAME_BET_IN_RUNNING_DELAY)
  private BigDecimal betInRunningDelay;

  public static final String SERIALIZED_NAME_BETTING_STATUS = "bettingStatus";
  @SerializedName(SERIALIZED_NAME_BETTING_STATUS)
  private String bettingStatus;

  public static final String SERIALIZED_NAME_CASHIN_AVAILABLE = "cashinAvailable";
  @SerializedName(SERIALIZED_NAME_CASHIN_AVAILABLE)
  private Boolean cashinAvailable;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<String> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAYED = "displayed";
  @SerializedName(SERIALIZED_NAME_DISPLAYED)
  private Boolean displayed;

  public static final String SERIALIZED_NAME_EVENT_SORT = "eventSort";
  @SerializedName(SERIALIZED_NAME_EVENT_SORT)
  private String eventSort;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_IN_PLAY_MARKETS = "hasInPlayMarkets";
  @SerializedName(SERIALIZED_NAME_HAS_IN_PLAY_MARKETS)
  private Boolean hasInPlayMarkets;

  public static final String SERIALIZED_NAME_HAS_LIVE_PRICES = "hasLivePrices";
  @SerializedName(SERIALIZED_NAME_HAS_LIVE_PRICES)
  private Boolean hasLivePrices;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_IN_PLAY = "isInPlay";
  @SerializedName(SERIALIZED_NAME_IS_IN_PLAY)
  private Boolean isInPlay;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_MARKET_COUNT_ACTIVE_IN_PLAY = "marketCountActiveInPlay";
  @SerializedName(SERIALIZED_NAME_MARKET_COUNT_ACTIVE_IN_PLAY)
  private BigDecimal marketCountActiveInPlay;

  public static final String SERIALIZED_NAME_MARKET_COUNT_ACTIVE_PRE_MATCH = "marketCountActivePreMatch";
  @SerializedName(SERIALIZED_NAME_MARKET_COUNT_ACTIVE_PRE_MATCH)
  private BigDecimal marketCountActivePreMatch;

  public static final String SERIALIZED_NAME_MARKET_COUNT_ACTIVE_TOTAL = "marketCountActiveTotal";
  @SerializedName(SERIALIZED_NAME_MARKET_COUNT_ACTIVE_TOTAL)
  private BigDecimal marketCountActiveTotal;

  public static final String SERIALIZED_NAME_MARKET_COUNT_IN_PLAY = "marketCountInPlay";
  @SerializedName(SERIALIZED_NAME_MARKET_COUNT_IN_PLAY)
  private BigDecimal marketCountInPlay;

  public static final String SERIALIZED_NAME_MARKET_COUNT_PRE_MATCH = "marketCountPreMatch";
  @SerializedName(SERIALIZED_NAME_MARKET_COUNT_PRE_MATCH)
  private BigDecimal marketCountPreMatch;

  public static final String SERIALIZED_NAME_MARKETS = "markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<Market> markets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_PARENT_IDS = "parentIds";
  @SerializedName(SERIALIZED_NAME_PARENT_IDS)
  private List<String> parentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RACE_NUM = "raceNum";
  @SerializedName(SERIALIZED_NAME_RACE_NUM)
  private String raceNum;

  public static final String SERIALIZED_NAME_SETTLED = "settled";
  @SerializedName(SERIALIZED_NAME_SETTLED)
  private Boolean settled;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Event() {
  }

  public Event betInRunningDelay(BigDecimal betInRunningDelay) {
    this.betInRunningDelay = betInRunningDelay;
    return this;
  }

  /**
   * Delay in seconds between bet being sent and bet being placed
   * @return betInRunningDelay
   */
  @javax.annotation.Nullable
  public BigDecimal getBetInRunningDelay() {
    return betInRunningDelay;
  }

  public void setBetInRunningDelay(BigDecimal betInRunningDelay) {
    this.betInRunningDelay = betInRunningDelay;
  }


  public Event bettingStatus(String bettingStatus) {
    this.bettingStatus = bettingStatus;
    return this;
  }

  /**
   * Betting status of the event
   * @return bettingStatus
   */
  @javax.annotation.Nullable
  public String getBettingStatus() {
    return bettingStatus;
  }

  public void setBettingStatus(String bettingStatus) {
    this.bettingStatus = bettingStatus;
  }


  public Event cashinAvailable(Boolean cashinAvailable) {
    this.cashinAvailable = cashinAvailable;
    return this;
  }

  /**
   * Whether cashin is available on this event
   * @return cashinAvailable
   */
  @javax.annotation.Nullable
  public Boolean getCashinAvailable() {
    return cashinAvailable;
  }

  public void setCashinAvailable(Boolean cashinAvailable) {
    this.cashinAvailable = cashinAvailable;
  }


  public Event channels(List<String> channels) {
    this.channels = channels;
    return this;
  }

  public Event addChannelsItem(String channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * A list of channels that apply to this event
   * @return channels
   */
  @javax.annotation.Nullable
  public List<String> getChannels() {
    return channels;
  }

  public void setChannels(List<String> channels) {
    this.channels = channels;
  }


  public Event country(String country) {
    this.country = country;
    return this;
  }

  /**
   * A string indicating the country code of this event if available
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the event
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Event displayed(Boolean displayed) {
    this.displayed = displayed;
    return this;
  }

  /**
   * whether the event should be displayed or not
   * @return displayed
   */
  @javax.annotation.Nullable
  public Boolean getDisplayed() {
    return displayed;
  }

  public void setDisplayed(Boolean displayed) {
    this.displayed = displayed;
  }


  public Event eventSort(String eventSort) {
    this.eventSort = eventSort;
    return this;
  }

  /**
   * What type of event is this? (e.g. MTCH, TRNMT)
   * @return eventSort
   */
  @javax.annotation.Nullable
  public String getEventSort() {
    return eventSort;
  }

  public void setEventSort(String eventSort) {
    this.eventSort = eventSort;
  }


  public Event flags(List<String> flags) {
    this.flags = flags;
    return this;
  }

  public Event addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * A list of flags that apply to this event
   * @return flags
   */
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public Event hasInPlayMarkets(Boolean hasInPlayMarkets) {
    this.hasInPlayMarkets = hasInPlayMarkets;
    return this;
  }

  /**
   * Whether this event has inplay markets
   * @return hasInPlayMarkets
   */
  @javax.annotation.Nullable
  public Boolean getHasInPlayMarkets() {
    return hasInPlayMarkets;
  }

  public void setHasInPlayMarkets(Boolean hasInPlayMarkets) {
    this.hasInPlayMarkets = hasInPlayMarkets;
  }


  public Event hasLivePrices(Boolean hasLivePrices) {
    this.hasLivePrices = hasLivePrices;
    return this;
  }

  /**
   * Whether this event has Live Prices
   * @return hasLivePrices
   */
  @javax.annotation.Nullable
  public Boolean getHasLivePrices() {
    return hasLivePrices;
  }

  public void setHasLivePrices(Boolean hasLivePrices) {
    this.hasLivePrices = hasLivePrices;
  }


  public Event id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of the event
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Event isInPlay(Boolean isInPlay) {
    this.isInPlay = isInPlay;
    return this;
  }

  /**
   * Whether this event has started and therefore is inplay
   * @return isInPlay
   */
  @javax.annotation.Nullable
  public Boolean getIsInPlay() {
    return isInPlay;
  }

  public void setIsInPlay(Boolean isInPlay) {
    this.isInPlay = isInPlay;
  }


  public Event isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

  /**
   * Indicates if the item is published
   * @return isPublished
   */
  @javax.annotation.Nullable
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public Event marketCountActiveInPlay(BigDecimal marketCountActiveInPlay) {
    this.marketCountActiveInPlay = marketCountActiveInPlay;
    return this;
  }

  /**
   * Count of active markets in play
   * @return marketCountActiveInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketCountActiveInPlay() {
    return marketCountActiveInPlay;
  }

  public void setMarketCountActiveInPlay(BigDecimal marketCountActiveInPlay) {
    this.marketCountActiveInPlay = marketCountActiveInPlay;
  }


  public Event marketCountActivePreMatch(BigDecimal marketCountActivePreMatch) {
    this.marketCountActivePreMatch = marketCountActivePreMatch;
    return this;
  }

  /**
   * count of active market pre-match
   * @return marketCountActivePreMatch
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketCountActivePreMatch() {
    return marketCountActivePreMatch;
  }

  public void setMarketCountActivePreMatch(BigDecimal marketCountActivePreMatch) {
    this.marketCountActivePreMatch = marketCountActivePreMatch;
  }


  public Event marketCountActiveTotal(BigDecimal marketCountActiveTotal) {
    this.marketCountActiveTotal = marketCountActiveTotal;
    return this;
  }

  /**
   * Total market count
   * @return marketCountActiveTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketCountActiveTotal() {
    return marketCountActiveTotal;
  }

  public void setMarketCountActiveTotal(BigDecimal marketCountActiveTotal) {
    this.marketCountActiveTotal = marketCountActiveTotal;
  }


  public Event marketCountInPlay(BigDecimal marketCountInPlay) {
    this.marketCountInPlay = marketCountInPlay;
    return this;
  }

  /**
   * Total inplay markets
   * @return marketCountInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketCountInPlay() {
    return marketCountInPlay;
  }

  public void setMarketCountInPlay(BigDecimal marketCountInPlay) {
    this.marketCountInPlay = marketCountInPlay;
  }


  public Event marketCountPreMatch(BigDecimal marketCountPreMatch) {
    this.marketCountPreMatch = marketCountPreMatch;
    return this;
  }

  /**
   * Total prematch markets
   * @return marketCountPreMatch
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketCountPreMatch() {
    return marketCountPreMatch;
  }

  public void setMarketCountPreMatch(BigDecimal marketCountPreMatch) {
    this.marketCountPreMatch = marketCountPreMatch;
  }


  public Event markets(List<Market> markets) {
    this.markets = markets;
    return this;
  }

  public Event addMarketsItem(Market marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

  /**
   * A list of markets belonging to this event
   * @return markets
   */
  @javax.annotation.Nullable
  public List<Market> getMarkets() {
    return markets;
  }

  public void setMarkets(List<Market> markets) {
    this.markets = markets;
  }


  public Event name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the event
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Event order(BigDecimal order) {
    this.order = order;
    return this;
  }

  /**
   * Display order of the event
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }

  public void setOrder(BigDecimal order) {
    this.order = order;
  }


  public Event parentIds(List<String> parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public Event addParentIdsItem(String parentIdsItem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<>();
    }
    this.parentIds.add(parentIdsItem);
    return this;
  }

  /**
   * A list of IDs of parent entities
   * @return parentIds
   */
  @javax.annotation.Nullable
  public List<String> getParentIds() {
    return parentIds;
  }

  public void setParentIds(List<String> parentIds) {
    this.parentIds = parentIds;
  }


  public Event raceNum(String raceNum) {
    this.raceNum = raceNum;
    return this;
  }

  /**
   * Race number for race events
   * @return raceNum
   */
  @javax.annotation.Nullable
  public String getRaceNum() {
    return raceNum;
  }

  public void setRaceNum(String raceNum) {
    this.raceNum = raceNum;
  }


  public Event settled(Boolean settled) {
    this.settled = settled;
    return this;
  }

  /**
   * Whether the event has been settled
   * @return settled
   */
  @javax.annotation.Nullable
  public Boolean getSettled() {
    return settled;
  }

  public void setSettled(Boolean settled) {
    this.settled = settled;
  }


  public Event startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * The start date and time of the event
   * @return startDateTime
   */
  @javax.annotation.Nonnull
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public Event status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the event (A for Active, S for Suspended)
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.betInRunningDelay, event.betInRunningDelay) &&
        Objects.equals(this.bettingStatus, event.bettingStatus) &&
        Objects.equals(this.cashinAvailable, event.cashinAvailable) &&
        Objects.equals(this.channels, event.channels) &&
        Objects.equals(this.country, event.country) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.displayed, event.displayed) &&
        Objects.equals(this.eventSort, event.eventSort) &&
        Objects.equals(this.flags, event.flags) &&
        Objects.equals(this.hasInPlayMarkets, event.hasInPlayMarkets) &&
        Objects.equals(this.hasLivePrices, event.hasLivePrices) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.isInPlay, event.isInPlay) &&
        Objects.equals(this.isPublished, event.isPublished) &&
        Objects.equals(this.marketCountActiveInPlay, event.marketCountActiveInPlay) &&
        Objects.equals(this.marketCountActivePreMatch, event.marketCountActivePreMatch) &&
        Objects.equals(this.marketCountActiveTotal, event.marketCountActiveTotal) &&
        Objects.equals(this.marketCountInPlay, event.marketCountInPlay) &&
        Objects.equals(this.marketCountPreMatch, event.marketCountPreMatch) &&
        Objects.equals(this.markets, event.markets) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.order, event.order) &&
        Objects.equals(this.parentIds, event.parentIds) &&
        Objects.equals(this.raceNum, event.raceNum) &&
        Objects.equals(this.settled, event.settled) &&
        Objects.equals(this.startDateTime, event.startDateTime) &&
        Objects.equals(this.status, event.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(betInRunningDelay, bettingStatus, cashinAvailable, channels, country, description, displayed, eventSort, flags, hasInPlayMarkets, hasLivePrices, id, isInPlay, isPublished, marketCountActiveInPlay, marketCountActivePreMatch, marketCountActiveTotal, marketCountInPlay, marketCountPreMatch, markets, name, order, parentIds, raceNum, settled, startDateTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    betInRunningDelay: ").append(toIndentedString(betInRunningDelay)).append("\n");
    sb.append("    bettingStatus: ").append(toIndentedString(bettingStatus)).append("\n");
    sb.append("    cashinAvailable: ").append(toIndentedString(cashinAvailable)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayed: ").append(toIndentedString(displayed)).append("\n");
    sb.append("    eventSort: ").append(toIndentedString(eventSort)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    hasInPlayMarkets: ").append(toIndentedString(hasInPlayMarkets)).append("\n");
    sb.append("    hasLivePrices: ").append(toIndentedString(hasLivePrices)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isInPlay: ").append(toIndentedString(isInPlay)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    marketCountActiveInPlay: ").append(toIndentedString(marketCountActiveInPlay)).append("\n");
    sb.append("    marketCountActivePreMatch: ").append(toIndentedString(marketCountActivePreMatch)).append("\n");
    sb.append("    marketCountActiveTotal: ").append(toIndentedString(marketCountActiveTotal)).append("\n");
    sb.append("    marketCountInPlay: ").append(toIndentedString(marketCountInPlay)).append("\n");
    sb.append("    marketCountPreMatch: ").append(toIndentedString(marketCountPreMatch)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    parentIds: ").append(toIndentedString(parentIds)).append("\n");
    sb.append("    raceNum: ").append(toIndentedString(raceNum)).append("\n");
    sb.append("    settled: ").append(toIndentedString(settled)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("betInRunningDelay");
    openapiFields.add("bettingStatus");
    openapiFields.add("cashinAvailable");
    openapiFields.add("channels");
    openapiFields.add("country");
    openapiFields.add("description");
    openapiFields.add("displayed");
    openapiFields.add("eventSort");
    openapiFields.add("flags");
    openapiFields.add("hasInPlayMarkets");
    openapiFields.add("hasLivePrices");
    openapiFields.add("id");
    openapiFields.add("isInPlay");
    openapiFields.add("isPublished");
    openapiFields.add("marketCountActiveInPlay");
    openapiFields.add("marketCountActivePreMatch");
    openapiFields.add("marketCountActiveTotal");
    openapiFields.add("marketCountInPlay");
    openapiFields.add("marketCountPreMatch");
    openapiFields.add("markets");
    openapiFields.add("name");
    openapiFields.add("order");
    openapiFields.add("parentIds");
    openapiFields.add("raceNum");
    openapiFields.add("settled");
    openapiFields.add("startDateTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("startDateTime");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bettingStatus") != null && !jsonObj.get("bettingStatus").isJsonNull()) && !jsonObj.get("bettingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bettingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bettingStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull() && !jsonObj.get("channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventSort") != null && !jsonObj.get("eventSort").isJsonNull()) && !jsonObj.get("eventSort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventSort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("markets") != null && !jsonObj.get("markets").isJsonNull()) {
        JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("markets");
        if (jsonArraymarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markets` to be an array in the JSON string but got `%s`", jsonObj.get("markets").toString()));
          }

          // validate the optional field `markets` (array)
          for (int i = 0; i < jsonArraymarkets.size(); i++) {
            Market.validateJsonElement(jsonArraymarkets.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentIds") != null && !jsonObj.get("parentIds").isJsonNull() && !jsonObj.get("parentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentIds` to be an array in the JSON string but got `%s`", jsonObj.get("parentIds").toString()));
      }
      if ((jsonObj.get("raceNum") != null && !jsonObj.get("raceNum").isJsonNull()) && !jsonObj.get("raceNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raceNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raceNum").toString()));
      }
      if (!jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

