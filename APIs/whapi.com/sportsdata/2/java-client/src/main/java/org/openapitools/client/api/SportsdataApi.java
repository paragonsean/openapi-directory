/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClassesWrapper;
import org.openapitools.client.model.Competition;
import org.openapitools.client.model.CompetitionsWrapper;
import org.openapitools.client.model.ErrorsWrapper;
import org.openapitools.client.model.EventsWrapper;
import org.openapitools.client.model.MarketGroupsWrapper;
import org.openapitools.client.model.MarketsWrapper;
import org.openapitools.client.model.SelectionsWrapper;
import org.openapitools.client.model.SportsWrapper;
import org.openapitools.client.model.TopBetsWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SportsdataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SportsdataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SportsdataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getClassesForSport
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassesForSportCall(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sports/{sportId}/classes/"
            .replace("{" + "sportId" + "}", localVarApiClient.escapeString(sportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (displayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayed", displayed));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassesForSportValidateBeforeCall(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getClassesForSport(Async)");
        }

        // verify the required parameter 'sportId' is set
        if (sportId == null) {
            throw new ApiException("Missing the required parameter 'sportId' when calling getClassesForSport(Async)");
        }

        return getClassesForSportCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);

    }

    /**
     * Retrieves a list of classes for a given sport id.
     * Retrieves a list of classes for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ClassesWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ClassesWrapper getClassesForSport(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        ApiResponse<ClassesWrapper> localVarResp = getClassesForSportWithHttpInfo(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of classes for a given sport id.
     * Retrieves a list of classes for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;ClassesWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassesWrapper> getClassesForSportWithHttpInfo(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        okhttp3.Call localVarCall = getClassesForSportValidateBeforeCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, null);
        Type localVarReturnType = new TypeToken<ClassesWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of classes for a given sport id. (asynchronously)
     * Retrieves a list of classes for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassesForSportAsync(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback<ClassesWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassesForSportValidateBeforeCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);
        Type localVarReturnType = new TypeToken<ClassesWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompetition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionCall(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/competitions/{competitionId}"
            .replace("{" + "competitionId" + "}", localVarApiClient.escapeString(competitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompetitionValidateBeforeCall(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getCompetition(Async)");
        }

        // verify the required parameter 'competitionId' is set
        if (competitionId == null) {
            throw new ApiException("Missing the required parameter 'competitionId' when calling getCompetition(Async)");
        }

        return getCompetitionCall(apiKey, competitionId, fields, include, exclude, culture, _callback);

    }

    /**
     * Retrieves a specific competition
     * Retrieves a specific competition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return Competition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public Competition getCompetition(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String culture) throws ApiException {
        ApiResponse<Competition> localVarResp = getCompetitionWithHttpInfo(apiKey, competitionId, fields, include, exclude, culture);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific competition
     * Retrieves a specific competition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;Competition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Competition> getCompetitionWithHttpInfo(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String culture) throws ApiException {
        okhttp3.Call localVarCall = getCompetitionValidateBeforeCall(apiKey, competitionId, fields, include, exclude, culture, null);
        Type localVarReturnType = new TypeToken<Competition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific competition (asynchronously)
     * Retrieves a specific competition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionAsync(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback<Competition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompetitionValidateBeforeCall(apiKey, competitionId, fields, include, exclude, culture, _callback);
        Type localVarReturnType = new TypeToken<Competition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompetitionsForClass
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionsForClassCall(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{classId}/competitions/"
            .replace("{" + "classId" + "}", localVarApiClient.escapeString(classId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (displayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayed", displayed));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompetitionsForClassValidateBeforeCall(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getCompetitionsForClass(Async)");
        }

        // verify the required parameter 'classId' is set
        if (classId == null) {
            throw new ApiException("Missing the required parameter 'classId' when calling getCompetitionsForClass(Async)");
        }

        return getCompetitionsForClassCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);

    }

    /**
     * Retrieves a list of competitions for a given class id.
     * Retrieves a list of competitions for a given class id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return CompetitionsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public CompetitionsWrapper getCompetitionsForClass(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        ApiResponse<CompetitionsWrapper> localVarResp = getCompetitionsForClassWithHttpInfo(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of competitions for a given class id.
     * Retrieves a list of competitions for a given class id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;CompetitionsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompetitionsWrapper> getCompetitionsForClassWithHttpInfo(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        okhttp3.Call localVarCall = getCompetitionsForClassValidateBeforeCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, null);
        Type localVarReturnType = new TypeToken<CompetitionsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of competitions for a given class id. (asynchronously)
     * Retrieves a list of competitions for a given class id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionsForClassAsync(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback<CompetitionsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompetitionsForClassValidateBeforeCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);
        Type localVarReturnType = new TypeToken<CompetitionsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompetitionsForSport
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionsForSportCall(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sports/{sportId}/competitions/"
            .replace("{" + "sportId" + "}", localVarApiClient.escapeString(sportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (displayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayed", displayed));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompetitionsForSportValidateBeforeCall(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getCompetitionsForSport(Async)");
        }

        // verify the required parameter 'sportId' is set
        if (sportId == null) {
            throw new ApiException("Missing the required parameter 'sportId' when calling getCompetitionsForSport(Async)");
        }

        return getCompetitionsForSportCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);

    }

    /**
     * Retrieves a list of competitions for a given sport id.
     * Retrieves a list of competitions for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return CompetitionsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public CompetitionsWrapper getCompetitionsForSport(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        ApiResponse<CompetitionsWrapper> localVarResp = getCompetitionsForSportWithHttpInfo(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of competitions for a given sport id.
     * Retrieves a list of competitions for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;CompetitionsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompetitionsWrapper> getCompetitionsForSportWithHttpInfo(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture) throws ApiException {
        okhttp3.Call localVarCall = getCompetitionsForSportValidateBeforeCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, null);
        Type localVarReturnType = new TypeToken<CompetitionsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of competitions for a given sport id. (asynchronously)
     * Retrieves a list of competitions for a given sport id.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportId The sport id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompetitionsForSportAsync(String apiKey, String sportId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, String status, String sort, Integer offset, Integer limit, String culture, final ApiCallback<CompetitionsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompetitionsForSportValidateBeforeCall(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture, _callback);
        Type localVarReturnType = new TypeToken<CompetitionsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvent
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCall(String apiKey, String eventId, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean headlineSummary, Integer marketCount, List<String> marketIds, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAllDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllDescendants", includeAllDescendants));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (headlineSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headlineSummary", headlineSummary));
        }

        if (marketCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketCount", marketCount));
        }

        if (marketIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketIds", marketIds));
        }

        if (includeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmpty", includeEmpty));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (marketPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketPublished", marketPublished));
        }

        if (marketStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketStatus", marketStatus));
        }

        if (marketDisplayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketDisplayed", marketDisplayed));
        }

        if (marketChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketChannel", marketChannel));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketEW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketEW", marketEW));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(String apiKey, String eventId, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean headlineSummary, Integer marketCount, List<String> marketIds, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEvent(Async)");
        }

        return getEventCall(apiKey, eventId, includeAllDescendants, fields, include, exclude, headlineSummary, marketCount, marketIds, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Retrieves a single event by ID.
     * Retrieves a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return EventsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public EventsWrapper getEvent(String apiKey, String eventId, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean headlineSummary, Integer marketCount, List<String> marketIds, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<EventsWrapper> localVarResp = getEventWithHttpInfo(apiKey, eventId, includeAllDescendants, fields, include, exclude, headlineSummary, marketCount, marketIds, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Retrieves a single event by ID.
     * Retrieves a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;EventsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsWrapper> getEventWithHttpInfo(String apiKey, String eventId, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean headlineSummary, Integer marketCount, List<String> marketIds, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(apiKey, eventId, includeAllDescendants, fields, include, exclude, headlineSummary, marketCount, marketIds, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a single event by ID. (asynchronously)
     * Retrieves a single event by ID.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventAsync(String apiKey, String eventId, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean headlineSummary, Integer marketCount, List<String> marketIds, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<EventsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(apiKey, eventId, includeAllDescendants, fields, include, exclude, headlineSummary, marketCount, marketIds, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents
     * @param apiKey Your API Key available from your developer portal (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsCall(String apiKey, List<String> ids, String isPublished, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, String channel, Boolean settled, Boolean includeEmpty, Boolean headlineSummary, Integer marketCount, String sort, Integer offset, Integer limit, List<String> marketIds, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (includeAllDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllDescendants", includeAllDescendants));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (settled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settled", settled));
        }

        if (includeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmpty", includeEmpty));
        }

        if (headlineSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headlineSummary", headlineSummary));
        }

        if (marketCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketCount", marketCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marketIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "marketIds", marketIds));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (marketPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketPublished", marketPublished));
        }

        if (marketStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketStatus", marketStatus));
        }

        if (marketDisplayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketDisplayed", marketDisplayed));
        }

        if (marketChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketChannel", marketChannel));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketEW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketEW", marketEW));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(String apiKey, List<String> ids, String isPublished, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, String channel, Boolean settled, Boolean includeEmpty, Boolean headlineSummary, Integer marketCount, String sort, Integer offset, Integer limit, List<String> marketIds, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEvents(Async)");
        }

        return getEventsCall(apiKey, ids, isPublished, includeAllDescendants, fields, include, exclude, channel, settled, includeEmpty, headlineSummary, marketCount, sort, offset, limit, marketIds, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Retrieves a list of events for the provided IDs.
     * Retrieves a list of events for the provided IDs.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return EventsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public EventsWrapper getEvents(String apiKey, List<String> ids, String isPublished, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, String channel, Boolean settled, Boolean includeEmpty, Boolean headlineSummary, Integer marketCount, String sort, Integer offset, Integer limit, List<String> marketIds, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<EventsWrapper> localVarResp = getEventsWithHttpInfo(apiKey, ids, isPublished, includeAllDescendants, fields, include, exclude, channel, settled, includeEmpty, headlineSummary, marketCount, sort, offset, limit, marketIds, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of events for the provided IDs.
     * Retrieves a list of events for the provided IDs.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;EventsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsWrapper> getEventsWithHttpInfo(String apiKey, List<String> ids, String isPublished, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, String channel, Boolean settled, Boolean includeEmpty, Boolean headlineSummary, Integer marketCount, String sort, Integer offset, Integer limit, List<String> marketIds, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(apiKey, ids, isPublished, includeAllDescendants, fields, include, exclude, channel, settled, includeEmpty, headlineSummary, marketCount, sort, offset, limit, marketIds, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of events for the provided IDs. (asynchronously)
     * Retrieves a list of events for the provided IDs.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param marketIds Comma-seaerated list of market IDs to filter by (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsAsync(String apiKey, List<String> ids, String isPublished, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, String channel, Boolean settled, Boolean includeEmpty, Boolean headlineSummary, Integer marketCount, String sort, Integer offset, Integer limit, List<String> marketIds, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<EventsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(apiKey, ids, isPublished, includeAllDescendants, fields, include, exclude, channel, settled, includeEmpty, headlineSummary, marketCount, sort, offset, limit, marketIds, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsForClass
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForClassCall(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/classes/{classId}/events/"
            .replace("{" + "classId" + "}", localVarApiClient.escapeString(classId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (displayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayed", displayed));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (settled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settled", settled));
        }

        if (includeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmpty", includeEmpty));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (headlineSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headlineSummary", headlineSummary));
        }

        if (includeAllDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllDescendants", includeAllDescendants));
        }

        if (isInPlay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInPlay", isInPlay));
        }

        if (marketCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketCount", marketCount));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (eventSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventSort", eventSort));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (marketPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketPublished", marketPublished));
        }

        if (marketStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketStatus", marketStatus));
        }

        if (marketDisplayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketDisplayed", marketDisplayed));
        }

        if (marketChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketChannel", marketChannel));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketEW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketEW", marketEW));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsForClassValidateBeforeCall(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEventsForClass(Async)");
        }

        // verify the required parameter 'classId' is set
        if (classId == null) {
            throw new ApiException("Missing the required parameter 'classId' when calling getEventsForClass(Async)");
        }

        return getEventsForClassCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Retrieves a list of events for a given class id.
     * Retrieves a list of events for a given class id. &#39;includeAllDescendants&#39; parameter should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return EventsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public EventsWrapper getEventsForClass(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<EventsWrapper> localVarResp = getEventsForClassWithHttpInfo(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of events for a given class id.
     * Retrieves a list of events for a given class id. &#39;includeAllDescendants&#39; parameter should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;EventsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsWrapper> getEventsForClassWithHttpInfo(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getEventsForClassValidateBeforeCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of events for a given class id. (asynchronously)
     * Retrieves a list of events for a given class id. &#39;includeAllDescendants&#39; parameter should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param classId The class id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForClassAsync(String apiKey, String classId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<EventsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsForClassValidateBeforeCall(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsForCompetition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForCompetitionCall(String apiKey, String competitionId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String marketGroupId, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/competitions/{competitionId}/events/"
            .replace("{" + "competitionId" + "}", localVarApiClient.escapeString(competitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (displayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayed", displayed));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (settled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("settled", settled));
        }

        if (includeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmpty", includeEmpty));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (headlineSummary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headlineSummary", headlineSummary));
        }

        if (includeAllDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllDescendants", includeAllDescendants));
        }

        if (isInPlay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInPlay", isInPlay));
        }

        if (marketCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketCount", marketCount));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (marketGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketGroupId", marketGroupId));
        }

        if (eventSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventSort", eventSort));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (marketPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketPublished", marketPublished));
        }

        if (marketStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketStatus", marketStatus));
        }

        if (marketDisplayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketDisplayed", marketDisplayed));
        }

        if (marketChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketChannel", marketChannel));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketEW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketEW", marketEW));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsForCompetitionValidateBeforeCall(String apiKey, String competitionId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String marketGroupId, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEventsForCompetition(Async)");
        }

        // verify the required parameter 'competitionId' is set
        if (competitionId == null) {
            throw new ApiException("Missing the required parameter 'competitionId' when calling getEventsForCompetition(Async)");
        }

        return getEventsForCompetitionCall(apiKey, competitionId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, marketGroupId, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Retrieves a list of events for a given competition id.
     * Retrieves a list of events for a given competition id. &#39;headlineSummary&#39; and includeAllDescendants parameters should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return EventsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public EventsWrapper getEventsForCompetition(String apiKey, String competitionId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String marketGroupId, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<EventsWrapper> localVarResp = getEventsForCompetitionWithHttpInfo(apiKey, competitionId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, marketGroupId, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of events for a given competition id.
     * Retrieves a list of events for a given competition id. &#39;headlineSummary&#39; and includeAllDescendants parameters should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;EventsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsWrapper> getEventsForCompetitionWithHttpInfo(String apiKey, String competitionId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String marketGroupId, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getEventsForCompetitionValidateBeforeCall(apiKey, competitionId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, marketGroupId, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of events for a given competition id. (asynchronously)
     * Retrieves a list of events for a given competition id. &#39;headlineSummary&#39; and includeAllDescendants parameters should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param displayed Specify whether to return displayed entities or not (optional, default to true)
     * @param channel Specify a channel filter and only results from that channel will be returned (optional)
     * @param settled Specify wether only settled entities should be returned (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param status Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param headlineSummary Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned. (optional, default to false)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param isInPlay Show only events that are in-play (optional)
     * @param marketCount Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned. (optional, default to 1)
     * @param date Return only events for the specified date (yyyy-MM-dd). (optional)
     * @param dateFrom The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param dateTo The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss) (optional)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (optional)
     * @param eventSort Filter event by event sort (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsForCompetitionAsync(String apiKey, String competitionId, String isPublished, List<String> fields, List<String> include, List<String> exclude, String displayed, String channel, Boolean settled, Boolean includeEmpty, String status, String sort, Integer offset, Integer limit, Boolean headlineSummary, Boolean includeAllDescendants, Boolean isInPlay, Integer marketCount, String date, String dateFrom, String dateTo, String marketGroupId, String eventSort, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<EventsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsForCompetitionValidateBeforeCall(apiKey, competitionId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, marketGroupId, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<EventsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketGroupsForCompetition
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param name Filter by market group name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketGroupsForCompetitionCall(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String sort, Integer offset, Integer limit, String culture, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/competitions/{competitionId}/marketgroups/"
            .replace("{" + "competitionId" + "}", localVarApiClient.escapeString(competitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketGroupsForCompetitionValidateBeforeCall(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String sort, Integer offset, Integer limit, String culture, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getMarketGroupsForCompetition(Async)");
        }

        // verify the required parameter 'competitionId' is set
        if (competitionId == null) {
            throw new ApiException("Missing the required parameter 'competitionId' when calling getMarketGroupsForCompetition(Async)");
        }

        return getMarketGroupsForCompetitionCall(apiKey, competitionId, fields, include, exclude, sort, offset, limit, culture, name, _callback);

    }

    /**
     * Retrieves a list of market groups for a given competition id
     * Retrieves a list of market groups for a given competition id
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param name Filter by market group name (optional)
     * @return MarketGroupsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public MarketGroupsWrapper getMarketGroupsForCompetition(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String sort, Integer offset, Integer limit, String culture, String name) throws ApiException {
        ApiResponse<MarketGroupsWrapper> localVarResp = getMarketGroupsForCompetitionWithHttpInfo(apiKey, competitionId, fields, include, exclude, sort, offset, limit, culture, name);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of market groups for a given competition id
     * Retrieves a list of market groups for a given competition id
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param name Filter by market group name (optional)
     * @return ApiResponse&lt;MarketGroupsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketGroupsWrapper> getMarketGroupsForCompetitionWithHttpInfo(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String sort, Integer offset, Integer limit, String culture, String name) throws ApiException {
        okhttp3.Call localVarCall = getMarketGroupsForCompetitionValidateBeforeCall(apiKey, competitionId, fields, include, exclude, sort, offset, limit, culture, name, null);
        Type localVarReturnType = new TypeToken<MarketGroupsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of market groups for a given competition id (asynchronously)
     * Retrieves a list of market groups for a given competition id
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param name Filter by market group name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketGroupsForCompetitionAsync(String apiKey, String competitionId, List<String> fields, List<String> include, List<String> exclude, String sort, Integer offset, Integer limit, String culture, String name, final ApiCallback<MarketGroupsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketGroupsForCompetitionValidateBeforeCall(apiKey, competitionId, fields, include, exclude, sort, offset, limit, culture, name, _callback);
        Type localVarReturnType = new TypeToken<MarketGroupsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarkets
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketsCall(String apiKey, String eventId, List<String> ids, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}/markets/"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (includeAllDescendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllDescendants", includeAllDescendants));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (includeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmpty", includeEmpty));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (marketPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketPublished", marketPublished));
        }

        if (marketStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketStatus", marketStatus));
        }

        if (marketDisplayed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketDisplayed", marketDisplayed));
        }

        if (marketChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketChannel", marketChannel));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketEW != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketEW", marketEW));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketsValidateBeforeCall(String apiKey, String eventId, List<String> ids, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getMarkets(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getMarkets(Async)");
        }

        return getMarketsCall(apiKey, eventId, ids, includeAllDescendants, fields, include, exclude, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Gets one or more specific markets
     * Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return MarketsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public MarketsWrapper getMarkets(String apiKey, String eventId, List<String> ids, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<MarketsWrapper> localVarResp = getMarketsWithHttpInfo(apiKey, eventId, ids, includeAllDescendants, fields, include, exclude, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Gets one or more specific markets
     * Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;MarketsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketsWrapper> getMarketsWithHttpInfo(String apiKey, String eventId, List<String> ids, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getMarketsValidateBeforeCall(apiKey, eventId, ids, includeAllDescendants, fields, include, exclude, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<MarketsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets one or more specific markets (asynchronously)
     * Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param includeAllDescendants Include every descendant in the below heirarchy (optional, default to false)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param includeEmpty When declared as false it should exclude markets and events that have no selections / markets (optional, default to true)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param marketPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param marketStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param marketDisplayed Specify whether to return displayed entities or not (optional, default to true)
     * @param marketChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (optional)
     * @param marketEW Specify whether to return markets with each way betting or those without (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketsAsync(String apiKey, String eventId, List<String> ids, Boolean includeAllDescendants, List<String> fields, List<String> include, List<String> exclude, Boolean includeEmpty, String culture, String marketPublished, String marketStatus, String marketDisplayed, String marketChannel, String marketSort, String marketEW, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<MarketsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketsValidateBeforeCall(apiKey, eventId, ids, includeAllDescendants, fields, include, exclude, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<MarketsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketsByGroupId
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (required)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketsByGroupIdCall(String apiKey, String competitionId, String marketSort, String marketGroupId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/competitions/{competitionId}/marketsByGroupid"
            .replace("{" + "competitionId" + "}", localVarApiClient.escapeString(competitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (marketSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSort", marketSort));
        }

        if (marketGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketGroupId", marketGroupId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketsByGroupIdValidateBeforeCall(String apiKey, String competitionId, String marketSort, String marketGroupId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getMarketsByGroupId(Async)");
        }

        // verify the required parameter 'competitionId' is set
        if (competitionId == null) {
            throw new ApiException("Missing the required parameter 'competitionId' when calling getMarketsByGroupId(Async)");
        }

        // verify the required parameter 'marketSort' is set
        if (marketSort == null) {
            throw new ApiException("Missing the required parameter 'marketSort' when calling getMarketsByGroupId(Async)");
        }

        // verify the required parameter 'marketGroupId' is set
        if (marketGroupId == null) {
            throw new ApiException("Missing the required parameter 'marketGroupId' when calling getMarketsByGroupId(Async)");
        }

        return getMarketsByGroupIdCall(apiKey, competitionId, marketSort, marketGroupId, fields, include, exclude, _callback);

    }

    /**
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (required)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @return MarketGroupsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public MarketGroupsWrapper getMarketsByGroupId(String apiKey, String competitionId, String marketSort, String marketGroupId, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<MarketGroupsWrapper> localVarResp = getMarketsByGroupIdWithHttpInfo(apiKey, competitionId, marketSort, marketGroupId, fields, include, exclude);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (required)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @return ApiResponse&lt;MarketGroupsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketGroupsWrapper> getMarketsByGroupIdWithHttpInfo(String apiKey, String competitionId, String marketSort, String marketGroupId, List<String> fields, List<String> include, List<String> exclude) throws ApiException {
        okhttp3.Call localVarCall = getMarketsByGroupIdValidateBeforeCall(apiKey, competitionId, marketSort, marketGroupId, fields, include, exclude, null);
        Type localVarReturnType = new TypeToken<MarketGroupsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId (asynchronously)
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     * @param apiKey Your API Key available from your developer portal (required)
     * @param competitionId The competition id to retrieve information for. (required)
     * @param marketSort Filter by market sort (e.g. MR (match result) -- (Outright)). (required)
     * @param marketGroupId Filter by marketGroupId (e.g. OB_MG1276585). (required)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketsByGroupIdAsync(String apiKey, String competitionId, String marketSort, String marketGroupId, List<String> fields, List<String> include, List<String> exclude, final ApiCallback<MarketGroupsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketsByGroupIdValidateBeforeCall(apiKey, competitionId, marketSort, marketGroupId, fields, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<MarketGroupsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelections
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param marketId The market id to retrieve information for (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelectionsCall(String apiKey, String eventId, String marketId, List<String> ids, List<String> fields, List<String> include, List<String> exclude, String culture, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}/markets/{marketId}/selections/"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()))
            .replace("{" + "marketId" + "}", localVarApiClient.escapeString(marketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (selectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionStatus", selectionStatus));
        }

        if (selectionChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionChannel", selectionChannel));
        }

        if (selectionPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectionPublished", selectionPublished));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelectionsValidateBeforeCall(String apiKey, String eventId, String marketId, List<String> ids, List<String> fields, List<String> include, List<String> exclude, String culture, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSelections(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getSelections(Async)");
        }

        // verify the required parameter 'marketId' is set
        if (marketId == null) {
            throw new ApiException("Missing the required parameter 'marketId' when calling getSelections(Async)");
        }

        return getSelectionsCall(apiKey, eventId, marketId, ids, fields, include, exclude, culture, selectionStatus, selectionChannel, selectionPublished, _callback);

    }

    /**
     * Gets one or more selections for a market
     * Retrieves one or more selections for a market
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param marketId The market id to retrieve information for (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return SelectionsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public SelectionsWrapper getSelections(String apiKey, String eventId, String marketId, List<String> ids, List<String> fields, List<String> include, List<String> exclude, String culture, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        ApiResponse<SelectionsWrapper> localVarResp = getSelectionsWithHttpInfo(apiKey, eventId, marketId, ids, fields, include, exclude, culture, selectionStatus, selectionChannel, selectionPublished);
        return localVarResp.getData();
    }

    /**
     * Gets one or more selections for a market
     * Retrieves one or more selections for a market
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param marketId The market id to retrieve information for (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @return ApiResponse&lt;SelectionsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectionsWrapper> getSelectionsWithHttpInfo(String apiKey, String eventId, String marketId, List<String> ids, List<String> fields, List<String> include, List<String> exclude, String culture, String selectionStatus, String selectionChannel, String selectionPublished) throws ApiException {
        okhttp3.Call localVarCall = getSelectionsValidateBeforeCall(apiKey, eventId, marketId, ids, fields, include, exclude, culture, selectionStatus, selectionChannel, selectionPublished, null);
        Type localVarReturnType = new TypeToken<SelectionsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets one or more selections for a market (asynchronously)
     * Retrieves one or more selections for a market
     * @param apiKey Your API Key available from your developer portal (required)
     * @param eventId The event ID to retrieve information for. (required)
     * @param marketId The market id to retrieve information for (required)
     * @param ids A comma-separated list of selectionIds (optional)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param selectionStatus Specify a status to filter results by. This is currently A (active) or S (suspended) (optional)
     * @param selectionChannel Specify a channel filter and only results from that channel will be returned (optional)
     * @param selectionPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelectionsAsync(String apiKey, String eventId, String marketId, List<String> ids, List<String> fields, List<String> include, List<String> exclude, String culture, String selectionStatus, String selectionChannel, String selectionPublished, final ApiCallback<SelectionsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelectionsValidateBeforeCall(apiKey, eventId, marketId, ids, fields, include, exclude, culture, selectionStatus, selectionChannel, selectionPublished, _callback);
        Type localVarReturnType = new TypeToken<SelectionsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSports
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSportsCall(String apiKey, String sort, Integer offset, String isPublished, Integer limit, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (isPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPublished", isPublished));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSportsValidateBeforeCall(String apiKey, String sort, Integer offset, String isPublished, Integer limit, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSports(Async)");
        }

        return getSportsCall(apiKey, sort, offset, isPublished, limit, fields, include, exclude, culture, _callback);

    }

    /**
     * Gets a list of all sports
     * Gets a list of all sports
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return SportsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public SportsWrapper getSports(String apiKey, String sort, Integer offset, String isPublished, Integer limit, List<String> fields, List<String> include, List<String> exclude, String culture) throws ApiException {
        ApiResponse<SportsWrapper> localVarResp = getSportsWithHttpInfo(apiKey, sort, offset, isPublished, limit, fields, include, exclude, culture);
        return localVarResp.getData();
    }

    /**
     * Gets a list of all sports
     * Gets a list of all sports
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;SportsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SportsWrapper> getSportsWithHttpInfo(String apiKey, String sort, Integer offset, String isPublished, Integer limit, List<String> fields, List<String> include, List<String> exclude, String culture) throws ApiException {
        okhttp3.Call localVarCall = getSportsValidateBeforeCall(apiKey, sort, offset, isPublished, limit, fields, include, exclude, culture, null);
        Type localVarReturnType = new TypeToken<SportsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of all sports (asynchronously)
     * Gets a list of all sports
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sort The field to order the response by, followed by the order. For example: name,desc (optional, default to id,asc)
     * @param offset Skip over a number of elements by specifying a start value for the query (optional, default to 0)
     * @param isPublished Specify whether only active entities should be returned, according to the William Hill definition of active (optional, default to true)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect or Missing Parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No data found for request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSportsAsync(String apiKey, String sort, Integer offset, String isPublished, Integer limit, List<String> fields, List<String> include, List<String> exclude, String culture, final ApiCallback<SportsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSportsValidateBeforeCall(apiKey, sort, offset, isPublished, limit, fields, include, exclude, culture, _callback);
        Type localVarReturnType = new TypeToken<SportsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopBets
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportIds A comma-separated list of sportsIds for which to retrieve topBets for (optional)
     * @param competitionIds A comma-separated list of competitionIds for which to retrieve topBets for (optional)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param paramTopBetEventId The event ID to retrieve top bet information for. Multiple events up to 5 may be used (optional)
     * @param sortName The market sort code used to further filter event results. Please note this can only be used with event id(s). (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param locale Code used to select a set of top bets settings, default is \&quot;whapi\&quot; which allows events set in far future to be included, setting the value to \&quot;en-GB\&quot; will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopBetsCall(String apiKey, List<String> sportIds, List<String> competitionIds, Integer limit, List<String> fields, List<String> include, List<String> exclude, String paramTopBetEventId, String sortName, String culture, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topbets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sportIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sportIds", sportIds));
        }

        if (competitionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "competitionIds", competitionIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (paramTopBetEventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("param_topBetEventId", paramTopBetEventId));
        }

        if (sortName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortName", sortName));
        }

        if (culture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("culture", culture));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Locale", locale));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("apiKey", localVarApiClient.parameterToString(apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopBetsValidateBeforeCall(String apiKey, List<String> sportIds, List<String> competitionIds, Integer limit, List<String> fields, List<String> include, List<String> exclude, String paramTopBetEventId, String sortName, String culture, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getTopBets(Async)");
        }

        return getTopBetsCall(apiKey, sportIds, competitionIds, limit, fields, include, exclude, paramTopBetEventId, sortName, culture, locale, _callback);

    }

    /**
     * Retrieves a weighted list of Selections.
     * Retrieves a weighted list of Selections.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportIds A comma-separated list of sportsIds for which to retrieve topBets for (optional)
     * @param competitionIds A comma-separated list of competitionIds for which to retrieve topBets for (optional)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param paramTopBetEventId The event ID to retrieve top bet information for. Multiple events up to 5 may be used (optional)
     * @param sortName The market sort code used to further filter event results. Please note this can only be used with event id(s). (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param locale Code used to select a set of top bets settings, default is \&quot;whapi\&quot; which allows events set in far future to be included, setting the value to \&quot;en-GB\&quot; will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return TopBetsWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong </td><td>  -  </td></tr>
     </table>
     */
    public TopBetsWrapper getTopBets(String apiKey, List<String> sportIds, List<String> competitionIds, Integer limit, List<String> fields, List<String> include, List<String> exclude, String paramTopBetEventId, String sortName, String culture, String locale) throws ApiException {
        ApiResponse<TopBetsWrapper> localVarResp = getTopBetsWithHttpInfo(apiKey, sportIds, competitionIds, limit, fields, include, exclude, paramTopBetEventId, sortName, culture, locale);
        return localVarResp.getData();
    }

    /**
     * Retrieves a weighted list of Selections.
     * Retrieves a weighted list of Selections.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportIds A comma-separated list of sportsIds for which to retrieve topBets for (optional)
     * @param competitionIds A comma-separated list of competitionIds for which to retrieve topBets for (optional)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param paramTopBetEventId The event ID to retrieve top bet information for. Multiple events up to 5 may be used (optional)
     * @param sortName The market sort code used to further filter event results. Please note this can only be used with event id(s). (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param locale Code used to select a set of top bets settings, default is \&quot;whapi\&quot; which allows events set in far future to be included, setting the value to \&quot;en-GB\&quot; will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @return ApiResponse&lt;TopBetsWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopBetsWrapper> getTopBetsWithHttpInfo(String apiKey, List<String> sportIds, List<String> competitionIds, Integer limit, List<String> fields, List<String> include, List<String> exclude, String paramTopBetEventId, String sortName, String culture, String locale) throws ApiException {
        okhttp3.Call localVarCall = getTopBetsValidateBeforeCall(apiKey, sportIds, competitionIds, limit, fields, include, exclude, paramTopBetEventId, sortName, culture, locale, null);
        Type localVarReturnType = new TypeToken<TopBetsWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a weighted list of Selections. (asynchronously)
     * Retrieves a weighted list of Selections.
     * @param apiKey Your API Key available from your developer portal (required)
     * @param sportIds A comma-separated list of sportsIds for which to retrieve topBets for (optional)
     * @param competitionIds A comma-separated list of competitionIds for which to retrieve topBets for (optional)
     * @param limit Specify the number of results to return (optional, default to 100)
     * @param fields Specify an absolute field list to return (Comma-Separated List) (optional)
     * @param include Specify fields in addition to the default to return (Comma-Separated List) (optional)
     * @param exclude Specify fields from the default to exclude (Comma-Separated List) (optional)
     * @param paramTopBetEventId The event ID to retrieve top bet information for. Multiple events up to 5 may be used (optional)
     * @param sortName The market sort code used to further filter event results. Please note this can only be used with event id(s). (optional)
     * @param culture Code used to return responses in language other than English, acceptable values are en-GB|de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param locale Code used to select a set of top bets settings, default is \&quot;whapi\&quot; which allows events set in far future to be included, setting the value to \&quot;en-GB\&quot; will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el&#x3D;GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error: Something went wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopBetsAsync(String apiKey, List<String> sportIds, List<String> competitionIds, Integer limit, List<String> fields, List<String> include, List<String> exclude, String paramTopBetEventId, String sortName, String culture, String locale, final ApiCallback<TopBetsWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopBetsValidateBeforeCall(apiKey, sportIds, competitionIds, limit, fields, include, exclude, paramTopBetEventId, sortName, culture, locale, _callback);
        Type localVarReturnType = new TypeToken<TopBetsWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
