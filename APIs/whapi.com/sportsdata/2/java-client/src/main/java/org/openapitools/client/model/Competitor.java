/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Competitor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:47.763944-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Competitor {
  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private BigDecimal age;

  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_DRAW_NUMBER = "drawNumber";
  @SerializedName(SERIALIZED_NAME_DRAW_NUMBER)
  private BigDecimal drawNumber;

  public static final String SERIALIZED_NAME_FORM_GUIDE = "formGuide";
  @SerializedName(SERIALIZED_NAME_FORM_GUIDE)
  private String formGuide;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_JOCKEY_NAME = "jockeyName";
  @SerializedName(SERIALIZED_NAME_JOCKEY_NAME)
  private String jockeyName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private String rating;

  public static final String SERIALIZED_NAME_SEX = "sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private String sex;

  public static final String SERIALIZED_NAME_SILK_IMAGE_URL = "silkImageUrl";
  @SerializedName(SERIALIZED_NAME_SILK_IMAGE_URL)
  private String silkImageUrl;

  public static final String SERIALIZED_NAME_TRAINER_NAME = "trainerName";
  @SerializedName(SERIALIZED_NAME_TRAINER_NAME)
  private String trainerName;

  public static final String SERIALIZED_NAME_WEIGHT_POUNDS = "weightPounds";
  @SerializedName(SERIALIZED_NAME_WEIGHT_POUNDS)
  private String weightPounds;

  public Competitor() {
  }

  public Competitor age(BigDecimal age) {
    this.age = age;
    return this;
  }

  /**
   * The age of the horse
   * @return age
   */
  @javax.annotation.Nullable
  public BigDecimal getAge() {
    return age;
  }

  public void setAge(BigDecimal age) {
    this.age = age;
  }


  public Competitor colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * The colour of the horse (There are 5 colours. b &#x3D; Bay. bl &#x3D; Black. br &#x3D; Brown. ch &#x3D; Chestnut. gr &#x3D; Grey)
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public Competitor drawNumber(BigDecimal drawNumber) {
    this.drawNumber = drawNumber;
    return this;
  }

  /**
   * The stall number that the horse is allocated and will start from
   * @return drawNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getDrawNumber() {
    return drawNumber;
  }

  public void setDrawNumber(BigDecimal drawNumber) {
    this.drawNumber = drawNumber;
  }


  public Competitor formGuide(String formGuide) {
    this.formGuide = formGuide;
    return this;
  }

  /**
   * The form of a horse is a record of significant events, mainly its performance in previous races. For example: The value 874-1 means that the horse finished 8th, then 7th in the next race, then 4th, hyphen here means he did not finish in the race, and was 1st in the last race he was running in.
   * @return formGuide
   */
  @javax.annotation.Nullable
  public String getFormGuide() {
    return formGuide;
  }

  public void setFormGuide(String formGuide) {
    this.formGuide = formGuide;
  }


  public Competitor id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the competitor in the event
   * @return id
   */
  @javax.annotation.Nonnull
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public Competitor jockeyName(String jockeyName) {
    this.jockeyName = jockeyName;
    return this;
  }

  /**
   * The name of the Jockey who&#39;s riding the horse
   * @return jockeyName
   */
  @javax.annotation.Nullable
  public String getJockeyName() {
    return jockeyName;
  }

  public void setJockeyName(String jockeyName) {
    this.jockeyName = jockeyName;
  }


  public Competitor name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of competitor that the information is being given for
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Competitor overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Additional information about the horse&#39;s performance
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public Competitor ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * The name of the horses owner(s)
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public Competitor rating(String rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The rating of the horse which is defined by a rating provider. It represents the horse&#39;s performance (the higher the rating, the better the horse is)
   * @return rating
   */
  @javax.annotation.Nullable
  public String getRating() {
    return rating;
  }

  public void setRating(String rating) {
    this.rating = rating;
  }


  public Competitor sex(String sex) {
    this.sex = sex;
    return this;
  }

  /**
   * The sex of the horse (F|M)
   * @return sex
   */
  @javax.annotation.Nullable
  public String getSex() {
    return sex;
  }

  public void setSex(String sex) {
    this.sex = sex;
  }


  public Competitor silkImageUrl(String silkImageUrl) {
    this.silkImageUrl = silkImageUrl;
    return this;
  }

  /**
   * The URL for the image that represents the &#39;silk&#39; (Coathing pattern) worn by the jockey.
   * @return silkImageUrl
   */
  @javax.annotation.Nonnull
  public String getSilkImageUrl() {
    return silkImageUrl;
  }

  public void setSilkImageUrl(String silkImageUrl) {
    this.silkImageUrl = silkImageUrl;
  }


  public Competitor trainerName(String trainerName) {
    this.trainerName = trainerName;
    return this;
  }

  /**
   * The name of the horses trainer
   * @return trainerName
   */
  @javax.annotation.Nullable
  public String getTrainerName() {
    return trainerName;
  }

  public void setTrainerName(String trainerName) {
    this.trainerName = trainerName;
  }


  public Competitor weightPounds(String weightPounds) {
    this.weightPounds = weightPounds;
    return this;
  }

  /**
   * The rider weight (in pounds)
   * @return weightPounds
   */
  @javax.annotation.Nullable
  public String getWeightPounds() {
    return weightPounds;
  }

  public void setWeightPounds(String weightPounds) {
    this.weightPounds = weightPounds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Competitor competitor = (Competitor) o;
    return Objects.equals(this.age, competitor.age) &&
        Objects.equals(this.colour, competitor.colour) &&
        Objects.equals(this.drawNumber, competitor.drawNumber) &&
        Objects.equals(this.formGuide, competitor.formGuide) &&
        Objects.equals(this.id, competitor.id) &&
        Objects.equals(this.jockeyName, competitor.jockeyName) &&
        Objects.equals(this.name, competitor.name) &&
        Objects.equals(this.overview, competitor.overview) &&
        Objects.equals(this.ownerName, competitor.ownerName) &&
        Objects.equals(this.rating, competitor.rating) &&
        Objects.equals(this.sex, competitor.sex) &&
        Objects.equals(this.silkImageUrl, competitor.silkImageUrl) &&
        Objects.equals(this.trainerName, competitor.trainerName) &&
        Objects.equals(this.weightPounds, competitor.weightPounds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, colour, drawNumber, formGuide, id, jockeyName, name, overview, ownerName, rating, sex, silkImageUrl, trainerName, weightPounds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Competitor {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    drawNumber: ").append(toIndentedString(drawNumber)).append("\n");
    sb.append("    formGuide: ").append(toIndentedString(formGuide)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jockeyName: ").append(toIndentedString(jockeyName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    silkImageUrl: ").append(toIndentedString(silkImageUrl)).append("\n");
    sb.append("    trainerName: ").append(toIndentedString(trainerName)).append("\n");
    sb.append("    weightPounds: ").append(toIndentedString(weightPounds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age");
    openapiFields.add("colour");
    openapiFields.add("drawNumber");
    openapiFields.add("formGuide");
    openapiFields.add("id");
    openapiFields.add("jockeyName");
    openapiFields.add("name");
    openapiFields.add("overview");
    openapiFields.add("ownerName");
    openapiFields.add("rating");
    openapiFields.add("sex");
    openapiFields.add("silkImageUrl");
    openapiFields.add("trainerName");
    openapiFields.add("weightPounds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("silkImageUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Competitor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Competitor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Competitor is not found in the empty JSON string", Competitor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Competitor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Competitor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Competitor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      if ((jsonObj.get("formGuide") != null && !jsonObj.get("formGuide").isJsonNull()) && !jsonObj.get("formGuide").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formGuide` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formGuide").toString()));
      }
      if ((jsonObj.get("jockeyName") != null && !jsonObj.get("jockeyName").isJsonNull()) && !jsonObj.get("jockeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jockeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jockeyName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("overview") != null && !jsonObj.get("overview").isJsonNull()) && !jsonObj.get("overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overview").toString()));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      if ((jsonObj.get("sex") != null && !jsonObj.get("sex").isJsonNull()) && !jsonObj.get("sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex").toString()));
      }
      if (!jsonObj.get("silkImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `silkImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("silkImageUrl").toString()));
      }
      if ((jsonObj.get("trainerName") != null && !jsonObj.get("trainerName").isJsonNull()) && !jsonObj.get("trainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainerName").toString()));
      }
      if ((jsonObj.get("weightPounds") != null && !jsonObj.get("weightPounds").isJsonNull()) && !jsonObj.get("weightPounds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weightPounds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weightPounds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Competitor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Competitor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Competitor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Competitor.class));

       return (TypeAdapter<T>) new TypeAdapter<Competitor>() {
           @Override
           public void write(JsonWriter out, Competitor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Competitor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Competitor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Competitor
   * @throws IOException if the JSON string is invalid with respect to Competitor
   */
  public static Competitor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Competitor.class);
  }

  /**
   * Convert an instance of Competitor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

