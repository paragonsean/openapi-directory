/*
 * SportsData API
 * The William Hill SportsData REST API is a collection of GET methods to provide William Hill product data such as sport, competition, event, market and selection data (including prices).
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClassesWrapper;
import org.openapitools.client.model.Competition;
import org.openapitools.client.model.CompetitionsWrapper;
import org.openapitools.client.model.ErrorsWrapper;
import org.openapitools.client.model.EventsWrapper;
import org.openapitools.client.model.MarketGroupsWrapper;
import org.openapitools.client.model.MarketsWrapper;
import org.openapitools.client.model.SelectionsWrapper;
import org.openapitools.client.model.SportsWrapper;
import org.openapitools.client.model.TopBetsWrapper;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SportsdataApi
 */
@Disabled
public class SportsdataApiTest {

    private final SportsdataApi api = new SportsdataApi();

    /**
     * Retrieves a list of classes for a given sport id.
     *
     * Retrieves a list of classes for a given sport id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassesForSportTest() throws ApiException {
        String apiKey = null;
        String sportId = null;
        String isPublished = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String displayed = null;
        String channel = null;
        String status = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String culture = null;
        ClassesWrapper response = api.getClassesForSport(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        // TODO: test validations
    }

    /**
     * Retrieves a specific competition
     *
     * Retrieves a specific competition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetitionTest() throws ApiException {
        String apiKey = null;
        String competitionId = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String culture = null;
        Competition response = api.getCompetition(apiKey, competitionId, fields, include, exclude, culture);
        // TODO: test validations
    }

    /**
     * Retrieves a list of competitions for a given class id.
     *
     * Retrieves a list of competitions for a given class id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetitionsForClassTest() throws ApiException {
        String apiKey = null;
        String classId = null;
        String isPublished = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String displayed = null;
        String channel = null;
        String status = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String culture = null;
        CompetitionsWrapper response = api.getCompetitionsForClass(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        // TODO: test validations
    }

    /**
     * Retrieves a list of competitions for a given sport id.
     *
     * Retrieves a list of competitions for a given sport id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompetitionsForSportTest() throws ApiException {
        String apiKey = null;
        String sportId = null;
        String isPublished = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String displayed = null;
        String channel = null;
        String status = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String culture = null;
        CompetitionsWrapper response = api.getCompetitionsForSport(apiKey, sportId, isPublished, fields, include, exclude, displayed, channel, status, sort, offset, limit, culture);
        // TODO: test validations
    }

    /**
     * Retrieves a single event by ID.
     *
     * Retrieves a single event by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String apiKey = null;
        String eventId = null;
        Boolean includeAllDescendants = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        Boolean headlineSummary = null;
        Integer marketCount = null;
        List<String> marketIds = null;
        Boolean includeEmpty = null;
        String culture = null;
        String marketPublished = null;
        String marketStatus = null;
        String marketDisplayed = null;
        String marketChannel = null;
        String marketSort = null;
        String marketEW = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        EventsWrapper response = api.getEvent(apiKey, eventId, includeAllDescendants, fields, include, exclude, headlineSummary, marketCount, marketIds, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Retrieves a list of events for the provided IDs.
     *
     * Retrieves a list of events for the provided IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String apiKey = null;
        List<String> ids = null;
        String isPublished = null;
        Boolean includeAllDescendants = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String channel = null;
        Boolean settled = null;
        Boolean includeEmpty = null;
        Boolean headlineSummary = null;
        Integer marketCount = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        List<String> marketIds = null;
        String culture = null;
        String marketPublished = null;
        String marketStatus = null;
        String marketDisplayed = null;
        String marketChannel = null;
        String marketSort = null;
        String marketEW = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        EventsWrapper response = api.getEvents(apiKey, ids, isPublished, includeAllDescendants, fields, include, exclude, channel, settled, includeEmpty, headlineSummary, marketCount, sort, offset, limit, marketIds, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Retrieves a list of events for a given class id.
     *
     * Retrieves a list of events for a given class id. &#39;includeAllDescendants&#39; parameter should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsForClassTest() throws ApiException {
        String apiKey = null;
        String classId = null;
        String isPublished = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String displayed = null;
        String channel = null;
        Boolean settled = null;
        Boolean includeEmpty = null;
        String status = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        Boolean headlineSummary = null;
        Boolean includeAllDescendants = null;
        Boolean isInPlay = null;
        Integer marketCount = null;
        String date = null;
        String dateFrom = null;
        String dateTo = null;
        String eventSort = null;
        String culture = null;
        String marketPublished = null;
        String marketStatus = null;
        String marketDisplayed = null;
        String marketChannel = null;
        String marketSort = null;
        String marketEW = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        EventsWrapper response = api.getEventsForClass(apiKey, classId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Retrieves a list of events for a given competition id.
     *
     * Retrieves a list of events for a given competition id. &#39;headlineSummary&#39; and includeAllDescendants parameters should be accompanied with &#39;date&#39; filter or one of &#39;dateFrom&#39; and &#39;dateTo&#39; filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsForCompetitionTest() throws ApiException {
        String apiKey = null;
        String competitionId = null;
        String isPublished = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String displayed = null;
        String channel = null;
        Boolean settled = null;
        Boolean includeEmpty = null;
        String status = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        Boolean headlineSummary = null;
        Boolean includeAllDescendants = null;
        Boolean isInPlay = null;
        Integer marketCount = null;
        String date = null;
        String dateFrom = null;
        String dateTo = null;
        String marketGroupId = null;
        String eventSort = null;
        String culture = null;
        String marketPublished = null;
        String marketStatus = null;
        String marketDisplayed = null;
        String marketChannel = null;
        String marketSort = null;
        String marketEW = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        EventsWrapper response = api.getEventsForCompetition(apiKey, competitionId, isPublished, fields, include, exclude, displayed, channel, settled, includeEmpty, status, sort, offset, limit, headlineSummary, includeAllDescendants, isInPlay, marketCount, date, dateFrom, dateTo, marketGroupId, eventSort, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Retrieves a list of market groups for a given competition id
     *
     * Retrieves a list of market groups for a given competition id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketGroupsForCompetitionTest() throws ApiException {
        String apiKey = null;
        String competitionId = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String culture = null;
        String name = null;
        MarketGroupsWrapper response = api.getMarketGroupsForCompetition(apiKey, competitionId, fields, include, exclude, sort, offset, limit, culture, name);
        // TODO: test validations
    }

    /**
     * Gets one or more specific markets
     *
     * Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsTest() throws ApiException {
        String apiKey = null;
        String eventId = null;
        List<String> ids = null;
        Boolean includeAllDescendants = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        Boolean includeEmpty = null;
        String culture = null;
        String marketPublished = null;
        String marketStatus = null;
        String marketDisplayed = null;
        String marketChannel = null;
        String marketSort = null;
        String marketEW = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        MarketsWrapper response = api.getMarkets(apiKey, eventId, ids, includeAllDescendants, fields, include, exclude, includeEmpty, culture, marketPublished, marketStatus, marketDisplayed, marketChannel, marketSort, marketEW, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     *
     * Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsByGroupIdTest() throws ApiException {
        String apiKey = null;
        String competitionId = null;
        String marketSort = null;
        String marketGroupId = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        MarketGroupsWrapper response = api.getMarketsByGroupId(apiKey, competitionId, marketSort, marketGroupId, fields, include, exclude);
        // TODO: test validations
    }

    /**
     * Gets one or more selections for a market
     *
     * Retrieves one or more selections for a market
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectionsTest() throws ApiException {
        String apiKey = null;
        String eventId = null;
        String marketId = null;
        List<String> ids = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String culture = null;
        String selectionStatus = null;
        String selectionChannel = null;
        String selectionPublished = null;
        SelectionsWrapper response = api.getSelections(apiKey, eventId, marketId, ids, fields, include, exclude, culture, selectionStatus, selectionChannel, selectionPublished);
        // TODO: test validations
    }

    /**
     * Gets a list of all sports
     *
     * Gets a list of all sports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSportsTest() throws ApiException {
        String apiKey = null;
        String sort = null;
        Integer offset = null;
        String isPublished = null;
        Integer limit = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String culture = null;
        SportsWrapper response = api.getSports(apiKey, sort, offset, isPublished, limit, fields, include, exclude, culture);
        // TODO: test validations
    }

    /**
     * Retrieves a weighted list of Selections.
     *
     * Retrieves a weighted list of Selections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopBetsTest() throws ApiException {
        String apiKey = null;
        List<String> sportIds = null;
        List<String> competitionIds = null;
        Integer limit = null;
        List<String> fields = null;
        List<String> include = null;
        List<String> exclude = null;
        String paramTopBetEventId = null;
        String sortName = null;
        String culture = null;
        String locale = null;
        TopBetsWrapper response = api.getTopBets(apiKey, sportIds, competitionIds, limit, fields, include, exclude, paramTopBetEventId, sortName, culture, locale);
        // TODO: test validations
    }

}
