/**
 * ExchangeRate-API
 * Fetch the latest currency exchange rates via API. ExchangeRate-API is free and unlimited.
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_latest__base_currency__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_latest__base_currency__get_200_response::OAI_latest__base_currency__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_latest__base_currency__get_200_response::OAI_latest__base_currency__get_200_response() {
    this->initializeModel();
}

OAI_latest__base_currency__get_200_response::~OAI_latest__base_currency__get_200_response() {}

void OAI_latest__base_currency__get_200_response::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_time_last_updated_isSet = false;
    m_time_last_updated_isValid = false;
}

void OAI_latest__base_currency__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_latest__base_currency__get_200_response::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_time_last_updated_isValid = ::OpenAPI::fromJsonValue(m_time_last_updated, json[QString("time_last_updated")]);
    m_time_last_updated_isSet = !json[QString("time_last_updated")].isNull() && m_time_last_updated_isValid;
}

QString OAI_latest__base_currency__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_latest__base_currency__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_time_last_updated_isSet) {
        obj.insert(QString("time_last_updated"), ::OpenAPI::toJsonValue(m_time_last_updated));
    }
    return obj;
}

QString OAI_latest__base_currency__get_200_response::getBase() const {
    return m_base;
}
void OAI_latest__base_currency__get_200_response::setBase(const QString &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAI_latest__base_currency__get_200_response::is_base_Set() const{
    return m_base_isSet;
}

bool OAI_latest__base_currency__get_200_response::is_base_Valid() const{
    return m_base_isValid;
}

QString OAI_latest__base_currency__get_200_response::getDate() const {
    return m_date;
}
void OAI_latest__base_currency__get_200_response::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAI_latest__base_currency__get_200_response::is_date_Set() const{
    return m_date_isSet;
}

bool OAI_latest__base_currency__get_200_response::is_date_Valid() const{
    return m_date_isValid;
}

QMap<QString, double> OAI_latest__base_currency__get_200_response::getRates() const {
    return m_rates;
}
void OAI_latest__base_currency__get_200_response::setRates(const QMap<QString, double> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAI_latest__base_currency__get_200_response::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAI_latest__base_currency__get_200_response::is_rates_Valid() const{
    return m_rates_isValid;
}

qint32 OAI_latest__base_currency__get_200_response::getTimeLastUpdated() const {
    return m_time_last_updated;
}
void OAI_latest__base_currency__get_200_response::setTimeLastUpdated(const qint32 &time_last_updated) {
    m_time_last_updated = time_last_updated;
    m_time_last_updated_isSet = true;
}

bool OAI_latest__base_currency__get_200_response::is_time_last_updated_Set() const{
    return m_time_last_updated_isSet;
}

bool OAI_latest__base_currency__get_200_response::is_time_last_updated_Valid() const{
    return m_time_last_updated_isValid;
}

bool OAI_latest__base_currency__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_latest__base_currency__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
