/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddPartnerRequest;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ChangeRoleRequest;
import java.io.File;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationAddress;
import org.openapitools.client.model.OrganizationUpdate;
import org.openapitools.client.model.OrganizationUserInvitationListRequest;
import org.openapitools.client.model.PaginatedResponseOfCountry;
import org.openapitools.client.model.PaginatedResponseOfGuidCollection;
import org.openapitools.client.model.PaginatedResponseOfOrganization;
import org.openapitools.client.model.PaginatedResponseOfPartnerOrganization;
import org.openapitools.client.model.PaginatedResponseOfUserPresentation;
import org.openapitools.client.model.PaginatedResponseOfUserRoles;
import org.openapitools.client.model.PaginatedResponseOfstring;
import org.openapitools.client.model.PublicImagePresentation;
import org.openapitools.client.model.RemovePartnerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Add partner
     *
     * Adding a partner organization. If the given organization is already a partner the result will be state 200 too.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPartnerOrganizationTest() throws ApiException {
        String organizationId = null;
        AddPartnerRequest addPartnerRequest = null;
        api.addPartnerOrganization(organizationId, addPartnerRequest);
        // TODO: test validations
    }

    /**
     * Add role(s) to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserRoles_0Test() throws ApiException {
        String organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        api.addUserRoles_0(organizationId, username, changeRoleRequest);
        // TODO: test validations
    }

    /**
     * Create organization
     *
     * Creating a new organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        Organization organization = null;
        Organization response = api.createOrganization(organization);
        // TODO: test validations
    }

    /**
     * Delete organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        String organizationId = null;
        api.deleteOrganization(organizationId);
        // TODO: test validations
    }

    /**
     * Remove billing address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationBillingAddressTest() throws ApiException {
        String organizationId = null;
        api.deleteOrganizationBillingAddress(organizationId);
        // TODO: test validations
    }

    /**
     * Delete organization logo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationLogoTest() throws ApiException {
        String organizationId = null;
        api.deleteOrganizationLogo(organizationId);
        // TODO: test validations
    }

    /**
     * Find organization by id/namespace
     *
     * Returns a single organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationTest() throws ApiException {
        String organizationId = null;
        Organization response = api.findOrganization(organizationId);
        // TODO: test validations
    }

    /**
     * Retrieve address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationAddressTest() throws ApiException {
        String organizationId = null;
        OrganizationAddress response = api.findOrganizationAddress(organizationId);
        // TODO: test validations
    }

    /**
     * Retrieve billing address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationBillingAddressTest() throws ApiException {
        String organizationId = null;
        OrganizationAddress response = api.findOrganizationBillingAddress(organizationId);
        // TODO: test validations
    }

    /**
     * Get collections of organization
     *
     * Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCollectionsOfOrganization_0Test() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String label = null;
        String labelPrefix = null;
        List<String> property = null;
        PaginatedResponseOfGuidCollection response = api.getAllCollectionsOfOrganization_0(organizationId, offset, limit, type, label, labelPrefix, property);
        // TODO: test validations
    }

    /**
     * List users and their roles
     *
     * Listing users and their roles in a paginated manner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOrganizationRoles_0Test() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfUserRoles response = api.getAllOrganizationRoles_0(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * List my privileges
     *
     * Listing all privileges of the current user/APIKey of the specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationPrivilegesTest() throws ApiException {
        String organizationId = null;
        List<String> response = api.getOrganizationPrivileges(organizationId);
        // TODO: test validations
    }

    /**
     * Retrieve organizations of user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsOfUser_0Test() throws ApiException {
        String role = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfOrganization response = api.getOrganizationsOfUser_0(role, offset, limit);
        // TODO: test validations
    }

    /**
     * Get partners of an organization
     *
     * Listing partners in a paginated manner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartnerOrganizationsTest() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfPartnerOrganization response = api.getPartnerOrganizations(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Get user roles by username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRoles_0Test() throws ApiException {
        String organizationId = null;
        String username = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfstring response = api.getUserRoles_0(organizationId, username, offset, limit);
        // TODO: test validations
    }

    /**
     * Find users in organization
     *
     * Finding users in the specified organization in a paginated manner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersOfOrganization_0Test() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfUserPresentation response = api.getUsersOfOrganization_0(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Invite Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUsers_0Test() throws ApiException {
        String organizationId = null;
        OrganizationUserInvitationListRequest organizationUserInvitationListRequest = null;
        api.inviteUsers_0(organizationId, organizationUserInvitationListRequest);
        // TODO: test validations
    }

    /**
     * List countries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCountriesTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfCountry response = api.listCountries(offset, limit);
        // TODO: test validations
    }

    /**
     * Remove partner
     *
     * Removing a partner organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePartnerOrganizationTest() throws ApiException {
        String organizationId = null;
        RemovePartnerRequest removePartnerRequest = null;
        api.removePartnerOrganization(organizationId, removePartnerRequest);
        // TODO: test validations
    }

    /**
     * Remove role(s) from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserRoles_0Test() throws ApiException {
        String organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        api.removeUserRoles_0(organizationId, username, changeRoleRequest);
        // TODO: test validations
    }

    /**
     * Update organization logo
     *
     * Updating an organization logo using a multipart file upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setOrganizationLogoTest() throws ApiException {
        String organizationId = null;
        File _file = null;
        PublicImagePresentation response = api.setOrganizationLogo(organizationId, _file);
        // TODO: test validations
    }

    /**
     * Update organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        String organizationId = null;
        OrganizationUpdate organizationUpdate = null;
        Organization response = api.updateOrganization(organizationId, organizationUpdate);
        // TODO: test validations
    }

    /**
     * Store address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationAddressTest() throws ApiException {
        String organizationId = null;
        OrganizationAddress organizationAddress = null;
        OrganizationAddress response = api.updateOrganizationAddress(organizationId, organizationAddress);
        // TODO: test validations
    }

    /**
     * Store billing address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationBillingAddressTest() throws ApiException {
        String organizationId = null;
        OrganizationAddress organizationAddress = null;
        OrganizationAddress response = api.updateOrganizationBillingAddress(organizationId, organizationAddress);
        // TODO: test validations
    }

}
