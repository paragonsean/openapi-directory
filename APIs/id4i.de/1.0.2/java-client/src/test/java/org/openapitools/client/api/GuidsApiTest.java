/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CreateGuidRequest;
import org.openapitools.client.model.Guid;
import org.openapitools.client.model.GuidAlias;
import org.openapitools.client.model.Id4nPresentation;
import org.openapitools.client.model.ImportGS1CodesRequest;
import org.openapitools.client.model.ListOfId4nProperties;
import org.openapitools.client.model.ListOfId4ns;
import org.openapitools.client.model.PaginatedResponseOfGuid;
import org.openapitools.client.model.PaginatedResponseOfGuidCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GuidsApi
 */
@Disabled
public class GuidsApiTest {

    private final GuidsApi api = new GuidsApi();

    /**
     * Add alias for GUID or Collection
     *
     * Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGuidAlias_0Test() throws ApiException {
        String id4n = null;
        String aliasType = null;
        GuidAlias guidAlias = null;
        api.addGuidAlias_0(id4n, aliasType, guidAlias);
        // TODO: test validations
    }

    /**
     * Create GUID(s)
     *
     * Creating one or more GUIDs with a specified length.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGuidTest() throws ApiException {
        CreateGuidRequest createGuidRequest = null;
        ListOfId4ns response = api.createGuid(createGuidRequest);
        // TODO: test validations
    }

    /**
     * Delete ID4n properties
     *
     * Partial deletion of id4n properties. If the property does not exist, it will be ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProperties_0Test() throws ApiException {
        String id4n = null;
        String organizationId = null;
        List<String> requestBody = null;
        api.deleteProperties_0(id4n, organizationId, requestBody);
        // TODO: test validations
    }

    /**
     * Retrieve collections of an ID
     *
     * Retrieving all owned or holding collections the specified id4n is assigned to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionsTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfGuidCollection response = api.getCollections(id4n, organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve GUID information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGuidTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Guid response = api.getGuid(id4n, organizationId);
        // TODO: test validations
    }

    /**
     * Get all aliases for the given GUID or Collection.
     *
     * Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGuidAliases_0Test() throws ApiException {
        String id4n = null;
        Map<String, String> response = api.getGuidAliases_0(id4n);
        // TODO: test validations
    }

    /**
     * Retrieve GUIDs not in any collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGuidsWithoutCollectionTest() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfGuid response = api.getGuidsWithoutCollection(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve ID4n information
     *
     * Retrieving basic information about an ID like the type and the creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getId4nTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Id4nPresentation response = api.getId4n(id4n, organizationId);
        // TODO: test validations
    }

    /**
     * Get multiple ID4n properties
     *
     * Get a list of ID4n properties for the specified ID4ns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipleProperties_0Test() throws ApiException {
        List<String> id4ns = null;
        String organizationId = null;
        ListOfId4nProperties response = api.getMultipleProperties_0(id4ns, organizationId);
        // TODO: test validations
    }

    /**
     * Retrieve ID4n properties
     *
     * List all properties of an id4n.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProperties_0Test() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Map<String, String> response = api.getProperties_0(id4n, organizationId);
        // TODO: test validations
    }

    /**
     * Import GS1/MAPP codes
     *
     * Importing GS1/MAPP codes that contain unique components.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importGS1CodesTest() throws ApiException {
        ImportGS1CodesRequest importGS1CodesRequest = null;
        api.importGS1Codes(importGS1CodesRequest);
        // TODO: test validations
    }

    /**
     * Patch ID4n properties
     *
     * Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProperties_0Test() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Map<String, String> requestBody = null;
        api.patchProperties_0(id4n, organizationId, requestBody);
        // TODO: test validations
    }

    /**
     * Remove aliases from GUID or Collection
     *
     * Remove the alias of the given type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGuidAlias_0Test() throws ApiException {
        String id4n = null;
        String aliasType = null;
        api.removeGuidAlias_0(id4n, aliasType);
        // TODO: test validations
    }

    /**
     * Change GUID information.
     *
     * Allows ownership transfer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGuidTest() throws ApiException {
        String id4n = null;
        Guid guid = null;
        Object response = api.updateGuid(id4n, guid);
        // TODO: test validations
    }

}
