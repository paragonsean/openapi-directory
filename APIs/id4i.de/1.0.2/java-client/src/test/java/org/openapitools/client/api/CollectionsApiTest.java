/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CreateCollectionRequest;
import org.openapitools.client.model.GuidCollection;
import org.openapitools.client.model.Id4n;
import org.openapitools.client.model.ListOfId4nProperties;
import org.openapitools.client.model.ListOfId4ns;
import org.openapitools.client.model.PaginatedResponseOfGuid;
import org.openapitools.client.model.PaginatedResponseOfGuidCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionsApi
 */
@Disabled
public class CollectionsApiTest {

    private final CollectionsApi api = new CollectionsApi();

    /**
     * Add elements to collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addElementsToCollectionTest() throws ApiException {
        String id4n = null;
        ListOfId4ns listOfId4ns = null;
        api.addElementsToCollection(id4n, listOfId4ns);
        // TODO: test validations
    }

    /**
     * Create collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        CreateCollectionRequest createCollectionRequest = null;
        Id4n response = api.createCollection(createCollectionRequest);
        // TODO: test validations
    }

    /**
     * Delete collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String id4n = null;
        api.deleteCollection(id4n);
        // TODO: test validations
    }

    /**
     * Delete ID4n properties
     *
     * Partial deletion of id4n properties. If the property does not exist, it will be ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertiesTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        List<String> requestBody = null;
        api.deleteProperties(id4n, organizationId, requestBody);
        // TODO: test validations
    }

    /**
     * Find collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCollectionTest() throws ApiException {
        String id4n = null;
        GuidCollection response = api.findCollection(id4n);
        // TODO: test validations
    }

    /**
     * Get collections of organization
     *
     * Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. &#x60;com.yourcompany.orderId.eq&#x3D;1234&#x60;  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCollectionsOfOrganizationTest() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String label = null;
        String labelPrefix = null;
        List<String> property = null;
        PaginatedResponseOfGuidCollection response = api.getAllCollectionsOfOrganization(organizationId, offset, limit, type, label, labelPrefix, property);
        // TODO: test validations
    }

    /**
     * Get multiple ID4n properties
     *
     * Get a list of ID4n properties for the specified ID4ns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultiplePropertiesTest() throws ApiException {
        List<String> id4ns = null;
        String organizationId = null;
        ListOfId4nProperties response = api.getMultipleProperties(id4ns, organizationId);
        // TODO: test validations
    }

    /**
     * Retrieve ID4n properties
     *
     * List all properties of an id4n.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPropertiesTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Map<String, String> response = api.getProperties(id4n, organizationId);
        // TODO: test validations
    }

    /**
     * List contents of the collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listElementsOfCollectionTest() throws ApiException {
        String id4n = null;
        Integer offset = null;
        Integer limit = null;
        String organizationId = null;
        PaginatedResponseOfGuid response = api.listElementsOfCollection(id4n, offset, limit, organizationId);
        // TODO: test validations
    }

    /**
     * Patch ID4n properties
     *
     * Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPropertiesTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Map<String, String> requestBody = null;
        api.patchProperties(id4n, organizationId, requestBody);
        // TODO: test validations
    }

    /**
     * Remove elements from collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeElementsFromCollectionTest() throws ApiException {
        String id4n = null;
        ListOfId4ns listOfId4ns = null;
        api.removeElementsFromCollection(id4n, listOfId4ns);
        // TODO: test validations
    }

    /**
     * Update collection
     *
     * Update collection changing only the given values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollectionTest() throws ApiException {
        String id4n = null;
        GuidCollection guidCollection = null;
        Object response = api.updateCollection(id4n, guidCollection);
        // TODO: test validations
    }

}
