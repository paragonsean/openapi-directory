/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.PaginatedResponseOfDocument;
import org.openapitools.client.model.PaginatedResponseOfHistoryItem;
import org.openapitools.client.model.Route;
import org.openapitools.client.model.WhoIsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicServicesApi
 */
@Disabled
public class PublicServicesApiTest {

    private final PublicServicesApi api = new PublicServicesApi();

    /**
     * Retrieve a public document (meta-data only, no content)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        Document response = api.getPublicDocument(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Retrieve all public routes for a GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoutesTest() throws ApiException {
        String id4n = null;
        String type = null;
        Boolean interpolate = null;
        List<Route> response = api.getRoutes(id4n, type, interpolate);
        // TODO: test validations
    }

    /**
     * Forward
     *
     * Forwarding to the designated route defined in the routing,
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void goTest() throws ApiException {
        String guid = null;
        api.go(guid);
        // TODO: test validations
    }

    /**
     * List public documents
     *
     * Listing all public documents of an id4n
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllPublicDocumentsTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfDocument response = api.listAllPublicDocuments(id4n, organizationId, owner, offset, limit);
        // TODO: test validations
    }

    /**
     * Shows the public history of the given GUID
     *
     * Only contains public history items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublicHistoryTest() throws ApiException {
        String id4n = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfHistoryItem response = api.listPublicHistory(id4n, offset, limit);
        // TODO: test validations
    }

    /**
     * Read public organization information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readOrganizationInfoTest() throws ApiException {
        String organizationId = null;
        Organization response = api.readOrganizationInfo(organizationId);
        // TODO: test validations
    }

    /**
     * Read public document contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPublicDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        byte[] response = api.readPublicDocument(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Resolve image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveImageUsingGET_0Test() throws ApiException {
        String imageID = null;
        byte[] response = api.resolveImageUsingGET_0(imageID);
        // TODO: test validations
    }

    /**
     * Resolve owner of id4n
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveWhoIsEntryTest() throws ApiException {
        String id4n = null;
        WhoIsResponse response = api.resolveWhoIsEntry(id4n);
        // TODO: test validations
    }

}
