/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentUpdate;
import java.io.File;
import org.openapitools.client.model.PaginatedResponseOfDocument;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */
@Disabled
public class StorageApiTest {

    private final StorageApi api = new StorageApi();

    /**
     * Create an document for an id4n
     *
     * The documents&#39; mime type is suggested on octet-stream data. Otherwise the specified content mime type is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        File content = null;
        Document response = api.createDocument(organizationId, id4n, content);
        // TODO: test validations
    }

    /**
     * Delete a document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        api.deleteDocument(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Retrieve a document (meta-data only, no content)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        Document response = api.getDocument(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Retrieve a public document (meta-data only, no content)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicDocument_0Test() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        Document response = api.getPublicDocument_0(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * List documents
     *
     * Listing all documents of an id4n
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllDocumentsTest() throws ApiException {
        String id4n = null;
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfDocument response = api.listAllDocuments(id4n, owner, offset, limit);
        // TODO: test validations
    }

    /**
     * List public documents
     *
     * Listing all public documents of an id4n
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllPublicDocuments_0Test() throws ApiException {
        String id4n = null;
        String organizationId = null;
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfDocument response = api.listAllPublicDocuments_0(id4n, organizationId, owner, offset, limit);
        // TODO: test validations
    }

    /**
     * List organization specific documents
     *
     * Listing documents of an id4n seen by a specified organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDocumentsTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfDocument response = api.listDocuments(organizationId, id4n, owner, offset, limit);
        // TODO: test validations
    }

    /**
     * Put an document for an id4n
     *
     * Creating or overwriting an existing document 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        File content = null;
        Document response = api.putDocument(organizationId, id4n, content);
        // TODO: test validations
    }

    /**
     * Read document contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readDocumentTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        byte[] response = api.readDocument(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Read data from microstorage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readFromMicrostorageTest() throws ApiException {
        String organization = null;
        String id4n = null;
        byte[] response = api.readFromMicrostorage(organization, id4n);
        // TODO: test validations
    }

    /**
     * Read public document contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readPublicDocument_0Test() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        byte[] response = api.readPublicDocument_0(organizationId, id4n, fileName);
        // TODO: test validations
    }

    /**
     * Update a document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentMetadataTest() throws ApiException {
        String organizationId = null;
        String id4n = null;
        String fileName = null;
        DocumentUpdate documentUpdate = null;
        Document response = api.updateDocumentMetadata(organizationId, id4n, fileName, documentUpdate);
        // TODO: test validations
    }

    /**
     * Write data to microstorage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void writeToMicrostorageTest() throws ApiException {
        String organization = null;
        String id4n = null;
        String contentType = null;
        Long contentLength = null;
        byte[] body = null;
        Object response = api.writeToMicrostorage(organization, id4n, contentType, contentLength, body);
        // TODO: test validations
    }

}
