/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.HistoryItem;
import org.openapitools.client.model.HistoryItemUpdate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedResponseOfHistoryItem;
import org.openapitools.client.model.Visibility;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
@Disabled
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    /**
     * Add history item
     *
     * Add a new history item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemTest() throws ApiException {
        String id4n = null;
        HistoryItem historyItem = null;
        api.addItem(id4n, historyItem);
        // TODO: test validations
    }

    /**
     * DEPRECATED - List history
     *
     * DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callListTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Boolean includePrivate = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfHistoryItem response = api.callList(id4n, organizationId, includePrivate, offset, limit);
        // TODO: test validations
    }

    /**
     * List history
     *
     * Lists the history of a GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filteredListTest() throws ApiException {
        String id4n = null;
        Boolean includePrivate = null;
        String organization = null;
        List<String> type = null;
        List<String> qualifier = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfHistoryItem response = api.filteredList(id4n, includePrivate, organization, type, qualifier, fromDate, toDate, offset, limit);
        // TODO: test validations
    }

    /**
     * Get history item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveItemTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Integer sequenceId = null;
        HistoryItem response = api.retrieveItem(id4n, organizationId, sequenceId);
        // TODO: test validations
    }

    /**
     * Update history item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Integer sequenceId = null;
        HistoryItemUpdate historyItemUpdate = null;
        HistoryItem response = api.updateItem(id4n, organizationId, sequenceId, historyItemUpdate);
        // TODO: test validations
    }

    /**
     * Set history item visibility
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemVisibilityTest() throws ApiException {
        String id4n = null;
        String organizationId = null;
        Integer sequenceId = null;
        Visibility visibility = null;
        HistoryItem response = api.updateItemVisibility(id4n, organizationId, sequenceId, visibility);
        // TODO: test validations
    }

}
