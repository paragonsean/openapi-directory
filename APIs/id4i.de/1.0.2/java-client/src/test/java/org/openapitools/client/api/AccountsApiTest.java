/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountCredentials;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ChangeRoleRequest;
import org.openapitools.client.model.CompleteUserRegistrationRequest;
import org.openapitools.client.model.OrganizationUserInvitationListRequest;
import org.openapitools.client.model.PaginatedResponseOfOrganization;
import org.openapitools.client.model.PaginatedResponseOfRole;
import org.openapitools.client.model.PaginatedResponseOfUserPresentation;
import org.openapitools.client.model.PaginatedResponseOfUserRoles;
import org.openapitools.client.model.PaginatedResponseOfstring;
import org.openapitools.client.model.PasswordResetRequest;
import org.openapitools.client.model.PasswordResetVerificationRequest;
import org.openapitools.client.model.RegistrationVerificationTokenPresentation;
import org.openapitools.client.model.SimpleMessageResponse;
import org.openapitools.client.model.UserPresentation;
import org.openapitools.client.model.UserRegistrationRequest;
import org.openapitools.client.model.UserRegistrationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Add role(s) to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserRolesTest() throws ApiException {
        String organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        api.addUserRoles(organizationId, username, changeRoleRequest);
        // TODO: test validations
    }

    /**
     * Complete registration
     *
     * Completing a registration e.g. for invited users. Finish registration with a username and a password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeRegistrationTest() throws ApiException {
        CompleteUserRegistrationRequest completeUserRegistrationRequest = null;
        api.completeRegistration(completeUserRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Find by username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        UserPresentation response = api.findUserByUsername(username);
        // TODO: test validations
    }

    /**
     * Find users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersTest() throws ApiException {
        String usernamePrefix = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfUserPresentation response = api.findUsers(usernamePrefix, offset, limit);
        // TODO: test validations
    }

    /**
     * List users and their roles
     *
     * Listing users and their roles in a paginated manner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOrganizationRolesTest() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfUserRoles response = api.getAllOrganizationRoles(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve organizations of user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationsOfUserTest() throws ApiException {
        String role = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfOrganization response = api.getOrganizationsOfUser(role, offset, limit);
        // TODO: test validations
    }

    /**
     * Get user roles by username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRolesTest() throws ApiException {
        String organizationId = null;
        String username = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfstring response = api.getUserRoles(organizationId, username, offset, limit);
        // TODO: test validations
    }

    /**
     * Find users in organization
     *
     * Finding users in the specified organization in a paginated manner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersOfOrganizationTest() throws ApiException {
        String organizationId = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfUserPresentation response = api.getUsersOfOrganization(organizationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Invite Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUsersTest() throws ApiException {
        String organizationId = null;
        OrganizationUserInvitationListRequest organizationUserInvitationListRequest = null;
        api.inviteUsers(organizationId, organizationUserInvitationListRequest);
        // TODO: test validations
    }

    /**
     * List roles
     *
     * Listing of roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllRolesTest() throws ApiException {
        String privilege = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedResponseOfRole response = api.listAllRoles(privilege, offset, limit);
        // TODO: test validations
    }

    /**
     * ID4i API Login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        AccountCredentials accountCredentials = null;
        api.login(accountCredentials);
        // TODO: test validations
    }

    /**
     * Register user
     *
     * Registering a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        UserRegistrationRequest userRegistrationRequest = null;
        UserRegistrationResponse response = api.registerUser(userRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Remove role(s) from user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserRolesTest() throws ApiException {
        String organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        api.removeUserRoles(organizationId, username, changeRoleRequest);
        // TODO: test validations
    }

    /**
     * Request password reset
     *
     * Requesting a reset for a new password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws ApiException {
        PasswordResetRequest passwordResetRequest = null;
        SimpleMessageResponse response = api.requestPasswordReset(passwordResetRequest);
        // TODO: test validations
    }

    /**
     * Verify password reset
     *
     * Setting a new password and verifying the request to set the password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyPasswordResetTest() throws ApiException {
        PasswordResetVerificationRequest passwordResetVerificationRequest = null;
        SimpleMessageResponse response = api.verifyPasswordReset(passwordResetVerificationRequest);
        // TODO: test validations
    }

    /**
     * Verify registration
     *
     * Verifies a new user registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserRegistrationTest() throws ApiException {
        RegistrationVerificationTokenPresentation registrationVerificationTokenPresentation = null;
        api.verifyUserRegistration(registrationVerificationTokenPresentation);
        // TODO: test validations
    }

}
