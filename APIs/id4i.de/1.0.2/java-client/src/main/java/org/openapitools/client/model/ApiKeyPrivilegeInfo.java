/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiKeyPrivilegeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiKeyPrivilegeInfo {
  public static final String SERIALIZED_NAME_ALLOWS_BILLABLE_OPERATIONS = "allowsBillableOperations";
  @SerializedName(SERIALIZED_NAME_ALLOWS_BILLABLE_OPERATIONS)
  private Boolean allowsBillableOperations;

  public static final String SERIALIZED_NAME_HELP_TEXT = "helpText";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_ID4N_ASSOCIATED = "id4nAssociated";
  @SerializedName(SERIALIZED_NAME_ID4N_ASSOCIATED)
  private Boolean id4nAssociated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ApiKeyPrivilegeInfo() {
  }

  public ApiKeyPrivilegeInfo allowsBillableOperations(Boolean allowsBillableOperations) {
    this.allowsBillableOperations = allowsBillableOperations;
    return this;
  }

  /**
   * Get allowsBillableOperations
   * @return allowsBillableOperations
   */
  @javax.annotation.Nullable
  public Boolean getAllowsBillableOperations() {
    return allowsBillableOperations;
  }

  public void setAllowsBillableOperations(Boolean allowsBillableOperations) {
    this.allowsBillableOperations = allowsBillableOperations;
  }


  public ApiKeyPrivilegeInfo helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

  /**
   * Get helpText
   * @return helpText
   */
  @javax.annotation.Nullable
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }


  public ApiKeyPrivilegeInfo id4nAssociated(Boolean id4nAssociated) {
    this.id4nAssociated = id4nAssociated;
    return this;
  }

  /**
   * Get id4nAssociated
   * @return id4nAssociated
   */
  @javax.annotation.Nonnull
  public Boolean getId4nAssociated() {
    return id4nAssociated;
  }

  public void setId4nAssociated(Boolean id4nAssociated) {
    this.id4nAssociated = id4nAssociated;
  }


  public ApiKeyPrivilegeInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiKeyPrivilegeInfo apiKeyPrivilegeInfo = (ApiKeyPrivilegeInfo) o;
    return Objects.equals(this.allowsBillableOperations, apiKeyPrivilegeInfo.allowsBillableOperations) &&
        Objects.equals(this.helpText, apiKeyPrivilegeInfo.helpText) &&
        Objects.equals(this.id4nAssociated, apiKeyPrivilegeInfo.id4nAssociated) &&
        Objects.equals(this.name, apiKeyPrivilegeInfo.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsBillableOperations, helpText, id4nAssociated, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiKeyPrivilegeInfo {\n");
    sb.append("    allowsBillableOperations: ").append(toIndentedString(allowsBillableOperations)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    id4nAssociated: ").append(toIndentedString(id4nAssociated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsBillableOperations");
    openapiFields.add("helpText");
    openapiFields.add("id4nAssociated");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id4nAssociated");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiKeyPrivilegeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiKeyPrivilegeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiKeyPrivilegeInfo is not found in the empty JSON string", ApiKeyPrivilegeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiKeyPrivilegeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiKeyPrivilegeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiKeyPrivilegeInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("helpText") != null && !jsonObj.get("helpText").isJsonNull()) && !jsonObj.get("helpText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpText").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiKeyPrivilegeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiKeyPrivilegeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiKeyPrivilegeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiKeyPrivilegeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiKeyPrivilegeInfo>() {
           @Override
           public void write(JsonWriter out, ApiKeyPrivilegeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiKeyPrivilegeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiKeyPrivilegeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiKeyPrivilegeInfo
   * @throws IOException if the JSON string is invalid with respect to ApiKeyPrivilegeInfo
   */
  public static ApiKeyPrivilegeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiKeyPrivilegeInfo.class);
  }

  /**
   * Convert an instance of ApiKeyPrivilegeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

