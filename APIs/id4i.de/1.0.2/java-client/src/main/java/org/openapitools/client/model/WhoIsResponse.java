/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.OrganizationAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WhoIsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WhoIsResponse {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private Map<String, String> aliases = new HashMap<>();

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private Organization organization;

  public static final String SERIALIZED_NAME_ORGANIZATION_ADDRESS = "organizationAddress";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ADDRESS)
  private OrganizationAddress organizationAddress;

  public WhoIsResponse() {
  }

  public WhoIsResponse aliases(Map<String, String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public WhoIsResponse putAliasesItem(String key, String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new HashMap<>();
    }
    this.aliases.put(key, aliasesItem);
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public Map<String, String> getAliases() {
    return aliases;
  }

  public void setAliases(Map<String, String> aliases) {
    this.aliases = aliases;
  }


  public WhoIsResponse organization(Organization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public Organization getOrganization() {
    return organization;
  }

  public void setOrganization(Organization organization) {
    this.organization = organization;
  }


  public WhoIsResponse organizationAddress(OrganizationAddress organizationAddress) {
    this.organizationAddress = organizationAddress;
    return this;
  }

  /**
   * Get organizationAddress
   * @return organizationAddress
   */
  @javax.annotation.Nullable
  public OrganizationAddress getOrganizationAddress() {
    return organizationAddress;
  }

  public void setOrganizationAddress(OrganizationAddress organizationAddress) {
    this.organizationAddress = organizationAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhoIsResponse whoIsResponse = (WhoIsResponse) o;
    return Objects.equals(this.aliases, whoIsResponse.aliases) &&
        Objects.equals(this.organization, whoIsResponse.organization) &&
        Objects.equals(this.organizationAddress, whoIsResponse.organizationAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, organization, organizationAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhoIsResponse {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    organizationAddress: ").append(toIndentedString(organizationAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("organization");
    openapiFields.add("organizationAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WhoIsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WhoIsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WhoIsResponse is not found in the empty JSON string", WhoIsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WhoIsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WhoIsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("organization"));
      }
      // validate the optional field `organizationAddress`
      if (jsonObj.get("organizationAddress") != null && !jsonObj.get("organizationAddress").isJsonNull()) {
        OrganizationAddress.validateJsonElement(jsonObj.get("organizationAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WhoIsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WhoIsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WhoIsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WhoIsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WhoIsResponse>() {
           @Override
           public void write(JsonWriter out, WhoIsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WhoIsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WhoIsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WhoIsResponse
   * @throws IOException if the JSON string is invalid with respect to WhoIsResponse
   */
  public static WhoIsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WhoIsResponse.class);
  }

  /**
   * Convert an instance of WhoIsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

