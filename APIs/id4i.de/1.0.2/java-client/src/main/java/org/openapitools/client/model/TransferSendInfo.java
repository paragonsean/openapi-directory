/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransferSendInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferSendInfo {
  public static final String SERIALIZED_NAME_HOLDER_ORGANIZATION_ID = "holderOrganizationId";
  @SerializedName(SERIALIZED_NAME_HOLDER_ORGANIZATION_ID)
  private String holderOrganizationId;

  public static final String SERIALIZED_NAME_KEEP_OWNERSHIP = "keepOwnership";
  @SerializedName(SERIALIZED_NAME_KEEP_OWNERSHIP)
  private Boolean keepOwnership;

  public static final String SERIALIZED_NAME_OPEN_FOR_CLAIMS = "openForClaims";
  @SerializedName(SERIALIZED_NAME_OPEN_FOR_CLAIMS)
  private Boolean openForClaims;

  public static final String SERIALIZED_NAME_OWNER_ORGANIZATION_ID = "ownerOrganizationId";
  @SerializedName(SERIALIZED_NAME_OWNER_ORGANIZATION_ID)
  private String ownerOrganizationId;

  public static final String SERIALIZED_NAME_RECIPIENT_ORGANIZATION_IDS = "recipientOrganizationIds";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ORGANIZATION_IDS)
  private List<String> recipientOrganizationIds = new ArrayList<>();

  public TransferSendInfo() {
  }

  public TransferSendInfo(
     String holderOrganizationId, 
     String ownerOrganizationId
  ) {
    this();
    this.holderOrganizationId = holderOrganizationId;
    this.ownerOrganizationId = ownerOrganizationId;
  }

  /**
   * The current holder of the object
   * @return holderOrganizationId
   */
  @javax.annotation.Nullable
  public String getHolderOrganizationId() {
    return holderOrganizationId;
  }



  public TransferSendInfo keepOwnership(Boolean keepOwnership) {
    this.keepOwnership = keepOwnership;
    return this;
  }

  /**
   * Keep the public ownership while transferring the object
   * @return keepOwnership
   */
  @javax.annotation.Nonnull
  public Boolean getKeepOwnership() {
    return keepOwnership;
  }

  public void setKeepOwnership(Boolean keepOwnership) {
    this.keepOwnership = keepOwnership;
  }


  public TransferSendInfo openForClaims(Boolean openForClaims) {
    this.openForClaims = openForClaims;
    return this;
  }

  /**
   * Allow anyone who knows (or can scan) the ID4N to claim ownership of this object
   * @return openForClaims
   */
  @javax.annotation.Nonnull
  public Boolean getOpenForClaims() {
    return openForClaims;
  }

  public void setOpenForClaims(Boolean openForClaims) {
    this.openForClaims = openForClaims;
  }


  /**
   * The current publicly visible owner of the object
   * @return ownerOrganizationId
   */
  @javax.annotation.Nullable
  public String getOwnerOrganizationId() {
    return ownerOrganizationId;
  }



  public TransferSendInfo recipientOrganizationIds(List<String> recipientOrganizationIds) {
    this.recipientOrganizationIds = recipientOrganizationIds;
    return this;
  }

  public TransferSendInfo addRecipientOrganizationIdsItem(String recipientOrganizationIdsItem) {
    if (this.recipientOrganizationIds == null) {
      this.recipientOrganizationIds = new ArrayList<>();
    }
    this.recipientOrganizationIds.add(recipientOrganizationIdsItem);
    return this;
  }

  /**
   * Allow only these organizations to obtain this object
   * @return recipientOrganizationIds
   */
  @javax.annotation.Nonnull
  public List<String> getRecipientOrganizationIds() {
    return recipientOrganizationIds;
  }

  public void setRecipientOrganizationIds(List<String> recipientOrganizationIds) {
    this.recipientOrganizationIds = recipientOrganizationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferSendInfo transferSendInfo = (TransferSendInfo) o;
    return Objects.equals(this.holderOrganizationId, transferSendInfo.holderOrganizationId) &&
        Objects.equals(this.keepOwnership, transferSendInfo.keepOwnership) &&
        Objects.equals(this.openForClaims, transferSendInfo.openForClaims) &&
        Objects.equals(this.ownerOrganizationId, transferSendInfo.ownerOrganizationId) &&
        Objects.equals(this.recipientOrganizationIds, transferSendInfo.recipientOrganizationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holderOrganizationId, keepOwnership, openForClaims, ownerOrganizationId, recipientOrganizationIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferSendInfo {\n");
    sb.append("    holderOrganizationId: ").append(toIndentedString(holderOrganizationId)).append("\n");
    sb.append("    keepOwnership: ").append(toIndentedString(keepOwnership)).append("\n");
    sb.append("    openForClaims: ").append(toIndentedString(openForClaims)).append("\n");
    sb.append("    ownerOrganizationId: ").append(toIndentedString(ownerOrganizationId)).append("\n");
    sb.append("    recipientOrganizationIds: ").append(toIndentedString(recipientOrganizationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("holderOrganizationId");
    openapiFields.add("keepOwnership");
    openapiFields.add("openForClaims");
    openapiFields.add("ownerOrganizationId");
    openapiFields.add("recipientOrganizationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keepOwnership");
    openapiRequiredFields.add("openForClaims");
    openapiRequiredFields.add("recipientOrganizationIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferSendInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferSendInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferSendInfo is not found in the empty JSON string", TransferSendInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferSendInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferSendInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransferSendInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("holderOrganizationId") != null && !jsonObj.get("holderOrganizationId").isJsonNull()) && !jsonObj.get("holderOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderOrganizationId").toString()));
      }
      if ((jsonObj.get("ownerOrganizationId") != null && !jsonObj.get("ownerOrganizationId").isJsonNull()) && !jsonObj.get("ownerOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerOrganizationId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("recipientOrganizationIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("recipientOrganizationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientOrganizationIds` to be an array in the JSON string but got `%s`", jsonObj.get("recipientOrganizationIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferSendInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferSendInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferSendInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferSendInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferSendInfo>() {
           @Override
           public void write(JsonWriter out, TransferSendInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferSendInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferSendInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferSendInfo
   * @throws IOException if the JSON string is invalid with respect to TransferSendInfo
   */
  public static TransferSendInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferSendInfo.class);
  }

  /**
   * Convert an instance of TransferSendInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

