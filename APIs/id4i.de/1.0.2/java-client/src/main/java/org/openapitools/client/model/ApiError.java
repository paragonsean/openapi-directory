/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiError {
  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    REGISTRATION_VERIFICATION_NO_TOKEN("ERR_REGISTRATION_VERIFICATION_NO_TOKEN"),
    
    REGISTRATION_VERIFICATION_INVALID_TOKEN("ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN"),
    
    REGISTRATION_VERIFICATION_EXPIRED_TOKEN("ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN"),
    
    AUTHENTICATION_NO_TOKEN("ERR_AUTHENTICATION_NO_TOKEN"),
    
    AUTHENTICATION_INVALID_TOKEN("ERR_AUTHENTICATION_INVALID_TOKEN"),
    
    AUTHENTICATION_EXPIRED_TOKEN("ERR_AUTHENTICATION_EXPIRED_TOKEN"),
    
    AUTHENTICATION_FAILED("ERR_AUTHENTICATION_FAILED"),
    
    AUTHORIZATION_MISSING_PRIVILEGES("ERR_AUTHORIZATION_MISSING_PRIVILEGES"),
    
    AUTHORIZATION_FORBIDDEN("ERR_AUTHORIZATION_FORBIDDEN"),
    
    AUTHORIZATION_REQUIRE_USER("ERR_AUTHORIZATION_REQUIRE_USER"),
    
    INPUT_VALIDATION_FAILED("ERR_INPUT_VALIDATION_FAILED"),
    
    FIELD_INPUT_VALIDATION_FAILED("ERR_FIELD_INPUT_VALIDATION_FAILED"),
    
    VALIDATION_CONSTRAINT_FAILED("ERR_VALIDATION_CONSTRAINT_FAILED"),
    
    INPUT_NOT_READABLE("ERR_INPUT_NOT_READABLE"),
    
    INVALID_INPUT_PARAMETER("ERR_INVALID_INPUT_PARAMETER"),
    
    GUID_CREATION("ERR_GUID_CREATION"),
    
    INVALID_ID4_N_OBJECT_TYPE("ERR_INVALID_ID4N_OBJECT_TYPE"),
    
    MISSING_BILLING_INFORMATION("ERR_MISSING_BILLING_INFORMATION"),
    
    COLLECTION_UPDATE_DENIED("ERR_COLLECTION_UPDATE_DENIED"),
    
    ENTITY_NOT_FOUND("ERR_ENTITY_NOT_FOUND"),
    
    ENTITY_TOO_BIG("ERR_ENTITY_TOO_BIG"),
    
    DUPLICATE("ERR_DUPLICATE"),
    
    INTERNAL("ERR_INTERNAL"),
    
    UNKNOWN("ERR_UNKNOWN"),
    
    INVALID_ORGANIZATION_USERROLE("ERR_INVALID_ORGANIZATION_USERROLE"),
    
    ORGANIZATION_ROLE_INCONSISTENCY("ERR_ORGANIZATION_ROLE_INCONSISTENCY"),
    
    ORGANIZATION_NOT_DELETABLE("ERR_ORGANIZATION_NOT_DELETABLE"),
    
    USER_ALREADY_IN_ORGANIZATION("ERR_USER_ALREADY_IN_ORGANIZATION"),
    
    USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE("ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE"),
    
    USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME("ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME"),
    
    USER_DEACTIVATED("ERR_USER_DEACTIVATED"),
    
    LANGUAGE_NOT_SUPPORTED("ERR_LANGUAGE_NOT_SUPPORTED"),
    
    EMAIL_MISSING_TEMPLATE_PARAM("ERR_EMAIL_MISSING_TEMPLATE_PARAM"),
    
    EMAIL_TEMPLATE_NOT_AVAILABLE("ERR_EMAIL_TEMPLATE_NOT_AVAILABLE"),
    
    EMAIL_PREPARATION_FAILED("ERR_EMAIL_PREPARATION_FAILED"),
    
    IMAGE_CONVERSION("ERR_IMAGE_CONVERSION"),
    
    UPLOAD_TOO_LARGE("ERR_UPLOAD_TOO_LARGE"),
    
    INVALID_ALIAS_TYPE("ERR_INVALID_ALIAS_TYPE"),
    
    INVALID_URI_TEMPLATE("ERR_INVALID_URI_TEMPLATE"),
    
    INVALID_URI_TEMPLATE_VARIABLE("ERR_INVALID_URI_TEMPLATE_VARIABLE"),
    
    INVALID_NAMESPACE("ERR_INVALID_NAMESPACE"),
    
    INVALID_PROPERTY_KEY("ERR_INVALID_PROPERTY_KEY"),
    
    INVALID_FILTER("ERR_INVALID_FILTER"),
    
    NAMESPACE_ALREADY_EXISTS("ERR_NAMESPACE_ALREADY_EXISTS"),
    
    INSECURE_PASSWORD("ERR_INSECURE_PASSWORD"),
    
    TRANSFER_DENIED("ERR_TRANSFER_DENIED"),
    
    INVALID_PHYSICAL_STATE("ERR_INVALID_PHYSICAL_STATE"),
    
    INVALID_HISTORY_PROPERTY_NAMESPACE("ERR_INVALID_HISTORY_PROPERTY_NAMESPACE"),
    
    INVALID_HISTORY_PROPERTY_VALUE("ERR_INVALID_HISTORY_PROPERTY_VALUE"),
    
    ORGA_CANNOT_BE_OWN_PARTNER("ERR_ORGA_CANNOT_BE_OWN_PARTNER"),
    
    INVALID_GS1_CODE("ERR_INVALID_GS1_CODE"),
    
    INVALID_GS1_CHAR_IN_CODE("ERR_INVALID_GS1_CHAR_IN_CODE"),
    
    INVALID_GS1_CODE_NOT_UNIQUE("ERR_INVALID_GS1_CODE_NOT_UNIQUE"),
    
    INVALID_GS1_GTIN("ERR_INVALID_GS1_GTIN"),
    
    GS1_CODE_CURRENTLY_UNSUPPORTED("ERR_GS1_CODE_CURRENTLY_UNSUPPORTED");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_ERROR_ID = "errorId";
  @SerializedName(SERIALIZED_NAME_ERROR_ID)
  private String errorId;

  public static final String SERIALIZED_NAME_ERROR_LIST = "errorList";
  @SerializedName(SERIALIZED_NAME_ERROR_LIST)
  private List<ApiError> errorList = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public ApiError() {
  }

  public ApiError code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ApiError errorId(String errorId) {
    this.errorId = errorId;
    return this;
  }

  /**
   * Get errorId
   * @return errorId
   */
  @javax.annotation.Nonnull
  public String getErrorId() {
    return errorId;
  }

  public void setErrorId(String errorId) {
    this.errorId = errorId;
  }


  public ApiError errorList(List<ApiError> errorList) {
    this.errorList = errorList;
    return this;
  }

  public ApiError addErrorListItem(ApiError errorListItem) {
    if (this.errorList == null) {
      this.errorList = new ArrayList<>();
    }
    this.errorList.add(errorListItem);
    return this;
  }

  /**
   * Get errorList
   * @return errorList
   */
  @javax.annotation.Nonnull
  public List<ApiError> getErrorList() {
    return errorList;
  }

  public void setErrorList(List<ApiError> errorList) {
    this.errorList = errorList;
  }


  public ApiError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiError apiError = (ApiError) o;
    return Objects.equals(this.code, apiError.code) &&
        Objects.equals(this.errorId, apiError.errorId) &&
        Objects.equals(this.errorList, apiError.errorList) &&
        Objects.equals(this.message, apiError.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, errorId, errorList, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    errorList: ").append(toIndentedString(errorList)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("errorId");
    openapiFields.add("errorList");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("errorId");
    openapiRequiredFields.add("errorList");
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiError is not found in the empty JSON string", ApiError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("errorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errorList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorList` to be an array in the JSON string but got `%s`", jsonObj.get("errorList").toString()));
      }

      JsonArray jsonArrayerrorList = jsonObj.getAsJsonArray("errorList");
      // validate the required field `errorList` (array)
      for (int i = 0; i < jsonArrayerrorList.size(); i++) {
        ApiError.validateJsonElement(jsonArrayerrorList.get(i));
      };
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiError.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiError>() {
           @Override
           public void write(JsonWriter out, ApiError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiError
   * @throws IOException if the JSON string is invalid with respect to ApiError
   */
  public static ApiError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiError.class);
  }

  /**
   * Convert an instance of ApiError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

