/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GuidCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuidCollection {
  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_HOLDER_ORGANIZATION_ID = "holderOrganizationId";
  @SerializedName(SERIALIZED_NAME_HOLDER_ORGANIZATION_ID)
  private String holderOrganizationId;

  public static final String SERIALIZED_NAME_ID4N = "id4n";
  @SerializedName(SERIALIZED_NAME_ID4N)
  private String id4n;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_OWNER_ORGANIZATION_ID = "ownerOrganizationId";
  @SerializedName(SERIALIZED_NAME_OWNER_ORGANIZATION_ID)
  private String ownerOrganizationId;

  /**
   * Physical attachment state of the collection
   */
  @JsonAdapter(PhysicalStateEnum.Adapter.class)
  public enum PhysicalStateEnum {
    UNATTACHED("UNATTACHED"),
    
    ATTACHED("ATTACHED"),
    
    DETACHED("DETACHED");

    private String value;

    PhysicalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhysicalStateEnum fromValue(String value) {
      for (PhysicalStateEnum b : PhysicalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhysicalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhysicalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhysicalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhysicalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhysicalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHYSICAL_STATE = "physicalState";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_STATE)
  private PhysicalStateEnum physicalState;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ROUTING_COLLECTION("ROUTING_COLLECTION"),
    
    LOGISTIC_COLLECTION("LOGISTIC_COLLECTION"),
    
    LABELLED_COLLECTION("LABELLED_COLLECTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GuidCollection() {
  }

  public GuidCollection(
     Long createdTimestamp, 
     String id4n, 
     String ownerOrganizationId, 
     TypeEnum type
  ) {
    this();
    this.createdTimestamp = createdTimestamp;
    this.id4n = id4n;
    this.ownerOrganizationId = ownerOrganizationId;
    this.type = type;
  }

  /**
   * The UTC unix timestamp of when this collection has been created
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }



  public GuidCollection holderOrganizationId(String holderOrganizationId) {
    this.holderOrganizationId = holderOrganizationId;
    return this;
  }

  /**
   * Organization namespace of the holder of the collection
   * @return holderOrganizationId
   */
  @javax.annotation.Nullable
  public String getHolderOrganizationId() {
    return holderOrganizationId;
  }

  public void setHolderOrganizationId(String holderOrganizationId) {
    this.holderOrganizationId = holderOrganizationId;
  }


  /**
   * The ID
   * @return id4n
   */
  @javax.annotation.Nullable
  public String getId4n() {
    return id4n;
  }



  public GuidCollection label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  /**
   * Organization namespace of the collection owner
   * @return ownerOrganizationId
   */
  @javax.annotation.Nullable
  public String getOwnerOrganizationId() {
    return ownerOrganizationId;
  }



  public GuidCollection physicalState(PhysicalStateEnum physicalState) {
    this.physicalState = physicalState;
    return this;
  }

  /**
   * Physical attachment state of the collection
   * @return physicalState
   */
  @javax.annotation.Nullable
  public PhysicalStateEnum getPhysicalState() {
    return physicalState;
  }

  public void setPhysicalState(PhysicalStateEnum physicalState) {
    this.physicalState = physicalState;
  }


  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuidCollection guidCollection = (GuidCollection) o;
    return Objects.equals(this.createdTimestamp, guidCollection.createdTimestamp) &&
        Objects.equals(this.holderOrganizationId, guidCollection.holderOrganizationId) &&
        Objects.equals(this.id4n, guidCollection.id4n) &&
        Objects.equals(this.label, guidCollection.label) &&
        Objects.equals(this.ownerOrganizationId, guidCollection.ownerOrganizationId) &&
        Objects.equals(this.physicalState, guidCollection.physicalState) &&
        Objects.equals(this.type, guidCollection.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTimestamp, holderOrganizationId, id4n, label, ownerOrganizationId, physicalState, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuidCollection {\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    holderOrganizationId: ").append(toIndentedString(holderOrganizationId)).append("\n");
    sb.append("    id4n: ").append(toIndentedString(id4n)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    ownerOrganizationId: ").append(toIndentedString(ownerOrganizationId)).append("\n");
    sb.append("    physicalState: ").append(toIndentedString(physicalState)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTimestamp");
    openapiFields.add("holderOrganizationId");
    openapiFields.add("id4n");
    openapiFields.add("label");
    openapiFields.add("ownerOrganizationId");
    openapiFields.add("physicalState");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuidCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuidCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuidCollection is not found in the empty JSON string", GuidCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuidCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuidCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("holderOrganizationId") != null && !jsonObj.get("holderOrganizationId").isJsonNull()) && !jsonObj.get("holderOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderOrganizationId").toString()));
      }
      if ((jsonObj.get("id4n") != null && !jsonObj.get("id4n").isJsonNull()) && !jsonObj.get("id4n").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id4n` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id4n").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("ownerOrganizationId") != null && !jsonObj.get("ownerOrganizationId").isJsonNull()) && !jsonObj.get("ownerOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerOrganizationId").toString()));
      }
      if ((jsonObj.get("physicalState") != null && !jsonObj.get("physicalState").isJsonNull()) && !jsonObj.get("physicalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physicalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physicalState").toString()));
      }
      // validate the optional field `physicalState`
      if (jsonObj.get("physicalState") != null && !jsonObj.get("physicalState").isJsonNull()) {
        PhysicalStateEnum.validateJsonElement(jsonObj.get("physicalState"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuidCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuidCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuidCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuidCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<GuidCollection>() {
           @Override
           public void write(JsonWriter out, GuidCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuidCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuidCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuidCollection
   * @throws IOException if the JSON string is invalid with respect to GuidCollection
   */
  public static GuidCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuidCollection.class);
  }

  /**
   * Convert an instance of GuidCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

