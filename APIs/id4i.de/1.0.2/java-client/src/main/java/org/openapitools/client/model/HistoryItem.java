/*
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Visibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GUID history item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:15.271005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private Map<String, String> additionalProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_OWNER_ORGANIZATION_ID = "ownerOrganizationId";
  @SerializedName(SERIALIZED_NAME_OWNER_ORGANIZATION_ID)
  private String ownerOrganizationId;

  public static final String SERIALIZED_NAME_SEQUENCE_ID = "sequenceId";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_ID)
  private Integer sequenceId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  /**
   * Type of the history item
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CREATED("CREATED"),
    
    DESTROYED("DESTROYED"),
    
    RECYCLED("RECYCLED"),
    
    SHIPMENT_PREPARED("SHIPMENT_PREPARED"),
    
    STORED("STORED"),
    
    RETRIEVED_FROM_STORAGE("RETRIEVED_FROM_STORAGE"),
    
    PACKAGED("PACKAGED"),
    
    DISPATCHED("DISPATCHED"),
    
    RECEIVED("RECEIVED"),
    
    DELIVERY_REFUSED("DELIVERY_REFUSED"),
    
    REPROCESSING_STARTED("REPROCESSING_STARTED"),
    
    REPROCESSING_STEP_STARTED("REPROCESSING_STEP_STARTED"),
    
    REPROCESSING_STEP_CANCELLED("REPROCESSING_STEP_CANCELLED"),
    
    REPROCESSING_STEP_FINISHED("REPROCESSING_STEP_FINISHED"),
    
    REPROCESSING_CANCELLED("REPROCESSING_CANCELLED"),
    
    REPROCESSING_FINISHED("REPROCESSING_FINISHED"),
    
    DISASSEMBLED("DISASSEMBLED"),
    
    MAINTENANCE_STARTED("MAINTENANCE_STARTED"),
    
    MAINTENANCE_STEP_STARTED("MAINTENANCE_STEP_STARTED"),
    
    MAINTENANCE_STEP_CANCELLED("MAINTENANCE_STEP_CANCELLED"),
    
    MAINTENANCE_STEP_FINISHED("MAINTENANCE_STEP_FINISHED"),
    
    MAINTENANCE_CANCELLED("MAINTENANCE_CANCELLED"),
    
    MAINTENANCE_FINISHED("MAINTENANCE_FINISHED"),
    
    PRODUCTION_STARTED("PRODUCTION_STARTED"),
    
    PRODUCTION_CANCELLED("PRODUCTION_CANCELLED"),
    
    PRODUCTION_FINISHED("PRODUCTION_FINISHED"),
    
    PRODUCTION_STEP_STARTED("PRODUCTION_STEP_STARTED"),
    
    PRODUCTION_STEP_CANCELLED("PRODUCTION_STEP_CANCELLED"),
    
    PRODUCTION_STEP_FINISHED("PRODUCTION_STEP_FINISHED"),
    
    QUALITY_CHECK_PERFORMED("QUALITY_CHECK_PERFORMED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private Visibility visibility;

  public HistoryItem() {
  }

  public HistoryItem(
     String ownerOrganizationId, 
     Integer sequenceId, 
     Long timestamp
  ) {
    this();
    this.ownerOrganizationId = ownerOrganizationId;
    this.sequenceId = sequenceId;
    this.timestamp = timestamp;
  }

  public HistoryItem additionalProperties(Map<String, String> additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  public HistoryItem putAdditionalPropertiesItem(String key, String additionalPropertiesItem) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new HashMap<>();
    }
    this.additionalProperties.put(key, additionalPropertiesItem);
    return this;
  }

  /**
   * History items custom additional properties
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(Map<String, String> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public HistoryItem organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Originator of the history item
   * @return organizationId
   */
  @javax.annotation.Nonnull
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  /**
   * Owner of the history item
   * @return ownerOrganizationId
   */
  @javax.annotation.Nullable
  public String getOwnerOrganizationId() {
    return ownerOrganizationId;
  }



  /**
   * Forms the primary key of the history item together with the GUID and the organizationId
   * @return sequenceId
   */
  @javax.annotation.Nullable
  public Integer getSequenceId() {
    return sequenceId;
  }



  /**
   * History item timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }



  public HistoryItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the history item
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public HistoryItem visibility(Visibility visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public Visibility getVisibility() {
    return visibility;
  }

  public void setVisibility(Visibility visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryItem historyItem = (HistoryItem) o;
    return Objects.equals(this.additionalProperties, historyItem.additionalProperties) &&
        Objects.equals(this.organizationId, historyItem.organizationId) &&
        Objects.equals(this.ownerOrganizationId, historyItem.ownerOrganizationId) &&
        Objects.equals(this.sequenceId, historyItem.sequenceId) &&
        Objects.equals(this.timestamp, historyItem.timestamp) &&
        Objects.equals(this.type, historyItem.type) &&
        Objects.equals(this.visibility, historyItem.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, organizationId, ownerOrganizationId, sequenceId, timestamp, type, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryItem {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    ownerOrganizationId: ").append(toIndentedString(ownerOrganizationId)).append("\n");
    sb.append("    sequenceId: ").append(toIndentedString(sequenceId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("organizationId");
    openapiFields.add("ownerOrganizationId");
    openapiFields.add("sequenceId");
    openapiFields.add("timestamp");
    openapiFields.add("type");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organizationId");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryItem is not found in the empty JSON string", HistoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistoryItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if ((jsonObj.get("ownerOrganizationId") != null && !jsonObj.get("ownerOrganizationId").isJsonNull()) && !jsonObj.get("ownerOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerOrganizationId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        Visibility.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryItem>() {
           @Override
           public void write(JsonWriter out, HistoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryItem
   * @throws IOException if the JSON string is invalid with respect to HistoryItem
   */
  public static HistoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryItem.class);
  }

  /**
   * Convert an instance of HistoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

