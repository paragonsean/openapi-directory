# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemovePartnerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization_id: str=None):
        """RemovePartnerRequest - a model defined in OpenAPI

        :param organization_id: The organization_id of this RemovePartnerRequest.
        """
        self.openapi_types = {
            'organization_id': str
        }

        self.attribute_map = {
            'organization_id': 'organizationId'
        }

        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemovePartnerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemovePartnerRequest of this RemovePartnerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_id(self):
        """Gets the organization_id of this RemovePartnerRequest.

        The namespace of the partner organization to remove

        :return: The organization_id of this RemovePartnerRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this RemovePartnerRequest.

        The namespace of the partner organization to remove

        :param organization_id: The organization_id of this RemovePartnerRequest.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id
