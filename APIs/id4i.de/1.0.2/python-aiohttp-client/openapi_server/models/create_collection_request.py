# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, length: int=None, organization_id: str=None, type: str=None):
        """CreateCollectionRequest - a model defined in OpenAPI

        :param label: The label of this CreateCollectionRequest.
        :param length: The length of this CreateCollectionRequest.
        :param organization_id: The organization_id of this CreateCollectionRequest.
        :param type: The type of this CreateCollectionRequest.
        """
        self.openapi_types = {
            'label': str,
            'length': int,
            'organization_id': str,
            'type': str
        }

        self.attribute_map = {
            'label': 'label',
            'length': 'length',
            'organization_id': 'organizationId',
            'type': 'type'
        }

        self._label = label
        self._length = length
        self._organization_id = organization_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCollectionRequest of this CreateCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this CreateCollectionRequest.


        :return: The label of this CreateCollectionRequest.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateCollectionRequest.


        :param label: The label of this CreateCollectionRequest.
        :type label: str
        """
        if label is not None and len(label) > 128:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `128`")
        if label is not None and len(label) < 5:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `5`")

        self._label = label

    @property
    def length(self):
        """Gets the length of this CreateCollectionRequest.


        :return: The length of this CreateCollectionRequest.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CreateCollectionRequest.


        :param length: The length of this CreateCollectionRequest.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")
        if length is not None and length > 255:
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `255`")
        if length is not None and length < 6:
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `6`")

        self._length = length

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateCollectionRequest.


        :return: The organization_id of this CreateCollectionRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateCollectionRequest.


        :param organization_id: The organization_id of this CreateCollectionRequest.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def type(self):
        """Gets the type of this CreateCollectionRequest.


        :return: The type of this CreateCollectionRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCollectionRequest.


        :param type: The type of this CreateCollectionRequest.
        :type type: str
        """
        allowed_values = ["ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
