# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferSendInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, holder_organization_id: str=None, keep_ownership: bool=None, open_for_claims: bool=None, owner_organization_id: str=None, recipient_organization_ids: List[str]=None):
        """TransferSendInfo - a model defined in OpenAPI

        :param holder_organization_id: The holder_organization_id of this TransferSendInfo.
        :param keep_ownership: The keep_ownership of this TransferSendInfo.
        :param open_for_claims: The open_for_claims of this TransferSendInfo.
        :param owner_organization_id: The owner_organization_id of this TransferSendInfo.
        :param recipient_organization_ids: The recipient_organization_ids of this TransferSendInfo.
        """
        self.openapi_types = {
            'holder_organization_id': str,
            'keep_ownership': bool,
            'open_for_claims': bool,
            'owner_organization_id': str,
            'recipient_organization_ids': List[str]
        }

        self.attribute_map = {
            'holder_organization_id': 'holderOrganizationId',
            'keep_ownership': 'keepOwnership',
            'open_for_claims': 'openForClaims',
            'owner_organization_id': 'ownerOrganizationId',
            'recipient_organization_ids': 'recipientOrganizationIds'
        }

        self._holder_organization_id = holder_organization_id
        self._keep_ownership = keep_ownership
        self._open_for_claims = open_for_claims
        self._owner_organization_id = owner_organization_id
        self._recipient_organization_ids = recipient_organization_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferSendInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferSendInfo of this TransferSendInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def holder_organization_id(self):
        """Gets the holder_organization_id of this TransferSendInfo.

        The current holder of the object

        :return: The holder_organization_id of this TransferSendInfo.
        :rtype: str
        """
        return self._holder_organization_id

    @holder_organization_id.setter
    def holder_organization_id(self, holder_organization_id):
        """Sets the holder_organization_id of this TransferSendInfo.

        The current holder of the object

        :param holder_organization_id: The holder_organization_id of this TransferSendInfo.
        :type holder_organization_id: str
        """

        self._holder_organization_id = holder_organization_id

    @property
    def keep_ownership(self):
        """Gets the keep_ownership of this TransferSendInfo.

        Keep the public ownership while transferring the object

        :return: The keep_ownership of this TransferSendInfo.
        :rtype: bool
        """
        return self._keep_ownership

    @keep_ownership.setter
    def keep_ownership(self, keep_ownership):
        """Sets the keep_ownership of this TransferSendInfo.

        Keep the public ownership while transferring the object

        :param keep_ownership: The keep_ownership of this TransferSendInfo.
        :type keep_ownership: bool
        """
        if keep_ownership is None:
            raise ValueError("Invalid value for `keep_ownership`, must not be `None`")

        self._keep_ownership = keep_ownership

    @property
    def open_for_claims(self):
        """Gets the open_for_claims of this TransferSendInfo.

        Allow anyone who knows (or can scan) the ID4N to claim ownership of this object

        :return: The open_for_claims of this TransferSendInfo.
        :rtype: bool
        """
        return self._open_for_claims

    @open_for_claims.setter
    def open_for_claims(self, open_for_claims):
        """Sets the open_for_claims of this TransferSendInfo.

        Allow anyone who knows (or can scan) the ID4N to claim ownership of this object

        :param open_for_claims: The open_for_claims of this TransferSendInfo.
        :type open_for_claims: bool
        """
        if open_for_claims is None:
            raise ValueError("Invalid value for `open_for_claims`, must not be `None`")

        self._open_for_claims = open_for_claims

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this TransferSendInfo.

        The current publicly visible owner of the object

        :return: The owner_organization_id of this TransferSendInfo.
        :rtype: str
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this TransferSendInfo.

        The current publicly visible owner of the object

        :param owner_organization_id: The owner_organization_id of this TransferSendInfo.
        :type owner_organization_id: str
        """

        self._owner_organization_id = owner_organization_id

    @property
    def recipient_organization_ids(self):
        """Gets the recipient_organization_ids of this TransferSendInfo.

        Allow only these organizations to obtain this object

        :return: The recipient_organization_ids of this TransferSendInfo.
        :rtype: List[str]
        """
        return self._recipient_organization_ids

    @recipient_organization_ids.setter
    def recipient_organization_ids(self, recipient_organization_ids):
        """Sets the recipient_organization_ids of this TransferSendInfo.

        Allow only these organizations to obtain this object

        :param recipient_organization_ids: The recipient_organization_ids of this TransferSendInfo.
        :type recipient_organization_ids: List[str]
        """
        if recipient_organization_ids is None:
            raise ValueError("Invalid value for `recipient_organization_ids`, must not be `None`")

        self._recipient_organization_ids = recipient_organization_ids
