# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route import Route
from openapi_server.models.routing_options import RoutingOptions
from openapi_server import util


class RoutingFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: RoutingOptions=None, routes: List[Route]=None):
        """RoutingFile - a model defined in OpenAPI

        :param options: The options of this RoutingFile.
        :param routes: The routes of this RoutingFile.
        """
        self.openapi_types = {
            'options': RoutingOptions,
            'routes': List[Route]
        }

        self.attribute_map = {
            'options': 'options',
            'routes': 'routes'
        }

        self._options = options
        self._routes = routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingFile of this RoutingFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this RoutingFile.


        :return: The options of this RoutingFile.
        :rtype: RoutingOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RoutingFile.


        :param options: The options of this RoutingFile.
        :type options: RoutingOptions
        """

        self._options = options

    @property
    def routes(self):
        """Gets the routes of this RoutingFile.


        :return: The routes of this RoutingFile.
        :rtype: List[Route]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this RoutingFile.


        :param routes: The routes of this RoutingFile.
        :type routes: List[Route]
        """
        if routes is None:
            raise ValueError("Invalid value for `routes`, must not be `None`")

        self._routes = routes
