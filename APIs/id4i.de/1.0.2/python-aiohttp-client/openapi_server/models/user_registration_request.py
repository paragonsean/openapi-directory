# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserRegistrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, password: str=None, username: str=None):
        """UserRegistrationRequest - a model defined in OpenAPI

        :param email: The email of this UserRegistrationRequest.
        :param password: The password of this UserRegistrationRequest.
        :param username: The username of this UserRegistrationRequest.
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'username': 'username'
        }

        self._email = email
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRegistrationRequest of this UserRegistrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserRegistrationRequest.


        :return: The email of this UserRegistrationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRegistrationRequest.


        :param email: The email of this UserRegistrationRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserRegistrationRequest.


        :return: The password of this UserRegistrationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserRegistrationRequest.


        :param password: The password of this UserRegistrationRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 99:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `99`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this UserRegistrationRequest.


        :return: The username of this UserRegistrationRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserRegistrationRequest.


        :param username: The username of this UserRegistrationRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and not re.search(r'[a-zA-Z0-9_.-]{6,50}', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]{6,50}/`")

        self._username = username
