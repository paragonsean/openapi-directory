# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGuidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, length: int=None, organization_id: str=None):
        """CreateGuidRequest - a model defined in OpenAPI

        :param count: The count of this CreateGuidRequest.
        :param length: The length of this CreateGuidRequest.
        :param organization_id: The organization_id of this CreateGuidRequest.
        """
        self.openapi_types = {
            'count': int,
            'length': int,
            'organization_id': str
        }

        self.attribute_map = {
            'count': 'count',
            'length': 'length',
            'organization_id': 'organizationId'
        }

        self._count = count
        self._length = length
        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGuidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGuidRequest of this CreateGuidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this CreateGuidRequest.

        The total number of GUIDs to create

        :return: The count of this CreateGuidRequest.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CreateGuidRequest.

        The total number of GUIDs to create

        :param count: The count of this CreateGuidRequest.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        if count is not None and count > 1000:
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `1000`")
        if count is not None and count < 1:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `1`")

        self._count = count

    @property
    def length(self):
        """Gets the length of this CreateGuidRequest.

        The charactersequence length of the GUID

        :return: The length of this CreateGuidRequest.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CreateGuidRequest.

        The charactersequence length of the GUID

        :param length: The length of this CreateGuidRequest.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")
        if length is not None and length > 255:
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `255`")
        if length is not None and length < 7:
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `7`")

        self._length = length

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateGuidRequest.

        The namespace of the organization where the generated GUIDs should be assigned.

        :return: The organization_id of this CreateGuidRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateGuidRequest.

        The namespace of the organization where the generated GUIDs should be assigned.

        :param organization_id: The organization_id of this CreateGuidRequest.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id
