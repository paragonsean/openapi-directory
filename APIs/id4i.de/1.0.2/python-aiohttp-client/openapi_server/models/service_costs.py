# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceCosts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listing: Dict[str, float]=None):
        """ServiceCosts - a model defined in OpenAPI

        :param listing: The listing of this ServiceCosts.
        """
        self.openapi_types = {
            'listing': Dict[str, float]
        }

        self.attribute_map = {
            'listing': 'listing'
        }

        self._listing = listing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceCosts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceCosts of this ServiceCosts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listing(self):
        """Gets the listing of this ServiceCosts.


        :return: The listing of this ServiceCosts.
        :rtype: Dict[str, float]
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """Sets the listing of this ServiceCosts.


        :param listing: The listing of this ServiceCosts.
        :type listing: Dict[str, float]
        """
        if listing is None:
            raise ValueError("Invalid value for `listing`, must not be `None`")

        self._listing = listing
