# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GuidCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_timestamp: int=None, holder_organization_id: str=None, id4n: str=None, label: str=None, owner_organization_id: str=None, physical_state: str=None, type: str=None):
        """GuidCollection - a model defined in OpenAPI

        :param created_timestamp: The created_timestamp of this GuidCollection.
        :param holder_organization_id: The holder_organization_id of this GuidCollection.
        :param id4n: The id4n of this GuidCollection.
        :param label: The label of this GuidCollection.
        :param owner_organization_id: The owner_organization_id of this GuidCollection.
        :param physical_state: The physical_state of this GuidCollection.
        :param type: The type of this GuidCollection.
        """
        self.openapi_types = {
            'created_timestamp': int,
            'holder_organization_id': str,
            'id4n': str,
            'label': str,
            'owner_organization_id': str,
            'physical_state': str,
            'type': str
        }

        self.attribute_map = {
            'created_timestamp': 'createdTimestamp',
            'holder_organization_id': 'holderOrganizationId',
            'id4n': 'id4n',
            'label': 'label',
            'owner_organization_id': 'ownerOrganizationId',
            'physical_state': 'physicalState',
            'type': 'type'
        }

        self._created_timestamp = created_timestamp
        self._holder_organization_id = holder_organization_id
        self._id4n = id4n
        self._label = label
        self._owner_organization_id = owner_organization_id
        self._physical_state = physical_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuidCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuidCollection of this GuidCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this GuidCollection.

        The UTC unix timestamp of when this collection has been created

        :return: The created_timestamp of this GuidCollection.
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this GuidCollection.

        The UTC unix timestamp of when this collection has been created

        :param created_timestamp: The created_timestamp of this GuidCollection.
        :type created_timestamp: int
        """

        self._created_timestamp = created_timestamp

    @property
    def holder_organization_id(self):
        """Gets the holder_organization_id of this GuidCollection.

        Organization namespace of the holder of the collection

        :return: The holder_organization_id of this GuidCollection.
        :rtype: str
        """
        return self._holder_organization_id

    @holder_organization_id.setter
    def holder_organization_id(self, holder_organization_id):
        """Sets the holder_organization_id of this GuidCollection.

        Organization namespace of the holder of the collection

        :param holder_organization_id: The holder_organization_id of this GuidCollection.
        :type holder_organization_id: str
        """

        self._holder_organization_id = holder_organization_id

    @property
    def id4n(self):
        """Gets the id4n of this GuidCollection.

        The ID

        :return: The id4n of this GuidCollection.
        :rtype: str
        """
        return self._id4n

    @id4n.setter
    def id4n(self, id4n):
        """Sets the id4n of this GuidCollection.

        The ID

        :param id4n: The id4n of this GuidCollection.
        :type id4n: str
        """

        self._id4n = id4n

    @property
    def label(self):
        """Gets the label of this GuidCollection.


        :return: The label of this GuidCollection.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GuidCollection.


        :param label: The label of this GuidCollection.
        :type label: str
        """
        if label is not None and len(label) > 128:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `128`")
        if label is not None and len(label) < 5:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `5`")

        self._label = label

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this GuidCollection.

        Organization namespace of the collection owner

        :return: The owner_organization_id of this GuidCollection.
        :rtype: str
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this GuidCollection.

        Organization namespace of the collection owner

        :param owner_organization_id: The owner_organization_id of this GuidCollection.
        :type owner_organization_id: str
        """

        self._owner_organization_id = owner_organization_id

    @property
    def physical_state(self):
        """Gets the physical_state of this GuidCollection.

        Physical attachment state of the collection

        :return: The physical_state of this GuidCollection.
        :rtype: str
        """
        return self._physical_state

    @physical_state.setter
    def physical_state(self, physical_state):
        """Sets the physical_state of this GuidCollection.

        Physical attachment state of the collection

        :param physical_state: The physical_state of this GuidCollection.
        :type physical_state: str
        """
        allowed_values = ["UNATTACHED", "ATTACHED", "DETACHED"]  # noqa: E501
        if physical_state not in allowed_values:
            raise ValueError(
                "Invalid value for `physical_state` ({0}), must be one of {1}"
                .format(physical_state, allowed_values)
            )

        self._physical_state = physical_state

    @property
    def type(self):
        """Gets the type of this GuidCollection.


        :return: The type of this GuidCollection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GuidCollection.


        :param type: The type of this GuidCollection.
        :type type: str
        """
        allowed_values = ["ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
