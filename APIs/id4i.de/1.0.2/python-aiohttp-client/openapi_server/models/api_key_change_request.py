# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyChangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, new_label: str=None):
        """ApiKeyChangeRequest - a model defined in OpenAPI

        :param active: The active of this ApiKeyChangeRequest.
        :param new_label: The new_label of this ApiKeyChangeRequest.
        """
        self.openapi_types = {
            'active': bool,
            'new_label': str
        }

        self.attribute_map = {
            'active': 'active',
            'new_label': 'newLabel'
        }

        self._active = active
        self._new_label = new_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyChangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyChangeRequest of this ApiKeyChangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ApiKeyChangeRequest.


        :return: The active of this ApiKeyChangeRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApiKeyChangeRequest.


        :param active: The active of this ApiKeyChangeRequest.
        :type active: bool
        """

        self._active = active

    @property
    def new_label(self):
        """Gets the new_label of this ApiKeyChangeRequest.


        :return: The new_label of this ApiKeyChangeRequest.
        :rtype: str
        """
        return self._new_label

    @new_label.setter
    def new_label(self, new_label):
        """Sets the new_label of this ApiKeyChangeRequest.


        :param new_label: The new_label of this ApiKeyChangeRequest.
        :type new_label: str
        """
        if new_label is None:
            raise ValueError("Invalid value for `new_label`, must not be `None`")
        if new_label is not None and len(new_label) > 50:
            raise ValueError("Invalid value for `new_label`, length must be less than or equal to `50`")
        if new_label is not None and len(new_label) < 5:
            raise ValueError("Invalid value for `new_label`, length must be greater than or equal to `5`")

        self._new_label = new_label
