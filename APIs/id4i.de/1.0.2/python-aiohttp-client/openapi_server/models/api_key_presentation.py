# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyPresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, created_at: int=None, created_by: str=None, key: str=None, label: str=None, organization_id: str=None):
        """ApiKeyPresentation - a model defined in OpenAPI

        :param active: The active of this ApiKeyPresentation.
        :param created_at: The created_at of this ApiKeyPresentation.
        :param created_by: The created_by of this ApiKeyPresentation.
        :param key: The key of this ApiKeyPresentation.
        :param label: The label of this ApiKeyPresentation.
        :param organization_id: The organization_id of this ApiKeyPresentation.
        """
        self.openapi_types = {
            'active': bool,
            'created_at': int,
            'created_by': str,
            'key': str,
            'label': str,
            'organization_id': str
        }

        self.attribute_map = {
            'active': 'active',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'key': 'key',
            'label': 'label',
            'organization_id': 'organizationId'
        }

        self._active = active
        self._created_at = created_at
        self._created_by = created_by
        self._key = key
        self._label = label
        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyPresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyPresentation of this ApiKeyPresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ApiKeyPresentation.

        Whether this API key is active

        :return: The active of this ApiKeyPresentation.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApiKeyPresentation.

        Whether this API key is active

        :param active: The active of this ApiKeyPresentation.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this ApiKeyPresentation.

        The UTC unix timestamp of when this api key has been created

        :return: The created_at of this ApiKeyPresentation.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiKeyPresentation.

        The UTC unix timestamp of when this api key has been created

        :param created_at: The created_at of this ApiKeyPresentation.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ApiKeyPresentation.


        :return: The created_by of this ApiKeyPresentation.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ApiKeyPresentation.


        :param created_by: The created_by of this ApiKeyPresentation.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def key(self):
        """Gets the key of this ApiKeyPresentation.

        The api key identifier

        :return: The key of this ApiKeyPresentation.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiKeyPresentation.

        The api key identifier

        :param key: The key of this ApiKeyPresentation.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def label(self):
        """Gets the label of this ApiKeyPresentation.

        The label / name of the api key

        :return: The label of this ApiKeyPresentation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ApiKeyPresentation.

        The label / name of the api key

        :param label: The label of this ApiKeyPresentation.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiKeyPresentation.

        The organization namespace this api key belongs to

        :return: The organization_id of this ApiKeyPresentation.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiKeyPresentation.

        The organization namespace this api key belongs to

        :param organization_id: The organization_id of this ApiKeyPresentation.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id
