# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message: str=None, message_properties: Dict[str, object]=None, timestamp: int=None):
        """ChangeLogEntry - a model defined in OpenAPI

        :param id: The id of this ChangeLogEntry.
        :param message: The message of this ChangeLogEntry.
        :param message_properties: The message_properties of this ChangeLogEntry.
        :param timestamp: The timestamp of this ChangeLogEntry.
        """
        self.openapi_types = {
            'id': str,
            'message': str,
            'message_properties': Dict[str, object],
            'timestamp': int
        }

        self.attribute_map = {
            'id': 'id',
            'message': 'message',
            'message_properties': 'messageProperties',
            'timestamp': 'timestamp'
        }

        self._id = id
        self._message = message
        self._message_properties = message_properties
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeLogEntry of this ChangeLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ChangeLogEntry.

        The unique id of the changelog entry

        :return: The id of this ChangeLogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeLogEntry.

        The unique id of the changelog entry

        :param id: The id of this ChangeLogEntry.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ChangeLogEntry.

        The message as template or rendered as plain text

        :return: The message of this ChangeLogEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChangeLogEntry.

        The message as template or rendered as plain text

        :param message: The message of this ChangeLogEntry.
        :type message: str
        """

        self._message = message

    @property
    def message_properties(self):
        """Gets the message_properties of this ChangeLogEntry.

        The values of the properties in the message. May be nested as object with a value field 

        :return: The message_properties of this ChangeLogEntry.
        :rtype: Dict[str, object]
        """
        return self._message_properties

    @message_properties.setter
    def message_properties(self, message_properties):
        """Sets the message_properties of this ChangeLogEntry.

        The values of the properties in the message. May be nested as object with a value field 

        :param message_properties: The message_properties of this ChangeLogEntry.
        :type message_properties: Dict[str, object]
        """

        self._message_properties = message_properties

    @property
    def timestamp(self):
        """Gets the timestamp of this ChangeLogEntry.

        The UTC unix timestamp when this change occurred

        :return: The timestamp of this ChangeLogEntry.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ChangeLogEntry.

        The UTC unix timestamp when this change occurred

        :param timestamp: The timestamp of this ChangeLogEntry.
        :type timestamp: int
        """

        self._timestamp = timestamp
