# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Id4nPresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_timestamp: int=None, holder_organization_id: str=None, id4n: str=None, label: str=None, owner_organization_id: str=None, properties: Dict[str, str]=None, type: str=None):
        """Id4nPresentation - a model defined in OpenAPI

        :param created_timestamp: The created_timestamp of this Id4nPresentation.
        :param holder_organization_id: The holder_organization_id of this Id4nPresentation.
        :param id4n: The id4n of this Id4nPresentation.
        :param label: The label of this Id4nPresentation.
        :param owner_organization_id: The owner_organization_id of this Id4nPresentation.
        :param properties: The properties of this Id4nPresentation.
        :param type: The type of this Id4nPresentation.
        """
        self.openapi_types = {
            'created_timestamp': int,
            'holder_organization_id': str,
            'id4n': str,
            'label': str,
            'owner_organization_id': str,
            'properties': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'created_timestamp': 'createdTimestamp',
            'holder_organization_id': 'holderOrganizationId',
            'id4n': 'id4n',
            'label': 'label',
            'owner_organization_id': 'ownerOrganizationId',
            'properties': 'properties',
            'type': 'type'
        }

        self._created_timestamp = created_timestamp
        self._holder_organization_id = holder_organization_id
        self._id4n = id4n
        self._label = label
        self._owner_organization_id = owner_organization_id
        self._properties = properties
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Id4nPresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Id4nPresentation of this Id4nPresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Id4nPresentation.

        The UTC unix timestamp of when this ID has been created

        :return: The created_timestamp of this Id4nPresentation.
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Id4nPresentation.

        The UTC unix timestamp of when this ID has been created

        :param created_timestamp: The created_timestamp of this Id4nPresentation.
        :type created_timestamp: int
        """

        self._created_timestamp = created_timestamp

    @property
    def holder_organization_id(self):
        """Gets the holder_organization_id of this Id4nPresentation.

        Organization namespace of the holder of the ID

        :return: The holder_organization_id of this Id4nPresentation.
        :rtype: str
        """
        return self._holder_organization_id

    @holder_organization_id.setter
    def holder_organization_id(self, holder_organization_id):
        """Sets the holder_organization_id of this Id4nPresentation.

        Organization namespace of the holder of the ID

        :param holder_organization_id: The holder_organization_id of this Id4nPresentation.
        :type holder_organization_id: str
        """

        self._holder_organization_id = holder_organization_id

    @property
    def id4n(self):
        """Gets the id4n of this Id4nPresentation.

        The ID

        :return: The id4n of this Id4nPresentation.
        :rtype: str
        """
        return self._id4n

    @id4n.setter
    def id4n(self, id4n):
        """Sets the id4n of this Id4nPresentation.

        The ID

        :param id4n: The id4n of this Id4nPresentation.
        :type id4n: str
        """

        self._id4n = id4n

    @property
    def label(self):
        """Gets the label of this Id4nPresentation.


        :return: The label of this Id4nPresentation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Id4nPresentation.


        :param label: The label of this Id4nPresentation.
        :type label: str
        """

        self._label = label

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this Id4nPresentation.

        Organization namespace of the ID owner

        :return: The owner_organization_id of this Id4nPresentation.
        :rtype: str
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this Id4nPresentation.

        Organization namespace of the ID owner

        :param owner_organization_id: The owner_organization_id of this Id4nPresentation.
        :type owner_organization_id: str
        """

        self._owner_organization_id = owner_organization_id

    @property
    def properties(self):
        """Gets the properties of this Id4nPresentation.

        The properties of the organization

        :return: The properties of this Id4nPresentation.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Id4nPresentation.

        The properties of the organization

        :param properties: The properties of this Id4nPresentation.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def type(self):
        """Gets the type of this Id4nPresentation.

        The type of ID

        :return: The type of this Id4nPresentation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Id4nPresentation.

        The type of ID

        :param type: The type of this Id4nPresentation.
        :type type: str
        """
        allowed_values = ["GUID", "ROUTING_COLLECTION", "LOGISTIC_COLLECTION", "LABELLED_COLLECTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
