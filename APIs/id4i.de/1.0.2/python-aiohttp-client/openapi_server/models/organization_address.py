# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, company_name: str=None, country_code: str=None, country_name: str=None, firstname: str=None, lastname: str=None, post_code: str=None, street: str=None, telephone: str=None):
        """OrganizationAddress - a model defined in OpenAPI

        :param city: The city of this OrganizationAddress.
        :param company_name: The company_name of this OrganizationAddress.
        :param country_code: The country_code of this OrganizationAddress.
        :param country_name: The country_name of this OrganizationAddress.
        :param firstname: The firstname of this OrganizationAddress.
        :param lastname: The lastname of this OrganizationAddress.
        :param post_code: The post_code of this OrganizationAddress.
        :param street: The street of this OrganizationAddress.
        :param telephone: The telephone of this OrganizationAddress.
        """
        self.openapi_types = {
            'city': str,
            'company_name': str,
            'country_code': str,
            'country_name': str,
            'firstname': str,
            'lastname': str,
            'post_code': str,
            'street': str,
            'telephone': str
        }

        self.attribute_map = {
            'city': 'city',
            'company_name': 'companyName',
            'country_code': 'countryCode',
            'country_name': 'countryName',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'post_code': 'postCode',
            'street': 'street',
            'telephone': 'telephone'
        }

        self._city = city
        self._company_name = company_name
        self._country_code = country_code
        self._country_name = country_name
        self._firstname = firstname
        self._lastname = lastname
        self._post_code = post_code
        self._street = street
        self._telephone = telephone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationAddress of this OrganizationAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this OrganizationAddress.


        :return: The city of this OrganizationAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrganizationAddress.


        :param city: The city of this OrganizationAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) > 99:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `99`")
        if city is not None and len(city) < 2:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `2`")

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this OrganizationAddress.


        :return: The company_name of this OrganizationAddress.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this OrganizationAddress.


        :param company_name: The company_name of this OrganizationAddress.
        :type company_name: str
        """
        if company_name is not None and len(company_name) > 254:
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `254`")
        if company_name is not None and len(company_name) < 0:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `0`")

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this OrganizationAddress.

        The ISO 3166 two-letter country code

        :return: The country_code of this OrganizationAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OrganizationAddress.

        The ISO 3166 two-letter country code

        :param country_code: The country_code of this OrganizationAddress.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 0:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `0`")

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this OrganizationAddress.

        The country name

        :return: The country_name of this OrganizationAddress.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this OrganizationAddress.

        The country name

        :param country_name: The country_name of this OrganizationAddress.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def firstname(self):
        """Gets the firstname of this OrganizationAddress.


        :return: The firstname of this OrganizationAddress.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this OrganizationAddress.


        :param firstname: The firstname of this OrganizationAddress.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")
        if firstname is not None and len(firstname) > 255:
            raise ValueError("Invalid value for `firstname`, length must be less than or equal to `255`")
        if firstname is not None and len(firstname) < 0:
            raise ValueError("Invalid value for `firstname`, length must be greater than or equal to `0`")

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this OrganizationAddress.


        :return: The lastname of this OrganizationAddress.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this OrganizationAddress.


        :param lastname: The lastname of this OrganizationAddress.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")
        if lastname is not None and len(lastname) > 255:
            raise ValueError("Invalid value for `lastname`, length must be less than or equal to `255`")
        if lastname is not None and len(lastname) < 0:
            raise ValueError("Invalid value for `lastname`, length must be greater than or equal to `0`")

        self._lastname = lastname

    @property
    def post_code(self):
        """Gets the post_code of this OrganizationAddress.


        :return: The post_code of this OrganizationAddress.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this OrganizationAddress.


        :param post_code: The post_code of this OrganizationAddress.
        :type post_code: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")
        if post_code is not None and len(post_code) > 40:
            raise ValueError("Invalid value for `post_code`, length must be less than or equal to `40`")
        if post_code is not None and len(post_code) < 2:
            raise ValueError("Invalid value for `post_code`, length must be greater than or equal to `2`")

        self._post_code = post_code

    @property
    def street(self):
        """Gets the street of this OrganizationAddress.


        :return: The street of this OrganizationAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this OrganizationAddress.


        :param street: The street of this OrganizationAddress.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")
        if street is not None and len(street) > 254:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `254`")
        if street is not None and len(street) < 3:
            raise ValueError("Invalid value for `street`, length must be greater than or equal to `3`")

        self._street = street

    @property
    def telephone(self):
        """Gets the telephone of this OrganizationAddress.

        The telephone number e.g.

        :return: The telephone of this OrganizationAddress.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this OrganizationAddress.

        The telephone number e.g.

        :param telephone: The telephone of this OrganizationAddress.
        :type telephone: str
        """
        if telephone is not None and len(telephone) > 99:
            raise ValueError("Invalid value for `telephone`, length must be less than or equal to `99`")
        if telephone is not None and len(telephone) < 0:
            raise ValueError("Invalid value for `telephone`, length must be greater than or equal to `0`")

        self._telephone = telephone
