# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, count: float=None, description: str=None, service: str=None, single_price: float=None, sum: float=None, unit: str=None):
        """BillingPosition - a model defined in OpenAPI

        :param amount: The amount of this BillingPosition.
        :param count: The count of this BillingPosition.
        :param description: The description of this BillingPosition.
        :param service: The service of this BillingPosition.
        :param single_price: The single_price of this BillingPosition.
        :param sum: The sum of this BillingPosition.
        :param unit: The unit of this BillingPosition.
        """
        self.openapi_types = {
            'amount': int,
            'count': float,
            'description': str,
            'service': str,
            'single_price': float,
            'sum': float,
            'unit': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'count': 'count',
            'description': 'description',
            'service': 'service',
            'single_price': 'singlePrice',
            'sum': 'sum',
            'unit': 'unit'
        }

        self._amount = amount
        self._count = count
        self._description = description
        self._service = service
        self._single_price = single_price
        self._sum = sum
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingPosition of this BillingPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BillingPosition.


        :return: The amount of this BillingPosition.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BillingPosition.


        :param amount: The amount of this BillingPosition.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def count(self):
        """Gets the count of this BillingPosition.


        :return: The count of this BillingPosition.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BillingPosition.


        :param count: The count of this BillingPosition.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def description(self):
        """Gets the description of this BillingPosition.


        :return: The description of this BillingPosition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BillingPosition.


        :param description: The description of this BillingPosition.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def service(self):
        """Gets the service of this BillingPosition.


        :return: The service of this BillingPosition.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BillingPosition.


        :param service: The service of this BillingPosition.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def single_price(self):
        """Gets the single_price of this BillingPosition.


        :return: The single_price of this BillingPosition.
        :rtype: float
        """
        return self._single_price

    @single_price.setter
    def single_price(self, single_price):
        """Sets the single_price of this BillingPosition.


        :param single_price: The single_price of this BillingPosition.
        :type single_price: float
        """
        if single_price is None:
            raise ValueError("Invalid value for `single_price`, must not be `None`")

        self._single_price = single_price

    @property
    def sum(self):
        """Gets the sum of this BillingPosition.


        :return: The sum of this BillingPosition.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this BillingPosition.


        :param sum: The sum of this BillingPosition.
        :type sum: float
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum

    @property
    def unit(self):
        """Gets the unit of this BillingPosition.


        :return: The unit of this BillingPosition.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this BillingPosition.


        :param unit: The unit of this BillingPosition.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
