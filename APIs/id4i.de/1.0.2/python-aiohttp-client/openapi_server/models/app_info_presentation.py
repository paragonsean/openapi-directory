# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppInfoPresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, commit_time: str=None, name: str=None, production_mode: bool=None, revision: str=None, version: str=None):
        """AppInfoPresentation - a model defined in OpenAPI

        :param branch: The branch of this AppInfoPresentation.
        :param commit_time: The commit_time of this AppInfoPresentation.
        :param name: The name of this AppInfoPresentation.
        :param production_mode: The production_mode of this AppInfoPresentation.
        :param revision: The revision of this AppInfoPresentation.
        :param version: The version of this AppInfoPresentation.
        """
        self.openapi_types = {
            'branch': str,
            'commit_time': str,
            'name': str,
            'production_mode': bool,
            'revision': str,
            'version': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'commit_time': 'commitTime',
            'name': 'name',
            'production_mode': 'productionMode',
            'revision': 'revision',
            'version': 'version'
        }

        self._branch = branch
        self._commit_time = commit_time
        self._name = name
        self._production_mode = production_mode
        self._revision = revision
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppInfoPresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppInfoPresentation of this AppInfoPresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this AppInfoPresentation.


        :return: The branch of this AppInfoPresentation.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this AppInfoPresentation.


        :param branch: The branch of this AppInfoPresentation.
        :type branch: str
        """

        self._branch = branch

    @property
    def commit_time(self):
        """Gets the commit_time of this AppInfoPresentation.


        :return: The commit_time of this AppInfoPresentation.
        :rtype: str
        """
        return self._commit_time

    @commit_time.setter
    def commit_time(self, commit_time):
        """Sets the commit_time of this AppInfoPresentation.


        :param commit_time: The commit_time of this AppInfoPresentation.
        :type commit_time: str
        """

        self._commit_time = commit_time

    @property
    def name(self):
        """Gets the name of this AppInfoPresentation.


        :return: The name of this AppInfoPresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppInfoPresentation.


        :param name: The name of this AppInfoPresentation.
        :type name: str
        """

        self._name = name

    @property
    def production_mode(self):
        """Gets the production_mode of this AppInfoPresentation.


        :return: The production_mode of this AppInfoPresentation.
        :rtype: bool
        """
        return self._production_mode

    @production_mode.setter
    def production_mode(self, production_mode):
        """Sets the production_mode of this AppInfoPresentation.


        :param production_mode: The production_mode of this AppInfoPresentation.
        :type production_mode: bool
        """

        self._production_mode = production_mode

    @property
    def revision(self):
        """Gets the revision of this AppInfoPresentation.


        :return: The revision of this AppInfoPresentation.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this AppInfoPresentation.


        :param revision: The revision of this AppInfoPresentation.
        :type revision: str
        """

        self._revision = revision

    @property
    def version(self):
        """Gets the version of this AppInfoPresentation.


        :return: The version of this AppInfoPresentation.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AppInfoPresentation.


        :param version: The version of this AppInfoPresentation.
        :type version: str
        """

        self._version = version
