# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Route(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, params: Dict[str, str]=None, priority: int=None, public: bool=None, type: str=None, valid_until: int=None):
        """Route - a model defined in OpenAPI

        :param params: The params of this Route.
        :param priority: The priority of this Route.
        :param public: The public of this Route.
        :param type: The type of this Route.
        :param valid_until: The valid_until of this Route.
        """
        self.openapi_types = {
            'params': Dict[str, str],
            'priority': int,
            'public': bool,
            'type': str,
            'valid_until': int
        }

        self.attribute_map = {
            'params': 'params',
            'priority': 'priority',
            'public': 'public',
            'type': 'type',
            'valid_until': 'validUntil'
        }

        self._params = params
        self._priority = priority
        self._public = public
        self._type = type
        self._valid_until = valid_until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Route':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Route of this Route.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def params(self):
        """Gets the params of this Route.


        :return: The params of this Route.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Route.


        :param params: The params of this Route.
        :type params: Dict[str, str]
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params

    @property
    def priority(self):
        """Gets the priority of this Route.


        :return: The priority of this Route.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Route.


        :param priority: The priority of this Route.
        :type priority: int
        """

        self._priority = priority

    @property
    def public(self):
        """Gets the public of this Route.


        :return: The public of this Route.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Route.


        :param public: The public of this Route.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")

        self._public = public

    @property
    def type(self):
        """Gets the type of this Route.


        :return: The type of this Route.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Route.


        :param type: The type of this Route.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def valid_until(self):
        """Gets the valid_until of this Route.


        :return: The valid_until of this Route.
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Route.


        :param valid_until: The valid_until of this Route.
        :type valid_until: int
        """

        self._valid_until = valid_until
