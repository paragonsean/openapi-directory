# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyPrivilegeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_billable_operations: bool=None, help_text: str=None, id4n_associated: bool=None, name: str=None):
        """ApiKeyPrivilegeInfo - a model defined in OpenAPI

        :param allows_billable_operations: The allows_billable_operations of this ApiKeyPrivilegeInfo.
        :param help_text: The help_text of this ApiKeyPrivilegeInfo.
        :param id4n_associated: The id4n_associated of this ApiKeyPrivilegeInfo.
        :param name: The name of this ApiKeyPrivilegeInfo.
        """
        self.openapi_types = {
            'allows_billable_operations': bool,
            'help_text': str,
            'id4n_associated': bool,
            'name': str
        }

        self.attribute_map = {
            'allows_billable_operations': 'allowsBillableOperations',
            'help_text': 'helpText',
            'id4n_associated': 'id4nAssociated',
            'name': 'name'
        }

        self._allows_billable_operations = allows_billable_operations
        self._help_text = help_text
        self._id4n_associated = id4n_associated
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyPrivilegeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyPrivilegeInfo of this ApiKeyPrivilegeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_billable_operations(self):
        """Gets the allows_billable_operations of this ApiKeyPrivilegeInfo.


        :return: The allows_billable_operations of this ApiKeyPrivilegeInfo.
        :rtype: bool
        """
        return self._allows_billable_operations

    @allows_billable_operations.setter
    def allows_billable_operations(self, allows_billable_operations):
        """Sets the allows_billable_operations of this ApiKeyPrivilegeInfo.


        :param allows_billable_operations: The allows_billable_operations of this ApiKeyPrivilegeInfo.
        :type allows_billable_operations: bool
        """

        self._allows_billable_operations = allows_billable_operations

    @property
    def help_text(self):
        """Gets the help_text of this ApiKeyPrivilegeInfo.


        :return: The help_text of this ApiKeyPrivilegeInfo.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this ApiKeyPrivilegeInfo.


        :param help_text: The help_text of this ApiKeyPrivilegeInfo.
        :type help_text: str
        """

        self._help_text = help_text

    @property
    def id4n_associated(self):
        """Gets the id4n_associated of this ApiKeyPrivilegeInfo.


        :return: The id4n_associated of this ApiKeyPrivilegeInfo.
        :rtype: bool
        """
        return self._id4n_associated

    @id4n_associated.setter
    def id4n_associated(self, id4n_associated):
        """Sets the id4n_associated of this ApiKeyPrivilegeInfo.


        :param id4n_associated: The id4n_associated of this ApiKeyPrivilegeInfo.
        :type id4n_associated: bool
        """
        if id4n_associated is None:
            raise ValueError("Invalid value for `id4n_associated`, must not be `None`")

        self._id4n_associated = id4n_associated

    @property
    def name(self):
        """Gets the name of this ApiKeyPrivilegeInfo.


        :return: The name of this ApiKeyPrivilegeInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyPrivilegeInfo.


        :param name: The name of this ApiKeyPrivilegeInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
