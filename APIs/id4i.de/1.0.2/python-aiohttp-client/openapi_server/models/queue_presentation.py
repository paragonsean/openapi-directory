# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueuePresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, id: str=None, waiting_messages: int=None):
        """QueuePresentation - a model defined in OpenAPI

        :param active: The active of this QueuePresentation.
        :param id: The id of this QueuePresentation.
        :param waiting_messages: The waiting_messages of this QueuePresentation.
        """
        self.openapi_types = {
            'active': bool,
            'id': str,
            'waiting_messages': int
        }

        self.attribute_map = {
            'active': 'active',
            'id': 'id',
            'waiting_messages': 'waitingMessages'
        }

        self._active = active
        self._id = id
        self._waiting_messages = waiting_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueuePresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueuePresentation of this QueuePresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this QueuePresentation.


        :return: The active of this QueuePresentation.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this QueuePresentation.


        :param active: The active of this QueuePresentation.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def id(self):
        """Gets the id of this QueuePresentation.


        :return: The id of this QueuePresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueuePresentation.


        :param id: The id of this QueuePresentation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def waiting_messages(self):
        """Gets the waiting_messages of this QueuePresentation.

        The count of queued messages

        :return: The waiting_messages of this QueuePresentation.
        :rtype: int
        """
        return self._waiting_messages

    @waiting_messages.setter
    def waiting_messages(self, waiting_messages):
        """Sets the waiting_messages of this QueuePresentation.

        The count of queued messages

        :param waiting_messages: The waiting_messages of this QueuePresentation.
        :type waiting_messages: int
        """

        self._waiting_messages = waiting_messages
