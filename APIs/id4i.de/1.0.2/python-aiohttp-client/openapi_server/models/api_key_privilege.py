# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyPrivilege(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id4n_associated: bool=None, privilege: str=None):
        """ApiKeyPrivilege - a model defined in OpenAPI

        :param id4n_associated: The id4n_associated of this ApiKeyPrivilege.
        :param privilege: The privilege of this ApiKeyPrivilege.
        """
        self.openapi_types = {
            'id4n_associated': bool,
            'privilege': str
        }

        self.attribute_map = {
            'id4n_associated': 'id4nAssociated',
            'privilege': 'privilege'
        }

        self._id4n_associated = id4n_associated
        self._privilege = privilege

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyPrivilege':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyPrivilege of this ApiKeyPrivilege.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id4n_associated(self):
        """Gets the id4n_associated of this ApiKeyPrivilege.


        :return: The id4n_associated of this ApiKeyPrivilege.
        :rtype: bool
        """
        return self._id4n_associated

    @id4n_associated.setter
    def id4n_associated(self, id4n_associated):
        """Sets the id4n_associated of this ApiKeyPrivilege.


        :param id4n_associated: The id4n_associated of this ApiKeyPrivilege.
        :type id4n_associated: bool
        """
        if id4n_associated is None:
            raise ValueError("Invalid value for `id4n_associated`, must not be `None`")

        self._id4n_associated = id4n_associated

    @property
    def privilege(self):
        """Gets the privilege of this ApiKeyPrivilege.


        :return: The privilege of this ApiKeyPrivilege.
        :rtype: str
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege):
        """Sets the privilege of this ApiKeyPrivilege.


        :param privilege: The privilege of this ApiKeyPrivilege.
        :type privilege: str
        """
        if privilege is None:
            raise ValueError("Invalid value for `privilege`, must not be `None`")

        self._privilege = privilege
