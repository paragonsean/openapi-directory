# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserRegistrationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: int=None, message: str=None, username: str=None):
        """UserRegistrationResponse - a model defined in OpenAPI

        :param email: The email of this UserRegistrationResponse.
        :param id: The id of this UserRegistrationResponse.
        :param message: The message of this UserRegistrationResponse.
        :param username: The username of this UserRegistrationResponse.
        """
        self.openapi_types = {
            'email': str,
            'id': int,
            'message': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'message': 'message',
            'username': 'username'
        }

        self._email = email
        self._id = id
        self._message = message
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRegistrationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRegistrationResponse of this UserRegistrationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserRegistrationResponse.


        :return: The email of this UserRegistrationResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRegistrationResponse.


        :param email: The email of this UserRegistrationResponse.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserRegistrationResponse.


        :return: The id of this UserRegistrationResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRegistrationResponse.


        :param id: The id of this UserRegistrationResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this UserRegistrationResponse.


        :return: The message of this UserRegistrationResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UserRegistrationResponse.


        :param message: The message of this UserRegistrationResponse.
        :type message: str
        """

        self._message = message

    @property
    def username(self):
        """Gets the username of this UserRegistrationResponse.


        :return: The username of this UserRegistrationResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserRegistrationResponse.


        :param username: The username of this UserRegistrationResponse.
        :type username: str
        """

        self._username = username
