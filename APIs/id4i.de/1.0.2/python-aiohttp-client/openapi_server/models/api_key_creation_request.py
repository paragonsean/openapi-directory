# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyCreationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, organization_id: str=None, secret: str=None):
        """ApiKeyCreationRequest - a model defined in OpenAPI

        :param label: The label of this ApiKeyCreationRequest.
        :param organization_id: The organization_id of this ApiKeyCreationRequest.
        :param secret: The secret of this ApiKeyCreationRequest.
        """
        self.openapi_types = {
            'label': str,
            'organization_id': str,
            'secret': str
        }

        self.attribute_map = {
            'label': 'label',
            'organization_id': 'organizationId',
            'secret': 'secret'
        }

        self._label = label
        self._organization_id = organization_id
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyCreationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyCreationRequest of this ApiKeyCreationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this ApiKeyCreationRequest.


        :return: The label of this ApiKeyCreationRequest.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ApiKeyCreationRequest.


        :param label: The label of this ApiKeyCreationRequest.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")
        if label is not None and len(label) > 50:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `50`")
        if label is not None and len(label) < 5:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `5`")

        self._label = label

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiKeyCreationRequest.


        :return: The organization_id of this ApiKeyCreationRequest.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiKeyCreationRequest.


        :param organization_id: The organization_id of this ApiKeyCreationRequest.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def secret(self):
        """Gets the secret of this ApiKeyCreationRequest.


        :return: The secret of this ApiKeyCreationRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ApiKeyCreationRequest.


        :param secret: The secret of this ApiKeyCreationRequest.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")
        if secret is not None and len(secret) > 500:
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `500`")
        if secret is not None and len(secret) < 10:
            raise ValueError("Invalid value for `secret`, length must be greater than or equal to `10`")

        self._secret = secret
