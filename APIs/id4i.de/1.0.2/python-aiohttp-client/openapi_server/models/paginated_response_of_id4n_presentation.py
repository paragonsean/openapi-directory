# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.id4n_presentation import Id4nPresentation
from openapi_server import util


class PaginatedResponseOfId4nPresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elements: List[Id4nPresentation]=None, limit: int=None, offset: int=None, total: int=None):
        """PaginatedResponseOfId4nPresentation - a model defined in OpenAPI

        :param elements: The elements of this PaginatedResponseOfId4nPresentation.
        :param limit: The limit of this PaginatedResponseOfId4nPresentation.
        :param offset: The offset of this PaginatedResponseOfId4nPresentation.
        :param total: The total of this PaginatedResponseOfId4nPresentation.
        """
        self.openapi_types = {
            'elements': List[Id4nPresentation],
            'limit': int,
            'offset': int,
            'total': int
        }

        self.attribute_map = {
            'elements': 'elements',
            'limit': 'limit',
            'offset': 'offset',
            'total': 'total'
        }

        self._elements = elements
        self._limit = limit
        self._offset = offset
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginatedResponseOfId4nPresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginatedResponseOfId4nPresentation of this PaginatedResponseOfId4nPresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elements(self):
        """Gets the elements of this PaginatedResponseOfId4nPresentation.


        :return: The elements of this PaginatedResponseOfId4nPresentation.
        :rtype: List[Id4nPresentation]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this PaginatedResponseOfId4nPresentation.


        :param elements: The elements of this PaginatedResponseOfId4nPresentation.
        :type elements: List[Id4nPresentation]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")

        self._elements = elements

    @property
    def limit(self):
        """Gets the limit of this PaginatedResponseOfId4nPresentation.

        The number of returned elements

        :return: The limit of this PaginatedResponseOfId4nPresentation.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginatedResponseOfId4nPresentation.

        The number of returned elements

        :param limit: The limit of this PaginatedResponseOfId4nPresentation.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PaginatedResponseOfId4nPresentation.

        Starting with the n-th element

        :return: The offset of this PaginatedResponseOfId4nPresentation.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginatedResponseOfId4nPresentation.

        Starting with the n-th element

        :param offset: The offset of this PaginatedResponseOfId4nPresentation.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def total(self):
        """Gets the total of this PaginatedResponseOfId4nPresentation.

        The total number of elements

        :return: The total of this PaginatedResponseOfId4nPresentation.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PaginatedResponseOfId4nPresentation.

        The total number of elements

        :param total: The total of this PaginatedResponseOfId4nPresentation.
        :type total: int
        """

        self._total = total
