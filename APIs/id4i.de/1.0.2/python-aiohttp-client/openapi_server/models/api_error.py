# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, error_id: str=None, error_list: List[ApiError]=None, message: str=None):
        """ApiError - a model defined in OpenAPI

        :param code: The code of this ApiError.
        :param error_id: The error_id of this ApiError.
        :param error_list: The error_list of this ApiError.
        :param message: The message of this ApiError.
        """
        self.openapi_types = {
            'code': str,
            'error_id': str,
            'error_list': List[ApiError],
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'error_id': 'errorId',
            'error_list': 'errorList',
            'message': 'message'
        }

        self._code = code
        self._error_id = error_id
        self._error_list = error_list
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiError of this ApiError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ApiError.


        :return: The code of this ApiError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApiError.


        :param code: The code of this ApiError.
        :type code: str
        """
        allowed_values = ["ERR_REGISTRATION_VERIFICATION_NO_TOKEN", "ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN", "ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN", "ERR_AUTHENTICATION_NO_TOKEN", "ERR_AUTHENTICATION_INVALID_TOKEN", "ERR_AUTHENTICATION_EXPIRED_TOKEN", "ERR_AUTHENTICATION_FAILED", "ERR_AUTHORIZATION_MISSING_PRIVILEGES", "ERR_AUTHORIZATION_FORBIDDEN", "ERR_AUTHORIZATION_REQUIRE_USER", "ERR_INPUT_VALIDATION_FAILED", "ERR_FIELD_INPUT_VALIDATION_FAILED", "ERR_VALIDATION_CONSTRAINT_FAILED", "ERR_INPUT_NOT_READABLE", "ERR_INVALID_INPUT_PARAMETER", "ERR_GUID_CREATION", "ERR_INVALID_ID4N_OBJECT_TYPE", "ERR_MISSING_BILLING_INFORMATION", "ERR_COLLECTION_UPDATE_DENIED", "ERR_ENTITY_NOT_FOUND", "ERR_ENTITY_TOO_BIG", "ERR_DUPLICATE", "ERR_INTERNAL", "ERR_UNKNOWN", "ERR_INVALID_ORGANIZATION_USERROLE", "ERR_ORGANIZATION_ROLE_INCONSISTENCY", "ERR_ORGANIZATION_NOT_DELETABLE", "ERR_USER_ALREADY_IN_ORGANIZATION", "ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE", "ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME", "ERR_USER_DEACTIVATED", "ERR_LANGUAGE_NOT_SUPPORTED", "ERR_EMAIL_MISSING_TEMPLATE_PARAM", "ERR_EMAIL_TEMPLATE_NOT_AVAILABLE", "ERR_EMAIL_PREPARATION_FAILED", "ERR_IMAGE_CONVERSION", "ERR_UPLOAD_TOO_LARGE", "ERR_INVALID_ALIAS_TYPE", "ERR_INVALID_URI_TEMPLATE", "ERR_INVALID_URI_TEMPLATE_VARIABLE", "ERR_INVALID_NAMESPACE", "ERR_INVALID_PROPERTY_KEY", "ERR_INVALID_FILTER", "ERR_NAMESPACE_ALREADY_EXISTS", "ERR_INSECURE_PASSWORD", "ERR_TRANSFER_DENIED", "ERR_INVALID_PHYSICAL_STATE", "ERR_INVALID_HISTORY_PROPERTY_NAMESPACE", "ERR_INVALID_HISTORY_PROPERTY_VALUE", "ERR_ORGA_CANNOT_BE_OWN_PARTNER", "ERR_INVALID_GS1_CODE", "ERR_INVALID_GS1_CHAR_IN_CODE", "ERR_INVALID_GS1_CODE_NOT_UNIQUE", "ERR_INVALID_GS1_GTIN", "ERR_GS1_CODE_CURRENTLY_UNSUPPORTED"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def error_id(self):
        """Gets the error_id of this ApiError.


        :return: The error_id of this ApiError.
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this ApiError.


        :param error_id: The error_id of this ApiError.
        :type error_id: str
        """
        if error_id is None:
            raise ValueError("Invalid value for `error_id`, must not be `None`")

        self._error_id = error_id

    @property
    def error_list(self):
        """Gets the error_list of this ApiError.


        :return: The error_list of this ApiError.
        :rtype: List[ApiError]
        """
        return self._error_list

    @error_list.setter
    def error_list(self, error_list):
        """Sets the error_list of this ApiError.


        :param error_list: The error_list of this ApiError.
        :type error_list: List[ApiError]
        """
        if error_list is None:
            raise ValueError("Invalid value for `error_list`, must not be `None`")

        self._error_list = error_list

    @property
    def message(self):
        """Gets the message of this ApiError.


        :return: The message of this ApiError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiError.


        :param message: The message of this ApiError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
