# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, logo_url: str=None, name: str=None, namespace: str=None):
        """Organization - a model defined in OpenAPI

        :param id: The id of this Organization.
        :param logo_url: The logo_url of this Organization.
        :param name: The name of this Organization.
        :param namespace: The namespace of this Organization.
        """
        self.openapi_types = {
            'id': int,
            'logo_url': str,
            'name': str,
            'namespace': str
        }

        self.attribute_map = {
            'id': 'id',
            'logo_url': 'logoURL',
            'name': 'name',
            'namespace': 'namespace'
        }

        self._id = id
        self._logo_url = logo_url
        self._name = name
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Organization.

        The id of the organization ( Deprecated: Use namespace instead. )

        :return: The id of this Organization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        The id of the organization ( Deprecated: Use namespace instead. )

        :param id: The id of this Organization.
        :type id: int
        """

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this Organization.

        URL to a logo of the organization

        :return: The logo_url of this Organization.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Organization.

        URL to a logo of the organization

        :param logo_url: The logo_url of this Organization.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this Organization.

        The name of the organization

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The name of the organization

        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 254:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `254`")
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Organization.

        The namespace of the organization

        :return: The namespace of this Organization.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Organization.

        The namespace of the organization

        :param namespace: The namespace of this Organization.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")
        if namespace is not None and len(namespace) > 255:
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")
        if namespace is not None and len(namespace) < 3:
            raise ValueError("Invalid value for `namespace`, length must be greater than or equal to `3`")

        self._namespace = namespace
