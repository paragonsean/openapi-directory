# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CompleteUserRegistrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, username: str=None, verification_token: str=None):
        """CompleteUserRegistrationRequest - a model defined in OpenAPI

        :param password: The password of this CompleteUserRegistrationRequest.
        :param username: The username of this CompleteUserRegistrationRequest.
        :param verification_token: The verification_token of this CompleteUserRegistrationRequest.
        """
        self.openapi_types = {
            'password': str,
            'username': str,
            'verification_token': str
        }

        self.attribute_map = {
            'password': 'password',
            'username': 'username',
            'verification_token': 'verificationToken'
        }

        self._password = password
        self._username = username
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteUserRegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteUserRegistrationRequest of this CompleteUserRegistrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this CompleteUserRegistrationRequest.


        :return: The password of this CompleteUserRegistrationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CompleteUserRegistrationRequest.


        :param password: The password of this CompleteUserRegistrationRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 99:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `99`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this CompleteUserRegistrationRequest.


        :return: The username of this CompleteUserRegistrationRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CompleteUserRegistrationRequest.


        :param username: The username of this CompleteUserRegistrationRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and not re.search(r'[a-zA-Z0-9_.-]{6,50}', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]{6,50}/`")

        self._username = username

    @property
    def verification_token(self):
        """Gets the verification_token of this CompleteUserRegistrationRequest.


        :return: The verification_token of this CompleteUserRegistrationRequest.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this CompleteUserRegistrationRequest.


        :param verification_token: The verification_token of this CompleteUserRegistrationRequest.
        :type verification_token: str
        """
        if verification_token is None:
            raise ValueError("Invalid value for `verification_token`, must not be `None`")

        self._verification_token = verification_token
