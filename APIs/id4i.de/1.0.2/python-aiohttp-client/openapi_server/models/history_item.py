# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.visibility import Visibility
from openapi_server import util


class HistoryItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: Dict[str, str]=None, organization_id: str=None, owner_organization_id: str=None, sequence_id: int=None, timestamp: int=None, type: str=None, visibility: Visibility=None):
        """HistoryItem - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this HistoryItem.
        :param organization_id: The organization_id of this HistoryItem.
        :param owner_organization_id: The owner_organization_id of this HistoryItem.
        :param sequence_id: The sequence_id of this HistoryItem.
        :param timestamp: The timestamp of this HistoryItem.
        :param type: The type of this HistoryItem.
        :param visibility: The visibility of this HistoryItem.
        """
        self.openapi_types = {
            'additional_properties': Dict[str, str],
            'organization_id': str,
            'owner_organization_id': str,
            'sequence_id': int,
            'timestamp': int,
            'type': str,
            'visibility': Visibility
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'organization_id': 'organizationId',
            'owner_organization_id': 'ownerOrganizationId',
            'sequence_id': 'sequenceId',
            'timestamp': 'timestamp',
            'type': 'type',
            'visibility': 'visibility'
        }

        self._additional_properties = additional_properties
        self._organization_id = organization_id
        self._owner_organization_id = owner_organization_id
        self._sequence_id = sequence_id
        self._timestamp = timestamp
        self._type = type
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryItem of this HistoryItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this HistoryItem.

        History items custom additional properties

        :return: The additional_properties of this HistoryItem.
        :rtype: Dict[str, str]
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this HistoryItem.

        History items custom additional properties

        :param additional_properties: The additional_properties of this HistoryItem.
        :type additional_properties: Dict[str, str]
        """

        self._additional_properties = additional_properties

    @property
    def organization_id(self):
        """Gets the organization_id of this HistoryItem.

        Originator of the history item

        :return: The organization_id of this HistoryItem.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this HistoryItem.

        Originator of the history item

        :param organization_id: The organization_id of this HistoryItem.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def owner_organization_id(self):
        """Gets the owner_organization_id of this HistoryItem.

        Owner of the history item

        :return: The owner_organization_id of this HistoryItem.
        :rtype: str
        """
        return self._owner_organization_id

    @owner_organization_id.setter
    def owner_organization_id(self, owner_organization_id):
        """Sets the owner_organization_id of this HistoryItem.

        Owner of the history item

        :param owner_organization_id: The owner_organization_id of this HistoryItem.
        :type owner_organization_id: str
        """

        self._owner_organization_id = owner_organization_id

    @property
    def sequence_id(self):
        """Gets the sequence_id of this HistoryItem.

        Forms the primary key of the history item together with the GUID and the organizationId

        :return: The sequence_id of this HistoryItem.
        :rtype: int
        """
        return self._sequence_id

    @sequence_id.setter
    def sequence_id(self, sequence_id):
        """Sets the sequence_id of this HistoryItem.

        Forms the primary key of the history item together with the GUID and the organizationId

        :param sequence_id: The sequence_id of this HistoryItem.
        :type sequence_id: int
        """

        self._sequence_id = sequence_id

    @property
    def timestamp(self):
        """Gets the timestamp of this HistoryItem.

        History item timestamp

        :return: The timestamp of this HistoryItem.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HistoryItem.

        History item timestamp

        :param timestamp: The timestamp of this HistoryItem.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this HistoryItem.

        Type of the history item

        :return: The type of this HistoryItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HistoryItem.

        Type of the history item

        :param type: The type of this HistoryItem.
        :type type: str
        """
        allowed_values = ["CREATED", "DESTROYED", "RECYCLED", "SHIPMENT_PREPARED", "STORED", "RETRIEVED_FROM_STORAGE", "PACKAGED", "DISPATCHED", "RECEIVED", "DELIVERY_REFUSED", "REPROCESSING_STARTED", "REPROCESSING_STEP_STARTED", "REPROCESSING_STEP_CANCELLED", "REPROCESSING_STEP_FINISHED", "REPROCESSING_CANCELLED", "REPROCESSING_FINISHED", "DISASSEMBLED", "MAINTENANCE_STARTED", "MAINTENANCE_STEP_STARTED", "MAINTENANCE_STEP_CANCELLED", "MAINTENANCE_STEP_FINISHED", "MAINTENANCE_CANCELLED", "MAINTENANCE_FINISHED", "PRODUCTION_STARTED", "PRODUCTION_CANCELLED", "PRODUCTION_FINISHED", "PRODUCTION_STEP_STARTED", "PRODUCTION_STEP_CANCELLED", "PRODUCTION_STEP_FINISHED", "QUALITY_CHECK_PERFORMED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visibility(self):
        """Gets the visibility of this HistoryItem.


        :return: The visibility of this HistoryItem.
        :rtype: Visibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this HistoryItem.


        :param visibility: The visibility of this HistoryItem.
        :type visibility: Visibility
        """

        self._visibility = visibility
