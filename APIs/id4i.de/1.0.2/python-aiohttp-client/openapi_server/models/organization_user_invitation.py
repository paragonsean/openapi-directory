# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationUserInvitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, roles: List[str]=None, user_name: str=None):
        """OrganizationUserInvitation - a model defined in OpenAPI

        :param email: The email of this OrganizationUserInvitation.
        :param roles: The roles of this OrganizationUserInvitation.
        :param user_name: The user_name of this OrganizationUserInvitation.
        """
        self.openapi_types = {
            'email': str,
            'roles': List[str],
            'user_name': str
        }

        self.attribute_map = {
            'email': 'email',
            'roles': 'roles',
            'user_name': 'userName'
        }

        self._email = email
        self._roles = roles
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationUserInvitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationUserInvitation of this OrganizationUserInvitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this OrganizationUserInvitation.


        :return: The email of this OrganizationUserInvitation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationUserInvitation.


        :param email: The email of this OrganizationUserInvitation.
        :type email: str
        """

        self._email = email

    @property
    def roles(self):
        """Gets the roles of this OrganizationUserInvitation.


        :return: The roles of this OrganizationUserInvitation.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this OrganizationUserInvitation.


        :param roles: The roles of this OrganizationUserInvitation.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def user_name(self):
        """Gets the user_name of this OrganizationUserInvitation.


        :return: The user_name of this OrganizationUserInvitation.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OrganizationUserInvitation.


        :param user_name: The user_name of this OrganizationUserInvitation.
        :type user_name: str
        """

        self._user_name = user_name
