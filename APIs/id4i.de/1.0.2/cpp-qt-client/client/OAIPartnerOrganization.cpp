/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerOrganization::OAIPartnerOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerOrganization::OAIPartnerOrganization() {
    this->initializeModel();
}

OAIPartnerOrganization::~OAIPartnerOrganization() {}

void OAIPartnerOrganization::initializeModel() {

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIPartnerOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerOrganization::fromJsonObject(QJsonObject json) {

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoURL")]);
    m_logo_url_isSet = !json[QString("logoURL")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIPartnerOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_logo_url_isSet) {
        obj.insert(QString("logoURL"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

QString OAIPartnerOrganization::getLogoUrl() const {
    return m_logo_url;
}
void OAIPartnerOrganization::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIPartnerOrganization::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIPartnerOrganization::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIPartnerOrganization::getName() const {
    return m_name;
}
void OAIPartnerOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPartnerOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPartnerOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPartnerOrganization::getRNamespace() const {
    return m_r_namespace;
}
void OAIPartnerOrganization::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIPartnerOrganization::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIPartnerOrganization::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIPartnerOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
