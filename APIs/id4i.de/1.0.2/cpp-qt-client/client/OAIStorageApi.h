/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStorageApi_H
#define OAI_OAIStorageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIDocument.h"
#include "OAIDocumentUpdate.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAIPaginatedResponseOfDocument.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStorageApi : public QObject {
    Q_OBJECT

public:
    OAIStorageApi(const int timeOut = 0);
    ~OAIStorageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  content OAIHttpFileElement [required]
    */
    virtual void createDocument(const QString &organization_id, const QString &id4n, const OAIHttpFileElement &content);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void deleteDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getPublicDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  owner QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllDocuments(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllPublicDocuments(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  owner QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listDocuments(const QString &organization_id, const QString &id4n, const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  content OAIHttpFileElement [required]
    */
    virtual void putDocument(const QString &organization_id, const QString &id4n, const OAIHttpFileElement &content);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void readDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  id4n QString [required]
    */
    virtual void readFromMicrostorage(const QString &organization, const QString &id4n);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void readPublicDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    * @param[in]  oai_document_update OAIDocumentUpdate [required]
    */
    virtual void updateDocumentMetadata(const QString &organization_id, const QString &id4n, const QString &file_name, const OAIDocumentUpdate &oai_document_update);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  content_type QString [optional]
    * @param[in]  content_length qint64 [optional]
    * @param[in]  body QByteArray [optional]
    */
    virtual void writeToMicrostorage(const QString &organization, const QString &id4n, const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &content_length = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QByteArray> &body = ::OpenAPI::OptionalParam<QByteArray>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDocumentCallback(OAIHttpRequestWorker *worker);
    void deleteDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentCallback(OAIHttpRequestWorker *worker);
    void getPublicDocumentCallback(OAIHttpRequestWorker *worker);
    void listAllDocumentsCallback(OAIHttpRequestWorker *worker);
    void listAllPublicDocumentsCallback(OAIHttpRequestWorker *worker);
    void listDocumentsCallback(OAIHttpRequestWorker *worker);
    void putDocumentCallback(OAIHttpRequestWorker *worker);
    void readDocumentCallback(OAIHttpRequestWorker *worker);
    void readFromMicrostorageCallback(OAIHttpRequestWorker *worker);
    void readPublicDocumentCallback(OAIHttpRequestWorker *worker);
    void updateDocumentMetadataCallback(OAIHttpRequestWorker *worker);
    void writeToMicrostorageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDocumentSignal(OAIDocument summary);
    void deleteDocumentSignal();
    void getDocumentSignal(OAIDocument summary);
    void getPublicDocumentSignal(OAIDocument summary);
    void listAllDocumentsSignal(OAIPaginatedResponseOfDocument summary);
    void listAllPublicDocumentsSignal(OAIPaginatedResponseOfDocument summary);
    void listDocumentsSignal(OAIPaginatedResponseOfDocument summary);
    void putDocumentSignal(OAIDocument summary);
    void readDocumentSignal(QByteArray summary);
    void readFromMicrostorageSignal(QByteArray summary);
    void readPublicDocumentSignal(QByteArray summary);
    void updateDocumentMetadataSignal(OAIDocument summary);
    void writeToMicrostorageSignal(OAIObject summary);


    void createDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void deleteDocumentSignalFull(OAIHttpRequestWorker *worker);
    void getDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void getPublicDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void listAllDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfDocument summary);
    void listAllPublicDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfDocument summary);
    void listDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfDocument summary);
    void putDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void readDocumentSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void readFromMicrostorageSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void readPublicDocumentSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void updateDocumentMetadataSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void writeToMicrostorageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createDocumentSignalError() instead")
    void createDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalError() instead")
    void deleteDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalError() instead")
    void getDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicDocumentSignalError() instead")
    void getPublicDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllDocumentsSignalError() instead")
    void listAllDocumentsSignalE(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllDocumentsSignalError(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPublicDocumentsSignalError() instead")
    void listAllPublicDocumentsSignalE(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPublicDocumentsSignalError(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentsSignalError() instead")
    void listDocumentsSignalE(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentsSignalError(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentSignalError() instead")
    void putDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDocumentSignalError() instead")
    void readDocumentSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readDocumentSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFromMicrostorageSignalError() instead")
    void readFromMicrostorageSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readFromMicrostorageSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readPublicDocumentSignalError() instead")
    void readPublicDocumentSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readPublicDocumentSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentMetadataSignalError() instead")
    void updateDocumentMetadataSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentMetadataSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeToMicrostorageSignalError() instead")
    void writeToMicrostorageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void writeToMicrostorageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDocumentSignalErrorFull() instead")
    void createDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalErrorFull() instead")
    void deleteDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalErrorFull() instead")
    void getDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicDocumentSignalErrorFull() instead")
    void getPublicDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllDocumentsSignalErrorFull() instead")
    void listAllDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPublicDocumentsSignalErrorFull() instead")
    void listAllPublicDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPublicDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentsSignalErrorFull() instead")
    void listDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentSignalErrorFull() instead")
    void putDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readDocumentSignalErrorFull() instead")
    void readDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readFromMicrostorageSignalErrorFull() instead")
    void readFromMicrostorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readFromMicrostorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readPublicDocumentSignalErrorFull() instead")
    void readPublicDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readPublicDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentMetadataSignalErrorFull() instead")
    void updateDocumentMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use writeToMicrostorageSignalErrorFull() instead")
    void writeToMicrostorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void writeToMicrostorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
