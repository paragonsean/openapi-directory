/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyPrivilegeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyPrivilegeInfo::OAIApiKeyPrivilegeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyPrivilegeInfo::OAIApiKeyPrivilegeInfo() {
    this->initializeModel();
}

OAIApiKeyPrivilegeInfo::~OAIApiKeyPrivilegeInfo() {}

void OAIApiKeyPrivilegeInfo::initializeModel() {

    m_allows_billable_operations_isSet = false;
    m_allows_billable_operations_isValid = false;

    m_help_text_isSet = false;
    m_help_text_isValid = false;

    m_id4n_associated_isSet = false;
    m_id4n_associated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIApiKeyPrivilegeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyPrivilegeInfo::fromJsonObject(QJsonObject json) {

    m_allows_billable_operations_isValid = ::OpenAPI::fromJsonValue(m_allows_billable_operations, json[QString("allowsBillableOperations")]);
    m_allows_billable_operations_isSet = !json[QString("allowsBillableOperations")].isNull() && m_allows_billable_operations_isValid;

    m_help_text_isValid = ::OpenAPI::fromJsonValue(m_help_text, json[QString("helpText")]);
    m_help_text_isSet = !json[QString("helpText")].isNull() && m_help_text_isValid;

    m_id4n_associated_isValid = ::OpenAPI::fromJsonValue(m_id4n_associated, json[QString("id4nAssociated")]);
    m_id4n_associated_isSet = !json[QString("id4nAssociated")].isNull() && m_id4n_associated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIApiKeyPrivilegeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyPrivilegeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_billable_operations_isSet) {
        obj.insert(QString("allowsBillableOperations"), ::OpenAPI::toJsonValue(m_allows_billable_operations));
    }
    if (m_help_text_isSet) {
        obj.insert(QString("helpText"), ::OpenAPI::toJsonValue(m_help_text));
    }
    if (m_id4n_associated_isSet) {
        obj.insert(QString("id4nAssociated"), ::OpenAPI::toJsonValue(m_id4n_associated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIApiKeyPrivilegeInfo::isAllowsBillableOperations() const {
    return m_allows_billable_operations;
}
void OAIApiKeyPrivilegeInfo::setAllowsBillableOperations(const bool &allows_billable_operations) {
    m_allows_billable_operations = allows_billable_operations;
    m_allows_billable_operations_isSet = true;
}

bool OAIApiKeyPrivilegeInfo::is_allows_billable_operations_Set() const{
    return m_allows_billable_operations_isSet;
}

bool OAIApiKeyPrivilegeInfo::is_allows_billable_operations_Valid() const{
    return m_allows_billable_operations_isValid;
}

QString OAIApiKeyPrivilegeInfo::getHelpText() const {
    return m_help_text;
}
void OAIApiKeyPrivilegeInfo::setHelpText(const QString &help_text) {
    m_help_text = help_text;
    m_help_text_isSet = true;
}

bool OAIApiKeyPrivilegeInfo::is_help_text_Set() const{
    return m_help_text_isSet;
}

bool OAIApiKeyPrivilegeInfo::is_help_text_Valid() const{
    return m_help_text_isValid;
}

bool OAIApiKeyPrivilegeInfo::isId4nAssociated() const {
    return m_id4n_associated;
}
void OAIApiKeyPrivilegeInfo::setId4nAssociated(const bool &id4n_associated) {
    m_id4n_associated = id4n_associated;
    m_id4n_associated_isSet = true;
}

bool OAIApiKeyPrivilegeInfo::is_id4n_associated_Set() const{
    return m_id4n_associated_isSet;
}

bool OAIApiKeyPrivilegeInfo::is_id4n_associated_Valid() const{
    return m_id4n_associated_isValid;
}

QString OAIApiKeyPrivilegeInfo::getName() const {
    return m_name;
}
void OAIApiKeyPrivilegeInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiKeyPrivilegeInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiKeyPrivilegeInfo::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIApiKeyPrivilegeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_billable_operations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id4n_associated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyPrivilegeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id4n_associated_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
