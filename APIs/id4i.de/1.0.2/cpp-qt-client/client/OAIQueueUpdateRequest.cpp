/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueUpdateRequest::OAIQueueUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueUpdateRequest::OAIQueueUpdateRequest() {
    this->initializeModel();
}

OAIQueueUpdateRequest::~OAIQueueUpdateRequest() {}

void OAIQueueUpdateRequest::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_purge_queue_isSet = false;
    m_purge_queue_isValid = false;
}

void OAIQueueUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueUpdateRequest::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purge_queue_isValid = ::OpenAPI::fromJsonValue(m_purge_queue, json[QString("purgeQueue")]);
    m_purge_queue_isSet = !json[QString("purgeQueue")].isNull() && m_purge_queue_isValid;
}

QString OAIQueueUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purge_queue_isSet) {
        obj.insert(QString("purgeQueue"), ::OpenAPI::toJsonValue(m_purge_queue));
    }
    return obj;
}

bool OAIQueueUpdateRequest::isActive() const {
    return m_active;
}
void OAIQueueUpdateRequest::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIQueueUpdateRequest::is_active_Set() const{
    return m_active_isSet;
}

bool OAIQueueUpdateRequest::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIQueueUpdateRequest::getId() const {
    return m_id;
}
void OAIQueueUpdateRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueueUpdateRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueueUpdateRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIQueueUpdateRequest::isPurgeQueue() const {
    return m_purge_queue;
}
void OAIQueueUpdateRequest::setPurgeQueue(const bool &purge_queue) {
    m_purge_queue = purge_queue;
    m_purge_queue_isSet = true;
}

bool OAIQueueUpdateRequest::is_purge_queue_Set() const{
    return m_purge_queue_isSet;
}

bool OAIQueueUpdateRequest::is_purge_queue_Valid() const{
    return m_purge_queue_isValid;
}

bool OAIQueueUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purge_queue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
