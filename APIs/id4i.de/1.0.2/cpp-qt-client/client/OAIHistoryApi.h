/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHistoryApi_H
#define OAI_OAIHistoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIHistoryItem.h"
#include "OAIHistoryItemUpdate.h"
#include "OAIPaginatedResponseOfHistoryItem.h"
#include "OAIVisibility.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHistoryApi : public QObject {
    Q_OBJECT

public:
    OAIHistoryApi(const int timeOut = 0);
    ~OAIHistoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  oai_history_item OAIHistoryItem [required]
    */
    virtual void addItem(const QString &id4n, const OAIHistoryItem &oai_history_item);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  include_private bool [optional]
    * @param[in]  organization QString [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  qualifier QList<QString> [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void filteredList(const QString &id4n, const ::OpenAPI::OptionalParam<bool> &include_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &organization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &qualifier = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  include_private bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void list(const QString &id4n, const QString &organization_id, const ::OpenAPI::OptionalParam<bool> &include_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  sequence_id qint32 [required]
    */
    virtual void retrieveItem(const QString &id4n, const QString &organization_id, const qint32 &sequence_id);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  sequence_id qint32 [required]
    * @param[in]  oai_history_item_update OAIHistoryItemUpdate [required]
    */
    virtual void updateItem(const QString &id4n, const QString &organization_id, const qint32 &sequence_id, const OAIHistoryItemUpdate &oai_history_item_update);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  sequence_id qint32 [required]
    * @param[in]  oai_visibility OAIVisibility [required]
    */
    virtual void updateItemVisibility(const QString &id4n, const QString &organization_id, const qint32 &sequence_id, const OAIVisibility &oai_visibility);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addItemCallback(OAIHttpRequestWorker *worker);
    void filteredListCallback(OAIHttpRequestWorker *worker);
    void listCallback(OAIHttpRequestWorker *worker);
    void retrieveItemCallback(OAIHttpRequestWorker *worker);
    void updateItemCallback(OAIHttpRequestWorker *worker);
    void updateItemVisibilityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addItemSignal();
    void filteredListSignal(OAIPaginatedResponseOfHistoryItem summary);
    void listSignal(OAIPaginatedResponseOfHistoryItem summary);
    void retrieveItemSignal(OAIHistoryItem summary);
    void updateItemSignal(OAIHistoryItem summary);
    void updateItemVisibilitySignal(OAIHistoryItem summary);


    void addItemSignalFull(OAIHttpRequestWorker *worker);
    void filteredListSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfHistoryItem summary);
    void listSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfHistoryItem summary);
    void retrieveItemSignalFull(OAIHttpRequestWorker *worker, OAIHistoryItem summary);
    void updateItemSignalFull(OAIHttpRequestWorker *worker, OAIHistoryItem summary);
    void updateItemVisibilitySignalFull(OAIHttpRequestWorker *worker, OAIHistoryItem summary);

    Q_DECL_DEPRECATED_X("Use addItemSignalError() instead")
    void addItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteredListSignalError() instead")
    void filteredListSignalE(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filteredListSignalError(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalError() instead")
    void listSignalE(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalError(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveItemSignalError() instead")
    void retrieveItemSignalE(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveItemSignalError(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemSignalError() instead")
    void updateItemSignalE(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemSignalError(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemVisibilitySignalError() instead")
    void updateItemVisibilitySignalE(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemVisibilitySignalError(OAIHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addItemSignalErrorFull() instead")
    void addItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteredListSignalErrorFull() instead")
    void filteredListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteredListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSignalErrorFull() instead")
    void listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveItemSignalErrorFull() instead")
    void retrieveItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemSignalErrorFull() instead")
    void updateItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateItemVisibilitySignalErrorFull() instead")
    void updateItemVisibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateItemVisibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
