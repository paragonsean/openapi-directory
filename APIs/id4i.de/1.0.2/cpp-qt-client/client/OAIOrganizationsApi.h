/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddPartnerRequest.h"
#include "OAIApiError.h"
#include "OAIChangeRoleRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIOrganization.h"
#include "OAIOrganizationAddress.h"
#include "OAIOrganizationUpdate.h"
#include "OAIOrganizationUserInvitationListRequest.h"
#include "OAIPaginatedResponseOfCountry.h"
#include "OAIPaginatedResponseOfGuidCollection.h"
#include "OAIPaginatedResponseOfOrganization.h"
#include "OAIPaginatedResponseOfPartnerOrganization.h"
#include "OAIPaginatedResponseOfUserPresentation.h"
#include "OAIPaginatedResponseOfUserRoles.h"
#include "OAIPaginatedResponseOfstring.h"
#include "OAIPublicImagePresentation.h"
#include "OAIRemovePartnerRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_add_partner_request OAIAddPartnerRequest [required]
    */
    virtual void addPartnerOrganization(const QString &organization_id, const OAIAddPartnerRequest &oai_add_partner_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_change_role_request OAIChangeRoleRequest [required]
    */
    virtual void addUserRoles(const QString &organization_id, const QString &username, const OAIChangeRoleRequest &oai_change_role_request);

    /**
    * @param[in]  oai_organization OAIOrganization [required]
    */
    virtual void createOrganization(const OAIOrganization &oai_organization);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void deleteOrganization(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void deleteOrganizationBillingAddress(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void deleteOrganizationLogo(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void findOrganization(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void findOrganizationAddress(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void findOrganizationBillingAddress(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  label_prefix QString [optional]
    * @param[in]  property QList<QString> [optional]
    */
    virtual void getAllCollectionsOfOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &property = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAllOrganizationRoles(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void getOrganizationPrivileges(const QString &organization_id);

    /**
    * @param[in]  role QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getOrganizationsOfUser(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPartnerOrganizations(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getUserRoles(const QString &organization_id, const QString &username, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getUsersOfOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_organization_user_invitation_list_request OAIOrganizationUserInvitationListRequest [required]
    */
    virtual void inviteUsers(const QString &organization_id, const OAIOrganizationUserInvitationListRequest &oai_organization_user_invitation_list_request);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listCountries(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_remove_partner_request OAIRemovePartnerRequest [required]
    */
    virtual void removePartnerOrganization(const QString &organization_id, const OAIRemovePartnerRequest &oai_remove_partner_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_change_role_request OAIChangeRoleRequest [required]
    */
    virtual void removeUserRoles(const QString &organization_id, const QString &username, const OAIChangeRoleRequest &oai_change_role_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void setOrganizationLogo(const QString &organization_id, const OAIHttpFileElement &file);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_organization_update OAIOrganizationUpdate [required]
    */
    virtual void updateOrganization(const QString &organization_id, const OAIOrganizationUpdate &oai_organization_update);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_organization_address OAIOrganizationAddress [required]
    */
    virtual void updateOrganizationAddress(const QString &organization_id, const OAIOrganizationAddress &oai_organization_address);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_organization_address OAIOrganizationAddress [required]
    */
    virtual void updateOrganizationBillingAddress(const QString &organization_id, const OAIOrganizationAddress &oai_organization_address);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addPartnerOrganizationCallback(OAIHttpRequestWorker *worker);
    void addUserRolesCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationBillingAddressCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationLogoCallback(OAIHttpRequestWorker *worker);
    void findOrganizationCallback(OAIHttpRequestWorker *worker);
    void findOrganizationAddressCallback(OAIHttpRequestWorker *worker);
    void findOrganizationBillingAddressCallback(OAIHttpRequestWorker *worker);
    void getAllCollectionsOfOrganizationCallback(OAIHttpRequestWorker *worker);
    void getAllOrganizationRolesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationPrivilegesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationsOfUserCallback(OAIHttpRequestWorker *worker);
    void getPartnerOrganizationsCallback(OAIHttpRequestWorker *worker);
    void getUserRolesCallback(OAIHttpRequestWorker *worker);
    void getUsersOfOrganizationCallback(OAIHttpRequestWorker *worker);
    void inviteUsersCallback(OAIHttpRequestWorker *worker);
    void listCountriesCallback(OAIHttpRequestWorker *worker);
    void removePartnerOrganizationCallback(OAIHttpRequestWorker *worker);
    void removeUserRolesCallback(OAIHttpRequestWorker *worker);
    void setOrganizationLogoCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationAddressCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationBillingAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addPartnerOrganizationSignal();
    void addUserRolesSignal();
    void createOrganizationSignal(OAIOrganization summary);
    void deleteOrganizationSignal();
    void deleteOrganizationBillingAddressSignal();
    void deleteOrganizationLogoSignal();
    void findOrganizationSignal(OAIOrganization summary);
    void findOrganizationAddressSignal(OAIOrganizationAddress summary);
    void findOrganizationBillingAddressSignal(OAIOrganizationAddress summary);
    void getAllCollectionsOfOrganizationSignal(OAIPaginatedResponseOfGuidCollection summary);
    void getAllOrganizationRolesSignal(OAIPaginatedResponseOfUserRoles summary);
    void getOrganizationPrivilegesSignal(QList<QString> summary);
    void getOrganizationsOfUserSignal(OAIPaginatedResponseOfOrganization summary);
    void getPartnerOrganizationsSignal(OAIPaginatedResponseOfPartnerOrganization summary);
    void getUserRolesSignal(OAIPaginatedResponseOfstring summary);
    void getUsersOfOrganizationSignal(OAIPaginatedResponseOfUserPresentation summary);
    void inviteUsersSignal();
    void listCountriesSignal(OAIPaginatedResponseOfCountry summary);
    void removePartnerOrganizationSignal();
    void removeUserRolesSignal();
    void setOrganizationLogoSignal(OAIPublicImagePresentation summary);
    void updateOrganizationSignal(OAIOrganization summary);
    void updateOrganizationAddressSignal(OAIOrganizationAddress summary);
    void updateOrganizationBillingAddressSignal(OAIOrganizationAddress summary);


    void addPartnerOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void addUserRolesSignalFull(OAIHttpRequestWorker *worker);
    void createOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void deleteOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationBillingAddressSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganizationLogoSignalFull(OAIHttpRequestWorker *worker);
    void findOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void findOrganizationAddressSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationAddress summary);
    void findOrganizationBillingAddressSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationAddress summary);
    void getAllCollectionsOfOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuidCollection summary);
    void getAllOrganizationRolesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfUserRoles summary);
    void getOrganizationPrivilegesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganizationsOfUserSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfOrganization summary);
    void getPartnerOrganizationsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfPartnerOrganization summary);
    void getUserRolesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfstring summary);
    void getUsersOfOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfUserPresentation summary);
    void inviteUsersSignalFull(OAIHttpRequestWorker *worker);
    void listCountriesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfCountry summary);
    void removePartnerOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void removeUserRolesSignalFull(OAIHttpRequestWorker *worker);
    void setOrganizationLogoSignalFull(OAIHttpRequestWorker *worker, OAIPublicImagePresentation summary);
    void updateOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void updateOrganizationAddressSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationAddress summary);
    void updateOrganizationBillingAddressSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationAddress summary);

    Q_DECL_DEPRECATED_X("Use addPartnerOrganizationSignalError() instead")
    void addPartnerOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPartnerOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserRolesSignalError() instead")
    void addUserRolesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addUserRolesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalError() instead")
    void createOrganizationSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalError() instead")
    void deleteOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBillingAddressSignalError() instead")
    void deleteOrganizationBillingAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBillingAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationLogoSignalError() instead")
    void deleteOrganizationLogoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationLogoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationSignalError() instead")
    void findOrganizationSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationAddressSignalError() instead")
    void findOrganizationAddressSignalE(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationAddressSignalError(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationBillingAddressSignalError() instead")
    void findOrganizationBillingAddressSignalE(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationBillingAddressSignalError(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsOfOrganizationSignalError() instead")
    void getAllCollectionsOfOrganizationSignalE(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsOfOrganizationSignalError(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrganizationRolesSignalError() instead")
    void getAllOrganizationRolesSignalE(OAIPaginatedResponseOfUserRoles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrganizationRolesSignalError(OAIPaginatedResponseOfUserRoles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPrivilegesSignalError() instead")
    void getOrganizationPrivilegesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPrivilegesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsOfUserSignalError() instead")
    void getOrganizationsOfUserSignalE(OAIPaginatedResponseOfOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsOfUserSignalError(OAIPaginatedResponseOfOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerOrganizationsSignalError() instead")
    void getPartnerOrganizationsSignalE(OAIPaginatedResponseOfPartnerOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerOrganizationsSignalError(OAIPaginatedResponseOfPartnerOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRolesSignalError() instead")
    void getUserRolesSignalE(OAIPaginatedResponseOfstring summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRolesSignalError(OAIPaginatedResponseOfstring summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersOfOrganizationSignalError() instead")
    void getUsersOfOrganizationSignalE(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersOfOrganizationSignalError(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalError() instead")
    void inviteUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCountriesSignalError() instead")
    void listCountriesSignalE(OAIPaginatedResponseOfCountry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCountriesSignalError(OAIPaginatedResponseOfCountry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePartnerOrganizationSignalError() instead")
    void removePartnerOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removePartnerOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserRolesSignalError() instead")
    void removeUserRolesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserRolesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrganizationLogoSignalError() instead")
    void setOrganizationLogoSignalE(OAIPublicImagePresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrganizationLogoSignalError(OAIPublicImagePresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalError() instead")
    void updateOrganizationSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAddressSignalError() instead")
    void updateOrganizationAddressSignalE(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAddressSignalError(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBillingAddressSignalError() instead")
    void updateOrganizationBillingAddressSignalE(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBillingAddressSignalError(OAIOrganizationAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addPartnerOrganizationSignalErrorFull() instead")
    void addPartnerOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPartnerOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUserRolesSignalErrorFull() instead")
    void addUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrganizationSignalErrorFull() instead")
    void createOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationSignalErrorFull() instead")
    void deleteOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationBillingAddressSignalErrorFull() instead")
    void deleteOrganizationBillingAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationBillingAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganizationLogoSignalErrorFull() instead")
    void deleteOrganizationLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationSignalErrorFull() instead")
    void findOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationAddressSignalErrorFull() instead")
    void findOrganizationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findOrganizationBillingAddressSignalErrorFull() instead")
    void findOrganizationBillingAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findOrganizationBillingAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsOfOrganizationSignalErrorFull() instead")
    void getAllCollectionsOfOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsOfOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrganizationRolesSignalErrorFull() instead")
    void getAllOrganizationRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrganizationRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationPrivilegesSignalErrorFull() instead")
    void getOrganizationPrivilegesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationPrivilegesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsOfUserSignalErrorFull() instead")
    void getOrganizationsOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerOrganizationsSignalErrorFull() instead")
    void getPartnerOrganizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerOrganizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRolesSignalErrorFull() instead")
    void getUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersOfOrganizationSignalErrorFull() instead")
    void getUsersOfOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersOfOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalErrorFull() instead")
    void inviteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCountriesSignalErrorFull() instead")
    void listCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePartnerOrganizationSignalErrorFull() instead")
    void removePartnerOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePartnerOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserRolesSignalErrorFull() instead")
    void removeUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setOrganizationLogoSignalErrorFull() instead")
    void setOrganizationLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setOrganizationLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationSignalErrorFull() instead")
    void updateOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationAddressSignalErrorFull() instead")
    void updateOrganizationAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganizationBillingAddressSignalErrorFull() instead")
    void updateOrganizationBillingAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationBillingAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
