/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyPresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyPresentation::OAIApiKeyPresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyPresentation::OAIApiKeyPresentation() {
    this->initializeModel();
}

OAIApiKeyPresentation::~OAIApiKeyPresentation() {}

void OAIApiKeyPresentation::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;
}

void OAIApiKeyPresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyPresentation::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;
}

QString OAIApiKeyPresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyPresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    return obj;
}

bool OAIApiKeyPresentation::isActive() const {
    return m_active;
}
void OAIApiKeyPresentation::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIApiKeyPresentation::is_active_Set() const{
    return m_active_isSet;
}

bool OAIApiKeyPresentation::is_active_Valid() const{
    return m_active_isValid;
}

qint64 OAIApiKeyPresentation::getCreatedAt() const {
    return m_created_at;
}
void OAIApiKeyPresentation::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApiKeyPresentation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApiKeyPresentation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIApiKeyPresentation::getCreatedBy() const {
    return m_created_by;
}
void OAIApiKeyPresentation::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIApiKeyPresentation::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIApiKeyPresentation::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIApiKeyPresentation::getKey() const {
    return m_key;
}
void OAIApiKeyPresentation::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApiKeyPresentation::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApiKeyPresentation::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIApiKeyPresentation::getLabel() const {
    return m_label;
}
void OAIApiKeyPresentation::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIApiKeyPresentation::is_label_Set() const{
    return m_label_isSet;
}

bool OAIApiKeyPresentation::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIApiKeyPresentation::getOrganizationId() const {
    return m_organization_id;
}
void OAIApiKeyPresentation::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIApiKeyPresentation::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIApiKeyPresentation::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

bool OAIApiKeyPresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyPresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_created_at_isValid && m_created_by_isValid && m_key_isValid && m_label_isValid && m_organization_id_isValid && true;
}

} // namespace OpenAPI
