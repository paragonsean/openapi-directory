/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicServicesApi_H
#define OAI_OAIPublicServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIDocument.h"
#include "OAIOrganization.h"
#include "OAIPaginatedResponseOfDocument.h"
#include "OAIPaginatedResponseOfHistoryItem.h"
#include "OAIRoute.h"
#include "OAIWhoIsResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicServicesApi : public QObject {
    Q_OBJECT

public:
    OAIPublicServicesApi(const int timeOut = 0);
    ~OAIPublicServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getPublicDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  type QString [required]
    * @param[in]  interpolate bool [optional]
    */
    virtual void getRoutes(const QString &id4n, const QString &type, const ::OpenAPI::OptionalParam<bool> &interpolate = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  guid QString [required]
    */
    virtual void go(const QString &guid);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    * @param[in]  owner QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllPublicDocuments(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listPublicHistory(const QString &id4n, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void readOrganizationInfo(const QString &organization_id);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  id4n QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void readPublicDocument(const QString &organization_id, const QString &id4n, const QString &file_name);

    /**
    * @param[in]  image_id QString [required]
    */
    virtual void resolveImageUsingGET(const QString &image_id);

    /**
    * @param[in]  id4n QString [required]
    */
    virtual void resolveWhoIsEntry(const QString &id4n);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPublicDocumentCallback(OAIHttpRequestWorker *worker);
    void getRoutesCallback(OAIHttpRequestWorker *worker);
    void goCallback(OAIHttpRequestWorker *worker);
    void listAllPublicDocumentsCallback(OAIHttpRequestWorker *worker);
    void listPublicHistoryCallback(OAIHttpRequestWorker *worker);
    void readOrganizationInfoCallback(OAIHttpRequestWorker *worker);
    void readPublicDocumentCallback(OAIHttpRequestWorker *worker);
    void resolveImageUsingGETCallback(OAIHttpRequestWorker *worker);
    void resolveWhoIsEntryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPublicDocumentSignal(OAIDocument summary);
    void getRoutesSignal(QList<OAIRoute> summary);
    void goSignal();
    void listAllPublicDocumentsSignal(OAIPaginatedResponseOfDocument summary);
    void listPublicHistorySignal(OAIPaginatedResponseOfHistoryItem summary);
    void readOrganizationInfoSignal(OAIOrganization summary);
    void readPublicDocumentSignal(QByteArray summary);
    void resolveImageUsingGETSignal(QByteArray summary);
    void resolveWhoIsEntrySignal(OAIWhoIsResponse summary);


    void getPublicDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void getRoutesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoute> summary);
    void goSignalFull(OAIHttpRequestWorker *worker);
    void listAllPublicDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfDocument summary);
    void listPublicHistorySignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfHistoryItem summary);
    void readOrganizationInfoSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void readPublicDocumentSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void resolveImageUsingGETSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void resolveWhoIsEntrySignalFull(OAIHttpRequestWorker *worker, OAIWhoIsResponse summary);

    Q_DECL_DEPRECATED_X("Use getPublicDocumentSignalError() instead")
    void getPublicDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoutesSignalError() instead")
    void getRoutesSignalE(QList<OAIRoute> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoutesSignalError(QList<OAIRoute> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goSignalError() instead")
    void goSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void goSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPublicDocumentsSignalError() instead")
    void listAllPublicDocumentsSignalE(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPublicDocumentsSignalError(OAIPaginatedResponseOfDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicHistorySignalError() instead")
    void listPublicHistorySignalE(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicHistorySignalError(OAIPaginatedResponseOfHistoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readOrganizationInfoSignalError() instead")
    void readOrganizationInfoSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readOrganizationInfoSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readPublicDocumentSignalError() instead")
    void readPublicDocumentSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readPublicDocumentSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveImageUsingGETSignalError() instead")
    void resolveImageUsingGETSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveImageUsingGETSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveWhoIsEntrySignalError() instead")
    void resolveWhoIsEntrySignalE(OAIWhoIsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveWhoIsEntrySignalError(OAIWhoIsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPublicDocumentSignalErrorFull() instead")
    void getPublicDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoutesSignalErrorFull() instead")
    void getRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use goSignalErrorFull() instead")
    void goSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void goSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPublicDocumentsSignalErrorFull() instead")
    void listAllPublicDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPublicDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicHistorySignalErrorFull() instead")
    void listPublicHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readOrganizationInfoSignalErrorFull() instead")
    void readOrganizationInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readOrganizationInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readPublicDocumentSignalErrorFull() instead")
    void readPublicDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readPublicDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveImageUsingGETSignalErrorFull() instead")
    void resolveImageUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveImageUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveWhoIsEntrySignalErrorFull() instead")
    void resolveWhoIsEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveWhoIsEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
