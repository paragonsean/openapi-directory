/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationAddress::OAIOrganizationAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationAddress::OAIOrganizationAddress() {
    this->initializeModel();
}

OAIOrganizationAddress::~OAIOrganizationAddress() {}

void OAIOrganizationAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_post_code_isSet = false;
    m_post_code_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;
}

void OAIOrganizationAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_post_code_isValid = ::OpenAPI::fromJsonValue(m_post_code, json[QString("postCode")]);
    m_post_code_isSet = !json[QString("postCode")].isNull() && m_post_code_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;
}

QString OAIOrganizationAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_post_code_isSet) {
        obj.insert(QString("postCode"), ::OpenAPI::toJsonValue(m_post_code));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    return obj;
}

QString OAIOrganizationAddress::getCity() const {
    return m_city;
}
void OAIOrganizationAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOrganizationAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOrganizationAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIOrganizationAddress::getCompanyName() const {
    return m_company_name;
}
void OAIOrganizationAddress::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIOrganizationAddress::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIOrganizationAddress::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIOrganizationAddress::getCountryCode() const {
    return m_country_code;
}
void OAIOrganizationAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIOrganizationAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIOrganizationAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIOrganizationAddress::getCountryName() const {
    return m_country_name;
}
void OAIOrganizationAddress::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIOrganizationAddress::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIOrganizationAddress::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIOrganizationAddress::getFirstname() const {
    return m_firstname;
}
void OAIOrganizationAddress::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIOrganizationAddress::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIOrganizationAddress::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIOrganizationAddress::getLastname() const {
    return m_lastname;
}
void OAIOrganizationAddress::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIOrganizationAddress::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIOrganizationAddress::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAIOrganizationAddress::getPostCode() const {
    return m_post_code;
}
void OAIOrganizationAddress::setPostCode(const QString &post_code) {
    m_post_code = post_code;
    m_post_code_isSet = true;
}

bool OAIOrganizationAddress::is_post_code_Set() const{
    return m_post_code_isSet;
}

bool OAIOrganizationAddress::is_post_code_Valid() const{
    return m_post_code_isValid;
}

QString OAIOrganizationAddress::getStreet() const {
    return m_street;
}
void OAIOrganizationAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIOrganizationAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIOrganizationAddress::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIOrganizationAddress::getTelephone() const {
    return m_telephone;
}
void OAIOrganizationAddress::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIOrganizationAddress::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIOrganizationAddress::is_telephone_Valid() const{
    return m_telephone_isValid;
}

bool OAIOrganizationAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_country_code_isValid && m_firstname_isValid && m_lastname_isValid && m_post_code_isValid && m_street_isValid && true;
}

} // namespace OpenAPI
