/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryItem::OAIHistoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryItem::OAIHistoryItem() {
    this->initializeModel();
}

OAIHistoryItem::~OAIHistoryItem() {}

void OAIHistoryItem::initializeModel() {

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_owner_organization_id_isSet = false;
    m_owner_organization_id_isValid = false;

    m_sequence_id_isSet = false;
    m_sequence_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIHistoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryItem::fromJsonObject(QJsonObject json) {

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_owner_organization_id_isValid = ::OpenAPI::fromJsonValue(m_owner_organization_id, json[QString("ownerOrganizationId")]);
    m_owner_organization_id_isSet = !json[QString("ownerOrganizationId")].isNull() && m_owner_organization_id_isValid;

    m_sequence_id_isValid = ::OpenAPI::fromJsonValue(m_sequence_id, json[QString("sequenceId")]);
    m_sequence_id_isSet = !json[QString("sequenceId")].isNull() && m_sequence_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIHistoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_properties.size() > 0) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_owner_organization_id_isSet) {
        obj.insert(QString("ownerOrganizationId"), ::OpenAPI::toJsonValue(m_owner_organization_id));
    }
    if (m_sequence_id_isSet) {
        obj.insert(QString("sequenceId"), ::OpenAPI::toJsonValue(m_sequence_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QMap<QString, QString> OAIHistoryItem::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIHistoryItem::setAdditionalProperties(const QMap<QString, QString> &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIHistoryItem::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIHistoryItem::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QString OAIHistoryItem::getOrganizationId() const {
    return m_organization_id;
}
void OAIHistoryItem::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIHistoryItem::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIHistoryItem::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIHistoryItem::getOwnerOrganizationId() const {
    return m_owner_organization_id;
}
void OAIHistoryItem::setOwnerOrganizationId(const QString &owner_organization_id) {
    m_owner_organization_id = owner_organization_id;
    m_owner_organization_id_isSet = true;
}

bool OAIHistoryItem::is_owner_organization_id_Set() const{
    return m_owner_organization_id_isSet;
}

bool OAIHistoryItem::is_owner_organization_id_Valid() const{
    return m_owner_organization_id_isValid;
}

qint32 OAIHistoryItem::getSequenceId() const {
    return m_sequence_id;
}
void OAIHistoryItem::setSequenceId(const qint32 &sequence_id) {
    m_sequence_id = sequence_id;
    m_sequence_id_isSet = true;
}

bool OAIHistoryItem::is_sequence_id_Set() const{
    return m_sequence_id_isSet;
}

bool OAIHistoryItem::is_sequence_id_Valid() const{
    return m_sequence_id_isValid;
}

qint64 OAIHistoryItem::getTimestamp() const {
    return m_timestamp;
}
void OAIHistoryItem::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIHistoryItem::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIHistoryItem::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIHistoryItem::getType() const {
    return m_type;
}
void OAIHistoryItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHistoryItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHistoryItem::is_type_Valid() const{
    return m_type_isValid;
}

OAIVisibility OAIHistoryItem::getVisibility() const {
    return m_visibility;
}
void OAIHistoryItem::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIHistoryItem::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIHistoryItem::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIHistoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
