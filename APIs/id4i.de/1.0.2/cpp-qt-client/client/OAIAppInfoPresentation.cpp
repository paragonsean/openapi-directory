/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInfoPresentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInfoPresentation::OAIAppInfoPresentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInfoPresentation::OAIAppInfoPresentation() {
    this->initializeModel();
}

OAIAppInfoPresentation::~OAIAppInfoPresentation() {}

void OAIAppInfoPresentation::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_commit_time_isSet = false;
    m_commit_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_production_mode_isSet = false;
    m_production_mode_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAppInfoPresentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInfoPresentation::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_commit_time_isValid = ::OpenAPI::fromJsonValue(m_commit_time, json[QString("commitTime")]);
    m_commit_time_isSet = !json[QString("commitTime")].isNull() && m_commit_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_production_mode_isValid = ::OpenAPI::fromJsonValue(m_production_mode, json[QString("productionMode")]);
    m_production_mode_isSet = !json[QString("productionMode")].isNull() && m_production_mode_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAppInfoPresentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInfoPresentation::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_commit_time_isSet) {
        obj.insert(QString("commitTime"), ::OpenAPI::toJsonValue(m_commit_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_production_mode_isSet) {
        obj.insert(QString("productionMode"), ::OpenAPI::toJsonValue(m_production_mode));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIAppInfoPresentation::getBranch() const {
    return m_branch;
}
void OAIAppInfoPresentation::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIAppInfoPresentation::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIAppInfoPresentation::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIAppInfoPresentation::getCommitTime() const {
    return m_commit_time;
}
void OAIAppInfoPresentation::setCommitTime(const QString &commit_time) {
    m_commit_time = commit_time;
    m_commit_time_isSet = true;
}

bool OAIAppInfoPresentation::is_commit_time_Set() const{
    return m_commit_time_isSet;
}

bool OAIAppInfoPresentation::is_commit_time_Valid() const{
    return m_commit_time_isValid;
}

QString OAIAppInfoPresentation::getName() const {
    return m_name;
}
void OAIAppInfoPresentation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppInfoPresentation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppInfoPresentation::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAppInfoPresentation::isProductionMode() const {
    return m_production_mode;
}
void OAIAppInfoPresentation::setProductionMode(const bool &production_mode) {
    m_production_mode = production_mode;
    m_production_mode_isSet = true;
}

bool OAIAppInfoPresentation::is_production_mode_Set() const{
    return m_production_mode_isSet;
}

bool OAIAppInfoPresentation::is_production_mode_Valid() const{
    return m_production_mode_isValid;
}

QString OAIAppInfoPresentation::getRevision() const {
    return m_revision;
}
void OAIAppInfoPresentation::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIAppInfoPresentation::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIAppInfoPresentation::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIAppInfoPresentation::getVersion() const {
    return m_version;
}
void OAIAppInfoPresentation::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAppInfoPresentation::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAppInfoPresentation::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAppInfoPresentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInfoPresentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
