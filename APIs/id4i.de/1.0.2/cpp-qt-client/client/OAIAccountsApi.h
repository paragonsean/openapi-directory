/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountCredentials.h"
#include "OAIApiError.h"
#include "OAIChangeRoleRequest.h"
#include "OAICompleteUserRegistrationRequest.h"
#include "OAIOrganizationUserInvitationListRequest.h"
#include "OAIPaginatedResponseOfOrganization.h"
#include "OAIPaginatedResponseOfRole.h"
#include "OAIPaginatedResponseOfUserPresentation.h"
#include "OAIPaginatedResponseOfUserRoles.h"
#include "OAIPaginatedResponseOfstring.h"
#include "OAIPasswordResetRequest.h"
#include "OAIPasswordResetVerificationRequest.h"
#include "OAIRegistrationVerificationTokenPresentation.h"
#include "OAISimpleMessageResponse.h"
#include "OAIUserPresentation.h"
#include "OAIUserRegistrationRequest.h"
#include "OAIUserRegistrationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_change_role_request OAIChangeRoleRequest [required]
    */
    virtual void addUserRoles(const QString &organization_id, const QString &username, const OAIChangeRoleRequest &oai_change_role_request);

    /**
    * @param[in]  oai_complete_user_registration_request OAICompleteUserRegistrationRequest [required]
    */
    virtual void completeRegistration(const OAICompleteUserRegistrationRequest &oai_complete_user_registration_request);

    /**
    * @param[in]  username QString [required]
    */
    virtual void findUserByUsername(const QString &username);

    /**
    * @param[in]  username_prefix QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void findUsers(const ::OpenAPI::OptionalParam<QString> &username_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAllOrganizationRoles(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  role QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getOrganizationsOfUser(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getUserRoles(const QString &organization_id, const QString &username, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getUsersOfOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  oai_organization_user_invitation_list_request OAIOrganizationUserInvitationListRequest [required]
    */
    virtual void inviteUsers(const QString &organization_id, const OAIOrganizationUserInvitationListRequest &oai_organization_user_invitation_list_request);

    /**
    * @param[in]  privilege QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllRoles(const ::OpenAPI::OptionalParam<QString> &privilege = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_account_credentials OAIAccountCredentials [required]
    */
    virtual void login(const OAIAccountCredentials &oai_account_credentials);

    /**
    * @param[in]  oai_user_registration_request OAIUserRegistrationRequest [required]
    */
    virtual void registerUser(const OAIUserRegistrationRequest &oai_user_registration_request);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_change_role_request OAIChangeRoleRequest [required]
    */
    virtual void removeUserRoles(const QString &organization_id, const QString &username, const OAIChangeRoleRequest &oai_change_role_request);

    /**
    * @param[in]  oai_password_reset_request OAIPasswordResetRequest [required]
    */
    virtual void requestPasswordReset(const OAIPasswordResetRequest &oai_password_reset_request);

    /**
    * @param[in]  oai_password_reset_verification_request OAIPasswordResetVerificationRequest [required]
    */
    virtual void verifyPasswordReset(const OAIPasswordResetVerificationRequest &oai_password_reset_verification_request);

    /**
    * @param[in]  oai_registration_verification_token_presentation OAIRegistrationVerificationTokenPresentation [required]
    */
    virtual void verifyUserRegistration(const OAIRegistrationVerificationTokenPresentation &oai_registration_verification_token_presentation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addUserRolesCallback(OAIHttpRequestWorker *worker);
    void completeRegistrationCallback(OAIHttpRequestWorker *worker);
    void findUserByUsernameCallback(OAIHttpRequestWorker *worker);
    void findUsersCallback(OAIHttpRequestWorker *worker);
    void getAllOrganizationRolesCallback(OAIHttpRequestWorker *worker);
    void getOrganizationsOfUserCallback(OAIHttpRequestWorker *worker);
    void getUserRolesCallback(OAIHttpRequestWorker *worker);
    void getUsersOfOrganizationCallback(OAIHttpRequestWorker *worker);
    void inviteUsersCallback(OAIHttpRequestWorker *worker);
    void listAllRolesCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void registerUserCallback(OAIHttpRequestWorker *worker);
    void removeUserRolesCallback(OAIHttpRequestWorker *worker);
    void requestPasswordResetCallback(OAIHttpRequestWorker *worker);
    void verifyPasswordResetCallback(OAIHttpRequestWorker *worker);
    void verifyUserRegistrationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addUserRolesSignal();
    void completeRegistrationSignal();
    void findUserByUsernameSignal(OAIUserPresentation summary);
    void findUsersSignal(OAIPaginatedResponseOfUserPresentation summary);
    void getAllOrganizationRolesSignal(OAIPaginatedResponseOfUserRoles summary);
    void getOrganizationsOfUserSignal(OAIPaginatedResponseOfOrganization summary);
    void getUserRolesSignal(OAIPaginatedResponseOfstring summary);
    void getUsersOfOrganizationSignal(OAIPaginatedResponseOfUserPresentation summary);
    void inviteUsersSignal();
    void listAllRolesSignal(OAIPaginatedResponseOfRole summary);
    void loginSignal();
    void registerUserSignal(OAIUserRegistrationResponse summary);
    void removeUserRolesSignal();
    void requestPasswordResetSignal(OAISimpleMessageResponse summary);
    void verifyPasswordResetSignal(OAISimpleMessageResponse summary);
    void verifyUserRegistrationSignal();


    void addUserRolesSignalFull(OAIHttpRequestWorker *worker);
    void completeRegistrationSignalFull(OAIHttpRequestWorker *worker);
    void findUserByUsernameSignalFull(OAIHttpRequestWorker *worker, OAIUserPresentation summary);
    void findUsersSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfUserPresentation summary);
    void getAllOrganizationRolesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfUserRoles summary);
    void getOrganizationsOfUserSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfOrganization summary);
    void getUserRolesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfstring summary);
    void getUsersOfOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfUserPresentation summary);
    void inviteUsersSignalFull(OAIHttpRequestWorker *worker);
    void listAllRolesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfRole summary);
    void loginSignalFull(OAIHttpRequestWorker *worker);
    void registerUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRegistrationResponse summary);
    void removeUserRolesSignalFull(OAIHttpRequestWorker *worker);
    void requestPasswordResetSignalFull(OAIHttpRequestWorker *worker, OAISimpleMessageResponse summary);
    void verifyPasswordResetSignalFull(OAIHttpRequestWorker *worker, OAISimpleMessageResponse summary);
    void verifyUserRegistrationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addUserRolesSignalError() instead")
    void addUserRolesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addUserRolesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeRegistrationSignalError() instead")
    void completeRegistrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completeRegistrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByUsernameSignalError() instead")
    void findUserByUsernameSignalE(OAIUserPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByUsernameSignalError(OAIUserPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalError() instead")
    void findUsersSignalE(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalError(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrganizationRolesSignalError() instead")
    void getAllOrganizationRolesSignalE(OAIPaginatedResponseOfUserRoles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrganizationRolesSignalError(OAIPaginatedResponseOfUserRoles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsOfUserSignalError() instead")
    void getOrganizationsOfUserSignalE(OAIPaginatedResponseOfOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsOfUserSignalError(OAIPaginatedResponseOfOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRolesSignalError() instead")
    void getUserRolesSignalE(OAIPaginatedResponseOfstring summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRolesSignalError(OAIPaginatedResponseOfstring summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersOfOrganizationSignalError() instead")
    void getUsersOfOrganizationSignalE(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersOfOrganizationSignalError(OAIPaginatedResponseOfUserPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalError() instead")
    void inviteUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllRolesSignalError() instead")
    void listAllRolesSignalE(OAIPaginatedResponseOfRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllRolesSignalError(OAIPaginatedResponseOfRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalError() instead")
    void registerUserSignalE(OAIUserRegistrationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalError(OAIUserRegistrationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserRolesSignalError() instead")
    void removeUserRolesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserRolesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordResetSignalError() instead")
    void requestPasswordResetSignalE(OAISimpleMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordResetSignalError(OAISimpleMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyPasswordResetSignalError() instead")
    void verifyPasswordResetSignalE(OAISimpleMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyPasswordResetSignalError(OAISimpleMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyUserRegistrationSignalError() instead")
    void verifyUserRegistrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void verifyUserRegistrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addUserRolesSignalErrorFull() instead")
    void addUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeRegistrationSignalErrorFull() instead")
    void completeRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserByUsernameSignalErrorFull() instead")
    void findUserByUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserByUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUsersSignalErrorFull() instead")
    void findUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllOrganizationRolesSignalErrorFull() instead")
    void getAllOrganizationRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllOrganizationRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganizationsOfUserSignalErrorFull() instead")
    void getOrganizationsOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationsOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRolesSignalErrorFull() instead")
    void getUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersOfOrganizationSignalErrorFull() instead")
    void getUsersOfOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersOfOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalErrorFull() instead")
    void inviteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllRolesSignalErrorFull() instead")
    void listAllRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalErrorFull() instead")
    void registerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserRolesSignalErrorFull() instead")
    void removeUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordResetSignalErrorFull() instead")
    void requestPasswordResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyPasswordResetSignalErrorFull() instead")
    void verifyPasswordResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyPasswordResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyUserRegistrationSignalErrorFull() instead")
    void verifyUserRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyUserRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
