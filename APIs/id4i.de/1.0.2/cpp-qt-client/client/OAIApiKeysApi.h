/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiKeysApi_H
#define OAI_OAIApiKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddApiKeyPrivilegeRequest.h"
#include "OAIApiError.h"
#include "OAIApiKeyChangeRequest.h"
#include "OAIApiKeyCreationRequest.h"
#include "OAIApiKeyPresentation.h"
#include "OAIListOfId4ns.h"
#include "OAIPaginatedResponseOfApiKeyPresentation.h"
#include "OAIPaginatedResponseOfApiKeyPrivilege.h"
#include "OAIPaginatedResponseOfApiKeyPrivilegeInfo.h"
#include "OAIPaginatedResponseOfId4nPresentation.h"
#include "OAIRemoveApiKeyPrivilegeRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiKeysApi : public QObject {
    Q_OBJECT

public:
    OAIApiKeysApi(const int timeOut = 0);
    ~OAIApiKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  oai_add_api_key_privilege_request OAIAddApiKeyPrivilegeRequest [required]
    */
    virtual void addApiKeyPrivilege(const QString &key, const OAIAddApiKeyPrivilegeRequest &oai_add_api_key_privilege_request);

    /**
    * @param[in]  key QString [required]
    * @param[in]  privilege QString [required]
    * @param[in]  oai_list_of_id4ns OAIListOfId4ns [required]
    */
    virtual void addApiKeyPrivilegeForId4ns(const QString &key, const QString &privilege, const OAIListOfId4ns &oai_list_of_id4ns);

    /**
    * @param[in]  oai_api_key_creation_request OAIApiKeyCreationRequest [required]
    */
    virtual void createNewApiKey(const OAIApiKeyCreationRequest &oai_api_key_creation_request);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteApiKey(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void getApiKey(const QString &key);

    /**
    * @param[in]  id4n_concerning bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllApiKeyPrivileges(const ::OpenAPI::OptionalParam<bool> &id4n_concerning = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listAllApiKeysOfOrganization(const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listApiKeyPrivileges(const QString &key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  privilege QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void listId4ns(const QString &key, const QString &privilege, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  oai_remove_api_key_privilege_request OAIRemoveApiKeyPrivilegeRequest [required]
    */
    virtual void removeApiKeyPrivilege(const QString &key, const OAIRemoveApiKeyPrivilegeRequest &oai_remove_api_key_privilege_request);

    /**
    * @param[in]  key QString [required]
    * @param[in]  privilege QString [required]
    * @param[in]  oai_list_of_id4ns OAIListOfId4ns [required]
    */
    virtual void removeApiKeyPrivilegeForId4ns(const QString &key, const QString &privilege, const OAIListOfId4ns &oai_list_of_id4ns);

    /**
    * @param[in]  key QString [required]
    * @param[in]  oai_api_key_change_request OAIApiKeyChangeRequest [required]
    */
    virtual void updateApiKey(const QString &key, const OAIApiKeyChangeRequest &oai_api_key_change_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addApiKeyPrivilegeCallback(OAIHttpRequestWorker *worker);
    void addApiKeyPrivilegeForId4nsCallback(OAIHttpRequestWorker *worker);
    void createNewApiKeyCallback(OAIHttpRequestWorker *worker);
    void deleteApiKeyCallback(OAIHttpRequestWorker *worker);
    void getApiKeyCallback(OAIHttpRequestWorker *worker);
    void listAllApiKeyPrivilegesCallback(OAIHttpRequestWorker *worker);
    void listAllApiKeysOfOrganizationCallback(OAIHttpRequestWorker *worker);
    void listApiKeyPrivilegesCallback(OAIHttpRequestWorker *worker);
    void listId4nsCallback(OAIHttpRequestWorker *worker);
    void removeApiKeyPrivilegeCallback(OAIHttpRequestWorker *worker);
    void removeApiKeyPrivilegeForId4nsCallback(OAIHttpRequestWorker *worker);
    void updateApiKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addApiKeyPrivilegeSignal();
    void addApiKeyPrivilegeForId4nsSignal();
    void createNewApiKeySignal(OAIApiKeyPresentation summary);
    void deleteApiKeySignal();
    void getApiKeySignal(OAIApiKeyPresentation summary);
    void listAllApiKeyPrivilegesSignal(OAIPaginatedResponseOfApiKeyPrivilegeInfo summary);
    void listAllApiKeysOfOrganizationSignal(OAIPaginatedResponseOfApiKeyPresentation summary);
    void listApiKeyPrivilegesSignal(OAIPaginatedResponseOfApiKeyPrivilege summary);
    void listId4nsSignal(OAIPaginatedResponseOfId4nPresentation summary);
    void removeApiKeyPrivilegeSignal();
    void removeApiKeyPrivilegeForId4nsSignal();
    void updateApiKeySignal();


    void addApiKeyPrivilegeSignalFull(OAIHttpRequestWorker *worker);
    void addApiKeyPrivilegeForId4nsSignalFull(OAIHttpRequestWorker *worker);
    void createNewApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKeyPresentation summary);
    void deleteApiKeySignalFull(OAIHttpRequestWorker *worker);
    void getApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKeyPresentation summary);
    void listAllApiKeyPrivilegesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfApiKeyPrivilegeInfo summary);
    void listAllApiKeysOfOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfApiKeyPresentation summary);
    void listApiKeyPrivilegesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfApiKeyPrivilege summary);
    void listId4nsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfId4nPresentation summary);
    void removeApiKeyPrivilegeSignalFull(OAIHttpRequestWorker *worker);
    void removeApiKeyPrivilegeForId4nsSignalFull(OAIHttpRequestWorker *worker);
    void updateApiKeySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addApiKeyPrivilegeSignalError() instead")
    void addApiKeyPrivilegeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addApiKeyPrivilegeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addApiKeyPrivilegeForId4nsSignalError() instead")
    void addApiKeyPrivilegeForId4nsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addApiKeyPrivilegeForId4nsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewApiKeySignalError() instead")
    void createNewApiKeySignalE(OAIApiKeyPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewApiKeySignalError(OAIApiKeyPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalError() instead")
    void deleteApiKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeySignalError() instead")
    void getApiKeySignalE(OAIApiKeyPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeySignalError(OAIApiKeyPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllApiKeyPrivilegesSignalError() instead")
    void listAllApiKeyPrivilegesSignalE(OAIPaginatedResponseOfApiKeyPrivilegeInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllApiKeyPrivilegesSignalError(OAIPaginatedResponseOfApiKeyPrivilegeInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllApiKeysOfOrganizationSignalError() instead")
    void listAllApiKeysOfOrganizationSignalE(OAIPaginatedResponseOfApiKeyPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllApiKeysOfOrganizationSignalError(OAIPaginatedResponseOfApiKeyPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApiKeyPrivilegesSignalError() instead")
    void listApiKeyPrivilegesSignalE(OAIPaginatedResponseOfApiKeyPrivilege summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listApiKeyPrivilegesSignalError(OAIPaginatedResponseOfApiKeyPrivilege summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listId4nsSignalError() instead")
    void listId4nsSignalE(OAIPaginatedResponseOfId4nPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listId4nsSignalError(OAIPaginatedResponseOfId4nPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeApiKeyPrivilegeSignalError() instead")
    void removeApiKeyPrivilegeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeApiKeyPrivilegeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeApiKeyPrivilegeForId4nsSignalError() instead")
    void removeApiKeyPrivilegeForId4nsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeApiKeyPrivilegeForId4nsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeySignalError() instead")
    void updateApiKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addApiKeyPrivilegeSignalErrorFull() instead")
    void addApiKeyPrivilegeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiKeyPrivilegeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addApiKeyPrivilegeForId4nsSignalErrorFull() instead")
    void addApiKeyPrivilegeForId4nsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addApiKeyPrivilegeForId4nsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewApiKeySignalErrorFull() instead")
    void createNewApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalErrorFull() instead")
    void deleteApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeySignalErrorFull() instead")
    void getApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllApiKeyPrivilegesSignalErrorFull() instead")
    void listAllApiKeyPrivilegesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllApiKeyPrivilegesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllApiKeysOfOrganizationSignalErrorFull() instead")
    void listAllApiKeysOfOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllApiKeysOfOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApiKeyPrivilegesSignalErrorFull() instead")
    void listApiKeyPrivilegesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listApiKeyPrivilegesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listId4nsSignalErrorFull() instead")
    void listId4nsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listId4nsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeApiKeyPrivilegeSignalErrorFull() instead")
    void removeApiKeyPrivilegeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeApiKeyPrivilegeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeApiKeyPrivilegeForId4nsSignalErrorFull() instead")
    void removeApiKeyPrivilegeForId4nsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeApiKeyPrivilegeForId4nsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApiKeySignalErrorFull() instead")
    void updateApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
