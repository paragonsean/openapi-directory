/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIId4nProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIId4nProperties::OAIId4nProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIId4nProperties::OAIId4nProperties() {
    this->initializeModel();
}

OAIId4nProperties::~OAIId4nProperties() {}

void OAIId4nProperties::initializeModel() {

    m_id4n_isSet = false;
    m_id4n_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIId4nProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIId4nProperties::fromJsonObject(QJsonObject json) {

    m_id4n_isValid = ::OpenAPI::fromJsonValue(m_id4n, json[QString("id4n")]);
    m_id4n_isSet = !json[QString("id4n")].isNull() && m_id4n_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIId4nProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIId4nProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_id4n_isSet) {
        obj.insert(QString("id4n"), ::OpenAPI::toJsonValue(m_id4n));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIId4nProperties::getId4n() const {
    return m_id4n;
}
void OAIId4nProperties::setId4n(const QString &id4n) {
    m_id4n = id4n;
    m_id4n_isSet = true;
}

bool OAIId4nProperties::is_id4n_Set() const{
    return m_id4n_isSet;
}

bool OAIId4nProperties::is_id4n_Valid() const{
    return m_id4n_isValid;
}

QMap<QString, QString> OAIId4nProperties::getProperties() const {
    return m_properties;
}
void OAIId4nProperties::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIId4nProperties::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIId4nProperties::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIId4nProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id4n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIId4nProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
