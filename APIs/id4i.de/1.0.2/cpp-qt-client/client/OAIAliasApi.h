/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAliasApi_H
#define OAI_OAIAliasApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIGuidAlias.h"
#include "OAIPaginatedResponseOfGuid.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAliasApi : public QObject {
    Q_OBJECT

public:
    OAIAliasApi(const int timeOut = 0);
    ~OAIAliasApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  alias_type QString [required]
    * @param[in]  oai_guid_alias OAIGuidAlias [required]
    */
    virtual void addGuidAlias(const QString &id4n, const QString &alias_type, const OAIGuidAlias &oai_guid_alias);


    virtual void getGuidAliasTypes();

    /**
    * @param[in]  id4n QString [required]
    */
    virtual void getGuidAliases(const QString &id4n);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  alias_type QString [required]
    */
    virtual void removeGuidAlias(const QString &id4n, const QString &alias_type);

    /**
    * @param[in]  alias QString [required]
    * @param[in]  alias_type QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void searchByAlias(const QString &alias, const QString &alias_type, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGuidAliasCallback(OAIHttpRequestWorker *worker);
    void getGuidAliasTypesCallback(OAIHttpRequestWorker *worker);
    void getGuidAliasesCallback(OAIHttpRequestWorker *worker);
    void removeGuidAliasCallback(OAIHttpRequestWorker *worker);
    void searchByAliasCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGuidAliasSignal();
    void getGuidAliasTypesSignal(QList<QString> summary);
    void getGuidAliasesSignal(QMap<QString, QString> summary);
    void removeGuidAliasSignal();
    void searchByAliasSignal(OAIPaginatedResponseOfGuid summary);


    void addGuidAliasSignalFull(OAIHttpRequestWorker *worker);
    void getGuidAliasTypesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getGuidAliasesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void removeGuidAliasSignalFull(OAIHttpRequestWorker *worker);
    void searchByAliasSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuid summary);

    Q_DECL_DEPRECATED_X("Use addGuidAliasSignalError() instead")
    void addGuidAliasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addGuidAliasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasTypesSignalError() instead")
    void getGuidAliasTypesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasTypesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasesSignalError() instead")
    void getGuidAliasesSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasesSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGuidAliasSignalError() instead")
    void removeGuidAliasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGuidAliasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchByAliasSignalError() instead")
    void searchByAliasSignalE(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchByAliasSignalError(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGuidAliasSignalErrorFull() instead")
    void addGuidAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGuidAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasTypesSignalErrorFull() instead")
    void getGuidAliasTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasesSignalErrorFull() instead")
    void getGuidAliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGuidAliasSignalErrorFull() instead")
    void removeGuidAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGuidAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchByAliasSignalErrorFull() instead")
    void searchByAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchByAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
