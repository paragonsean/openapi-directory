/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisibilityUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisibilityUpdate::OAIVisibilityUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisibilityUpdate::OAIVisibilityUpdate() {
    this->initializeModel();
}

OAIVisibilityUpdate::~OAIVisibilityUpdate() {}

void OAIVisibilityUpdate::initializeModel() {

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_shared_with_organization_ids_isSet = false;
    m_shared_with_organization_ids_isValid = false;
}

void OAIVisibilityUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisibilityUpdate::fromJsonObject(QJsonObject json) {

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_shared_with_organization_ids_isValid = ::OpenAPI::fromJsonValue(m_shared_with_organization_ids, json[QString("sharedWithOrganizationIds")]);
    m_shared_with_organization_ids_isSet = !json[QString("sharedWithOrganizationIds")].isNull() && m_shared_with_organization_ids_isValid;
}

QString OAIVisibilityUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisibilityUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_shared_with_organization_ids.size() > 0) {
        obj.insert(QString("sharedWithOrganizationIds"), ::OpenAPI::toJsonValue(m_shared_with_organization_ids));
    }
    return obj;
}

bool OAIVisibilityUpdate::isRPublic() const {
    return m_r_public;
}
void OAIVisibilityUpdate::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIVisibilityUpdate::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIVisibilityUpdate::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QList<QString> OAIVisibilityUpdate::getSharedWithOrganizationIds() const {
    return m_shared_with_organization_ids;
}
void OAIVisibilityUpdate::setSharedWithOrganizationIds(const QList<QString> &shared_with_organization_ids) {
    m_shared_with_organization_ids = shared_with_organization_ids;
    m_shared_with_organization_ids_isSet = true;
}

bool OAIVisibilityUpdate::is_shared_with_organization_ids_Set() const{
    return m_shared_with_organization_ids_isSet;
}

bool OAIVisibilityUpdate::is_shared_with_organization_ids_Valid() const{
    return m_shared_with_organization_ids_isValid;
}

bool OAIVisibilityUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_with_organization_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisibilityUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
