/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferSendInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferSendInfo::OAITransferSendInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferSendInfo::OAITransferSendInfo() {
    this->initializeModel();
}

OAITransferSendInfo::~OAITransferSendInfo() {}

void OAITransferSendInfo::initializeModel() {

    m_holder_organization_id_isSet = false;
    m_holder_organization_id_isValid = false;

    m_keep_ownership_isSet = false;
    m_keep_ownership_isValid = false;

    m_open_for_claims_isSet = false;
    m_open_for_claims_isValid = false;

    m_owner_organization_id_isSet = false;
    m_owner_organization_id_isValid = false;

    m_recipient_organization_ids_isSet = false;
    m_recipient_organization_ids_isValid = false;
}

void OAITransferSendInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferSendInfo::fromJsonObject(QJsonObject json) {

    m_holder_organization_id_isValid = ::OpenAPI::fromJsonValue(m_holder_organization_id, json[QString("holderOrganizationId")]);
    m_holder_organization_id_isSet = !json[QString("holderOrganizationId")].isNull() && m_holder_organization_id_isValid;

    m_keep_ownership_isValid = ::OpenAPI::fromJsonValue(m_keep_ownership, json[QString("keepOwnership")]);
    m_keep_ownership_isSet = !json[QString("keepOwnership")].isNull() && m_keep_ownership_isValid;

    m_open_for_claims_isValid = ::OpenAPI::fromJsonValue(m_open_for_claims, json[QString("openForClaims")]);
    m_open_for_claims_isSet = !json[QString("openForClaims")].isNull() && m_open_for_claims_isValid;

    m_owner_organization_id_isValid = ::OpenAPI::fromJsonValue(m_owner_organization_id, json[QString("ownerOrganizationId")]);
    m_owner_organization_id_isSet = !json[QString("ownerOrganizationId")].isNull() && m_owner_organization_id_isValid;

    m_recipient_organization_ids_isValid = ::OpenAPI::fromJsonValue(m_recipient_organization_ids, json[QString("recipientOrganizationIds")]);
    m_recipient_organization_ids_isSet = !json[QString("recipientOrganizationIds")].isNull() && m_recipient_organization_ids_isValid;
}

QString OAITransferSendInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferSendInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_holder_organization_id_isSet) {
        obj.insert(QString("holderOrganizationId"), ::OpenAPI::toJsonValue(m_holder_organization_id));
    }
    if (m_keep_ownership_isSet) {
        obj.insert(QString("keepOwnership"), ::OpenAPI::toJsonValue(m_keep_ownership));
    }
    if (m_open_for_claims_isSet) {
        obj.insert(QString("openForClaims"), ::OpenAPI::toJsonValue(m_open_for_claims));
    }
    if (m_owner_organization_id_isSet) {
        obj.insert(QString("ownerOrganizationId"), ::OpenAPI::toJsonValue(m_owner_organization_id));
    }
    if (m_recipient_organization_ids.size() > 0) {
        obj.insert(QString("recipientOrganizationIds"), ::OpenAPI::toJsonValue(m_recipient_organization_ids));
    }
    return obj;
}

QString OAITransferSendInfo::getHolderOrganizationId() const {
    return m_holder_organization_id;
}
void OAITransferSendInfo::setHolderOrganizationId(const QString &holder_organization_id) {
    m_holder_organization_id = holder_organization_id;
    m_holder_organization_id_isSet = true;
}

bool OAITransferSendInfo::is_holder_organization_id_Set() const{
    return m_holder_organization_id_isSet;
}

bool OAITransferSendInfo::is_holder_organization_id_Valid() const{
    return m_holder_organization_id_isValid;
}

bool OAITransferSendInfo::isKeepOwnership() const {
    return m_keep_ownership;
}
void OAITransferSendInfo::setKeepOwnership(const bool &keep_ownership) {
    m_keep_ownership = keep_ownership;
    m_keep_ownership_isSet = true;
}

bool OAITransferSendInfo::is_keep_ownership_Set() const{
    return m_keep_ownership_isSet;
}

bool OAITransferSendInfo::is_keep_ownership_Valid() const{
    return m_keep_ownership_isValid;
}

bool OAITransferSendInfo::isOpenForClaims() const {
    return m_open_for_claims;
}
void OAITransferSendInfo::setOpenForClaims(const bool &open_for_claims) {
    m_open_for_claims = open_for_claims;
    m_open_for_claims_isSet = true;
}

bool OAITransferSendInfo::is_open_for_claims_Set() const{
    return m_open_for_claims_isSet;
}

bool OAITransferSendInfo::is_open_for_claims_Valid() const{
    return m_open_for_claims_isValid;
}

QString OAITransferSendInfo::getOwnerOrganizationId() const {
    return m_owner_organization_id;
}
void OAITransferSendInfo::setOwnerOrganizationId(const QString &owner_organization_id) {
    m_owner_organization_id = owner_organization_id;
    m_owner_organization_id_isSet = true;
}

bool OAITransferSendInfo::is_owner_organization_id_Set() const{
    return m_owner_organization_id_isSet;
}

bool OAITransferSendInfo::is_owner_organization_id_Valid() const{
    return m_owner_organization_id_isValid;
}

QList<QString> OAITransferSendInfo::getRecipientOrganizationIds() const {
    return m_recipient_organization_ids;
}
void OAITransferSendInfo::setRecipientOrganizationIds(const QList<QString> &recipient_organization_ids) {
    m_recipient_organization_ids = recipient_organization_ids;
    m_recipient_organization_ids_isSet = true;
}

bool OAITransferSendInfo::is_recipient_organization_ids_Set() const{
    return m_recipient_organization_ids_isSet;
}

bool OAITransferSendInfo::is_recipient_organization_ids_Valid() const{
    return m_recipient_organization_ids_isValid;
}

bool OAITransferSendInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_holder_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_for_claims_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_organization_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferSendInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keep_ownership_isValid && m_open_for_claims_isValid && m_recipient_organization_ids_isValid && true;
}

} // namespace OpenAPI
