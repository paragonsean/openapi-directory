/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGuidsApi_H
#define OAI_OAIGuidsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAICreateGuidRequest.h"
#include "OAIGuid.h"
#include "OAIGuidAlias.h"
#include "OAIId4nPresentation.h"
#include "OAIImportGS1CodesRequest.h"
#include "OAIListOfId4nProperties.h"
#include "OAIListOfId4ns.h"
#include "OAIObject.h"
#include "OAIPaginatedResponseOfGuid.h"
#include "OAIPaginatedResponseOfGuidCollection.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGuidsApi : public QObject {
    Q_OBJECT

public:
    OAIGuidsApi(const int timeOut = 0);
    ~OAIGuidsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  alias_type QString [required]
    * @param[in]  oai_guid_alias OAIGuidAlias [required]
    */
    virtual void addGuidAlias(const QString &id4n, const QString &alias_type, const OAIGuidAlias &oai_guid_alias);

    /**
    * @param[in]  oai_create_guid_request OAICreateGuidRequest [required]
    */
    virtual void createGuid(const OAICreateGuidRequest &oai_create_guid_request);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void deleteProperties(const QString &id4n, const QString &organization_id, const QList<QString> &request_body);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCollections(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getGuid(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4n QString [required]
    */
    virtual void getGuidAliases(const QString &id4n);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getGuidsWithoutCollection(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getId4n(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4ns QList<QString> [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getMultipleProperties(const QList<QString> &id4ns, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getProperties(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_import_gs1_codes_request OAIImportGS1CodesRequest [required]
    */
    virtual void importGS1Codes(const OAIImportGS1CodesRequest &oai_import_gs1_codes_request);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    */
    virtual void patchProperties(const QString &id4n, const QString &organization_id, const QMap<QString, QString> &request_body);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  alias_type QString [required]
    */
    virtual void removeGuidAlias(const QString &id4n, const QString &alias_type);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  oai_guid OAIGuid [required]
    */
    virtual void updateGuid(const QString &id4n, const OAIGuid &oai_guid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGuidAliasCallback(OAIHttpRequestWorker *worker);
    void createGuidCallback(OAIHttpRequestWorker *worker);
    void deletePropertiesCallback(OAIHttpRequestWorker *worker);
    void getCollectionsCallback(OAIHttpRequestWorker *worker);
    void getGuidCallback(OAIHttpRequestWorker *worker);
    void getGuidAliasesCallback(OAIHttpRequestWorker *worker);
    void getGuidsWithoutCollectionCallback(OAIHttpRequestWorker *worker);
    void getId4nCallback(OAIHttpRequestWorker *worker);
    void getMultiplePropertiesCallback(OAIHttpRequestWorker *worker);
    void getPropertiesCallback(OAIHttpRequestWorker *worker);
    void importGS1CodesCallback(OAIHttpRequestWorker *worker);
    void patchPropertiesCallback(OAIHttpRequestWorker *worker);
    void removeGuidAliasCallback(OAIHttpRequestWorker *worker);
    void updateGuidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGuidAliasSignal();
    void createGuidSignal(OAIListOfId4ns summary);
    void deletePropertiesSignal();
    void getCollectionsSignal(OAIPaginatedResponseOfGuidCollection summary);
    void getGuidSignal(OAIGuid summary);
    void getGuidAliasesSignal(QMap<QString, QString> summary);
    void getGuidsWithoutCollectionSignal(OAIPaginatedResponseOfGuid summary);
    void getId4nSignal(OAIId4nPresentation summary);
    void getMultiplePropertiesSignal(OAIListOfId4nProperties summary);
    void getPropertiesSignal(QMap<QString, QString> summary);
    void importGS1CodesSignal();
    void patchPropertiesSignal();
    void removeGuidAliasSignal();
    void updateGuidSignal(OAIObject summary);


    void addGuidAliasSignalFull(OAIHttpRequestWorker *worker);
    void createGuidSignalFull(OAIHttpRequestWorker *worker, OAIListOfId4ns summary);
    void deletePropertiesSignalFull(OAIHttpRequestWorker *worker);
    void getCollectionsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuidCollection summary);
    void getGuidSignalFull(OAIHttpRequestWorker *worker, OAIGuid summary);
    void getGuidAliasesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void getGuidsWithoutCollectionSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuid summary);
    void getId4nSignalFull(OAIHttpRequestWorker *worker, OAIId4nPresentation summary);
    void getMultiplePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIListOfId4nProperties summary);
    void getPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void importGS1CodesSignalFull(OAIHttpRequestWorker *worker);
    void patchPropertiesSignalFull(OAIHttpRequestWorker *worker);
    void removeGuidAliasSignalFull(OAIHttpRequestWorker *worker);
    void updateGuidSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use addGuidAliasSignalError() instead")
    void addGuidAliasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addGuidAliasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGuidSignalError() instead")
    void createGuidSignalE(OAIListOfId4ns summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGuidSignalError(OAIListOfId4ns summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertiesSignalError() instead")
    void deletePropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionsSignalError() instead")
    void getCollectionsSignalE(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionsSignalError(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidSignalError() instead")
    void getGuidSignalE(OAIGuid summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidSignalError(OAIGuid summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasesSignalError() instead")
    void getGuidAliasesSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasesSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidsWithoutCollectionSignalError() instead")
    void getGuidsWithoutCollectionSignalE(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidsWithoutCollectionSignalError(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getId4nSignalError() instead")
    void getId4nSignalE(OAIId4nPresentation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getId4nSignalError(OAIId4nPresentation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiplePropertiesSignalError() instead")
    void getMultiplePropertiesSignalE(OAIListOfId4nProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiplePropertiesSignalError(OAIListOfId4nProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalError() instead")
    void getPropertiesSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importGS1CodesSignalError() instead")
    void importGS1CodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void importGS1CodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPropertiesSignalError() instead")
    void patchPropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchPropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGuidAliasSignalError() instead")
    void removeGuidAliasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGuidAliasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGuidSignalError() instead")
    void updateGuidSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGuidSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGuidAliasSignalErrorFull() instead")
    void addGuidAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGuidAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGuidSignalErrorFull() instead")
    void createGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertiesSignalErrorFull() instead")
    void deletePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionsSignalErrorFull() instead")
    void getCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidSignalErrorFull() instead")
    void getGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidAliasesSignalErrorFull() instead")
    void getGuidAliasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidAliasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGuidsWithoutCollectionSignalErrorFull() instead")
    void getGuidsWithoutCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGuidsWithoutCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getId4nSignalErrorFull() instead")
    void getId4nSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getId4nSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiplePropertiesSignalErrorFull() instead")
    void getMultiplePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiplePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalErrorFull() instead")
    void getPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importGS1CodesSignalErrorFull() instead")
    void importGS1CodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importGS1CodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPropertiesSignalErrorFull() instead")
    void patchPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGuidAliasSignalErrorFull() instead")
    void removeGuidAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGuidAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGuidSignalErrorFull() instead")
    void updateGuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
