/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoute::OAIRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoute::OAIRoute() {
    this->initializeModel();
}

OAIRoute::~OAIRoute() {}

void OAIRoute::initializeModel() {

    m_params_isSet = false;
    m_params_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;
}

void OAIRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoute::fromJsonObject(QJsonObject json) {

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("validUntil")]);
    m_valid_until_isSet = !json[QString("validUntil")].isNull() && m_valid_until_isValid;
}

QString OAIRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("validUntil"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    return obj;
}

QMap<QString, QString> OAIRoute::getParams() const {
    return m_params;
}
void OAIRoute::setParams(const QMap<QString, QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIRoute::is_params_Set() const{
    return m_params_isSet;
}

bool OAIRoute::is_params_Valid() const{
    return m_params_isValid;
}

qint32 OAIRoute::getPriority() const {
    return m_priority;
}
void OAIRoute::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRoute::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRoute::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIRoute::isRPublic() const {
    return m_r_public;
}
void OAIRoute::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIRoute::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIRoute::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIRoute::getType() const {
    return m_type;
}
void OAIRoute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoute::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIRoute::getValidUntil() const {
    return m_valid_until;
}
void OAIRoute::setValidUntil(const qint64 &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAIRoute::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAIRoute::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

bool OAIRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_params_isValid && m_r_public_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
