/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuid::OAIGuid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuid::OAIGuid() {
    this->initializeModel();
}

OAIGuid::~OAIGuid() {}

void OAIGuid::initializeModel() {

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_holder_organization_id_isSet = false;
    m_holder_organization_id_isValid = false;

    m_id4n_isSet = false;
    m_id4n_isValid = false;

    m_owner_organization_id_isSet = false;
    m_owner_organization_id_isValid = false;

    m_physical_state_isSet = false;
    m_physical_state_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIGuid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuid::fromJsonObject(QJsonObject json) {

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_holder_organization_id_isValid = ::OpenAPI::fromJsonValue(m_holder_organization_id, json[QString("holderOrganizationId")]);
    m_holder_organization_id_isSet = !json[QString("holderOrganizationId")].isNull() && m_holder_organization_id_isValid;

    m_id4n_isValid = ::OpenAPI::fromJsonValue(m_id4n, json[QString("id4n")]);
    m_id4n_isSet = !json[QString("id4n")].isNull() && m_id4n_isValid;

    m_owner_organization_id_isValid = ::OpenAPI::fromJsonValue(m_owner_organization_id, json[QString("ownerOrganizationId")]);
    m_owner_organization_id_isSet = !json[QString("ownerOrganizationId")].isNull() && m_owner_organization_id_isValid;

    m_physical_state_isValid = ::OpenAPI::fromJsonValue(m_physical_state, json[QString("physicalState")]);
    m_physical_state_isSet = !json[QString("physicalState")].isNull() && m_physical_state_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIGuid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuid::asJsonObject() const {
    QJsonObject obj;
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_holder_organization_id_isSet) {
        obj.insert(QString("holderOrganizationId"), ::OpenAPI::toJsonValue(m_holder_organization_id));
    }
    if (m_id4n_isSet) {
        obj.insert(QString("id4n"), ::OpenAPI::toJsonValue(m_id4n));
    }
    if (m_owner_organization_id_isSet) {
        obj.insert(QString("ownerOrganizationId"), ::OpenAPI::toJsonValue(m_owner_organization_id));
    }
    if (m_physical_state_isSet) {
        obj.insert(QString("physicalState"), ::OpenAPI::toJsonValue(m_physical_state));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

qint64 OAIGuid::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIGuid::setCreatedTimestamp(const qint64 &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIGuid::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIGuid::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAIGuid::getHolderOrganizationId() const {
    return m_holder_organization_id;
}
void OAIGuid::setHolderOrganizationId(const QString &holder_organization_id) {
    m_holder_organization_id = holder_organization_id;
    m_holder_organization_id_isSet = true;
}

bool OAIGuid::is_holder_organization_id_Set() const{
    return m_holder_organization_id_isSet;
}

bool OAIGuid::is_holder_organization_id_Valid() const{
    return m_holder_organization_id_isValid;
}

QString OAIGuid::getId4n() const {
    return m_id4n;
}
void OAIGuid::setId4n(const QString &id4n) {
    m_id4n = id4n;
    m_id4n_isSet = true;
}

bool OAIGuid::is_id4n_Set() const{
    return m_id4n_isSet;
}

bool OAIGuid::is_id4n_Valid() const{
    return m_id4n_isValid;
}

QString OAIGuid::getOwnerOrganizationId() const {
    return m_owner_organization_id;
}
void OAIGuid::setOwnerOrganizationId(const QString &owner_organization_id) {
    m_owner_organization_id = owner_organization_id;
    m_owner_organization_id_isSet = true;
}

bool OAIGuid::is_owner_organization_id_Set() const{
    return m_owner_organization_id_isSet;
}

bool OAIGuid::is_owner_organization_id_Valid() const{
    return m_owner_organization_id_isValid;
}

QString OAIGuid::getPhysicalState() const {
    return m_physical_state;
}
void OAIGuid::setPhysicalState(const QString &physical_state) {
    m_physical_state = physical_state;
    m_physical_state_isSet = true;
}

bool OAIGuid::is_physical_state_Set() const{
    return m_physical_state_isSet;
}

bool OAIGuid::is_physical_state_Valid() const{
    return m_physical_state_isValid;
}

QMap<QString, QString> OAIGuid::getProperties() const {
    return m_properties;
}
void OAIGuid::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGuid::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGuid::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIGuid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id4n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuid::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
