/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyPrivilege.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyPrivilege::OAIApiKeyPrivilege(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyPrivilege::OAIApiKeyPrivilege() {
    this->initializeModel();
}

OAIApiKeyPrivilege::~OAIApiKeyPrivilege() {}

void OAIApiKeyPrivilege::initializeModel() {

    m_id4n_associated_isSet = false;
    m_id4n_associated_isValid = false;

    m_privilege_isSet = false;
    m_privilege_isValid = false;
}

void OAIApiKeyPrivilege::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyPrivilege::fromJsonObject(QJsonObject json) {

    m_id4n_associated_isValid = ::OpenAPI::fromJsonValue(m_id4n_associated, json[QString("id4nAssociated")]);
    m_id4n_associated_isSet = !json[QString("id4nAssociated")].isNull() && m_id4n_associated_isValid;

    m_privilege_isValid = ::OpenAPI::fromJsonValue(m_privilege, json[QString("privilege")]);
    m_privilege_isSet = !json[QString("privilege")].isNull() && m_privilege_isValid;
}

QString OAIApiKeyPrivilege::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyPrivilege::asJsonObject() const {
    QJsonObject obj;
    if (m_id4n_associated_isSet) {
        obj.insert(QString("id4nAssociated"), ::OpenAPI::toJsonValue(m_id4n_associated));
    }
    if (m_privilege_isSet) {
        obj.insert(QString("privilege"), ::OpenAPI::toJsonValue(m_privilege));
    }
    return obj;
}

bool OAIApiKeyPrivilege::isId4nAssociated() const {
    return m_id4n_associated;
}
void OAIApiKeyPrivilege::setId4nAssociated(const bool &id4n_associated) {
    m_id4n_associated = id4n_associated;
    m_id4n_associated_isSet = true;
}

bool OAIApiKeyPrivilege::is_id4n_associated_Set() const{
    return m_id4n_associated_isSet;
}

bool OAIApiKeyPrivilege::is_id4n_associated_Valid() const{
    return m_id4n_associated_isValid;
}

QString OAIApiKeyPrivilege::getPrivilege() const {
    return m_privilege;
}
void OAIApiKeyPrivilege::setPrivilege(const QString &privilege) {
    m_privilege = privilege;
    m_privilege_isSet = true;
}

bool OAIApiKeyPrivilege::is_privilege_Set() const{
    return m_privilege_isSet;
}

bool OAIApiKeyPrivilege::is_privilege_Valid() const{
    return m_privilege_isValid;
}

bool OAIApiKeyPrivilege::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id4n_associated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privilege_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyPrivilege::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id4n_associated_isValid && m_privilege_isValid && true;
}

} // namespace OpenAPI
