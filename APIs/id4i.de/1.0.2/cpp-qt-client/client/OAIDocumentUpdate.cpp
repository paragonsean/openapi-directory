/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentUpdate::OAIDocumentUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentUpdate::OAIDocumentUpdate() {
    this->initializeModel();
}

OAIDocumentUpdate::~OAIDocumentUpdate() {}

void OAIDocumentUpdate::initializeModel() {

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDocumentUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentUpdate::fromJsonObject(QJsonObject json) {

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIDocumentUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIDocumentUpdate::getFilename() const {
    return m_filename;
}
void OAIDocumentUpdate::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIDocumentUpdate::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIDocumentUpdate::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIDocumentUpdate::getMimeType() const {
    return m_mime_type;
}
void OAIDocumentUpdate::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIDocumentUpdate::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIDocumentUpdate::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

OAIVisibilityUpdate OAIDocumentUpdate::getVisibility() const {
    return m_visibility;
}
void OAIDocumentUpdate::setVisibility(const OAIVisibilityUpdate &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDocumentUpdate::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDocumentUpdate::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDocumentUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
