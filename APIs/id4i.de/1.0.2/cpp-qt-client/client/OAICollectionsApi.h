/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionsApi_H
#define OAI_OAICollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAICreateCollectionRequest.h"
#include "OAIGuidCollection.h"
#include "OAIId4n.h"
#include "OAIListOfId4nProperties.h"
#include "OAIListOfId4ns.h"
#include "OAIObject.h"
#include "OAIPaginatedResponseOfGuid.h"
#include "OAIPaginatedResponseOfGuidCollection.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionsApi : public QObject {
    Q_OBJECT

public:
    OAICollectionsApi(const int timeOut = 0);
    ~OAICollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  oai_list_of_id4ns OAIListOfId4ns [required]
    */
    virtual void addElementsToCollection(const QString &id4n, const OAIListOfId4ns &oai_list_of_id4ns);

    /**
    * @param[in]  oai_create_collection_request OAICreateCollectionRequest [required]
    */
    virtual void createCollection(const OAICreateCollectionRequest &oai_create_collection_request);

    /**
    * @param[in]  id4n QString [required]
    */
    virtual void deleteCollection(const QString &id4n);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void deleteProperties(const QString &id4n, const QString &organization_id, const QList<QString> &request_body);

    /**
    * @param[in]  id4n QString [required]
    */
    virtual void findCollection(const QString &id4n);

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  label_prefix QString [optional]
    * @param[in]  property QList<QString> [optional]
    */
    virtual void getAllCollectionsOfOrganization(const QString &organization_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &property = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id4ns QList<QString> [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getMultipleProperties(const QList<QString> &id4ns, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [optional]
    */
    virtual void getProperties(const QString &id4n, const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  organization_id QString [optional]
    */
    virtual void listElementsOfCollection(const QString &id4n, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &organization_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    */
    virtual void patchProperties(const QString &id4n, const QString &organization_id, const QMap<QString, QString> &request_body);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  oai_list_of_id4ns OAIListOfId4ns [required]
    */
    virtual void removeElementsFromCollection(const QString &id4n, const OAIListOfId4ns &oai_list_of_id4ns);

    /**
    * @param[in]  id4n QString [required]
    * @param[in]  oai_guid_collection OAIGuidCollection [required]
    */
    virtual void updateCollection(const QString &id4n, const OAIGuidCollection &oai_guid_collection);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addElementsToCollectionCallback(OAIHttpRequestWorker *worker);
    void createCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteCollectionCallback(OAIHttpRequestWorker *worker);
    void deletePropertiesCallback(OAIHttpRequestWorker *worker);
    void findCollectionCallback(OAIHttpRequestWorker *worker);
    void getAllCollectionsOfOrganizationCallback(OAIHttpRequestWorker *worker);
    void getMultiplePropertiesCallback(OAIHttpRequestWorker *worker);
    void getPropertiesCallback(OAIHttpRequestWorker *worker);
    void listElementsOfCollectionCallback(OAIHttpRequestWorker *worker);
    void patchPropertiesCallback(OAIHttpRequestWorker *worker);
    void removeElementsFromCollectionCallback(OAIHttpRequestWorker *worker);
    void updateCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addElementsToCollectionSignal();
    void createCollectionSignal(OAIId4n summary);
    void deleteCollectionSignal();
    void deletePropertiesSignal();
    void findCollectionSignal(OAIGuidCollection summary);
    void getAllCollectionsOfOrganizationSignal(OAIPaginatedResponseOfGuidCollection summary);
    void getMultiplePropertiesSignal(OAIListOfId4nProperties summary);
    void getPropertiesSignal(QMap<QString, QString> summary);
    void listElementsOfCollectionSignal(OAIPaginatedResponseOfGuid summary);
    void patchPropertiesSignal();
    void removeElementsFromCollectionSignal();
    void updateCollectionSignal(OAIObject summary);


    void addElementsToCollectionSignalFull(OAIHttpRequestWorker *worker);
    void createCollectionSignalFull(OAIHttpRequestWorker *worker, OAIId4n summary);
    void deleteCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deletePropertiesSignalFull(OAIHttpRequestWorker *worker);
    void findCollectionSignalFull(OAIHttpRequestWorker *worker, OAIGuidCollection summary);
    void getAllCollectionsOfOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuidCollection summary);
    void getMultiplePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIListOfId4nProperties summary);
    void getPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void listElementsOfCollectionSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResponseOfGuid summary);
    void patchPropertiesSignalFull(OAIHttpRequestWorker *worker);
    void removeElementsFromCollectionSignalFull(OAIHttpRequestWorker *worker);
    void updateCollectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use addElementsToCollectionSignalError() instead")
    void addElementsToCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addElementsToCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalError() instead")
    void createCollectionSignalE(OAIId4n summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalError(OAIId4n summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalError() instead")
    void deleteCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertiesSignalError() instead")
    void deletePropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCollectionSignalError() instead")
    void findCollectionSignalE(OAIGuidCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCollectionSignalError(OAIGuidCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsOfOrganizationSignalError() instead")
    void getAllCollectionsOfOrganizationSignalE(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsOfOrganizationSignalError(OAIPaginatedResponseOfGuidCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiplePropertiesSignalError() instead")
    void getMultiplePropertiesSignalE(OAIListOfId4nProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiplePropertiesSignalError(OAIListOfId4nProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalError() instead")
    void getPropertiesSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElementsOfCollectionSignalError() instead")
    void listElementsOfCollectionSignalE(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listElementsOfCollectionSignalError(OAIPaginatedResponseOfGuid summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPropertiesSignalError() instead")
    void patchPropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchPropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeElementsFromCollectionSignalError() instead")
    void removeElementsFromCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeElementsFromCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionSignalError() instead")
    void updateCollectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addElementsToCollectionSignalErrorFull() instead")
    void addElementsToCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addElementsToCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalErrorFull() instead")
    void createCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalErrorFull() instead")
    void deleteCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePropertiesSignalErrorFull() instead")
    void deletePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCollectionSignalErrorFull() instead")
    void findCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllCollectionsOfOrganizationSignalErrorFull() instead")
    void getAllCollectionsOfOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllCollectionsOfOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiplePropertiesSignalErrorFull() instead")
    void getMultiplePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiplePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPropertiesSignalErrorFull() instead")
    void getPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listElementsOfCollectionSignalErrorFull() instead")
    void listElementsOfCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listElementsOfCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPropertiesSignalErrorFull() instead")
    void patchPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeElementsFromCollectionSignalErrorFull() instead")
    void removeElementsFromCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeElementsFromCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionSignalErrorFull() instead")
    void updateCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
