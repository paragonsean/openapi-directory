/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillingPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillingPosition::OAIBillingPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillingPosition::OAIBillingPosition() {
    this->initializeModel();
}

OAIBillingPosition::~OAIBillingPosition() {}

void OAIBillingPosition::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_single_price_isSet = false;
    m_single_price_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIBillingPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillingPosition::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_single_price_isValid = ::OpenAPI::fromJsonValue(m_single_price, json[QString("singlePrice")]);
    m_single_price_isSet = !json[QString("singlePrice")].isNull() && m_single_price_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIBillingPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillingPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_single_price_isSet) {
        obj.insert(QString("singlePrice"), ::OpenAPI::toJsonValue(m_single_price));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

qint64 OAIBillingPosition::getAmount() const {
    return m_amount;
}
void OAIBillingPosition::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBillingPosition::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBillingPosition::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIBillingPosition::getCount() const {
    return m_count;
}
void OAIBillingPosition::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBillingPosition::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBillingPosition::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIBillingPosition::getDescription() const {
    return m_description;
}
void OAIBillingPosition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBillingPosition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBillingPosition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBillingPosition::getService() const {
    return m_service;
}
void OAIBillingPosition::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIBillingPosition::is_service_Set() const{
    return m_service_isSet;
}

bool OAIBillingPosition::is_service_Valid() const{
    return m_service_isValid;
}

double OAIBillingPosition::getSinglePrice() const {
    return m_single_price;
}
void OAIBillingPosition::setSinglePrice(const double &single_price) {
    m_single_price = single_price;
    m_single_price_isSet = true;
}

bool OAIBillingPosition::is_single_price_Set() const{
    return m_single_price_isSet;
}

bool OAIBillingPosition::is_single_price_Valid() const{
    return m_single_price_isValid;
}

double OAIBillingPosition::getSum() const {
    return m_sum;
}
void OAIBillingPosition::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIBillingPosition::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIBillingPosition::is_sum_Valid() const{
    return m_sum_isValid;
}

QString OAIBillingPosition::getUnit() const {
    return m_unit;
}
void OAIBillingPosition::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIBillingPosition::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIBillingPosition::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIBillingPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillingPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_count_isValid && m_description_isValid && m_service_isValid && m_single_price_isValid && m_sum_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
