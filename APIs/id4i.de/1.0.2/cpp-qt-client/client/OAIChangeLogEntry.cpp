/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeLogEntry::OAIChangeLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeLogEntry::OAIChangeLogEntry() {
    this->initializeModel();
}

OAIChangeLogEntry::~OAIChangeLogEntry() {}

void OAIChangeLogEntry::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_properties_isSet = false;
    m_message_properties_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIChangeLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeLogEntry::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_properties_isValid = ::OpenAPI::fromJsonValue(m_message_properties, json[QString("messageProperties")]);
    m_message_properties_isSet = !json[QString("messageProperties")].isNull() && m_message_properties_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIChangeLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_properties.size() > 0) {
        obj.insert(QString("messageProperties"), ::OpenAPI::toJsonValue(m_message_properties));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIChangeLogEntry::getId() const {
    return m_id;
}
void OAIChangeLogEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChangeLogEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChangeLogEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChangeLogEntry::getMessage() const {
    return m_message;
}
void OAIChangeLogEntry::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIChangeLogEntry::is_message_Set() const{
    return m_message_isSet;
}

bool OAIChangeLogEntry::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, OAIObject> OAIChangeLogEntry::getMessageProperties() const {
    return m_message_properties;
}
void OAIChangeLogEntry::setMessageProperties(const QMap<QString, OAIObject> &message_properties) {
    m_message_properties = message_properties;
    m_message_properties_isSet = true;
}

bool OAIChangeLogEntry::is_message_properties_Set() const{
    return m_message_properties_isSet;
}

bool OAIChangeLogEntry::is_message_properties_Valid() const{
    return m_message_properties_isValid;
}

qint64 OAIChangeLogEntry::getTimestamp() const {
    return m_timestamp;
}
void OAIChangeLogEntry::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIChangeLogEntry::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIChangeLogEntry::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIChangeLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
