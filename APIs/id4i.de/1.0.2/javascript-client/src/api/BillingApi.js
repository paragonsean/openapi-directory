/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import BillingPosition from '../model/BillingPosition';
import ServiceCosts from '../model/ServiceCosts';

/**
* Billing service.
* @module api/BillingApi
* @version 1.0.2
*/
export default class BillingApi {

    /**
    * Constructs a new BillingApi. 
    * @alias module:api/BillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPositionsForOrganization operation.
     * @callback module:api/BillingApi~getPositionsForOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BillingPosition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing positions for a given organization
     * @param {String} organizationId The organization to compute the billing information for
     * @param {Object} opts Optional parameters
     * @param {Date} [fromDate] Billing start date
     * @param {Date} [toDate] Billing end date
     * @param {module:api/BillingApi~getPositionsForOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BillingPosition>}
     */
    getPositionsForOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getPositionsForOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [BillingPosition];
      return this.apiClient.callApi(
        '/api/v1/billing/{organizationId}/positions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSumForOrganization operation.
     * @callback module:api/BillingApi~getSumForOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCosts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing amount of services for a given organization
     * @param {String} organizationId The organization to compute the billing information for
     * @param {Object} opts Optional parameters
     * @param {Date} [fromDate] Billing start date
     * @param {Date} [toDate] Billing end date
     * @param {module:api/BillingApi~getSumForOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCosts}
     */
    getSumForOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getSumForOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ServiceCosts;
      return this.apiClient.callApi(
        '/api/v1/billing/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
