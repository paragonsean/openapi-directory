/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import QueuePresentation from '../model/QueuePresentation';
import QueueUpdateRequest from '../model/QueueUpdateRequest';
import SendCustomMessage from '../model/SendCustomMessage';

/**
* Messaging service.
* @module api/MessagingApi
* @version 1.0.2
*/
export default class MessagingApi {

    /**
    * Constructs a new MessagingApi. 
    * @alias module:api/MessagingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the enqueueCustomMessage operation.
     * @callback module:api/MessagingApi~enqueueCustomMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a custom message
     * Enqueue a custom organisation message with custom data.
     * @param {String} organizationId The organisation namespace
     * @param {module:model/SendCustomMessage} sendCustomMessage request
     * @param {module:api/MessagingApi~enqueueCustomMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enqueueCustomMessage(organizationId, sendCustomMessage, callback) {
      let postBody = sendCustomMessage;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling enqueueCustomMessage");
      }
      // verify the required parameter 'sendCustomMessage' is set
      if (sendCustomMessage === undefined || sendCustomMessage === null) {
        throw new Error("Missing the required parameter 'sendCustomMessage' when calling enqueueCustomMessage");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/messaging/enqueueCustomMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultQueue operation.
     * @callback module:api/MessagingApi~getDefaultQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueuePresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} organizationId organizationId
     * @param {module:api/MessagingApi~getDefaultQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueuePresentation}
     */
    getDefaultQueue(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDefaultQueue");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QueuePresentation;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/messaging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDefaultQueue operation.
     * @callback module:api/MessagingApi~patchDefaultQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} organizationId organizationId
     * @param {module:model/QueueUpdateRequest} queueUpdateRequest request
     * @param {module:api/MessagingApi~patchDefaultQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchDefaultQueue(organizationId, queueUpdateRequest, callback) {
      let postBody = queueUpdateRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling patchDefaultQueue");
      }
      // verify the required parameter 'queueUpdateRequest' is set
      if (queueUpdateRequest === undefined || queueUpdateRequest === null) {
        throw new Error("Missing the required parameter 'queueUpdateRequest' when calling patchDefaultQueue");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/messaging', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
