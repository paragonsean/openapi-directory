/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Document from '../model/Document';
import Organization from '../model/Organization';
import PaginatedResponseOfDocument from '../model/PaginatedResponseOfDocument';
import PaginatedResponseOfHistoryItem from '../model/PaginatedResponseOfHistoryItem';
import Route from '../model/Route';
import WhoIsResponse from '../model/WhoIsResponse';

/**
* PublicServices service.
* @module api/PublicServicesApi
* @version 1.0.2
*/
export default class PublicServicesApi {

    /**
    * Constructs a new PublicServicesApi. 
    * @alias module:api/PublicServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPublicDocument operation.
     * @callback module:api/PublicServicesApi~getPublicDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a public document (meta-data only, no content)
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/PublicServicesApi~getPublicDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getPublicDocument(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getPublicDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getPublicDocument");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getPublicDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoutes operation.
     * @callback module:api/PublicServicesApi~getRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Route>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all public routes for a GUID
     * @param {String} id4n id4n
     * @param {String} type type
     * @param {Object} opts Optional parameters
     * @param {Boolean} [interpolate = true)] interpolate
     * @param {module:api/PublicServicesApi~getRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Route>}
     */
    getRoutes(id4n, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getRoutes");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getRoutes");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'type': type,
        'interpolate': opts['interpolate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Route];
      return this.apiClient.callApi(
        '/api/v1/public/routes/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the go operation.
     * @callback module:api/PublicServicesApi~goCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forward
     * Forwarding to the designated route defined in the routing,
     * @param {String} guid guid
     * @param {module:api/PublicServicesApi~goCallback} callback The callback function, accepting three arguments: error, data, response
     */
    go(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling go");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/go/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllPublicDocuments operation.
     * @callback module:api/PublicServicesApi~listAllPublicDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public documents
     * Listing all public documents of an id4n
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] organizationId
     * @param {String} [owner] Filter by owner organization
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/PublicServicesApi~listAllPublicDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfDocument}
     */
    listAllPublicDocuments(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listAllPublicDocuments");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId'],
        'owner': opts['owner'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfDocument;
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPublicHistory operation.
     * @callback module:api/PublicServicesApi~listPublicHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfHistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the public history of the given GUID
     * Only contains public history items
     * @param {String} id4n GUID to retrieve the history for
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/PublicServicesApi~listPublicHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfHistoryItem}
     */
    listPublicHistory(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listPublicHistory");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfHistoryItem;
      return this.apiClient.callApi(
        '/api/v1/public/history/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readOrganizationInfo operation.
     * @callback module:api/PublicServicesApi~readOrganizationInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read public organization information
     * @param {String} organizationId Organization ID
     * @param {module:api/PublicServicesApi~readOrganizationInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    readOrganizationInfo(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling readOrganizationInfo");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/v1/public/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readPublicDocument operation.
     * @callback module:api/PublicServicesApi~readPublicDocumentCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read public document contents
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/PublicServicesApi~readPublicDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    readPublicDocument(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling readPublicDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling readPublicDocument");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling readPublicDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveImageUsingGET_0 operation.
     * @callback module:api/PublicServicesApi~resolveImageUsingGET_0Callback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve image
     * @param {String} imageID The id of the image to be resolved.
     * @param {module:api/PublicServicesApi~resolveImageUsingGET_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    resolveImageUsingGET_0(imageID, callback) {
      let postBody = null;
      // verify the required parameter 'imageID' is set
      if (imageID === undefined || imageID === null) {
        throw new Error("Missing the required parameter 'imageID' when calling resolveImageUsingGET_0");
      }

      let pathParams = {
        'imageID': imageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/public/image/{imageID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveWhoIsEntry operation.
     * @callback module:api/PublicServicesApi~resolveWhoIsEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhoIsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve owner of id4n
     * @param {String} id4n id4n
     * @param {module:api/PublicServicesApi~resolveWhoIsEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhoIsResponse}
     */
    resolveWhoIsEntry(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling resolveWhoIsEntry");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WhoIsResponse;
      return this.apiClient.callApi(
        '/whois/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
