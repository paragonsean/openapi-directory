/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import HistoryItem from '../model/HistoryItem';
import HistoryItemUpdate from '../model/HistoryItemUpdate';
import PaginatedResponseOfHistoryItem from '../model/PaginatedResponseOfHistoryItem';
import Visibility from '../model/Visibility';

/**
* History service.
* @module api/HistoryApi
* @version 1.0.2
*/
export default class HistoryApi {

    /**
    * Constructs a new HistoryApi. 
    * @alias module:api/HistoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addItem operation.
     * @callback module:api/HistoryApi~addItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add history item
     * Add a new history item
     * @param {String} id4n GUID to retrieve the history for
     * @param {module:model/HistoryItem} historyItem The history item to publish
     * @param {module:api/HistoryApi~addItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addItem(id4n, historyItem, callback) {
      let postBody = historyItem;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addItem");
      }
      // verify the required parameter 'historyItem' is set
      if (historyItem === undefined || historyItem === null) {
        throw new Error("Missing the required parameter 'historyItem' when calling addItem");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filteredList operation.
     * @callback module:api/HistoryApi~filteredListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfHistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history
     * Lists the history of a GUID
     * @param {String} id4n GUID to retrieve the history for
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includePrivate = true)] Also return private history entries
     * @param {String} [organization] Show only entries created by one of the given organizations. This parameter can be used multiple times.
     * @param {Array.<module:model/String>} [type] Show only entries matching one of the given history item types. This parameter can be used multiple times.
     * @param {Array.<String>} [qualifier] Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times.
     * @param {Date} [fromDate] From date time as UTC Date-Time format
     * @param {Date} [toDate] To date time as UTC Date-Time format
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/HistoryApi~filteredListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfHistoryItem}
     */
    filteredList(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling filteredList");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'includePrivate': opts['includePrivate'],
        'organization': opts['organization'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'qualifier': this.apiClient.buildCollectionParam(opts['qualifier'], 'multi'),
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfHistoryItem;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/HistoryApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfHistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED - List history
     * DEPRECATED - please use filteredList with organization parameter to achieve the same functionality
     * @param {String} id4n GUID to retrieve the history for
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includePrivate = true)] Also return private history entries
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/HistoryApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfHistoryItem}
     */
    list(id4n, organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling list");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling list");
      }

      let pathParams = {
        'id4n': id4n,
        'organizationId': organizationId
      };
      let queryParams = {
        'includePrivate': opts['includePrivate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfHistoryItem;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveItem operation.
     * @callback module:api/HistoryApi~retrieveItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get history item
     * @param {String} id4n GUID to retrieve the history for
     * @param {String} organizationId organizationId
     * @param {Number} sequenceId sequenceId
     * @param {module:api/HistoryApi~retrieveItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryItem}
     */
    retrieveItem(id4n, organizationId, sequenceId, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling retrieveItem");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling retrieveItem");
      }
      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling retrieveItem");
      }

      let pathParams = {
        'id4n': id4n,
        'organizationId': organizationId,
        'sequenceId': sequenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = HistoryItem;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}/{organizationId}/{sequenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItem operation.
     * @callback module:api/HistoryApi~updateItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update history item
     * @param {String} id4n GUID to retrieve the history for
     * @param {String} organizationId organizationId
     * @param {Number} sequenceId sequenceId
     * @param {module:model/HistoryItemUpdate} historyItemUpdate update
     * @param {module:api/HistoryApi~updateItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryItem}
     */
    updateItem(id4n, organizationId, sequenceId, historyItemUpdate, callback) {
      let postBody = historyItemUpdate;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateItem");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateItem");
      }
      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling updateItem");
      }
      // verify the required parameter 'historyItemUpdate' is set
      if (historyItemUpdate === undefined || historyItemUpdate === null) {
        throw new Error("Missing the required parameter 'historyItemUpdate' when calling updateItem");
      }

      let pathParams = {
        'id4n': id4n,
        'organizationId': organizationId,
        'sequenceId': sequenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = HistoryItem;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}/{organizationId}/{sequenceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateItemVisibility operation.
     * @callback module:api/HistoryApi~updateItemVisibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set history item visibility
     * @param {String} id4n GUID to retrieve the history for
     * @param {String} organizationId organizationId
     * @param {Number} sequenceId sequenceId
     * @param {module:model/Visibility} visibility History item visibility restrictions
     * @param {module:api/HistoryApi~updateItemVisibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoryItem}
     */
    updateItemVisibility(id4n, organizationId, sequenceId, visibility, callback) {
      let postBody = visibility;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateItemVisibility");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateItemVisibility");
      }
      // verify the required parameter 'sequenceId' is set
      if (sequenceId === undefined || sequenceId === null) {
        throw new Error("Missing the required parameter 'sequenceId' when calling updateItemVisibility");
      }
      // verify the required parameter 'visibility' is set
      if (visibility === undefined || visibility === null) {
        throw new Error("Missing the required parameter 'visibility' when calling updateItemVisibility");
      }

      let pathParams = {
        'id4n': id4n,
        'organizationId': organizationId,
        'sequenceId': sequenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = HistoryItem;
      return this.apiClient.callApi(
        '/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
