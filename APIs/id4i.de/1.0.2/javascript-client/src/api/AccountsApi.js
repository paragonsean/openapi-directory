/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCredentials from '../model/AccountCredentials';
import ApiError from '../model/ApiError';
import ChangeRoleRequest from '../model/ChangeRoleRequest';
import CompleteUserRegistrationRequest from '../model/CompleteUserRegistrationRequest';
import OrganizationUserInvitationListRequest from '../model/OrganizationUserInvitationListRequest';
import PaginatedResponseOfOrganization from '../model/PaginatedResponseOfOrganization';
import PaginatedResponseOfRole from '../model/PaginatedResponseOfRole';
import PaginatedResponseOfUserPresentation from '../model/PaginatedResponseOfUserPresentation';
import PaginatedResponseOfUserRoles from '../model/PaginatedResponseOfUserRoles';
import PaginatedResponseOfstring from '../model/PaginatedResponseOfstring';
import PasswordResetRequest from '../model/PasswordResetRequest';
import PasswordResetVerificationRequest from '../model/PasswordResetVerificationRequest';
import RegistrationVerificationTokenPresentation from '../model/RegistrationVerificationTokenPresentation';
import SimpleMessageResponse from '../model/SimpleMessageResponse';
import UserPresentation from '../model/UserPresentation';
import UserRegistrationRequest from '../model/UserRegistrationRequest';
import UserRegistrationResponse from '../model/UserRegistrationResponse';

/**
* Accounts service.
* @module api/AccountsApi
* @version 1.0.2
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserRoles operation.
     * @callback module:api/AccountsApi~addUserRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add role(s) to user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/AccountsApi~addUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addUserRoles(organizationId, username, changeRoleRequest, callback) {
      let postBody = changeRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addUserRoles");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addUserRoles");
      }
      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling addUserRoles");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeRegistration operation.
     * @callback module:api/AccountsApi~completeRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete registration
     * Completing a registration e.g. for invited users. Finish registration with a username and a password.
     * @param {module:model/CompleteUserRegistrationRequest} completeUserRegistrationRequest Contains the verification token, the username and the initial password.
     * @param {module:api/AccountsApi~completeRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeRegistration(completeUserRegistrationRequest, callback) {
      let postBody = completeUserRegistrationRequest;
      // verify the required parameter 'completeUserRegistrationRequest' is set
      if (completeUserRegistrationRequest === undefined || completeUserRegistrationRequest === null) {
        throw new Error("Missing the required parameter 'completeUserRegistrationRequest' when calling completeRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/registration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserByUsername operation.
     * @callback module:api/AccountsApi~findUserByUsernameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by username
     * @param {String} username username
     * @param {module:api/AccountsApi~findUserByUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPresentation}
     */
    findUserByUsername(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling findUserByUsername");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = UserPresentation;
      return this.apiClient.callApi(
        '/api/v1/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsers operation.
     * @callback module:api/AccountsApi~findUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfUserPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users
     * @param {Object} opts Optional parameters
     * @param {String} [usernamePrefix] 
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~findUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfUserPresentation}
     */
    findUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'usernamePrefix': opts['usernamePrefix'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfUserPresentation;
      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrganizationRoles operation.
     * @callback module:api/AccountsApi~getAllOrganizationRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfUserRoles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users and their roles
     * Listing users and their roles in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~getAllOrganizationRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfUserRoles}
     */
    getAllOrganizationRoles(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllOrganizationRoles");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfUserRoles;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsOfUser operation.
     * @callback module:api/AccountsApi~getOrganizationsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfOrganization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve organizations of user
     * @param {Object} opts Optional parameters
     * @param {String} [role] role
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~getOrganizationsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfOrganization}
     */
    getOrganizationsOfUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'role': opts['role'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfOrganization;
      return this.apiClient.callApi(
        '/api/v1/user/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRoles operation.
     * @callback module:api/AccountsApi~getUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user roles by username
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~getUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfstring}
     */
    getUserRoles(organizationId, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUserRoles");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserRoles");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfstring;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersOfOrganization operation.
     * @callback module:api/AccountsApi~getUsersOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfUserPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users in organization
     * Finding users in the specified organization in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~getUsersOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfUserPresentation}
     */
    getUsersOfOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUsersOfOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfUserPresentation;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteUsers operation.
     * @callback module:api/AccountsApi~inviteUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Users
     * @param {String} organizationId The namespace of the organization where users should be invited
     * @param {module:model/OrganizationUserInvitationListRequest} organizationUserInvitationListRequest invitationList
     * @param {module:api/AccountsApi~inviteUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    inviteUsers(organizationId, organizationUserInvitationListRequest, callback) {
      let postBody = organizationUserInvitationListRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling inviteUsers");
      }
      // verify the required parameter 'organizationUserInvitationListRequest' is set
      if (organizationUserInvitationListRequest === undefined || organizationUserInvitationListRequest === null) {
        throw new Error("Missing the required parameter 'organizationUserInvitationListRequest' when calling inviteUsers");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllRoles operation.
     * @callback module:api/AccountsApi~listAllRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles
     * Listing of roles.
     * @param {Object} opts Optional parameters
     * @param {String} [privilege] If specified the roles will be filtered containing that privilege.
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AccountsApi~listAllRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfRole}
     */
    listAllRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'privilege': opts['privilege'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfRole;
      return this.apiClient.callApi(
        '/api/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AccountsApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ID4i API Login
     * @param {module:model/AccountCredentials} accountCredentials 
     * @param {module:api/AccountsApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(accountCredentials, callback) {
      let postBody = accountCredentials;
      // verify the required parameter 'accountCredentials' is set
      if (accountCredentials === undefined || accountCredentials === null) {
        throw new Error("Missing the required parameter 'accountCredentials' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/AccountsApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRegistrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register user
     * Registering a new user.
     * @param {module:model/UserRegistrationRequest} userRegistrationRequest The user information about the new created user.
     * @param {module:api/AccountsApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRegistrationResponse}
     */
    registerUser(userRegistrationRequest, callback) {
      let postBody = userRegistrationRequest;
      // verify the required parameter 'userRegistrationRequest' is set
      if (userRegistrationRequest === undefined || userRegistrationRequest === null) {
        throw new Error("Missing the required parameter 'userRegistrationRequest' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = UserRegistrationResponse;
      return this.apiClient.callApi(
        '/account/registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserRoles operation.
     * @callback module:api/AccountsApi~removeUserRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove role(s) from user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/AccountsApi~removeUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserRoles(organizationId, username, changeRoleRequest, callback) {
      let postBody = changeRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeUserRoles");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling removeUserRoles");
      }
      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling removeUserRoles");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordReset operation.
     * @callback module:api/AccountsApi~requestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password reset
     * Requesting a reset for a new password. 
     * @param {module:model/PasswordResetRequest} passwordResetRequest Contains the required information to request a new password.
     * @param {module:api/AccountsApi~requestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleMessageResponse}
     */
    requestPasswordReset(passwordResetRequest, callback) {
      let postBody = passwordResetRequest;
      // verify the required parameter 'passwordResetRequest' is set
      if (passwordResetRequest === undefined || passwordResetRequest === null) {
        throw new Error("Missing the required parameter 'passwordResetRequest' when calling requestPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SimpleMessageResponse;
      return this.apiClient.callApi(
        '/account/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPasswordReset operation.
     * @callback module:api/AccountsApi~verifyPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify password reset
     * Setting a new password and verifying the request to set the password.
     * @param {module:model/PasswordResetVerificationRequest} passwordResetVerificationRequest Contains the new password and the verification token to set the new password.
     * @param {module:api/AccountsApi~verifyPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleMessageResponse}
     */
    verifyPasswordReset(passwordResetVerificationRequest, callback) {
      let postBody = passwordResetVerificationRequest;
      // verify the required parameter 'passwordResetVerificationRequest' is set
      if (passwordResetVerificationRequest === undefined || passwordResetVerificationRequest === null) {
        throw new Error("Missing the required parameter 'passwordResetVerificationRequest' when calling verifyPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SimpleMessageResponse;
      return this.apiClient.callApi(
        '/account/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyUserRegistration operation.
     * @callback module:api/AccountsApi~verifyUserRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify registration
     * Verifies a new user registration.
     * @param {module:model/RegistrationVerificationTokenPresentation} registrationVerificationTokenPresentation The token for user verification.
     * @param {module:api/AccountsApi~verifyUserRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verifyUserRegistration(registrationVerificationTokenPresentation, callback) {
      let postBody = registrationVerificationTokenPresentation;
      // verify the required parameter 'registrationVerificationTokenPresentation' is set
      if (registrationVerificationTokenPresentation === undefined || registrationVerificationTokenPresentation === null) {
        throw new Error("Missing the required parameter 'registrationVerificationTokenPresentation' when calling verifyUserRegistration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
