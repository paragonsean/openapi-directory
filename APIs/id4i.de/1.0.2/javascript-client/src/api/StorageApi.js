/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Document from '../model/Document';
import DocumentUpdate from '../model/DocumentUpdate';
import PaginatedResponseOfDocument from '../model/PaginatedResponseOfDocument';

/**
* Storage service.
* @module api/StorageApi
* @version 1.0.2
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback module:api/StorageApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an document for an id4n
     * The documents' mime type is suggested on octet-stream data. Otherwise the specified content mime type is used.
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {File} content content
     * @param {module:api/StorageApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    createDocument(organizationId, id4n, content, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling createDocument");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling createDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'content': content
      };

      let authNames = ['Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback module:api/StorageApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/StorageApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocument(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteDocument");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling deleteDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}/{fileName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/StorageApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document (meta-data only, no content)
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/StorageApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getDocument(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getDocument");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicDocument_0 operation.
     * @callback module:api/StorageApi~getPublicDocument_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a public document (meta-data only, no content)
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/StorageApi~getPublicDocument_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getPublicDocument_0(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getPublicDocument_0");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getPublicDocument_0");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getPublicDocument_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllDocuments operation.
     * @callback module:api/StorageApi~listAllDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List documents
     * Listing all documents of an id4n
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [owner] Filter by owner organization
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/StorageApi~listAllDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfDocument}
     */
    listAllDocuments(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listAllDocuments");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'owner': opts['owner'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfDocument;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllPublicDocuments_0 operation.
     * @callback module:api/StorageApi~listAllPublicDocuments_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public documents
     * Listing all public documents of an id4n
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] organizationId
     * @param {String} [owner] Filter by owner organization
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/StorageApi~listAllPublicDocuments_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfDocument}
     */
    listAllPublicDocuments_0(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listAllPublicDocuments_0");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId'],
        'owner': opts['owner'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfDocument;
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDocuments operation.
     * @callback module:api/StorageApi~listDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization specific documents
     * Listing documents of an id4n seen by a specified organization
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [owner] Filter by owner organization
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/StorageApi~listDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfDocument}
     */
    listDocuments(organizationId, id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listDocuments");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listDocuments");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n
      };
      let queryParams = {
        'owner': opts['owner'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfDocument;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDocument operation.
     * @callback module:api/StorageApi~putDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put an document for an id4n
     * Creating or overwriting an existing document 
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {File} content content
     * @param {module:api/StorageApi~putDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    putDocument(organizationId, id4n, content, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling putDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling putDocument");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling putDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'content': content
      };

      let authNames = ['Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readDocument operation.
     * @callback module:api/StorageApi~readDocumentCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read document contents
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/StorageApi~readDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    readDocument(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling readDocument");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling readDocument");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling readDocument");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readFromMicrostorage operation.
     * @callback module:api/StorageApi~readFromMicrostorageCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read data from microstorage
     * @param {String} organization organization
     * @param {String} id4n id4n
     * @param {module:api/StorageApi~readFromMicrostorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    readFromMicrostorage(organization, id4n, callback) {
      let postBody = null;
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling readFromMicrostorage");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling readFromMicrostorage");
      }

      let pathParams = {
        'organization': organization,
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/microstorage/{id4n}/{organization}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readPublicDocument_0 operation.
     * @callback module:api/StorageApi~readPublicDocument_0Callback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read public document contents
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:api/StorageApi~readPublicDocument_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    readPublicDocument_0(organizationId, id4n, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling readPublicDocument_0");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling readPublicDocument_0");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling readPublicDocument_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocumentMetadata operation.
     * @callback module:api/StorageApi~updateDocumentMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document
     * @param {String} organizationId organizationId
     * @param {String} id4n id4n
     * @param {String} fileName fileName
     * @param {module:model/DocumentUpdate} documentUpdate document
     * @param {module:api/StorageApi~updateDocumentMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    updateDocumentMetadata(organizationId, id4n, fileName, documentUpdate, callback) {
      let postBody = documentUpdate;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateDocumentMetadata");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateDocumentMetadata");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling updateDocumentMetadata");
      }
      // verify the required parameter 'documentUpdate' is set
      if (documentUpdate === undefined || documentUpdate === null) {
        throw new Error("Missing the required parameter 'documentUpdate' when calling updateDocumentMetadata");
      }

      let pathParams = {
        'organizationId': organizationId,
        'id4n': id4n,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeToMicrostorage operation.
     * @callback module:api/StorageApi~writeToMicrostorageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Write data to microstorage
     * @param {String} organization organization
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] Content-Type
     * @param {Number} [contentLength] Content-Length
     * @param {Blob} [body] body
     * @param {module:api/StorageApi~writeToMicrostorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    writeToMicrostorage(organization, id4n, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling writeToMicrostorage");
      }
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling writeToMicrostorage");
      }

      let pathParams = {
        'organization': organization,
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Content-Length': opts['contentLength']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/microstorage/{id4n}/{organization}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
