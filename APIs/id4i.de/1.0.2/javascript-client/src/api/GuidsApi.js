/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CreateGuidRequest from '../model/CreateGuidRequest';
import Guid from '../model/Guid';
import GuidAlias from '../model/GuidAlias';
import Id4nPresentation from '../model/Id4nPresentation';
import ImportGS1CodesRequest from '../model/ImportGS1CodesRequest';
import ListOfId4nProperties from '../model/ListOfId4nProperties';
import ListOfId4ns from '../model/ListOfId4ns';
import PaginatedResponseOfGuid from '../model/PaginatedResponseOfGuid';
import PaginatedResponseOfGuidCollection from '../model/PaginatedResponseOfGuidCollection';

/**
* Guids service.
* @module api/GuidsApi
* @version 1.0.2
*/
export default class GuidsApi {

    /**
    * Constructs a new GuidsApi. 
    * @alias module:api/GuidsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGuidAlias_0 operation.
     * @callback module:api/GuidsApi~addGuidAlias_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add alias for GUID or Collection
     * Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:model/String} aliasType Alias type, see the corresponding API model
     * @param {module:model/GuidAlias} guidAlias The alias to add or update
     * @param {module:api/GuidsApi~addGuidAlias_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addGuidAlias_0(id4n, aliasType, guidAlias, callback) {
      let postBody = guidAlias;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addGuidAlias_0");
      }
      // verify the required parameter 'aliasType' is set
      if (aliasType === undefined || aliasType === null) {
        throw new Error("Missing the required parameter 'aliasType' when calling addGuidAlias_0");
      }
      // verify the required parameter 'guidAlias' is set
      if (guidAlias === undefined || guidAlias === null) {
        throw new Error("Missing the required parameter 'guidAlias' when calling addGuidAlias_0");
      }

      let pathParams = {
        'id4n': id4n,
        'aliasType': aliasType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias/{aliasType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGuid operation.
     * @callback module:api/GuidsApi~createGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfId4ns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GUID(s)
     * Creating one or more GUIDs with a specified length.
     * @param {module:model/CreateGuidRequest} createGuidRequest GUID creation model
     * @param {module:api/GuidsApi~createGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfId4ns}
     */
    createGuid(createGuidRequest, callback) {
      let postBody = createGuidRequest;
      // verify the required parameter 'createGuidRequest' is set
      if (createGuidRequest === undefined || createGuidRequest === null) {
        throw new Error("Missing the required parameter 'createGuidRequest' when calling createGuid");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ListOfId4ns;
      return this.apiClient.callApi(
        '/api/v1/guids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProperties_0 operation.
     * @callback module:api/GuidsApi~deleteProperties_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ID4n properties
     * Partial deletion of id4n properties. If the property does not exist, it will be ignored.
     * @param {String} id4n The id4n
     * @param {String} organizationId The organization namespace to work on while deleting the properties.
     * @param {Array.<String>} requestBody A set of property keys to delete.
     * @param {module:api/GuidsApi~deleteProperties_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProperties_0(id4n, organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteProperties_0");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteProperties_0");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deleteProperties_0");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollections operation.
     * @callback module:api/GuidsApi~getCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve collections of an ID
     * Retrieving all owned or holding collections the specified id4n is assigned to.
     * @param {String} id4n The ID which the collections should contain
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization holding the collections.
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/GuidsApi~getCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuidCollection}
     */
    getCollections(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getCollections");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuidCollection;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuid operation.
     * @callback module:api/GuidsApi~getGuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve GUID information
     * @param {String} id4n The GUID number
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace to resolve.
     * @param {module:api/GuidsApi~getGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guid}
     */
    getGuid(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getGuid");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Guid;
      return this.apiClient.callApi(
        '/api/v1/guids/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuidAliases_0 operation.
     * @callback module:api/GuidsApi~getGuidAliases_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all aliases for the given GUID or Collection.
     * Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:api/GuidsApi~getGuidAliases_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGuidAliases_0(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getGuidAliases_0");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuidsWithoutCollection operation.
     * @callback module:api/GuidsApi~getGuidsWithoutCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve GUIDs not in any collection
     * @param {String} organizationId The namespace of the organization to search GUIDs for
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/GuidsApi~getGuidsWithoutCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuid}
     */
    getGuidsWithoutCollection(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getGuidsWithoutCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'organizationId': organizationId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuid;
      return this.apiClient.callApi(
        '/api/v1/guids/withoutCollection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getId4n operation.
     * @callback module:api/GuidsApi~getId4nCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id4nPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ID4n information
     * Retrieving basic information about an ID like the type and the creation time.
     * @param {String} id4n The ID to resolve to
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace to resolve.
     * @param {module:api/GuidsApi~getId4nCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id4nPresentation}
     */
    getId4n(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getId4n");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Id4nPresentation;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleProperties_0 operation.
     * @callback module:api/GuidsApi~getMultipleProperties_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfId4nProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple ID4n properties
     * Get a list of ID4n properties for the specified ID4ns.
     * @param {Array.<String>} id4ns The list of ID4ns to resolve.
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace.
     * @param {module:api/GuidsApi~getMultipleProperties_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfId4nProperties}
     */
    getMultipleProperties_0(id4ns, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4ns' is set
      if (id4ns === undefined || id4ns === null) {
        throw new Error("Missing the required parameter 'id4ns' when calling getMultipleProperties_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'id4ns': this.apiClient.buildCollectionParam(id4ns, 'multi'),
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ListOfId4nProperties;
      return this.apiClient.callApi(
        '/api/v1/multiple/id4ns/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProperties_0 operation.
     * @callback module:api/GuidsApi~getProperties_0Callback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ID4n properties
     * List all properties of an id4n.
     * @param {String} id4n The id4n
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace.
     * @param {module:api/GuidsApi~getProperties_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getProperties_0(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getProperties_0");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importGS1Codes operation.
     * @callback module:api/GuidsApi~importGS1CodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import GS1/MAPP codes
     * Importing GS1/MAPP codes that contain unique components.
     * @param {module:model/ImportGS1CodesRequest} importGS1CodesRequest The information how the MAPP codes should be imported and the list of MAPP codes
     * @param {module:api/GuidsApi~importGS1CodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importGS1Codes(importGS1CodesRequest, callback) {
      let postBody = importGS1CodesRequest;
      // verify the required parameter 'importGS1CodesRequest' is set
      if (importGS1CodesRequest === undefined || importGS1CodesRequest === null) {
        throw new Error("Missing the required parameter 'importGS1CodesRequest' when calling importGS1Codes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/import/gs1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProperties_0 operation.
     * @callback module:api/GuidsApi~patchProperties_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch ID4n properties
     * Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
     * @param {String} id4n The id4n
     * @param {String} organizationId The organization namespace to work on while patching the properties.
     * @param {Object.<String, {String: String}>} requestBody The properties to update.
     * @param {module:api/GuidsApi~patchProperties_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    patchProperties_0(id4n, organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling patchProperties_0");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling patchProperties_0");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling patchProperties_0");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGuidAlias_0 operation.
     * @callback module:api/GuidsApi~removeGuidAlias_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove aliases from GUID or Collection
     * Remove the alias of the given type
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:model/String} aliasType Alias type, see the corresponding API model
     * @param {module:api/GuidsApi~removeGuidAlias_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGuidAlias_0(id4n, aliasType, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling removeGuidAlias_0");
      }
      // verify the required parameter 'aliasType' is set
      if (aliasType === undefined || aliasType === null) {
        throw new Error("Missing the required parameter 'aliasType' when calling removeGuidAlias_0");
      }

      let pathParams = {
        'id4n': id4n,
        'aliasType': aliasType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias/{aliasType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGuid operation.
     * @callback module:api/GuidsApi~updateGuidCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change GUID information.
     * Allows ownership transfer.
     * @param {String} id4n The GUID number
     * @param {module:model/Guid} guid request
     * @param {module:api/GuidsApi~updateGuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateGuid(id4n, guid, callback) {
      let postBody = guid;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateGuid");
      }
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling updateGuid");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/guids/{id4n}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
