/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Route from '../model/Route';
import RoutingFile from '../model/RoutingFile';
import RoutingFileRequest from '../model/RoutingFileRequest';

/**
* Routing service.
* @module api/RoutingApi
* @version 1.0.2
*/
export default class RoutingApi {

    /**
    * Constructs a new RoutingApi. 
    * @alias module:api/RoutingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllRoutes operation.
     * @callback module:api/RoutingApi~getAllRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Route>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all routes of a GUID (or ID4N)
     * @param {String} id4n id4n
     * @param {String} type The type of route you want to have
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] organizationId
     * @param {Boolean} [interpolate = true)] interpolate
     * @param {module:api/RoutingApi~getAllRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Route>}
     */
    getAllRoutes(id4n, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getAllRoutes");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAllRoutes");
      }

      let pathParams = {
        'id4n': id4n,
        'type': type
      };
      let queryParams = {
        'organizationId': opts['organizationId'],
        'interpolate': opts['interpolate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Route];
      return this.apiClient.callApi(
        '/api/v1/routingfiles/{id4n}/routes/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoute operation.
     * @callback module:api/RoutingApi~getRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve current route of a GUID (or ID4N)
     * @param {String} id4n id4n
     * @param {String} type The type of route you want to have
     * @param {Object} opts Optional parameters
     * @param {Boolean} [privateRoutes = true)] privateRoutes
     * @param {Boolean} [publicRoutes = true)] publicRoutes
     * @param {Boolean} [interpolate = true)] interpolate
     * @param {module:api/RoutingApi~getRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    getRoute(id4n, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getRoute");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getRoute");
      }

      let pathParams = {
        'id4n': id4n,
        'type': type
      };
      let queryParams = {
        'privateRoutes': opts['privateRoutes'],
        'publicRoutes': opts['publicRoutes'],
        'interpolate': opts['interpolate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/api/v1/routingfiles/{id4n}/route/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoutingFile operation.
     * @callback module:api/RoutingApi~getRoutingFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutingFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve routing file
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] organizationId
     * @param {module:api/RoutingApi~getRoutingFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutingFile}
     */
    getRoutingFile(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getRoutingFile");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RoutingFile;
      return this.apiClient.callApi(
        '/api/v1/routingfiles/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingFile operation.
     * @callback module:api/RoutingApi~updateRoutingFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store routing file
     * @param {String} id4n id4n
     * @param {module:model/RoutingFileRequest} routingFileRequest rfr
     * @param {module:api/RoutingApi~updateRoutingFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoutingFile(id4n, routingFileRequest, callback) {
      let postBody = routingFileRequest;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateRoutingFile");
      }
      // verify the required parameter 'routingFileRequest' is set
      if (routingFileRequest === undefined || routingFileRequest === null) {
        throw new Error("Missing the required parameter 'routingFileRequest' when calling updateRoutingFile");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/routingfiles/{id4n}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
