/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import TransferReceiveInfo from '../model/TransferReceiveInfo';
import TransferSendInfo from '../model/TransferSendInfo';

/**
* Transfer service.
* @module api/TransferApi
* @version 1.0.2
*/
export default class TransferApi {

    /**
    * Constructs a new TransferApi. 
    * @alias module:api/TransferApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSendInfo operation.
     * @callback module:api/TransferApi~getSendInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSendInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show transfer preparation information
     * @param {String} id4n The ID4N to retrieve information about
     * @param {module:api/TransferApi~getSendInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSendInfo}
     */
    getSendInfo(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getSendInfo");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = TransferSendInfo;
      return this.apiClient.callApi(
        '/api/v1/transfers/{id4n}/sendInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepare operation.
     * @callback module:api/TransferApi~prepareCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare an object for transfer
     * @param {String} id4n The ID4N to prepare for transfer
     * @param {module:model/TransferSendInfo} transferSendInfo Transfer preparation status
     * @param {module:api/TransferApi~prepareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    prepare(id4n, transferSendInfo, callback) {
      let postBody = transferSendInfo;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling prepare");
      }
      // verify the required parameter 'transferSendInfo' is set
      if (transferSendInfo === undefined || transferSendInfo === null) {
        throw new Error("Missing the required parameter 'transferSendInfo' when calling prepare");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/transfers/{id4n}/sendInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the receive operation.
     * @callback module:api/TransferApi~receiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
     * Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo
     * @param {String} id4n This ID4N identifies the object to take hold of
     * @param {module:model/TransferReceiveInfo} transferReceiveInfo Required information to receive an id4n object
     * @param {module:api/TransferApi~receiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    receive(id4n, transferReceiveInfo, callback) {
      let postBody = transferReceiveInfo;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling receive");
      }
      // verify the required parameter 'transferReceiveInfo' is set
      if (transferReceiveInfo === undefined || transferReceiveInfo === null) {
        throw new Error("Missing the required parameter 'transferReceiveInfo' when calling receive");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/transfers/{id4n}/receiveInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
