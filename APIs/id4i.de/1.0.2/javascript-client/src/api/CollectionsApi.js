/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CreateCollectionRequest from '../model/CreateCollectionRequest';
import GuidCollection from '../model/GuidCollection';
import Id4n from '../model/Id4n';
import ListOfId4nProperties from '../model/ListOfId4nProperties';
import ListOfId4ns from '../model/ListOfId4ns';
import PaginatedResponseOfGuid from '../model/PaginatedResponseOfGuid';
import PaginatedResponseOfGuidCollection from '../model/PaginatedResponseOfGuidCollection';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0.2
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addElementsToCollection operation.
     * @callback module:api/CollectionsApi~addElementsToCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add elements to collection
     * @param {String} id4n id4n
     * @param {module:model/ListOfId4ns} listOfId4ns listOfGuids
     * @param {module:api/CollectionsApi~addElementsToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addElementsToCollection(id4n, listOfId4ns, callback) {
      let postBody = listOfId4ns;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addElementsToCollection");
      }
      // verify the required parameter 'listOfId4ns' is set
      if (listOfId4ns === undefined || listOfId4ns === null) {
        throw new Error("Missing the required parameter 'listOfId4ns' when calling addElementsToCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/CollectionsApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id4n} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection
     * @param {module:model/CreateCollectionRequest} createCollectionRequest createInfo
     * @param {module:api/CollectionsApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id4n}
     */
    createCollection(createCollectionRequest, callback) {
      let postBody = createCollectionRequest;
      // verify the required parameter 'createCollectionRequest' is set
      if (createCollectionRequest === undefined || createCollectionRequest === null) {
        throw new Error("Missing the required parameter 'createCollectionRequest' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Id4n;
      return this.apiClient.callApi(
        '/api/v1/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CollectionsApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * @param {String} id4n id4n
     * @param {module:api/CollectionsApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProperties operation.
     * @callback module:api/CollectionsApi~deletePropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ID4n properties
     * Partial deletion of id4n properties. If the property does not exist, it will be ignored.
     * @param {String} id4n The id4n
     * @param {String} organizationId The organization namespace to work on while deleting the properties.
     * @param {Array.<String>} requestBody A set of property keys to delete.
     * @param {module:api/CollectionsApi~deletePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProperties(id4n, organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteProperties");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteProperties");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deleteProperties");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCollection operation.
     * @callback module:api/CollectionsApi~findCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find collection
     * @param {String} id4n id4n
     * @param {module:api/CollectionsApi~findCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuidCollection}
     */
    findCollection(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling findCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GuidCollection;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionsOfOrganization operation.
     * @callback module:api/CollectionsApi~getAllCollectionsOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collections of organization
     * Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. `com.yourcompany.orderId.eq=1234`  
     * @param {String} organizationId The namespace of the organization
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:model/String} [type] Filter by this type
     * @param {String} [label] Filter by this label
     * @param {String} [labelPrefix] Filter by this label prefix
     * @param {Array.<String>} [property] List of i4dn property filter. e.g. \"com.myorga.state:IN:waiting|processing\" or \"com.myorga.orderId:EQ:SAP001\"
     * @param {module:api/CollectionsApi~getAllCollectionsOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuidCollection}
     */
    getAllCollectionsOfOrganization(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllCollectionsOfOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'label': opts['label'],
        'labelPrefix': opts['labelPrefix'],
        'property': this.apiClient.buildCollectionParam(opts['property'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuidCollection;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMultipleProperties operation.
     * @callback module:api/CollectionsApi~getMultiplePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfId4nProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple ID4n properties
     * Get a list of ID4n properties for the specified ID4ns.
     * @param {Array.<String>} id4ns The list of ID4ns to resolve.
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace.
     * @param {module:api/CollectionsApi~getMultiplePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfId4nProperties}
     */
    getMultipleProperties(id4ns, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4ns' is set
      if (id4ns === undefined || id4ns === null) {
        throw new Error("Missing the required parameter 'id4ns' when calling getMultipleProperties");
      }

      let pathParams = {
      };
      let queryParams = {
        'id4ns': this.apiClient.buildCollectionParam(id4ns, 'multi'),
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ListOfId4nProperties;
      return this.apiClient.callApi(
        '/api/v1/multiple/id4ns/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProperties operation.
     * @callback module:api/CollectionsApi~getPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve ID4n properties
     * List all properties of an id4n.
     * @param {String} id4n The id4n
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The organization namespace.
     * @param {module:api/CollectionsApi~getPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getProperties(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getProperties");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listElementsOfCollection operation.
     * @callback module:api/CollectionsApi~listElementsOfCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of the collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {String} [organizationId] The organization namespace.
     * @param {module:api/CollectionsApi~listElementsOfCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuid}
     */
    listElementsOfCollection(id4n, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listElementsOfCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'organizationId': opts['organizationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuid;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProperties operation.
     * @callback module:api/CollectionsApi~patchPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch ID4n properties
     * Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist.
     * @param {String} id4n The id4n
     * @param {String} organizationId The organization namespace to work on while patching the properties.
     * @param {Object.<String, {String: String}>} requestBody The properties to update.
     * @param {module:api/CollectionsApi~patchPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchProperties(id4n, organizationId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling patchProperties");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling patchProperties");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling patchProperties");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/properties', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromCollection operation.
     * @callback module:api/CollectionsApi~removeElementsFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove elements from collection
     * @param {String} id4n id4n
     * @param {module:model/ListOfId4ns} listOfId4ns listOfGuids
     * @param {module:api/CollectionsApi~removeElementsFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeElementsFromCollection(id4n, listOfId4ns, callback) {
      let postBody = listOfId4ns;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling removeElementsFromCollection");
      }
      // verify the required parameter 'listOfId4ns' is set
      if (listOfId4ns === undefined || listOfId4ns === null) {
        throw new Error("Missing the required parameter 'listOfId4ns' when calling removeElementsFromCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/CollectionsApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection
     * Update collection changing only the given values
     * @param {String} id4n id4n
     * @param {module:model/GuidCollection} guidCollection request
     * @param {module:api/CollectionsApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCollection(id4n, guidCollection, callback) {
      let postBody = guidCollection;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateCollection");
      }
      // verify the required parameter 'guidCollection' is set
      if (guidCollection === undefined || guidCollection === null) {
        throw new Error("Missing the required parameter 'guidCollection' when calling updateCollection");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
