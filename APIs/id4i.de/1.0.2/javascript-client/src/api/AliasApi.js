/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import GuidAlias from '../model/GuidAlias';
import PaginatedResponseOfGuid from '../model/PaginatedResponseOfGuid';

/**
* Alias service.
* @module api/AliasApi
* @version 1.0.2
*/
export default class AliasApi {

    /**
    * Constructs a new AliasApi. 
    * @alias module:api/AliasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGuidAlias operation.
     * @callback module:api/AliasApi~addGuidAliasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add alias for GUID or Collection
     * Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article)
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:model/String} aliasType Alias type, see the corresponding API model
     * @param {module:model/GuidAlias} guidAlias The alias to add or update
     * @param {module:api/AliasApi~addGuidAliasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addGuidAlias(id4n, aliasType, guidAlias, callback) {
      let postBody = guidAlias;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addGuidAlias");
      }
      // verify the required parameter 'aliasType' is set
      if (aliasType === undefined || aliasType === null) {
        throw new Error("Missing the required parameter 'aliasType' when calling addGuidAlias");
      }
      // verify the required parameter 'guidAlias' is set
      if (guidAlias === undefined || guidAlias === null) {
        throw new Error("Missing the required parameter 'guidAlias' when calling addGuidAlias");
      }

      let pathParams = {
        'id4n': id4n,
        'aliasType': aliasType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias/{aliasType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuidAliasTypes operation.
     * @callback module:api/AliasApi~getGuidAliasTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all supported alias types
     * Retrieve this list to find out all alias types to use with alias search and change operations
     * @param {module:api/AliasApi~getGuidAliasTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getGuidAliasTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/search/guids/aliases/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuidAliases operation.
     * @callback module:api/AliasApi~getGuidAliasesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all aliases for the given GUID or Collection.
     * Looks up the alias for each alias type (group and single) and returns a map of all aliases found.
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:api/AliasApi~getGuidAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    getGuidAliases(id4n, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling getGuidAliases");
      }

      let pathParams = {
        'id4n': id4n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGuidAlias operation.
     * @callback module:api/AliasApi~removeGuidAliasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove aliases from GUID or Collection
     * Remove the alias of the given type
     * @param {String} id4n The GUID or Collection to operate on
     * @param {module:model/String} aliasType Alias type, see the corresponding API model
     * @param {module:api/AliasApi~removeGuidAliasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGuidAlias(id4n, aliasType, callback) {
      let postBody = null;
      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling removeGuidAlias");
      }
      // verify the required parameter 'aliasType' is set
      if (aliasType === undefined || aliasType === null) {
        throw new Error("Missing the required parameter 'aliasType' when calling removeGuidAlias");
      }

      let pathParams = {
        'id4n': id4n,
        'aliasType': aliasType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/id4ns/{id4n}/alias/{aliasType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchByAlias operation.
     * @callback module:api/AliasApi~searchByAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for GUIDs by alias
     * @param {String} alias The alias to search for
     * @param {module:model/String} aliasType Alias type type to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/AliasApi~searchByAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuid}
     */
    searchByAlias(alias, aliasType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling searchByAlias");
      }
      // verify the required parameter 'aliasType' is set
      if (aliasType === undefined || aliasType === null) {
        throw new Error("Missing the required parameter 'aliasType' when calling searchByAlias");
      }

      let pathParams = {
      };
      let queryParams = {
        'alias': alias,
        'aliasType': aliasType,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuid;
      return this.apiClient.callApi(
        '/api/v1/search/guids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
