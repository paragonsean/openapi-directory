/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddApiKeyPrivilegeRequest from '../model/AddApiKeyPrivilegeRequest';
import ApiError from '../model/ApiError';
import ApiKeyChangeRequest from '../model/ApiKeyChangeRequest';
import ApiKeyCreationRequest from '../model/ApiKeyCreationRequest';
import ApiKeyPresentation from '../model/ApiKeyPresentation';
import ListOfId4ns from '../model/ListOfId4ns';
import PaginatedResponseOfApiKeyPresentation from '../model/PaginatedResponseOfApiKeyPresentation';
import PaginatedResponseOfApiKeyPrivilege from '../model/PaginatedResponseOfApiKeyPrivilege';
import PaginatedResponseOfApiKeyPrivilegeInfo from '../model/PaginatedResponseOfApiKeyPrivilegeInfo';
import PaginatedResponseOfId4nPresentation from '../model/PaginatedResponseOfId4nPresentation';
import RemoveApiKeyPrivilegeRequest from '../model/RemoveApiKeyPrivilegeRequest';

/**
* ApiKeys service.
* @module api/ApiKeysApi
* @version 1.0.2
*/
export default class ApiKeysApi {

    /**
    * Constructs a new ApiKeysApi. 
    * @alias module:api/ApiKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addApiKeyPrivilege operation.
     * @callback module:api/ApiKeysApi~addApiKeyPrivilegeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add privilege
     * @param {String} key key
     * @param {module:model/AddApiKeyPrivilegeRequest} addApiKeyPrivilegeRequest addApiKeyPrivilegeRequest
     * @param {module:api/ApiKeysApi~addApiKeyPrivilegeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addApiKeyPrivilege(key, addApiKeyPrivilegeRequest, callback) {
      let postBody = addApiKeyPrivilegeRequest;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addApiKeyPrivilege");
      }
      // verify the required parameter 'addApiKeyPrivilegeRequest' is set
      if (addApiKeyPrivilegeRequest === undefined || addApiKeyPrivilegeRequest === null) {
        throw new Error("Missing the required parameter 'addApiKeyPrivilegeRequest' when calling addApiKeyPrivilege");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addApiKeyPrivilegeForId4ns operation.
     * @callback module:api/ApiKeysApi~addApiKeyPrivilegeForId4nsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add ID4ns of a privilege
     * @param {String} key key
     * @param {String} privilege privilege
     * @param {module:model/ListOfId4ns} listOfId4ns id4ns
     * @param {module:api/ApiKeysApi~addApiKeyPrivilegeForId4nsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addApiKeyPrivilegeForId4ns(key, privilege, listOfId4ns, callback) {
      let postBody = listOfId4ns;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addApiKeyPrivilegeForId4ns");
      }
      // verify the required parameter 'privilege' is set
      if (privilege === undefined || privilege === null) {
        throw new Error("Missing the required parameter 'privilege' when calling addApiKeyPrivilegeForId4ns");
      }
      // verify the required parameter 'listOfId4ns' is set
      if (listOfId4ns === undefined || listOfId4ns === null) {
        throw new Error("Missing the required parameter 'listOfId4ns' when calling addApiKeyPrivilegeForId4ns");
      }

      let pathParams = {
        'key': key,
        'privilege': privilege
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewApiKey operation.
     * @callback module:api/ApiKeysApi~createNewApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API key
     * Creation of a new API key.
     * @param {module:model/ApiKeyCreationRequest} apiKeyCreationRequest API key to be created.
     * @param {module:api/ApiKeysApi~createNewApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyPresentation}
     */
    createNewApiKey(apiKeyCreationRequest, callback) {
      let postBody = apiKeyCreationRequest;
      // verify the required parameter 'apiKeyCreationRequest' is set
      if (apiKeyCreationRequest === undefined || apiKeyCreationRequest === null) {
        throw new Error("Missing the required parameter 'apiKeyCreationRequest' when calling createNewApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ApiKeyPresentation;
      return this.apiClient.callApi(
        '/api/v1/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKey operation.
     * @callback module:api/ApiKeysApi~deleteApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API key
     * Deletion of an API key.
     * @param {String} key The API key to delete.
     * @param {module:api/ApiKeysApi~deleteApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteApiKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKey operation.
     * @callback module:api/ApiKeysApi~getApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show API key
     * Showing the details of an API key.
     * @param {String} key The API key to show.
     * @param {module:api/ApiKeysApi~getApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyPresentation}
     */
    getApiKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getApiKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ApiKeyPresentation;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllApiKeyPrivileges operation.
     * @callback module:api/ApiKeysApi~listAllApiKeyPrivilegesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfApiKeyPrivilegeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all privileges
     * Listing all possible API key privileges.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [id4nConcerning] id4nConcerning
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/ApiKeysApi~listAllApiKeyPrivilegesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfApiKeyPrivilegeInfo}
     */
    listAllApiKeyPrivileges(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id4nConcerning': opts['id4nConcerning'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfApiKeyPrivilegeInfo;
      return this.apiClient.callApi(
        '/api/v1/apikeys/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllApiKeysOfOrganization operation.
     * @callback module:api/ApiKeysApi~listAllApiKeysOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfApiKeyPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find API key by organization
     * Finding all API key assigned to the specified organization in a paginated manner.
     * @param {Object} opts Optional parameters
     * @param {String} [organizationId] The namespace of the organization to search in.
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/ApiKeysApi~listAllApiKeysOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfApiKeyPresentation}
     */
    listAllApiKeysOfOrganization(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'organizationId': opts['organizationId'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfApiKeyPresentation;
      return this.apiClient.callApi(
        '/api/v1/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApiKeyPrivileges operation.
     * @callback module:api/ApiKeysApi~listApiKeyPrivilegesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfApiKeyPrivilege} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List privileges
     * @param {String} key key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/ApiKeysApi~listApiKeyPrivilegesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfApiKeyPrivilege}
     */
    listApiKeyPrivileges(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling listApiKeyPrivileges");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfApiKeyPrivilege;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listId4ns operation.
     * @callback module:api/ApiKeysApi~listId4nsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfId4nPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ID4ns of a privilege
     * Listing ID4ns of a id4n concerning privilege
     * @param {String} key key
     * @param {String} privilege privilege
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/ApiKeysApi~listId4nsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfId4nPresentation}
     */
    listId4ns(key, privilege, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling listId4ns");
      }
      // verify the required parameter 'privilege' is set
      if (privilege === undefined || privilege === null) {
        throw new Error("Missing the required parameter 'privilege' when calling listId4ns");
      }

      let pathParams = {
        'key': key,
        'privilege': privilege
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfId4nPresentation;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeApiKeyPrivilege operation.
     * @callback module:api/ApiKeysApi~removeApiKeyPrivilegeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove privilege
     * @param {String} key key
     * @param {module:model/RemoveApiKeyPrivilegeRequest} removeApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest
     * @param {module:api/ApiKeysApi~removeApiKeyPrivilegeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeApiKeyPrivilege(key, removeApiKeyPrivilegeRequest, callback) {
      let postBody = removeApiKeyPrivilegeRequest;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeApiKeyPrivilege");
      }
      // verify the required parameter 'removeApiKeyPrivilegeRequest' is set
      if (removeApiKeyPrivilegeRequest === undefined || removeApiKeyPrivilegeRequest === null) {
        throw new Error("Missing the required parameter 'removeApiKeyPrivilegeRequest' when calling removeApiKeyPrivilege");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeApiKeyPrivilegeForId4ns operation.
     * @callback module:api/ApiKeysApi~removeApiKeyPrivilegeForId4nsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove id4ns of a privilege
     * @param {String} key key
     * @param {String} privilege privilege
     * @param {module:model/ListOfId4ns} listOfId4ns id4ns
     * @param {module:api/ApiKeysApi~removeApiKeyPrivilegeForId4nsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeApiKeyPrivilegeForId4ns(key, privilege, listOfId4ns, callback) {
      let postBody = listOfId4ns;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeApiKeyPrivilegeForId4ns");
      }
      // verify the required parameter 'privilege' is set
      if (privilege === undefined || privilege === null) {
        throw new Error("Missing the required parameter 'privilege' when calling removeApiKeyPrivilegeForId4ns");
      }
      // verify the required parameter 'listOfId4ns' is set
      if (listOfId4ns === undefined || listOfId4ns === null) {
        throw new Error("Missing the required parameter 'listOfId4ns' when calling removeApiKeyPrivilegeForId4ns");
      }

      let pathParams = {
        'key': key,
        'privilege': privilege
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiKey operation.
     * @callback module:api/ApiKeysApi~updateApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update API keys
     * API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
     * @param {String} key The API key to be updated.
     * @param {module:model/ApiKeyChangeRequest} apiKeyChangeRequest The new values to apply.
     * @param {module:api/ApiKeysApi~updateApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateApiKey(key, apiKeyChangeRequest, callback) {
      let postBody = apiKeyChangeRequest;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateApiKey");
      }
      // verify the required parameter 'apiKeyChangeRequest' is set
      if (apiKeyChangeRequest === undefined || apiKeyChangeRequest === null) {
        throw new Error("Missing the required parameter 'apiKeyChangeRequest' when calling updateApiKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/apikeys/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
