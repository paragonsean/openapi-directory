/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddPartnerRequest from '../model/AddPartnerRequest';
import ApiError from '../model/ApiError';
import ChangeRoleRequest from '../model/ChangeRoleRequest';
import Organization from '../model/Organization';
import OrganizationAddress from '../model/OrganizationAddress';
import OrganizationUpdate from '../model/OrganizationUpdate';
import OrganizationUserInvitationListRequest from '../model/OrganizationUserInvitationListRequest';
import PaginatedResponseOfCountry from '../model/PaginatedResponseOfCountry';
import PaginatedResponseOfGuidCollection from '../model/PaginatedResponseOfGuidCollection';
import PaginatedResponseOfOrganization from '../model/PaginatedResponseOfOrganization';
import PaginatedResponseOfPartnerOrganization from '../model/PaginatedResponseOfPartnerOrganization';
import PaginatedResponseOfUserPresentation from '../model/PaginatedResponseOfUserPresentation';
import PaginatedResponseOfUserRoles from '../model/PaginatedResponseOfUserRoles';
import PaginatedResponseOfstring from '../model/PaginatedResponseOfstring';
import PublicImagePresentation from '../model/PublicImagePresentation';
import RemovePartnerRequest from '../model/RemovePartnerRequest';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 1.0.2
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPartnerOrganization operation.
     * @callback module:api/OrganizationsApi~addPartnerOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add partner
     * Adding a partner organization. If the given organization is already a partner the result will be state 200 too.
     * @param {String} organizationId The namespace of the organization
     * @param {module:model/AddPartnerRequest} addPartnerRequest request
     * @param {module:api/OrganizationsApi~addPartnerOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPartnerOrganization(organizationId, addPartnerRequest, callback) {
      let postBody = addPartnerRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addPartnerOrganization");
      }
      // verify the required parameter 'addPartnerRequest' is set
      if (addPartnerRequest === undefined || addPartnerRequest === null) {
        throw new Error("Missing the required parameter 'addPartnerRequest' when calling addPartnerOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/partner', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserRoles_0 operation.
     * @callback module:api/OrganizationsApi~addUserRoles_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add role(s) to user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/OrganizationsApi~addUserRoles_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addUserRoles_0(organizationId, username, changeRoleRequest, callback) {
      let postBody = changeRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addUserRoles_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addUserRoles_0");
      }
      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling addUserRoles_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationsApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organization
     * Creating a new organization.
     * @param {module:model/Organization} organization Organization to be created
     * @param {module:api/OrganizationsApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    createOrganization(organization, callback) {
      let postBody = organization;
      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling createOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/v1/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganization operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization
     * @param {String} organizationId The namespace of the organization to be deleted.
     * @param {module:api/OrganizationsApi~deleteOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove billing address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~deleteOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationBillingAddress(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationBillingAddress");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationLogo operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization logo
     * @param {String} organizationId The namespace of the organization where the logo should be deleted.
     * @param {module:api/OrganizationsApi~deleteOrganizationLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationLogo(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationLogo");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/logo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganization operation.
     * @callback module:api/OrganizationsApi~findOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find organization by id/namespace
     * Returns a single organization.
     * @param {String} organizationId The namespace of the organization to be retrieved.
     * @param {module:api/OrganizationsApi~findOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    findOrganization(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganizationAddress operation.
     * @callback module:api/OrganizationsApi~findOrganizationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~findOrganizationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    findOrganizationAddress(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganizationAddress");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OrganizationAddress;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~findOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve billing address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~findOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    findOrganizationBillingAddress(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganizationBillingAddress");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OrganizationAddress;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionsOfOrganization_0 operation.
     * @callback module:api/OrganizationsApi~getAllCollectionsOfOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfGuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collections of organization
     * Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. `com.yourcompany.orderId.eq=1234`  
     * @param {String} organizationId The namespace of the organization
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:model/String} [type] Filter by this type
     * @param {String} [label] Filter by this label
     * @param {String} [labelPrefix] Filter by this label prefix
     * @param {Array.<String>} [property] List of i4dn property filter. e.g. \"com.myorga.state:IN:waiting|processing\" or \"com.myorga.orderId:EQ:SAP001\"
     * @param {module:api/OrganizationsApi~getAllCollectionsOfOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfGuidCollection}
     */
    getAllCollectionsOfOrganization_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllCollectionsOfOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'label': opts['label'],
        'labelPrefix': opts['labelPrefix'],
        'property': this.apiClient.buildCollectionParam(opts['property'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfGuidCollection;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrganizationRoles_0 operation.
     * @callback module:api/OrganizationsApi~getAllOrganizationRoles_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfUserRoles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users and their roles
     * Listing users and their roles in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getAllOrganizationRoles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfUserRoles}
     */
    getAllOrganizationRoles_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllOrganizationRoles_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfUserRoles;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationPrivileges operation.
     * @callback module:api/OrganizationsApi~getOrganizationPrivilegesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List my privileges
     * Listing all privileges of the current user/APIKey of the specified organization.
     * @param {String} organizationId The namespace of the organization
     * @param {module:api/OrganizationsApi~getOrganizationPrivilegesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOrganizationPrivileges(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationPrivileges");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsOfUser_0 operation.
     * @callback module:api/OrganizationsApi~getOrganizationsOfUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfOrganization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve organizations of user
     * @param {Object} opts Optional parameters
     * @param {String} [role] role
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getOrganizationsOfUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfOrganization}
     */
    getOrganizationsOfUser_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'role': opts['role'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfOrganization;
      return this.apiClient.callApi(
        '/api/v1/user/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartnerOrganizations operation.
     * @callback module:api/OrganizationsApi~getPartnerOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfPartnerOrganization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get partners of an organization
     * Listing partners in a paginated manner.
     * @param {String} organizationId The namespace of the organization to query partner organizations
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getPartnerOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfPartnerOrganization}
     */
    getPartnerOrganizations(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getPartnerOrganizations");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfPartnerOrganization;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/partner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRoles_0 operation.
     * @callback module:api/OrganizationsApi~getUserRoles_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user roles by username
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getUserRoles_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfstring}
     */
    getUserRoles_0(organizationId, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUserRoles_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserRoles_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfstring;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersOfOrganization_0 operation.
     * @callback module:api/OrganizationsApi~getUsersOfOrganization_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfUserPresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users in organization
     * Finding users in the specified organization in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getUsersOfOrganization_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfUserPresentation}
     */
    getUsersOfOrganization_0(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUsersOfOrganization_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfUserPresentation;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteUsers_0 operation.
     * @callback module:api/OrganizationsApi~inviteUsers_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Users
     * @param {String} organizationId The namespace of the organization where users should be invited
     * @param {module:model/OrganizationUserInvitationListRequest} organizationUserInvitationListRequest invitationList
     * @param {module:api/OrganizationsApi~inviteUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    inviteUsers_0(organizationId, organizationUserInvitationListRequest, callback) {
      let postBody = organizationUserInvitationListRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling inviteUsers_0");
      }
      // verify the required parameter 'organizationUserInvitationListRequest' is set
      if (organizationUserInvitationListRequest === undefined || organizationUserInvitationListRequest === null) {
        throw new Error("Missing the required parameter 'organizationUserInvitationListRequest' when calling inviteUsers_0");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCountries operation.
     * @callback module:api/OrganizationsApi~listCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseOfCountry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List countries
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Start with the n-th element
     * @param {Number} [limit] The maximum count of returned elements
     * @param {module:api/OrganizationsApi~listCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseOfCountry}
     */
    listCountries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PaginatedResponseOfCountry;
      return this.apiClient.callApi(
        '/api/v1/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePartnerOrganization operation.
     * @callback module:api/OrganizationsApi~removePartnerOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove partner
     * Removing a partner organization
     * @param {String} organizationId The namespace of the organization
     * @param {module:model/RemovePartnerRequest} removePartnerRequest request
     * @param {module:api/OrganizationsApi~removePartnerOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removePartnerOrganization(organizationId, removePartnerRequest, callback) {
      let postBody = removePartnerRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removePartnerOrganization");
      }
      // verify the required parameter 'removePartnerRequest' is set
      if (removePartnerRequest === undefined || removePartnerRequest === null) {
        throw new Error("Missing the required parameter 'removePartnerRequest' when calling removePartnerOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/partner', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserRoles_0 operation.
     * @callback module:api/OrganizationsApi~removeUserRoles_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove role(s) from user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/OrganizationsApi~removeUserRoles_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserRoles_0(organizationId, username, changeRoleRequest, callback) {
      let postBody = changeRoleRequest;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeUserRoles_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling removeUserRoles_0");
      }
      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling removeUserRoles_0");
      }

      let pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setOrganizationLogo operation.
     * @callback module:api/OrganizationsApi~setOrganizationLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicImagePresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization logo
     * Updating an organization logo using a multipart file upload.
     * @param {String} organizationId The namespace of the organization where the logo should be updated.
     * @param {File} file An image containing the new logo.
     * @param {module:api/OrganizationsApi~setOrganizationLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicImagePresentation}
     */
    setOrganizationLogo(organizationId, file, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setOrganizationLogo");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling setOrganizationLogo");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = PublicImagePresentation;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationsApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization
     * @param {String} organizationId The namespace of the organization to be updated.
     * @param {module:model/OrganizationUpdate} organizationUpdate Updated organization object
     * @param {module:api/OrganizationsApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    updateOrganization(organizationId, organizationUpdate, callback) {
      let postBody = organizationUpdate;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganization");
      }
      // verify the required parameter 'organizationUpdate' is set
      if (organizationUpdate === undefined || organizationUpdate === null) {
        throw new Error("Missing the required parameter 'organizationUpdate' when calling updateOrganization");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAddress operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store address
     * @param {String} organizationId organizationId
     * @param {module:model/OrganizationAddress} organizationAddress addressResource
     * @param {module:api/OrganizationsApi~updateOrganizationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    updateOrganizationAddress(organizationId, organizationAddress, callback) {
      let postBody = organizationAddress;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAddress");
      }
      // verify the required parameter 'organizationAddress' is set
      if (organizationAddress === undefined || organizationAddress === null) {
        throw new Error("Missing the required parameter 'organizationAddress' when calling updateOrganizationAddress");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OrganizationAddress;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store billing address
     * @param {String} organizationId organizationId
     * @param {module:model/OrganizationAddress} organizationAddress addressResource
     * @param {module:api/OrganizationsApi~updateOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    updateOrganizationBillingAddress(organizationId, organizationAddress, callback) {
      let postBody = organizationAddress;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBillingAddress");
      }
      // verify the required parameter 'organizationAddress' is set
      if (organizationAddress === undefined || organizationAddress === null) {
        throw new Error("Missing the required parameter 'organizationAddress' when calling updateOrganizationBillingAddress");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = OrganizationAddress;
      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
