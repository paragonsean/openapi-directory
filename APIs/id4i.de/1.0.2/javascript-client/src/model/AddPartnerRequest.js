/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddPartnerRequest model module.
 * @module model/AddPartnerRequest
 * @version 1.0.2
 */
class AddPartnerRequest {
    /**
     * Constructs a new <code>AddPartnerRequest</code>.
     * @alias module:model/AddPartnerRequest
     * @param organizationId {String} The namespace of the partner organization to add
     */
    constructor(organizationId) { 
        
        AddPartnerRequest.initialize(this, organizationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, organizationId) { 
        obj['organizationId'] = organizationId;
    }

    /**
     * Constructs a <code>AddPartnerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddPartnerRequest} obj Optional instance to populate.
     * @return {module:model/AddPartnerRequest} The populated <code>AddPartnerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddPartnerRequest();

            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddPartnerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddPartnerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddPartnerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }

        return true;
    }


}

AddPartnerRequest.RequiredProperties = ["organizationId"];

/**
 * The namespace of the partner organization to add
 * @member {String} organizationId
 */
AddPartnerRequest.prototype['organizationId'] = undefined;






export default AddPartnerRequest;

