/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Route from './Route';
import RoutingOptions from './RoutingOptions';

/**
 * The RoutingFile model module.
 * @module model/RoutingFile
 * @version 1.0.2
 */
class RoutingFile {
    /**
     * Constructs a new <code>RoutingFile</code>.
     * @alias module:model/RoutingFile
     * @param routes {Array.<module:model/Route>} 
     */
    constructor(routes) { 
        
        RoutingFile.initialize(this, routes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, routes) { 
        obj['routes'] = routes;
    }

    /**
     * Constructs a <code>RoutingFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoutingFile} obj Optional instance to populate.
     * @return {module:model/RoutingFile} The populated <code>RoutingFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoutingFile();

            if (data.hasOwnProperty('options')) {
                obj['options'] = RoutingOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('routes')) {
                obj['routes'] = ApiClient.convertToType(data['routes'], [Route]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoutingFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoutingFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoutingFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          RoutingOptions.validateJSON(data['options']);
        }
        if (data['routes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routes'])) {
                throw new Error("Expected the field `routes` to be an array in the JSON data but got " + data['routes']);
            }
            // validate the optional field `routes` (array)
            for (const item of data['routes']) {
                Route.validateJSON(item);
            };
        }

        return true;
    }


}

RoutingFile.RequiredProperties = ["routes"];

/**
 * @member {module:model/RoutingOptions} options
 */
RoutingFile.prototype['options'] = undefined;

/**
 * @member {Array.<module:model/Route>} routes
 */
RoutingFile.prototype['routes'] = undefined;






export default RoutingFile;

