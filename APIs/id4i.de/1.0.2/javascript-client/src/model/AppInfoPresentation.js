/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppInfoPresentation model module.
 * @module model/AppInfoPresentation
 * @version 1.0.2
 */
class AppInfoPresentation {
    /**
     * Constructs a new <code>AppInfoPresentation</code>.
     * @alias module:model/AppInfoPresentation
     */
    constructor() { 
        
        AppInfoPresentation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppInfoPresentation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppInfoPresentation} obj Optional instance to populate.
     * @return {module:model/AppInfoPresentation} The populated <code>AppInfoPresentation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppInfoPresentation();

            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('commitTime')) {
                obj['commitTime'] = ApiClient.convertToType(data['commitTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productionMode')) {
                obj['productionMode'] = ApiClient.convertToType(data['productionMode'], 'Boolean');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppInfoPresentation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppInfoPresentation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['commitTime'] && !(typeof data['commitTime'] === 'string' || data['commitTime'] instanceof String)) {
            throw new Error("Expected the field `commitTime` to be a primitive type in the JSON string but got " + data['commitTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} branch
 */
AppInfoPresentation.prototype['branch'] = undefined;

/**
 * @member {String} commitTime
 */
AppInfoPresentation.prototype['commitTime'] = undefined;

/**
 * @member {String} name
 */
AppInfoPresentation.prototype['name'] = undefined;

/**
 * @member {Boolean} productionMode
 */
AppInfoPresentation.prototype['productionMode'] = undefined;

/**
 * @member {String} revision
 */
AppInfoPresentation.prototype['revision'] = undefined;

/**
 * @member {String} version
 */
AppInfoPresentation.prototype['version'] = undefined;






export default AppInfoPresentation;

