/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GuidCollection model module.
 * @module model/GuidCollection
 * @version 1.0.2
 */
class GuidCollection {
    /**
     * Constructs a new <code>GuidCollection</code>.
     * @alias module:model/GuidCollection
     */
    constructor() { 
        
        GuidCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GuidCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GuidCollection} obj Optional instance to populate.
     * @return {module:model/GuidCollection} The populated <code>GuidCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GuidCollection();

            if (data.hasOwnProperty('createdTimestamp')) {
                obj['createdTimestamp'] = ApiClient.convertToType(data['createdTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('holderOrganizationId')) {
                obj['holderOrganizationId'] = ApiClient.convertToType(data['holderOrganizationId'], 'String');
            }
            if (data.hasOwnProperty('id4n')) {
                obj['id4n'] = ApiClient.convertToType(data['id4n'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('ownerOrganizationId')) {
                obj['ownerOrganizationId'] = ApiClient.convertToType(data['ownerOrganizationId'], 'String');
            }
            if (data.hasOwnProperty('physicalState')) {
                obj['physicalState'] = ApiClient.convertToType(data['physicalState'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GuidCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GuidCollection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['holderOrganizationId'] && !(typeof data['holderOrganizationId'] === 'string' || data['holderOrganizationId'] instanceof String)) {
            throw new Error("Expected the field `holderOrganizationId` to be a primitive type in the JSON string but got " + data['holderOrganizationId']);
        }
        // ensure the json data is a string
        if (data['id4n'] && !(typeof data['id4n'] === 'string' || data['id4n'] instanceof String)) {
            throw new Error("Expected the field `id4n` to be a primitive type in the JSON string but got " + data['id4n']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['ownerOrganizationId'] && !(typeof data['ownerOrganizationId'] === 'string' || data['ownerOrganizationId'] instanceof String)) {
            throw new Error("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got " + data['ownerOrganizationId']);
        }
        // ensure the json data is a string
        if (data['physicalState'] && !(typeof data['physicalState'] === 'string' || data['physicalState'] instanceof String)) {
            throw new Error("Expected the field `physicalState` to be a primitive type in the JSON string but got " + data['physicalState']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The UTC unix timestamp of when this collection has been created
 * @member {Number} createdTimestamp
 */
GuidCollection.prototype['createdTimestamp'] = undefined;

/**
 * Organization namespace of the holder of the collection
 * @member {String} holderOrganizationId
 */
GuidCollection.prototype['holderOrganizationId'] = undefined;

/**
 * The ID
 * @member {String} id4n
 */
GuidCollection.prototype['id4n'] = undefined;

/**
 * @member {String} label
 */
GuidCollection.prototype['label'] = undefined;

/**
 * Organization namespace of the collection owner
 * @member {String} ownerOrganizationId
 */
GuidCollection.prototype['ownerOrganizationId'] = undefined;

/**
 * Physical attachment state of the collection
 * @member {module:model/GuidCollection.PhysicalStateEnum} physicalState
 */
GuidCollection.prototype['physicalState'] = undefined;

/**
 * @member {module:model/GuidCollection.TypeEnum} type
 */
GuidCollection.prototype['type'] = undefined;





/**
 * Allowed values for the <code>physicalState</code> property.
 * @enum {String}
 * @readonly
 */
GuidCollection['PhysicalStateEnum'] = {

    /**
     * value: "UNATTACHED"
     * @const
     */
    "UNATTACHED": "UNATTACHED",

    /**
     * value: "ATTACHED"
     * @const
     */
    "ATTACHED": "ATTACHED",

    /**
     * value: "DETACHED"
     * @const
     */
    "DETACHED": "DETACHED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GuidCollection['TypeEnum'] = {

    /**
     * value: "ROUTING_COLLECTION"
     * @const
     */
    "ROUTING_COLLECTION": "ROUTING_COLLECTION",

    /**
     * value: "LOGISTIC_COLLECTION"
     * @const
     */
    "LOGISTIC_COLLECTION": "LOGISTIC_COLLECTION",

    /**
     * value: "LABELLED_COLLECTION"
     * @const
     */
    "LABELLED_COLLECTION": "LABELLED_COLLECTION"
};



export default GuidCollection;

