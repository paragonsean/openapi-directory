/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BillingPosition model module.
 * @module model/BillingPosition
 * @version 1.0.2
 */
class BillingPosition {
    /**
     * Constructs a new <code>BillingPosition</code>.
     * @alias module:model/BillingPosition
     * @param amount {Number} 
     * @param count {Number} 
     * @param description {String} 
     * @param service {String} 
     * @param singlePrice {Number} 
     * @param sum {Number} 
     * @param unit {String} 
     */
    constructor(amount, count, description, service, singlePrice, sum, unit) { 
        
        BillingPosition.initialize(this, amount, count, description, service, singlePrice, sum, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, count, description, service, singlePrice, sum, unit) { 
        obj['amount'] = amount;
        obj['count'] = count;
        obj['description'] = description;
        obj['service'] = service;
        obj['singlePrice'] = singlePrice;
        obj['sum'] = sum;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>BillingPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillingPosition} obj Optional instance to populate.
     * @return {module:model/BillingPosition} The populated <code>BillingPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillingPosition();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('singlePrice')) {
                obj['singlePrice'] = ApiClient.convertToType(data['singlePrice'], 'Number');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillingPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillingPosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BillingPosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

BillingPosition.RequiredProperties = ["amount", "count", "description", "service", "singlePrice", "sum", "unit"];

/**
 * @member {Number} amount
 */
BillingPosition.prototype['amount'] = undefined;

/**
 * @member {Number} count
 */
BillingPosition.prototype['count'] = undefined;

/**
 * @member {String} description
 */
BillingPosition.prototype['description'] = undefined;

/**
 * @member {String} service
 */
BillingPosition.prototype['service'] = undefined;

/**
 * @member {Number} singlePrice
 */
BillingPosition.prototype['singlePrice'] = undefined;

/**
 * @member {Number} sum
 */
BillingPosition.prototype['sum'] = undefined;

/**
 * @member {String} unit
 */
BillingPosition.prototype['unit'] = undefined;






export default BillingPosition;

