/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferSendInfo model module.
 * @module model/TransferSendInfo
 * @version 1.0.2
 */
class TransferSendInfo {
    /**
     * Constructs a new <code>TransferSendInfo</code>.
     * @alias module:model/TransferSendInfo
     * @param keepOwnership {Boolean} Keep the public ownership while transferring the object
     * @param openForClaims {Boolean} Allow anyone who knows (or can scan) the ID4N to claim ownership of this object
     * @param recipientOrganizationIds {Array.<String>} Allow only these organizations to obtain this object
     */
    constructor(keepOwnership, openForClaims, recipientOrganizationIds) { 
        
        TransferSendInfo.initialize(this, keepOwnership, openForClaims, recipientOrganizationIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keepOwnership, openForClaims, recipientOrganizationIds) { 
        obj['keepOwnership'] = keepOwnership;
        obj['openForClaims'] = openForClaims;
        obj['recipientOrganizationIds'] = recipientOrganizationIds;
    }

    /**
     * Constructs a <code>TransferSendInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferSendInfo} obj Optional instance to populate.
     * @return {module:model/TransferSendInfo} The populated <code>TransferSendInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferSendInfo();

            if (data.hasOwnProperty('holderOrganizationId')) {
                obj['holderOrganizationId'] = ApiClient.convertToType(data['holderOrganizationId'], 'String');
            }
            if (data.hasOwnProperty('keepOwnership')) {
                obj['keepOwnership'] = ApiClient.convertToType(data['keepOwnership'], 'Boolean');
            }
            if (data.hasOwnProperty('openForClaims')) {
                obj['openForClaims'] = ApiClient.convertToType(data['openForClaims'], 'Boolean');
            }
            if (data.hasOwnProperty('ownerOrganizationId')) {
                obj['ownerOrganizationId'] = ApiClient.convertToType(data['ownerOrganizationId'], 'String');
            }
            if (data.hasOwnProperty('recipientOrganizationIds')) {
                obj['recipientOrganizationIds'] = ApiClient.convertToType(data['recipientOrganizationIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferSendInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferSendInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferSendInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['holderOrganizationId'] && !(typeof data['holderOrganizationId'] === 'string' || data['holderOrganizationId'] instanceof String)) {
            throw new Error("Expected the field `holderOrganizationId` to be a primitive type in the JSON string but got " + data['holderOrganizationId']);
        }
        // ensure the json data is a string
        if (data['ownerOrganizationId'] && !(typeof data['ownerOrganizationId'] === 'string' || data['ownerOrganizationId'] instanceof String)) {
            throw new Error("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got " + data['ownerOrganizationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recipientOrganizationIds'])) {
            throw new Error("Expected the field `recipientOrganizationIds` to be an array in the JSON data but got " + data['recipientOrganizationIds']);
        }

        return true;
    }


}

TransferSendInfo.RequiredProperties = ["keepOwnership", "openForClaims", "recipientOrganizationIds"];

/**
 * The current holder of the object
 * @member {String} holderOrganizationId
 */
TransferSendInfo.prototype['holderOrganizationId'] = undefined;

/**
 * Keep the public ownership while transferring the object
 * @member {Boolean} keepOwnership
 */
TransferSendInfo.prototype['keepOwnership'] = undefined;

/**
 * Allow anyone who knows (or can scan) the ID4N to claim ownership of this object
 * @member {Boolean} openForClaims
 */
TransferSendInfo.prototype['openForClaims'] = undefined;

/**
 * The current publicly visible owner of the object
 * @member {String} ownerOrganizationId
 */
TransferSendInfo.prototype['ownerOrganizationId'] = undefined;

/**
 * Allow only these organizations to obtain this object
 * @member {Array.<String>} recipientOrganizationIds
 */
TransferSendInfo.prototype['recipientOrganizationIds'] = undefined;






export default TransferSendInfo;

