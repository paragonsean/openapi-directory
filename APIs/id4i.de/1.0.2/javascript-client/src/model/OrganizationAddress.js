/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrganizationAddress model module.
 * @module model/OrganizationAddress
 * @version 1.0.2
 */
class OrganizationAddress {
    /**
     * Constructs a new <code>OrganizationAddress</code>.
     * @alias module:model/OrganizationAddress
     * @param city {String} 
     * @param countryCode {String} The ISO 3166 two-letter country code
     * @param firstname {String} 
     * @param lastname {String} 
     * @param postCode {String} 
     * @param street {String} 
     */
    constructor(city, countryCode, firstname, lastname, postCode, street) { 
        
        OrganizationAddress.initialize(this, city, countryCode, firstname, lastname, postCode, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, countryCode, firstname, lastname, postCode, street) { 
        obj['city'] = city;
        obj['countryCode'] = countryCode;
        obj['firstname'] = firstname;
        obj['lastname'] = lastname;
        obj['postCode'] = postCode;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>OrganizationAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrganizationAddress} obj Optional instance to populate.
     * @return {module:model/OrganizationAddress} The populated <code>OrganizationAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganizationAddress();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('postCode')) {
                obj['postCode'] = ApiClient.convertToType(data['postCode'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('telephone')) {
                obj['telephone'] = ApiClient.convertToType(data['telephone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganizationAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganizationAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrganizationAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['postCode'] && !(typeof data['postCode'] === 'string' || data['postCode'] instanceof String)) {
            throw new Error("Expected the field `postCode` to be a primitive type in the JSON string but got " + data['postCode']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['telephone'] && !(typeof data['telephone'] === 'string' || data['telephone'] instanceof String)) {
            throw new Error("Expected the field `telephone` to be a primitive type in the JSON string but got " + data['telephone']);
        }

        return true;
    }


}

OrganizationAddress.RequiredProperties = ["city", "countryCode", "firstname", "lastname", "postCode", "street"];

/**
 * @member {String} city
 */
OrganizationAddress.prototype['city'] = undefined;

/**
 * @member {String} companyName
 */
OrganizationAddress.prototype['companyName'] = undefined;

/**
 * The ISO 3166 two-letter country code
 * @member {String} countryCode
 */
OrganizationAddress.prototype['countryCode'] = undefined;

/**
 * The country name
 * @member {String} countryName
 */
OrganizationAddress.prototype['countryName'] = undefined;

/**
 * @member {String} firstname
 */
OrganizationAddress.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
OrganizationAddress.prototype['lastname'] = undefined;

/**
 * @member {String} postCode
 */
OrganizationAddress.prototype['postCode'] = undefined;

/**
 * @member {String} street
 */
OrganizationAddress.prototype['street'] = undefined;

/**
 * The telephone number e.g.
 * @member {String} telephone
 */
OrganizationAddress.prototype['telephone'] = undefined;






export default OrganizationAddress;

