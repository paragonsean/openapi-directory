/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Visibility from './Visibility';

/**
 * The Document model module.
 * @module model/Document
 * @version 1.0.2
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('ownerOrganizationId')) {
                obj['ownerOrganizationId'] = ApiClient.convertToType(data['ownerOrganizationId'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = Visibility.constructFromObject(data['visibility']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['ownerOrganizationId'] && !(typeof data['ownerOrganizationId'] === 'string' || data['ownerOrganizationId'] instanceof String)) {
            throw new Error("Expected the field `ownerOrganizationId` to be a primitive type in the JSON string but got " + data['ownerOrganizationId']);
        }
        // validate the optional field `visibility`
        if (data['visibility']) { // data not null
          Visibility.validateJSON(data['visibility']);
        }

        return true;
    }


}



/**
 * File Name
 * @member {String} filename
 */
Document.prototype['filename'] = undefined;

/**
 * Mime Type
 * @member {String} mimeType
 */
Document.prototype['mimeType'] = undefined;

/**
 * The organization's namespace which owns the document
 * @member {String} ownerOrganizationId
 */
Document.prototype['ownerOrganizationId'] = undefined;

/**
 * @member {module:model/Visibility} visibility
 */
Document.prototype['visibility'] = undefined;






export default Document;

