/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Id4iApi);
  }
}(this, function(expect, Id4iApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Id4iApi.PublicServicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PublicServicesApi', function() {
    describe('getPublicDocument', function() {
      it('should call getPublicDocument successfully', function(done) {
        //uncomment below and update the code to test getPublicDocument
        //instance.getPublicDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoutes', function() {
      it('should call getRoutes successfully', function(done) {
        //uncomment below and update the code to test getRoutes
        //instance.getRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('go', function() {
      it('should call go successfully', function(done) {
        //uncomment below and update the code to test go
        //instance.go(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllPublicDocuments', function() {
      it('should call listAllPublicDocuments successfully', function(done) {
        //uncomment below and update the code to test listAllPublicDocuments
        //instance.listAllPublicDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPublicHistory', function() {
      it('should call listPublicHistory successfully', function(done) {
        //uncomment below and update the code to test listPublicHistory
        //instance.listPublicHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOrganizationInfo', function() {
      it('should call readOrganizationInfo successfully', function(done) {
        //uncomment below and update the code to test readOrganizationInfo
        //instance.readOrganizationInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readPublicDocument', function() {
      it('should call readPublicDocument successfully', function(done) {
        //uncomment below and update the code to test readPublicDocument
        //instance.readPublicDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveImageUsingGET_0', function() {
      it('should call resolveImageUsingGET_0 successfully', function(done) {
        //uncomment below and update the code to test resolveImageUsingGET_0
        //instance.resolveImageUsingGET_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveWhoIsEntry', function() {
      it('should call resolveWhoIsEntry successfully', function(done) {
        //uncomment below and update the code to test resolveWhoIsEntry
        //instance.resolveWhoIsEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
