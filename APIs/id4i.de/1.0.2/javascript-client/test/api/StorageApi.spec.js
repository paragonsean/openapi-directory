/**
 * ID4i API
 * ID4i HTTP API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Id4iApi);
  }
}(this, function(expect, Id4iApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Id4iApi.StorageApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageApi', function() {
    describe('createDocument', function() {
      it('should call createDocument successfully', function(done) {
        //uncomment below and update the code to test createDocument
        //instance.createDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDocument', function() {
      it('should call deleteDocument successfully', function(done) {
        //uncomment below and update the code to test deleteDocument
        //instance.deleteDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocument', function() {
      it('should call getDocument successfully', function(done) {
        //uncomment below and update the code to test getDocument
        //instance.getDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicDocument_0', function() {
      it('should call getPublicDocument_0 successfully', function(done) {
        //uncomment below and update the code to test getPublicDocument_0
        //instance.getPublicDocument_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllDocuments', function() {
      it('should call listAllDocuments successfully', function(done) {
        //uncomment below and update the code to test listAllDocuments
        //instance.listAllDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllPublicDocuments_0', function() {
      it('should call listAllPublicDocuments_0 successfully', function(done) {
        //uncomment below and update the code to test listAllPublicDocuments_0
        //instance.listAllPublicDocuments_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDocuments', function() {
      it('should call listDocuments successfully', function(done) {
        //uncomment below and update the code to test listDocuments
        //instance.listDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDocument', function() {
      it('should call putDocument successfully', function(done) {
        //uncomment below and update the code to test putDocument
        //instance.putDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readDocument', function() {
      it('should call readDocument successfully', function(done) {
        //uncomment below and update the code to test readDocument
        //instance.readDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readFromMicrostorage', function() {
      it('should call readFromMicrostorage successfully', function(done) {
        //uncomment below and update the code to test readFromMicrostorage
        //instance.readFromMicrostorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readPublicDocument_0', function() {
      it('should call readPublicDocument_0 successfully', function(done) {
        //uncomment below and update the code to test readPublicDocument_0
        //instance.readPublicDocument_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDocumentMetadata', function() {
      it('should call updateDocumentMetadata successfully', function(done) {
        //uncomment below and update the code to test updateDocumentMetadata
        //instance.updateDocumentMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeToMicrostorage', function() {
      it('should call writeToMicrostorage successfully', function(done) {
        //uncomment below and update the code to test writeToMicrostorage
        //instance.writeToMicrostorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
