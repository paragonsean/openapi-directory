/**
 * ipTwist
 * The reliable, secure, and simple IP geolocation API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@iptwist.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIResponse::getCity() const {
    return m_city;
}
void OAIResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIResponse::getCountry() const {
    return m_country;
}
void OAIResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIResponse::getCountryCode() const {
    return m_country_code;
}
void OAIResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIResponse::getIp() const {
    return m_ip;
}
void OAIResponse::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIResponse::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIResponse::is_ip_Valid() const{
    return m_ip_isValid;
}

float OAIResponse::getLatitude() const {
    return m_latitude;
}
void OAIResponse::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIResponse::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIResponse::is_latitude_Valid() const{
    return m_latitude_isValid;
}

float OAIResponse::getLongitude() const {
    return m_longitude;
}
void OAIResponse::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIResponse::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIResponse::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIResponse::getState() const {
    return m_state;
}
void OAIResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIResponse::getTimezone() const {
    return m_timezone;
}
void OAIResponse::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIResponse::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIResponse::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIResponse::getZip() const {
    return m_zip;
}
void OAIResponse::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIResponse::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIResponse::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
