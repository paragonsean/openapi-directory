# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, country_code: str=None, ip: str=None, latitude: float=None, longitude: float=None, state: str=None, timezone: str=None, zip: str=None):
        """Response - a model defined in OpenAPI

        :param city: The city of this Response.
        :param country: The country of this Response.
        :param country_code: The country_code of this Response.
        :param ip: The ip of this Response.
        :param latitude: The latitude of this Response.
        :param longitude: The longitude of this Response.
        :param state: The state of this Response.
        :param timezone: The timezone of this Response.
        :param zip: The zip of this Response.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'country_code': str,
            'ip': str,
            'latitude': float,
            'longitude': float,
            'state': str,
            'timezone': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'country_code': 'country_code',
            'ip': 'ip',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'state': 'state',
            'timezone': 'timezone',
            'zip': 'zip'
        }

        self._city = city
        self._country = country
        self._country_code = country_code
        self._ip = ip
        self._latitude = latitude
        self._longitude = longitude
        self._state = state
        self._timezone = timezone
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Response.


        :return: The city of this Response.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Response.


        :param city: The city of this Response.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Response.


        :return: The country of this Response.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Response.


        :param country: The country of this Response.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Response.


        :return: The country_code of this Response.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Response.


        :param country_code: The country_code of this Response.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def ip(self):
        """Gets the ip of this Response.


        :return: The ip of this Response.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Response.


        :param ip: The ip of this Response.
        :type ip: str
        """

        self._ip = ip

    @property
    def latitude(self):
        """Gets the latitude of this Response.


        :return: The latitude of this Response.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Response.


        :param latitude: The latitude of this Response.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Response.


        :return: The longitude of this Response.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Response.


        :param longitude: The longitude of this Response.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def state(self):
        """Gets the state of this Response.


        :return: The state of this Response.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Response.


        :param state: The state of this Response.
        :type state: str
        """

        self._state = state

    @property
    def timezone(self):
        """Gets the timezone of this Response.


        :return: The timezone of this Response.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Response.


        :param timezone: The timezone of this Response.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def zip(self):
        """Gets the zip of this Response.


        :return: The zip of this Response.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Response.


        :param zip: The zip of this Response.
        :type zip: str
        """

        self._zip = zip
