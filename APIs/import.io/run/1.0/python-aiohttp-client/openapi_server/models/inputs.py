# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Inputs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, example_input: str=None, url: str=None):
        """Inputs - a model defined in OpenAPI

        :param example_input: The example_input of this Inputs.
        :param url: The url of this Inputs.
        """
        self.openapi_types = {
            'example_input': str,
            'url': str
        }

        self.attribute_map = {
            'example_input': 'Example Input',
            'url': '_url'
        }

        self._example_input = example_input
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Inputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Inputs of this Inputs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def example_input(self):
        """Gets the example_input of this Inputs.


        :return: The example_input of this Inputs.
        :rtype: str
        """
        return self._example_input

    @example_input.setter
    def example_input(self, example_input):
        """Sets the example_input of this Inputs.


        :param example_input: The example_input of this Inputs.
        :type example_input: str
        """

        self._example_input = example_input

    @property
    def url(self):
        """Gets the url of this Inputs.


        :return: The url of this Inputs.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Inputs.


        :param url: The url of this Inputs.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
