/*
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:57.108274-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResponse {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_EXCEPTION_TYPE = "exceptionType";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_TYPE)
  private String exceptionType;

  public static final String SERIALIZED_NAME_EXTRACTOR_DATA = "extractorData";
  @SerializedName(SERIALIZED_NAME_EXTRACTOR_DATA)
  private Object extractorData;

  public static final String SERIALIZED_NAME_PAGE_DATA = "pageData";
  @SerializedName(SERIALIZED_NAME_PAGE_DATA)
  private Object pageData;

  public static final String SERIALIZED_NAME_RUNTIME_CONFIG_ID = "runtimeConfigId";
  @SerializedName(SERIALIZED_NAME_RUNTIME_CONFIG_ID)
  private String runtimeConfigId;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public QueryResponse() {
  }

  public QueryResponse error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public QueryResponse exceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
    return this;
  }

  /**
   * Get exceptionType
   * @return exceptionType
   */
  @javax.annotation.Nullable
  public String getExceptionType() {
    return exceptionType;
  }

  public void setExceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
  }


  public QueryResponse extractorData(Object extractorData) {
    this.extractorData = extractorData;
    return this;
  }

  /**
   * Get extractorData
   * @return extractorData
   */
  @javax.annotation.Nullable
  public Object getExtractorData() {
    return extractorData;
  }

  public void setExtractorData(Object extractorData) {
    this.extractorData = extractorData;
  }


  public QueryResponse pageData(Object pageData) {
    this.pageData = pageData;
    return this;
  }

  /**
   * Get pageData
   * @return pageData
   */
  @javax.annotation.Nullable
  public Object getPageData() {
    return pageData;
  }

  public void setPageData(Object pageData) {
    this.pageData = pageData;
  }


  public QueryResponse runtimeConfigId(String runtimeConfigId) {
    this.runtimeConfigId = runtimeConfigId;
    return this;
  }

  /**
   * Get runtimeConfigId
   * @return runtimeConfigId
   */
  @javax.annotation.Nullable
  public String getRuntimeConfigId() {
    return runtimeConfigId;
  }

  public void setRuntimeConfigId(String runtimeConfigId) {
    this.runtimeConfigId = runtimeConfigId;
  }


  public QueryResponse sequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Get sequenceNumber
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public QueryResponse timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public QueryResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponse queryResponse = (QueryResponse) o;
    return Objects.equals(this.error, queryResponse.error) &&
        Objects.equals(this.exceptionType, queryResponse.exceptionType) &&
        Objects.equals(this.extractorData, queryResponse.extractorData) &&
        Objects.equals(this.pageData, queryResponse.pageData) &&
        Objects.equals(this.runtimeConfigId, queryResponse.runtimeConfigId) &&
        Objects.equals(this.sequenceNumber, queryResponse.sequenceNumber) &&
        Objects.equals(this.timestamp, queryResponse.timestamp) &&
        Objects.equals(this.url, queryResponse.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, exceptionType, extractorData, pageData, runtimeConfigId, sequenceNumber, timestamp, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponse {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    exceptionType: ").append(toIndentedString(exceptionType)).append("\n");
    sb.append("    extractorData: ").append(toIndentedString(extractorData)).append("\n");
    sb.append("    pageData: ").append(toIndentedString(pageData)).append("\n");
    sb.append("    runtimeConfigId: ").append(toIndentedString(runtimeConfigId)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("exceptionType");
    openapiFields.add("extractorData");
    openapiFields.add("pageData");
    openapiFields.add("runtimeConfigId");
    openapiFields.add("sequenceNumber");
    openapiFields.add("timestamp");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResponse is not found in the empty JSON string", QueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("exceptionType") != null && !jsonObj.get("exceptionType").isJsonNull()) && !jsonObj.get("exceptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionType").toString()));
      }
      if ((jsonObj.get("runtimeConfigId") != null && !jsonObj.get("runtimeConfigId").isJsonNull()) && !jsonObj.get("runtimeConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeConfigId").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResponse>() {
           @Override
           public void write(JsonWriter out, QueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResponse
   * @throws IOException if the JSON string is invalid with respect to QueryResponse
   */
  public static QueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResponse.class);
  }

  /**
   * Convert an instance of QueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

