/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectStoreSearchResult_hits_hits_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectStoreSearchResult_hits_hits_inner::OAIObjectStoreSearchResult_hits_hits_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectStoreSearchResult_hits_hits_inner::OAIObjectStoreSearchResult_hits_hits_inner() {
    this->initializeModel();
}

OAIObjectStoreSearchResult_hits_hits_inner::~OAIObjectStoreSearchResult_hits_hits_inner() {}

void OAIObjectStoreSearchResult_hits_hits_inner::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m__score_isSet = false;
    m__score_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;
}

void OAIObjectStoreSearchResult_hits_hits_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectStoreSearchResult_hits_hits_inner::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m__score_isValid = ::OpenAPI::fromJsonValue(m__score, json[QString("_score")]);
    m__score_isSet = !json[QString("_score")].isNull() && m__score_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;
}

QString OAIObjectStoreSearchResult_hits_hits_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectStoreSearchResult_hits_hits_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m__score_isSet) {
        obj.insert(QString("_score"), ::OpenAPI::toJsonValue(m__score));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    return obj;
}

QString OAIObjectStoreSearchResult_hits_hits_inner::getId() const {
    return m__id;
}
void OAIObjectStoreSearchResult_hits_hits_inner::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__id_Set() const{
    return m__id_isSet;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAIObjectStoreSearchResult_hits_hits_inner::getScore() const {
    return m__score;
}
void OAIObjectStoreSearchResult_hits_hits_inner::setScore(const qint32 &_score) {
    m__score = _score;
    m__score_isSet = true;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__score_Set() const{
    return m__score_isSet;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__score_Valid() const{
    return m__score_isValid;
}

QString OAIObjectStoreSearchResult_hits_hits_inner::getType() const {
    return m__type;
}
void OAIObjectStoreSearchResult_hits_hits_inner::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__type_Set() const{
    return m__type_isSet;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is__type_Valid() const{
    return m__type_isValid;
}

OAICrawlRun OAIObjectStoreSearchResult_hits_hits_inner::getFields() const {
    return m_fields;
}
void OAIObjectStoreSearchResult_hits_hits_inner::setFields(const OAICrawlRun &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectStoreSearchResult_hits_hits_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
