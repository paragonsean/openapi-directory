/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlRun::OAICrawlRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlRun::OAICrawlRun() {
    this->initializeModel();
}

OAICrawlRun::~OAICrawlRun() {}

void OAICrawlRun::initializeModel() {

    m_extractor_id_isSet = false;
    m_extractor_id_isValid = false;

    m_failed_url_count_isSet = false;
    m_failed_url_count_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_runtime_config_id_isSet = false;
    m_runtime_config_id_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stopped_at_isSet = false;
    m_stopped_at_isValid = false;

    m_success_url_count_isSet = false;
    m_success_url_count_isValid = false;

    m_total_url_count_isSet = false;
    m_total_url_count_isValid = false;

    m_url_list_id_isSet = false;
    m_url_list_id_isValid = false;
}

void OAICrawlRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlRun::fromJsonObject(QJsonObject json) {

    m_extractor_id_isValid = ::OpenAPI::fromJsonValue(m_extractor_id, json[QString("extractorId")]);
    m_extractor_id_isSet = !json[QString("extractorId")].isNull() && m_extractor_id_isValid;

    m_failed_url_count_isValid = ::OpenAPI::fromJsonValue(m_failed_url_count, json[QString("failedUrlCount")]);
    m_failed_url_count_isSet = !json[QString("failedUrlCount")].isNull() && m_failed_url_count_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_runtime_config_id_isValid = ::OpenAPI::fromJsonValue(m_runtime_config_id, json[QString("runtimeConfigId")]);
    m_runtime_config_id_isSet = !json[QString("runtimeConfigId")].isNull() && m_runtime_config_id_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_stopped_at, json[QString("stoppedAt")]);
    m_stopped_at_isSet = !json[QString("stoppedAt")].isNull() && m_stopped_at_isValid;

    m_success_url_count_isValid = ::OpenAPI::fromJsonValue(m_success_url_count, json[QString("successUrlCount")]);
    m_success_url_count_isSet = !json[QString("successUrlCount")].isNull() && m_success_url_count_isValid;

    m_total_url_count_isValid = ::OpenAPI::fromJsonValue(m_total_url_count, json[QString("totalUrlCount")]);
    m_total_url_count_isSet = !json[QString("totalUrlCount")].isNull() && m_total_url_count_isValid;

    m_url_list_id_isValid = ::OpenAPI::fromJsonValue(m_url_list_id, json[QString("urlListId")]);
    m_url_list_id_isSet = !json[QString("urlListId")].isNull() && m_url_list_id_isValid;
}

QString OAICrawlRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlRun::asJsonObject() const {
    QJsonObject obj;
    if (m_extractor_id_isSet) {
        obj.insert(QString("extractorId"), ::OpenAPI::toJsonValue(m_extractor_id));
    }
    if (m_failed_url_count_isSet) {
        obj.insert(QString("failedUrlCount"), ::OpenAPI::toJsonValue(m_failed_url_count));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_runtime_config_id_isSet) {
        obj.insert(QString("runtimeConfigId"), ::OpenAPI::toJsonValue(m_runtime_config_id));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stopped_at_isSet) {
        obj.insert(QString("stoppedAt"), ::OpenAPI::toJsonValue(m_stopped_at));
    }
    if (m_success_url_count_isSet) {
        obj.insert(QString("successUrlCount"), ::OpenAPI::toJsonValue(m_success_url_count));
    }
    if (m_total_url_count_isSet) {
        obj.insert(QString("totalUrlCount"), ::OpenAPI::toJsonValue(m_total_url_count));
    }
    if (m_url_list_id_isSet) {
        obj.insert(QString("urlListId"), ::OpenAPI::toJsonValue(m_url_list_id));
    }
    return obj;
}

QString OAICrawlRun::getExtractorId() const {
    return m_extractor_id;
}
void OAICrawlRun::setExtractorId(const QString &extractor_id) {
    m_extractor_id = extractor_id;
    m_extractor_id_isSet = true;
}

bool OAICrawlRun::is_extractor_id_Set() const{
    return m_extractor_id_isSet;
}

bool OAICrawlRun::is_extractor_id_Valid() const{
    return m_extractor_id_isValid;
}

qint32 OAICrawlRun::getFailedUrlCount() const {
    return m_failed_url_count;
}
void OAICrawlRun::setFailedUrlCount(const qint32 &failed_url_count) {
    m_failed_url_count = failed_url_count;
    m_failed_url_count_isSet = true;
}

bool OAICrawlRun::is_failed_url_count_Set() const{
    return m_failed_url_count_isSet;
}

bool OAICrawlRun::is_failed_url_count_Valid() const{
    return m_failed_url_count_isValid;
}

QString OAICrawlRun::getGuid() const {
    return m_guid;
}
void OAICrawlRun::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAICrawlRun::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAICrawlRun::is_guid_Valid() const{
    return m_guid_isValid;
}

qint32 OAICrawlRun::getRowCount() const {
    return m_row_count;
}
void OAICrawlRun::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAICrawlRun::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAICrawlRun::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QString OAICrawlRun::getRuntimeConfigId() const {
    return m_runtime_config_id;
}
void OAICrawlRun::setRuntimeConfigId(const QString &runtime_config_id) {
    m_runtime_config_id = runtime_config_id;
    m_runtime_config_id_isSet = true;
}

bool OAICrawlRun::is_runtime_config_id_Set() const{
    return m_runtime_config_id_isSet;
}

bool OAICrawlRun::is_runtime_config_id_Valid() const{
    return m_runtime_config_id_isValid;
}

qint64 OAICrawlRun::getStartedAt() const {
    return m_started_at;
}
void OAICrawlRun::setStartedAt(const qint64 &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICrawlRun::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICrawlRun::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICrawlRun::getState() const {
    return m_state;
}
void OAICrawlRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICrawlRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAICrawlRun::is_state_Valid() const{
    return m_state_isValid;
}

qint64 OAICrawlRun::getStoppedAt() const {
    return m_stopped_at;
}
void OAICrawlRun::setStoppedAt(const qint64 &stopped_at) {
    m_stopped_at = stopped_at;
    m_stopped_at_isSet = true;
}

bool OAICrawlRun::is_stopped_at_Set() const{
    return m_stopped_at_isSet;
}

bool OAICrawlRun::is_stopped_at_Valid() const{
    return m_stopped_at_isValid;
}

qint32 OAICrawlRun::getSuccessUrlCount() const {
    return m_success_url_count;
}
void OAICrawlRun::setSuccessUrlCount(const qint32 &success_url_count) {
    m_success_url_count = success_url_count;
    m_success_url_count_isSet = true;
}

bool OAICrawlRun::is_success_url_count_Set() const{
    return m_success_url_count_isSet;
}

bool OAICrawlRun::is_success_url_count_Valid() const{
    return m_success_url_count_isValid;
}

qint32 OAICrawlRun::getTotalUrlCount() const {
    return m_total_url_count;
}
void OAICrawlRun::setTotalUrlCount(const qint32 &total_url_count) {
    m_total_url_count = total_url_count;
    m_total_url_count_isSet = true;
}

bool OAICrawlRun::is_total_url_count_Set() const{
    return m_total_url_count_isSet;
}

bool OAICrawlRun::is_total_url_count_Valid() const{
    return m_total_url_count_isValid;
}

QString OAICrawlRun::getUrlListId() const {
    return m_url_list_id;
}
void OAICrawlRun::setUrlListId(const QString &url_list_id) {
    m_url_list_id = url_list_id;
    m_url_list_id_isSet = true;
}

bool OAICrawlRun::is_url_list_id_Set() const{
    return m_url_list_id_isSet;
}

bool OAICrawlRun::is_url_list_id_Valid() const{
    return m_url_list_id_isValid;
}

bool OAICrawlRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extractor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_url_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_url_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_url_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
