/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule_intervalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule_intervalData::OAISchedule_intervalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule_intervalData::OAISchedule_intervalData() {
    this->initializeModel();
}

OAISchedule_intervalData::~OAISchedule_intervalData() {}

void OAISchedule_intervalData::initializeModel() {

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchedule_intervalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule_intervalData::fromJsonObject(QJsonObject json) {

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchedule_intervalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule_intervalData::asJsonObject() const {
    QJsonObject obj;
    if (m_minutes_isSet) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISchedule_intervalData::getMinutes() const {
    return m_minutes;
}
void OAISchedule_intervalData::setMinutes(const QString &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAISchedule_intervalData::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAISchedule_intervalData::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QString OAISchedule_intervalData::getTime() const {
    return m_time;
}
void OAISchedule_intervalData::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAISchedule_intervalData::is_time_Set() const{
    return m_time_isSet;
}

bool OAISchedule_intervalData::is_time_Valid() const{
    return m_time_isValid;
}

QString OAISchedule_intervalData::getType() const {
    return m_type;
}
void OAISchedule_intervalData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchedule_intervalData::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchedule_intervalData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchedule_intervalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule_intervalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
