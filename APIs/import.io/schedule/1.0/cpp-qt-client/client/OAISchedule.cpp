/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_extractor_id_isSet = false;
    m_extractor_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_data_isSet = false;
    m_interval_data_isValid = false;

    m_next_run_at_isSet = false;
    m_next_run_at_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_extractor_id_isValid = ::OpenAPI::fromJsonValue(m_extractor_id, json[QString("extractorId")]);
    m_extractor_id_isSet = !json[QString("extractorId")].isNull() && m_extractor_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_data_isValid = ::OpenAPI::fromJsonValue(m_interval_data, json[QString("intervalData")]);
    m_interval_data_isSet = !json[QString("intervalData")].isNull() && m_interval_data_isValid;

    m_next_run_at_isValid = ::OpenAPI::fromJsonValue(m_next_run_at, json[QString("nextRunAt")]);
    m_next_run_at_isSet = !json[QString("nextRunAt")].isNull() && m_next_run_at_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("startTimestamp")]);
    m_start_timestamp_isSet = !json[QString("startTimestamp")].isNull() && m_start_timestamp_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_extractor_id_isSet) {
        obj.insert(QString("extractorId"), ::OpenAPI::toJsonValue(m_extractor_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_data.isSet()) {
        obj.insert(QString("intervalData"), ::OpenAPI::toJsonValue(m_interval_data));
    }
    if (m_next_run_at_isSet) {
        obj.insert(QString("nextRunAt"), ::OpenAPI::toJsonValue(m_next_run_at));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("startTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    return obj;
}

QString OAISchedule::getExtractorId() const {
    return m_extractor_id;
}
void OAISchedule::setExtractorId(const QString &extractor_id) {
    m_extractor_id = extractor_id;
    m_extractor_id_isSet = true;
}

bool OAISchedule::is_extractor_id_Set() const{
    return m_extractor_id_isSet;
}

bool OAISchedule::is_extractor_id_Valid() const{
    return m_extractor_id_isValid;
}

QString OAISchedule::getInterval() const {
    return m_interval;
}
void OAISchedule::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISchedule::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISchedule::is_interval_Valid() const{
    return m_interval_isValid;
}

OAISchedule_intervalData OAISchedule::getIntervalData() const {
    return m_interval_data;
}
void OAISchedule::setIntervalData(const OAISchedule_intervalData &interval_data) {
    m_interval_data = interval_data;
    m_interval_data_isSet = true;
}

bool OAISchedule::is_interval_data_Set() const{
    return m_interval_data_isSet;
}

bool OAISchedule::is_interval_data_Valid() const{
    return m_interval_data_isValid;
}

qint64 OAISchedule::getNextRunAt() const {
    return m_next_run_at;
}
void OAISchedule::setNextRunAt(const qint64 &next_run_at) {
    m_next_run_at = next_run_at;
    m_next_run_at_isSet = true;
}

bool OAISchedule::is_next_run_at_Set() const{
    return m_next_run_at_isSet;
}

bool OAISchedule::is_next_run_at_Valid() const{
    return m_next_run_at_isValid;
}

QString OAISchedule::getOwnerId() const {
    return m_owner_id;
}
void OAISchedule::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAISchedule::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISchedule::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

qint64 OAISchedule::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAISchedule::setStartTimestamp(const qint64 &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAISchedule::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAISchedule::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extractor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
