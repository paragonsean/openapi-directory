/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIReport::getConfigId() const {
    return m_config_id;
}
void OAIReport::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAIReport::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAIReport::is_config_id_Valid() const{
    return m_config_id_isValid;
}

QString OAIReport::getGuid() const {
    return m_guid;
}
void OAIReport::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIReport::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIReport::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIReport::getName() const {
    return m_name;
}
void OAIReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReport::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIReport::isPublished() const {
    return m_published;
}
void OAIReport::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIReport::is_published_Set() const{
    return m_published_isSet;
}

bool OAIReport::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIReport::getReportId() const {
    return m_report_id;
}
void OAIReport::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIReport::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIReport::is_report_id_Valid() const{
    return m_report_id_isValid;
}

QString OAIReport::getStatus() const {
    return m_status;
}
void OAIReport::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReport::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIReport::getSummary() const {
    return m_summary;
}
void OAIReport::setSummary(const OAIObject &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIReport::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIReport::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIReport::getType() const {
    return m_type;
}
void OAIReport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReport::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
