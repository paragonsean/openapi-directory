/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduleImportIoApi_H
#define OAI_OAIScheduleImportIoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAISchedule.h"
#include "OAIScheduleRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduleImportIoApi : public QObject {
    Q_OBJECT

public:
    OAIScheduleImportIoApi(const int timeOut = 0);
    ~OAIScheduleImportIoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  extractor_id QString [required]
    */
    virtual void extractorExtractorIdDelete(const QString &extractor_id);

    /**
    * @param[in]  extractor_id QString [required]
    */
    virtual void extractorExtractorIdGet(const QString &extractor_id);


    virtual void extractorGet();

    /**
    * @param[in]  schedule_request_body OAIScheduleRequest [required]
    */
    virtual void extractorPost(const OAIScheduleRequest &schedule_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extractorExtractorIdDeleteCallback(OAIHttpRequestWorker *worker);
    void extractorExtractorIdGetCallback(OAIHttpRequestWorker *worker);
    void extractorGetCallback(OAIHttpRequestWorker *worker);
    void extractorPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extractorExtractorIdDeleteSignal();
    void extractorExtractorIdGetSignal(OAISchedule summary);
    void extractorGetSignal(OAISchedule summary);
    void extractorPostSignal(OAISchedule summary);


    void extractorExtractorIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void extractorExtractorIdGetSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void extractorGetSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void extractorPostSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use extractorExtractorIdDeleteSignalError() instead")
    void extractorExtractorIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extractorExtractorIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorExtractorIdGetSignalError() instead")
    void extractorExtractorIdGetSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorExtractorIdGetSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorGetSignalError() instead")
    void extractorGetSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorGetSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorPostSignalError() instead")
    void extractorPostSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorPostSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extractorExtractorIdDeleteSignalErrorFull() instead")
    void extractorExtractorIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorExtractorIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorExtractorIdGetSignalErrorFull() instead")
    void extractorExtractorIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorExtractorIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorGetSignalErrorFull() instead")
    void extractorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractorPostSignalErrorFull() instead")
    void extractorPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractorPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
