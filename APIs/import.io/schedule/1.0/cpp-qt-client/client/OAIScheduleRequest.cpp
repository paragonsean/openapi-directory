/**
 * import.io
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRequest::OAIScheduleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRequest::OAIScheduleRequest() {
    this->initializeModel();
}

OAIScheduleRequest::~OAIScheduleRequest() {}

void OAIScheduleRequest::initializeModel() {

    m_extractor_id_isSet = false;
    m_extractor_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;
}

void OAIScheduleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRequest::fromJsonObject(QJsonObject json) {

    m_extractor_id_isValid = ::OpenAPI::fromJsonValue(m_extractor_id, json[QString("extractorId")]);
    m_extractor_id_isSet = !json[QString("extractorId")].isNull() && m_extractor_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("startTimestamp")]);
    m_start_timestamp_isSet = !json[QString("startTimestamp")].isNull() && m_start_timestamp_isValid;
}

QString OAIScheduleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_extractor_id_isSet) {
        obj.insert(QString("extractorId"), ::OpenAPI::toJsonValue(m_extractor_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("startTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    return obj;
}

QString OAIScheduleRequest::getExtractorId() const {
    return m_extractor_id;
}
void OAIScheduleRequest::setExtractorId(const QString &extractor_id) {
    m_extractor_id = extractor_id;
    m_extractor_id_isSet = true;
}

bool OAIScheduleRequest::is_extractor_id_Set() const{
    return m_extractor_id_isSet;
}

bool OAIScheduleRequest::is_extractor_id_Valid() const{
    return m_extractor_id_isValid;
}

QString OAIScheduleRequest::getInterval() const {
    return m_interval;
}
void OAIScheduleRequest::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIScheduleRequest::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIScheduleRequest::is_interval_Valid() const{
    return m_interval_isValid;
}

qint64 OAIScheduleRequest::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIScheduleRequest::setStartTimestamp(const qint64 &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIScheduleRequest::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIScheduleRequest::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

bool OAIScheduleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extractor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_extractor_id_isValid && m_interval_isValid && true;
}

} // namespace OpenAPI
