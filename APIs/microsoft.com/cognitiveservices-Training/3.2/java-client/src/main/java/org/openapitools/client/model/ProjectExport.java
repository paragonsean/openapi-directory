/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents information about a project export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:05.173515-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectExport {
  public static final String SERIALIZED_NAME_ESTIMATED_IMPORT_TIME_IN_M_S = "estimatedImportTimeInMS";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_IMPORT_TIME_IN_M_S)
  private Integer estimatedImportTimeInMS;

  public static final String SERIALIZED_NAME_IMAGE_COUNT = "imageCount";
  @SerializedName(SERIALIZED_NAME_IMAGE_COUNT)
  private Integer imageCount;

  public static final String SERIALIZED_NAME_ITERATION_COUNT = "iterationCount";
  @SerializedName(SERIALIZED_NAME_ITERATION_COUNT)
  private Integer iterationCount;

  public static final String SERIALIZED_NAME_REGION_COUNT = "regionCount";
  @SerializedName(SERIALIZED_NAME_REGION_COUNT)
  private Integer regionCount;

  public static final String SERIALIZED_NAME_TAG_COUNT = "tagCount";
  @SerializedName(SERIALIZED_NAME_TAG_COUNT)
  private Integer tagCount;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public ProjectExport() {
  }

  public ProjectExport(
     Integer estimatedImportTimeInMS, 
     Integer imageCount, 
     Integer iterationCount, 
     Integer regionCount, 
     Integer tagCount, 
     String token
  ) {
    this();
    this.estimatedImportTimeInMS = estimatedImportTimeInMS;
    this.imageCount = imageCount;
    this.iterationCount = iterationCount;
    this.regionCount = regionCount;
    this.tagCount = tagCount;
    this.token = token;
  }

  /**
   * Estimated time this project will take to import, can change based on network connectivity and load between  source and destination regions.
   * @return estimatedImportTimeInMS
   */
  @javax.annotation.Nullable
  public Integer getEstimatedImportTimeInMS() {
    return estimatedImportTimeInMS;
  }



  /**
   * Count of images that will be exported.
   * @return imageCount
   */
  @javax.annotation.Nullable
  public Integer getImageCount() {
    return imageCount;
  }



  /**
   * Count of iterations that will be exported.
   * @return iterationCount
   */
  @javax.annotation.Nullable
  public Integer getIterationCount() {
    return iterationCount;
  }



  /**
   * Count of regions that will be exported.
   * @return regionCount
   */
  @javax.annotation.Nullable
  public Integer getRegionCount() {
    return regionCount;
  }



  /**
   * Count of tags that will be exported.
   * @return tagCount
   */
  @javax.annotation.Nullable
  public Integer getTagCount() {
    return tagCount;
  }



  /**
   * Opaque token that should be passed to ImportProject to perform the import. This token grants access to import this  project to all that have the token.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectExport projectExport = (ProjectExport) o;
    return Objects.equals(this.estimatedImportTimeInMS, projectExport.estimatedImportTimeInMS) &&
        Objects.equals(this.imageCount, projectExport.imageCount) &&
        Objects.equals(this.iterationCount, projectExport.iterationCount) &&
        Objects.equals(this.regionCount, projectExport.regionCount) &&
        Objects.equals(this.tagCount, projectExport.tagCount) &&
        Objects.equals(this.token, projectExport.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedImportTimeInMS, imageCount, iterationCount, regionCount, tagCount, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectExport {\n");
    sb.append("    estimatedImportTimeInMS: ").append(toIndentedString(estimatedImportTimeInMS)).append("\n");
    sb.append("    imageCount: ").append(toIndentedString(imageCount)).append("\n");
    sb.append("    iterationCount: ").append(toIndentedString(iterationCount)).append("\n");
    sb.append("    regionCount: ").append(toIndentedString(regionCount)).append("\n");
    sb.append("    tagCount: ").append(toIndentedString(tagCount)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimatedImportTimeInMS");
    openapiFields.add("imageCount");
    openapiFields.add("iterationCount");
    openapiFields.add("regionCount");
    openapiFields.add("tagCount");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectExport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectExport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectExport is not found in the empty JSON string", ProjectExport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectExport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectExport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectExport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectExport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectExport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectExport.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectExport>() {
           @Override
           public void write(JsonWriter out, ProjectExport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectExport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectExport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectExport
   * @throws IOException if the JSON string is invalid with respect to ProjectExport
   */
  public static ProjectExport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectExport.class);
  }

  /**
   * Convert an instance of ProjectExport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

