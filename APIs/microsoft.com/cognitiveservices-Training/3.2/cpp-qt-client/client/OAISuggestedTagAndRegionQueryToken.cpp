/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestedTagAndRegionQueryToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestedTagAndRegionQueryToken::OAISuggestedTagAndRegionQueryToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestedTagAndRegionQueryToken::OAISuggestedTagAndRegionQueryToken() {
    this->initializeModel();
}

OAISuggestedTagAndRegionQueryToken::~OAISuggestedTagAndRegionQueryToken() {}

void OAISuggestedTagAndRegionQueryToken::initializeModel() {

    m_continuation_isSet = false;
    m_continuation_isValid = false;

    m_max_count_isSet = false;
    m_max_count_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_tag_ids_isSet = false;
    m_tag_ids_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAISuggestedTagAndRegionQueryToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestedTagAndRegionQueryToken::fromJsonObject(QJsonObject json) {

    m_continuation_isValid = ::OpenAPI::fromJsonValue(m_continuation, json[QString("continuation")]);
    m_continuation_isSet = !json[QString("continuation")].isNull() && m_continuation_isValid;

    m_max_count_isValid = ::OpenAPI::fromJsonValue(m_max_count, json[QString("maxCount")]);
    m_max_count_isSet = !json[QString("maxCount")].isNull() && m_max_count_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_tag_ids_isValid = ::OpenAPI::fromJsonValue(m_tag_ids, json[QString("tagIds")]);
    m_tag_ids_isSet = !json[QString("tagIds")].isNull() && m_tag_ids_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAISuggestedTagAndRegionQueryToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestedTagAndRegionQueryToken::asJsonObject() const {
    QJsonObject obj;
    if (m_continuation_isSet) {
        obj.insert(QString("continuation"), ::OpenAPI::toJsonValue(m_continuation));
    }
    if (m_max_count_isSet) {
        obj.insert(QString("maxCount"), ::OpenAPI::toJsonValue(m_max_count));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_tag_ids.size() > 0) {
        obj.insert(QString("tagIds"), ::OpenAPI::toJsonValue(m_tag_ids));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

QString OAISuggestedTagAndRegionQueryToken::getContinuation() const {
    return m_continuation;
}
void OAISuggestedTagAndRegionQueryToken::setContinuation(const QString &continuation) {
    m_continuation = continuation;
    m_continuation_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_continuation_Set() const{
    return m_continuation_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_continuation_Valid() const{
    return m_continuation_isValid;
}

qint32 OAISuggestedTagAndRegionQueryToken::getMaxCount() const {
    return m_max_count;
}
void OAISuggestedTagAndRegionQueryToken::setMaxCount(const qint32 &max_count) {
    m_max_count = max_count;
    m_max_count_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_max_count_Set() const{
    return m_max_count_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_max_count_Valid() const{
    return m_max_count_isValid;
}

QString OAISuggestedTagAndRegionQueryToken::getSession() const {
    return m_session;
}
void OAISuggestedTagAndRegionQueryToken::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_session_Set() const{
    return m_session_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_session_Valid() const{
    return m_session_isValid;
}

QString OAISuggestedTagAndRegionQueryToken::getSortBy() const {
    return m_sort_by;
}
void OAISuggestedTagAndRegionQueryToken::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QList<QString> OAISuggestedTagAndRegionQueryToken::getTagIds() const {
    return m_tag_ids;
}
void OAISuggestedTagAndRegionQueryToken::setTagIds(const QList<QString> &tag_ids) {
    m_tag_ids = tag_ids;
    m_tag_ids_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_tag_ids_Set() const{
    return m_tag_ids_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_tag_ids_Valid() const{
    return m_tag_ids_isValid;
}

double OAISuggestedTagAndRegionQueryToken::getThreshold() const {
    return m_threshold;
}
void OAISuggestedTagAndRegionQueryToken::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAISuggestedTagAndRegionQueryToken::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAISuggestedTagAndRegionQueryToken::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAISuggestedTagAndRegionQueryToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continuation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestedTagAndRegionQueryToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
