/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectExport::OAIProjectExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectExport::OAIProjectExport() {
    this->initializeModel();
}

OAIProjectExport::~OAIProjectExport() {}

void OAIProjectExport::initializeModel() {

    m_estimated_import_time_in_ms_isSet = false;
    m_estimated_import_time_in_ms_isValid = false;

    m_image_count_isSet = false;
    m_image_count_isValid = false;

    m_iteration_count_isSet = false;
    m_iteration_count_isValid = false;

    m_region_count_isSet = false;
    m_region_count_isValid = false;

    m_tag_count_isSet = false;
    m_tag_count_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIProjectExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectExport::fromJsonObject(QJsonObject json) {

    m_estimated_import_time_in_ms_isValid = ::OpenAPI::fromJsonValue(m_estimated_import_time_in_ms, json[QString("estimatedImportTimeInMS")]);
    m_estimated_import_time_in_ms_isSet = !json[QString("estimatedImportTimeInMS")].isNull() && m_estimated_import_time_in_ms_isValid;

    m_image_count_isValid = ::OpenAPI::fromJsonValue(m_image_count, json[QString("imageCount")]);
    m_image_count_isSet = !json[QString("imageCount")].isNull() && m_image_count_isValid;

    m_iteration_count_isValid = ::OpenAPI::fromJsonValue(m_iteration_count, json[QString("iterationCount")]);
    m_iteration_count_isSet = !json[QString("iterationCount")].isNull() && m_iteration_count_isValid;

    m_region_count_isValid = ::OpenAPI::fromJsonValue(m_region_count, json[QString("regionCount")]);
    m_region_count_isSet = !json[QString("regionCount")].isNull() && m_region_count_isValid;

    m_tag_count_isValid = ::OpenAPI::fromJsonValue(m_tag_count, json[QString("tagCount")]);
    m_tag_count_isSet = !json[QString("tagCount")].isNull() && m_tag_count_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIProjectExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectExport::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_import_time_in_ms_isSet) {
        obj.insert(QString("estimatedImportTimeInMS"), ::OpenAPI::toJsonValue(m_estimated_import_time_in_ms));
    }
    if (m_image_count_isSet) {
        obj.insert(QString("imageCount"), ::OpenAPI::toJsonValue(m_image_count));
    }
    if (m_iteration_count_isSet) {
        obj.insert(QString("iterationCount"), ::OpenAPI::toJsonValue(m_iteration_count));
    }
    if (m_region_count_isSet) {
        obj.insert(QString("regionCount"), ::OpenAPI::toJsonValue(m_region_count));
    }
    if (m_tag_count_isSet) {
        obj.insert(QString("tagCount"), ::OpenAPI::toJsonValue(m_tag_count));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

qint32 OAIProjectExport::getEstimatedImportTimeInMs() const {
    return m_estimated_import_time_in_ms;
}
void OAIProjectExport::setEstimatedImportTimeInMs(const qint32 &estimated_import_time_in_ms) {
    m_estimated_import_time_in_ms = estimated_import_time_in_ms;
    m_estimated_import_time_in_ms_isSet = true;
}

bool OAIProjectExport::is_estimated_import_time_in_ms_Set() const{
    return m_estimated_import_time_in_ms_isSet;
}

bool OAIProjectExport::is_estimated_import_time_in_ms_Valid() const{
    return m_estimated_import_time_in_ms_isValid;
}

qint32 OAIProjectExport::getImageCount() const {
    return m_image_count;
}
void OAIProjectExport::setImageCount(const qint32 &image_count) {
    m_image_count = image_count;
    m_image_count_isSet = true;
}

bool OAIProjectExport::is_image_count_Set() const{
    return m_image_count_isSet;
}

bool OAIProjectExport::is_image_count_Valid() const{
    return m_image_count_isValid;
}

qint32 OAIProjectExport::getIterationCount() const {
    return m_iteration_count;
}
void OAIProjectExport::setIterationCount(const qint32 &iteration_count) {
    m_iteration_count = iteration_count;
    m_iteration_count_isSet = true;
}

bool OAIProjectExport::is_iteration_count_Set() const{
    return m_iteration_count_isSet;
}

bool OAIProjectExport::is_iteration_count_Valid() const{
    return m_iteration_count_isValid;
}

qint32 OAIProjectExport::getRegionCount() const {
    return m_region_count;
}
void OAIProjectExport::setRegionCount(const qint32 &region_count) {
    m_region_count = region_count;
    m_region_count_isSet = true;
}

bool OAIProjectExport::is_region_count_Set() const{
    return m_region_count_isSet;
}

bool OAIProjectExport::is_region_count_Valid() const{
    return m_region_count_isValid;
}

qint32 OAIProjectExport::getTagCount() const {
    return m_tag_count;
}
void OAIProjectExport::setTagCount(const qint32 &tag_count) {
    m_tag_count = tag_count;
    m_tag_count_isSet = true;
}

bool OAIProjectExport::is_tag_count_Set() const{
    return m_tag_count_isSet;
}

bool OAIProjectExport::is_tag_count_Valid() const{
    return m_tag_count_isValid;
}

QString OAIProjectExport::getToken() const {
    return m_token;
}
void OAIProjectExport::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIProjectExport::is_token_Set() const{
    return m_token_isSet;
}

bool OAIProjectExport::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIProjectExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_import_time_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iteration_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
