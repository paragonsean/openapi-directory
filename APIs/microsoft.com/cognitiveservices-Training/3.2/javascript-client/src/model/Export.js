/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Export model module.
 * @module model/Export
 * @version 3.2
 */
class Export {
    /**
     * Constructs a new <code>Export</code>.
     * @alias module:model/Export
     */
    constructor() { 
        
        Export.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Export</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Export} obj Optional instance to populate.
     * @return {module:model/Export} The populated <code>Export</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Export();

            if (data.hasOwnProperty('downloadUri')) {
                obj['downloadUri'] = ApiClient.convertToType(data['downloadUri'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = ApiClient.convertToType(data['flavor'], 'String');
            }
            if (data.hasOwnProperty('newerVersionAvailable')) {
                obj['newerVersionAvailable'] = ApiClient.convertToType(data['newerVersionAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Export</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Export</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['downloadUri'] && !(typeof data['downloadUri'] === 'string' || data['downloadUri'] instanceof String)) {
            throw new Error("Expected the field `downloadUri` to be a primitive type in the JSON string but got " + data['downloadUri']);
        }
        // ensure the json data is a string
        if (data['flavor'] && !(typeof data['flavor'] === 'string' || data['flavor'] instanceof String)) {
            throw new Error("Expected the field `flavor` to be a primitive type in the JSON string but got " + data['flavor']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * URI used to download the model.
 * @member {String} downloadUri
 */
Export.prototype['downloadUri'] = undefined;

/**
 * Flavor of the export. These are specializations of the export platform.  Docker platform has valid flavors: Linux, Windows, ARM.  Tensorflow platform has valid flavors: TensorFlowNormal, TensorFlowLite.  ONNX platform has valid flavors: ONNX10, ONNX12.
 * @member {module:model/Export.FlavorEnum} flavor
 */
Export.prototype['flavor'] = undefined;

/**
 * Indicates an updated version of the export package is available and should be re-exported for the latest changes.
 * @member {Boolean} newerVersionAvailable
 */
Export.prototype['newerVersionAvailable'] = undefined;

/**
 * Platform of the export.
 * @member {module:model/Export.PlatformEnum} platform
 */
Export.prototype['platform'] = undefined;

/**
 * Status of the export.
 * @member {module:model/Export.StatusEnum} status
 */
Export.prototype['status'] = undefined;





/**
 * Allowed values for the <code>flavor</code> property.
 * @enum {String}
 * @readonly
 */
Export['FlavorEnum'] = {

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux",

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "ONNX10"
     * @const
     */
    "ONNX10": "ONNX10",

    /**
     * value: "ONNX12"
     * @const
     */
    "ONNX12": "ONNX12",

    /**
     * value: "ARM"
     * @const
     */
    "ARM": "ARM",

    /**
     * value: "TensorFlowNormal"
     * @const
     */
    "TensorFlowNormal": "TensorFlowNormal",

    /**
     * value: "TensorFlowLite"
     * @const
     */
    "TensorFlowLite": "TensorFlowLite"
};


/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
Export['PlatformEnum'] = {

    /**
     * value: "CoreML"
     * @const
     */
    "CoreML": "CoreML",

    /**
     * value: "TensorFlow"
     * @const
     */
    "TensorFlow": "TensorFlow",

    /**
     * value: "DockerFile"
     * @const
     */
    "DockerFile": "DockerFile",

    /**
     * value: "ONNX"
     * @const
     */
    "ONNX": "ONNX",

    /**
     * value: "VAIDK"
     * @const
     */
    "VAIDK": "VAIDK"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Export['StatusEnum'] = {

    /**
     * value: "Exporting"
     * @const
     */
    "Exporting": "Exporting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Done"
     * @const
     */
    "Done": "Done"
};



export default Export;

