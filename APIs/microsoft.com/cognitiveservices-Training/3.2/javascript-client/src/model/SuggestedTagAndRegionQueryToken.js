/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuggestedTagAndRegionQueryToken model module.
 * @module model/SuggestedTagAndRegionQueryToken
 * @version 3.2
 */
class SuggestedTagAndRegionQueryToken {
    /**
     * Constructs a new <code>SuggestedTagAndRegionQueryToken</code>.
     * Contains properties we need to fetch suggested tags for. For the first call, Session and continuation set to null.  Then on subsequent calls, uses the session/continuation from the previous SuggestedTagAndRegionQuery result to fetch additional results.
     * @alias module:model/SuggestedTagAndRegionQueryToken
     */
    constructor() { 
        
        SuggestedTagAndRegionQueryToken.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuggestedTagAndRegionQueryToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuggestedTagAndRegionQueryToken} obj Optional instance to populate.
     * @return {module:model/SuggestedTagAndRegionQueryToken} The populated <code>SuggestedTagAndRegionQueryToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuggestedTagAndRegionQueryToken();

            if (data.hasOwnProperty('continuation')) {
                obj['continuation'] = ApiClient.convertToType(data['continuation'], 'String');
            }
            if (data.hasOwnProperty('maxCount')) {
                obj['maxCount'] = ApiClient.convertToType(data['maxCount'], 'Number');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = ApiClient.convertToType(data['session'], 'String');
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = ApiClient.convertToType(data['sortBy'], 'String');
            }
            if (data.hasOwnProperty('tagIds')) {
                obj['tagIds'] = ApiClient.convertToType(data['tagIds'], ['String']);
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuggestedTagAndRegionQueryToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuggestedTagAndRegionQueryToken</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['continuation'] && !(typeof data['continuation'] === 'string' || data['continuation'] instanceof String)) {
            throw new Error("Expected the field `continuation` to be a primitive type in the JSON string but got " + data['continuation']);
        }
        // ensure the json data is a string
        if (data['session'] && !(typeof data['session'] === 'string' || data['session'] instanceof String)) {
            throw new Error("Expected the field `session` to be a primitive type in the JSON string but got " + data['session']);
        }
        // ensure the json data is a string
        if (data['sortBy'] && !(typeof data['sortBy'] === 'string' || data['sortBy'] instanceof String)) {
            throw new Error("Expected the field `sortBy` to be a primitive type in the JSON string but got " + data['sortBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagIds'])) {
            throw new Error("Expected the field `tagIds` to be an array in the JSON data but got " + data['tagIds']);
        }

        return true;
    }


}



/**
 * Continuation Id for database pagination. Initially null but later used to paginate.
 * @member {String} continuation
 */
SuggestedTagAndRegionQueryToken.prototype['continuation'] = undefined;

/**
 * Maximum number of results you want to be returned in the response.
 * @member {Number} maxCount
 */
SuggestedTagAndRegionQueryToken.prototype['maxCount'] = undefined;

/**
 * SessionId for database query. Initially set to null but later used to paginate.
 * @member {String} session
 */
SuggestedTagAndRegionQueryToken.prototype['session'] = undefined;

/**
 * OrderBy. Ordering mechanism for your results.
 * @member {module:model/SuggestedTagAndRegionQueryToken.SortByEnum} sortBy
 */
SuggestedTagAndRegionQueryToken.prototype['sortBy'] = undefined;

/**
 * Existing TagIds in project to filter suggested tags on.
 * @member {Array.<String>} tagIds
 */
SuggestedTagAndRegionQueryToken.prototype['tagIds'] = undefined;

/**
 * Confidence threshold to filter suggested tags on.
 * @member {Number} threshold
 */
SuggestedTagAndRegionQueryToken.prototype['threshold'] = undefined;





/**
 * Allowed values for the <code>sortBy</code> property.
 * @enum {String}
 * @readonly
 */
SuggestedTagAndRegionQueryToken['SortByEnum'] = {

    /**
     * value: "UncertaintyAscending"
     * @const
     */
    "UncertaintyAscending": "UncertaintyAscending",

    /**
     * value: "UncertaintyDescending"
     * @const
     */
    "UncertaintyDescending": "UncertaintyDescending"
};



export default SuggestedTagAndRegionQueryToken;

