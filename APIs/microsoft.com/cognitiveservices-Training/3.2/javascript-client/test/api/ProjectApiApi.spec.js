/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CustomVisionTrainingClient);
  }
}(this, function(expect, CustomVisionTrainingClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CustomVisionTrainingClient.ProjectApiApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectApiApi', function() {
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIteration', function() {
      it('should call deleteIteration successfully', function(done) {
        //uncomment below and update the code to test deleteIteration
        //instance.deleteIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportIteration', function() {
      it('should call exportIteration successfully', function(done) {
        //uncomment below and update the code to test exportIteration
        //instance.exportIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportProject', function() {
      it('should call exportProject successfully', function(done) {
        //uncomment below and update the code to test exportProject
        //instance.exportProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExports', function() {
      it('should call getExports successfully', function(done) {
        //uncomment below and update the code to test getExports
        //instance.getExports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImagePerformanceCount', function() {
      it('should call getImagePerformanceCount successfully', function(done) {
        //uncomment below and update the code to test getImagePerformanceCount
        //instance.getImagePerformanceCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImagePerformances', function() {
      it('should call getImagePerformances successfully', function(done) {
        //uncomment below and update the code to test getImagePerformances
        //instance.getImagePerformances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIteration', function() {
      it('should call getIteration successfully', function(done) {
        //uncomment below and update the code to test getIteration
        //instance.getIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIterationPerformance', function() {
      it('should call getIterationPerformance successfully', function(done) {
        //uncomment below and update the code to test getIterationPerformance
        //instance.getIterationPerformance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIterations', function() {
      it('should call getIterations successfully', function(done) {
        //uncomment below and update the code to test getIterations
        //instance.getIterations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjects', function() {
      it('should call getProjects successfully', function(done) {
        //uncomment below and update the code to test getProjects
        //instance.getProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importProject', function() {
      it('should call importProject successfully', function(done) {
        //uncomment below and update the code to test importProject
        //instance.importProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishIteration', function() {
      it('should call publishIteration successfully', function(done) {
        //uncomment below and update the code to test publishIteration
        //instance.publishIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainProject', function() {
      it('should call trainProject successfully', function(done) {
        //uncomment below and update the code to test trainProject
        //instance.trainProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpublishIteration', function() {
      it('should call unpublishIteration successfully', function(done) {
        //uncomment below and update the code to test unpublishIteration
        //instance.unpublishIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIteration', function() {
      it('should call updateIteration successfully', function(done) {
        //uncomment below and update the code to test updateIteration
        //instance.updateIteration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
