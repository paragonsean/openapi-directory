# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuggestedTagAndRegionQueryToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continuation: str=None, max_count: int=None, session: str=None, sort_by: str=None, tag_ids: List[str]=None, threshold: float=None):
        """SuggestedTagAndRegionQueryToken - a model defined in OpenAPI

        :param continuation: The continuation of this SuggestedTagAndRegionQueryToken.
        :param max_count: The max_count of this SuggestedTagAndRegionQueryToken.
        :param session: The session of this SuggestedTagAndRegionQueryToken.
        :param sort_by: The sort_by of this SuggestedTagAndRegionQueryToken.
        :param tag_ids: The tag_ids of this SuggestedTagAndRegionQueryToken.
        :param threshold: The threshold of this SuggestedTagAndRegionQueryToken.
        """
        self.openapi_types = {
            'continuation': str,
            'max_count': int,
            'session': str,
            'sort_by': str,
            'tag_ids': List[str],
            'threshold': float
        }

        self.attribute_map = {
            'continuation': 'continuation',
            'max_count': 'maxCount',
            'session': 'session',
            'sort_by': 'sortBy',
            'tag_ids': 'tagIds',
            'threshold': 'threshold'
        }

        self._continuation = continuation
        self._max_count = max_count
        self._session = session
        self._sort_by = sort_by
        self._tag_ids = tag_ids
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestedTagAndRegionQueryToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestedTagAndRegionQueryToken of this SuggestedTagAndRegionQueryToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continuation(self):
        """Gets the continuation of this SuggestedTagAndRegionQueryToken.

        Continuation Id for database pagination. Initially null but later used to paginate.

        :return: The continuation of this SuggestedTagAndRegionQueryToken.
        :rtype: str
        """
        return self._continuation

    @continuation.setter
    def continuation(self, continuation):
        """Sets the continuation of this SuggestedTagAndRegionQueryToken.

        Continuation Id for database pagination. Initially null but later used to paginate.

        :param continuation: The continuation of this SuggestedTagAndRegionQueryToken.
        :type continuation: str
        """

        self._continuation = continuation

    @property
    def max_count(self):
        """Gets the max_count of this SuggestedTagAndRegionQueryToken.

        Maximum number of results you want to be returned in the response.

        :return: The max_count of this SuggestedTagAndRegionQueryToken.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this SuggestedTagAndRegionQueryToken.

        Maximum number of results you want to be returned in the response.

        :param max_count: The max_count of this SuggestedTagAndRegionQueryToken.
        :type max_count: int
        """

        self._max_count = max_count

    @property
    def session(self):
        """Gets the session of this SuggestedTagAndRegionQueryToken.

        SessionId for database query. Initially set to null but later used to paginate.

        :return: The session of this SuggestedTagAndRegionQueryToken.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this SuggestedTagAndRegionQueryToken.

        SessionId for database query. Initially set to null but later used to paginate.

        :param session: The session of this SuggestedTagAndRegionQueryToken.
        :type session: str
        """

        self._session = session

    @property
    def sort_by(self):
        """Gets the sort_by of this SuggestedTagAndRegionQueryToken.

        OrderBy. Ordering mechanism for your results.

        :return: The sort_by of this SuggestedTagAndRegionQueryToken.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this SuggestedTagAndRegionQueryToken.

        OrderBy. Ordering mechanism for your results.

        :param sort_by: The sort_by of this SuggestedTagAndRegionQueryToken.
        :type sort_by: str
        """
        allowed_values = ["UncertaintyAscending", "UncertaintyDescending"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def tag_ids(self):
        """Gets the tag_ids of this SuggestedTagAndRegionQueryToken.

        Existing TagIds in project to filter suggested tags on.

        :return: The tag_ids of this SuggestedTagAndRegionQueryToken.
        :rtype: List[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this SuggestedTagAndRegionQueryToken.

        Existing TagIds in project to filter suggested tags on.

        :param tag_ids: The tag_ids of this SuggestedTagAndRegionQueryToken.
        :type tag_ids: List[str]
        """

        self._tag_ids = tag_ids

    @property
    def threshold(self):
        """Gets the threshold of this SuggestedTagAndRegionQueryToken.

        Confidence threshold to filter suggested tags on.

        :return: The threshold of this SuggestedTagAndRegionQueryToken.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this SuggestedTagAndRegionQueryToken.

        Confidence threshold to filter suggested tags on.

        :param threshold: The threshold of this SuggestedTagAndRegionQueryToken.
        :type threshold: float
        """

        self._threshold = threshold
