# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_processing_settings import ImageProcessingSettings
from openapi_server import util


class ProjectSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_type: str=None, detection_parameters: str=None, domain_id: str=None, image_processing_settings: ImageProcessingSettings=None, target_export_platforms: List[str]=None, use_negative_set: bool=None):
        """ProjectSettings - a model defined in OpenAPI

        :param classification_type: The classification_type of this ProjectSettings.
        :param detection_parameters: The detection_parameters of this ProjectSettings.
        :param domain_id: The domain_id of this ProjectSettings.
        :param image_processing_settings: The image_processing_settings of this ProjectSettings.
        :param target_export_platforms: The target_export_platforms of this ProjectSettings.
        :param use_negative_set: The use_negative_set of this ProjectSettings.
        """
        self.openapi_types = {
            'classification_type': str,
            'detection_parameters': str,
            'domain_id': str,
            'image_processing_settings': ImageProcessingSettings,
            'target_export_platforms': List[str],
            'use_negative_set': bool
        }

        self.attribute_map = {
            'classification_type': 'classificationType',
            'detection_parameters': 'detectionParameters',
            'domain_id': 'domainId',
            'image_processing_settings': 'imageProcessingSettings',
            'target_export_platforms': 'targetExportPlatforms',
            'use_negative_set': 'useNegativeSet'
        }

        self._classification_type = classification_type
        self._detection_parameters = detection_parameters
        self._domain_id = domain_id
        self._image_processing_settings = image_processing_settings
        self._target_export_platforms = target_export_platforms
        self._use_negative_set = use_negative_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSettings of this ProjectSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_type(self):
        """Gets the classification_type of this ProjectSettings.

        Gets or sets the classification type of the project.

        :return: The classification_type of this ProjectSettings.
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this ProjectSettings.

        Gets or sets the classification type of the project.

        :param classification_type: The classification_type of this ProjectSettings.
        :type classification_type: str
        """
        allowed_values = [None,"Multiclass", "Multilabel"]  # noqa: E501
        if classification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `classification_type` ({0}), must be one of {1}"
                .format(classification_type, allowed_values)
            )

        self._classification_type = classification_type

    @property
    def detection_parameters(self):
        """Gets the detection_parameters of this ProjectSettings.

        Detection parameters in use, if any.

        :return: The detection_parameters of this ProjectSettings.
        :rtype: str
        """
        return self._detection_parameters

    @detection_parameters.setter
    def detection_parameters(self, detection_parameters):
        """Sets the detection_parameters of this ProjectSettings.

        Detection parameters in use, if any.

        :param detection_parameters: The detection_parameters of this ProjectSettings.
        :type detection_parameters: str
        """

        self._detection_parameters = detection_parameters

    @property
    def domain_id(self):
        """Gets the domain_id of this ProjectSettings.

        Gets or sets the id of the Domain to use with this project.

        :return: The domain_id of this ProjectSettings.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this ProjectSettings.

        Gets or sets the id of the Domain to use with this project.

        :param domain_id: The domain_id of this ProjectSettings.
        :type domain_id: str
        """

        self._domain_id = domain_id

    @property
    def image_processing_settings(self):
        """Gets the image_processing_settings of this ProjectSettings.


        :return: The image_processing_settings of this ProjectSettings.
        :rtype: ImageProcessingSettings
        """
        return self._image_processing_settings

    @image_processing_settings.setter
    def image_processing_settings(self, image_processing_settings):
        """Sets the image_processing_settings of this ProjectSettings.


        :param image_processing_settings: The image_processing_settings of this ProjectSettings.
        :type image_processing_settings: ImageProcessingSettings
        """

        self._image_processing_settings = image_processing_settings

    @property
    def target_export_platforms(self):
        """Gets the target_export_platforms of this ProjectSettings.

        A list of ExportPlatform that the trained model should be able to support.

        :return: The target_export_platforms of this ProjectSettings.
        :rtype: List[str]
        """
        return self._target_export_platforms

    @target_export_platforms.setter
    def target_export_platforms(self, target_export_platforms):
        """Sets the target_export_platforms of this ProjectSettings.

        A list of ExportPlatform that the trained model should be able to support.

        :param target_export_platforms: The target_export_platforms of this ProjectSettings.
        :type target_export_platforms: List[str]
        """
        allowed_values = ["CoreML", "TensorFlow", "DockerFile", "ONNX", "VAIDK"]  # noqa: E501
        if not set(target_export_platforms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `target_export_platforms` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(target_export_platforms) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._target_export_platforms = target_export_platforms

    @property
    def use_negative_set(self):
        """Gets the use_negative_set of this ProjectSettings.

        Indicates if negative set is being used.

        :return: The use_negative_set of this ProjectSettings.
        :rtype: bool
        """
        return self._use_negative_set

    @use_negative_set.setter
    def use_negative_set(self, use_negative_set):
        """Sets the use_negative_set of this ProjectSettings.

        Indicates if negative set is being used.

        :param use_negative_set: The use_negative_set of this ProjectSettings.
        :type use_negative_set: bool
        """

        self._use_negative_set = use_negative_set
