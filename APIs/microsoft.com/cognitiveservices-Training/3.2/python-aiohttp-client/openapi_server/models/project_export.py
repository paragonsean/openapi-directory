# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_import_time_in_ms: int=None, image_count: int=None, iteration_count: int=None, region_count: int=None, tag_count: int=None, token: str=None):
        """ProjectExport - a model defined in OpenAPI

        :param estimated_import_time_in_ms: The estimated_import_time_in_ms of this ProjectExport.
        :param image_count: The image_count of this ProjectExport.
        :param iteration_count: The iteration_count of this ProjectExport.
        :param region_count: The region_count of this ProjectExport.
        :param tag_count: The tag_count of this ProjectExport.
        :param token: The token of this ProjectExport.
        """
        self.openapi_types = {
            'estimated_import_time_in_ms': int,
            'image_count': int,
            'iteration_count': int,
            'region_count': int,
            'tag_count': int,
            'token': str
        }

        self.attribute_map = {
            'estimated_import_time_in_ms': 'estimatedImportTimeInMS',
            'image_count': 'imageCount',
            'iteration_count': 'iterationCount',
            'region_count': 'regionCount',
            'tag_count': 'tagCount',
            'token': 'token'
        }

        self._estimated_import_time_in_ms = estimated_import_time_in_ms
        self._image_count = image_count
        self._iteration_count = iteration_count
        self._region_count = region_count
        self._tag_count = tag_count
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectExport of this ProjectExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_import_time_in_ms(self):
        """Gets the estimated_import_time_in_ms of this ProjectExport.

        Estimated time this project will take to import, can change based on network connectivity and load between  source and destination regions.

        :return: The estimated_import_time_in_ms of this ProjectExport.
        :rtype: int
        """
        return self._estimated_import_time_in_ms

    @estimated_import_time_in_ms.setter
    def estimated_import_time_in_ms(self, estimated_import_time_in_ms):
        """Sets the estimated_import_time_in_ms of this ProjectExport.

        Estimated time this project will take to import, can change based on network connectivity and load between  source and destination regions.

        :param estimated_import_time_in_ms: The estimated_import_time_in_ms of this ProjectExport.
        :type estimated_import_time_in_ms: int
        """

        self._estimated_import_time_in_ms = estimated_import_time_in_ms

    @property
    def image_count(self):
        """Gets the image_count of this ProjectExport.

        Count of images that will be exported.

        :return: The image_count of this ProjectExport.
        :rtype: int
        """
        return self._image_count

    @image_count.setter
    def image_count(self, image_count):
        """Sets the image_count of this ProjectExport.

        Count of images that will be exported.

        :param image_count: The image_count of this ProjectExport.
        :type image_count: int
        """

        self._image_count = image_count

    @property
    def iteration_count(self):
        """Gets the iteration_count of this ProjectExport.

        Count of iterations that will be exported.

        :return: The iteration_count of this ProjectExport.
        :rtype: int
        """
        return self._iteration_count

    @iteration_count.setter
    def iteration_count(self, iteration_count):
        """Sets the iteration_count of this ProjectExport.

        Count of iterations that will be exported.

        :param iteration_count: The iteration_count of this ProjectExport.
        :type iteration_count: int
        """

        self._iteration_count = iteration_count

    @property
    def region_count(self):
        """Gets the region_count of this ProjectExport.

        Count of regions that will be exported.

        :return: The region_count of this ProjectExport.
        :rtype: int
        """
        return self._region_count

    @region_count.setter
    def region_count(self, region_count):
        """Sets the region_count of this ProjectExport.

        Count of regions that will be exported.

        :param region_count: The region_count of this ProjectExport.
        :type region_count: int
        """

        self._region_count = region_count

    @property
    def tag_count(self):
        """Gets the tag_count of this ProjectExport.

        Count of tags that will be exported.

        :return: The tag_count of this ProjectExport.
        :rtype: int
        """
        return self._tag_count

    @tag_count.setter
    def tag_count(self, tag_count):
        """Sets the tag_count of this ProjectExport.

        Count of tags that will be exported.

        :param tag_count: The tag_count of this ProjectExport.
        :type tag_count: int
        """

        self._tag_count = tag_count

    @property
    def token(self):
        """Gets the token of this ProjectExport.

        Opaque token that should be passed to ImportProject to perform the import. This token grants access to import this  project to all that have the token.

        :return: The token of this ProjectExport.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ProjectExport.

        Opaque token that should be passed to ImportProject to perform the import. This token grants access to import this  project to all that have the token.

        :param token: The token of this ProjectExport.
        :type token: str
        """

        self._token = token
