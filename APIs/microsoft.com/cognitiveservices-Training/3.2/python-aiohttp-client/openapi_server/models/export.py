# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Export(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_uri: str=None, flavor: str=None, newer_version_available: bool=None, platform: str=None, status: str=None):
        """Export - a model defined in OpenAPI

        :param download_uri: The download_uri of this Export.
        :param flavor: The flavor of this Export.
        :param newer_version_available: The newer_version_available of this Export.
        :param platform: The platform of this Export.
        :param status: The status of this Export.
        """
        self.openapi_types = {
            'download_uri': str,
            'flavor': str,
            'newer_version_available': bool,
            'platform': str,
            'status': str
        }

        self.attribute_map = {
            'download_uri': 'downloadUri',
            'flavor': 'flavor',
            'newer_version_available': 'newerVersionAvailable',
            'platform': 'platform',
            'status': 'status'
        }

        self._download_uri = download_uri
        self._flavor = flavor
        self._newer_version_available = newer_version_available
        self._platform = platform
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Export':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Export of this Export.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_uri(self):
        """Gets the download_uri of this Export.

        URI used to download the model.

        :return: The download_uri of this Export.
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this Export.

        URI used to download the model.

        :param download_uri: The download_uri of this Export.
        :type download_uri: str
        """

        self._download_uri = download_uri

    @property
    def flavor(self):
        """Gets the flavor of this Export.

        Flavor of the export. These are specializations of the export platform.  Docker platform has valid flavors: Linux, Windows, ARM.  Tensorflow platform has valid flavors: TensorFlowNormal, TensorFlowLite.  ONNX platform has valid flavors: ONNX10, ONNX12.

        :return: The flavor of this Export.
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this Export.

        Flavor of the export. These are specializations of the export platform.  Docker platform has valid flavors: Linux, Windows, ARM.  Tensorflow platform has valid flavors: TensorFlowNormal, TensorFlowLite.  ONNX platform has valid flavors: ONNX10, ONNX12.

        :param flavor: The flavor of this Export.
        :type flavor: str
        """
        allowed_values = [None,"Linux", "Windows", "ONNX10", "ONNX12", "ARM", "TensorFlowNormal", "TensorFlowLite"]  # noqa: E501
        if flavor not in allowed_values:
            raise ValueError(
                "Invalid value for `flavor` ({0}), must be one of {1}"
                .format(flavor, allowed_values)
            )

        self._flavor = flavor

    @property
    def newer_version_available(self):
        """Gets the newer_version_available of this Export.

        Indicates an updated version of the export package is available and should be re-exported for the latest changes.

        :return: The newer_version_available of this Export.
        :rtype: bool
        """
        return self._newer_version_available

    @newer_version_available.setter
    def newer_version_available(self, newer_version_available):
        """Sets the newer_version_available of this Export.

        Indicates an updated version of the export package is available and should be re-exported for the latest changes.

        :param newer_version_available: The newer_version_available of this Export.
        :type newer_version_available: bool
        """

        self._newer_version_available = newer_version_available

    @property
    def platform(self):
        """Gets the platform of this Export.

        Platform of the export.

        :return: The platform of this Export.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Export.

        Platform of the export.

        :param platform: The platform of this Export.
        :type platform: str
        """
        allowed_values = ["CoreML", "TensorFlow", "DockerFile", "ONNX", "VAIDK"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this Export.

        Status of the export.

        :return: The status of this Export.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Export.

        Status of the export.

        :param status: The status of this Export.
        :type status: str
        """
        allowed_values = ["Exporting", "Failed", "Done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
