# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomVisionError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, message: str=None):
        """CustomVisionError - a model defined in OpenAPI

        :param code: The code of this CustomVisionError.
        :param message: The message of this CustomVisionError.
        """
        self.openapi_types = {
            'code': str,
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message'
        }

        self._code = code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomVisionError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomVisionError of this CustomVisionError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CustomVisionError.

        The error code.

        :return: The code of this CustomVisionError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CustomVisionError.

        The error code.

        :param code: The code of this CustomVisionError.
        :type code: str
        """
        allowed_values = ["NoError", "BadRequest", "BadRequestExceededBatchSize", "BadRequestNotSupported", "BadRequestInvalidIds", "BadRequestProjectName", "BadRequestProjectNameNotUnique", "BadRequestProjectDescription", "BadRequestProjectUnknownDomain", "BadRequestProjectUnknownClassification", "BadRequestProjectUnsupportedDomainTypeChange", "BadRequestProjectUnsupportedExportPlatform", "BadRequestProjectImagePreprocessingSettings", "BadRequestProjectDuplicated", "BadRequestIterationName", "BadRequestIterationNameNotUnique", "BadRequestIterationDescription", "BadRequestIterationIsNotTrained", "BadRequestIterationValidationFailed", "BadRequestWorkspaceCannotBeModified", "BadRequestWorkspaceNotDeletable", "BadRequestTagName", "BadRequestTagNameNotUnique", "BadRequestTagDescription", "BadRequestTagType", "BadRequestMultipleNegativeTag", "BadRequestImageTags", "BadRequestImageRegions", "BadRequestNegativeAndRegularTagOnSameImage", "BadRequestRequiredParamIsNull", "BadRequestIterationIsPublished", "BadRequestInvalidPublishName", "BadRequestInvalidPublishTarget", "BadRequestUnpublishFailed", "BadRequestIterationNotPublished", "BadRequestSubscriptionApi", "BadRequestExceedProjectLimit", "BadRequestExceedIterationPerProjectLimit", "BadRequestExceedTagPerProjectLimit", "BadRequestExceedTagPerImageLimit", "BadRequestExceededQuota", "BadRequestCannotMigrateProjectWithName", "BadRequestNotLimitedTrial", "BadRequestImageBatch", "BadRequestImageStream", "BadRequestImageUrl", "BadRequestImageFormat", "BadRequestImageSizeBytes", "BadRequestImageExceededCount", "BadRequestTrainingNotNeeded", "BadRequestTrainingNotNeededButTrainingPipelineUpdated", "BadRequestTrainingValidationFailed", "BadRequestClassificationTrainingValidationFailed", "BadRequestMultiClassClassificationTrainingValidationFailed", "BadRequestMultiLabelClassificationTrainingValidationFailed", "BadRequestDetectionTrainingValidationFailed", "BadRequestTrainingAlreadyInProgress", "BadRequestDetectionTrainingNotAllowNegativeTag", "BadRequestInvalidEmailAddress", "BadRequestDomainNotSupportedForAdvancedTraining", "BadRequestExportPlatformNotSupportedForAdvancedTraining", "BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining", "BadRequestExportValidationFailed", "BadRequestExportAlreadyInProgress", "BadRequestPredictionIdsMissing", "BadRequestPredictionIdsExceededCount", "BadRequestPredictionTagsExceededCount", "BadRequestPredictionResultsExceededCount", "BadRequestPredictionInvalidApplicationName", "BadRequestPredictionInvalidQueryParameters", "BadRequestInvalidImportToken", "BadRequestExportWhileTraining", "BadRequestInvalid", "UnsupportedMediaType", "Forbidden", "ForbiddenUser", "ForbiddenUserResource", "ForbiddenUserSignupDisabled", "ForbiddenUserSignupAllowanceExceeded", "ForbiddenUserDoesNotExist", "ForbiddenUserDisabled", "ForbiddenUserInsufficientCapability", "ForbiddenDRModeEnabled", "ForbiddenInvalid", "NotFound", "NotFoundProject", "NotFoundProjectDefaultIteration", "NotFoundIteration", "NotFoundIterationPerformance", "NotFoundTag", "NotFoundImage", "NotFoundDomain", "NotFoundApimSubscription", "NotFoundInvalid", "Conflict", "ConflictInvalid", "ErrorUnknown", "ErrorIterationCopyFailed", "ErrorPreparePerformanceMigrationFailed", "ErrorProjectInvalidWorkspace", "ErrorProjectInvalidPipelineConfiguration", "ErrorProjectInvalidDomain", "ErrorProjectTrainingRequestFailed", "ErrorProjectImportRequestFailed", "ErrorProjectExportRequestFailed", "ErrorFeaturizationServiceUnavailable", "ErrorFeaturizationQueueTimeout", "ErrorFeaturizationInvalidFeaturizer", "ErrorFeaturizationAugmentationUnavailable", "ErrorFeaturizationUnrecognizedJob", "ErrorFeaturizationAugmentationError", "ErrorExporterInvalidPlatform", "ErrorExporterInvalidFeaturizer", "ErrorExporterInvalidClassifier", "ErrorPredictionServiceUnavailable", "ErrorPredictionModelNotFound", "ErrorPredictionModelNotCached", "ErrorPrediction", "ErrorPredictionStorage", "ErrorRegionProposal", "ErrorInvalid"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this CustomVisionError.

        A message explaining the error reported by the service.

        :return: The message of this CustomVisionError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CustomVisionError.

        A message explaining the error reported by the service.

        :param message: The message of this CustomVisionError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
