# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageProcessingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, augmentation_methods: Dict[str, bool]=None):
        """ImageProcessingSettings - a model defined in OpenAPI

        :param augmentation_methods: The augmentation_methods of this ImageProcessingSettings.
        """
        self.openapi_types = {
            'augmentation_methods': Dict[str, bool]
        }

        self.attribute_map = {
            'augmentation_methods': 'augmentationMethods'
        }

        self._augmentation_methods = augmentation_methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageProcessingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageProcessingSettings of this ImageProcessingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def augmentation_methods(self):
        """Gets the augmentation_methods of this ImageProcessingSettings.

        Gets or sets enabled image transforms. The key corresponds to the transform name. If value is set to true, then correspondent transform is enabled. Otherwise this transform will not be used.  Augmentation will be uniformly distributed among enabled transforms.

        :return: The augmentation_methods of this ImageProcessingSettings.
        :rtype: Dict[str, bool]
        """
        return self._augmentation_methods

    @augmentation_methods.setter
    def augmentation_methods(self, augmentation_methods):
        """Sets the augmentation_methods of this ImageProcessingSettings.

        Gets or sets enabled image transforms. The key corresponds to the transform name. If value is set to true, then correspondent transform is enabled. Otherwise this transform will not be used.  Augmentation will be uniformly distributed among enabled transforms.

        :param augmentation_methods: The augmentation_methods of this ImageProcessingSettings.
        :type augmentation_methods: Dict[str, bool]
        """

        self._augmentation_methods = augmentation_methods
