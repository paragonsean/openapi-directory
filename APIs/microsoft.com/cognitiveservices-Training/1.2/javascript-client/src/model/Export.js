/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Export model module.
 * @module model/Export
 * @version 1.2
 */
class Export {
    /**
     * Constructs a new <code>Export</code>.
     * @alias module:model/Export
     */
    constructor() { 
        
        Export.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Export</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Export} obj Optional instance to populate.
     * @return {module:model/Export} The populated <code>Export</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Export();

            if (data.hasOwnProperty('DownloadUri')) {
                obj['DownloadUri'] = ApiClient.convertToType(data['DownloadUri'], 'String');
            }
            if (data.hasOwnProperty('Platform')) {
                obj['Platform'] = ApiClient.convertToType(data['Platform'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Export</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Export</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DownloadUri'] && !(typeof data['DownloadUri'] === 'string' || data['DownloadUri'] instanceof String)) {
            throw new Error("Expected the field `DownloadUri` to be a primitive type in the JSON string but got " + data['DownloadUri']);
        }
        // ensure the json data is a string
        if (data['Platform'] && !(typeof data['Platform'] === 'string' || data['Platform'] instanceof String)) {
            throw new Error("Expected the field `Platform` to be a primitive type in the JSON string but got " + data['Platform']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * @member {String} DownloadUri
 */
Export.prototype['DownloadUri'] = undefined;

/**
 * @member {module:model/Export.PlatformEnum} Platform
 */
Export.prototype['Platform'] = undefined;

/**
 * @member {module:model/Export.StatusEnum} Status
 */
Export.prototype['Status'] = undefined;





/**
 * Allowed values for the <code>Platform</code> property.
 * @enum {String}
 * @readonly
 */
Export['PlatformEnum'] = {

    /**
     * value: "CoreML"
     * @const
     */
    "CoreML": "CoreML",

    /**
     * value: "TensorFlow"
     * @const
     */
    "TensorFlow": "TensorFlow"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
Export['StatusEnum'] = {

    /**
     * value: "Exporting"
     * @const
     */
    "Exporting": "Exporting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Done"
     * @const
     */
    "Done": "Done"
};



export default Export;

