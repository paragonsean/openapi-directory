/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectSettings from './ProjectSettings';

/**
 * The Project model module.
 * @module model/Project
 * @version 1.2
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * Represents a project
     * @alias module:model/Project
     */
    constructor() { 
        
        Project.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('CurrentIterationId')) {
                obj['CurrentIterationId'] = ApiClient.convertToType(data['CurrentIterationId'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('LastModified')) {
                obj['LastModified'] = ApiClient.convertToType(data['LastModified'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = ProjectSettings.constructFromObject(data['Settings']);
            }
            if (data.hasOwnProperty('ThumbnailUri')) {
                obj['ThumbnailUri'] = ApiClient.convertToType(data['ThumbnailUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Project</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Project</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CurrentIterationId'] && !(typeof data['CurrentIterationId'] === 'string' || data['CurrentIterationId'] instanceof String)) {
            throw new Error("Expected the field `CurrentIterationId` to be a primitive type in the JSON string but got " + data['CurrentIterationId']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `Settings`
        if (data['Settings']) { // data not null
          ProjectSettings.validateJSON(data['Settings']);
        }
        // ensure the json data is a string
        if (data['ThumbnailUri'] && !(typeof data['ThumbnailUri'] === 'string' || data['ThumbnailUri'] instanceof String)) {
            throw new Error("Expected the field `ThumbnailUri` to be a primitive type in the JSON string but got " + data['ThumbnailUri']);
        }

        return true;
    }


}



/**
 * Gets the date this project was created
 * @member {Date} Created
 */
Project.prototype['Created'] = undefined;

/**
 * Gets the current iteration id
 * @member {String} CurrentIterationId
 */
Project.prototype['CurrentIterationId'] = undefined;

/**
 * Gets or sets the description of the project
 * @member {String} Description
 */
Project.prototype['Description'] = undefined;

/**
 * Gets the project id
 * @member {String} Id
 */
Project.prototype['Id'] = undefined;

/**
 * Gets the date this project was last modified
 * @member {Date} LastModified
 */
Project.prototype['LastModified'] = undefined;

/**
 * Gets or sets the name of the project
 * @member {String} Name
 */
Project.prototype['Name'] = undefined;

/**
 * @member {module:model/ProjectSettings} Settings
 */
Project.prototype['Settings'] = undefined;

/**
 * Gets the thumbnail url representing the image
 * @member {String} ThumbnailUri
 */
Project.prototype['ThumbnailUri'] = undefined;






export default Project;

