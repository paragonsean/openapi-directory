/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyPair model module.
 * @module model/KeyPair
 * @version 1.2
 */
class KeyPair {
    /**
     * Constructs a new <code>KeyPair</code>.
     * @alias module:model/KeyPair
     */
    constructor() { 
        
        KeyPair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyPair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyPair} obj Optional instance to populate.
     * @return {module:model/KeyPair} The populated <code>KeyPair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyPair();

            if (data.hasOwnProperty('PrimaryKey')) {
                obj['PrimaryKey'] = ApiClient.convertToType(data['PrimaryKey'], 'String');
            }
            if (data.hasOwnProperty('SecondaryKey')) {
                obj['SecondaryKey'] = ApiClient.convertToType(data['SecondaryKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyPair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyPair</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PrimaryKey'] && !(typeof data['PrimaryKey'] === 'string' || data['PrimaryKey'] instanceof String)) {
            throw new Error("Expected the field `PrimaryKey` to be a primitive type in the JSON string but got " + data['PrimaryKey']);
        }
        // ensure the json data is a string
        if (data['SecondaryKey'] && !(typeof data['SecondaryKey'] === 'string' || data['SecondaryKey'] instanceof String)) {
            throw new Error("Expected the field `SecondaryKey` to be a primitive type in the JSON string but got " + data['SecondaryKey']);
        }

        return true;
    }


}



/**
 * @member {String} PrimaryKey
 */
KeyPair.prototype['PrimaryKey'] = undefined;

/**
 * @member {String} SecondaryKey
 */
KeyPair.prototype['SecondaryKey'] = undefined;






export default KeyPair;

