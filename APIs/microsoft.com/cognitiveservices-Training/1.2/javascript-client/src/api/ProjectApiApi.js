/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Export from '../model/Export';
import Iteration from '../model/Iteration';
import IterationPerformance from '../model/IterationPerformance';
import Project from '../model/Project';

/**
* ProjectApi service.
* @module api/ProjectApiApi
* @version 1.2
*/
export default class ProjectApiApi {

    /**
    * Constructs a new ProjectApiApi. 
    * @alias module:api/ProjectApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectApiApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * @param {String} name Name of the project
     * @param {String} trainingKey 
     * @param {Object} opts Optional parameters
     * @param {String} [description] The description of the project
     * @param {String} [domainId] The id of the domain to use for this project. Defaults to General
     * @param {module:api/ProjectApiApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    createProject(name, trainingKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createProject");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'description': opts['description'],
        'domainId': opts['domainId']
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIteration operation.
     * @callback module:api/ProjectApiApi~deleteIterationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific iteration of a project
     * @param {String} projectId The project id
     * @param {String} iterationId The iteration id
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~deleteIterationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIteration(projectId, iterationId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteIteration");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling deleteIteration");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling deleteIteration");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectApiApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific project
     * @param {String} projectId The project id
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(projectId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling deleteProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportIteration operation.
     * @callback module:api/ProjectApiApi~exportIterationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Export} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a trained iteration
     * @param {String} projectId The project id
     * @param {String} iterationId The iteration id
     * @param {String} platform The target platform (coreml or tensorflow)
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~exportIterationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Export}
     */
    exportIteration(projectId, iterationId, platform, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling exportIteration");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling exportIteration");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling exportIteration");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling exportIteration");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
        'platform': platform
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Export;
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExports operation.
     * @callback module:api/ProjectApiApi~getExportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Export>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of exports for a specific iteration
     * @param {String} projectId The project id
     * @param {String} iterationId The iteration id
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Export>}
     */
    getExports(projectId, iterationId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getExports");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling getExports");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getExports");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [Export];
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIteration operation.
     * @callback module:api/ProjectApiApi~getIterationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Iteration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific iteration
     * @param {String} projectId The id of the project the iteration belongs to
     * @param {String} iterationId The id of the iteration to get
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getIterationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Iteration}
     */
    getIteration(projectId, iterationId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIteration");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling getIteration");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getIteration");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Iteration;
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIterationPerformance operation.
     * @callback module:api/ProjectApiApi~getIterationPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IterationPerformance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed performance information about a trained iteration
     * @param {String} projectId The project id
     * @param {String} iterationId The id of the trained iteration
     * @param {Number} threshold The 0 to 1 threshold to determine positive prediction
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getIterationPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IterationPerformance}
     */
    getIterationPerformance(projectId, iterationId, threshold, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIterationPerformance");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling getIterationPerformance");
      }
      // verify the required parameter 'threshold' is set
      if (threshold === undefined || threshold === null) {
        throw new Error("Missing the required parameter 'threshold' when calling getIterationPerformance");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getIterationPerformance");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
        'threshold': threshold
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = IterationPerformance;
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIterations operation.
     * @callback module:api/ProjectApiApi~getIterationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Iteration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get iterations for the project
     * @param {String} projectId The project id
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getIterationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Iteration>}
     */
    getIterations(projectId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getIterations");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getIterations");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [Iteration];
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectApiApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project
     * @param {String} projectId The id of the project to get
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getProject(projectId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectApiApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your projects
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    getProjects(trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling getProjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trainProject operation.
     * @callback module:api/ProjectApiApi~trainProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Iteration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queues project for training
     * @param {String} projectId The project id
     * @param {String} trainingKey 
     * @param {module:api/ProjectApiApi~trainProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Iteration}
     */
    trainProject(projectId, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling trainProject");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling trainProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Iteration;
      return this.apiClient.callApi(
        '/projects/{projectId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIteration operation.
     * @callback module:api/ProjectApiApi~updateIterationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Iteration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific iteration
     * @param {String} projectId Project id
     * @param {String} iterationId Iteration id
     * @param {String} trainingKey 
     * @param {module:model/Iteration} iteration The updated iteration model
     * @param {module:api/ProjectApiApi~updateIterationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Iteration}
     */
    updateIteration(projectId, iterationId, trainingKey, iteration, callback) {
      let postBody = iteration;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateIteration");
      }
      // verify the required parameter 'iterationId' is set
      if (iterationId === undefined || iterationId === null) {
        throw new Error("Missing the required parameter 'iterationId' when calling updateIteration");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateIteration");
      }
      // verify the required parameter 'iteration' is set
      if (iteration === undefined || iteration === null) {
        throw new Error("Missing the required parameter 'iteration' when calling updateIteration");
      }

      let pathParams = {
        'projectId': projectId,
        'iterationId': iterationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Iteration;
      return this.apiClient.callApi(
        '/projects/{projectId}/iterations/{iterationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectApiApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific project
     * @param {String} projectId The id of the project to update
     * @param {String} trainingKey 
     * @param {module:model/Project} project The updated project model
     * @param {module:api/ProjectApiApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    updateProject(projectId, trainingKey, project, callback) {
      let postBody = project;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling updateProject");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{projectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
