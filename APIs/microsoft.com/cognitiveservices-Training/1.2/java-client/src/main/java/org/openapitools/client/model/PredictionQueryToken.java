/*
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PredictionQueryTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PredictionQueryToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:06.339817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionQueryToken {
  public static final String SERIALIZED_NAME_APPLICATION = "Application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_CONTINUATION = "Continuation";
  @SerializedName(SERIALIZED_NAME_CONTINUATION)
  private String continuation;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ITERATION_ID = "IterationId";
  @SerializedName(SERIALIZED_NAME_ITERATION_ID)
  private UUID iterationId;

  public static final String SERIALIZED_NAME_MAX_COUNT = "MaxCount";
  @SerializedName(SERIALIZED_NAME_MAX_COUNT)
  private Integer maxCount;

  /**
   * Gets or Sets orderBy
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    NEWEST("Newest"),
    
    OLDEST("Oldest"),
    
    SUGGESTED("Suggested");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderByEnum fromValue(String value) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_BY = "OrderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private OrderByEnum orderBy;

  public static final String SERIALIZED_NAME_SESSION = "Session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private String session;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<PredictionQueryTag> tags;

  public PredictionQueryToken() {
  }

  public PredictionQueryToken application(String application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nullable
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }


  public PredictionQueryToken continuation(String continuation) {
    this.continuation = continuation;
    return this;
  }

  /**
   * Get continuation
   * @return continuation
   */
  @javax.annotation.Nullable
  public String getContinuation() {
    return continuation;
  }

  public void setContinuation(String continuation) {
    this.continuation = continuation;
  }


  public PredictionQueryToken endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public PredictionQueryToken iterationId(UUID iterationId) {
    this.iterationId = iterationId;
    return this;
  }

  /**
   * Get iterationId
   * @return iterationId
   */
  @javax.annotation.Nullable
  public UUID getIterationId() {
    return iterationId;
  }

  public void setIterationId(UUID iterationId) {
    this.iterationId = iterationId;
  }


  public PredictionQueryToken maxCount(Integer maxCount) {
    this.maxCount = maxCount;
    return this;
  }

  /**
   * Get maxCount
   * @return maxCount
   */
  @javax.annotation.Nullable
  public Integer getMaxCount() {
    return maxCount;
  }

  public void setMaxCount(Integer maxCount) {
    this.maxCount = maxCount;
  }


  public PredictionQueryToken orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }


  public PredictionQueryToken session(String session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public String getSession() {
    return session;
  }

  public void setSession(String session) {
    this.session = session;
  }


  public PredictionQueryToken startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public PredictionQueryToken tags(List<PredictionQueryTag> tags) {
    this.tags = tags;
    return this;
  }

  public PredictionQueryToken addTagsItem(PredictionQueryTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<PredictionQueryTag> getTags() {
    return tags;
  }

  public void setTags(List<PredictionQueryTag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionQueryToken predictionQueryToken = (PredictionQueryToken) o;
    return Objects.equals(this.application, predictionQueryToken.application) &&
        Objects.equals(this.continuation, predictionQueryToken.continuation) &&
        Objects.equals(this.endTime, predictionQueryToken.endTime) &&
        Objects.equals(this.iterationId, predictionQueryToken.iterationId) &&
        Objects.equals(this.maxCount, predictionQueryToken.maxCount) &&
        Objects.equals(this.orderBy, predictionQueryToken.orderBy) &&
        Objects.equals(this.session, predictionQueryToken.session) &&
        Objects.equals(this.startTime, predictionQueryToken.startTime) &&
        Objects.equals(this.tags, predictionQueryToken.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, continuation, endTime, iterationId, maxCount, orderBy, session, startTime, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionQueryToken {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    continuation: ").append(toIndentedString(continuation)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    iterationId: ").append(toIndentedString(iterationId)).append("\n");
    sb.append("    maxCount: ").append(toIndentedString(maxCount)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Application");
    openapiFields.add("Continuation");
    openapiFields.add("EndTime");
    openapiFields.add("IterationId");
    openapiFields.add("MaxCount");
    openapiFields.add("OrderBy");
    openapiFields.add("Session");
    openapiFields.add("StartTime");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionQueryToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionQueryToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionQueryToken is not found in the empty JSON string", PredictionQueryToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionQueryToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionQueryToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Application") != null && !jsonObj.get("Application").isJsonNull()) && !jsonObj.get("Application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Application").toString()));
      }
      if ((jsonObj.get("Continuation") != null && !jsonObj.get("Continuation").isJsonNull()) && !jsonObj.get("Continuation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Continuation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Continuation").toString()));
      }
      if ((jsonObj.get("IterationId") != null && !jsonObj.get("IterationId").isJsonNull()) && !jsonObj.get("IterationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IterationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IterationId").toString()));
      }
      if ((jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) && !jsonObj.get("OrderBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderBy").toString()));
      }
      // validate the optional field `OrderBy`
      if (jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) {
        OrderByEnum.validateJsonElement(jsonObj.get("OrderBy"));
      }
      if ((jsonObj.get("Session") != null && !jsonObj.get("Session").isJsonNull()) && !jsonObj.get("Session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Session").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            PredictionQueryTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionQueryToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionQueryToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionQueryToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionQueryToken.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionQueryToken>() {
           @Override
           public void write(JsonWriter out, PredictionQueryToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionQueryToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionQueryToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionQueryToken
   * @throws IOException if the JSON string is invalid with respect to PredictionQueryToken
   */
  public static PredictionQueryToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionQueryToken.class);
  }

  /**
   * Convert an instance of PredictionQueryToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

