/*
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PredictionTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * result of an image classification request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:06.339817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Prediction {
  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IMAGE_URI = "ImageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  public static final String SERIALIZED_NAME_ITERATION = "Iteration";
  @SerializedName(SERIALIZED_NAME_ITERATION)
  private UUID iteration;

  public static final String SERIALIZED_NAME_PREDICTIONS = "Predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private List<PredictionTag> predictions;

  public static final String SERIALIZED_NAME_PROJECT = "Project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private UUID project;

  public static final String SERIALIZED_NAME_THUMBNAIL_URI = "ThumbnailUri";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URI)
  private String thumbnailUri;

  public Prediction() {
  }

  public Prediction(
     OffsetDateTime created, 
     UUID id, 
     String imageUri, 
     UUID iteration, 
     List<PredictionTag> predictions, 
     UUID project, 
     String thumbnailUri
  ) {
    this();
    this.created = created;
    this.id = id;
    this.imageUri = imageUri;
    this.iteration = iteration;
    this.predictions = predictions;
    this.project = project;
    this.thumbnailUri = thumbnailUri;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  /**
   * Get imageUri
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }



  /**
   * Get iteration
   * @return iteration
   */
  @javax.annotation.Nullable
  public UUID getIteration() {
    return iteration;
  }



  /**
   * Get predictions
   * @return predictions
   */
  @javax.annotation.Nullable
  public List<PredictionTag> getPredictions() {
    return predictions;
  }



  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public UUID getProject() {
    return project;
  }



  /**
   * Get thumbnailUri
   * @return thumbnailUri
   */
  @javax.annotation.Nullable
  public String getThumbnailUri() {
    return thumbnailUri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prediction prediction = (Prediction) o;
    return Objects.equals(this.created, prediction.created) &&
        Objects.equals(this.id, prediction.id) &&
        Objects.equals(this.imageUri, prediction.imageUri) &&
        Objects.equals(this.iteration, prediction.iteration) &&
        Objects.equals(this.predictions, prediction.predictions) &&
        Objects.equals(this.project, prediction.project) &&
        Objects.equals(this.thumbnailUri, prediction.thumbnailUri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, id, imageUri, iteration, predictions, project, thumbnailUri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prediction {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    thumbnailUri: ").append(toIndentedString(thumbnailUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Created");
    openapiFields.add("Id");
    openapiFields.add("ImageUri");
    openapiFields.add("Iteration");
    openapiFields.add("Predictions");
    openapiFields.add("Project");
    openapiFields.add("ThumbnailUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Prediction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Prediction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Prediction is not found in the empty JSON string", Prediction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Prediction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Prediction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("ImageUri") != null && !jsonObj.get("ImageUri").isJsonNull()) && !jsonObj.get("ImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageUri").toString()));
      }
      if ((jsonObj.get("Iteration") != null && !jsonObj.get("Iteration").isJsonNull()) && !jsonObj.get("Iteration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Iteration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Iteration").toString()));
      }
      if (jsonObj.get("Predictions") != null && !jsonObj.get("Predictions").isJsonNull()) {
        JsonArray jsonArraypredictions = jsonObj.getAsJsonArray("Predictions");
        if (jsonArraypredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Predictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Predictions` to be an array in the JSON string but got `%s`", jsonObj.get("Predictions").toString()));
          }

          // validate the optional field `Predictions` (array)
          for (int i = 0; i < jsonArraypredictions.size(); i++) {
            PredictionTag.validateJsonElement(jsonArraypredictions.get(i));
          };
        }
      }
      if ((jsonObj.get("Project") != null && !jsonObj.get("Project").isJsonNull()) && !jsonObj.get("Project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Project").toString()));
      }
      if ((jsonObj.get("ThumbnailUri") != null && !jsonObj.get("ThumbnailUri").isJsonNull()) && !jsonObj.get("ThumbnailUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbnailUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThumbnailUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Prediction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Prediction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Prediction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Prediction.class));

       return (TypeAdapter<T>) new TypeAdapter<Prediction>() {
           @Override
           public void write(JsonWriter out, Prediction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Prediction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Prediction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Prediction
   * @throws IOException if the JSON string is invalid with respect to Prediction
   */
  public static Prediction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Prediction.class);
  }

  /**
   * Convert an instance of Prediction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

