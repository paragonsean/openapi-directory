/*
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Quota;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a set of quotas for a given project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:06.339817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerProjectQuota {
  public static final String SERIALIZED_NAME_IMAGES = "Images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Quota images;

  public static final String SERIALIZED_NAME_ITERATIONS = "Iterations";
  @SerializedName(SERIALIZED_NAME_ITERATIONS)
  private Quota iterations;

  public static final String SERIALIZED_NAME_PROJECT_ID = "ProjectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private UUID projectId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Quota tags;

  public PerProjectQuota() {
  }

  public PerProjectQuota(
     UUID projectId
  ) {
    this();
    this.projectId = projectId;
  }

  public PerProjectQuota images(Quota images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public Quota getImages() {
    return images;
  }

  public void setImages(Quota images) {
    this.images = images;
  }


  public PerProjectQuota iterations(Quota iterations) {
    this.iterations = iterations;
    return this;
  }

  /**
   * Get iterations
   * @return iterations
   */
  @javax.annotation.Nullable
  public Quota getIterations() {
    return iterations;
  }

  public void setIterations(Quota iterations) {
    this.iterations = iterations;
  }


  /**
   * Gets the project id of the project this quota applies to
   * @return projectId
   */
  @javax.annotation.Nullable
  public UUID getProjectId() {
    return projectId;
  }



  public PerProjectQuota tags(Quota tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Quota getTags() {
    return tags;
  }

  public void setTags(Quota tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerProjectQuota perProjectQuota = (PerProjectQuota) o;
    return Objects.equals(this.images, perProjectQuota.images) &&
        Objects.equals(this.iterations, perProjectQuota.iterations) &&
        Objects.equals(this.projectId, perProjectQuota.projectId) &&
        Objects.equals(this.tags, perProjectQuota.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(images, iterations, projectId, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerProjectQuota {\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    iterations: ").append(toIndentedString(iterations)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Images");
    openapiFields.add("Iterations");
    openapiFields.add("ProjectId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerProjectQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerProjectQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerProjectQuota is not found in the empty JSON string", PerProjectQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerProjectQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerProjectQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Images`
      if (jsonObj.get("Images") != null && !jsonObj.get("Images").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("Images"));
      }
      // validate the optional field `Iterations`
      if (jsonObj.get("Iterations") != null && !jsonObj.get("Iterations").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("Iterations"));
      }
      if ((jsonObj.get("ProjectId") != null && !jsonObj.get("ProjectId").isJsonNull()) && !jsonObj.get("ProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectId").toString()));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerProjectQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerProjectQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerProjectQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerProjectQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<PerProjectQuota>() {
           @Override
           public void write(JsonWriter out, PerProjectQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerProjectQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerProjectQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerProjectQuota
   * @throws IOException if the JSON string is invalid with respect to PerProjectQuota
   */
  public static PerProjectQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerProjectQuota.class);
  }

  /**
   * Convert an instance of PerProjectQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

