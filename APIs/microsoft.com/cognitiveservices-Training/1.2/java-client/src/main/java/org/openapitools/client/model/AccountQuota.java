/*
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PerProjectQuota;
import org.openapitools.client.model.Quota;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a set of quotas associated with an account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:06.339817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountQuota {
  public static final String SERIALIZED_NAME_PER_PROJECT = "PerProject";
  @SerializedName(SERIALIZED_NAME_PER_PROJECT)
  private List<PerProjectQuota> perProject;

  public static final String SERIALIZED_NAME_PREDICTIONS = "Predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private Quota predictions;

  public static final String SERIALIZED_NAME_PROJECTS = "Projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private Quota projects;

  public static final String SERIALIZED_NAME_TIER = "Tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public AccountQuota() {
  }

  public AccountQuota(
     List<PerProjectQuota> perProject, 
     String tier
  ) {
    this();
    this.perProject = perProject;
    this.tier = tier;
  }

  /**
   * Gets a list of quotas that apply per-project for each project
   * @return perProject
   */
  @javax.annotation.Nullable
  public List<PerProjectQuota> getPerProject() {
    return perProject;
  }



  public AccountQuota predictions(Quota predictions) {
    this.predictions = predictions;
    return this;
  }

  /**
   * Get predictions
   * @return predictions
   */
  @javax.annotation.Nullable
  public Quota getPredictions() {
    return predictions;
  }

  public void setPredictions(Quota predictions) {
    this.predictions = predictions;
  }


  public AccountQuota projects(Quota projects) {
    this.projects = projects;
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public Quota getProjects() {
    return projects;
  }

  public void setProjects(Quota projects) {
    this.projects = projects;
  }


  /**
   * Gets the tier of user
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountQuota accountQuota = (AccountQuota) o;
    return Objects.equals(this.perProject, accountQuota.perProject) &&
        Objects.equals(this.predictions, accountQuota.predictions) &&
        Objects.equals(this.projects, accountQuota.projects) &&
        Objects.equals(this.tier, accountQuota.tier);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(perProject, predictions, projects, tier);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountQuota {\n");
    sb.append("    perProject: ").append(toIndentedString(perProject)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PerProject");
    openapiFields.add("Predictions");
    openapiFields.add("Projects");
    openapiFields.add("Tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountQuota is not found in the empty JSON string", AccountQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("PerProject") != null && !jsonObj.get("PerProject").isJsonNull()) {
        JsonArray jsonArrayperProject = jsonObj.getAsJsonArray("PerProject");
        if (jsonArrayperProject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PerProject").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PerProject` to be an array in the JSON string but got `%s`", jsonObj.get("PerProject").toString()));
          }

          // validate the optional field `PerProject` (array)
          for (int i = 0; i < jsonArrayperProject.size(); i++) {
            PerProjectQuota.validateJsonElement(jsonArrayperProject.get(i));
          };
        }
      }
      // validate the optional field `Predictions`
      if (jsonObj.get("Predictions") != null && !jsonObj.get("Predictions").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("Predictions"));
      }
      // validate the optional field `Projects`
      if (jsonObj.get("Projects") != null && !jsonObj.get("Projects").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("Projects"));
      }
      if ((jsonObj.get("Tier") != null && !jsonObj.get("Tier").isJsonNull()) && !jsonObj.get("Tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountQuota>() {
           @Override
           public void write(JsonWriter out, AccountQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountQuota
   * @throws IOException if the JSON string is invalid with respect to AccountQuota
   */
  public static AccountQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountQuota.class);
  }

  /**
   * Convert an instance of AccountQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

