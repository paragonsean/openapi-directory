/*
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.Iteration;
import org.openapitools.client.model.IterationPerformance;
import org.openapitools.client.model.Project;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApiApi
 */
@Disabled
public class ProjectApiApiTest {

    private final ProjectApiApi api = new ProjectApiApi();

    /**
     * Create a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String name = null;
        String trainingKey = null;
        String description = null;
        UUID domainId = null;
        Project response = api.createProject(name, trainingKey, description, domainId);
        // TODO: test validations
    }

    /**
     * Delete a specific iteration of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIterationTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        api.deleteIteration(projectId, iterationId, trainingKey);
        // TODO: test validations
    }

    /**
     * Delete a specific project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        api.deleteProject(projectId, trainingKey);
        // TODO: test validations
    }

    /**
     * Export a trained iteration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportIterationTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String platform = null;
        String trainingKey = null;
        Export response = api.exportIteration(projectId, iterationId, platform, trainingKey);
        // TODO: test validations
    }

    /**
     * Get the list of exports for a specific iteration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportsTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        List<Export> response = api.getExports(projectId, iterationId, trainingKey);
        // TODO: test validations
    }

    /**
     * Get a specific iteration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIterationTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        Iteration response = api.getIteration(projectId, iterationId, trainingKey);
        // TODO: test validations
    }

    /**
     * Get detailed performance information about a trained iteration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIterationPerformanceTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        Float threshold = null;
        String trainingKey = null;
        IterationPerformance response = api.getIterationPerformance(projectId, iterationId, threshold, trainingKey);
        // TODO: test validations
    }

    /**
     * Get iterations for the project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIterationsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        List<Iteration> response = api.getIterations(projectId, trainingKey);
        // TODO: test validations
    }

    /**
     * Get a specific project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        Project response = api.getProject(projectId, trainingKey);
        // TODO: test validations
    }

    /**
     * Get your projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        String trainingKey = null;
        List<Project> response = api.getProjects(trainingKey);
        // TODO: test validations
    }

    /**
     * Queues project for training
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trainProjectTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        Iteration response = api.trainProject(projectId, trainingKey);
        // TODO: test validations
    }

    /**
     * Update a specific iteration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIterationTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        Iteration iteration = null;
        Iteration response = api.updateIteration(projectId, iterationId, trainingKey, iteration);
        // TODO: test validations
    }

    /**
     * Update a specific project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        Project project = null;
        Project response = api.updateProject(projectId, trainingKey, project);
        // TODO: test validations
    }

}
