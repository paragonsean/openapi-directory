/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagPerformance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagPerformance::OAITagPerformance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagPerformance::OAITagPerformance() {
    this->initializeModel();
}

OAITagPerformance::~OAITagPerformance() {}

void OAITagPerformance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_precision_std_deviation_isSet = false;
    m_precision_std_deviation_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_recall_std_deviation_isSet = false;
    m_recall_std_deviation_isValid = false;
}

void OAITagPerformance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagPerformance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("Precision")]);
    m_precision_isSet = !json[QString("Precision")].isNull() && m_precision_isValid;

    m_precision_std_deviation_isValid = ::OpenAPI::fromJsonValue(m_precision_std_deviation, json[QString("PrecisionStdDeviation")]);
    m_precision_std_deviation_isSet = !json[QString("PrecisionStdDeviation")].isNull() && m_precision_std_deviation_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("Recall")]);
    m_recall_isSet = !json[QString("Recall")].isNull() && m_recall_isValid;

    m_recall_std_deviation_isValid = ::OpenAPI::fromJsonValue(m_recall_std_deviation, json[QString("RecallStdDeviation")]);
    m_recall_std_deviation_isSet = !json[QString("RecallStdDeviation")].isNull() && m_recall_std_deviation_isValid;
}

QString OAITagPerformance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagPerformance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_precision_isSet) {
        obj.insert(QString("Precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_precision_std_deviation_isSet) {
        obj.insert(QString("PrecisionStdDeviation"), ::OpenAPI::toJsonValue(m_precision_std_deviation));
    }
    if (m_recall_isSet) {
        obj.insert(QString("Recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_recall_std_deviation_isSet) {
        obj.insert(QString("RecallStdDeviation"), ::OpenAPI::toJsonValue(m_recall_std_deviation));
    }
    return obj;
}

QString OAITagPerformance::getId() const {
    return m_id;
}
void OAITagPerformance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITagPerformance::is_id_Set() const{
    return m_id_isSet;
}

bool OAITagPerformance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITagPerformance::getName() const {
    return m_name;
}
void OAITagPerformance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITagPerformance::is_name_Set() const{
    return m_name_isSet;
}

bool OAITagPerformance::is_name_Valid() const{
    return m_name_isValid;
}

double OAITagPerformance::getPrecision() const {
    return m_precision;
}
void OAITagPerformance::setPrecision(const double &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAITagPerformance::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAITagPerformance::is_precision_Valid() const{
    return m_precision_isValid;
}

double OAITagPerformance::getPrecisionStdDeviation() const {
    return m_precision_std_deviation;
}
void OAITagPerformance::setPrecisionStdDeviation(const double &precision_std_deviation) {
    m_precision_std_deviation = precision_std_deviation;
    m_precision_std_deviation_isSet = true;
}

bool OAITagPerformance::is_precision_std_deviation_Set() const{
    return m_precision_std_deviation_isSet;
}

bool OAITagPerformance::is_precision_std_deviation_Valid() const{
    return m_precision_std_deviation_isValid;
}

double OAITagPerformance::getRecall() const {
    return m_recall;
}
void OAITagPerformance::setRecall(const double &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAITagPerformance::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAITagPerformance::is_recall_Valid() const{
    return m_recall_isValid;
}

double OAITagPerformance::getRecallStdDeviation() const {
    return m_recall_std_deviation;
}
void OAITagPerformance::setRecallStdDeviation(const double &recall_std_deviation) {
    m_recall_std_deviation = recall_std_deviation;
    m_recall_std_deviation_isSet = true;
}

bool OAITagPerformance::is_recall_std_deviation_Set() const{
    return m_recall_std_deviation_isSet;
}

bool OAITagPerformance::is_recall_std_deviation_Valid() const{
    return m_recall_std_deviation_isValid;
}

bool OAITagPerformance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_std_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_std_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagPerformance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
