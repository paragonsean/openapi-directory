/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictionQueryToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictionQueryToken::OAIPredictionQueryToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictionQueryToken::OAIPredictionQueryToken() {
    this->initializeModel();
}

OAIPredictionQueryToken::~OAIPredictionQueryToken() {}

void OAIPredictionQueryToken::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_continuation_isSet = false;
    m_continuation_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_iteration_id_isSet = false;
    m_iteration_id_isValid = false;

    m_max_count_isSet = false;
    m_max_count_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPredictionQueryToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictionQueryToken::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("Application")]);
    m_application_isSet = !json[QString("Application")].isNull() && m_application_isValid;

    m_continuation_isValid = ::OpenAPI::fromJsonValue(m_continuation, json[QString("Continuation")]);
    m_continuation_isSet = !json[QString("Continuation")].isNull() && m_continuation_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_iteration_id_isValid = ::OpenAPI::fromJsonValue(m_iteration_id, json[QString("IterationId")]);
    m_iteration_id_isSet = !json[QString("IterationId")].isNull() && m_iteration_id_isValid;

    m_max_count_isValid = ::OpenAPI::fromJsonValue(m_max_count, json[QString("MaxCount")]);
    m_max_count_isSet = !json[QString("MaxCount")].isNull() && m_max_count_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("OrderBy")]);
    m_order_by_isSet = !json[QString("OrderBy")].isNull() && m_order_by_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("Session")]);
    m_session_isSet = !json[QString("Session")].isNull() && m_session_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPredictionQueryToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictionQueryToken::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("Application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_continuation_isSet) {
        obj.insert(QString("Continuation"), ::OpenAPI::toJsonValue(m_continuation));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_iteration_id_isSet) {
        obj.insert(QString("IterationId"), ::OpenAPI::toJsonValue(m_iteration_id));
    }
    if (m_max_count_isSet) {
        obj.insert(QString("MaxCount"), ::OpenAPI::toJsonValue(m_max_count));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("OrderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_session_isSet) {
        obj.insert(QString("Session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPredictionQueryToken::getApplication() const {
    return m_application;
}
void OAIPredictionQueryToken::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIPredictionQueryToken::is_application_Set() const{
    return m_application_isSet;
}

bool OAIPredictionQueryToken::is_application_Valid() const{
    return m_application_isValid;
}

QString OAIPredictionQueryToken::getContinuation() const {
    return m_continuation;
}
void OAIPredictionQueryToken::setContinuation(const QString &continuation) {
    m_continuation = continuation;
    m_continuation_isSet = true;
}

bool OAIPredictionQueryToken::is_continuation_Set() const{
    return m_continuation_isSet;
}

bool OAIPredictionQueryToken::is_continuation_Valid() const{
    return m_continuation_isValid;
}

QDateTime OAIPredictionQueryToken::getEndTime() const {
    return m_end_time;
}
void OAIPredictionQueryToken::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPredictionQueryToken::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPredictionQueryToken::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIPredictionQueryToken::getIterationId() const {
    return m_iteration_id;
}
void OAIPredictionQueryToken::setIterationId(const QString &iteration_id) {
    m_iteration_id = iteration_id;
    m_iteration_id_isSet = true;
}

bool OAIPredictionQueryToken::is_iteration_id_Set() const{
    return m_iteration_id_isSet;
}

bool OAIPredictionQueryToken::is_iteration_id_Valid() const{
    return m_iteration_id_isValid;
}

qint32 OAIPredictionQueryToken::getMaxCount() const {
    return m_max_count;
}
void OAIPredictionQueryToken::setMaxCount(const qint32 &max_count) {
    m_max_count = max_count;
    m_max_count_isSet = true;
}

bool OAIPredictionQueryToken::is_max_count_Set() const{
    return m_max_count_isSet;
}

bool OAIPredictionQueryToken::is_max_count_Valid() const{
    return m_max_count_isValid;
}

QString OAIPredictionQueryToken::getOrderBy() const {
    return m_order_by;
}
void OAIPredictionQueryToken::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIPredictionQueryToken::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIPredictionQueryToken::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QString OAIPredictionQueryToken::getSession() const {
    return m_session;
}
void OAIPredictionQueryToken::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIPredictionQueryToken::is_session_Set() const{
    return m_session_isSet;
}

bool OAIPredictionQueryToken::is_session_Valid() const{
    return m_session_isValid;
}

QDateTime OAIPredictionQueryToken::getStartTime() const {
    return m_start_time;
}
void OAIPredictionQueryToken::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPredictionQueryToken::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPredictionQueryToken::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<OAIPredictionQueryTag> OAIPredictionQueryToken::getTags() const {
    return m_tags;
}
void OAIPredictionQueryToken::setTags(const QList<OAIPredictionQueryTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPredictionQueryToken::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPredictionQueryToken::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPredictionQueryToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iteration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictionQueryToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
