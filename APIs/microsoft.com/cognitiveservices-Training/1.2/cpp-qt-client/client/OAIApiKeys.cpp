/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeys::OAIApiKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeys::OAIApiKeys() {
    this->initializeModel();
}

OAIApiKeys::~OAIApiKeys() {}

void OAIApiKeys::initializeModel() {

    m_prediction_keys_isSet = false;
    m_prediction_keys_isValid = false;

    m_training_keys_isSet = false;
    m_training_keys_isValid = false;
}

void OAIApiKeys::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeys::fromJsonObject(QJsonObject json) {

    m_prediction_keys_isValid = ::OpenAPI::fromJsonValue(m_prediction_keys, json[QString("PredictionKeys")]);
    m_prediction_keys_isSet = !json[QString("PredictionKeys")].isNull() && m_prediction_keys_isValid;

    m_training_keys_isValid = ::OpenAPI::fromJsonValue(m_training_keys, json[QString("TrainingKeys")]);
    m_training_keys_isSet = !json[QString("TrainingKeys")].isNull() && m_training_keys_isValid;
}

QString OAIApiKeys::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeys::asJsonObject() const {
    QJsonObject obj;
    if (m_prediction_keys.isSet()) {
        obj.insert(QString("PredictionKeys"), ::OpenAPI::toJsonValue(m_prediction_keys));
    }
    if (m_training_keys.isSet()) {
        obj.insert(QString("TrainingKeys"), ::OpenAPI::toJsonValue(m_training_keys));
    }
    return obj;
}

OAIKeyPair OAIApiKeys::getPredictionKeys() const {
    return m_prediction_keys;
}
void OAIApiKeys::setPredictionKeys(const OAIKeyPair &prediction_keys) {
    m_prediction_keys = prediction_keys;
    m_prediction_keys_isSet = true;
}

bool OAIApiKeys::is_prediction_keys_Set() const{
    return m_prediction_keys_isSet;
}

bool OAIApiKeys::is_prediction_keys_Valid() const{
    return m_prediction_keys_isValid;
}

OAIKeyPair OAIApiKeys::getTrainingKeys() const {
    return m_training_keys;
}
void OAIApiKeys::setTrainingKeys(const OAIKeyPair &training_keys) {
    m_training_keys = training_keys;
    m_training_keys_isSet = true;
}

bool OAIApiKeys::is_training_keys_Set() const{
    return m_training_keys_isSet;
}

bool OAIApiKeys::is_training_keys_Valid() const{
    return m_training_keys_isValid;
}

bool OAIApiKeys::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prediction_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
