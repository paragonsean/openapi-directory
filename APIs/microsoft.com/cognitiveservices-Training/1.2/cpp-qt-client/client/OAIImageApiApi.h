/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageApiApi_H
#define OAI_OAIImageApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIImage.h"
#include "OAIImageCreateSummary.h"
#include "OAIImageFileCreateBatch.h"
#include "OAIImageIdCreateBatch.h"
#include "OAIImageTagCreateBatch.h"
#include "OAIImageTagCreateSummary.h"
#include "OAIImageUrlCreateBatch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageApiApi : public QObject {
    Q_OBJECT

public:
    OAIImageApiApi(const int timeOut = 0);
    ~OAIImageApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  tag_ids QList<QString> [optional]
    */
    virtual void createImagesFromData(const QString &project_id, const QString &training_key, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QList<QString>> &tag_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_image_file_create_batch OAIImageFileCreateBatch [required]
    */
    virtual void createImagesFromFiles(const QString &project_id, const QString &training_key, const OAIImageFileCreateBatch &oai_image_file_create_batch);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_image_id_create_batch OAIImageIdCreateBatch [required]
    */
    virtual void createImagesFromPredictions(const QString &project_id, const QString &training_key, const OAIImageIdCreateBatch &oai_image_id_create_batch);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_image_url_create_batch OAIImageUrlCreateBatch [required]
    */
    virtual void createImagesFromUrls(const QString &project_id, const QString &training_key, const OAIImageUrlCreateBatch &oai_image_url_create_batch);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  image_ids QList<QString> [required]
    * @param[in]  tag_ids QList<QString> [required]
    * @param[in]  training_key QString [required]
    */
    virtual void deleteImageTags(const QString &project_id, const QList<QString> &image_ids, const QList<QString> &tag_ids, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  image_ids QList<QString> [required]
    * @param[in]  training_key QString [required]
    */
    virtual void deleteImages(const QString &project_id, const QList<QString> &image_ids, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  tag_ids QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  take qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void getTaggedImages(const QString &project_id, const QString &training_key, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  take qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void getUntaggedImages(const QString &project_id, const QString &training_key, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_image_tag_create_batch OAIImageTagCreateBatch [required]
    */
    virtual void postImageTags(const QString &project_id, const QString &training_key, const OAIImageTagCreateBatch &oai_image_tag_create_batch);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createImagesFromDataCallback(OAIHttpRequestWorker *worker);
    void createImagesFromFilesCallback(OAIHttpRequestWorker *worker);
    void createImagesFromPredictionsCallback(OAIHttpRequestWorker *worker);
    void createImagesFromUrlsCallback(OAIHttpRequestWorker *worker);
    void deleteImageTagsCallback(OAIHttpRequestWorker *worker);
    void deleteImagesCallback(OAIHttpRequestWorker *worker);
    void getTaggedImagesCallback(OAIHttpRequestWorker *worker);
    void getUntaggedImagesCallback(OAIHttpRequestWorker *worker);
    void postImageTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createImagesFromDataSignal(OAIImageCreateSummary summary);
    void createImagesFromFilesSignal(OAIImageCreateSummary summary);
    void createImagesFromPredictionsSignal(OAIImageCreateSummary summary);
    void createImagesFromUrlsSignal(OAIImageCreateSummary summary);
    void deleteImageTagsSignal();
    void deleteImagesSignal();
    void getTaggedImagesSignal(QList<OAIImage> summary);
    void getUntaggedImagesSignal(QList<OAIImage> summary);
    void postImageTagsSignal(OAIImageTagCreateSummary summary);


    void createImagesFromDataSignalFull(OAIHttpRequestWorker *worker, OAIImageCreateSummary summary);
    void createImagesFromFilesSignalFull(OAIHttpRequestWorker *worker, OAIImageCreateSummary summary);
    void createImagesFromPredictionsSignalFull(OAIHttpRequestWorker *worker, OAIImageCreateSummary summary);
    void createImagesFromUrlsSignalFull(OAIHttpRequestWorker *worker, OAIImageCreateSummary summary);
    void deleteImageTagsSignalFull(OAIHttpRequestWorker *worker);
    void deleteImagesSignalFull(OAIHttpRequestWorker *worker);
    void getTaggedImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void getUntaggedImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void postImageTagsSignalFull(OAIHttpRequestWorker *worker, OAIImageTagCreateSummary summary);

    Q_DECL_DEPRECATED_X("Use createImagesFromDataSignalError() instead")
    void createImagesFromDataSignalE(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromDataSignalError(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromFilesSignalError() instead")
    void createImagesFromFilesSignalE(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromFilesSignalError(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromPredictionsSignalError() instead")
    void createImagesFromPredictionsSignalE(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromPredictionsSignalError(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromUrlsSignalError() instead")
    void createImagesFromUrlsSignalE(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromUrlsSignalError(OAIImageCreateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageTagsSignalError() instead")
    void deleteImageTagsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageTagsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImagesSignalError() instead")
    void deleteImagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaggedImagesSignalError() instead")
    void getTaggedImagesSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaggedImagesSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUntaggedImagesSignalError() instead")
    void getUntaggedImagesSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUntaggedImagesSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postImageTagsSignalError() instead")
    void postImageTagsSignalE(OAIImageTagCreateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postImageTagsSignalError(OAIImageTagCreateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createImagesFromDataSignalErrorFull() instead")
    void createImagesFromDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromFilesSignalErrorFull() instead")
    void createImagesFromFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromPredictionsSignalErrorFull() instead")
    void createImagesFromPredictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromPredictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImagesFromUrlsSignalErrorFull() instead")
    void createImagesFromUrlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImagesFromUrlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageTagsSignalErrorFull() instead")
    void deleteImageTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImagesSignalErrorFull() instead")
    void deleteImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaggedImagesSignalErrorFull() instead")
    void getTaggedImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaggedImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUntaggedImagesSignalErrorFull() instead")
    void getUntaggedImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUntaggedImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postImageTagsSignalErrorFull() instead")
    void postImageTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postImageTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
