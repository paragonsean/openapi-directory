/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_current_iteration_id_isSet = false;
    m_current_iteration_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_thumbnail_uri_isSet = false;
    m_thumbnail_uri_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_current_iteration_id_isValid = ::OpenAPI::fromJsonValue(m_current_iteration_id, json[QString("CurrentIterationId")]);
    m_current_iteration_id_isSet = !json[QString("CurrentIterationId")].isNull() && m_current_iteration_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_thumbnail_uri_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_uri, json[QString("ThumbnailUri")]);
    m_thumbnail_uri_isSet = !json[QString("ThumbnailUri")].isNull() && m_thumbnail_uri_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_current_iteration_id_isSet) {
        obj.insert(QString("CurrentIterationId"), ::OpenAPI::toJsonValue(m_current_iteration_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_thumbnail_uri_isSet) {
        obj.insert(QString("ThumbnailUri"), ::OpenAPI::toJsonValue(m_thumbnail_uri));
    }
    return obj;
}

QDateTime OAIProject::getCreated() const {
    return m_created;
}
void OAIProject::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProject::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProject::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIProject::getCurrentIterationId() const {
    return m_current_iteration_id;
}
void OAIProject::setCurrentIterationId(const QString &current_iteration_id) {
    m_current_iteration_id = current_iteration_id;
    m_current_iteration_id_isSet = true;
}

bool OAIProject::is_current_iteration_id_Set() const{
    return m_current_iteration_id_isSet;
}

bool OAIProject::is_current_iteration_id_Valid() const{
    return m_current_iteration_id_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIProject::getLastModified() const {
    return m_last_modified;
}
void OAIProject::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIProject::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIProject::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

OAIProjectSettings OAIProject::getSettings() const {
    return m_settings;
}
void OAIProject::setSettings(const OAIProjectSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIProject::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIProject::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIProject::getThumbnailUri() const {
    return m_thumbnail_uri;
}
void OAIProject::setThumbnailUri(const QString &thumbnail_uri) {
    m_thumbnail_uri = thumbnail_uri;
    m_thumbnail_uri_isSet = true;
}

bool OAIProject::is_thumbnail_uri_Set() const{
    return m_thumbnail_uri_isSet;
}

bool OAIProject::is_thumbnail_uri_Valid() const{
    return m_thumbnail_uri_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_iteration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
