/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuota::OAIQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuota::OAIQuota() {
    this->initializeModel();
}

OAIQuota::~OAIQuota() {}

void OAIQuota::initializeModel() {

    m_time_until_reset_isSet = false;
    m_time_until_reset_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuota::fromJsonObject(QJsonObject json) {

    m_time_until_reset_isValid = ::OpenAPI::fromJsonValue(m_time_until_reset, json[QString("TimeUntilReset")]);
    m_time_until_reset_isSet = !json[QString("TimeUntilReset")].isNull() && m_time_until_reset_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("Used")]);
    m_used_isSet = !json[QString("Used")].isNull() && m_used_isValid;
}

QString OAIQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_time_until_reset_isSet) {
        obj.insert(QString("TimeUntilReset"), ::OpenAPI::toJsonValue(m_time_until_reset));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_used_isSet) {
        obj.insert(QString("Used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

QString OAIQuota::getTimeUntilReset() const {
    return m_time_until_reset;
}
void OAIQuota::setTimeUntilReset(const QString &time_until_reset) {
    m_time_until_reset = time_until_reset;
    m_time_until_reset_isSet = true;
}

bool OAIQuota::is_time_until_reset_Set() const{
    return m_time_until_reset_isSet;
}

bool OAIQuota::is_time_until_reset_Valid() const{
    return m_time_until_reset_isValid;
}

qint32 OAIQuota::getTotal() const {
    return m_total;
}
void OAIQuota::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQuota::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQuota::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIQuota::getUsed() const {
    return m_used;
}
void OAIQuota::setUsed(const qint32 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIQuota::is_used_Set() const{
    return m_used_isSet;
}

bool OAIQuota::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_until_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
