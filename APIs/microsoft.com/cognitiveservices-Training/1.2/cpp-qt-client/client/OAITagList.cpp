/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagList::OAITagList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagList::OAITagList() {
    this->initializeModel();
}

OAITagList::~OAITagList() {}

void OAITagList::initializeModel() {

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_total_tagged_images_isSet = false;
    m_total_tagged_images_isValid = false;

    m_total_untagged_images_isSet = false;
    m_total_untagged_images_isValid = false;
}

void OAITagList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagList::fromJsonObject(QJsonObject json) {

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_total_tagged_images_isValid = ::OpenAPI::fromJsonValue(m_total_tagged_images, json[QString("TotalTaggedImages")]);
    m_total_tagged_images_isSet = !json[QString("TotalTaggedImages")].isNull() && m_total_tagged_images_isValid;

    m_total_untagged_images_isValid = ::OpenAPI::fromJsonValue(m_total_untagged_images, json[QString("TotalUntaggedImages")]);
    m_total_untagged_images_isSet = !json[QString("TotalUntaggedImages")].isNull() && m_total_untagged_images_isValid;
}

QString OAITagList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagList::asJsonObject() const {
    QJsonObject obj;
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_total_tagged_images_isSet) {
        obj.insert(QString("TotalTaggedImages"), ::OpenAPI::toJsonValue(m_total_tagged_images));
    }
    if (m_total_untagged_images_isSet) {
        obj.insert(QString("TotalUntaggedImages"), ::OpenAPI::toJsonValue(m_total_untagged_images));
    }
    return obj;
}

QList<OAITag> OAITagList::getTags() const {
    return m_tags;
}
void OAITagList::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITagList::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITagList::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAITagList::getTotalTaggedImages() const {
    return m_total_tagged_images;
}
void OAITagList::setTotalTaggedImages(const qint32 &total_tagged_images) {
    m_total_tagged_images = total_tagged_images;
    m_total_tagged_images_isSet = true;
}

bool OAITagList::is_total_tagged_images_Set() const{
    return m_total_tagged_images_isSet;
}

bool OAITagList::is_total_tagged_images_Valid() const{
    return m_total_tagged_images_isValid;
}

qint32 OAITagList::getTotalUntaggedImages() const {
    return m_total_untagged_images;
}
void OAITagList::setTotalUntaggedImages(const qint32 &total_untagged_images) {
    m_total_untagged_images = total_untagged_images;
    m_total_untagged_images_isSet = true;
}

bool OAITagList::is_total_untagged_images_Set() const{
    return m_total_untagged_images_isSet;
}

bool OAITagList::is_total_untagged_images_Valid() const{
    return m_total_untagged_images_isValid;
}

bool OAITagList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tagged_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_untagged_images_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
