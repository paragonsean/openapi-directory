/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerProjectQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerProjectQuota::OAIPerProjectQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerProjectQuota::OAIPerProjectQuota() {
    this->initializeModel();
}

OAIPerProjectQuota::~OAIPerProjectQuota() {}

void OAIPerProjectQuota::initializeModel() {

    m_images_isSet = false;
    m_images_isValid = false;

    m_iterations_isSet = false;
    m_iterations_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPerProjectQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerProjectQuota::fromJsonObject(QJsonObject json) {

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("Images")]);
    m_images_isSet = !json[QString("Images")].isNull() && m_images_isValid;

    m_iterations_isValid = ::OpenAPI::fromJsonValue(m_iterations, json[QString("Iterations")]);
    m_iterations_isSet = !json[QString("Iterations")].isNull() && m_iterations_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("ProjectId")]);
    m_project_id_isSet = !json[QString("ProjectId")].isNull() && m_project_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPerProjectQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerProjectQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_images.isSet()) {
        obj.insert(QString("Images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_iterations.isSet()) {
        obj.insert(QString("Iterations"), ::OpenAPI::toJsonValue(m_iterations));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("ProjectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIQuota OAIPerProjectQuota::getImages() const {
    return m_images;
}
void OAIPerProjectQuota::setImages(const OAIQuota &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPerProjectQuota::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPerProjectQuota::is_images_Valid() const{
    return m_images_isValid;
}

OAIQuota OAIPerProjectQuota::getIterations() const {
    return m_iterations;
}
void OAIPerProjectQuota::setIterations(const OAIQuota &iterations) {
    m_iterations = iterations;
    m_iterations_isSet = true;
}

bool OAIPerProjectQuota::is_iterations_Set() const{
    return m_iterations_isSet;
}

bool OAIPerProjectQuota::is_iterations_Valid() const{
    return m_iterations_isValid;
}

QString OAIPerProjectQuota::getProjectId() const {
    return m_project_id;
}
void OAIPerProjectQuota::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIPerProjectQuota::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIPerProjectQuota::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIQuota OAIPerProjectQuota::getTags() const {
    return m_tags;
}
void OAIPerProjectQuota::setTags(const OAIQuota &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPerProjectQuota::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPerProjectQuota::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPerProjectQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iterations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerProjectQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
