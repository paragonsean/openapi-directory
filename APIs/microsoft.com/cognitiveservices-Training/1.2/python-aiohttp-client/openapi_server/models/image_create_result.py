# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class ImageCreateResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: Image=None, source_url: str=None, status: str=None):
        """ImageCreateResult - a model defined in OpenAPI

        :param image: The image of this ImageCreateResult.
        :param source_url: The source_url of this ImageCreateResult.
        :param status: The status of this ImageCreateResult.
        """
        self.openapi_types = {
            'image': Image,
            'source_url': str,
            'status': str
        }

        self.attribute_map = {
            'image': 'Image',
            'source_url': 'SourceUrl',
            'status': 'Status'
        }

        self._image = image
        self._source_url = source_url
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageCreateResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageCreateResult of this ImageCreateResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this ImageCreateResult.


        :return: The image of this ImageCreateResult.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageCreateResult.


        :param image: The image of this ImageCreateResult.
        :type image: Image
        """

        self._image = image

    @property
    def source_url(self):
        """Gets the source_url of this ImageCreateResult.


        :return: The source_url of this ImageCreateResult.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this ImageCreateResult.


        :param source_url: The source_url of this ImageCreateResult.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def status(self):
        """Gets the status of this ImageCreateResult.


        :return: The status of this ImageCreateResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImageCreateResult.


        :param status: The status of this ImageCreateResult.
        :type status: str
        """
        allowed_values = ["OK", "OKDuplicate", "ErrorSource", "ErrorImageFormat", "ErrorImageSize", "ErrorStorage", "ErrorLimitExceed", "ErrorTagLimitExceed", "ErrorUnknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
