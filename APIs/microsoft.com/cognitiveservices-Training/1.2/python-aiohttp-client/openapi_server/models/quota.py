# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_until_reset: str=None, total: int=None, used: int=None):
        """Quota - a model defined in OpenAPI

        :param time_until_reset: The time_until_reset of this Quota.
        :param total: The total of this Quota.
        :param used: The used of this Quota.
        """
        self.openapi_types = {
            'time_until_reset': str,
            'total': int,
            'used': int
        }

        self.attribute_map = {
            'time_until_reset': 'TimeUntilReset',
            'total': 'Total',
            'used': 'Used'
        }

        self._time_until_reset = time_until_reset
        self._total = total
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quota of this Quota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_until_reset(self):
        """Gets the time_until_reset of this Quota.

        Gets the time remaining until the quota resets. Null if this quota does not reset.

        :return: The time_until_reset of this Quota.
        :rtype: str
        """
        return self._time_until_reset

    @time_until_reset.setter
    def time_until_reset(self, time_until_reset):
        """Sets the time_until_reset of this Quota.

        Gets the time remaining until the quota resets. Null if this quota does not reset.

        :param time_until_reset: The time_until_reset of this Quota.
        :type time_until_reset: str
        """

        self._time_until_reset = time_until_reset

    @property
    def total(self):
        """Gets the total of this Quota.

        The total allowable amount in the quota

        :return: The total of this Quota.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Quota.

        The total allowable amount in the quota

        :param total: The total of this Quota.
        :type total: int
        """

        self._total = total

    @property
    def used(self):
        """Gets the used of this Quota.

        The amount of quota that has currently been used

        :return: The used of this Quota.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this Quota.

        The amount of quota that has currently been used

        :param used: The used of this Quota.
        :type used: int
        """

        self._used = used
