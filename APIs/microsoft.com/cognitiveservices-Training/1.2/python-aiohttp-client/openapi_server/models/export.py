# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Export(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_uri: str=None, platform: str=None, status: str=None):
        """Export - a model defined in OpenAPI

        :param download_uri: The download_uri of this Export.
        :param platform: The platform of this Export.
        :param status: The status of this Export.
        """
        self.openapi_types = {
            'download_uri': str,
            'platform': str,
            'status': str
        }

        self.attribute_map = {
            'download_uri': 'DownloadUri',
            'platform': 'Platform',
            'status': 'Status'
        }

        self._download_uri = download_uri
        self._platform = platform
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Export':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Export of this Export.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_uri(self):
        """Gets the download_uri of this Export.


        :return: The download_uri of this Export.
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this Export.


        :param download_uri: The download_uri of this Export.
        :type download_uri: str
        """

        self._download_uri = download_uri

    @property
    def platform(self):
        """Gets the platform of this Export.


        :return: The platform of this Export.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Export.


        :param platform: The platform of this Export.
        :type platform: str
        """
        allowed_values = ["CoreML", "TensorFlow"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this Export.


        :return: The status of this Export.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Export.


        :param status: The status of this Export.
        :type status: str
        """
        allowed_values = ["Exporting", "Failed", "Done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
