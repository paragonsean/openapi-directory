# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exportable: bool=None, id: str=None, name: str=None):
        """Domain - a model defined in OpenAPI

        :param exportable: The exportable of this Domain.
        :param id: The id of this Domain.
        :param name: The name of this Domain.
        """
        self.openapi_types = {
            'exportable': bool,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'exportable': 'Exportable',
            'id': 'Id',
            'name': 'Name'
        }

        self._exportable = exportable
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exportable(self):
        """Gets the exportable of this Domain.


        :return: The exportable of this Domain.
        :rtype: bool
        """
        return self._exportable

    @exportable.setter
    def exportable(self, exportable):
        """Sets the exportable of this Domain.


        :param exportable: The exportable of this Domain.
        :type exportable: bool
        """

        self._exportable = exportable

    @property
    def id(self):
        """Gets the id of this Domain.


        :return: The id of this Domain.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.


        :param id: The id of this Domain.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Domain.


        :return: The name of this Domain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Domain.


        :param name: The name of this Domain.
        :type name: str
        """

        self._name = name
