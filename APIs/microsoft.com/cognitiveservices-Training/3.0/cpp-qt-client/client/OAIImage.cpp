/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_image_uri_isSet = false;
    m_original_image_uri_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_resized_image_uri_isSet = false;
    m_resized_image_uri_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_thumbnail_uri_isSet = false;
    m_thumbnail_uri_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_image_uri_isValid = ::OpenAPI::fromJsonValue(m_original_image_uri, json[QString("originalImageUri")]);
    m_original_image_uri_isSet = !json[QString("originalImageUri")].isNull() && m_original_image_uri_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_resized_image_uri_isValid = ::OpenAPI::fromJsonValue(m_resized_image_uri, json[QString("resizedImageUri")]);
    m_resized_image_uri_isSet = !json[QString("resizedImageUri")].isNull() && m_resized_image_uri_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_thumbnail_uri_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_uri, json[QString("thumbnailUri")]);
    m_thumbnail_uri_isSet = !json[QString("thumbnailUri")].isNull() && m_thumbnail_uri_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_image_uri_isSet) {
        obj.insert(QString("originalImageUri"), ::OpenAPI::toJsonValue(m_original_image_uri));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_resized_image_uri_isSet) {
        obj.insert(QString("resizedImageUri"), ::OpenAPI::toJsonValue(m_resized_image_uri));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_thumbnail_uri_isSet) {
        obj.insert(QString("thumbnailUri"), ::OpenAPI::toJsonValue(m_thumbnail_uri));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QDateTime OAIImage::getCreated() const {
    return m_created;
}
void OAIImage::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImage::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImage::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIImage::getHeight() const {
    return m_height;
}
void OAIImage::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImage::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImage::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIImage::getId() const {
    return m_id;
}
void OAIImage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImage::getOriginalImageUri() const {
    return m_original_image_uri;
}
void OAIImage::setOriginalImageUri(const QString &original_image_uri) {
    m_original_image_uri = original_image_uri;
    m_original_image_uri_isSet = true;
}

bool OAIImage::is_original_image_uri_Set() const{
    return m_original_image_uri_isSet;
}

bool OAIImage::is_original_image_uri_Valid() const{
    return m_original_image_uri_isValid;
}

QList<OAIImageRegion> OAIImage::getRegions() const {
    return m_regions;
}
void OAIImage::setRegions(const QList<OAIImageRegion> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIImage::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIImage::is_regions_Valid() const{
    return m_regions_isValid;
}

QString OAIImage::getResizedImageUri() const {
    return m_resized_image_uri;
}
void OAIImage::setResizedImageUri(const QString &resized_image_uri) {
    m_resized_image_uri = resized_image_uri;
    m_resized_image_uri_isSet = true;
}

bool OAIImage::is_resized_image_uri_Set() const{
    return m_resized_image_uri_isSet;
}

bool OAIImage::is_resized_image_uri_Valid() const{
    return m_resized_image_uri_isValid;
}

QList<OAIImageTag> OAIImage::getTags() const {
    return m_tags;
}
void OAIImage::setTags(const QList<OAIImageTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIImage::getThumbnailUri() const {
    return m_thumbnail_uri;
}
void OAIImage::setThumbnailUri(const QString &thumbnail_uri) {
    m_thumbnail_uri = thumbnail_uri;
    m_thumbnail_uri_isSet = true;
}

bool OAIImage::is_thumbnail_uri_Set() const{
    return m_thumbnail_uri_isSet;
}

bool OAIImage::is_thumbnail_uri_Valid() const{
    return m_thumbnail_uri_isValid;
}

qint32 OAIImage::getWidth() const {
    return m_width;
}
void OAIImage::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImage::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImage::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resized_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
