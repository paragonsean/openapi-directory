/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredImagePrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredImagePrediction::OAIStoredImagePrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredImagePrediction::OAIStoredImagePrediction() {
    this->initializeModel();
}

OAIStoredImagePrediction::~OAIStoredImagePrediction() {}

void OAIStoredImagePrediction::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iteration_isSet = false;
    m_iteration_isValid = false;

    m_original_image_uri_isSet = false;
    m_original_image_uri_isValid = false;

    m_predictions_isSet = false;
    m_predictions_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_resized_image_uri_isSet = false;
    m_resized_image_uri_isValid = false;

    m_thumbnail_uri_isSet = false;
    m_thumbnail_uri_isValid = false;
}

void OAIStoredImagePrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredImagePrediction::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iteration_isValid = ::OpenAPI::fromJsonValue(m_iteration, json[QString("iteration")]);
    m_iteration_isSet = !json[QString("iteration")].isNull() && m_iteration_isValid;

    m_original_image_uri_isValid = ::OpenAPI::fromJsonValue(m_original_image_uri, json[QString("originalImageUri")]);
    m_original_image_uri_isSet = !json[QString("originalImageUri")].isNull() && m_original_image_uri_isValid;

    m_predictions_isValid = ::OpenAPI::fromJsonValue(m_predictions, json[QString("predictions")]);
    m_predictions_isSet = !json[QString("predictions")].isNull() && m_predictions_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_resized_image_uri_isValid = ::OpenAPI::fromJsonValue(m_resized_image_uri, json[QString("resizedImageUri")]);
    m_resized_image_uri_isSet = !json[QString("resizedImageUri")].isNull() && m_resized_image_uri_isValid;

    m_thumbnail_uri_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_uri, json[QString("thumbnailUri")]);
    m_thumbnail_uri_isSet = !json[QString("thumbnailUri")].isNull() && m_thumbnail_uri_isValid;
}

QString OAIStoredImagePrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredImagePrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iteration_isSet) {
        obj.insert(QString("iteration"), ::OpenAPI::toJsonValue(m_iteration));
    }
    if (m_original_image_uri_isSet) {
        obj.insert(QString("originalImageUri"), ::OpenAPI::toJsonValue(m_original_image_uri));
    }
    if (m_predictions.size() > 0) {
        obj.insert(QString("predictions"), ::OpenAPI::toJsonValue(m_predictions));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_resized_image_uri_isSet) {
        obj.insert(QString("resizedImageUri"), ::OpenAPI::toJsonValue(m_resized_image_uri));
    }
    if (m_thumbnail_uri_isSet) {
        obj.insert(QString("thumbnailUri"), ::OpenAPI::toJsonValue(m_thumbnail_uri));
    }
    return obj;
}

QDateTime OAIStoredImagePrediction::getCreated() const {
    return m_created;
}
void OAIStoredImagePrediction::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIStoredImagePrediction::is_created_Set() const{
    return m_created_isSet;
}

bool OAIStoredImagePrediction::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIStoredImagePrediction::getDomain() const {
    return m_domain;
}
void OAIStoredImagePrediction::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIStoredImagePrediction::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIStoredImagePrediction::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIStoredImagePrediction::getId() const {
    return m_id;
}
void OAIStoredImagePrediction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoredImagePrediction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoredImagePrediction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoredImagePrediction::getIteration() const {
    return m_iteration;
}
void OAIStoredImagePrediction::setIteration(const QString &iteration) {
    m_iteration = iteration;
    m_iteration_isSet = true;
}

bool OAIStoredImagePrediction::is_iteration_Set() const{
    return m_iteration_isSet;
}

bool OAIStoredImagePrediction::is_iteration_Valid() const{
    return m_iteration_isValid;
}

QString OAIStoredImagePrediction::getOriginalImageUri() const {
    return m_original_image_uri;
}
void OAIStoredImagePrediction::setOriginalImageUri(const QString &original_image_uri) {
    m_original_image_uri = original_image_uri;
    m_original_image_uri_isSet = true;
}

bool OAIStoredImagePrediction::is_original_image_uri_Set() const{
    return m_original_image_uri_isSet;
}

bool OAIStoredImagePrediction::is_original_image_uri_Valid() const{
    return m_original_image_uri_isValid;
}

QList<OAIPrediction> OAIStoredImagePrediction::getPredictions() const {
    return m_predictions;
}
void OAIStoredImagePrediction::setPredictions(const QList<OAIPrediction> &predictions) {
    m_predictions = predictions;
    m_predictions_isSet = true;
}

bool OAIStoredImagePrediction::is_predictions_Set() const{
    return m_predictions_isSet;
}

bool OAIStoredImagePrediction::is_predictions_Valid() const{
    return m_predictions_isValid;
}

QString OAIStoredImagePrediction::getProject() const {
    return m_project;
}
void OAIStoredImagePrediction::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIStoredImagePrediction::is_project_Set() const{
    return m_project_isSet;
}

bool OAIStoredImagePrediction::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIStoredImagePrediction::getResizedImageUri() const {
    return m_resized_image_uri;
}
void OAIStoredImagePrediction::setResizedImageUri(const QString &resized_image_uri) {
    m_resized_image_uri = resized_image_uri;
    m_resized_image_uri_isSet = true;
}

bool OAIStoredImagePrediction::is_resized_image_uri_Set() const{
    return m_resized_image_uri_isSet;
}

bool OAIStoredImagePrediction::is_resized_image_uri_Valid() const{
    return m_resized_image_uri_isValid;
}

QString OAIStoredImagePrediction::getThumbnailUri() const {
    return m_thumbnail_uri;
}
void OAIStoredImagePrediction::setThumbnailUri(const QString &thumbnail_uri) {
    m_thumbnail_uri = thumbnail_uri;
    m_thumbnail_uri_isSet = true;
}

bool OAIStoredImagePrediction::is_thumbnail_uri_Set() const{
    return m_thumbnail_uri_isSet;
}

bool OAIStoredImagePrediction::is_thumbnail_uri_Valid() const{
    return m_thumbnail_uri_isValid;
}

bool OAIStoredImagePrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iteration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resized_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredImagePrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
