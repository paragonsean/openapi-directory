/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomVisionError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:14.859299-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomVisionError {
  /**
   * The error code.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    NO_ERROR("NoError"),
    
    BAD_REQUEST("BadRequest"),
    
    BAD_REQUEST_EXCEEDED_BATCH_SIZE("BadRequestExceededBatchSize"),
    
    BAD_REQUEST_NOT_SUPPORTED("BadRequestNotSupported"),
    
    BAD_REQUEST_INVALID_IDS("BadRequestInvalidIds"),
    
    BAD_REQUEST_PROJECT_NAME("BadRequestProjectName"),
    
    BAD_REQUEST_PROJECT_NAME_NOT_UNIQUE("BadRequestProjectNameNotUnique"),
    
    BAD_REQUEST_PROJECT_DESCRIPTION("BadRequestProjectDescription"),
    
    BAD_REQUEST_PROJECT_UNKNOWN_DOMAIN("BadRequestProjectUnknownDomain"),
    
    BAD_REQUEST_PROJECT_UNKNOWN_CLASSIFICATION("BadRequestProjectUnknownClassification"),
    
    BAD_REQUEST_PROJECT_UNSUPPORTED_DOMAIN_TYPE_CHANGE("BadRequestProjectUnsupportedDomainTypeChange"),
    
    BAD_REQUEST_PROJECT_UNSUPPORTED_EXPORT_PLATFORM("BadRequestProjectUnsupportedExportPlatform"),
    
    BAD_REQUEST_ITERATION_NAME("BadRequestIterationName"),
    
    BAD_REQUEST_ITERATION_NAME_NOT_UNIQUE("BadRequestIterationNameNotUnique"),
    
    BAD_REQUEST_ITERATION_DESCRIPTION("BadRequestIterationDescription"),
    
    BAD_REQUEST_ITERATION_IS_NOT_TRAINED("BadRequestIterationIsNotTrained"),
    
    BAD_REQUEST_WORKSPACE_CANNOT_BE_MODIFIED("BadRequestWorkspaceCannotBeModified"),
    
    BAD_REQUEST_WORKSPACE_NOT_DELETABLE("BadRequestWorkspaceNotDeletable"),
    
    BAD_REQUEST_TAG_NAME("BadRequestTagName"),
    
    BAD_REQUEST_TAG_NAME_NOT_UNIQUE("BadRequestTagNameNotUnique"),
    
    BAD_REQUEST_TAG_DESCRIPTION("BadRequestTagDescription"),
    
    BAD_REQUEST_TAG_TYPE("BadRequestTagType"),
    
    BAD_REQUEST_MULTIPLE_NEGATIVE_TAG("BadRequestMultipleNegativeTag"),
    
    BAD_REQUEST_IMAGE_TAGS("BadRequestImageTags"),
    
    BAD_REQUEST_IMAGE_REGIONS("BadRequestImageRegions"),
    
    BAD_REQUEST_NEGATIVE_AND_REGULAR_TAG_ON_SAME_IMAGE("BadRequestNegativeAndRegularTagOnSameImage"),
    
    BAD_REQUEST_REQUIRED_PARAM_IS_NULL("BadRequestRequiredParamIsNull"),
    
    BAD_REQUEST_ITERATION_IS_PUBLISHED("BadRequestIterationIsPublished"),
    
    BAD_REQUEST_INVALID_PUBLISH_NAME("BadRequestInvalidPublishName"),
    
    BAD_REQUEST_INVALID_PUBLISH_TARGET("BadRequestInvalidPublishTarget"),
    
    BAD_REQUEST_UNPUBLISH_FAILED("BadRequestUnpublishFailed"),
    
    BAD_REQUEST_ITERATION_NOT_PUBLISHED("BadRequestIterationNotPublished"),
    
    BAD_REQUEST_SUBSCRIPTION_API("BadRequestSubscriptionApi"),
    
    BAD_REQUEST_EXCEED_PROJECT_LIMIT("BadRequestExceedProjectLimit"),
    
    BAD_REQUEST_EXCEED_ITERATION_PER_PROJECT_LIMIT("BadRequestExceedIterationPerProjectLimit"),
    
    BAD_REQUEST_EXCEED_TAG_PER_PROJECT_LIMIT("BadRequestExceedTagPerProjectLimit"),
    
    BAD_REQUEST_EXCEED_TAG_PER_IMAGE_LIMIT("BadRequestExceedTagPerImageLimit"),
    
    BAD_REQUEST_EXCEEDED_QUOTA("BadRequestExceededQuota"),
    
    BAD_REQUEST_CANNOT_MIGRATE_PROJECT_WITH_NAME("BadRequestCannotMigrateProjectWithName"),
    
    BAD_REQUEST_NOT_LIMITED_TRIAL("BadRequestNotLimitedTrial"),
    
    BAD_REQUEST_IMAGE_BATCH("BadRequestImageBatch"),
    
    BAD_REQUEST_IMAGE_STREAM("BadRequestImageStream"),
    
    BAD_REQUEST_IMAGE_URL("BadRequestImageUrl"),
    
    BAD_REQUEST_IMAGE_FORMAT("BadRequestImageFormat"),
    
    BAD_REQUEST_IMAGE_SIZE_BYTES("BadRequestImageSizeBytes"),
    
    BAD_REQUEST_IMAGE_EXCEEDED_COUNT("BadRequestImageExceededCount"),
    
    BAD_REQUEST_TRAINING_NOT_NEEDED("BadRequestTrainingNotNeeded"),
    
    BAD_REQUEST_TRAINING_NOT_NEEDED_BUT_TRAINING_PIPELINE_UPDATED("BadRequestTrainingNotNeededButTrainingPipelineUpdated"),
    
    BAD_REQUEST_TRAINING_VALIDATION_FAILED("BadRequestTrainingValidationFailed"),
    
    BAD_REQUEST_CLASSIFICATION_TRAINING_VALIDATION_FAILED("BadRequestClassificationTrainingValidationFailed"),
    
    BAD_REQUEST_MULTI_CLASS_CLASSIFICATION_TRAINING_VALIDATION_FAILED("BadRequestMultiClassClassificationTrainingValidationFailed"),
    
    BAD_REQUEST_MULTI_LABEL_CLASSIFICATION_TRAINING_VALIDATION_FAILED("BadRequestMultiLabelClassificationTrainingValidationFailed"),
    
    BAD_REQUEST_DETECTION_TRAINING_VALIDATION_FAILED("BadRequestDetectionTrainingValidationFailed"),
    
    BAD_REQUEST_TRAINING_ALREADY_IN_PROGRESS("BadRequestTrainingAlreadyInProgress"),
    
    BAD_REQUEST_DETECTION_TRAINING_NOT_ALLOW_NEGATIVE_TAG("BadRequestDetectionTrainingNotAllowNegativeTag"),
    
    BAD_REQUEST_INVALID_EMAIL_ADDRESS("BadRequestInvalidEmailAddress"),
    
    BAD_REQUEST_DOMAIN_NOT_SUPPORTED_FOR_ADVANCED_TRAINING("BadRequestDomainNotSupportedForAdvancedTraining"),
    
    BAD_REQUEST_EXPORT_PLATFORM_NOT_SUPPORTED_FOR_ADVANCED_TRAINING("BadRequestExportPlatformNotSupportedForAdvancedTraining"),
    
    BAD_REQUEST_RESERVED_BUDGET_IN_HOURS_NOT_ENOUGH_FOR_ADVANCED_TRAINING("BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining"),
    
    BAD_REQUEST_EXPORT_VALIDATION_FAILED("BadRequestExportValidationFailed"),
    
    BAD_REQUEST_EXPORT_ALREADY_IN_PROGRESS("BadRequestExportAlreadyInProgress"),
    
    BAD_REQUEST_PREDICTION_IDS_MISSING("BadRequestPredictionIdsMissing"),
    
    BAD_REQUEST_PREDICTION_IDS_EXCEEDED_COUNT("BadRequestPredictionIdsExceededCount"),
    
    BAD_REQUEST_PREDICTION_TAGS_EXCEEDED_COUNT("BadRequestPredictionTagsExceededCount"),
    
    BAD_REQUEST_PREDICTION_RESULTS_EXCEEDED_COUNT("BadRequestPredictionResultsExceededCount"),
    
    BAD_REQUEST_PREDICTION_INVALID_APPLICATION_NAME("BadRequestPredictionInvalidApplicationName"),
    
    BAD_REQUEST_PREDICTION_INVALID_QUERY_PARAMETERS("BadRequestPredictionInvalidQueryParameters"),
    
    BAD_REQUEST_INVALID("BadRequestInvalid"),
    
    UNSUPPORTED_MEDIA_TYPE("UnsupportedMediaType"),
    
    FORBIDDEN("Forbidden"),
    
    FORBIDDEN_USER("ForbiddenUser"),
    
    FORBIDDEN_USER_RESOURCE("ForbiddenUserResource"),
    
    FORBIDDEN_USER_SIGNUP_DISABLED("ForbiddenUserSignupDisabled"),
    
    FORBIDDEN_USER_SIGNUP_ALLOWANCE_EXCEEDED("ForbiddenUserSignupAllowanceExceeded"),
    
    FORBIDDEN_USER_DOES_NOT_EXIST("ForbiddenUserDoesNotExist"),
    
    FORBIDDEN_USER_DISABLED("ForbiddenUserDisabled"),
    
    FORBIDDEN_USER_INSUFFICIENT_CAPABILITY("ForbiddenUserInsufficientCapability"),
    
    FORBIDDEN_DR_MODE_ENABLED("ForbiddenDRModeEnabled"),
    
    FORBIDDEN_INVALID("ForbiddenInvalid"),
    
    NOT_FOUND("NotFound"),
    
    NOT_FOUND_PROJECT("NotFoundProject"),
    
    NOT_FOUND_PROJECT_DEFAULT_ITERATION("NotFoundProjectDefaultIteration"),
    
    NOT_FOUND_ITERATION("NotFoundIteration"),
    
    NOT_FOUND_ITERATION_PERFORMANCE("NotFoundIterationPerformance"),
    
    NOT_FOUND_TAG("NotFoundTag"),
    
    NOT_FOUND_IMAGE("NotFoundImage"),
    
    NOT_FOUND_DOMAIN("NotFoundDomain"),
    
    NOT_FOUND_APIM_SUBSCRIPTION("NotFoundApimSubscription"),
    
    NOT_FOUND_INVALID("NotFoundInvalid"),
    
    CONFLICT("Conflict"),
    
    CONFLICT_INVALID("ConflictInvalid"),
    
    ERROR_UNKNOWN("ErrorUnknown"),
    
    ERROR_PROJECT_INVALID_WORKSPACE("ErrorProjectInvalidWorkspace"),
    
    ERROR_PROJECT_INVALID_PIPELINE_CONFIGURATION("ErrorProjectInvalidPipelineConfiguration"),
    
    ERROR_PROJECT_INVALID_DOMAIN("ErrorProjectInvalidDomain"),
    
    ERROR_PROJECT_TRAINING_REQUEST_FAILED("ErrorProjectTrainingRequestFailed"),
    
    ERROR_PROJECT_EXPORT_REQUEST_FAILED("ErrorProjectExportRequestFailed"),
    
    ERROR_FEATURIZATION_SERVICE_UNAVAILABLE("ErrorFeaturizationServiceUnavailable"),
    
    ERROR_FEATURIZATION_QUEUE_TIMEOUT("ErrorFeaturizationQueueTimeout"),
    
    ERROR_FEATURIZATION_INVALID_FEATURIZER("ErrorFeaturizationInvalidFeaturizer"),
    
    ERROR_FEATURIZATION_AUGMENTATION_UNAVAILABLE("ErrorFeaturizationAugmentationUnavailable"),
    
    ERROR_FEATURIZATION_UNRECOGNIZED_JOB("ErrorFeaturizationUnrecognizedJob"),
    
    ERROR_FEATURIZATION_AUGMENTATION_ERROR("ErrorFeaturizationAugmentationError"),
    
    ERROR_EXPORTER_INVALID_PLATFORM("ErrorExporterInvalidPlatform"),
    
    ERROR_EXPORTER_INVALID_FEATURIZER("ErrorExporterInvalidFeaturizer"),
    
    ERROR_EXPORTER_INVALID_CLASSIFIER("ErrorExporterInvalidClassifier"),
    
    ERROR_PREDICTION_SERVICE_UNAVAILABLE("ErrorPredictionServiceUnavailable"),
    
    ERROR_PREDICTION_MODEL_NOT_FOUND("ErrorPredictionModelNotFound"),
    
    ERROR_PREDICTION_MODEL_NOT_CACHED("ErrorPredictionModelNotCached"),
    
    ERROR_PREDICTION("ErrorPrediction"),
    
    ERROR_PREDICTION_STORAGE("ErrorPredictionStorage"),
    
    ERROR_REGION_PROPOSAL("ErrorRegionProposal"),
    
    ERROR_INVALID("ErrorInvalid");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public CustomVisionError() {
  }

  public CustomVisionError code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * The error code.
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public CustomVisionError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A message explaining the error reported by the service.
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomVisionError customVisionError = (CustomVisionError) o;
    return Objects.equals(this.code, customVisionError.code) &&
        Objects.equals(this.message, customVisionError.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomVisionError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomVisionError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomVisionError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomVisionError is not found in the empty JSON string", CustomVisionError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomVisionError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomVisionError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomVisionError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomVisionError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomVisionError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomVisionError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomVisionError.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomVisionError>() {
           @Override
           public void write(JsonWriter out, CustomVisionError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomVisionError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomVisionError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomVisionError
   * @throws IOException if the JSON string is invalid with respect to CustomVisionError
   */
  public static CustomVisionError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomVisionError.class);
  }

  /**
   * Convert an instance of CustomVisionError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

