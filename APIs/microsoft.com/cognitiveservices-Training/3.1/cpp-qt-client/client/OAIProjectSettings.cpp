/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSettings::OAIProjectSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSettings::OAIProjectSettings() {
    this->initializeModel();
}

OAIProjectSettings::~OAIProjectSettings() {}

void OAIProjectSettings::initializeModel() {

    m_classification_type_isSet = false;
    m_classification_type_isValid = false;

    m_detection_parameters_isSet = false;
    m_detection_parameters_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_image_processing_settings_isSet = false;
    m_image_processing_settings_isValid = false;

    m_target_export_platforms_isSet = false;
    m_target_export_platforms_isValid = false;

    m_use_negative_set_isSet = false;
    m_use_negative_set_isValid = false;
}

void OAIProjectSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSettings::fromJsonObject(QJsonObject json) {

    m_classification_type_isValid = ::OpenAPI::fromJsonValue(m_classification_type, json[QString("classificationType")]);
    m_classification_type_isSet = !json[QString("classificationType")].isNull() && m_classification_type_isValid;

    m_detection_parameters_isValid = ::OpenAPI::fromJsonValue(m_detection_parameters, json[QString("detectionParameters")]);
    m_detection_parameters_isSet = !json[QString("detectionParameters")].isNull() && m_detection_parameters_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("domainId")]);
    m_domain_id_isSet = !json[QString("domainId")].isNull() && m_domain_id_isValid;

    m_image_processing_settings_isValid = ::OpenAPI::fromJsonValue(m_image_processing_settings, json[QString("imageProcessingSettings")]);
    m_image_processing_settings_isSet = !json[QString("imageProcessingSettings")].isNull() && m_image_processing_settings_isValid;

    m_target_export_platforms_isValid = ::OpenAPI::fromJsonValue(m_target_export_platforms, json[QString("targetExportPlatforms")]);
    m_target_export_platforms_isSet = !json[QString("targetExportPlatforms")].isNull() && m_target_export_platforms_isValid;

    m_use_negative_set_isValid = ::OpenAPI::fromJsonValue(m_use_negative_set, json[QString("useNegativeSet")]);
    m_use_negative_set_isSet = !json[QString("useNegativeSet")].isNull() && m_use_negative_set_isValid;
}

QString OAIProjectSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_type_isSet) {
        obj.insert(QString("classificationType"), ::OpenAPI::toJsonValue(m_classification_type));
    }
    if (m_detection_parameters_isSet) {
        obj.insert(QString("detectionParameters"), ::OpenAPI::toJsonValue(m_detection_parameters));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("domainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_image_processing_settings.isSet()) {
        obj.insert(QString("imageProcessingSettings"), ::OpenAPI::toJsonValue(m_image_processing_settings));
    }
    if (m_target_export_platforms.size() > 0) {
        obj.insert(QString("targetExportPlatforms"), ::OpenAPI::toJsonValue(m_target_export_platforms));
    }
    if (m_use_negative_set_isSet) {
        obj.insert(QString("useNegativeSet"), ::OpenAPI::toJsonValue(m_use_negative_set));
    }
    return obj;
}

QString OAIProjectSettings::getClassificationType() const {
    return m_classification_type;
}
void OAIProjectSettings::setClassificationType(const QString &classification_type) {
    m_classification_type = classification_type;
    m_classification_type_isSet = true;
}

bool OAIProjectSettings::is_classification_type_Set() const{
    return m_classification_type_isSet;
}

bool OAIProjectSettings::is_classification_type_Valid() const{
    return m_classification_type_isValid;
}

QString OAIProjectSettings::getDetectionParameters() const {
    return m_detection_parameters;
}
void OAIProjectSettings::setDetectionParameters(const QString &detection_parameters) {
    m_detection_parameters = detection_parameters;
    m_detection_parameters_isSet = true;
}

bool OAIProjectSettings::is_detection_parameters_Set() const{
    return m_detection_parameters_isSet;
}

bool OAIProjectSettings::is_detection_parameters_Valid() const{
    return m_detection_parameters_isValid;
}

QString OAIProjectSettings::getDomainId() const {
    return m_domain_id;
}
void OAIProjectSettings::setDomainId(const QString &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIProjectSettings::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIProjectSettings::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

OAIImageProcessingSettings OAIProjectSettings::getImageProcessingSettings() const {
    return m_image_processing_settings;
}
void OAIProjectSettings::setImageProcessingSettings(const OAIImageProcessingSettings &image_processing_settings) {
    m_image_processing_settings = image_processing_settings;
    m_image_processing_settings_isSet = true;
}

bool OAIProjectSettings::is_image_processing_settings_Set() const{
    return m_image_processing_settings_isSet;
}

bool OAIProjectSettings::is_image_processing_settings_Valid() const{
    return m_image_processing_settings_isValid;
}

QList<QString> OAIProjectSettings::getTargetExportPlatforms() const {
    return m_target_export_platforms;
}
void OAIProjectSettings::setTargetExportPlatforms(const QList<QString> &target_export_platforms) {
    m_target_export_platforms = target_export_platforms;
    m_target_export_platforms_isSet = true;
}

bool OAIProjectSettings::is_target_export_platforms_Set() const{
    return m_target_export_platforms_isSet;
}

bool OAIProjectSettings::is_target_export_platforms_Valid() const{
    return m_target_export_platforms_isValid;
}

bool OAIProjectSettings::isUseNegativeSet() const {
    return m_use_negative_set;
}
void OAIProjectSettings::setUseNegativeSet(const bool &use_negative_set) {
    m_use_negative_set = use_negative_set;
    m_use_negative_set_isSet = true;
}

bool OAIProjectSettings::is_use_negative_set_Set() const{
    return m_use_negative_set_isSet;
}

bool OAIProjectSettings::is_use_negative_set_Valid() const{
    return m_use_negative_set_isValid;
}

bool OAIProjectSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_processing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_export_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_negative_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
