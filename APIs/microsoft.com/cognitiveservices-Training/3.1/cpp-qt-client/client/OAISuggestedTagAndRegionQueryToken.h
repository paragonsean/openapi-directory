/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuggestedTagAndRegionQueryToken.h
 *
 * Contains properties we need to fetch suggested tags for. For the first call, Session and continuation set to null.  Then on subsequent calls, uses the session/continuation from the previous SuggestedTagAndRegionQuery result to fetch additional results.
 */

#ifndef OAISuggestedTagAndRegionQueryToken_H
#define OAISuggestedTagAndRegionQueryToken_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuggestedTagAndRegionQueryToken : public OAIObject {
public:
    OAISuggestedTagAndRegionQueryToken();
    OAISuggestedTagAndRegionQueryToken(QString json);
    ~OAISuggestedTagAndRegionQueryToken() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContinuation() const;
    void setContinuation(const QString &continuation);
    bool is_continuation_Set() const;
    bool is_continuation_Valid() const;

    qint32 getMaxCount() const;
    void setMaxCount(const qint32 &max_count);
    bool is_max_count_Set() const;
    bool is_max_count_Valid() const;

    QString getSession() const;
    void setSession(const QString &session);
    bool is_session_Set() const;
    bool is_session_Valid() const;

    QString getSortBy() const;
    void setSortBy(const QString &sort_by);
    bool is_sort_by_Set() const;
    bool is_sort_by_Valid() const;

    QList<QString> getTagIds() const;
    void setTagIds(const QList<QString> &tag_ids);
    bool is_tag_ids_Set() const;
    bool is_tag_ids_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_continuation;
    bool m_continuation_isSet;
    bool m_continuation_isValid;

    qint32 m_max_count;
    bool m_max_count_isSet;
    bool m_max_count_isValid;

    QString m_session;
    bool m_session_isSet;
    bool m_session_isValid;

    QString m_sort_by;
    bool m_sort_by_isSet;
    bool m_sort_by_isValid;

    QList<QString> m_tag_ids;
    bool m_tag_ids_isSet;
    bool m_tag_ids_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuggestedTagAndRegionQueryToken)

#endif // OAISuggestedTagAndRegionQueryToken_H
