/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictionQueryTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictionQueryTag::OAIPredictionQueryTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictionQueryTag::OAIPredictionQueryTag() {
    this->initializeModel();
}

OAIPredictionQueryTag::~OAIPredictionQueryTag() {}

void OAIPredictionQueryTag::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_threshold_isSet = false;
    m_max_threshold_isValid = false;

    m_min_threshold_isSet = false;
    m_min_threshold_isValid = false;
}

void OAIPredictionQueryTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictionQueryTag::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_threshold_isValid = ::OpenAPI::fromJsonValue(m_max_threshold, json[QString("maxThreshold")]);
    m_max_threshold_isSet = !json[QString("maxThreshold")].isNull() && m_max_threshold_isValid;

    m_min_threshold_isValid = ::OpenAPI::fromJsonValue(m_min_threshold, json[QString("minThreshold")]);
    m_min_threshold_isSet = !json[QString("minThreshold")].isNull() && m_min_threshold_isValid;
}

QString OAIPredictionQueryTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictionQueryTag::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_threshold_isSet) {
        obj.insert(QString("maxThreshold"), ::OpenAPI::toJsonValue(m_max_threshold));
    }
    if (m_min_threshold_isSet) {
        obj.insert(QString("minThreshold"), ::OpenAPI::toJsonValue(m_min_threshold));
    }
    return obj;
}

QString OAIPredictionQueryTag::getId() const {
    return m_id;
}
void OAIPredictionQueryTag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPredictionQueryTag::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPredictionQueryTag::is_id_Valid() const{
    return m_id_isValid;
}

float OAIPredictionQueryTag::getMaxThreshold() const {
    return m_max_threshold;
}
void OAIPredictionQueryTag::setMaxThreshold(const float &max_threshold) {
    m_max_threshold = max_threshold;
    m_max_threshold_isSet = true;
}

bool OAIPredictionQueryTag::is_max_threshold_Set() const{
    return m_max_threshold_isSet;
}

bool OAIPredictionQueryTag::is_max_threshold_Valid() const{
    return m_max_threshold_isValid;
}

float OAIPredictionQueryTag::getMinThreshold() const {
    return m_min_threshold;
}
void OAIPredictionQueryTag::setMinThreshold(const float &min_threshold) {
    m_min_threshold = min_threshold;
    m_min_threshold_isSet = true;
}

bool OAIPredictionQueryTag::is_min_threshold_Set() const{
    return m_min_threshold_isSet;
}

bool OAIPredictionQueryTag::is_min_threshold_Valid() const{
    return m_min_threshold_isValid;
}

bool OAIPredictionQueryTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictionQueryTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
