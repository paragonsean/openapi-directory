/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTagCreateEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTagCreateEntry::OAIImageTagCreateEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTagCreateEntry::OAIImageTagCreateEntry() {
    this->initializeModel();
}

OAIImageTagCreateEntry::~OAIImageTagCreateEntry() {}

void OAIImageTagCreateEntry::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_tag_id_isSet = false;
    m_tag_id_isValid = false;
}

void OAIImageTagCreateEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTagCreateEntry::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_tag_id_isValid = ::OpenAPI::fromJsonValue(m_tag_id, json[QString("tagId")]);
    m_tag_id_isSet = !json[QString("tagId")].isNull() && m_tag_id_isValid;
}

QString OAIImageTagCreateEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTagCreateEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_tag_id_isSet) {
        obj.insert(QString("tagId"), ::OpenAPI::toJsonValue(m_tag_id));
    }
    return obj;
}

QString OAIImageTagCreateEntry::getImageId() const {
    return m_image_id;
}
void OAIImageTagCreateEntry::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIImageTagCreateEntry::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIImageTagCreateEntry::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIImageTagCreateEntry::getTagId() const {
    return m_tag_id;
}
void OAIImageTagCreateEntry::setTagId(const QString &tag_id) {
    m_tag_id = tag_id;
    m_tag_id_isSet = true;
}

bool OAIImageTagCreateEntry::is_tag_id_Set() const{
    return m_tag_id_isSet;
}

bool OAIImageTagCreateEntry::is_tag_id_Valid() const{
    return m_tag_id_isValid;
}

bool OAIImageTagCreateEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTagCreateEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
