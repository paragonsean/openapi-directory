/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties we need to fetch suggested tags for. For the first call, Session and continuation set to null.  Then on subsequent calls, uses the session/continuation from the previous SuggestedTagAndRegionQuery result to fetch additional results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:13.015357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestedTagAndRegionQueryToken {
  public static final String SERIALIZED_NAME_CONTINUATION = "continuation";
  @SerializedName(SERIALIZED_NAME_CONTINUATION)
  private String continuation;

  public static final String SERIALIZED_NAME_MAX_COUNT = "maxCount";
  @SerializedName(SERIALIZED_NAME_MAX_COUNT)
  private Integer maxCount;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private String session;

  /**
   * OrderBy. Ordering mechanism for your results.
   */
  @JsonAdapter(SortByEnum.Adapter.class)
  public enum SortByEnum {
    UNCERTAINTY_ASCENDING("UncertaintyAscending"),
    
    UNCERTAINTY_DESCENDING("UncertaintyDescending");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortByEnum fromValue(String value) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private SortByEnum sortBy;

  public static final String SERIALIZED_NAME_TAG_IDS = "tagIds";
  @SerializedName(SERIALIZED_NAME_TAG_IDS)
  private List<UUID> tagIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public SuggestedTagAndRegionQueryToken() {
  }

  public SuggestedTagAndRegionQueryToken continuation(String continuation) {
    this.continuation = continuation;
    return this;
  }

  /**
   * Continuation Id for database pagination. Initially null but later used to paginate.
   * @return continuation
   */
  @javax.annotation.Nullable
  public String getContinuation() {
    return continuation;
  }

  public void setContinuation(String continuation) {
    this.continuation = continuation;
  }


  public SuggestedTagAndRegionQueryToken maxCount(Integer maxCount) {
    this.maxCount = maxCount;
    return this;
  }

  /**
   * Maximum number of results you want to be returned in the response.
   * @return maxCount
   */
  @javax.annotation.Nullable
  public Integer getMaxCount() {
    return maxCount;
  }

  public void setMaxCount(Integer maxCount) {
    this.maxCount = maxCount;
  }


  public SuggestedTagAndRegionQueryToken session(String session) {
    this.session = session;
    return this;
  }

  /**
   * SessionId for database query. Initially set to null but later used to paginate.
   * @return session
   */
  @javax.annotation.Nullable
  public String getSession() {
    return session;
  }

  public void setSession(String session) {
    this.session = session;
  }


  public SuggestedTagAndRegionQueryToken sortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * OrderBy. Ordering mechanism for your results.
   * @return sortBy
   */
  @javax.annotation.Nullable
  public SortByEnum getSortBy() {
    return sortBy;
  }

  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }


  public SuggestedTagAndRegionQueryToken tagIds(List<UUID> tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public SuggestedTagAndRegionQueryToken addTagIdsItem(UUID tagIdsItem) {
    if (this.tagIds == null) {
      this.tagIds = new ArrayList<>();
    }
    this.tagIds.add(tagIdsItem);
    return this;
  }

  /**
   * Existing TagIds in project to filter suggested tags on.
   * @return tagIds
   */
  @javax.annotation.Nullable
  public List<UUID> getTagIds() {
    return tagIds;
  }

  public void setTagIds(List<UUID> tagIds) {
    this.tagIds = tagIds;
  }


  public SuggestedTagAndRegionQueryToken threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Confidence threshold to filter suggested tags on.
   * @return threshold
   */
  @javax.annotation.Nullable
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken = (SuggestedTagAndRegionQueryToken) o;
    return Objects.equals(this.continuation, suggestedTagAndRegionQueryToken.continuation) &&
        Objects.equals(this.maxCount, suggestedTagAndRegionQueryToken.maxCount) &&
        Objects.equals(this.session, suggestedTagAndRegionQueryToken.session) &&
        Objects.equals(this.sortBy, suggestedTagAndRegionQueryToken.sortBy) &&
        Objects.equals(this.tagIds, suggestedTagAndRegionQueryToken.tagIds) &&
        Objects.equals(this.threshold, suggestedTagAndRegionQueryToken.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continuation, maxCount, session, sortBy, tagIds, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestedTagAndRegionQueryToken {\n");
    sb.append("    continuation: ").append(toIndentedString(continuation)).append("\n");
    sb.append("    maxCount: ").append(toIndentedString(maxCount)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    tagIds: ").append(toIndentedString(tagIds)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("continuation");
    openapiFields.add("maxCount");
    openapiFields.add("session");
    openapiFields.add("sortBy");
    openapiFields.add("tagIds");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestedTagAndRegionQueryToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestedTagAndRegionQueryToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestedTagAndRegionQueryToken is not found in the empty JSON string", SuggestedTagAndRegionQueryToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestedTagAndRegionQueryToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestedTagAndRegionQueryToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("continuation") != null && !jsonObj.get("continuation").isJsonNull()) && !jsonObj.get("continuation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuation").toString()));
      }
      if ((jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) && !jsonObj.get("session").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session").toString()));
      }
      if ((jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) && !jsonObj.get("sortBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortBy").toString()));
      }
      // validate the optional field `sortBy`
      if (jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) {
        SortByEnum.validateJsonElement(jsonObj.get("sortBy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagIds") != null && !jsonObj.get("tagIds").isJsonNull() && !jsonObj.get("tagIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagIds` to be an array in the JSON string but got `%s`", jsonObj.get("tagIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestedTagAndRegionQueryToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestedTagAndRegionQueryToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestedTagAndRegionQueryToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestedTagAndRegionQueryToken.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestedTagAndRegionQueryToken>() {
           @Override
           public void write(JsonWriter out, SuggestedTagAndRegionQueryToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestedTagAndRegionQueryToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestedTagAndRegionQueryToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestedTagAndRegionQueryToken
   * @throws IOException if the JSON string is invalid with respect to SuggestedTagAndRegionQueryToken
   */
  public static SuggestedTagAndRegionQueryToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestedTagAndRegionQueryToken.class);
  }

  /**
   * Convert an instance of SuggestedTagAndRegionQueryToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

