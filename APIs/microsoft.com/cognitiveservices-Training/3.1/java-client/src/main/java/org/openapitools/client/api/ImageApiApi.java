/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomVisionError;
import java.io.File;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageCreateSummary;
import org.openapitools.client.model.ImageFileCreateBatch;
import org.openapitools.client.model.ImageIdCreateBatch;
import org.openapitools.client.model.ImageRegionCreateBatch;
import org.openapitools.client.model.ImageRegionCreateSummary;
import org.openapitools.client.model.ImageTagCreateBatch;
import org.openapitools.client.model.ImageTagCreateSummary;
import org.openapitools.client.model.ImageUrlCreateBatch;
import org.openapitools.client.model.SuggestedTagAndRegionQuery;
import org.openapitools.client.model.SuggestedTagAndRegionQueryToken;
import org.openapitools.client.model.TagFilter;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImageApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createImageRegions
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageRegionCreateBatch Batch of image regions which include a tag and bounding box. Limited to 64. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageRegionsCall(UUID projectId, String trainingKey, ImageRegionCreateBatch imageRegionCreateBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageRegionCreateBatch;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/regions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImageRegionsValidateBeforeCall(UUID projectId, String trainingKey, ImageRegionCreateBatch imageRegionCreateBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImageRegions(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImageRegions(Async)");
        }

        // verify the required parameter 'imageRegionCreateBatch' is set
        if (imageRegionCreateBatch == null) {
            throw new ApiException("Missing the required parameter 'imageRegionCreateBatch' when calling createImageRegions(Async)");
        }

        return createImageRegionsCall(projectId, trainingKey, imageRegionCreateBatch, _callback);

    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.  There is a limit of 64 entries in the batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageRegionCreateBatch Batch of image regions which include a tag and bounding box. Limited to 64. (required)
     * @return ImageRegionCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageRegionCreateSummary createImageRegions(UUID projectId, String trainingKey, ImageRegionCreateBatch imageRegionCreateBatch) throws ApiException {
        ApiResponse<ImageRegionCreateSummary> localVarResp = createImageRegionsWithHttpInfo(projectId, trainingKey, imageRegionCreateBatch);
        return localVarResp.getData();
    }

    /**
     * Create a set of image regions.
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.  There is a limit of 64 entries in the batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageRegionCreateBatch Batch of image regions which include a tag and bounding box. Limited to 64. (required)
     * @return ApiResponse&lt;ImageRegionCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageRegionCreateSummary> createImageRegionsWithHttpInfo(UUID projectId, String trainingKey, ImageRegionCreateBatch imageRegionCreateBatch) throws ApiException {
        okhttp3.Call localVarCall = createImageRegionsValidateBeforeCall(projectId, trainingKey, imageRegionCreateBatch, null);
        Type localVarReturnType = new TypeToken<ImageRegionCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a set of image regions. (asynchronously)
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.  There is a limit of 64 entries in the batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageRegionCreateBatch Batch of image regions which include a tag and bounding box. Limited to 64. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageRegionsAsync(UUID projectId, String trainingKey, ImageRegionCreateBatch imageRegionCreateBatch, final ApiCallback<ImageRegionCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImageRegionsValidateBeforeCall(projectId, trainingKey, imageRegionCreateBatch, _callback);
        Type localVarReturnType = new TypeToken<ImageRegionCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImageTags
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageTagCreateBatch Batch of image tags. Limited to 128 tags per batch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageTagsCall(UUID projectId, String trainingKey, ImageTagCreateBatch imageTagCreateBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageTagCreateBatch;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/tags"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImageTagsValidateBeforeCall(UUID projectId, String trainingKey, ImageTagCreateBatch imageTagCreateBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImageTags(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImageTags(Async)");
        }

        // verify the required parameter 'imageTagCreateBatch' is set
        if (imageTagCreateBatch == null) {
            throw new ApiException("Missing the required parameter 'imageTagCreateBatch' when calling createImageTags(Async)");
        }

        return createImageTagsCall(projectId, trainingKey, imageTagCreateBatch, _callback);

    }

    /**
     * Associate a set of images with a set of tags.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageTagCreateBatch Batch of image tags. Limited to 128 tags per batch. (required)
     * @return ImageTagCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageTagCreateSummary createImageTags(UUID projectId, String trainingKey, ImageTagCreateBatch imageTagCreateBatch) throws ApiException {
        ApiResponse<ImageTagCreateSummary> localVarResp = createImageTagsWithHttpInfo(projectId, trainingKey, imageTagCreateBatch);
        return localVarResp.getData();
    }

    /**
     * Associate a set of images with a set of tags.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageTagCreateBatch Batch of image tags. Limited to 128 tags per batch. (required)
     * @return ApiResponse&lt;ImageTagCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageTagCreateSummary> createImageTagsWithHttpInfo(UUID projectId, String trainingKey, ImageTagCreateBatch imageTagCreateBatch) throws ApiException {
        okhttp3.Call localVarCall = createImageTagsValidateBeforeCall(projectId, trainingKey, imageTagCreateBatch, null);
        Type localVarReturnType = new TypeToken<ImageTagCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associate a set of images with a set of tags. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageTagCreateBatch Batch of image tags. Limited to 128 tags per batch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageTagsAsync(UUID projectId, String trainingKey, ImageTagCreateBatch imageTagCreateBatch, final ApiCallback<ImageTagCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImageTagsValidateBeforeCall(projectId, trainingKey, imageTagCreateBatch, _callback);
        Type localVarReturnType = new TypeToken<ImageTagCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImagesFromData
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. (required)
     * @param tagIds The tags ids with which to tag each image. Limited to 20. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromDataCall(UUID projectId, String trainingKey, File imageData, List<UUID> tagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImagesFromDataValidateBeforeCall(UUID projectId, String trainingKey, File imageData, List<UUID> tagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImagesFromData(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImagesFromData(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling createImagesFromData(Async)");
        }

        return createImagesFromDataCall(projectId, trainingKey, imageData, tagIds, _callback);

    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart  multiple image files can be sent at once, with a maximum of 64 files
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. (required)
     * @param tagIds The tags ids with which to tag each image. Limited to 20. (optional)
     * @return ImageCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageCreateSummary createImagesFromData(UUID projectId, String trainingKey, File imageData, List<UUID> tagIds) throws ApiException {
        ApiResponse<ImageCreateSummary> localVarResp = createImagesFromDataWithHttpInfo(projectId, trainingKey, imageData, tagIds);
        return localVarResp.getData();
    }

    /**
     * Add the provided images to the set of training images.
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart  multiple image files can be sent at once, with a maximum of 64 files
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. (required)
     * @param tagIds The tags ids with which to tag each image. Limited to 20. (optional)
     * @return ApiResponse&lt;ImageCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCreateSummary> createImagesFromDataWithHttpInfo(UUID projectId, String trainingKey, File imageData, List<UUID> tagIds) throws ApiException {
        okhttp3.Call localVarCall = createImagesFromDataValidateBeforeCall(projectId, trainingKey, imageData, tagIds, null);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the provided images to the set of training images. (asynchronously)
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart  multiple image files can be sent at once, with a maximum of 64 files
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. (required)
     * @param tagIds The tags ids with which to tag each image. Limited to 20. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromDataAsync(UUID projectId, String trainingKey, File imageData, List<UUID> tagIds, final ApiCallback<ImageCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImagesFromDataValidateBeforeCall(projectId, trainingKey, imageData, tagIds, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImagesFromFiles
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageFileCreateBatch The batch of image files to add. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromFilesCall(UUID projectId, String trainingKey, ImageFileCreateBatch imageFileCreateBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageFileCreateBatch;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/files"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImagesFromFilesValidateBeforeCall(UUID projectId, String trainingKey, ImageFileCreateBatch imageFileCreateBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImagesFromFiles(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImagesFromFiles(Async)");
        }

        // verify the required parameter 'imageFileCreateBatch' is set
        if (imageFileCreateBatch == null) {
            throw new ApiException("Missing the required parameter 'imageFileCreateBatch' when calling createImagesFromFiles(Async)");
        }

        return createImagesFromFilesCall(projectId, trainingKey, imageFileCreateBatch, _callback);

    }

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageFileCreateBatch The batch of image files to add. Limited to 64 images and 20 tags per batch. (required)
     * @return ImageCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageCreateSummary createImagesFromFiles(UUID projectId, String trainingKey, ImageFileCreateBatch imageFileCreateBatch) throws ApiException {
        ApiResponse<ImageCreateSummary> localVarResp = createImagesFromFilesWithHttpInfo(projectId, trainingKey, imageFileCreateBatch);
        return localVarResp.getData();
    }

    /**
     * Add the provided batch of images to the set of training images.
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageFileCreateBatch The batch of image files to add. Limited to 64 images and 20 tags per batch. (required)
     * @return ApiResponse&lt;ImageCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCreateSummary> createImagesFromFilesWithHttpInfo(UUID projectId, String trainingKey, ImageFileCreateBatch imageFileCreateBatch) throws ApiException {
        okhttp3.Call localVarCall = createImagesFromFilesValidateBeforeCall(projectId, trainingKey, imageFileCreateBatch, null);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the provided batch of images to the set of training images. (asynchronously)
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageFileCreateBatch The batch of image files to add. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromFilesAsync(UUID projectId, String trainingKey, ImageFileCreateBatch imageFileCreateBatch, final ApiCallback<ImageCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImagesFromFilesValidateBeforeCall(projectId, trainingKey, imageFileCreateBatch, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImagesFromPredictions
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIdCreateBatch Image and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromPredictionsCall(UUID projectId, String trainingKey, ImageIdCreateBatch imageIdCreateBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageIdCreateBatch;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/predictions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImagesFromPredictionsValidateBeforeCall(UUID projectId, String trainingKey, ImageIdCreateBatch imageIdCreateBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImagesFromPredictions(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImagesFromPredictions(Async)");
        }

        // verify the required parameter 'imageIdCreateBatch' is set
        if (imageIdCreateBatch == null) {
            throw new ApiException("Missing the required parameter 'imageIdCreateBatch' when calling createImagesFromPredictions(Async)");
        }

        return createImagesFromPredictionsCall(projectId, trainingKey, imageIdCreateBatch, _callback);

    }

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIdCreateBatch Image and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @return ImageCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageCreateSummary createImagesFromPredictions(UUID projectId, String trainingKey, ImageIdCreateBatch imageIdCreateBatch) throws ApiException {
        ApiResponse<ImageCreateSummary> localVarResp = createImagesFromPredictionsWithHttpInfo(projectId, trainingKey, imageIdCreateBatch);
        return localVarResp.getData();
    }

    /**
     * Add the specified predicted images to the set of training images.
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIdCreateBatch Image and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @return ApiResponse&lt;ImageCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCreateSummary> createImagesFromPredictionsWithHttpInfo(UUID projectId, String trainingKey, ImageIdCreateBatch imageIdCreateBatch) throws ApiException {
        okhttp3.Call localVarCall = createImagesFromPredictionsValidateBeforeCall(projectId, trainingKey, imageIdCreateBatch, null);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the specified predicted images to the set of training images. (asynchronously)
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIdCreateBatch Image and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromPredictionsAsync(UUID projectId, String trainingKey, ImageIdCreateBatch imageIdCreateBatch, final ApiCallback<ImageCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImagesFromPredictionsValidateBeforeCall(projectId, trainingKey, imageIdCreateBatch, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImagesFromUrls
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageUrlCreateBatch Image urls and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromUrlsCall(UUID projectId, String trainingKey, ImageUrlCreateBatch imageUrlCreateBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrlCreateBatch;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/urls"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImagesFromUrlsValidateBeforeCall(UUID projectId, String trainingKey, ImageUrlCreateBatch imageUrlCreateBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createImagesFromUrls(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createImagesFromUrls(Async)");
        }

        // verify the required parameter 'imageUrlCreateBatch' is set
        if (imageUrlCreateBatch == null) {
            throw new ApiException("Missing the required parameter 'imageUrlCreateBatch' when calling createImagesFromUrls(Async)");
        }

        return createImagesFromUrlsCall(projectId, trainingKey, imageUrlCreateBatch, _callback);

    }

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageUrlCreateBatch Image urls and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @return ImageCreateSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImageCreateSummary createImagesFromUrls(UUID projectId, String trainingKey, ImageUrlCreateBatch imageUrlCreateBatch) throws ApiException {
        ApiResponse<ImageCreateSummary> localVarResp = createImagesFromUrlsWithHttpInfo(projectId, trainingKey, imageUrlCreateBatch);
        return localVarResp.getData();
    }

    /**
     * Add the provided images urls to the set of training images.
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageUrlCreateBatch Image urls and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @return ApiResponse&lt;ImageCreateSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCreateSummary> createImagesFromUrlsWithHttpInfo(UUID projectId, String trainingKey, ImageUrlCreateBatch imageUrlCreateBatch) throws ApiException {
        okhttp3.Call localVarCall = createImagesFromUrlsValidateBeforeCall(projectId, trainingKey, imageUrlCreateBatch, null);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the provided images urls to the set of training images. (asynchronously)
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageUrlCreateBatch Image urls and tag ids. Limited to 64 images and 20 tags per batch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImagesFromUrlsAsync(UUID projectId, String trainingKey, ImageUrlCreateBatch imageUrlCreateBatch, final ApiCallback<ImageCreateSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImagesFromUrlsValidateBeforeCall(projectId, trainingKey, imageUrlCreateBatch, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageRegions
     * @param projectId The project id. (required)
     * @param regionIds Regions to delete. Limited to 64. (required)
     * @param trainingKey API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageRegionsCall(UUID projectId, List<UUID> regionIds, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/regions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (regionIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "regionIds", regionIds));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageRegionsValidateBeforeCall(UUID projectId, List<UUID> regionIds, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteImageRegions(Async)");
        }

        // verify the required parameter 'regionIds' is set
        if (regionIds == null) {
            throw new ApiException("Missing the required parameter 'regionIds' when calling deleteImageRegions(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling deleteImageRegions(Async)");
        }

        return deleteImageRegionsCall(projectId, regionIds, trainingKey, _callback);

    }

    /**
     * Delete a set of image regions.
     * 
     * @param projectId The project id. (required)
     * @param regionIds Regions to delete. Limited to 64. (required)
     * @param trainingKey API key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageRegions(UUID projectId, List<UUID> regionIds, String trainingKey) throws ApiException {
        deleteImageRegionsWithHttpInfo(projectId, regionIds, trainingKey);
    }

    /**
     * Delete a set of image regions.
     * 
     * @param projectId The project id. (required)
     * @param regionIds Regions to delete. Limited to 64. (required)
     * @param trainingKey API key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageRegionsWithHttpInfo(UUID projectId, List<UUID> regionIds, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = deleteImageRegionsValidateBeforeCall(projectId, regionIds, trainingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a set of image regions. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param regionIds Regions to delete. Limited to 64. (required)
     * @param trainingKey API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds, String trainingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageRegionsValidateBeforeCall(projectId, regionIds, trainingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageTags
     * @param projectId The project id. (required)
     * @param imageIds Image ids. Limited to 64 images. (required)
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags. (required)
     * @param trainingKey API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageTagsCall(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/tags"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "imageIds", imageIds));
        }

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageTagsValidateBeforeCall(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteImageTags(Async)");
        }

        // verify the required parameter 'imageIds' is set
        if (imageIds == null) {
            throw new ApiException("Missing the required parameter 'imageIds' when calling deleteImageTags(Async)");
        }

        // verify the required parameter 'tagIds' is set
        if (tagIds == null) {
            throw new ApiException("Missing the required parameter 'tagIds' when calling deleteImageTags(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling deleteImageTags(Async)");
        }

        return deleteImageTagsCall(projectId, imageIds, tagIds, trainingKey, _callback);

    }

    /**
     * Remove a set of tags from a set of images.
     * 
     * @param projectId The project id. (required)
     * @param imageIds Image ids. Limited to 64 images. (required)
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags. (required)
     * @param trainingKey API key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, String trainingKey) throws ApiException {
        deleteImageTagsWithHttpInfo(projectId, imageIds, tagIds, trainingKey);
    }

    /**
     * Remove a set of tags from a set of images.
     * 
     * @param projectId The project id. (required)
     * @param imageIds Image ids. Limited to 64 images. (required)
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags. (required)
     * @param trainingKey API key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageTagsWithHttpInfo(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = deleteImageTagsValidateBeforeCall(projectId, imageIds, tagIds, trainingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a set of tags from a set of images. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param imageIds Image ids. Limited to 64 images. (required)
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags. (required)
     * @param trainingKey API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds, String trainingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageTagsValidateBeforeCall(projectId, imageIds, tagIds, trainingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImages
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch. (optional)
     * @param allImages Flag to specify delete all images, specify this flag or a list of images. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param allIterations Removes these images from all iterations, not just the current workspace. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesCall(UUID projectId, String trainingKey, List<UUID> imageIds, Boolean allImages, Boolean allIterations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "imageIds", imageIds));
        }

        if (allImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allImages", allImages));
        }

        if (allIterations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allIterations", allIterations));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImagesValidateBeforeCall(UUID projectId, String trainingKey, List<UUID> imageIds, Boolean allImages, Boolean allIterations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteImages(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling deleteImages(Async)");
        }

        return deleteImagesCall(projectId, trainingKey, imageIds, allImages, allIterations, _callback);

    }

    /**
     * Delete images from the set of training images.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch. (optional)
     * @param allImages Flag to specify delete all images, specify this flag or a list of images. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param allIterations Removes these images from all iterations, not just the current workspace. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImages(UUID projectId, String trainingKey, List<UUID> imageIds, Boolean allImages, Boolean allIterations) throws ApiException {
        deleteImagesWithHttpInfo(projectId, trainingKey, imageIds, allImages, allIterations);
    }

    /**
     * Delete images from the set of training images.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch. (optional)
     * @param allImages Flag to specify delete all images, specify this flag or a list of images. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param allIterations Removes these images from all iterations, not just the current workspace. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImagesWithHttpInfo(UUID projectId, String trainingKey, List<UUID> imageIds, Boolean allImages, Boolean allIterations) throws ApiException {
        okhttp3.Call localVarCall = deleteImagesValidateBeforeCall(projectId, trainingKey, imageIds, allImages, allIterations, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete images from the set of training images. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch. (optional)
     * @param allImages Flag to specify delete all images, specify this flag or a list of images. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param allIterations Removes these images from all iterations, not just the current workspace. Using this flag will return a 202 response to indicate the images are being deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesAsync(UUID projectId, String trainingKey, List<UUID> imageIds, Boolean allImages, Boolean allIterations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImagesValidateBeforeCall(projectId, trainingKey, imageIds, allImages, allIterations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesByIds
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds The list of image ids to retrieve. Limited to 256. (optional)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesByIdsCall(UUID projectId, String trainingKey, List<UUID> imageIds, UUID iterationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/id"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "imageIds", imageIds));
        }

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesByIdsValidateBeforeCall(UUID projectId, String trainingKey, List<UUID> imageIds, UUID iterationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImagesByIds(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getImagesByIds(Async)");
        }

        return getImagesByIdsCall(projectId, trainingKey, imageIds, iterationId, _callback);

    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds The list of image ids to retrieve. Limited to 256. (optional)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> getImagesByIds(UUID projectId, String trainingKey, List<UUID> imageIds, UUID iterationId) throws ApiException {
        ApiResponse<List<Image>> localVarResp = getImagesByIdsWithHttpInfo(projectId, trainingKey, imageIds, iterationId);
        return localVarResp.getData();
    }

    /**
     * Get images by id for a given project iteration.
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds The list of image ids to retrieve. Limited to 256. (optional)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> getImagesByIdsWithHttpInfo(UUID projectId, String trainingKey, List<UUID> imageIds, UUID iterationId) throws ApiException {
        okhttp3.Call localVarCall = getImagesByIdsValidateBeforeCall(projectId, trainingKey, imageIds, iterationId, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get images by id for a given project iteration. (asynchronously)
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param imageIds The list of image ids to retrieve. Limited to 256. (optional)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesByIdsAsync(UUID projectId, String trainingKey, List<UUID> imageIds, UUID iterationId, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesByIdsValidateBeforeCall(projectId, trainingKey, imageIds, iterationId, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaggedImageCount
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaggedImageCountCall(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/tagged/count"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaggedImageCountValidateBeforeCall(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTaggedImageCount(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getTaggedImageCount(Async)");
        }

        return getTaggedImageCountCall(projectId, trainingKey, iterationId, tagIds, _callback);

    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Integer getTaggedImageCount(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds) throws ApiException {
        ApiResponse<Integer> localVarResp = getTaggedImageCountWithHttpInfo(projectId, trainingKey, iterationId, tagIds);
        return localVarResp.getData();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getTaggedImageCountWithHttpInfo(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds) throws ApiException {
        okhttp3.Call localVarCall = getTaggedImageCountValidateBeforeCall(projectId, trainingKey, iterationId, tagIds, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}. (asynchronously)
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaggedImageCountAsync(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaggedImageCountValidateBeforeCall(projectId, trainingKey, iterationId, tagIds, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaggedImages
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaggedImagesCall(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/tagged"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaggedImagesValidateBeforeCall(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTaggedImages(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getTaggedImages(Async)");
        }

        return getTaggedImagesCall(projectId, trainingKey, iterationId, tagIds, orderBy, take, skip, _callback);

    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> getTaggedImages(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) throws ApiException {
        ApiResponse<List<Image>> localVarResp = getTaggedImagesWithHttpInfo(projectId, trainingKey, iterationId, tagIds, orderBy, take, skip);
        return localVarResp.getData();
    }

    /**
     * Get tagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> getTaggedImagesWithHttpInfo(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip) throws ApiException {
        okhttp3.Call localVarCall = getTaggedImagesValidateBeforeCall(projectId, trainingKey, iterationId, tagIds, orderBy, take, skip, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tagged images for a given project iteration. (asynchronously)
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaggedImagesAsync(UUID projectId, String trainingKey, UUID iterationId, List<UUID> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaggedImagesValidateBeforeCall(projectId, trainingKey, iterationId, tagIds, orderBy, take, skip, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUntaggedImageCount
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUntaggedImageCountCall(UUID projectId, String trainingKey, UUID iterationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/untagged/count"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUntaggedImageCountValidateBeforeCall(UUID projectId, String trainingKey, UUID iterationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getUntaggedImageCount(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getUntaggedImageCount(Async)");
        }

        return getUntaggedImageCountCall(projectId, trainingKey, iterationId, _callback);

    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Integer getUntaggedImageCount(UUID projectId, String trainingKey, UUID iterationId) throws ApiException {
        ApiResponse<Integer> localVarResp = getUntaggedImageCountWithHttpInfo(projectId, trainingKey, iterationId);
        return localVarResp.getData();
    }

    /**
     * Gets the number of untagged images.
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getUntaggedImageCountWithHttpInfo(UUID projectId, String trainingKey, UUID iterationId) throws ApiException {
        okhttp3.Call localVarCall = getUntaggedImageCountValidateBeforeCall(projectId, trainingKey, iterationId, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the number of untagged images. (asynchronously)
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the  current workspace is used.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUntaggedImageCountAsync(UUID projectId, String trainingKey, UUID iterationId, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUntaggedImageCountValidateBeforeCall(projectId, trainingKey, iterationId, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUntaggedImages
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUntaggedImagesCall(UUID projectId, String trainingKey, UUID iterationId, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/untagged"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUntaggedImagesValidateBeforeCall(UUID projectId, String trainingKey, UUID iterationId, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getUntaggedImages(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getUntaggedImages(Async)");
        }

        return getUntaggedImagesCall(projectId, trainingKey, iterationId, orderBy, take, skip, _callback);

    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> getUntaggedImages(UUID projectId, String trainingKey, UUID iterationId, String orderBy, Integer take, Integer skip) throws ApiException {
        ApiResponse<List<Image>> localVarResp = getUntaggedImagesWithHttpInfo(projectId, trainingKey, iterationId, orderBy, take, skip);
        return localVarResp.getData();
    }

    /**
     * Get untagged images for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> getUntaggedImagesWithHttpInfo(UUID projectId, String trainingKey, UUID iterationId, String orderBy, Integer take, Integer skip) throws ApiException {
        okhttp3.Call localVarCall = getUntaggedImagesValidateBeforeCall(projectId, trainingKey, iterationId, orderBy, take, skip, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get untagged images for a given project iteration. (asynchronously)
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * @param projectId The project id. (required)
     * @param trainingKey API key. (required)
     * @param iterationId The iteration id. Defaults to workspace. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUntaggedImagesAsync(UUID projectId, String trainingKey, UUID iterationId, String orderBy, Integer take, Integer skip, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUntaggedImagesValidateBeforeCall(projectId, trainingKey, iterationId, orderBy, take, skip, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for querySuggestedImageCount
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param tagFilter Model that contains tagIds, threshold and projectType to query by. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySuggestedImageCountCall(UUID projectId, UUID iterationId, String trainingKey, TagFilter tagFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagFilter;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/suggested/count"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySuggestedImageCountValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, TagFilter tagFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling querySuggestedImageCount(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling querySuggestedImageCount(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling querySuggestedImageCount(Async)");
        }

        // verify the required parameter 'tagFilter' is set
        if (tagFilter == null) {
            throw new ApiException("Missing the required parameter 'tagFilter' when calling querySuggestedImageCount(Async)");
        }

        return querySuggestedImageCountCall(projectId, iterationId, trainingKey, tagFilter, _callback);

    }

    /**
     * Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
     * This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param tagFilter Model that contains tagIds, threshold and projectType to query by. (required)
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Integer> querySuggestedImageCount(UUID projectId, UUID iterationId, String trainingKey, TagFilter tagFilter) throws ApiException {
        ApiResponse<Map<String, Integer>> localVarResp = querySuggestedImageCountWithHttpInfo(projectId, iterationId, trainingKey, tagFilter);
        return localVarResp.getData();
    }

    /**
     * Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
     * This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param tagFilter Model that contains tagIds, threshold and projectType to query by. (required)
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Integer>> querySuggestedImageCountWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, TagFilter tagFilter) throws ApiException {
        okhttp3.Call localVarCall = querySuggestedImageCountValidateBeforeCall(projectId, iterationId, trainingKey, tagFilter, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found. (asynchronously)
     * This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param tagFilter Model that contains tagIds, threshold and projectType to query by. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySuggestedImageCountAsync(UUID projectId, UUID iterationId, String trainingKey, TagFilter tagFilter, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = querySuggestedImageCountValidateBeforeCall(projectId, iterationId, trainingKey, tagFilter, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for querySuggestedImages
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param suggestedTagAndRegionQueryToken Contains properties we need to query suggested images. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySuggestedImagesCall(UUID projectId, UUID iterationId, String trainingKey, SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suggestedTagAndRegionQueryToken;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/images/suggested"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySuggestedImagesValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling querySuggestedImages(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling querySuggestedImages(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling querySuggestedImages(Async)");
        }

        // verify the required parameter 'suggestedTagAndRegionQueryToken' is set
        if (suggestedTagAndRegionQueryToken == null) {
            throw new ApiException("Missing the required parameter 'suggestedTagAndRegionQueryToken' when calling querySuggestedImages(Async)");
        }

        return querySuggestedImagesCall(projectId, iterationId, trainingKey, suggestedTagAndRegionQueryToken, _callback);

    }

    /**
     * Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
     * This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param suggestedTagAndRegionQueryToken Contains properties we need to query suggested images. (required)
     * @return SuggestedTagAndRegionQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public SuggestedTagAndRegionQuery querySuggestedImages(UUID projectId, UUID iterationId, String trainingKey, SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken) throws ApiException {
        ApiResponse<SuggestedTagAndRegionQuery> localVarResp = querySuggestedImagesWithHttpInfo(projectId, iterationId, trainingKey, suggestedTagAndRegionQueryToken);
        return localVarResp.getData();
    }

    /**
     * Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
     * This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param suggestedTagAndRegionQueryToken Contains properties we need to query suggested images. (required)
     * @return ApiResponse&lt;SuggestedTagAndRegionQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestedTagAndRegionQuery> querySuggestedImagesWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken) throws ApiException {
        okhttp3.Call localVarCall = querySuggestedImagesValidateBeforeCall(projectId, iterationId, trainingKey, suggestedTagAndRegionQueryToken, null);
        Type localVarReturnType = new TypeToken<SuggestedTagAndRegionQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get untagged images whose suggested tags match given tags. Returns empty array if no images are found. (asynchronously)
     * This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
     * @param projectId The project id. (required)
     * @param iterationId IterationId to use for the suggested tags and regions. (required)
     * @param trainingKey API key. (required)
     * @param suggestedTagAndRegionQueryToken Contains properties we need to query suggested images. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call querySuggestedImagesAsync(UUID projectId, UUID iterationId, String trainingKey, SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken, final ApiCallback<SuggestedTagAndRegionQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = querySuggestedImagesValidateBeforeCall(projectId, iterationId, trainingKey, suggestedTagAndRegionQueryToken, _callback);
        Type localVarReturnType = new TypeToken<SuggestedTagAndRegionQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
