/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Prediction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of a suggested tags and regions request of the untagged image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:13.015357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoredSuggestedTagAndRegion {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private UUID domain;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ITERATION = "iteration";
  @SerializedName(SERIALIZED_NAME_ITERATION)
  private UUID iteration;

  public static final String SERIALIZED_NAME_ORIGINAL_IMAGE_URI = "originalImageUri";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_IMAGE_URI)
  private String originalImageUri;

  public static final String SERIALIZED_NAME_PREDICTION_UNCERTAINTY = "predictionUncertainty";
  @SerializedName(SERIALIZED_NAME_PREDICTION_UNCERTAINTY)
  private Double predictionUncertainty;

  public static final String SERIALIZED_NAME_PREDICTIONS = "predictions";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS)
  private List<Prediction> predictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private UUID project;

  public static final String SERIALIZED_NAME_RESIZED_IMAGE_URI = "resizedImageUri";
  @SerializedName(SERIALIZED_NAME_RESIZED_IMAGE_URI)
  private String resizedImageUri;

  public static final String SERIALIZED_NAME_THUMBNAIL_URI = "thumbnailUri";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URI)
  private String thumbnailUri;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public StoredSuggestedTagAndRegion() {
  }

  public StoredSuggestedTagAndRegion(
     OffsetDateTime created, 
     UUID domain, 
     Integer height, 
     UUID id, 
     UUID iteration, 
     String originalImageUri, 
     Double predictionUncertainty, 
     List<Prediction> predictions, 
     UUID project, 
     String resizedImageUri, 
     String thumbnailUri, 
     Integer width
  ) {
    this();
    this.created = created;
    this.domain = domain;
    this.height = height;
    this.id = id;
    this.iteration = iteration;
    this.originalImageUri = originalImageUri;
    this.predictionUncertainty = predictionUncertainty;
    this.predictions = predictions;
    this.project = project;
    this.resizedImageUri = resizedImageUri;
    this.thumbnailUri = thumbnailUri;
    this.width = width;
  }

  /**
   * Date this prediction was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Domain used for the prediction.
   * @return domain
   */
  @javax.annotation.Nullable
  public UUID getDomain() {
    return domain;
  }



  /**
   * Height of the resized image.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }



  /**
   * Prediction Id.
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  /**
   * Iteration Id.
   * @return iteration
   */
  @javax.annotation.Nullable
  public UUID getIteration() {
    return iteration;
  }



  /**
   * The URI to the original prediction image.
   * @return originalImageUri
   */
  @javax.annotation.Nullable
  public String getOriginalImageUri() {
    return originalImageUri;
  }



  /**
   * Uncertainty (entropy) of suggested tags or regions per image.
   * @return predictionUncertainty
   */
  @javax.annotation.Nullable
  public Double getPredictionUncertainty() {
    return predictionUncertainty;
  }



  /**
   * List of predictions.
   * @return predictions
   */
  @javax.annotation.Nullable
  public List<Prediction> getPredictions() {
    return predictions;
  }



  /**
   * Project Id.
   * @return project
   */
  @javax.annotation.Nullable
  public UUID getProject() {
    return project;
  }



  /**
   * The URI to the (resized) prediction image.
   * @return resizedImageUri
   */
  @javax.annotation.Nullable
  public String getResizedImageUri() {
    return resizedImageUri;
  }



  /**
   * The URI to the thumbnail of the original prediction image.
   * @return thumbnailUri
   */
  @javax.annotation.Nullable
  public String getThumbnailUri() {
    return thumbnailUri;
  }



  /**
   * Width of the resized image.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredSuggestedTagAndRegion storedSuggestedTagAndRegion = (StoredSuggestedTagAndRegion) o;
    return Objects.equals(this.created, storedSuggestedTagAndRegion.created) &&
        Objects.equals(this.domain, storedSuggestedTagAndRegion.domain) &&
        Objects.equals(this.height, storedSuggestedTagAndRegion.height) &&
        Objects.equals(this.id, storedSuggestedTagAndRegion.id) &&
        Objects.equals(this.iteration, storedSuggestedTagAndRegion.iteration) &&
        Objects.equals(this.originalImageUri, storedSuggestedTagAndRegion.originalImageUri) &&
        Objects.equals(this.predictionUncertainty, storedSuggestedTagAndRegion.predictionUncertainty) &&
        Objects.equals(this.predictions, storedSuggestedTagAndRegion.predictions) &&
        Objects.equals(this.project, storedSuggestedTagAndRegion.project) &&
        Objects.equals(this.resizedImageUri, storedSuggestedTagAndRegion.resizedImageUri) &&
        Objects.equals(this.thumbnailUri, storedSuggestedTagAndRegion.thumbnailUri) &&
        Objects.equals(this.width, storedSuggestedTagAndRegion.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, domain, height, id, iteration, originalImageUri, predictionUncertainty, predictions, project, resizedImageUri, thumbnailUri, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredSuggestedTagAndRegion {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iteration: ").append(toIndentedString(iteration)).append("\n");
    sb.append("    originalImageUri: ").append(toIndentedString(originalImageUri)).append("\n");
    sb.append("    predictionUncertainty: ").append(toIndentedString(predictionUncertainty)).append("\n");
    sb.append("    predictions: ").append(toIndentedString(predictions)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    resizedImageUri: ").append(toIndentedString(resizedImageUri)).append("\n");
    sb.append("    thumbnailUri: ").append(toIndentedString(thumbnailUri)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("domain");
    openapiFields.add("height");
    openapiFields.add("id");
    openapiFields.add("iteration");
    openapiFields.add("originalImageUri");
    openapiFields.add("predictionUncertainty");
    openapiFields.add("predictions");
    openapiFields.add("project");
    openapiFields.add("resizedImageUri");
    openapiFields.add("thumbnailUri");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoredSuggestedTagAndRegion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoredSuggestedTagAndRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoredSuggestedTagAndRegion is not found in the empty JSON string", StoredSuggestedTagAndRegion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoredSuggestedTagAndRegion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoredSuggestedTagAndRegion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("iteration") != null && !jsonObj.get("iteration").isJsonNull()) && !jsonObj.get("iteration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iteration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iteration").toString()));
      }
      if ((jsonObj.get("originalImageUri") != null && !jsonObj.get("originalImageUri").isJsonNull()) && !jsonObj.get("originalImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalImageUri").toString()));
      }
      if (jsonObj.get("predictions") != null && !jsonObj.get("predictions").isJsonNull()) {
        JsonArray jsonArraypredictions = jsonObj.getAsJsonArray("predictions");
        if (jsonArraypredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("predictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `predictions` to be an array in the JSON string but got `%s`", jsonObj.get("predictions").toString()));
          }

          // validate the optional field `predictions` (array)
          for (int i = 0; i < jsonArraypredictions.size(); i++) {
            Prediction.validateJsonElement(jsonArraypredictions.get(i));
          };
        }
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
      if ((jsonObj.get("resizedImageUri") != null && !jsonObj.get("resizedImageUri").isJsonNull()) && !jsonObj.get("resizedImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizedImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizedImageUri").toString()));
      }
      if ((jsonObj.get("thumbnailUri") != null && !jsonObj.get("thumbnailUri").isJsonNull()) && !jsonObj.get("thumbnailUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoredSuggestedTagAndRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoredSuggestedTagAndRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoredSuggestedTagAndRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoredSuggestedTagAndRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<StoredSuggestedTagAndRegion>() {
           @Override
           public void write(JsonWriter out, StoredSuggestedTagAndRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoredSuggestedTagAndRegion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoredSuggestedTagAndRegion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoredSuggestedTagAndRegion
   * @throws IOException if the JSON string is invalid with respect to StoredSuggestedTagAndRegion
   */
  public static StoredSuggestedTagAndRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoredSuggestedTagAndRegion.class);
  }

  /**
   * Convert an instance of StoredSuggestedTagAndRegion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

