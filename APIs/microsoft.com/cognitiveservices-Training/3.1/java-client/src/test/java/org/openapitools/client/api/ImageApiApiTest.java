/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomVisionError;
import java.io.File;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageCreateSummary;
import org.openapitools.client.model.ImageFileCreateBatch;
import org.openapitools.client.model.ImageIdCreateBatch;
import org.openapitools.client.model.ImageRegionCreateBatch;
import org.openapitools.client.model.ImageRegionCreateSummary;
import org.openapitools.client.model.ImageTagCreateBatch;
import org.openapitools.client.model.ImageTagCreateSummary;
import org.openapitools.client.model.ImageUrlCreateBatch;
import org.openapitools.client.model.SuggestedTagAndRegionQuery;
import org.openapitools.client.model.SuggestedTagAndRegionQueryToken;
import org.openapitools.client.model.TagFilter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImageApiApi
 */
@Disabled
public class ImageApiApiTest {

    private final ImageApiApi api = new ImageApiApi();

    /**
     * Create a set of image regions.
     *
     * This API accepts a batch of image regions, and optionally tags, to update existing images with region information.  There is a limit of 64 entries in the batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageRegionsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        ImageRegionCreateBatch imageRegionCreateBatch = null;
        ImageRegionCreateSummary response = api.createImageRegions(projectId, trainingKey, imageRegionCreateBatch);
        // TODO: test validations
    }

    /**
     * Associate a set of images with a set of tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageTagsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        ImageTagCreateBatch imageTagCreateBatch = null;
        ImageTagCreateSummary response = api.createImageTags(projectId, trainingKey, imageTagCreateBatch);
        // TODO: test validations
    }

    /**
     * Add the provided images to the set of training images.
     *
     * This API accepts body content as multipart/form-data and application/octet-stream. When using multipart  multiple image files can be sent at once, with a maximum of 64 files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImagesFromDataTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        File imageData = null;
        List<UUID> tagIds = null;
        ImageCreateSummary response = api.createImagesFromData(projectId, trainingKey, imageData, tagIds);
        // TODO: test validations
    }

    /**
     * Add the provided batch of images to the set of training images.
     *
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImagesFromFilesTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        ImageFileCreateBatch imageFileCreateBatch = null;
        ImageCreateSummary response = api.createImagesFromFiles(projectId, trainingKey, imageFileCreateBatch);
        // TODO: test validations
    }

    /**
     * Add the specified predicted images to the set of training images.
     *
     * This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImagesFromPredictionsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        ImageIdCreateBatch imageIdCreateBatch = null;
        ImageCreateSummary response = api.createImagesFromPredictions(projectId, trainingKey, imageIdCreateBatch);
        // TODO: test validations
    }

    /**
     * Add the provided images urls to the set of training images.
     *
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImagesFromUrlsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        ImageUrlCreateBatch imageUrlCreateBatch = null;
        ImageCreateSummary response = api.createImagesFromUrls(projectId, trainingKey, imageUrlCreateBatch);
        // TODO: test validations
    }

    /**
     * Delete a set of image regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageRegionsTest() throws ApiException {
        UUID projectId = null;
        List<UUID> regionIds = null;
        String trainingKey = null;
        api.deleteImageRegions(projectId, regionIds, trainingKey);
        // TODO: test validations
    }

    /**
     * Remove a set of tags from a set of images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageTagsTest() throws ApiException {
        UUID projectId = null;
        List<UUID> imageIds = null;
        List<UUID> tagIds = null;
        String trainingKey = null;
        api.deleteImageTags(projectId, imageIds, tagIds, trainingKey);
        // TODO: test validations
    }

    /**
     * Delete images from the set of training images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImagesTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        List<UUID> imageIds = null;
        Boolean allImages = null;
        Boolean allIterations = null;
        api.deleteImages(projectId, trainingKey, imageIds, allImages, allIterations);
        // TODO: test validations
    }

    /**
     * Get images by id for a given project iteration.
     *
     * This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the  current workspace is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImagesByIdsTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        List<UUID> imageIds = null;
        UUID iterationId = null;
        List<Image> response = api.getImagesByIds(projectId, trainingKey, imageIds, iterationId);
        // TODO: test validations
    }

    /**
     * Gets the number of images tagged with the provided {tagIds}.
     *
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaggedImageCountTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        UUID iterationId = null;
        List<UUID> tagIds = null;
        Integer response = api.getTaggedImageCount(projectId, trainingKey, iterationId, tagIds);
        // TODO: test validations
    }

    /**
     * Get tagged images for a given project iteration.
     *
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaggedImagesTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        UUID iterationId = null;
        List<UUID> tagIds = null;
        String orderBy = null;
        Integer take = null;
        Integer skip = null;
        List<Image> response = api.getTaggedImages(projectId, trainingKey, iterationId, tagIds, orderBy, take, skip);
        // TODO: test validations
    }

    /**
     * Gets the number of untagged images.
     *
     * This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the  current workspace is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUntaggedImageCountTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        UUID iterationId = null;
        Integer response = api.getUntaggedImageCount(projectId, trainingKey, iterationId);
        // TODO: test validations
    }

    /**
     * Get untagged images for a given project iteration.
     *
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUntaggedImagesTest() throws ApiException {
        UUID projectId = null;
        String trainingKey = null;
        UUID iterationId = null;
        String orderBy = null;
        Integer take = null;
        Integer skip = null;
        List<Image> response = api.getUntaggedImages(projectId, trainingKey, iterationId, orderBy, take, skip);
        // TODO: test validations
    }

    /**
     * Get count of images whose suggested tags match given tags and their probabilities are greater than or equal to the given threshold. Returns count as 0 if none found.
     *
     * This API takes in tagIds to get count of untagged images per suggested tags for a given threshold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySuggestedImageCountTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        TagFilter tagFilter = null;
        Map<String, Integer> response = api.querySuggestedImageCount(projectId, iterationId, trainingKey, tagFilter);
        // TODO: test validations
    }

    /**
     * Get untagged images whose suggested tags match given tags. Returns empty array if no images are found.
     *
     * This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if no images are found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySuggestedImagesTest() throws ApiException {
        UUID projectId = null;
        UUID iterationId = null;
        String trainingKey = null;
        SuggestedTagAndRegionQueryToken suggestedTagAndRegionQueryToken = null;
        SuggestedTagAndRegionQuery response = api.querySuggestedImages(projectId, iterationId, trainingKey, suggestedTagAndRegionQueryToken);
        // TODO: test validations
    }

}
