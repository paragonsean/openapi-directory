# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_settings import ProjectSettings
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, dr_mode_enabled: bool=None, id: str=None, last_modified: datetime=None, name: str=None, settings: ProjectSettings=None, thumbnail_uri: str=None):
        """Project - a model defined in OpenAPI

        :param created: The created of this Project.
        :param description: The description of this Project.
        :param dr_mode_enabled: The dr_mode_enabled of this Project.
        :param id: The id of this Project.
        :param last_modified: The last_modified of this Project.
        :param name: The name of this Project.
        :param settings: The settings of this Project.
        :param thumbnail_uri: The thumbnail_uri of this Project.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'dr_mode_enabled': bool,
            'id': str,
            'last_modified': datetime,
            'name': str,
            'settings': ProjectSettings,
            'thumbnail_uri': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'dr_mode_enabled': 'drModeEnabled',
            'id': 'id',
            'last_modified': 'lastModified',
            'name': 'name',
            'settings': 'settings',
            'thumbnail_uri': 'thumbnailUri'
        }

        self._created = created
        self._description = description
        self._dr_mode_enabled = dr_mode_enabled
        self._id = id
        self._last_modified = last_modified
        self._name = name
        self._settings = settings
        self._thumbnail_uri = thumbnail_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Project.

        Gets the date this project was created.

        :return: The created of this Project.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.

        Gets the date this project was created.

        :param created: The created of this Project.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Project.

        Gets or sets the description of the project.

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        Gets or sets the description of the project.

        :param description: The description of this Project.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def dr_mode_enabled(self):
        """Gets the dr_mode_enabled of this Project.

        Gets if the Disaster Recovery (DR) mode is on, indicating the project is temporarily read-only.

        :return: The dr_mode_enabled of this Project.
        :rtype: bool
        """
        return self._dr_mode_enabled

    @dr_mode_enabled.setter
    def dr_mode_enabled(self, dr_mode_enabled):
        """Sets the dr_mode_enabled of this Project.

        Gets if the Disaster Recovery (DR) mode is on, indicating the project is temporarily read-only.

        :param dr_mode_enabled: The dr_mode_enabled of this Project.
        :type dr_mode_enabled: bool
        """

        self._dr_mode_enabled = dr_mode_enabled

    @property
    def id(self):
        """Gets the id of this Project.

        Gets the project id.

        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Gets the project id.

        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this Project.

        Gets the date this project was last modified.

        :return: The last_modified of this Project.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Project.

        Gets the date this project was last modified.

        :param last_modified: The last_modified of this Project.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this Project.

        Gets or sets the name of the project.

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        Gets or sets the name of the project.

        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this Project.


        :return: The settings of this Project.
        :rtype: ProjectSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Project.


        :param settings: The settings of this Project.
        :type settings: ProjectSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def thumbnail_uri(self):
        """Gets the thumbnail_uri of this Project.

        Gets the thumbnail url representing the image.

        :return: The thumbnail_uri of this Project.
        :rtype: str
        """
        return self._thumbnail_uri

    @thumbnail_uri.setter
    def thumbnail_uri(self, thumbnail_uri):
        """Sets the thumbnail_uri of this Project.

        Gets the thumbnail url representing the image.

        :param thumbnail_uri: The thumbnail_uri of this Project.
        :type thumbnail_uri: str
        """

        self._thumbnail_uri = thumbnail_uri
