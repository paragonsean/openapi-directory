# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region import Region
from openapi_server import util


class ImageUrlCreateEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regions: List[Region]=None, tag_ids: List[str]=None, url: str=None):
        """ImageUrlCreateEntry - a model defined in OpenAPI

        :param regions: The regions of this ImageUrlCreateEntry.
        :param tag_ids: The tag_ids of this ImageUrlCreateEntry.
        :param url: The url of this ImageUrlCreateEntry.
        """
        self.openapi_types = {
            'regions': List[Region],
            'tag_ids': List[str],
            'url': str
        }

        self.attribute_map = {
            'regions': 'regions',
            'tag_ids': 'tagIds',
            'url': 'url'
        }

        self._regions = regions
        self._tag_ids = tag_ids
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageUrlCreateEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageUrlCreateEntry of this ImageUrlCreateEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regions(self):
        """Gets the regions of this ImageUrlCreateEntry.


        :return: The regions of this ImageUrlCreateEntry.
        :rtype: List[Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ImageUrlCreateEntry.


        :param regions: The regions of this ImageUrlCreateEntry.
        :type regions: List[Region]
        """

        self._regions = regions

    @property
    def tag_ids(self):
        """Gets the tag_ids of this ImageUrlCreateEntry.


        :return: The tag_ids of this ImageUrlCreateEntry.
        :rtype: List[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this ImageUrlCreateEntry.


        :param tag_ids: The tag_ids of this ImageUrlCreateEntry.
        :type tag_ids: List[str]
        """

        self._tag_ids = tag_ids

    @property
    def url(self):
        """Gets the url of this ImageUrlCreateEntry.

        Url of the image.

        :return: The url of this ImageUrlCreateEntry.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageUrlCreateEntry.

        Url of the image.

        :param url: The url of this ImageUrlCreateEntry.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
