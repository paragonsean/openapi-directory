/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageProcessingSettings model module.
 * @module model/ImageProcessingSettings
 * @version 3.1
 */
class ImageProcessingSettings {
    /**
     * Constructs a new <code>ImageProcessingSettings</code>.
     * Represents image preprocessing settings used by image augmentation.
     * @alias module:model/ImageProcessingSettings
     */
    constructor() { 
        
        ImageProcessingSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageProcessingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageProcessingSettings} obj Optional instance to populate.
     * @return {module:model/ImageProcessingSettings} The populated <code>ImageProcessingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageProcessingSettings();

            if (data.hasOwnProperty('augmentationMethods')) {
                obj['augmentationMethods'] = ApiClient.convertToType(data['augmentationMethods'], {'String': 'Boolean'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageProcessingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageProcessingSettings</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Gets or sets enabled image transforms. The key corresponds to the transform name. If value is set to true, then correspondent transform is enabled. Otherwise this transform will not be used.  Augmentation will be uniformly distributed among enabled transforms.
 * @member {Object.<String, Boolean>} augmentationMethods
 */
ImageProcessingSettings.prototype['augmentationMethods'] = undefined;






export default ImageProcessingSettings;

