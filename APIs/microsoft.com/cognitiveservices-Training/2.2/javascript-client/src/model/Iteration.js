/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Iteration model module.
 * @module model/Iteration
 * @version 2.2
 */
class Iteration {
    /**
     * Constructs a new <code>Iteration</code>.
     * Iteration model to be sent over JSON.
     * @alias module:model/Iteration
     */
    constructor() { 
        
        Iteration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Iteration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Iteration} obj Optional instance to populate.
     * @return {module:model/Iteration} The populated <code>Iteration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Iteration();

            if (data.hasOwnProperty('classificationType')) {
                obj['classificationType'] = ApiClient.convertToType(data['classificationType'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('domainId')) {
                obj['domainId'] = ApiClient.convertToType(data['domainId'], 'String');
            }
            if (data.hasOwnProperty('exportable')) {
                obj['exportable'] = ApiClient.convertToType(data['exportable'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trainedAt')) {
                obj['trainedAt'] = ApiClient.convertToType(data['trainedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Iteration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Iteration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['classificationType'] && !(typeof data['classificationType'] === 'string' || data['classificationType'] instanceof String)) {
            throw new Error("Expected the field `classificationType` to be a primitive type in the JSON string but got " + data['classificationType']);
        }
        // ensure the json data is a string
        if (data['domainId'] && !(typeof data['domainId'] === 'string' || data['domainId'] instanceof String)) {
            throw new Error("Expected the field `domainId` to be a primitive type in the JSON string but got " + data['domainId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Gets the classification type of the project.
 * @member {module:model/Iteration.ClassificationTypeEnum} classificationType
 */
Iteration.prototype['classificationType'] = undefined;

/**
 * Gets the time this iteration was completed.
 * @member {Date} created
 */
Iteration.prototype['created'] = undefined;

/**
 * Get or sets a guid of the domain the iteration has been trained on.
 * @member {String} domainId
 */
Iteration.prototype['domainId'] = undefined;

/**
 * Whether the iteration can be exported to another format for download.
 * @member {Boolean} exportable
 */
Iteration.prototype['exportable'] = undefined;

/**
 * Gets the id of the iteration.
 * @member {String} id
 */
Iteration.prototype['id'] = undefined;

/**
 * Gets or sets a value indicating whether the iteration is the default iteration for the project.
 * @member {Boolean} isDefault
 */
Iteration.prototype['isDefault'] = undefined;

/**
 * Gets the time this iteration was last modified.
 * @member {Date} lastModified
 */
Iteration.prototype['lastModified'] = undefined;

/**
 * Gets or sets the name of the iteration.
 * @member {String} name
 */
Iteration.prototype['name'] = undefined;

/**
 * Gets The project id. of the iteration.
 * @member {String} projectId
 */
Iteration.prototype['projectId'] = undefined;

/**
 * Gets the current iteration status.
 * @member {String} status
 */
Iteration.prototype['status'] = undefined;

/**
 * Gets the time this iteration was last modified.
 * @member {Date} trainedAt
 */
Iteration.prototype['trainedAt'] = undefined;





/**
 * Allowed values for the <code>classificationType</code> property.
 * @enum {String}
 * @readonly
 */
Iteration['ClassificationTypeEnum'] = {

    /**
     * value: "Multiclass"
     * @const
     */
    "Multiclass": "Multiclass",

    /**
     * value: "Multilabel"
     * @const
     */
    "Multilabel": "Multilabel"
};



export default Iteration;

