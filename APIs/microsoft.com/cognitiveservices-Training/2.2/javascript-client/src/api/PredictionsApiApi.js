/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImagePrediction from '../model/ImagePrediction';
import ImageUrl from '../model/ImageUrl';
import PredictionQueryResult from '../model/PredictionQueryResult';
import PredictionQueryToken from '../model/PredictionQueryToken';

/**
* PredictionsApi service.
* @module api/PredictionsApiApi
* @version 2.2
*/
export default class PredictionsApiApi {

    /**
    * Constructs a new PredictionsApiApi. 
    * @alias module:api/PredictionsApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePrediction operation.
     * @callback module:api/PredictionsApiApi~deletePredictionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a set of predicted images and their associated prediction results.
     * @param {String} projectId The project id.
     * @param {Array.<String>} ids The prediction ids. Limited to 64.
     * @param {String} trainingKey 
     * @param {module:api/PredictionsApiApi~deletePredictionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePrediction(projectId, ids, trainingKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deletePrediction");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deletePrediction");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling deletePrediction");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv')
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/predictions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPredictions operation.
     * @callback module:api/PredictionsApiApi~queryPredictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get images that were sent to your prediction endpoint.
     * @param {String} projectId The project id.
     * @param {String} trainingKey 
     * @param {module:model/PredictionQueryToken} predictionQueryToken Parameters used to query the predictions. Limited to combining 2 tags.
     * @param {module:api/PredictionsApiApi~queryPredictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionQueryResult}
     */
    queryPredictions(projectId, trainingKey, predictionQueryToken, callback) {
      let postBody = predictionQueryToken;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling queryPredictions");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling queryPredictions");
      }
      // verify the required parameter 'predictionQueryToken' is set
      if (predictionQueryToken === undefined || predictionQueryToken === null) {
        throw new Error("Missing the required parameter 'predictionQueryToken' when calling queryPredictions");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = PredictionQueryResult;
      return this.apiClient.callApi(
        '/projects/{projectId}/predictions/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickTestImage operation.
     * @callback module:api/PredictionsApiApi~quickTestImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick test an image.
     * @param {String} projectId The project id.
     * @param {String} trainingKey 
     * @param {File} imageData Binary image data.
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified.
     * @param {module:api/PredictionsApiApi~quickTestImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    quickTestImage(projectId, trainingKey, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling quickTestImage");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling quickTestImage");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling quickTestImage");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId']
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/projects/{projectId}/quicktest/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quickTestImageUrl operation.
     * @callback module:api/PredictionsApiApi~quickTestImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick test an image url.
     * @param {String} projectId The project to evaluate against.
     * @param {String} trainingKey 
     * @param {module:model/ImageUrl} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified.
     * @param {module:api/PredictionsApiApi~quickTestImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    quickTestImageUrl(projectId, trainingKey, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling quickTestImageUrl");
      }
      // verify the required parameter 'trainingKey' is set
      if (trainingKey === undefined || trainingKey === null) {
        throw new Error("Missing the required parameter 'trainingKey' when calling quickTestImageUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling quickTestImageUrl");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId']
      };
      let headerParams = {
        'Training-Key': trainingKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/projects/{projectId}/quicktest/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
