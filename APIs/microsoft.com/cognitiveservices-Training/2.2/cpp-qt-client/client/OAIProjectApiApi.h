/**
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApiApi_H
#define OAI_OAIProjectApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExport.h"
#include "OAIImagePerformance.h"
#include "OAIIteration.h"
#include "OAIIterationPerformance.h"
#include "OAIProject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApiApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApiApi(const int timeOut = 0);
    ~OAIProjectApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  domain_id QString [optional]
    * @param[in]  classification_type QString [optional]
    */
    virtual void createProject(const QString &name, const QString &training_key, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &classification_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void deleteIteration(const QString &project_id, const QString &iteration_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void deleteProject(const QString &project_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  platform QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  flavor QString [optional]
    */
    virtual void exportIteration(const QString &project_id, const QString &iteration_id, const QString &platform, const QString &training_key, const ::OpenAPI::OptionalParam<QString> &flavor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void getExports(const QString &project_id, const QString &iteration_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  tag_ids QList<QString> [optional]
    */
    virtual void getImagePerformanceCount(const QString &project_id, const QString &iteration_id, const QString &training_key, const ::OpenAPI::OptionalParam<QList<QString>> &tag_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  tag_ids QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  take qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void getImagePerformances(const QString &project_id, const QString &iteration_id, const QString &training_key, const ::OpenAPI::OptionalParam<QList<QString>> &tag_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &take = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void getIteration(const QString &project_id, const QString &iteration_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  threshold float [optional]
    * @param[in]  overlap_threshold float [optional]
    */
    virtual void getIterationPerformance(const QString &project_id, const QString &iteration_id, const QString &training_key, const ::OpenAPI::OptionalParam<float> &threshold = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &overlap_threshold = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void getIterations(const QString &project_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void getProject(const QString &project_id, const QString &training_key);

    /**
    * @param[in]  training_key QString [required]
    */
    virtual void getProjects(const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    */
    virtual void trainProject(const QString &project_id, const QString &training_key);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  iteration_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_iteration OAIIteration [required]
    */
    virtual void updateIteration(const QString &project_id, const QString &iteration_id, const QString &training_key, const OAIIteration &oai_iteration);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  training_key QString [required]
    * @param[in]  oai_project OAIProject [required]
    */
    virtual void updateProject(const QString &project_id, const QString &training_key, const OAIProject &oai_project);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectCallback(OAIHttpRequestWorker *worker);
    void deleteIterationCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void exportIterationCallback(OAIHttpRequestWorker *worker);
    void getExportsCallback(OAIHttpRequestWorker *worker);
    void getImagePerformanceCountCallback(OAIHttpRequestWorker *worker);
    void getImagePerformancesCallback(OAIHttpRequestWorker *worker);
    void getIterationCallback(OAIHttpRequestWorker *worker);
    void getIterationPerformanceCallback(OAIHttpRequestWorker *worker);
    void getIterationsCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void trainProjectCallback(OAIHttpRequestWorker *worker);
    void updateIterationCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectSignal(OAIProject summary);
    void deleteIterationSignal();
    void deleteProjectSignal();
    void exportIterationSignal(OAIExport summary);
    void getExportsSignal(QList<OAIExport> summary);
    void getImagePerformanceCountSignal(qint32 summary);
    void getImagePerformancesSignal(QList<OAIImagePerformance> summary);
    void getIterationSignal(OAIIteration summary);
    void getIterationPerformanceSignal(OAIIterationPerformance summary);
    void getIterationsSignal(QList<OAIIteration> summary);
    void getProjectSignal(OAIProject summary);
    void getProjectsSignal(QList<OAIProject> summary);
    void trainProjectSignal(OAIIteration summary);
    void updateIterationSignal(OAIIteration summary);
    void updateProjectSignal(OAIProject summary);


    void createProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void deleteIterationSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void exportIterationSignalFull(OAIHttpRequestWorker *worker, OAIExport summary);
    void getExportsSignalFull(OAIHttpRequestWorker *worker, QList<OAIExport> summary);
    void getImagePerformanceCountSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void getImagePerformancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIImagePerformance> summary);
    void getIterationSignalFull(OAIHttpRequestWorker *worker, OAIIteration summary);
    void getIterationPerformanceSignalFull(OAIHttpRequestWorker *worker, OAIIterationPerformance summary);
    void getIterationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIteration> summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void trainProjectSignalFull(OAIHttpRequestWorker *worker, OAIIteration summary);
    void updateIterationSignalFull(OAIHttpRequestWorker *worker, OAIIteration summary);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIterationSignalError() instead")
    void deleteIterationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIterationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportIterationSignalError() instead")
    void exportIterationSignalE(OAIExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportIterationSignalError(OAIExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportsSignalError() instead")
    void getExportsSignalE(QList<OAIExport> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportsSignalError(QList<OAIExport> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePerformanceCountSignalError() instead")
    void getImagePerformanceCountSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePerformanceCountSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePerformancesSignalError() instead")
    void getImagePerformancesSignalE(QList<OAIImagePerformance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePerformancesSignalError(QList<OAIImagePerformance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationSignalError() instead")
    void getIterationSignalE(OAIIteration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationSignalError(OAIIteration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationPerformanceSignalError() instead")
    void getIterationPerformanceSignalE(OAIIterationPerformance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationPerformanceSignalError(OAIIterationPerformance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationsSignalError() instead")
    void getIterationsSignalE(QList<OAIIteration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationsSignalError(QList<OAIIteration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainProjectSignalError() instead")
    void trainProjectSignalE(OAIIteration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trainProjectSignalError(OAIIteration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIterationSignalError() instead")
    void updateIterationSignalE(OAIIteration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIterationSignalError(OAIIteration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIterationSignalErrorFull() instead")
    void deleteIterationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIterationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportIterationSignalErrorFull() instead")
    void exportIterationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportIterationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportsSignalErrorFull() instead")
    void getExportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePerformanceCountSignalErrorFull() instead")
    void getImagePerformanceCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePerformanceCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePerformancesSignalErrorFull() instead")
    void getImagePerformancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePerformancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationSignalErrorFull() instead")
    void getIterationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationPerformanceSignalErrorFull() instead")
    void getIterationPerformanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationPerformanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIterationsSignalErrorFull() instead")
    void getIterationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIterationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trainProjectSignalErrorFull() instead")
    void trainProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trainProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIterationSignalErrorFull() instead")
    void updateIterationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIterationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
