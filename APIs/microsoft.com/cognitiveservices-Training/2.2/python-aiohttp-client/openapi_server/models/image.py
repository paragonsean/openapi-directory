# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_region import ImageRegion
from openapi_server.models.image_tag import ImageTag
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, height: int=None, id: str=None, original_image_uri: str=None, regions: List[ImageRegion]=None, resized_image_uri: str=None, tags: List[ImageTag]=None, thumbnail_uri: str=None, width: int=None):
        """Image - a model defined in OpenAPI

        :param created: The created of this Image.
        :param height: The height of this Image.
        :param id: The id of this Image.
        :param original_image_uri: The original_image_uri of this Image.
        :param regions: The regions of this Image.
        :param resized_image_uri: The resized_image_uri of this Image.
        :param tags: The tags of this Image.
        :param thumbnail_uri: The thumbnail_uri of this Image.
        :param width: The width of this Image.
        """
        self.openapi_types = {
            'created': datetime,
            'height': int,
            'id': str,
            'original_image_uri': str,
            'regions': List[ImageRegion],
            'resized_image_uri': str,
            'tags': List[ImageTag],
            'thumbnail_uri': str,
            'width': int
        }

        self.attribute_map = {
            'created': 'created',
            'height': 'height',
            'id': 'id',
            'original_image_uri': 'originalImageUri',
            'regions': 'regions',
            'resized_image_uri': 'resizedImageUri',
            'tags': 'tags',
            'thumbnail_uri': 'thumbnailUri',
            'width': 'width'
        }

        self._created = created
        self._height = height
        self._id = id
        self._original_image_uri = original_image_uri
        self._regions = regions
        self._resized_image_uri = resized_image_uri
        self._tags = tags
        self._thumbnail_uri = thumbnail_uri
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Image.

        Date the image was created.

        :return: The created of this Image.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Image.

        Date the image was created.

        :param created: The created of this Image.
        :type created: datetime
        """

        self._created = created

    @property
    def height(self):
        """Gets the height of this Image.

        Height of the image.

        :return: The height of this Image.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Image.

        Height of the image.

        :param height: The height of this Image.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Image.

        Id of the image.

        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.

        Id of the image.

        :param id: The id of this Image.
        :type id: str
        """

        self._id = id

    @property
    def original_image_uri(self):
        """Gets the original_image_uri of this Image.

        The URI to the original uploaded image.

        :return: The original_image_uri of this Image.
        :rtype: str
        """
        return self._original_image_uri

    @original_image_uri.setter
    def original_image_uri(self, original_image_uri):
        """Sets the original_image_uri of this Image.

        The URI to the original uploaded image.

        :param original_image_uri: The original_image_uri of this Image.
        :type original_image_uri: str
        """

        self._original_image_uri = original_image_uri

    @property
    def regions(self):
        """Gets the regions of this Image.

        Regions associated with this image.

        :return: The regions of this Image.
        :rtype: List[ImageRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Image.

        Regions associated with this image.

        :param regions: The regions of this Image.
        :type regions: List[ImageRegion]
        """

        self._regions = regions

    @property
    def resized_image_uri(self):
        """Gets the resized_image_uri of this Image.

        The URI to the (resized) image used for training.

        :return: The resized_image_uri of this Image.
        :rtype: str
        """
        return self._resized_image_uri

    @resized_image_uri.setter
    def resized_image_uri(self, resized_image_uri):
        """Sets the resized_image_uri of this Image.

        The URI to the (resized) image used for training.

        :param resized_image_uri: The resized_image_uri of this Image.
        :type resized_image_uri: str
        """

        self._resized_image_uri = resized_image_uri

    @property
    def tags(self):
        """Gets the tags of this Image.

        Tags associated with this image.

        :return: The tags of this Image.
        :rtype: List[ImageTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Image.

        Tags associated with this image.

        :param tags: The tags of this Image.
        :type tags: List[ImageTag]
        """

        self._tags = tags

    @property
    def thumbnail_uri(self):
        """Gets the thumbnail_uri of this Image.

        The URI to the thumbnail of the original image.

        :return: The thumbnail_uri of this Image.
        :rtype: str
        """
        return self._thumbnail_uri

    @thumbnail_uri.setter
    def thumbnail_uri(self, thumbnail_uri):
        """Sets the thumbnail_uri of this Image.

        The URI to the thumbnail of the original image.

        :param thumbnail_uri: The thumbnail_uri of this Image.
        :type thumbnail_uri: str
        """

        self._thumbnail_uri = thumbnail_uri

    @property
    def width(self):
        """Gets the width of this Image.

        Width of the image.

        :return: The width of this Image.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Image.

        Width of the image.

        :param width: The width of this Image.
        :type width: int
        """

        self._width = width
