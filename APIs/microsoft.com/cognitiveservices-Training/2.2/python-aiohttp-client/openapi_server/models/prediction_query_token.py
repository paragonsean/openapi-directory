# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction_query_tag import PredictionQueryTag
from openapi_server import util


class PredictionQueryToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, continuation: str=None, end_time: datetime=None, iteration_id: str=None, max_count: int=None, order_by: str=None, session: str=None, start_time: datetime=None, tags: List[PredictionQueryTag]=None):
        """PredictionQueryToken - a model defined in OpenAPI

        :param application: The application of this PredictionQueryToken.
        :param continuation: The continuation of this PredictionQueryToken.
        :param end_time: The end_time of this PredictionQueryToken.
        :param iteration_id: The iteration_id of this PredictionQueryToken.
        :param max_count: The max_count of this PredictionQueryToken.
        :param order_by: The order_by of this PredictionQueryToken.
        :param session: The session of this PredictionQueryToken.
        :param start_time: The start_time of this PredictionQueryToken.
        :param tags: The tags of this PredictionQueryToken.
        """
        self.openapi_types = {
            'application': str,
            'continuation': str,
            'end_time': datetime,
            'iteration_id': str,
            'max_count': int,
            'order_by': str,
            'session': str,
            'start_time': datetime,
            'tags': List[PredictionQueryTag]
        }

        self.attribute_map = {
            'application': 'application',
            'continuation': 'continuation',
            'end_time': 'endTime',
            'iteration_id': 'iterationId',
            'max_count': 'maxCount',
            'order_by': 'orderBy',
            'session': 'session',
            'start_time': 'startTime',
            'tags': 'tags'
        }

        self._application = application
        self._continuation = continuation
        self._end_time = end_time
        self._iteration_id = iteration_id
        self._max_count = max_count
        self._order_by = order_by
        self._session = session
        self._start_time = start_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionQueryToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictionQueryToken of this PredictionQueryToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this PredictionQueryToken.


        :return: The application of this PredictionQueryToken.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this PredictionQueryToken.


        :param application: The application of this PredictionQueryToken.
        :type application: str
        """

        self._application = application

    @property
    def continuation(self):
        """Gets the continuation of this PredictionQueryToken.


        :return: The continuation of this PredictionQueryToken.
        :rtype: str
        """
        return self._continuation

    @continuation.setter
    def continuation(self, continuation):
        """Sets the continuation of this PredictionQueryToken.


        :param continuation: The continuation of this PredictionQueryToken.
        :type continuation: str
        """

        self._continuation = continuation

    @property
    def end_time(self):
        """Gets the end_time of this PredictionQueryToken.


        :return: The end_time of this PredictionQueryToken.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PredictionQueryToken.


        :param end_time: The end_time of this PredictionQueryToken.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def iteration_id(self):
        """Gets the iteration_id of this PredictionQueryToken.


        :return: The iteration_id of this PredictionQueryToken.
        :rtype: str
        """
        return self._iteration_id

    @iteration_id.setter
    def iteration_id(self, iteration_id):
        """Sets the iteration_id of this PredictionQueryToken.


        :param iteration_id: The iteration_id of this PredictionQueryToken.
        :type iteration_id: str
        """

        self._iteration_id = iteration_id

    @property
    def max_count(self):
        """Gets the max_count of this PredictionQueryToken.


        :return: The max_count of this PredictionQueryToken.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this PredictionQueryToken.


        :param max_count: The max_count of this PredictionQueryToken.
        :type max_count: int
        """

        self._max_count = max_count

    @property
    def order_by(self):
        """Gets the order_by of this PredictionQueryToken.


        :return: The order_by of this PredictionQueryToken.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this PredictionQueryToken.


        :param order_by: The order_by of this PredictionQueryToken.
        :type order_by: str
        """
        allowed_values = ["Newest", "Oldest", "Suggested"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def session(self):
        """Gets the session of this PredictionQueryToken.


        :return: The session of this PredictionQueryToken.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this PredictionQueryToken.


        :param session: The session of this PredictionQueryToken.
        :type session: str
        """

        self._session = session

    @property
    def start_time(self):
        """Gets the start_time of this PredictionQueryToken.


        :return: The start_time of this PredictionQueryToken.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PredictionQueryToken.


        :param start_time: The start_time of this PredictionQueryToken.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def tags(self):
        """Gets the tags of this PredictionQueryToken.


        :return: The tags of this PredictionQueryToken.
        :rtype: List[PredictionQueryTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PredictionQueryToken.


        :param tags: The tags of this PredictionQueryToken.
        :type tags: List[PredictionQueryTag]
        """

        self._tags = tags
