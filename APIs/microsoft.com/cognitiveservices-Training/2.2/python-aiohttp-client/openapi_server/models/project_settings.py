# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_type: str=None, domain_id: str=None):
        """ProjectSettings - a model defined in OpenAPI

        :param classification_type: The classification_type of this ProjectSettings.
        :param domain_id: The domain_id of this ProjectSettings.
        """
        self.openapi_types = {
            'classification_type': str,
            'domain_id': str
        }

        self.attribute_map = {
            'classification_type': 'classificationType',
            'domain_id': 'domainId'
        }

        self._classification_type = classification_type
        self._domain_id = domain_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSettings of this ProjectSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_type(self):
        """Gets the classification_type of this ProjectSettings.

        Gets or sets the classification type of the project.

        :return: The classification_type of this ProjectSettings.
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this ProjectSettings.

        Gets or sets the classification type of the project.

        :param classification_type: The classification_type of this ProjectSettings.
        :type classification_type: str
        """
        allowed_values = [None,"Multiclass", "Multilabel"]  # noqa: E501
        if classification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `classification_type` ({0}), must be one of {1}"
                .format(classification_type, allowed_values)
            )

        self._classification_type = classification_type

    @property
    def domain_id(self):
        """Gets the domain_id of this ProjectSettings.

        Gets or sets the id of the Domain to use with this project.

        :return: The domain_id of this ProjectSettings.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this ProjectSettings.

        Gets or sets the id of the Domain to use with this project.

        :param domain_id: The domain_id of this ProjectSettings.
        :type domain_id: str
        """

        self._domain_id = domain_id
