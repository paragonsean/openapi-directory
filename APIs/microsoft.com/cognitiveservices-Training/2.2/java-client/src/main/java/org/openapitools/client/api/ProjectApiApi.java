/*
 * Custom Vision Training Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Export;
import org.openapitools.client.model.ImagePerformance;
import org.openapitools.client.model.Iteration;
import org.openapitools.client.model.IterationPerformance;
import org.openapitools.client.model.Project;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProject
     * @param name Name of the project. (required)
     * @param trainingKey  (required)
     * @param description The description of the project. (optional)
     * @param domainId The id of the domain to use for this project. Defaults to General. (optional)
     * @param classificationType The type of classifier to create for this project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(String name, String trainingKey, String description, UUID domainId, String classificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        if (classificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationType", classificationType));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(String name, String trainingKey, String description, UUID domainId, String classificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createProject(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling createProject(Async)");
        }

        return createProjectCall(name, trainingKey, description, domainId, classificationType, _callback);

    }

    /**
     * Create a project.
     * 
     * @param name Name of the project. (required)
     * @param trainingKey  (required)
     * @param description The description of the project. (optional)
     * @param domainId The id of the domain to use for this project. Defaults to General. (optional)
     * @param classificationType The type of classifier to create for this project. (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(String name, String trainingKey, String description, UUID domainId, String classificationType) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(name, trainingKey, description, domainId, classificationType);
        return localVarResp.getData();
    }

    /**
     * Create a project.
     * 
     * @param name Name of the project. (required)
     * @param trainingKey  (required)
     * @param description The description of the project. (optional)
     * @param domainId The id of the domain to use for this project. Defaults to General. (optional)
     * @param classificationType The type of classifier to create for this project. (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(String name, String trainingKey, String description, UUID domainId, String classificationType) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(name, trainingKey, description, domainId, classificationType, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a project. (asynchronously)
     * 
     * @param name Name of the project. (required)
     * @param trainingKey  (required)
     * @param description The description of the project. (optional)
     * @param domainId The id of the domain to use for this project. Defaults to General. (optional)
     * @param classificationType The type of classifier to create for this project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(String name, String trainingKey, String description, UUID domainId, String classificationType, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(name, trainingKey, description, domainId, classificationType, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIteration
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIterationCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIterationValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteIteration(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling deleteIteration(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling deleteIteration(Async)");
        }

        return deleteIterationCall(projectId, iterationId, trainingKey, _callback);

    }

    /**
     * Delete a specific iteration of a project.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIteration(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        deleteIterationWithHttpInfo(projectId, iterationId, trainingKey);
    }

    /**
     * Delete a specific iteration of a project.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIterationWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = deleteIterationValidateBeforeCall(projectId, iterationId, trainingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific iteration of a project. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIterationAsync(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIterationValidateBeforeCall(projectId, iterationId, trainingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProject(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling deleteProject(Async)");
        }

        return deleteProjectCall(projectId, trainingKey, _callback);

    }

    /**
     * Delete a specific project.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProject(UUID projectId, String trainingKey) throws ApiException {
        deleteProjectWithHttpInfo(projectId, trainingKey);
    }

    /**
     * Delete a specific project.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(UUID projectId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, trainingKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific project. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(UUID projectId, String trainingKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, trainingKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportIteration
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param platform The target platform. (required)
     * @param trainingKey  (required)
     * @param flavor The flavor of the target platform. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportIterationCall(UUID projectId, UUID iterationId, String platform, String trainingKey, String flavor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}/export"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (flavor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flavor", flavor));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportIterationValidateBeforeCall(UUID projectId, UUID iterationId, String platform, String trainingKey, String flavor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportIteration(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling exportIteration(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling exportIteration(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling exportIteration(Async)");
        }

        return exportIterationCall(projectId, iterationId, platform, trainingKey, flavor, _callback);

    }

    /**
     * Export a trained iteration.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param platform The target platform. (required)
     * @param trainingKey  (required)
     * @param flavor The flavor of the target platform. (optional)
     * @return Export
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Export exportIteration(UUID projectId, UUID iterationId, String platform, String trainingKey, String flavor) throws ApiException {
        ApiResponse<Export> localVarResp = exportIterationWithHttpInfo(projectId, iterationId, platform, trainingKey, flavor);
        return localVarResp.getData();
    }

    /**
     * Export a trained iteration.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param platform The target platform. (required)
     * @param trainingKey  (required)
     * @param flavor The flavor of the target platform. (optional)
     * @return ApiResponse&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Export> exportIterationWithHttpInfo(UUID projectId, UUID iterationId, String platform, String trainingKey, String flavor) throws ApiException {
        okhttp3.Call localVarCall = exportIterationValidateBeforeCall(projectId, iterationId, platform, trainingKey, flavor, null);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a trained iteration. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param platform The target platform. (required)
     * @param trainingKey  (required)
     * @param flavor The flavor of the target platform. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportIterationAsync(UUID projectId, UUID iterationId, String platform, String trainingKey, String flavor, final ApiCallback<Export> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportIterationValidateBeforeCall(projectId, iterationId, platform, trainingKey, flavor, _callback);
        Type localVarReturnType = new TypeToken<Export>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExports
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportsCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}/export"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportsValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getExports(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling getExports(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getExports(Async)");
        }

        return getExportsCall(projectId, iterationId, trainingKey, _callback);

    }

    /**
     * Get the list of exports for a specific iteration.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @return List&lt;Export&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Export> getExports(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        ApiResponse<List<Export>> localVarResp = getExportsWithHttpInfo(projectId, iterationId, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get the list of exports for a specific iteration.
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;List&lt;Export&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Export>> getExportsWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getExportsValidateBeforeCall(projectId, iterationId, trainingKey, null);
        Type localVarReturnType = new TypeToken<List<Export>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of exports for a specific iteration. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportsAsync(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback<List<Export>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportsValidateBeforeCall(projectId, iterationId, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<List<Export>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagePerformanceCount
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePerformanceCountCall(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}/performance/images/count"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagePerformanceCountValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImagePerformanceCount(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling getImagePerformanceCount(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getImagePerformanceCount(Async)");
        }

        return getImagePerformanceCountCall(projectId, iterationId, trainingKey, tagIds, _callback);

    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from  training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer getImagePerformanceCount(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds) throws ApiException {
        ApiResponse<Integer> localVarResp = getImagePerformanceCountWithHttpInfo(projectId, iterationId, trainingKey, tagIds);
        return localVarResp.getData();
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from  training for the provided iteration {iterationId}.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> getImagePerformanceCountWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds) throws ApiException {
        okhttp3.Call localVarCall = getImagePerformanceCountValidateBeforeCall(projectId, iterationId, trainingKey, tagIds, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the number of images tagged with the provided {tagIds} that have prediction results from  training for the provided iteration {iterationId}. (asynchronously)
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images to count. Defaults to all tags when null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePerformanceCountAsync(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagePerformanceCountValidateBeforeCall(projectId, iterationId, trainingKey, tagIds, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagePerformances
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePerformancesCall(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}/performance/images"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tagIds", tagIds));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagePerformancesValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImagePerformances(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling getImagePerformances(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getImagePerformances(Async)");
        }

        return getImagePerformancesCall(projectId, iterationId, trainingKey, tagIds, orderBy, take, skip, _callback);

    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return List&lt;ImagePerformance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ImagePerformance> getImagePerformances(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, String orderBy, Integer take, Integer skip) throws ApiException {
        ApiResponse<List<ImagePerformance>> localVarResp = getImagePerformancesWithHttpInfo(projectId, iterationId, trainingKey, tagIds, orderBy, take, skip);
        return localVarResp.getData();
    }

    /**
     * Get image with its prediction for a given project iteration.
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @return ApiResponse&lt;List&lt;ImagePerformance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImagePerformance>> getImagePerformancesWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, String orderBy, Integer take, Integer skip) throws ApiException {
        okhttp3.Call localVarCall = getImagePerformancesValidateBeforeCall(projectId, iterationId, trainingKey, tagIds, orderBy, take, skip, null);
        Type localVarReturnType = new TypeToken<List<ImagePerformance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get image with its prediction for a given project iteration. (asynchronously)
     * This API supports batching and range selection. By default it will only return first 50 images matching images.  Use the {take} and {skip} parameters to control how many images to return in a given batch.  The filtering is on an and/or relationship. For example, if the provided tag ids are for the \&quot;Dog\&quot; and  \&quot;Cat\&quot; tags, then only images tagged with Dog and/or Cat will be returned
     * @param projectId The project id. (required)
     * @param iterationId The iteration id. Defaults to workspace. (required)
     * @param trainingKey  (required)
     * @param tagIds A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20. (optional)
     * @param orderBy The ordering. Defaults to newest. (optional)
     * @param take Maximum number of images to return. Defaults to 50, limited to 256. (optional, default to 50)
     * @param skip Number of images to skip before beginning the image batch. Defaults to 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePerformancesAsync(UUID projectId, UUID iterationId, String trainingKey, List<String> tagIds, String orderBy, Integer take, Integer skip, final ApiCallback<List<ImagePerformance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagePerformancesValidateBeforeCall(projectId, iterationId, trainingKey, tagIds, orderBy, take, skip, _callback);
        Type localVarReturnType = new TypeToken<List<ImagePerformance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIteration
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIterationValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIteration(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling getIteration(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getIteration(Async)");
        }

        return getIterationCall(projectId, iterationId, trainingKey, _callback);

    }

    /**
     * Get a specific iteration.
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @return Iteration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Iteration getIteration(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        ApiResponse<Iteration> localVarResp = getIterationWithHttpInfo(projectId, iterationId, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get a specific iteration.
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;Iteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Iteration> getIterationWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getIterationValidateBeforeCall(projectId, iterationId, trainingKey, null);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific iteration. (asynchronously)
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationAsync(UUID projectId, UUID iterationId, String trainingKey, final ApiCallback<Iteration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIterationValidateBeforeCall(projectId, iterationId, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIterationPerformance
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param threshold The threshold used to determine true predictions. (optional)
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationPerformanceCall(UUID projectId, UUID iterationId, String trainingKey, Float threshold, Float overlapThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}/performance"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        if (overlapThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overlapThreshold", overlapThreshold));
        }

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIterationPerformanceValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, Float threshold, Float overlapThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIterationPerformance(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling getIterationPerformance(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getIterationPerformance(Async)");
        }

        return getIterationPerformanceCall(projectId, iterationId, trainingKey, threshold, overlapThreshold, _callback);

    }

    /**
     * Get detailed performance information about an iteration.
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param threshold The threshold used to determine true predictions. (optional)
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions. (optional)
     * @return IterationPerformance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IterationPerformance getIterationPerformance(UUID projectId, UUID iterationId, String trainingKey, Float threshold, Float overlapThreshold) throws ApiException {
        ApiResponse<IterationPerformance> localVarResp = getIterationPerformanceWithHttpInfo(projectId, iterationId, trainingKey, threshold, overlapThreshold);
        return localVarResp.getData();
    }

    /**
     * Get detailed performance information about an iteration.
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param threshold The threshold used to determine true predictions. (optional)
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions. (optional)
     * @return ApiResponse&lt;IterationPerformance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IterationPerformance> getIterationPerformanceWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, Float threshold, Float overlapThreshold) throws ApiException {
        okhttp3.Call localVarCall = getIterationPerformanceValidateBeforeCall(projectId, iterationId, trainingKey, threshold, overlapThreshold, null);
        Type localVarReturnType = new TypeToken<IterationPerformance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detailed performance information about an iteration. (asynchronously)
     * 
     * @param projectId The id of the project the iteration belongs to. (required)
     * @param iterationId The id of the iteration to get. (required)
     * @param trainingKey  (required)
     * @param threshold The threshold used to determine true predictions. (optional)
     * @param overlapThreshold If applicable, the bounding box overlap threshold used to determine true predictions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationPerformanceAsync(UUID projectId, UUID iterationId, String trainingKey, Float threshold, Float overlapThreshold, final ApiCallback<IterationPerformance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIterationPerformanceValidateBeforeCall(projectId, iterationId, trainingKey, threshold, overlapThreshold, _callback);
        Type localVarReturnType = new TypeToken<IterationPerformance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIterations
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationsCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIterationsValidateBeforeCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIterations(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getIterations(Async)");
        }

        return getIterationsCall(projectId, trainingKey, _callback);

    }

    /**
     * Get iterations for the project.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @return List&lt;Iteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Iteration> getIterations(UUID projectId, String trainingKey) throws ApiException {
        ApiResponse<List<Iteration>> localVarResp = getIterationsWithHttpInfo(projectId, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get iterations for the project.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;List&lt;Iteration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Iteration>> getIterationsWithHttpInfo(UUID projectId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getIterationsValidateBeforeCall(projectId, trainingKey, null);
        Type localVarReturnType = new TypeToken<List<Iteration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get iterations for the project. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIterationsAsync(UUID projectId, String trainingKey, final ApiCallback<List<Iteration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIterationsValidateBeforeCall(projectId, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<List<Iteration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param projectId The id of the project to get. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getProject(Async)");
        }

        return getProjectCall(projectId, trainingKey, _callback);

    }

    /**
     * Get a specific project.
     * 
     * @param projectId The id of the project to get. (required)
     * @param trainingKey  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Project getProject(UUID projectId, String trainingKey) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectWithHttpInfo(projectId, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get a specific project.
     * 
     * @param projectId The id of the project to get. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectWithHttpInfo(UUID projectId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, trainingKey, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific project. (asynchronously)
     * 
     * @param projectId The id of the project to get. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(UUID projectId, String trainingKey, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling getProjects(Async)");
        }

        return getProjectsCall(trainingKey, _callback);

    }

    /**
     * Get your projects.
     * 
     * @param trainingKey  (required)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> getProjects(String trainingKey) throws ApiException {
        ApiResponse<List<Project>> localVarResp = getProjectsWithHttpInfo(trainingKey);
        return localVarResp.getData();
    }

    /**
     * Get your projects.
     * 
     * @param trainingKey  (required)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> getProjectsWithHttpInfo(String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(trainingKey, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your projects. (asynchronously)
     * 
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(String trainingKey, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(trainingKey, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainProject
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainProjectCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/train"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainProjectValidateBeforeCall(UUID projectId, String trainingKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling trainProject(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling trainProject(Async)");
        }

        return trainProjectCall(projectId, trainingKey, _callback);

    }

    /**
     * Queues project for training.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @return Iteration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Iteration trainProject(UUID projectId, String trainingKey) throws ApiException {
        ApiResponse<Iteration> localVarResp = trainProjectWithHttpInfo(projectId, trainingKey);
        return localVarResp.getData();
    }

    /**
     * Queues project for training.
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @return ApiResponse&lt;Iteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Iteration> trainProjectWithHttpInfo(UUID projectId, String trainingKey) throws ApiException {
        okhttp3.Call localVarCall = trainProjectValidateBeforeCall(projectId, trainingKey, null);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queues project for training. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param trainingKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainProjectAsync(UUID projectId, String trainingKey, final ApiCallback<Iteration> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainProjectValidateBeforeCall(projectId, trainingKey, _callback);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIteration
     * @param projectId Project id. (required)
     * @param iterationId Iteration id. (required)
     * @param trainingKey  (required)
     * @param iteration The updated iteration model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIterationCall(UUID projectId, UUID iterationId, String trainingKey, Iteration iteration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iteration;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/iterations/{iterationId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "iterationId" + "}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIterationValidateBeforeCall(UUID projectId, UUID iterationId, String trainingKey, Iteration iteration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateIteration(Async)");
        }

        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling updateIteration(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling updateIteration(Async)");
        }

        // verify the required parameter 'iteration' is set
        if (iteration == null) {
            throw new ApiException("Missing the required parameter 'iteration' when calling updateIteration(Async)");
        }

        return updateIterationCall(projectId, iterationId, trainingKey, iteration, _callback);

    }

    /**
     * Update a specific iteration.
     * 
     * @param projectId Project id. (required)
     * @param iterationId Iteration id. (required)
     * @param trainingKey  (required)
     * @param iteration The updated iteration model. (required)
     * @return Iteration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Iteration updateIteration(UUID projectId, UUID iterationId, String trainingKey, Iteration iteration) throws ApiException {
        ApiResponse<Iteration> localVarResp = updateIterationWithHttpInfo(projectId, iterationId, trainingKey, iteration);
        return localVarResp.getData();
    }

    /**
     * Update a specific iteration.
     * 
     * @param projectId Project id. (required)
     * @param iterationId Iteration id. (required)
     * @param trainingKey  (required)
     * @param iteration The updated iteration model. (required)
     * @return ApiResponse&lt;Iteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Iteration> updateIterationWithHttpInfo(UUID projectId, UUID iterationId, String trainingKey, Iteration iteration) throws ApiException {
        okhttp3.Call localVarCall = updateIterationValidateBeforeCall(projectId, iterationId, trainingKey, iteration, null);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific iteration. (asynchronously)
     * 
     * @param projectId Project id. (required)
     * @param iterationId Iteration id. (required)
     * @param trainingKey  (required)
     * @param iteration The updated iteration model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIterationAsync(UUID projectId, UUID iterationId, String trainingKey, Iteration iteration, final ApiCallback<Iteration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIterationValidateBeforeCall(projectId, iterationId, trainingKey, iteration, _callback);
        Type localVarReturnType = new TypeToken<Iteration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProject
     * @param projectId The id of the project to update. (required)
     * @param trainingKey  (required)
     * @param project The updated project model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectCall(UUID projectId, String trainingKey, Project project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trainingKey != null) {
            localVarHeaderParams.put("Training-Key", localVarApiClient.parameterToString(trainingKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectValidateBeforeCall(UUID projectId, String trainingKey, Project project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProject(Async)");
        }

        // verify the required parameter 'trainingKey' is set
        if (trainingKey == null) {
            throw new ApiException("Missing the required parameter 'trainingKey' when calling updateProject(Async)");
        }

        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling updateProject(Async)");
        }

        return updateProjectCall(projectId, trainingKey, project, _callback);

    }

    /**
     * Update a specific project.
     * 
     * @param projectId The id of the project to update. (required)
     * @param trainingKey  (required)
     * @param project The updated project model. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Project updateProject(UUID projectId, String trainingKey, Project project) throws ApiException {
        ApiResponse<Project> localVarResp = updateProjectWithHttpInfo(projectId, trainingKey, project);
        return localVarResp.getData();
    }

    /**
     * Update a specific project.
     * 
     * @param projectId The id of the project to update. (required)
     * @param trainingKey  (required)
     * @param project The updated project model. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> updateProjectWithHttpInfo(UUID projectId, String trainingKey, Project project) throws ApiException {
        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(projectId, trainingKey, project, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific project. (asynchronously)
     * 
     * @param projectId The id of the project to update. (required)
     * @param trainingKey  (required)
     * @param project The updated project model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectAsync(UUID projectId, String trainingKey, Project project, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(projectId, trainingKey, project, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
