/**
 * TrainingApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Prediction from './Prediction';

/**
 * The StoredImagePrediction model module.
 * @module model/StoredImagePrediction
 * @version 2.1
 */
class StoredImagePrediction {
    /**
     * Constructs a new <code>StoredImagePrediction</code>.
     * result of an image classification request
     * @alias module:model/StoredImagePrediction
     */
    constructor() { 
        
        StoredImagePrediction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoredImagePrediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredImagePrediction} obj Optional instance to populate.
     * @return {module:model/StoredImagePrediction} The populated <code>StoredImagePrediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredImagePrediction();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('iteration')) {
                obj['iteration'] = ApiClient.convertToType(data['iteration'], 'String');
            }
            if (data.hasOwnProperty('predictions')) {
                obj['predictions'] = ApiClient.convertToType(data['predictions'], [Prediction]);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('thumbnailUri')) {
                obj['thumbnailUri'] = ApiClient.convertToType(data['thumbnailUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredImagePrediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredImagePrediction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is a string
        if (data['iteration'] && !(typeof data['iteration'] === 'string' || data['iteration'] instanceof String)) {
            throw new Error("Expected the field `iteration` to be a primitive type in the JSON string but got " + data['iteration']);
        }
        if (data['predictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['predictions'])) {
                throw new Error("Expected the field `predictions` to be an array in the JSON data but got " + data['predictions']);
            }
            // validate the optional field `predictions` (array)
            for (const item of data['predictions']) {
                Prediction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['thumbnailUri'] && !(typeof data['thumbnailUri'] === 'string' || data['thumbnailUri'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUri` to be a primitive type in the JSON string but got " + data['thumbnailUri']);
        }

        return true;
    }


}



/**
 * @member {Date} created
 */
StoredImagePrediction.prototype['created'] = undefined;

/**
 * @member {String} domain
 */
StoredImagePrediction.prototype['domain'] = undefined;

/**
 * @member {String} id
 */
StoredImagePrediction.prototype['id'] = undefined;

/**
 * @member {String} imageUri
 */
StoredImagePrediction.prototype['imageUri'] = undefined;

/**
 * @member {String} iteration
 */
StoredImagePrediction.prototype['iteration'] = undefined;

/**
 * @member {Array.<module:model/Prediction>} predictions
 */
StoredImagePrediction.prototype['predictions'] = undefined;

/**
 * @member {String} project
 */
StoredImagePrediction.prototype['project'] = undefined;

/**
 * @member {String} thumbnailUri
 */
StoredImagePrediction.prototype['thumbnailUri'] = undefined;






export default StoredImagePrediction;

