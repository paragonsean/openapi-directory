# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Iteration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_type: str=None, created: datetime=None, domain_id: str=None, exportable: bool=None, id: str=None, is_default: bool=None, last_modified: datetime=None, name: str=None, project_id: str=None, status: str=None, trained_at: datetime=None):
        """Iteration - a model defined in OpenAPI

        :param classification_type: The classification_type of this Iteration.
        :param created: The created of this Iteration.
        :param domain_id: The domain_id of this Iteration.
        :param exportable: The exportable of this Iteration.
        :param id: The id of this Iteration.
        :param is_default: The is_default of this Iteration.
        :param last_modified: The last_modified of this Iteration.
        :param name: The name of this Iteration.
        :param project_id: The project_id of this Iteration.
        :param status: The status of this Iteration.
        :param trained_at: The trained_at of this Iteration.
        """
        self.openapi_types = {
            'classification_type': str,
            'created': datetime,
            'domain_id': str,
            'exportable': bool,
            'id': str,
            'is_default': bool,
            'last_modified': datetime,
            'name': str,
            'project_id': str,
            'status': str,
            'trained_at': datetime
        }

        self.attribute_map = {
            'classification_type': 'classificationType',
            'created': 'created',
            'domain_id': 'domainId',
            'exportable': 'exportable',
            'id': 'id',
            'is_default': 'isDefault',
            'last_modified': 'lastModified',
            'name': 'name',
            'project_id': 'projectId',
            'status': 'status',
            'trained_at': 'trainedAt'
        }

        self._classification_type = classification_type
        self._created = created
        self._domain_id = domain_id
        self._exportable = exportable
        self._id = id
        self._is_default = is_default
        self._last_modified = last_modified
        self._name = name
        self._project_id = project_id
        self._status = status
        self._trained_at = trained_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Iteration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Iteration of this Iteration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_type(self):
        """Gets the classification_type of this Iteration.

        Gets the classification type of the project

        :return: The classification_type of this Iteration.
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this Iteration.

        Gets the classification type of the project

        :param classification_type: The classification_type of this Iteration.
        :type classification_type: str
        """
        allowed_values = [None,"Multiclass", "Multilabel"]  # noqa: E501
        if classification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `classification_type` ({0}), must be one of {1}"
                .format(classification_type, allowed_values)
            )

        self._classification_type = classification_type

    @property
    def created(self):
        """Gets the created of this Iteration.

        Gets the time this iteration was completed

        :return: The created of this Iteration.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Iteration.

        Gets the time this iteration was completed

        :param created: The created of this Iteration.
        :type created: datetime
        """

        self._created = created

    @property
    def domain_id(self):
        """Gets the domain_id of this Iteration.

        Get or sets a guid of the domain the iteration has been trained on

        :return: The domain_id of this Iteration.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Iteration.

        Get or sets a guid of the domain the iteration has been trained on

        :param domain_id: The domain_id of this Iteration.
        :type domain_id: str
        """

        self._domain_id = domain_id

    @property
    def exportable(self):
        """Gets the exportable of this Iteration.

        Whether the iteration can be exported to another format for download

        :return: The exportable of this Iteration.
        :rtype: bool
        """
        return self._exportable

    @exportable.setter
    def exportable(self, exportable):
        """Sets the exportable of this Iteration.

        Whether the iteration can be exported to another format for download

        :param exportable: The exportable of this Iteration.
        :type exportable: bool
        """

        self._exportable = exportable

    @property
    def id(self):
        """Gets the id of this Iteration.

        Gets the id of the iteration

        :return: The id of this Iteration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Iteration.

        Gets the id of the iteration

        :param id: The id of this Iteration.
        :type id: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this Iteration.

        Gets or sets a value indicating whether the iteration is the default iteration for the project

        :return: The is_default of this Iteration.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Iteration.

        Gets or sets a value indicating whether the iteration is the default iteration for the project

        :param is_default: The is_default of this Iteration.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def last_modified(self):
        """Gets the last_modified of this Iteration.

        Gets the time this iteration was last modified

        :return: The last_modified of this Iteration.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Iteration.

        Gets the time this iteration was last modified

        :param last_modified: The last_modified of this Iteration.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this Iteration.

        Gets or sets the name of the iteration

        :return: The name of this Iteration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Iteration.

        Gets or sets the name of the iteration

        :param name: The name of this Iteration.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Iteration.

        Gets the project id of the iteration

        :return: The project_id of this Iteration.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Iteration.

        Gets the project id of the iteration

        :param project_id: The project_id of this Iteration.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this Iteration.

        Gets the current iteration status

        :return: The status of this Iteration.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Iteration.

        Gets the current iteration status

        :param status: The status of this Iteration.
        :type status: str
        """

        self._status = status

    @property
    def trained_at(self):
        """Gets the trained_at of this Iteration.

        Gets the time this iteration was last modified

        :return: The trained_at of this Iteration.
        :rtype: datetime
        """
        return self._trained_at

    @trained_at.setter
    def trained_at(self, trained_at):
        """Sets the trained_at of this Iteration.

        Gets the time this iteration was last modified

        :param trained_at: The trained_at of this Iteration.
        :type trained_at: datetime
        """

        self._trained_at = trained_at
