# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagPerformance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_precision: float=None, id: str=None, name: str=None, precision: float=None, precision_std_deviation: float=None, recall: float=None, recall_std_deviation: float=None):
        """TagPerformance - a model defined in OpenAPI

        :param average_precision: The average_precision of this TagPerformance.
        :param id: The id of this TagPerformance.
        :param name: The name of this TagPerformance.
        :param precision: The precision of this TagPerformance.
        :param precision_std_deviation: The precision_std_deviation of this TagPerformance.
        :param recall: The recall of this TagPerformance.
        :param recall_std_deviation: The recall_std_deviation of this TagPerformance.
        """
        self.openapi_types = {
            'average_precision': float,
            'id': str,
            'name': str,
            'precision': float,
            'precision_std_deviation': float,
            'recall': float,
            'recall_std_deviation': float
        }

        self.attribute_map = {
            'average_precision': 'averagePrecision',
            'id': 'id',
            'name': 'name',
            'precision': 'precision',
            'precision_std_deviation': 'precisionStdDeviation',
            'recall': 'recall',
            'recall_std_deviation': 'recallStdDeviation'
        }

        self._average_precision = average_precision
        self._id = id
        self._name = name
        self._precision = precision
        self._precision_std_deviation = precision_std_deviation
        self._recall = recall
        self._recall_std_deviation = recall_std_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagPerformance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagPerformance of this TagPerformance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_precision(self):
        """Gets the average_precision of this TagPerformance.

        Gets the average precision when applicable

        :return: The average_precision of this TagPerformance.
        :rtype: float
        """
        return self._average_precision

    @average_precision.setter
    def average_precision(self, average_precision):
        """Sets the average_precision of this TagPerformance.

        Gets the average precision when applicable

        :param average_precision: The average_precision of this TagPerformance.
        :type average_precision: float
        """

        self._average_precision = average_precision

    @property
    def id(self):
        """Gets the id of this TagPerformance.


        :return: The id of this TagPerformance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagPerformance.


        :param id: The id of this TagPerformance.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TagPerformance.


        :return: The name of this TagPerformance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagPerformance.


        :param name: The name of this TagPerformance.
        :type name: str
        """

        self._name = name

    @property
    def precision(self):
        """Gets the precision of this TagPerformance.

        Gets the precision

        :return: The precision of this TagPerformance.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this TagPerformance.

        Gets the precision

        :param precision: The precision of this TagPerformance.
        :type precision: float
        """

        self._precision = precision

    @property
    def precision_std_deviation(self):
        """Gets the precision_std_deviation of this TagPerformance.

        Gets the standard deviation for the precision

        :return: The precision_std_deviation of this TagPerformance.
        :rtype: float
        """
        return self._precision_std_deviation

    @precision_std_deviation.setter
    def precision_std_deviation(self, precision_std_deviation):
        """Sets the precision_std_deviation of this TagPerformance.

        Gets the standard deviation for the precision

        :param precision_std_deviation: The precision_std_deviation of this TagPerformance.
        :type precision_std_deviation: float
        """

        self._precision_std_deviation = precision_std_deviation

    @property
    def recall(self):
        """Gets the recall of this TagPerformance.

        Gets the recall

        :return: The recall of this TagPerformance.
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this TagPerformance.

        Gets the recall

        :param recall: The recall of this TagPerformance.
        :type recall: float
        """

        self._recall = recall

    @property
    def recall_std_deviation(self):
        """Gets the recall_std_deviation of this TagPerformance.

        Gets the standard deviation for the recall

        :return: The recall_std_deviation of this TagPerformance.
        :rtype: float
        """
        return self._recall_std_deviation

    @recall_std_deviation.setter
    def recall_std_deviation(self, recall_std_deviation):
        """Sets the recall_std_deviation of this TagPerformance.

        Gets the standard deviation for the recall

        :param recall_std_deviation: The recall_std_deviation of this TagPerformance.
        :type recall_std_deviation: float
        """

        self._recall_std_deviation = recall_std_deviation
