/*
 * PredictionEndpoint
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ImagePredictionResultModel;
import org.openapitools.client.model.ImageUrl;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagePredictionApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagePredictionApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagePredictionApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for predictImage
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageCall(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/image"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (predictionKey != null) {
            localVarHeaderParams.put("Prediction-Key", localVarApiClient.parameterToString(predictionKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictImageValidateBeforeCall(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling predictImage(Async)");
        }

        // verify the required parameter 'predictionKey' is set
        if (predictionKey == null) {
            throw new ApiException("Missing the required parameter 'predictionKey' when calling predictImage(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling predictImage(Async)");
        }

        return predictImageCall(projectId, predictionKey, imageData, iterationId, application, _callback);

    }

    /**
     * Predict an image and saves the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ImagePredictionResultModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImagePredictionResultModel predictImage(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application) throws ApiException {
        ApiResponse<ImagePredictionResultModel> localVarResp = predictImageWithHttpInfo(projectId, predictionKey, imageData, iterationId, application);
        return localVarResp.getData();
    }

    /**
     * Predict an image and saves the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ApiResponse&lt;ImagePredictionResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePredictionResultModel> predictImageWithHttpInfo(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application) throws ApiException {
        okhttp3.Call localVarCall = predictImageValidateBeforeCall(projectId, predictionKey, imageData, iterationId, application, null);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict an image and saves the result (asynchronously)
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageAsync(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback<ImagePredictionResultModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictImageValidateBeforeCall(projectId, predictionKey, imageData, iterationId, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictImageUrl
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageUrlCall(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/url"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (predictionKey != null) {
            localVarHeaderParams.put("Prediction-Key", localVarApiClient.parameterToString(predictionKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictImageUrlValidateBeforeCall(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling predictImageUrl(Async)");
        }

        // verify the required parameter 'predictionKey' is set
        if (predictionKey == null) {
            throw new ApiException("Missing the required parameter 'predictionKey' when calling predictImageUrl(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling predictImageUrl(Async)");
        }

        return predictImageUrlCall(projectId, predictionKey, imageUrl, iterationId, application, _callback);

    }

    /**
     * Predict an image url and saves the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ImagePredictionResultModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImagePredictionResultModel predictImageUrl(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application) throws ApiException {
        ApiResponse<ImagePredictionResultModel> localVarResp = predictImageUrlWithHttpInfo(projectId, predictionKey, imageUrl, iterationId, application);
        return localVarResp.getData();
    }

    /**
     * Predict an image url and saves the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ApiResponse&lt;ImagePredictionResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePredictionResultModel> predictImageUrlWithHttpInfo(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application) throws ApiException {
        okhttp3.Call localVarCall = predictImageUrlValidateBeforeCall(projectId, predictionKey, imageUrl, iterationId, application, null);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict an image url and saves the result (asynchronously)
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageUrlAsync(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback<ImagePredictionResultModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictImageUrlValidateBeforeCall(projectId, predictionKey, imageUrl, iterationId, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictImageUrlWithNoStore
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageUrlWithNoStoreCall(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/url/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (predictionKey != null) {
            localVarHeaderParams.put("Prediction-Key", localVarApiClient.parameterToString(predictionKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictImageUrlWithNoStoreValidateBeforeCall(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling predictImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'predictionKey' is set
        if (predictionKey == null) {
            throw new ApiException("Missing the required parameter 'predictionKey' when calling predictImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling predictImageUrlWithNoStore(Async)");
        }

        return predictImageUrlWithNoStoreCall(projectId, predictionKey, imageUrl, iterationId, application, _callback);

    }

    /**
     * Predict an image url without saving the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ImagePredictionResultModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImagePredictionResultModel predictImageUrlWithNoStore(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application) throws ApiException {
        ApiResponse<ImagePredictionResultModel> localVarResp = predictImageUrlWithNoStoreWithHttpInfo(projectId, predictionKey, imageUrl, iterationId, application);
        return localVarResp.getData();
    }

    /**
     * Predict an image url without saving the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ApiResponse&lt;ImagePredictionResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePredictionResultModel> predictImageUrlWithNoStoreWithHttpInfo(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application) throws ApiException {
        okhttp3.Call localVarCall = predictImageUrlWithNoStoreValidateBeforeCall(projectId, predictionKey, imageUrl, iterationId, application, null);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict an image url without saving the result (asynchronously)
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageUrlWithNoStoreAsync(UUID projectId, String predictionKey, ImageUrl imageUrl, UUID iterationId, String application, final ApiCallback<ImagePredictionResultModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictImageUrlWithNoStoreValidateBeforeCall(projectId, predictionKey, imageUrl, iterationId, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictImageWithNoStore
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageWithNoStoreCall(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/image/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (iterationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterationId", iterationId));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (predictionKey != null) {
            localVarHeaderParams.put("Prediction-Key", localVarApiClient.parameterToString(predictionKey));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictImageWithNoStoreValidateBeforeCall(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling predictImageWithNoStore(Async)");
        }

        // verify the required parameter 'predictionKey' is set
        if (predictionKey == null) {
            throw new ApiException("Missing the required parameter 'predictionKey' when calling predictImageWithNoStore(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling predictImageWithNoStore(Async)");
        }

        return predictImageWithNoStoreCall(projectId, predictionKey, imageData, iterationId, application, _callback);

    }

    /**
     * Predict an image without saving the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ImagePredictionResultModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ImagePredictionResultModel predictImageWithNoStore(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application) throws ApiException {
        ApiResponse<ImagePredictionResultModel> localVarResp = predictImageWithNoStoreWithHttpInfo(projectId, predictionKey, imageData, iterationId, application);
        return localVarResp.getData();
    }

    /**
     * Predict an image without saving the result
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @return ApiResponse&lt;ImagePredictionResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePredictionResultModel> predictImageWithNoStoreWithHttpInfo(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application) throws ApiException {
        okhttp3.Call localVarCall = predictImageWithNoStoreValidateBeforeCall(projectId, predictionKey, imageData, iterationId, application, null);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predict an image without saving the result (asynchronously)
     * 
     * @param projectId The project id (required)
     * @param predictionKey  (required)
     * @param imageData  (required)
     * @param iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified (optional)
     * @param application Optional. Specifies the name of application using the endpoint (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictImageWithNoStoreAsync(UUID projectId, String predictionKey, File imageData, UUID iterationId, String application, final ApiCallback<ImagePredictionResultModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictImageWithNoStoreValidateBeforeCall(projectId, predictionKey, imageData, iterationId, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePredictionResultModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
