/**
 * PredictionEndpoint
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImagePredictionResultModel from '../model/ImagePredictionResultModel';
import ImageUrl from '../model/ImageUrl';

/**
* ImagePredictionApi service.
* @module api/ImagePredictionApiApi
* @version 1.1
*/
export default class ImagePredictionApiApi {

    /**
    * Constructs a new ImagePredictionApiApi. 
    * @alias module:api/ImagePredictionApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the predictImage operation.
     * @callback module:api/ImagePredictionApiApi~predictImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResultModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image and saves the result
     * @param {String} projectId The project id
     * @param {String} predictionKey 
     * @param {File} imageData 
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified
     * @param {String} [application] Optional. Specifies the name of application using the endpoint
     * @param {module:api/ImagePredictionApiApi~predictImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResultModel}
     */
    predictImage(projectId, predictionKey, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImage");
      }
      // verify the required parameter 'predictionKey' is set
      if (predictionKey === undefined || predictionKey === null) {
        throw new Error("Missing the required parameter 'predictionKey' when calling predictImage");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling predictImage");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      let headerParams = {
        'Prediction-Key': predictionKey
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePredictionResultModel;
      return this.apiClient.callApi(
        '/{projectId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictImageUrl operation.
     * @callback module:api/ImagePredictionApiApi~predictImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResultModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image url and saves the result
     * @param {String} projectId The project id
     * @param {String} predictionKey 
     * @param {module:model/ImageUrl} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified
     * @param {String} [application] Optional. Specifies the name of application using the endpoint
     * @param {module:api/ImagePredictionApiApi~predictImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResultModel}
     */
    predictImageUrl(projectId, predictionKey, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImageUrl");
      }
      // verify the required parameter 'predictionKey' is set
      if (predictionKey === undefined || predictionKey === null) {
        throw new Error("Missing the required parameter 'predictionKey' when calling predictImageUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling predictImageUrl");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      let headerParams = {
        'Prediction-Key': predictionKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePredictionResultModel;
      return this.apiClient.callApi(
        '/{projectId}/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictImageUrlWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~predictImageUrlWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResultModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image url without saving the result
     * @param {String} projectId The project id
     * @param {String} predictionKey 
     * @param {module:model/ImageUrl} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified
     * @param {String} [application] Optional. Specifies the name of application using the endpoint
     * @param {module:api/ImagePredictionApiApi~predictImageUrlWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResultModel}
     */
    predictImageUrlWithNoStore(projectId, predictionKey, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImageUrlWithNoStore");
      }
      // verify the required parameter 'predictionKey' is set
      if (predictionKey === undefined || predictionKey === null) {
        throw new Error("Missing the required parameter 'predictionKey' when calling predictImageUrlWithNoStore");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling predictImageUrlWithNoStore");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      let headerParams = {
        'Prediction-Key': predictionKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePredictionResultModel;
      return this.apiClient.callApi(
        '/{projectId}/url/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictImageWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~predictImageWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePredictionResultModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image without saving the result
     * @param {String} projectId The project id
     * @param {String} predictionKey 
     * @param {File} imageData 
     * @param {Object} opts Optional parameters
     * @param {String} [iterationId] Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified
     * @param {String} [application] Optional. Specifies the name of application using the endpoint
     * @param {module:api/ImagePredictionApiApi~predictImageWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePredictionResultModel}
     */
    predictImageWithNoStore(projectId, predictionKey, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImageWithNoStore");
      }
      // verify the required parameter 'predictionKey' is set
      if (predictionKey === undefined || predictionKey === null) {
        throw new Error("Missing the required parameter 'predictionKey' when calling predictImageWithNoStore");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling predictImageWithNoStore");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      let headerParams = {
        'Prediction-Key': predictionKey
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ImagePredictionResultModel;
      return this.apiClient.callApi(
        '/{projectId}/image/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
