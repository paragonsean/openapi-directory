/**
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagePredictionApiApi_H
#define OAI_OAIImagePredictionApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomVisionError.h"
#include "OAIHttpFileElement.h"
#include "OAIImagePrediction.h"
#include "OAIImageUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagePredictionApiApi : public QObject {
    Q_OBJECT

public:
    OAIImagePredictionApiApi(const int timeOut = 0);
    ~OAIImagePredictionApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  application QString [optional]
    */
    virtual void classifyImage(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  application QString [optional]
    */
    virtual void classifyImageUrl(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  application QString [optional]
    */
    virtual void classifyImageUrlWithNoStore(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  application QString [optional]
    */
    virtual void classifyImageWithNoStore(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  application QString [optional]
    */
    virtual void detectImage(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  application QString [optional]
    */
    virtual void detectImageUrl(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  application QString [optional]
    */
    virtual void detectImageUrlWithNoStore(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  published_name QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  application QString [optional]
    */
    virtual void detectImageWithNoStore(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void classifyImageCallback(OAIHttpRequestWorker *worker);
    void classifyImageUrlCallback(OAIHttpRequestWorker *worker);
    void classifyImageUrlWithNoStoreCallback(OAIHttpRequestWorker *worker);
    void classifyImageWithNoStoreCallback(OAIHttpRequestWorker *worker);
    void detectImageCallback(OAIHttpRequestWorker *worker);
    void detectImageUrlCallback(OAIHttpRequestWorker *worker);
    void detectImageUrlWithNoStoreCallback(OAIHttpRequestWorker *worker);
    void detectImageWithNoStoreCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void classifyImageSignal(OAIImagePrediction summary);
    void classifyImageUrlSignal(OAIImagePrediction summary);
    void classifyImageUrlWithNoStoreSignal(OAIImagePrediction summary);
    void classifyImageWithNoStoreSignal(OAIImagePrediction summary);
    void detectImageSignal(OAIImagePrediction summary);
    void detectImageUrlSignal(OAIImagePrediction summary);
    void detectImageUrlWithNoStoreSignal(OAIImagePrediction summary);
    void detectImageWithNoStoreSignal(OAIImagePrediction summary);


    void classifyImageSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void classifyImageUrlSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void classifyImageUrlWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void classifyImageWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void detectImageSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void detectImageUrlSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void detectImageUrlWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void detectImageWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);

    Q_DECL_DEPRECATED_X("Use classifyImageSignalError() instead")
    void classifyImageSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageUrlSignalError() instead")
    void classifyImageUrlSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageUrlSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageUrlWithNoStoreSignalError() instead")
    void classifyImageUrlWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageUrlWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageWithNoStoreSignalError() instead")
    void classifyImageWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageSignalError() instead")
    void detectImageSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageUrlSignalError() instead")
    void detectImageUrlSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageUrlSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageUrlWithNoStoreSignalError() instead")
    void detectImageUrlWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageUrlWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageWithNoStoreSignalError() instead")
    void detectImageWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use classifyImageSignalErrorFull() instead")
    void classifyImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageUrlSignalErrorFull() instead")
    void classifyImageUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageUrlWithNoStoreSignalErrorFull() instead")
    void classifyImageUrlWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageUrlWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyImageWithNoStoreSignalErrorFull() instead")
    void classifyImageWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyImageWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageSignalErrorFull() instead")
    void detectImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageUrlSignalErrorFull() instead")
    void detectImageUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageUrlWithNoStoreSignalErrorFull() instead")
    void detectImageUrlWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageUrlWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectImageWithNoStoreSignalErrorFull() instead")
    void detectImageWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectImageWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
