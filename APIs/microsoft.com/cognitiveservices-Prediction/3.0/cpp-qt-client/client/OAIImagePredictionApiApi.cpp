/**
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagePredictionApiApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIImagePredictionApiApi::OAIImagePredictionApiApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIImagePredictionApiApi::~OAIImagePredictionApiApi() {
}

void OAIImagePredictionApiApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://southcentralus.api.cognitive.microsoft.com/customvision/v3.0/prediction"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("{Endpoint}/customvision/v3.0/prediction"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"Endpoint", OAIServerVariable("Supported Cognitive Services endpoints.","none",
    QSet<QString>{ {"none"} })}, }));
    
    _serverConfigs.insert("classifyImage", defaultConf);
    _serverIndices.insert("classifyImage", 0);
    _serverConfigs.insert("classifyImageUrl", defaultConf);
    _serverIndices.insert("classifyImageUrl", 0);
    _serverConfigs.insert("classifyImageUrlWithNoStore", defaultConf);
    _serverIndices.insert("classifyImageUrlWithNoStore", 0);
    _serverConfigs.insert("classifyImageWithNoStore", defaultConf);
    _serverIndices.insert("classifyImageWithNoStore", 0);
    _serverConfigs.insert("detectImage", defaultConf);
    _serverIndices.insert("detectImage", 0);
    _serverConfigs.insert("detectImageUrl", defaultConf);
    _serverIndices.insert("detectImageUrl", 0);
    _serverConfigs.insert("detectImageUrlWithNoStore", defaultConf);
    _serverIndices.insert("detectImageUrlWithNoStore", 0);
    _serverConfigs.insert("detectImageWithNoStore", defaultConf);
    _serverIndices.insert("detectImageWithNoStore", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIImagePredictionApiApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIImagePredictionApiApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIImagePredictionApiApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIImagePredictionApiApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIImagePredictionApiApi::setUsername(const QString &username) {
    _username = username;
}

void OAIImagePredictionApiApi::setPassword(const QString &password) {
    _password = password;
}


void OAIImagePredictionApiApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIImagePredictionApiApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIImagePredictionApiApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIImagePredictionApiApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIImagePredictionApiApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIImagePredictionApiApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIImagePredictionApiApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIImagePredictionApiApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIImagePredictionApiApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIImagePredictionApiApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIImagePredictionApiApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIImagePredictionApiApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIImagePredictionApiApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIImagePredictionApiApi::classifyImage(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["classifyImage"][_serverIndices.value("classifyImage")].URL()+"/{projectId}/classify/iterations/{publishedName}/image");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("imageData", image_data.local_filename, image_data.request_filename, image_data.mime_type);
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::classifyImageCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::classifyImageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT classifyImageSignal(output);
        Q_EMIT classifyImageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT classifyImageSignalE(output, error_type, error_str);
        Q_EMIT classifyImageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT classifyImageSignalError(output, error_type, error_str);
        Q_EMIT classifyImageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::classifyImageUrl(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["classifyImageUrl"][_serverIndices.value("classifyImageUrl")].URL()+"/{projectId}/classify/iterations/{publishedName}/url");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_image_url.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::classifyImageUrlCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::classifyImageUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT classifyImageUrlSignal(output);
        Q_EMIT classifyImageUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT classifyImageUrlSignalE(output, error_type, error_str);
        Q_EMIT classifyImageUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT classifyImageUrlSignalError(output, error_type, error_str);
        Q_EMIT classifyImageUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::classifyImageUrlWithNoStore(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["classifyImageUrlWithNoStore"][_serverIndices.value("classifyImageUrlWithNoStore")].URL()+"/{projectId}/classify/iterations/{publishedName}/url/nostore");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_image_url.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::classifyImageUrlWithNoStoreCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::classifyImageUrlWithNoStoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT classifyImageUrlWithNoStoreSignal(output);
        Q_EMIT classifyImageUrlWithNoStoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT classifyImageUrlWithNoStoreSignalE(output, error_type, error_str);
        Q_EMIT classifyImageUrlWithNoStoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT classifyImageUrlWithNoStoreSignalError(output, error_type, error_str);
        Q_EMIT classifyImageUrlWithNoStoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::classifyImageWithNoStore(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["classifyImageWithNoStore"][_serverIndices.value("classifyImageWithNoStore")].URL()+"/{projectId}/classify/iterations/{publishedName}/image/nostore");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("imageData", image_data.local_filename, image_data.request_filename, image_data.mime_type);
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::classifyImageWithNoStoreCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::classifyImageWithNoStoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT classifyImageWithNoStoreSignal(output);
        Q_EMIT classifyImageWithNoStoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT classifyImageWithNoStoreSignalE(output, error_type, error_str);
        Q_EMIT classifyImageWithNoStoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT classifyImageWithNoStoreSignalError(output, error_type, error_str);
        Q_EMIT classifyImageWithNoStoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::detectImage(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["detectImage"][_serverIndices.value("detectImage")].URL()+"/{projectId}/detect/iterations/{publishedName}/image");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("imageData", image_data.local_filename, image_data.request_filename, image_data.mime_type);
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::detectImageCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::detectImageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT detectImageSignal(output);
        Q_EMIT detectImageSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT detectImageSignalE(output, error_type, error_str);
        Q_EMIT detectImageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT detectImageSignalError(output, error_type, error_str);
        Q_EMIT detectImageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::detectImageUrl(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["detectImageUrl"][_serverIndices.value("detectImageUrl")].URL()+"/{projectId}/detect/iterations/{publishedName}/url");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_image_url.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::detectImageUrlCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::detectImageUrlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT detectImageUrlSignal(output);
        Q_EMIT detectImageUrlSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT detectImageUrlSignalE(output, error_type, error_str);
        Q_EMIT detectImageUrlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT detectImageUrlSignalError(output, error_type, error_str);
        Q_EMIT detectImageUrlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::detectImageUrlWithNoStore(const QString &project_id, const QString &published_name, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["detectImageUrlWithNoStore"][_serverIndices.value("detectImageUrlWithNoStore")].URL()+"/{projectId}/detect/iterations/{publishedName}/url/nostore");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_image_url.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::detectImageUrlWithNoStoreCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::detectImageUrlWithNoStoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT detectImageUrlWithNoStoreSignal(output);
        Q_EMIT detectImageUrlWithNoStoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT detectImageUrlWithNoStoreSignalE(output, error_type, error_str);
        Q_EMIT detectImageUrlWithNoStoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT detectImageUrlWithNoStoreSignalError(output, error_type, error_str);
        Q_EMIT detectImageUrlWithNoStoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::detectImageWithNoStore(const QString &project_id, const QString &published_name, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &application) {
    QString fullPath = QString(_serverConfigs["detectImageWithNoStore"][_serverIndices.value("detectImageWithNoStore")].URL()+"/{projectId}/detect/iterations/{publishedName}/image/nostore");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("projectId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "projectId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"projectId"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString published_namePathParam("{");
        published_namePathParam.append("publishedName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "publishedName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"publishedName"+pathSuffix : pathPrefix;
        fullPath.replace(published_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(published_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("application")).append(querySuffix).append(QUrl::toPercentEncoding(application.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("imageData", image_data.local_filename, image_data.request_filename, image_data.mime_type);
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIImagePredictionApiApi::detectImageWithNoStoreCallback);
    connect(this, &OAIImagePredictionApiApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIImagePredictionApiApi::detectImageWithNoStoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIImagePrediction output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT detectImageWithNoStoreSignal(output);
        Q_EMIT detectImageWithNoStoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT detectImageWithNoStoreSignalE(output, error_type, error_str);
        Q_EMIT detectImageWithNoStoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT detectImageWithNoStoreSignalError(output, error_type, error_str);
        Q_EMIT detectImageWithNoStoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIImagePredictionApiApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
