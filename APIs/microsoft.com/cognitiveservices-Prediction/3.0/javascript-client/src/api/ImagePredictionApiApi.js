/**
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomVisionError from '../model/CustomVisionError';
import ImagePrediction from '../model/ImagePrediction';
import ImageUrl from '../model/ImageUrl';

/**
* ImagePredictionApi service.
* @module api/ImagePredictionApiApi
* @version 3.0
*/
export default class ImagePredictionApiApi {

    /**
    * Constructs a new ImagePredictionApiApi. 
    * @alias module:api/ImagePredictionApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the classifyImage operation.
     * @callback module:api/ImagePredictionApiApi~classifyImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify an image and saves the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {File} imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~classifyImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    classifyImage(projectId, publishedName, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling classifyImage");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling classifyImage");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling classifyImage");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = ['apim_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/classify/iterations/{publishedName}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyImageUrl operation.
     * @callback module:api/ImagePredictionApiApi~classifyImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify an image url and saves the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {module:model/ImageUrl} imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~classifyImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    classifyImageUrl(projectId, publishedName, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling classifyImageUrl");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling classifyImageUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling classifyImageUrl");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/classify/iterations/{publishedName}/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyImageUrlWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~classifyImageUrlWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify an image url without saving the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {module:model/ImageUrl} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~classifyImageUrlWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    classifyImageUrlWithNoStore(projectId, publishedName, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling classifyImageUrlWithNoStore");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling classifyImageUrlWithNoStore");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling classifyImageUrlWithNoStore");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/classify/iterations/{publishedName}/url/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyImageWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~classifyImageWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify an image without saving the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {File} imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~classifyImageWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    classifyImageWithNoStore(projectId, publishedName, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling classifyImageWithNoStore");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling classifyImageWithNoStore");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling classifyImageWithNoStore");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = ['apim_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/classify/iterations/{publishedName}/image/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectImage operation.
     * @callback module:api/ImagePredictionApiApi~detectImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect objects in an image and saves the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {File} imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~detectImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    detectImage(projectId, publishedName, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling detectImage");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling detectImage");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling detectImage");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = ['apim_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/detect/iterations/{publishedName}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectImageUrl operation.
     * @callback module:api/ImagePredictionApiApi~detectImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect objects in an image url and saves the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {module:model/ImageUrl} imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~detectImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    detectImageUrl(projectId, publishedName, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling detectImageUrl");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling detectImageUrl");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling detectImageUrl");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/detect/iterations/{publishedName}/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectImageUrlWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~detectImageUrlWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect objects in an image url without saving the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {module:model/ImageUrl} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~detectImageUrlWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    detectImageUrlWithNoStore(projectId, publishedName, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling detectImageUrlWithNoStore");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling detectImageUrlWithNoStore");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling detectImageUrlWithNoStore");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/detect/iterations/{publishedName}/url/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectImageWithNoStore operation.
     * @callback module:api/ImagePredictionApiApi~detectImageWithNoStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagePrediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect objects in an image without saving the result.
     * @param {String} projectId The project id.
     * @param {String} publishedName Specifies the name of the model to evaluate against.
     * @param {File} imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB.
     * @param {Object} opts Optional parameters
     * @param {String} [application] Optional. Specifies the name of application using the endpoint.
     * @param {module:api/ImagePredictionApiApi~detectImageWithNoStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagePrediction}
     */
    detectImageWithNoStore(projectId, publishedName, imageData, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling detectImageWithNoStore");
      }
      // verify the required parameter 'publishedName' is set
      if (publishedName === undefined || publishedName === null) {
        throw new Error("Missing the required parameter 'publishedName' when calling detectImageWithNoStore");
      }
      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling detectImageWithNoStore");
      }

      let pathParams = {
        'projectId': projectId,
        'publishedName': publishedName
      };
      let queryParams = {
        'application': opts['application']
      };
      let headerParams = {
      };
      let formParams = {
        'imageData': imageData
      };

      let authNames = ['apim_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/xml', 'text/xml'];
      let returnType = ImagePrediction;
      return this.apiClient.callApi(
        '/{projectId}/detect/iterations/{publishedName}/image/nostore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
