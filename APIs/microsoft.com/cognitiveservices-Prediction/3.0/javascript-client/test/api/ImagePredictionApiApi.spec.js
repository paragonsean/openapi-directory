/**
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CustomVisionPredictionClient);
  }
}(this, function(expect, CustomVisionPredictionClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CustomVisionPredictionClient.ImagePredictionApiApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImagePredictionApiApi', function() {
    describe('classifyImage', function() {
      it('should call classifyImage successfully', function(done) {
        //uncomment below and update the code to test classifyImage
        //instance.classifyImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classifyImageUrl', function() {
      it('should call classifyImageUrl successfully', function(done) {
        //uncomment below and update the code to test classifyImageUrl
        //instance.classifyImageUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classifyImageUrlWithNoStore', function() {
      it('should call classifyImageUrlWithNoStore successfully', function(done) {
        //uncomment below and update the code to test classifyImageUrlWithNoStore
        //instance.classifyImageUrlWithNoStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classifyImageWithNoStore', function() {
      it('should call classifyImageWithNoStore successfully', function(done) {
        //uncomment below and update the code to test classifyImageWithNoStore
        //instance.classifyImageWithNoStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectImage', function() {
      it('should call detectImage successfully', function(done) {
        //uncomment below and update the code to test detectImage
        //instance.detectImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectImageUrl', function() {
      it('should call detectImageUrl successfully', function(done) {
        //uncomment below and update the code to test detectImageUrl
        //instance.detectImageUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectImageUrlWithNoStore', function() {
      it('should call detectImageUrlWithNoStore successfully', function(done) {
        //uncomment below and update the code to test detectImageUrlWithNoStore
        //instance.detectImageUrlWithNoStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectImageWithNoStore', function() {
      it('should call detectImageWithNoStore successfully', function(done) {
        //uncomment below and update the code to test detectImageWithNoStore
        //instance.detectImageWithNoStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
