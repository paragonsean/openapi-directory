/*
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomVisionError;
import java.io.File;
import org.openapitools.client.model.ImagePrediction;
import org.openapitools.client.model.ImageUrl;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagePredictionApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagePredictionApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagePredictionApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for classifyImage
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/classify/iterations/{publishedName}/image"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyImageValidateBeforeCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling classifyImage(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling classifyImage(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling classifyImage(Async)");
        }

        return classifyImageCall(projectId, publishedName, imageData, application, _callback);

    }

    /**
     * Classify an image and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction classifyImage(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = classifyImageWithHttpInfo(projectId, publishedName, imageData, application);
        return localVarResp.getData();
    }

    /**
     * Classify an image and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> classifyImageWithHttpInfo(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        okhttp3.Call localVarCall = classifyImageValidateBeforeCall(projectId, publishedName, imageData, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify an image and saves the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageAsync(UUID projectId, String publishedName, File imageData, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyImageValidateBeforeCall(projectId, publishedName, imageData, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyImageUrl
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageUrlCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/classify/iterations/{publishedName}/url"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyImageUrlValidateBeforeCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling classifyImageUrl(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling classifyImageUrl(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling classifyImageUrl(Async)");
        }

        return classifyImageUrlCall(projectId, publishedName, imageUrl, application, _callback);

    }

    /**
     * Classify an image url and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction classifyImageUrl(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = classifyImageUrlWithHttpInfo(projectId, publishedName, imageUrl, application);
        return localVarResp.getData();
    }

    /**
     * Classify an image url and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> classifyImageUrlWithHttpInfo(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        okhttp3.Call localVarCall = classifyImageUrlValidateBeforeCall(projectId, publishedName, imageUrl, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify an image url and saves the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageUrlAsync(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyImageUrlValidateBeforeCall(projectId, publishedName, imageUrl, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyImageUrlWithNoStore
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageUrlWithNoStoreCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/classify/iterations/{publishedName}/url/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyImageUrlWithNoStoreValidateBeforeCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling classifyImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling classifyImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling classifyImageUrlWithNoStore(Async)");
        }

        return classifyImageUrlWithNoStoreCall(projectId, publishedName, imageUrl, application, _callback);

    }

    /**
     * Classify an image url without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = classifyImageUrlWithNoStoreWithHttpInfo(projectId, publishedName, imageUrl, application);
        return localVarResp.getData();
    }

    /**
     * Classify an image url without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> classifyImageUrlWithNoStoreWithHttpInfo(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        okhttp3.Call localVarCall = classifyImageUrlWithNoStoreValidateBeforeCall(projectId, publishedName, imageUrl, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify an image url without saving the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyImageUrlWithNoStoreValidateBeforeCall(projectId, publishedName, imageUrl, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyImageWithNoStore
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageWithNoStoreCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/classify/iterations/{publishedName}/image/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyImageWithNoStoreValidateBeforeCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling classifyImageWithNoStore(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling classifyImageWithNoStore(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling classifyImageWithNoStore(Async)");
        }

        return classifyImageWithNoStoreCall(projectId, publishedName, imageData, application, _callback);

    }

    /**
     * Classify an image without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction classifyImageWithNoStore(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = classifyImageWithNoStoreWithHttpInfo(projectId, publishedName, imageData, application);
        return localVarResp.getData();
    }

    /**
     * Classify an image without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> classifyImageWithNoStoreWithHttpInfo(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        okhttp3.Call localVarCall = classifyImageWithNoStoreValidateBeforeCall(projectId, publishedName, imageData, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify an image without saving the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyImageWithNoStoreAsync(UUID projectId, String publishedName, File imageData, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyImageWithNoStoreValidateBeforeCall(projectId, publishedName, imageData, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectImage
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/detect/iterations/{publishedName}/image"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectImageValidateBeforeCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling detectImage(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling detectImage(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling detectImage(Async)");
        }

        return detectImageCall(projectId, publishedName, imageData, application, _callback);

    }

    /**
     * Detect objects in an image and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction detectImage(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = detectImageWithHttpInfo(projectId, publishedName, imageData, application);
        return localVarResp.getData();
    }

    /**
     * Detect objects in an image and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> detectImageWithHttpInfo(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        okhttp3.Call localVarCall = detectImageValidateBeforeCall(projectId, publishedName, imageData, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect objects in an image and saves the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageAsync(UUID projectId, String publishedName, File imageData, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectImageValidateBeforeCall(projectId, publishedName, imageData, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectImageUrl
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageUrlCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/detect/iterations/{publishedName}/url"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectImageUrlValidateBeforeCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling detectImageUrl(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling detectImageUrl(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling detectImageUrl(Async)");
        }

        return detectImageUrlCall(projectId, publishedName, imageUrl, application, _callback);

    }

    /**
     * Detect objects in an image url and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction detectImageUrl(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = detectImageUrlWithHttpInfo(projectId, publishedName, imageUrl, application);
        return localVarResp.getData();
    }

    /**
     * Detect objects in an image url and saves the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> detectImageUrlWithHttpInfo(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        okhttp3.Call localVarCall = detectImageUrlValidateBeforeCall(projectId, publishedName, imageUrl, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect objects in an image url and saves the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageUrlAsync(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectImageUrlValidateBeforeCall(projectId, publishedName, imageUrl, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectImageUrlWithNoStore
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageUrlWithNoStoreCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageUrl;

        // create path and map variables
        String localVarPath = "/{projectId}/detect/iterations/{publishedName}/url/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectImageUrlWithNoStoreValidateBeforeCall(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling detectImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling detectImageUrlWithNoStore(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling detectImageUrlWithNoStore(Async)");
        }

        return detectImageUrlWithNoStoreCall(projectId, publishedName, imageUrl, application, _callback);

    }

    /**
     * Detect objects in an image url without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction detectImageUrlWithNoStore(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = detectImageUrlWithNoStoreWithHttpInfo(projectId, publishedName, imageUrl, application);
        return localVarResp.getData();
    }

    /**
     * Detect objects in an image url without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> detectImageUrlWithNoStoreWithHttpInfo(UUID projectId, String publishedName, ImageUrl imageUrl, String application) throws ApiException {
        okhttp3.Call localVarCall = detectImageUrlWithNoStoreValidateBeforeCall(projectId, publishedName, imageUrl, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect objects in an image url without saving the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, ImageUrl imageUrl, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectImageUrlWithNoStoreValidateBeforeCall(projectId, publishedName, imageUrl, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectImageWithNoStore
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageWithNoStoreCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{projectId}/detect/iterations/{publishedName}/image/nostore"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "publishedName" + "}", localVarApiClient.escapeString(publishedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageData != null) {
            localVarFormParams.put("imageData", imageData);
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectImageWithNoStoreValidateBeforeCall(UUID projectId, String publishedName, File imageData, String application, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling detectImageWithNoStore(Async)");
        }

        // verify the required parameter 'publishedName' is set
        if (publishedName == null) {
            throw new ApiException("Missing the required parameter 'publishedName' when calling detectImageWithNoStore(Async)");
        }

        // verify the required parameter 'imageData' is set
        if (imageData == null) {
            throw new ApiException("Missing the required parameter 'imageData' when calling detectImageWithNoStore(Async)");
        }

        return detectImageWithNoStoreCall(projectId, publishedName, imageData, application, _callback);

    }

    /**
     * Detect objects in an image without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ImagePrediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ImagePrediction detectImageWithNoStore(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        ApiResponse<ImagePrediction> localVarResp = detectImageWithNoStoreWithHttpInfo(projectId, publishedName, imageData, application);
        return localVarResp.getData();
    }

    /**
     * Detect objects in an image without saving the result.
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @return ApiResponse&lt;ImagePrediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagePrediction> detectImageWithNoStoreWithHttpInfo(UUID projectId, String publishedName, File imageData, String application) throws ApiException {
        okhttp3.Call localVarCall = detectImageWithNoStoreValidateBeforeCall(projectId, publishedName, imageData, application, null);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect objects in an image without saving the result. (asynchronously)
     * 
     * @param projectId The project id. (required)
     * @param publishedName Specifies the name of the model to evaluate against. (required)
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. (required)
     * @param application Optional. Specifies the name of application using the endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectImageWithNoStoreAsync(UUID projectId, String publishedName, File imageData, String application, final ApiCallback<ImagePrediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectImageWithNoStoreValidateBeforeCall(projectId, publishedName, imageData, application, _callback);
        Type localVarReturnType = new TypeToken<ImagePrediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
