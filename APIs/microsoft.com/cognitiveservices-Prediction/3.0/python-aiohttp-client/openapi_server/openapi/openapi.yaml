openapi: 3.0.0
info:
  contact:
    x-twitter: microsoft
  title: Custom Vision Prediction Client
  version: "3.0"
  x-apisguru-categories:
  - developer_tools
  - cloud
  x-logo:
    url: https://twitter.com/microsoft/profile_image?size=original
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/CustomVision/Prediction/stable/v3.0/Prediction.json
    version: "3.0"
  x-preferred: true
  x-providerName: microsoft.com
  x-serviceName: cognitiveservices-Prediction
  x-tags:
  - Microsoft
servers:
- url: https://southcentralus.api.cognitive.microsoft.com/customvision/v3.0/prediction
- url: "{Endpoint}/customvision/v3.0/prediction"
  variables:
    Endpoint:
      default: none
      description: Supported Cognitive Services endpoints.
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
security:
- apim_key: []
paths:
  /{projectId}/classify/iterations/{publishedName}/image:
    post:
      operationId: classify_image
      parameters:
      - description: The project id.
        examples:
          Successful ClassifyImage request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful ClassifyImage request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ClassifyImage'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful ClassifyImage request:
                  $ref: '#/components/examples/Successful_ClassifyImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful ClassifyImage request:
                  $ref: '#/components/examples/Successful_ClassifyImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful ClassifyImage request:
                  $ref: '#/components/examples/Successful_ClassifyImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Classify an image and saves the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/classify/iterations/{publishedName}/image/nostore:
    post:
      operationId: classify_image_with_no_store
      parameters:
      - description: The project id.
        examples:
          Successful ClassifyImageWithNoStore request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful ClassifyImageWithNoStore request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ClassifyImageWithNoStore'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful ClassifyImageWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful ClassifyImageWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful ClassifyImageWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Classify an image without saving the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/classify/iterations/{publishedName}/url:
    post:
      operationId: classify_image_url
      parameters:
      - description: The project id.
        examples:
          Successful ClassifyImageUrl request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful ClassifyImageUrl request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ImageUrl2'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful ClassifyImageUrl request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful ClassifyImageUrl request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful ClassifyImageUrl request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Classify an image url and saves the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/classify/iterations/{publishedName}/url/nostore:
    post:
      operationId: classify_image_url_with_no_store
      parameters:
      - description: The project id.
        examples:
          Successful ClassifyImageUrlWithNoStore request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful ClassifyImageUrlWithNoStore request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ImageUrl'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful ClassifyImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful ClassifyImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful ClassifyImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_ClassifyImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Classify an image url without saving the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/detect/iterations/{publishedName}/image:
    post:
      operationId: detect_image
      parameters:
      - description: The project id.
        examples:
          Successful DetectImage request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful DetectImage request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ClassifyImage'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful DetectImage request:
                  $ref: '#/components/examples/Successful_DetectImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful DetectImage request:
                  $ref: '#/components/examples/Successful_DetectImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful DetectImage request:
                  $ref: '#/components/examples/Successful_DetectImage_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Detect objects in an image and saves the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/detect/iterations/{publishedName}/image/nostore:
    post:
      operationId: detect_image_with_no_store
      parameters:
      - description: The project id.
        examples:
          Successful DetectImageWithNoStore request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful DetectImageWithNoStore request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ClassifyImageWithNoStore'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful DetectImageWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful DetectImageWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful DetectImageWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Detect objects in an image without saving the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/detect/iterations/{publishedName}/url:
    post:
      operationId: detect_image_url
      parameters:
      - description: The project id.
        examples:
          Successful DetectImageUrl request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful DetectImageUrl request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ImageUrl2'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful DetectImageUrl request:
                  $ref: '#/components/examples/Successful_DetectImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful DetectImageUrl request:
                  $ref: '#/components/examples/Successful_DetectImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful DetectImageUrl request:
                  $ref: '#/components/examples/Successful_DetectImageUrl_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Detect objects in an image url and saves the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
  /{projectId}/detect/iterations/{publishedName}/url/nostore:
    post:
      operationId: detect_image_url_with_no_store
      parameters:
      - description: The project id.
        examples:
          Successful DetectImageUrlWithNoStore request:
            value: 64b822c5-8082-4b36-a426-27225f4aa18c
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
        x-nullable: false
      - description: Specifies the name of the model to evaluate against.
        examples:
          Successful DetectImageUrlWithNoStore request:
            value: MyModel1
        explode: false
        in: path
        name: publishedName
        required: true
        schema:
          type: string
        style: simple
      - description: Optional. Specifies the name of application using the endpoint.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
        x-nullable: true
      requestBody:
        $ref: '#/components/requestBodies/ImageUrl'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful DetectImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            application/xml:
              examples:
                Successful DetectImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
            text/xml:
              examples:
                Successful DetectImageUrlWithNoStore request:
                  $ref: '#/components/examples/Successful_DetectImageUrlWithNoStore_request'
              schema:
                $ref: '#/components/schemas/ImagePrediction'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
            text/xml:
              schema:
                $ref: '#/components/schemas/CustomVisionError'
          description: Error response
      summary: Detect objects in an image url without saving the result.
      tags:
      - ImagePredictionApi
      x-openapi-router-controller: openapi_server.controllers.image_prediction_api_controller
      x-codegen-request-body-name: body
components:
  examples:
    Successful_ClassifyImageUrlWithNoStore_request:
      value:
        created: 2019-03-06T02:15:00Z
        id: 951098b2-9b69-427b-bddb-d5cb618874e3
        iteration: fe1e83c4-6f50-4899-9544-6bb08cf0e15a
        predictions:
        - probability: 0.05149666
          tagId: e31ff107-5505-4753-be42-b369b21b026c
          tagName: Hemlock
        - probability: 1.93528482E-4
          tagId: 349d72ac-0948-4d51-b1e4-c14a1f9b848a
          tagName: Japanese Cherry
        project: 64b822c5-8082-4b36-a426-27225f4aa18c
    Successful_ClassifyImageUrl_request:
      value:
        created: 2019-03-06T02:15:00Z
        id: 951098b2-9b69-427b-bddb-d5cb618874e3
        iteration: fe1e83c4-6f50-4899-9544-6bb08cf0e15a
        predictions:
        - probability: 0.05149666
          tagId: e31ff107-5505-4753-be42-b369b21b026c
          tagName: Hemlock
        - probability: 1.93528482E-4
          tagId: 349d72ac-0948-4d51-b1e4-c14a1f9b848a
          tagName: Japanese Cherry
        project: 64b822c5-8082-4b36-a426-27225f4aa18c
    Successful_ClassifyImageWithNoStore_request:
      value:
        created: 2019-03-06T02:15:00Z
        id: 951098b2-9b69-427b-bddb-d5cb618874e3
        iteration: fe1e83c4-6f50-4899-9544-6bb08cf0e15a
        predictions:
        - probability: 0.05149666
          tagId: e31ff107-5505-4753-be42-b369b21b026c
          tagName: Hemlock
        - probability: 1.93528482E-4
          tagId: 349d72ac-0948-4d51-b1e4-c14a1f9b848a
          tagName: Japanese Cherry
        project: 64b822c5-8082-4b36-a426-27225f4aa18c
    Successful_ClassifyImage_request:
      value:
        created: 2019-03-06T02:15:00Z
        id: 951098b2-9b69-427b-bddb-d5cb618874e3
        iteration: fe1e83c4-6f50-4899-9544-6bb08cf0e15a
        predictions:
        - probability: 0.05149666
          tagId: e31ff107-5505-4753-be42-b369b21b026c
          tagName: Hemlock
        - probability: 1.93528482E-4
          tagId: 349d72ac-0948-4d51-b1e4-c14a1f9b848a
          tagName: Japanese Cherry
        project: 64b822c5-8082-4b36-a426-27225f4aa18c
    Successful_DetectImageUrlWithNoStore_request:
      value:
        created: 2019-03-10T06:10:28Z
        id: 64615ba1-b53f-e911-b05b-f8633f7a2ef1
        iteration: 45c79472-7198-46e1-8ed7-bad2ca111957
        predictions:
        - boundingBox:
            height: 0.156851858
            left: 0.955476165
            top: 0
            width: 0.0412225723
          probability: 0.05149666
          tagId: 7e703b80-3c7a-4c3c-bf48-9673c6891a75
          tagName: Tag 1
        - boundingBox:
            height: 0.6830492
            left: 0.062178582
            top: 0
            width: 0.9378114
          probability: 1.93528482E-4
          tagId: a0d06a54-18e4-4787-a9f9-27a9c13a91e8
          tagName: Tag 2
        project: fb5bc587-b53f-e911-b05b-f8633f7a2ef1
    Successful_DetectImageUrl_request:
      value:
        created: 2019-03-10T06:10:28Z
        id: 64615ba1-b53f-e911-b05b-f8633f7a2ef1
        iteration: 45c79472-7198-46e1-8ed7-bad2ca111957
        predictions:
        - boundingBox:
            height: 0.156851858
            left: 0.955476165
            top: 0
            width: 0.0412225723
          probability: 0.05149666
          tagId: 7e703b80-3c7a-4c3c-bf48-9673c6891a75
          tagName: Tag 1
        - boundingBox:
            height: 0.6830492
            left: 0.062178582
            top: 0
            width: 0.9378114
          probability: 1.93528482E-4
          tagId: a0d06a54-18e4-4787-a9f9-27a9c13a91e8
          tagName: Tag 2
        project: fb5bc587-b53f-e911-b05b-f8633f7a2ef1
    Successful_DetectImageWithNoStore_request:
      value:
        created: 2019-03-10T06:10:28Z
        id: 64615ba1-b53f-e911-b05b-f8633f7a2ef1
        iteration: 45c79472-7198-46e1-8ed7-bad2ca111957
        predictions:
        - boundingBox:
            height: 0.156851858
            left: 0.955476165
            top: 0
            width: 0.0412225723
          probability: 0.05149666
          tagId: 7e703b80-3c7a-4c3c-bf48-9673c6891a75
          tagName: Tag 1
        - boundingBox:
            height: 0.6830492
            left: 0.062178582
            top: 0
            width: 0.9378114
          probability: 1.93528482E-4
          tagId: a0d06a54-18e4-4787-a9f9-27a9c13a91e8
          tagName: Tag 2
        project: fb5bc587-b53f-e911-b05b-f8633f7a2ef1
    Successful_DetectImage_request:
      value:
        created: 2019-03-10T06:10:28Z
        id: 64615ba1-b53f-e911-b05b-f8633f7a2ef1
        iteration: 45c79472-7198-46e1-8ed7-bad2ca111957
        predictions:
        - boundingBox:
            height: 0.156851858
            left: 0.955476165
            top: 0
            width: 0.0412225723
          probability: 0.05149666
          tagId: 7e703b80-3c7a-4c3c-bf48-9673c6891a75
          tagName: Tag 1
        - boundingBox:
            height: 0.6830492
            left: 0.062178582
            top: 0
            width: 0.9378114
          probability: 1.93528482E-4
          tagId: a0d06a54-18e4-4787-a9f9-27a9c13a91e8
          tagName: Tag 2
        project: fb5bc587-b53f-e911-b05b-f8633f7a2ef1
  parameters:
    Endpoint:
      description: Supported Cognitive Services endpoints.
      explode: false
      in: path
      name: Endpoint
      required: true
      schema:
        type: string
      style: simple
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
  requestBodies:
    ClassifyImage:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/ClassifyImage_request'
      required: true
    ClassifyImageWithNoStore:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/ClassifyImageWithNoStore_request'
      required: true
    ImageUrl:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        text/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
      description: "An {Iris.Web.Api.Models.ImageUrl} that contains the url of the\
        \ image to be evaluated."
      required: true
    ImageUrl2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
        text/xml:
          schema:
            $ref: '#/components/schemas/ImageUrl'
      description: An ImageUrl that contains the url of the image to be evaluated.
      required: true
  schemas:
    BoundingBox:
      description: Bounding box that defines a region of an image.
      example:
        top: 1.4658129
        left: 6.0274563
        width: 5.962134
        height: 0.8008282
      properties:
        height:
          description: Height.
          format: float
          nullable: false
          readOnly: false
          title: height
          type: number
        left:
          description: Coordinate of the left boundary.
          format: float
          nullable: false
          readOnly: false
          title: left
          type: number
        top:
          description: Coordinate of the top boundary.
          format: float
          nullable: false
          readOnly: false
          title: top
          type: number
        width:
          description: Width.
          format: float
          nullable: false
          readOnly: false
          title: width
          type: number
      required:
      - height
      - left
      - top
      - width
      title: BoundingBox
      type: object
    CustomVisionError:
      example:
        code: NoError
        message: message
      properties:
        code:
          description: The error code.
          enum:
          - NoError
          - BadRequest
          - BadRequestExceededBatchSize
          - BadRequestNotSupported
          - BadRequestInvalidIds
          - BadRequestProjectName
          - BadRequestProjectNameNotUnique
          - BadRequestProjectDescription
          - BadRequestProjectUnknownDomain
          - BadRequestProjectUnknownClassification
          - BadRequestProjectUnsupportedDomainTypeChange
          - BadRequestProjectUnsupportedExportPlatform
          - BadRequestIterationName
          - BadRequestIterationNameNotUnique
          - BadRequestIterationDescription
          - BadRequestIterationIsNotTrained
          - BadRequestWorkspaceCannotBeModified
          - BadRequestWorkspaceNotDeletable
          - BadRequestTagName
          - BadRequestTagNameNotUnique
          - BadRequestTagDescription
          - BadRequestTagType
          - BadRequestMultipleNegativeTag
          - BadRequestImageTags
          - BadRequestImageRegions
          - BadRequestNegativeAndRegularTagOnSameImage
          - BadRequestRequiredParamIsNull
          - BadRequestIterationIsPublished
          - BadRequestInvalidPublishName
          - BadRequestInvalidPublishTarget
          - BadRequestUnpublishFailed
          - BadRequestSubscriptionApi
          - BadRequestExceedProjectLimit
          - BadRequestExceedIterationPerProjectLimit
          - BadRequestExceedTagPerProjectLimit
          - BadRequestExceedTagPerImageLimit
          - BadRequestExceededQuota
          - BadRequestCannotMigrateProjectWithName
          - BadRequestNotLimitedTrial
          - BadRequestImageBatch
          - BadRequestImageStream
          - BadRequestImageUrl
          - BadRequestImageFormat
          - BadRequestImageSizeBytes
          - BadRequestImageExceededCount
          - BadRequestTrainingNotNeeded
          - BadRequestTrainingNotNeededButTrainingPipelineUpdated
          - BadRequestTrainingValidationFailed
          - BadRequestClassificationTrainingValidationFailed
          - BadRequestMultiClassClassificationTrainingValidationFailed
          - BadRequestMultiLabelClassificationTrainingValidationFailed
          - BadRequestDetectionTrainingValidationFailed
          - BadRequestTrainingAlreadyInProgress
          - BadRequestDetectionTrainingNotAllowNegativeTag
          - BadRequestInvalidEmailAddress
          - BadRequestDomainNotSupportedForAdvancedTraining
          - BadRequestExportPlatformNotSupportedForAdvancedTraining
          - BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining
          - BadRequestExportValidationFailed
          - BadRequestExportAlreadyInProgress
          - BadRequestPredictionIdsMissing
          - BadRequestPredictionIdsExceededCount
          - BadRequestPredictionTagsExceededCount
          - BadRequestPredictionResultsExceededCount
          - BadRequestPredictionInvalidApplicationName
          - BadRequestPredictionInvalidQueryParameters
          - BadRequestInvalid
          - UnsupportedMediaType
          - Forbidden
          - ForbiddenUser
          - ForbiddenUserResource
          - ForbiddenUserSignupDisabled
          - ForbiddenUserSignupAllowanceExceeded
          - ForbiddenUserDoesNotExist
          - ForbiddenUserDisabled
          - ForbiddenUserInsufficientCapability
          - ForbiddenDRModeEnabled
          - ForbiddenInvalid
          - NotFound
          - NotFoundProject
          - NotFoundProjectDefaultIteration
          - NotFoundIteration
          - NotFoundIterationPerformance
          - NotFoundTag
          - NotFoundImage
          - NotFoundDomain
          - NotFoundApimSubscription
          - NotFoundInvalid
          - Conflict
          - ConflictInvalid
          - ErrorUnknown
          - ErrorProjectInvalidWorkspace
          - ErrorProjectInvalidPipelineConfiguration
          - ErrorProjectInvalidDomain
          - ErrorProjectTrainingRequestFailed
          - ErrorProjectExportRequestFailed
          - ErrorFeaturizationServiceUnavailable
          - ErrorFeaturizationQueueTimeout
          - ErrorFeaturizationInvalidFeaturizer
          - ErrorFeaturizationAugmentationUnavailable
          - ErrorFeaturizationUnrecognizedJob
          - ErrorFeaturizationAugmentationError
          - ErrorExporterInvalidPlatform
          - ErrorExporterInvalidFeaturizer
          - ErrorExporterInvalidClassifier
          - ErrorPredictionServiceUnavailable
          - ErrorPredictionModelNotFound
          - ErrorPredictionModelNotCached
          - ErrorPrediction
          - ErrorPredictionStorage
          - ErrorRegionProposal
          - ErrorInvalid
          title: code
          type: string
          x-ms-enum:
            modelAsString: true
            name: CustomVisionErrorCodes
        message:
          description: A message explaining the error reported by the service.
          title: message
          type: string
      required:
      - code
      - message
      title: CustomVisionError
      type: object
    ImagePrediction:
      description: Result of an image prediction request.
      example:
        created: 2000-01-23T04:56:07.000+00:00
        iteration: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        project: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        predictions:
        - boundingBox:
            top: 1.4658129
            left: 6.0274563
            width: 5.962134
            height: 0.8008282
          tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          probability: 5.637377
          tagName: tagName
        - boundingBox:
            top: 1.4658129
            left: 6.0274563
            width: 5.962134
            height: 0.8008282
          tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          probability: 5.637377
          tagName: tagName
      properties:
        created:
          description: Date this prediction was created.
          format: date-time
          nullable: false
          readOnly: true
          title: created
          type: string
        id:
          description: Prediction Id.
          format: uuid
          nullable: false
          readOnly: true
          title: id
          type: string
        iteration:
          description: Iteration Id.
          format: uuid
          nullable: false
          readOnly: true
          title: iteration
          type: string
        predictions:
          description: List of predictions.
          items:
            $ref: '#/components/schemas/Prediction'
          readOnly: true
          title: predictions
          type: array
        project:
          description: Project Id.
          format: uuid
          nullable: false
          readOnly: true
          title: project
          type: string
      title: ImagePrediction
      type: object
    ImageUrl:
      description: Image url.
      example:
        url: url
      properties:
        url:
          description: Url of the image.
          nullable: false
          readOnly: false
          title: url
          type: string
      required:
      - url
      title: ImageUrl
      type: object
    Prediction:
      description: Prediction result.
      example:
        boundingBox:
          top: 1.4658129
          left: 6.0274563
          width: 5.962134
          height: 0.8008282
        tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        probability: 5.637377
        tagName: tagName
      properties:
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
        probability:
          description: Probability of the tag.
          format: float
          nullable: false
          readOnly: true
          title: probability
          type: number
        tagId:
          description: Id of the predicted tag.
          format: uuid
          nullable: false
          readOnly: true
          title: tagId
          type: string
        tagName:
          description: Name of the predicted tag.
          nullable: true
          readOnly: true
          title: tagName
          type: string
      title: Prediction
      type: object
    ClassifyImage_request:
      properties:
        imageData:
          description: "Binary image data. Supported formats are JPEG, GIF, PNG, and\
            \ BMP. Supports images up to 4MB."
          format: binary
          type: string
      required:
      - imageData
      type: object
    ClassifyImageWithNoStore_request:
      properties:
        imageData:
          description: "Binary image data. Supported formats are JPEG, GIF, PNG, and\
            \ BMP. Supports images up to 0MB."
          format: binary
          type: string
      required:
      - imageData
      type: object
  securitySchemes:
    apim_key:
      in: header
      name: Prediction-Key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_apim_key
