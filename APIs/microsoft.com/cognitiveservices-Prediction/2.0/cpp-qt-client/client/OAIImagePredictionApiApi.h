/**
 * Custom Vision Prediction Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagePredictionApiApi_H
#define OAI_OAIImagePredictionApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIImagePrediction.h"
#include "OAIImageUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagePredictionApiApi : public QObject {
    Q_OBJECT

public:
    OAIImagePredictionApiApi(const int timeOut = 0);
    ~OAIImagePredictionApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  prediction_key QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  application QString [optional]
    */
    virtual void predictImage(const QString &project_id, const QString &prediction_key, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  prediction_key QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  application QString [optional]
    */
    virtual void predictImageUrl(const QString &project_id, const QString &prediction_key, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  prediction_key QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  application QString [optional]
    */
    virtual void predictImageUrlWithNoStore(const QString &project_id, const QString &prediction_key, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  prediction_key QString [required]
    * @param[in]  image_data OAIHttpFileElement [required]
    * @param[in]  iteration_id QString [optional]
    * @param[in]  application QString [optional]
    */
    virtual void predictImageWithNoStore(const QString &project_id, const QString &prediction_key, const OAIHttpFileElement &image_data, const ::OpenAPI::OptionalParam<QString> &iteration_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &application = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void predictImageCallback(OAIHttpRequestWorker *worker);
    void predictImageUrlCallback(OAIHttpRequestWorker *worker);
    void predictImageUrlWithNoStoreCallback(OAIHttpRequestWorker *worker);
    void predictImageWithNoStoreCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void predictImageSignal(OAIImagePrediction summary);
    void predictImageUrlSignal(OAIImagePrediction summary);
    void predictImageUrlWithNoStoreSignal(OAIImagePrediction summary);
    void predictImageWithNoStoreSignal(OAIImagePrediction summary);


    void predictImageSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void predictImageUrlSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void predictImageUrlWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);
    void predictImageWithNoStoreSignalFull(OAIHttpRequestWorker *worker, OAIImagePrediction summary);

    Q_DECL_DEPRECATED_X("Use predictImageSignalError() instead")
    void predictImageSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageUrlSignalError() instead")
    void predictImageUrlSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageUrlSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageUrlWithNoStoreSignalError() instead")
    void predictImageUrlWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageUrlWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageWithNoStoreSignalError() instead")
    void predictImageWithNoStoreSignalE(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageWithNoStoreSignalError(OAIImagePrediction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use predictImageSignalErrorFull() instead")
    void predictImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageUrlSignalErrorFull() instead")
    void predictImageUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageUrlWithNoStoreSignalErrorFull() instead")
    void predictImageUrlWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageUrlWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictImageWithNoStoreSignalErrorFull() instead")
    void predictImageWithNoStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictImageWithNoStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
