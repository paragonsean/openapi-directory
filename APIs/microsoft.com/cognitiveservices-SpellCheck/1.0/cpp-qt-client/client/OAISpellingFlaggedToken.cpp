/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellingFlaggedToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellingFlaggedToken::OAISpellingFlaggedToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellingFlaggedToken::OAISpellingFlaggedToken() {
    this->initializeModel();
}

OAISpellingFlaggedToken::~OAISpellingFlaggedToken() {}

void OAISpellingFlaggedToken::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_ping_url_suffix_isSet = false;
    m_ping_url_suffix_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpellingFlaggedToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellingFlaggedToken::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_ping_url_suffix_isValid = ::OpenAPI::fromJsonValue(m_ping_url_suffix, json[QString("pingUrlSuffix")]);
    m_ping_url_suffix_isSet = !json[QString("pingUrlSuffix")].isNull() && m_ping_url_suffix_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("suggestions")]);
    m_suggestions_isSet = !json[QString("suggestions")].isNull() && m_suggestions_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpellingFlaggedToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellingFlaggedToken::asJsonObject() const {
    QJsonObject obj;
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_ping_url_suffix_isSet) {
        obj.insert(QString("pingUrlSuffix"), ::OpenAPI::toJsonValue(m_ping_url_suffix));
    }
    if (m_suggestions.size() > 0) {
        obj.insert(QString("suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAISpellingFlaggedToken::getOffset() const {
    return m_offset;
}
void OAISpellingFlaggedToken::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISpellingFlaggedToken::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISpellingFlaggedToken::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAISpellingFlaggedToken::getPingUrlSuffix() const {
    return m_ping_url_suffix;
}
void OAISpellingFlaggedToken::setPingUrlSuffix(const QString &ping_url_suffix) {
    m_ping_url_suffix = ping_url_suffix;
    m_ping_url_suffix_isSet = true;
}

bool OAISpellingFlaggedToken::is_ping_url_suffix_Set() const{
    return m_ping_url_suffix_isSet;
}

bool OAISpellingFlaggedToken::is_ping_url_suffix_Valid() const{
    return m_ping_url_suffix_isValid;
}

QList<OAISpellingTokenSuggestion> OAISpellingFlaggedToken::getSuggestions() const {
    return m_suggestions;
}
void OAISpellingFlaggedToken::setSuggestions(const QList<OAISpellingTokenSuggestion> &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAISpellingFlaggedToken::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAISpellingFlaggedToken::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

QString OAISpellingFlaggedToken::getToken() const {
    return m_token;
}
void OAISpellingFlaggedToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISpellingFlaggedToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAISpellingFlaggedToken::is_token_Valid() const{
    return m_token_isValid;
}

QString OAISpellingFlaggedToken::getType() const {
    return m_type;
}
void OAISpellingFlaggedToken::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpellingFlaggedToken::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpellingFlaggedToken::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpellingFlaggedToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_url_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellingFlaggedToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offset_isValid && m_token_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
