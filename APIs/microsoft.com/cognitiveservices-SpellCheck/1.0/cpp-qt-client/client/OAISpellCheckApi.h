/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpellCheckApi_H
#define OAI_OAISpellCheckApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAISpellCheck.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpellCheckApi : public QObject {
    Q_OBJECT

public:
    OAISpellCheckApi(const int timeOut = 0);
    ~OAISpellCheckApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_bing_apis_sdk QString [required]
    * @param[in]  text QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  pragma QString [optional]
    * @param[in]  user_agent QString [optional]
    * @param[in]  x_ms_edge_client_id QString [optional]
    * @param[in]  x_ms_edge_client_ip QString [optional]
    * @param[in]  x_search_location QString [optional]
    * @param[in]  action_type QString [optional]
    * @param[in]  app_name QString [optional]
    * @param[in]  cc QString [optional]
    * @param[in]  client_machine_name QString [optional]
    * @param[in]  doc_id QString [optional]
    * @param[in]  mkt QString [optional]
    * @param[in]  session_id QString [optional]
    * @param[in]  set_lang QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  mode QString [optional]
    * @param[in]  pre_context_text QString [optional]
    * @param[in]  post_context_text QString [optional]
    */
    virtual void spellChecker(const QString &x_bing_apis_sdk, const QString &text, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pragma = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_search_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_machine_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doc_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mkt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &set_lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_context_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_context_text = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void spellCheckerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void spellCheckerSignal(OAISpellCheck summary);


    void spellCheckerSignalFull(OAIHttpRequestWorker *worker, OAISpellCheck summary);

    Q_DECL_DEPRECATED_X("Use spellCheckerSignalError() instead")
    void spellCheckerSignalE(OAISpellCheck summary, QNetworkReply::NetworkError error_type, QString error_str);
    void spellCheckerSignalError(OAISpellCheck summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use spellCheckerSignalErrorFull() instead")
    void spellCheckerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spellCheckerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
