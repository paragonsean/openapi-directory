/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpellingTokenSuggestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpellingTokenSuggestion::OAISpellingTokenSuggestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpellingTokenSuggestion::OAISpellingTokenSuggestion() {
    this->initializeModel();
}

OAISpellingTokenSuggestion::~OAISpellingTokenSuggestion() {}

void OAISpellingTokenSuggestion::initializeModel() {

    m_ping_url_suffix_isSet = false;
    m_ping_url_suffix_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_suggestion_isSet = false;
    m_suggestion_isValid = false;
}

void OAISpellingTokenSuggestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpellingTokenSuggestion::fromJsonObject(QJsonObject json) {

    m_ping_url_suffix_isValid = ::OpenAPI::fromJsonValue(m_ping_url_suffix, json[QString("pingUrlSuffix")]);
    m_ping_url_suffix_isSet = !json[QString("pingUrlSuffix")].isNull() && m_ping_url_suffix_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_suggestion_isValid = ::OpenAPI::fromJsonValue(m_suggestion, json[QString("suggestion")]);
    m_suggestion_isSet = !json[QString("suggestion")].isNull() && m_suggestion_isValid;
}

QString OAISpellingTokenSuggestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpellingTokenSuggestion::asJsonObject() const {
    QJsonObject obj;
    if (m_ping_url_suffix_isSet) {
        obj.insert(QString("pingUrlSuffix"), ::OpenAPI::toJsonValue(m_ping_url_suffix));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_suggestion_isSet) {
        obj.insert(QString("suggestion"), ::OpenAPI::toJsonValue(m_suggestion));
    }
    return obj;
}

QString OAISpellingTokenSuggestion::getPingUrlSuffix() const {
    return m_ping_url_suffix;
}
void OAISpellingTokenSuggestion::setPingUrlSuffix(const QString &ping_url_suffix) {
    m_ping_url_suffix = ping_url_suffix;
    m_ping_url_suffix_isSet = true;
}

bool OAISpellingTokenSuggestion::is_ping_url_suffix_Set() const{
    return m_ping_url_suffix_isSet;
}

bool OAISpellingTokenSuggestion::is_ping_url_suffix_Valid() const{
    return m_ping_url_suffix_isValid;
}

double OAISpellingTokenSuggestion::getScore() const {
    return m_score;
}
void OAISpellingTokenSuggestion::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISpellingTokenSuggestion::is_score_Set() const{
    return m_score_isSet;
}

bool OAISpellingTokenSuggestion::is_score_Valid() const{
    return m_score_isValid;
}

QString OAISpellingTokenSuggestion::getSuggestion() const {
    return m_suggestion;
}
void OAISpellingTokenSuggestion::setSuggestion(const QString &suggestion) {
    m_suggestion = suggestion;
    m_suggestion_isSet = true;
}

bool OAISpellingTokenSuggestion::is_suggestion_Set() const{
    return m_suggestion_isSet;
}

bool OAISpellingTokenSuggestion::is_suggestion_Valid() const{
    return m_suggestion_isValid;
}

bool OAISpellingTokenSuggestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ping_url_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpellingTokenSuggestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_suggestion_isValid && true;
}

} // namespace OpenAPI
