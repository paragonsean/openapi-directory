/*
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SpellingTokenSuggestion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpellingFlaggedToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:43.767281-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpellingFlaggedToken {
  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PING_URL_SUFFIX = "pingUrlSuffix";
  @SerializedName(SERIALIZED_NAME_PING_URL_SUFFIX)
  private String pingUrlSuffix;

  public static final String SERIALIZED_NAME_SUGGESTIONS = "suggestions";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS)
  private List<SpellingTokenSuggestion> suggestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN_TOKEN("UnknownToken"),
    
    REPEATED_TOKEN("RepeatedToken");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.UNKNOWN_TOKEN;

  public SpellingFlaggedToken() {
  }

  public SpellingFlaggedToken(
     String pingUrlSuffix, 
     List<SpellingTokenSuggestion> suggestions
  ) {
    this();
    this.pingUrlSuffix = pingUrlSuffix;
    this.suggestions = suggestions;
  }

  public SpellingFlaggedToken offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nonnull
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  /**
   * Get pingUrlSuffix
   * @return pingUrlSuffix
   */
  @javax.annotation.Nullable
  public String getPingUrlSuffix() {
    return pingUrlSuffix;
  }



  /**
   * Get suggestions
   * @return suggestions
   */
  @javax.annotation.Nullable
  public List<SpellingTokenSuggestion> getSuggestions() {
    return suggestions;
  }



  public SpellingFlaggedToken token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nonnull
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public SpellingFlaggedToken type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpellingFlaggedToken spellingFlaggedToken = (SpellingFlaggedToken) o;
    return Objects.equals(this.offset, spellingFlaggedToken.offset) &&
        Objects.equals(this.pingUrlSuffix, spellingFlaggedToken.pingUrlSuffix) &&
        Objects.equals(this.suggestions, spellingFlaggedToken.suggestions) &&
        Objects.equals(this.token, spellingFlaggedToken.token) &&
        Objects.equals(this.type, spellingFlaggedToken.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offset, pingUrlSuffix, suggestions, token, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpellingFlaggedToken {\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    pingUrlSuffix: ").append(toIndentedString(pingUrlSuffix)).append("\n");
    sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offset");
    openapiFields.add("pingUrlSuffix");
    openapiFields.add("suggestions");
    openapiFields.add("token");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("offset");
    openapiRequiredFields.add("token");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpellingFlaggedToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpellingFlaggedToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpellingFlaggedToken is not found in the empty JSON string", SpellingFlaggedToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpellingFlaggedToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpellingFlaggedToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpellingFlaggedToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pingUrlSuffix") != null && !jsonObj.get("pingUrlSuffix").isJsonNull()) && !jsonObj.get("pingUrlSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingUrlSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingUrlSuffix").toString()));
      }
      if (jsonObj.get("suggestions") != null && !jsonObj.get("suggestions").isJsonNull()) {
        JsonArray jsonArraysuggestions = jsonObj.getAsJsonArray("suggestions");
        if (jsonArraysuggestions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestions` to be an array in the JSON string but got `%s`", jsonObj.get("suggestions").toString()));
          }

          // validate the optional field `suggestions` (array)
          for (int i = 0; i < jsonArraysuggestions.size(); i++) {
            SpellingTokenSuggestion.validateJsonElement(jsonArraysuggestions.get(i));
          };
        }
      }
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpellingFlaggedToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpellingFlaggedToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpellingFlaggedToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpellingFlaggedToken.class));

       return (TypeAdapter<T>) new TypeAdapter<SpellingFlaggedToken>() {
           @Override
           public void write(JsonWriter out, SpellingFlaggedToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpellingFlaggedToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpellingFlaggedToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpellingFlaggedToken
   * @throws IOException if the JSON string is invalid with respect to SpellingFlaggedToken
   */
  public static SpellingFlaggedToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpellingFlaggedToken.class);
  }

  /**
   * Convert an instance of SpellingFlaggedToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

