/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpellingTokenSuggestion from './SpellingTokenSuggestion';

/**
 * The SpellingFlaggedToken model module.
 * @module model/SpellingFlaggedToken
 * @version 1.0
 */
class SpellingFlaggedToken {
    /**
     * Constructs a new <code>SpellingFlaggedToken</code>.
     * @alias module:model/SpellingFlaggedToken
     * @param offset {Number} 
     * @param token {String} 
     * @param type {module:model/SpellingFlaggedToken.TypeEnum} 
     */
    constructor(offset, token, type) { 
        
        SpellingFlaggedToken.initialize(this, offset, token, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, offset, token, type) { 
        obj['offset'] = offset;
        obj['token'] = token;
        obj['type'] = type || 'UnknownToken';
    }

    /**
     * Constructs a <code>SpellingFlaggedToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpellingFlaggedToken} obj Optional instance to populate.
     * @return {module:model/SpellingFlaggedToken} The populated <code>SpellingFlaggedToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpellingFlaggedToken();

            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('pingUrlSuffix')) {
                obj['pingUrlSuffix'] = ApiClient.convertToType(data['pingUrlSuffix'], 'String');
            }
            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = ApiClient.convertToType(data['suggestions'], [SpellingTokenSuggestion]);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpellingFlaggedToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpellingFlaggedToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SpellingFlaggedToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pingUrlSuffix'] && !(typeof data['pingUrlSuffix'] === 'string' || data['pingUrlSuffix'] instanceof String)) {
            throw new Error("Expected the field `pingUrlSuffix` to be a primitive type in the JSON string but got " + data['pingUrlSuffix']);
        }
        if (data['suggestions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['suggestions'])) {
                throw new Error("Expected the field `suggestions` to be an array in the JSON data but got " + data['suggestions']);
            }
            // validate the optional field `suggestions` (array)
            for (const item of data['suggestions']) {
                SpellingTokenSuggestion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SpellingFlaggedToken.RequiredProperties = ["offset", "token", "type"];

/**
 * @member {Number} offset
 */
SpellingFlaggedToken.prototype['offset'] = undefined;

/**
 * @member {String} pingUrlSuffix
 */
SpellingFlaggedToken.prototype['pingUrlSuffix'] = undefined;

/**
 * @member {Array.<module:model/SpellingTokenSuggestion>} suggestions
 */
SpellingFlaggedToken.prototype['suggestions'] = undefined;

/**
 * @member {String} token
 */
SpellingFlaggedToken.prototype['token'] = undefined;

/**
 * @member {module:model/SpellingFlaggedToken.TypeEnum} type
 * @default 'UnknownToken'
 */
SpellingFlaggedToken.prototype['type'] = 'UnknownToken';





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SpellingFlaggedToken['TypeEnum'] = {

    /**
     * value: "UnknownToken"
     * @const
     */
    "UnknownToken": "UnknownToken",

    /**
     * value: "RepeatedToken"
     * @const
     */
    "RepeatedToken": "RepeatedToken"
};



export default SpellingFlaggedToken;

