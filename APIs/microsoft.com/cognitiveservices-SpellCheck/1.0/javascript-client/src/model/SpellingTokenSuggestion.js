/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpellingTokenSuggestion model module.
 * @module model/SpellingTokenSuggestion
 * @version 1.0
 */
class SpellingTokenSuggestion {
    /**
     * Constructs a new <code>SpellingTokenSuggestion</code>.
     * @alias module:model/SpellingTokenSuggestion
     * @param suggestion {String} 
     */
    constructor(suggestion) { 
        
        SpellingTokenSuggestion.initialize(this, suggestion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, suggestion) { 
        obj['suggestion'] = suggestion;
    }

    /**
     * Constructs a <code>SpellingTokenSuggestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpellingTokenSuggestion} obj Optional instance to populate.
     * @return {module:model/SpellingTokenSuggestion} The populated <code>SpellingTokenSuggestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpellingTokenSuggestion();

            if (data.hasOwnProperty('pingUrlSuffix')) {
                obj['pingUrlSuffix'] = ApiClient.convertToType(data['pingUrlSuffix'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('suggestion')) {
                obj['suggestion'] = ApiClient.convertToType(data['suggestion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpellingTokenSuggestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpellingTokenSuggestion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SpellingTokenSuggestion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pingUrlSuffix'] && !(typeof data['pingUrlSuffix'] === 'string' || data['pingUrlSuffix'] instanceof String)) {
            throw new Error("Expected the field `pingUrlSuffix` to be a primitive type in the JSON string but got " + data['pingUrlSuffix']);
        }
        // ensure the json data is a string
        if (data['suggestion'] && !(typeof data['suggestion'] === 'string' || data['suggestion'] instanceof String)) {
            throw new Error("Expected the field `suggestion` to be a primitive type in the JSON string but got " + data['suggestion']);
        }

        return true;
    }


}

SpellingTokenSuggestion.RequiredProperties = ["suggestion"];

/**
 * @member {String} pingUrlSuffix
 */
SpellingTokenSuggestion.prototype['pingUrlSuffix'] = undefined;

/**
 * @member {Number} score
 */
SpellingTokenSuggestion.prototype['score'] = undefined;

/**
 * @member {String} suggestion
 */
SpellingTokenSuggestion.prototype['suggestion'] = undefined;






export default SpellingTokenSuggestion;

