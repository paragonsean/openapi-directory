/**
 * Spell Check Client
 * The Spell Check API - V7 lets you check a text string for spelling and grammar errors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer from './Answer';
import SpellingFlaggedToken from './SpellingFlaggedToken';

/**
 * The SpellCheck model module.
 * @module model/SpellCheck
 * @version 1.0
 */
class SpellCheck {
    /**
     * Constructs a new <code>SpellCheck</code>.
     * @alias module:model/SpellCheck
     * @extends module:model/Answer
     * @implements module:model/Answer
     * @param type {String} 
     */
    constructor(type) { 
        Answer.initialize(this, type);
        SpellCheck.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['flaggedTokens'] = flaggedTokens;
    }

    /**
     * Constructs a <code>SpellCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpellCheck} obj Optional instance to populate.
     * @return {module:model/SpellCheck} The populated <code>SpellCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpellCheck();
            Answer.constructFromObject(data, obj);
            Answer.constructFromObject(data, obj);

            if (data.hasOwnProperty('flaggedTokens')) {
                obj['flaggedTokens'] = ApiClient.convertToType(data['flaggedTokens'], [SpellingFlaggedToken]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpellCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpellCheck</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SpellCheck.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['flaggedTokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flaggedTokens'])) {
                throw new Error("Expected the field `flaggedTokens` to be an array in the JSON data but got " + data['flaggedTokens']);
            }
            // validate the optional field `flaggedTokens` (array)
            for (const item of data['flaggedTokens']) {
                SpellingFlaggedToken.validateJSON(item);
            };
        }

        return true;
    }


}

SpellCheck.RequiredProperties = ["flaggedTokens", "_type"];

/**
 * @member {Array.<module:model/SpellingFlaggedToken>} flaggedTokens
 */
SpellCheck.prototype['flaggedTokens'] = undefined;


// Implement Answer interface:
/**
 * A String identifier.
 * @member {String} id
 */
Answer.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
Answer.prototype['_type'] = undefined;




export default SpellCheck;

