# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spelling_token_suggestion import SpellingTokenSuggestion
from openapi_server import util


class SpellingFlaggedToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: int=None, ping_url_suffix: str=None, suggestions: List[SpellingTokenSuggestion]=None, token: str=None, type: str='UnknownToken'):
        """SpellingFlaggedToken - a model defined in OpenAPI

        :param offset: The offset of this SpellingFlaggedToken.
        :param ping_url_suffix: The ping_url_suffix of this SpellingFlaggedToken.
        :param suggestions: The suggestions of this SpellingFlaggedToken.
        :param token: The token of this SpellingFlaggedToken.
        :param type: The type of this SpellingFlaggedToken.
        """
        self.openapi_types = {
            'offset': int,
            'ping_url_suffix': str,
            'suggestions': List[SpellingTokenSuggestion],
            'token': str,
            'type': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'ping_url_suffix': 'pingUrlSuffix',
            'suggestions': 'suggestions',
            'token': 'token',
            'type': 'type'
        }

        self._offset = offset
        self._ping_url_suffix = ping_url_suffix
        self._suggestions = suggestions
        self._token = token
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpellingFlaggedToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpellingFlaggedToken of this SpellingFlaggedToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this SpellingFlaggedToken.


        :return: The offset of this SpellingFlaggedToken.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SpellingFlaggedToken.


        :param offset: The offset of this SpellingFlaggedToken.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def ping_url_suffix(self):
        """Gets the ping_url_suffix of this SpellingFlaggedToken.


        :return: The ping_url_suffix of this SpellingFlaggedToken.
        :rtype: str
        """
        return self._ping_url_suffix

    @ping_url_suffix.setter
    def ping_url_suffix(self, ping_url_suffix):
        """Sets the ping_url_suffix of this SpellingFlaggedToken.


        :param ping_url_suffix: The ping_url_suffix of this SpellingFlaggedToken.
        :type ping_url_suffix: str
        """

        self._ping_url_suffix = ping_url_suffix

    @property
    def suggestions(self):
        """Gets the suggestions of this SpellingFlaggedToken.


        :return: The suggestions of this SpellingFlaggedToken.
        :rtype: List[SpellingTokenSuggestion]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this SpellingFlaggedToken.


        :param suggestions: The suggestions of this SpellingFlaggedToken.
        :type suggestions: List[SpellingTokenSuggestion]
        """

        self._suggestions = suggestions

    @property
    def token(self):
        """Gets the token of this SpellingFlaggedToken.


        :return: The token of this SpellingFlaggedToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SpellingFlaggedToken.


        :param token: The token of this SpellingFlaggedToken.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def type(self):
        """Gets the type of this SpellingFlaggedToken.


        :return: The type of this SpellingFlaggedToken.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SpellingFlaggedToken.


        :param type: The type of this SpellingFlaggedToken.
        :type type: str
        """
        allowed_values = ["UnknownToken", "RepeatedToken"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
