# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpellingTokenSuggestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ping_url_suffix: str=None, score: float=None, suggestion: str=None):
        """SpellingTokenSuggestion - a model defined in OpenAPI

        :param ping_url_suffix: The ping_url_suffix of this SpellingTokenSuggestion.
        :param score: The score of this SpellingTokenSuggestion.
        :param suggestion: The suggestion of this SpellingTokenSuggestion.
        """
        self.openapi_types = {
            'ping_url_suffix': str,
            'score': float,
            'suggestion': str
        }

        self.attribute_map = {
            'ping_url_suffix': 'pingUrlSuffix',
            'score': 'score',
            'suggestion': 'suggestion'
        }

        self._ping_url_suffix = ping_url_suffix
        self._score = score
        self._suggestion = suggestion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpellingTokenSuggestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpellingTokenSuggestion of this SpellingTokenSuggestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ping_url_suffix(self):
        """Gets the ping_url_suffix of this SpellingTokenSuggestion.


        :return: The ping_url_suffix of this SpellingTokenSuggestion.
        :rtype: str
        """
        return self._ping_url_suffix

    @ping_url_suffix.setter
    def ping_url_suffix(self, ping_url_suffix):
        """Sets the ping_url_suffix of this SpellingTokenSuggestion.


        :param ping_url_suffix: The ping_url_suffix of this SpellingTokenSuggestion.
        :type ping_url_suffix: str
        """

        self._ping_url_suffix = ping_url_suffix

    @property
    def score(self):
        """Gets the score of this SpellingTokenSuggestion.


        :return: The score of this SpellingTokenSuggestion.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SpellingTokenSuggestion.


        :param score: The score of this SpellingTokenSuggestion.
        :type score: float
        """

        self._score = score

    @property
    def suggestion(self):
        """Gets the suggestion of this SpellingTokenSuggestion.


        :return: The suggestion of this SpellingTokenSuggestion.
        :rtype: str
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """Sets the suggestion of this SpellingTokenSuggestion.


        :param suggestion: The suggestion of this SpellingTokenSuggestion.
        :type suggestion: str
        """
        if suggestion is None:
            raise ValueError("Invalid value for `suggestion`, must not be `None`")

        self._suggestion = suggestion
