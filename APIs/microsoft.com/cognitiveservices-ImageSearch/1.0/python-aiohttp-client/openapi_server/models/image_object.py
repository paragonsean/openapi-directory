# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.images_image_metadata import ImagesImageMetadata
from openapi_server.models.media_object import MediaObject
from openapi_server.models.thing import Thing
from openapi_server import util


class ImageObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accent_color: str=None, image_id: str=None, image_insights_token: str=None, insights_metadata: ImagesImageMetadata=None, thumbnail: ImageObject=None, visual_words: str=None, content_size: str=None, content_url: str=None, encoding_format: str=None, height: int=None, host_page_display_url: str=None, host_page_url: str=None, width: int=None, date_published: str=None, provider: List[Thing]=None, text: str=None, thumbnail_url: str=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """ImageObject - a model defined in OpenAPI

        :param accent_color: The accent_color of this ImageObject.
        :param image_id: The image_id of this ImageObject.
        :param image_insights_token: The image_insights_token of this ImageObject.
        :param insights_metadata: The insights_metadata of this ImageObject.
        :param thumbnail: The thumbnail of this ImageObject.
        :param visual_words: The visual_words of this ImageObject.
        :param content_size: The content_size of this ImageObject.
        :param content_url: The content_url of this ImageObject.
        :param encoding_format: The encoding_format of this ImageObject.
        :param height: The height of this ImageObject.
        :param host_page_display_url: The host_page_display_url of this ImageObject.
        :param host_page_url: The host_page_url of this ImageObject.
        :param width: The width of this ImageObject.
        :param date_published: The date_published of this ImageObject.
        :param provider: The provider of this ImageObject.
        :param text: The text of this ImageObject.
        :param thumbnail_url: The thumbnail_url of this ImageObject.
        :param alternate_name: The alternate_name of this ImageObject.
        :param bing_id: The bing_id of this ImageObject.
        :param description: The description of this ImageObject.
        :param image: The image of this ImageObject.
        :param name: The name of this ImageObject.
        :param url: The url of this ImageObject.
        :param read_link: The read_link of this ImageObject.
        :param web_search_url: The web_search_url of this ImageObject.
        :param id: The id of this ImageObject.
        :param type: The type of this ImageObject.
        """
        self.openapi_types = {
            'accent_color': str,
            'image_id': str,
            'image_insights_token': str,
            'insights_metadata': ImagesImageMetadata,
            'thumbnail': ImageObject,
            'visual_words': str,
            'content_size': str,
            'content_url': str,
            'encoding_format': str,
            'height': int,
            'host_page_display_url': str,
            'host_page_url': str,
            'width': int,
            'date_published': str,
            'provider': List[Thing],
            'text': str,
            'thumbnail_url': str,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'accent_color': 'accentColor',
            'image_id': 'imageId',
            'image_insights_token': 'imageInsightsToken',
            'insights_metadata': 'insightsMetadata',
            'thumbnail': 'thumbnail',
            'visual_words': 'visualWords',
            'content_size': 'contentSize',
            'content_url': 'contentUrl',
            'encoding_format': 'encodingFormat',
            'height': 'height',
            'host_page_display_url': 'hostPageDisplayUrl',
            'host_page_url': 'hostPageUrl',
            'width': 'width',
            'date_published': 'datePublished',
            'provider': 'provider',
            'text': 'text',
            'thumbnail_url': 'thumbnailUrl',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._accent_color = accent_color
        self._image_id = image_id
        self._image_insights_token = image_insights_token
        self._insights_metadata = insights_metadata
        self._thumbnail = thumbnail
        self._visual_words = visual_words
        self._content_size = content_size
        self._content_url = content_url
        self._encoding_format = encoding_format
        self._height = height
        self._host_page_display_url = host_page_display_url
        self._host_page_url = host_page_url
        self._width = width
        self._date_published = date_published
        self._provider = provider
        self._text = text
        self._thumbnail_url = thumbnail_url
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageObject of this ImageObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accent_color(self):
        """Gets the accent_color of this ImageObject.

        A three-byte hexadecimal number that represents the color that dominates the image. Use the color as the temporary background in your client until the image is loaded.

        :return: The accent_color of this ImageObject.
        :rtype: str
        """
        return self._accent_color

    @accent_color.setter
    def accent_color(self, accent_color):
        """Sets the accent_color of this ImageObject.

        A three-byte hexadecimal number that represents the color that dominates the image. Use the color as the temporary background in your client until the image is loaded.

        :param accent_color: The accent_color of this ImageObject.
        :type accent_color: str
        """

        self._accent_color = accent_color

    @property
    def image_id(self):
        """Gets the image_id of this ImageObject.

        Unique Id for the image

        :return: The image_id of this ImageObject.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageObject.

        Unique Id for the image

        :param image_id: The image_id of this ImageObject.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_insights_token(self):
        """Gets the image_insights_token of this ImageObject.

        The token that you use in a subsequent call to the Image Search API to get additional information about the image. For information about using this token, see the insightsToken query parameter.

        :return: The image_insights_token of this ImageObject.
        :rtype: str
        """
        return self._image_insights_token

    @image_insights_token.setter
    def image_insights_token(self, image_insights_token):
        """Sets the image_insights_token of this ImageObject.

        The token that you use in a subsequent call to the Image Search API to get additional information about the image. For information about using this token, see the insightsToken query parameter.

        :param image_insights_token: The image_insights_token of this ImageObject.
        :type image_insights_token: str
        """

        self._image_insights_token = image_insights_token

    @property
    def insights_metadata(self):
        """Gets the insights_metadata of this ImageObject.


        :return: The insights_metadata of this ImageObject.
        :rtype: ImagesImageMetadata
        """
        return self._insights_metadata

    @insights_metadata.setter
    def insights_metadata(self, insights_metadata):
        """Sets the insights_metadata of this ImageObject.


        :param insights_metadata: The insights_metadata of this ImageObject.
        :type insights_metadata: ImagesImageMetadata
        """

        self._insights_metadata = insights_metadata

    @property
    def thumbnail(self):
        """Gets the thumbnail of this ImageObject.


        :return: The thumbnail of this ImageObject.
        :rtype: ImageObject
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this ImageObject.


        :param thumbnail: The thumbnail of this ImageObject.
        :type thumbnail: ImageObject
        """

        self._thumbnail = thumbnail

    @property
    def visual_words(self):
        """Gets the visual_words of this ImageObject.

        Visual representation of the image. Used for getting more sizes

        :return: The visual_words of this ImageObject.
        :rtype: str
        """
        return self._visual_words

    @visual_words.setter
    def visual_words(self, visual_words):
        """Sets the visual_words of this ImageObject.

        Visual representation of the image. Used for getting more sizes

        :param visual_words: The visual_words of this ImageObject.
        :type visual_words: str
        """

        self._visual_words = visual_words

    @property
    def content_size(self):
        """Gets the content_size of this ImageObject.

        Size of the media object content (use format \"value unit\" e.g \"1024 B\").

        :return: The content_size of this ImageObject.
        :rtype: str
        """
        return self._content_size

    @content_size.setter
    def content_size(self, content_size):
        """Sets the content_size of this ImageObject.

        Size of the media object content (use format \"value unit\" e.g \"1024 B\").

        :param content_size: The content_size of this ImageObject.
        :type content_size: str
        """

        self._content_size = content_size

    @property
    def content_url(self):
        """Gets the content_url of this ImageObject.

        Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).

        :return: The content_url of this ImageObject.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this ImageObject.

        Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).

        :param content_url: The content_url of this ImageObject.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def encoding_format(self):
        """Gets the encoding_format of this ImageObject.

        Encoding format (e.g mp3, mp4, jpeg, etc).

        :return: The encoding_format of this ImageObject.
        :rtype: str
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this ImageObject.

        Encoding format (e.g mp3, mp4, jpeg, etc).

        :param encoding_format: The encoding_format of this ImageObject.
        :type encoding_format: str
        """

        self._encoding_format = encoding_format

    @property
    def height(self):
        """Gets the height of this ImageObject.

        The height of the source media object, in pixels.

        :return: The height of this ImageObject.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageObject.

        The height of the source media object, in pixels.

        :param height: The height of this ImageObject.
        :type height: int
        """

        self._height = height

    @property
    def host_page_display_url(self):
        """Gets the host_page_display_url of this ImageObject.

        Display URL of the page that hosts the media object.

        :return: The host_page_display_url of this ImageObject.
        :rtype: str
        """
        return self._host_page_display_url

    @host_page_display_url.setter
    def host_page_display_url(self, host_page_display_url):
        """Sets the host_page_display_url of this ImageObject.

        Display URL of the page that hosts the media object.

        :param host_page_display_url: The host_page_display_url of this ImageObject.
        :type host_page_display_url: str
        """

        self._host_page_display_url = host_page_display_url

    @property
    def host_page_url(self):
        """Gets the host_page_url of this ImageObject.

        URL of the page that hosts the media object.

        :return: The host_page_url of this ImageObject.
        :rtype: str
        """
        return self._host_page_url

    @host_page_url.setter
    def host_page_url(self, host_page_url):
        """Sets the host_page_url of this ImageObject.

        URL of the page that hosts the media object.

        :param host_page_url: The host_page_url of this ImageObject.
        :type host_page_url: str
        """

        self._host_page_url = host_page_url

    @property
    def width(self):
        """Gets the width of this ImageObject.

        The width of the source media object, in pixels.

        :return: The width of this ImageObject.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageObject.

        The width of the source media object, in pixels.

        :param width: The width of this ImageObject.
        :type width: int
        """

        self._width = width

    @property
    def date_published(self):
        """Gets the date_published of this ImageObject.

        The date on which the CreativeWork was published.

        :return: The date_published of this ImageObject.
        :rtype: str
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this ImageObject.

        The date on which the CreativeWork was published.

        :param date_published: The date_published of this ImageObject.
        :type date_published: str
        """

        self._date_published = date_published

    @property
    def provider(self):
        """Gets the provider of this ImageObject.

        The source of the creative work.

        :return: The provider of this ImageObject.
        :rtype: List[Thing]
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ImageObject.

        The source of the creative work.

        :param provider: The provider of this ImageObject.
        :type provider: List[Thing]
        """

        self._provider = provider

    @property
    def text(self):
        """Gets the text of this ImageObject.

        Text content of this creative work

        :return: The text of this ImageObject.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ImageObject.

        Text content of this creative work

        :param text: The text of this ImageObject.
        :type text: str
        """

        self._text = text

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this ImageObject.

        The URL to a thumbnail of the item.

        :return: The thumbnail_url of this ImageObject.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this ImageObject.

        The URL to a thumbnail of the item.

        :param thumbnail_url: The thumbnail_url of this ImageObject.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ImageObject.

        An alias for the item

        :return: The alternate_name of this ImageObject.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ImageObject.

        An alias for the item

        :param alternate_name: The alternate_name of this ImageObject.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this ImageObject.

        An ID that uniquely identifies this item.

        :return: The bing_id of this ImageObject.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this ImageObject.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this ImageObject.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this ImageObject.

        A short description of the item.

        :return: The description of this ImageObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImageObject.

        A short description of the item.

        :param description: The description of this ImageObject.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this ImageObject.


        :return: The image of this ImageObject.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageObject.


        :param image: The image of this ImageObject.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this ImageObject.

        The name of the thing represented by this object.

        :return: The name of this ImageObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageObject.

        The name of the thing represented by this object.

        :param name: The name of this ImageObject.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ImageObject.

        The URL to get more information about the thing represented by this object.

        :return: The url of this ImageObject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageObject.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this ImageObject.
        :type url: str
        """

        self._url = url

    @property
    def read_link(self):
        """Gets the read_link of this ImageObject.

        The URL that returns this resource.

        :return: The read_link of this ImageObject.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this ImageObject.

        The URL that returns this resource.

        :param read_link: The read_link of this ImageObject.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this ImageObject.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this ImageObject.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this ImageObject.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this ImageObject.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this ImageObject.

        A String identifier.

        :return: The id of this ImageObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageObject.

        A String identifier.

        :param id: The id of this ImageObject.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImageObject.


        :return: The type of this ImageObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageObject.


        :param type: The type of this ImageObject.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
