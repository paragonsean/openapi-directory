# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query import Query
from openapi_server import util


class PivotSuggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pivot: str=None, suggestions: List[Query]=None):
        """PivotSuggestions - a model defined in OpenAPI

        :param pivot: The pivot of this PivotSuggestions.
        :param suggestions: The suggestions of this PivotSuggestions.
        """
        self.openapi_types = {
            'pivot': str,
            'suggestions': List[Query]
        }

        self.attribute_map = {
            'pivot': 'pivot',
            'suggestions': 'suggestions'
        }

        self._pivot = pivot
        self._suggestions = suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PivotSuggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PivotSuggestions of this PivotSuggestions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pivot(self):
        """Gets the pivot of this PivotSuggestions.

        The segment from the original query to pivot on.

        :return: The pivot of this PivotSuggestions.
        :rtype: str
        """
        return self._pivot

    @pivot.setter
    def pivot(self, pivot):
        """Sets the pivot of this PivotSuggestions.

        The segment from the original query to pivot on.

        :param pivot: The pivot of this PivotSuggestions.
        :type pivot: str
        """
        if pivot is None:
            raise ValueError("Invalid value for `pivot`, must not be `None`")

        self._pivot = pivot

    @property
    def suggestions(self):
        """Gets the suggestions of this PivotSuggestions.

        A list of suggested queries for the pivot.

        :return: The suggestions of this PivotSuggestions.
        :rtype: List[Query]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this PivotSuggestions.

        A list of suggested queries for the pivot.

        :param suggestions: The suggestions of this PivotSuggestions.
        :type suggestions: List[Query]
        """
        if suggestions is None:
            raise ValueError("Invalid value for `suggestions`, must not be `None`")

        self._suggestions = suggestions
