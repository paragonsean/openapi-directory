# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recognized_entity_region import RecognizedEntityRegion
from openapi_server import util


class RecognizedEntityGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, recognized_entity_regions: List[RecognizedEntityRegion]=None):
        """RecognizedEntityGroup - a model defined in OpenAPI

        :param name: The name of this RecognizedEntityGroup.
        :param recognized_entity_regions: The recognized_entity_regions of this RecognizedEntityGroup.
        """
        self.openapi_types = {
            'name': str,
            'recognized_entity_regions': List[RecognizedEntityRegion]
        }

        self.attribute_map = {
            'name': 'name',
            'recognized_entity_regions': 'recognizedEntityRegions'
        }

        self._name = name
        self._recognized_entity_regions = recognized_entity_regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognizedEntityGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecognizedEntityGroup of this RecognizedEntityGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RecognizedEntityGroup.

        The name of the group where images of the entity were also found. The following are possible groups. CelebRecognitionAnnotations: Similar to CelebrityAnnotations but provides a higher probability of an accurate match. CelebrityAnnotations: Contains celebrities such as actors, politicians, athletes, and historical figures.

        :return: The name of this RecognizedEntityGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecognizedEntityGroup.

        The name of the group where images of the entity were also found. The following are possible groups. CelebRecognitionAnnotations: Similar to CelebrityAnnotations but provides a higher probability of an accurate match. CelebrityAnnotations: Contains celebrities such as actors, politicians, athletes, and historical figures.

        :param name: The name of this RecognizedEntityGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def recognized_entity_regions(self):
        """Gets the recognized_entity_regions of this RecognizedEntityGroup.

        The regions of the image that contain entities.

        :return: The recognized_entity_regions of this RecognizedEntityGroup.
        :rtype: List[RecognizedEntityRegion]
        """
        return self._recognized_entity_regions

    @recognized_entity_regions.setter
    def recognized_entity_regions(self, recognized_entity_regions):
        """Sets the recognized_entity_regions of this RecognizedEntityGroup.

        The regions of the image that contain entities.

        :param recognized_entity_regions: The recognized_entity_regions of this RecognizedEntityGroup.
        :type recognized_entity_regions: List[RecognizedEntityRegion]
        """
        if recognized_entity_regions is None:
            raise ValueError("Invalid value for `recognized_entity_regions`, must not be `None`")

        self._recognized_entity_regions = recognized_entity_regions
