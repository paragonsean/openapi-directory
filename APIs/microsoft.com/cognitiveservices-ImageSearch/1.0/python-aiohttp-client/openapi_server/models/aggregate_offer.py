# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_rating import AggregateRating
from openapi_server.models.image_object import ImageObject
from openapi_server.models.offer import Offer
from openapi_server.models.organization import Organization
from openapi_server import util


class AggregateOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offers: List[Offer]=None, aggregate_rating: AggregateRating=None, availability: str=None, last_updated: str=None, price: float=None, price_currency: str='USD', seller: Organization=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """AggregateOffer - a model defined in OpenAPI

        :param offers: The offers of this AggregateOffer.
        :param aggregate_rating: The aggregate_rating of this AggregateOffer.
        :param availability: The availability of this AggregateOffer.
        :param last_updated: The last_updated of this AggregateOffer.
        :param price: The price of this AggregateOffer.
        :param price_currency: The price_currency of this AggregateOffer.
        :param seller: The seller of this AggregateOffer.
        :param alternate_name: The alternate_name of this AggregateOffer.
        :param bing_id: The bing_id of this AggregateOffer.
        :param description: The description of this AggregateOffer.
        :param image: The image of this AggregateOffer.
        :param name: The name of this AggregateOffer.
        :param url: The url of this AggregateOffer.
        :param read_link: The read_link of this AggregateOffer.
        :param web_search_url: The web_search_url of this AggregateOffer.
        :param id: The id of this AggregateOffer.
        :param type: The type of this AggregateOffer.
        """
        self.openapi_types = {
            'offers': List[Offer],
            'aggregate_rating': AggregateRating,
            'availability': str,
            'last_updated': str,
            'price': float,
            'price_currency': str,
            'seller': Organization,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'offers': 'offers',
            'aggregate_rating': 'aggregateRating',
            'availability': 'availability',
            'last_updated': 'lastUpdated',
            'price': 'price',
            'price_currency': 'priceCurrency',
            'seller': 'seller',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._offers = offers
        self._aggregate_rating = aggregate_rating
        self._availability = availability
        self._last_updated = last_updated
        self._price = price
        self._price_currency = price_currency
        self._seller = seller
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateOffer of this AggregateOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offers(self):
        """Gets the offers of this AggregateOffer.

        A list of offers from merchants that have offerings related to the image.

        :return: The offers of this AggregateOffer.
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this AggregateOffer.

        A list of offers from merchants that have offerings related to the image.

        :param offers: The offers of this AggregateOffer.
        :type offers: List[Offer]
        """

        self._offers = offers

    @property
    def aggregate_rating(self):
        """Gets the aggregate_rating of this AggregateOffer.


        :return: The aggregate_rating of this AggregateOffer.
        :rtype: AggregateRating
        """
        return self._aggregate_rating

    @aggregate_rating.setter
    def aggregate_rating(self, aggregate_rating):
        """Sets the aggregate_rating of this AggregateOffer.


        :param aggregate_rating: The aggregate_rating of this AggregateOffer.
        :type aggregate_rating: AggregateRating
        """

        self._aggregate_rating = aggregate_rating

    @property
    def availability(self):
        """Gets the availability of this AggregateOffer.

        The item's availability. The following are the possible values: Discontinued, InStock, InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut

        :return: The availability of this AggregateOffer.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AggregateOffer.

        The item's availability. The following are the possible values: Discontinued, InStock, InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut

        :param availability: The availability of this AggregateOffer.
        :type availability: str
        """
        allowed_values = ["Discontinued", "InStock", "InStoreOnly", "LimitedAvailability", "OnlineOnly", "OutOfStock", "PreOrder", "SoldOut"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def last_updated(self):
        """Gets the last_updated of this AggregateOffer.

        The last date that the offer was updated. The date is in the form YYYY-MM-DD.

        :return: The last_updated of this AggregateOffer.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AggregateOffer.

        The last date that the offer was updated. The date is in the form YYYY-MM-DD.

        :param last_updated: The last_updated of this AggregateOffer.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def price(self):
        """Gets the price of this AggregateOffer.

        The item's price.

        :return: The price of this AggregateOffer.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AggregateOffer.

        The item's price.

        :param price: The price of this AggregateOffer.
        :type price: float
        """

        self._price = price

    @property
    def price_currency(self):
        """Gets the price_currency of this AggregateOffer.

        The monetary currency. For example, USD.

        :return: The price_currency of this AggregateOffer.
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this AggregateOffer.

        The monetary currency. For example, USD.

        :param price_currency: The price_currency of this AggregateOffer.
        :type price_currency: str
        """
        allowed_values = ["USD", "CAD", "GBP", "EUR", "COP", "JPY", "CNY", "AUD", "INR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYR", "BZD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IQD", "IRR", "ISK", "JMD", "JOD", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMW"]  # noqa: E501
        if price_currency not in allowed_values:
            raise ValueError(
                "Invalid value for `price_currency` ({0}), must be one of {1}"
                .format(price_currency, allowed_values)
            )

        self._price_currency = price_currency

    @property
    def seller(self):
        """Gets the seller of this AggregateOffer.


        :return: The seller of this AggregateOffer.
        :rtype: Organization
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this AggregateOffer.


        :param seller: The seller of this AggregateOffer.
        :type seller: Organization
        """

        self._seller = seller

    @property
    def alternate_name(self):
        """Gets the alternate_name of this AggregateOffer.

        An alias for the item

        :return: The alternate_name of this AggregateOffer.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this AggregateOffer.

        An alias for the item

        :param alternate_name: The alternate_name of this AggregateOffer.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this AggregateOffer.

        An ID that uniquely identifies this item.

        :return: The bing_id of this AggregateOffer.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this AggregateOffer.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this AggregateOffer.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this AggregateOffer.

        A short description of the item.

        :return: The description of this AggregateOffer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AggregateOffer.

        A short description of the item.

        :param description: The description of this AggregateOffer.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this AggregateOffer.


        :return: The image of this AggregateOffer.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AggregateOffer.


        :param image: The image of this AggregateOffer.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this AggregateOffer.

        The name of the thing represented by this object.

        :return: The name of this AggregateOffer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AggregateOffer.

        The name of the thing represented by this object.

        :param name: The name of this AggregateOffer.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this AggregateOffer.

        The URL to get more information about the thing represented by this object.

        :return: The url of this AggregateOffer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AggregateOffer.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this AggregateOffer.
        :type url: str
        """

        self._url = url

    @property
    def read_link(self):
        """Gets the read_link of this AggregateOffer.

        The URL that returns this resource.

        :return: The read_link of this AggregateOffer.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this AggregateOffer.

        The URL that returns this resource.

        :param read_link: The read_link of this AggregateOffer.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this AggregateOffer.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this AggregateOffer.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this AggregateOffer.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this AggregateOffer.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this AggregateOffer.

        A String identifier.

        :return: The id of this AggregateOffer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AggregateOffer.

        A String identifier.

        :param id: The id of this AggregateOffer.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this AggregateOffer.


        :return: The type of this AggregateOffer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AggregateOffer.


        :param type: The type of this AggregateOffer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
