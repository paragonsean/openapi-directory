# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_object import ImageObject
from openapi_server.models.structured_value import StructuredValue
from openapi_server import util


class NormalizedRectangle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom: float=None, left: float=None, right: float=None, top: float=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """NormalizedRectangle - a model defined in OpenAPI

        :param bottom: The bottom of this NormalizedRectangle.
        :param left: The left of this NormalizedRectangle.
        :param right: The right of this NormalizedRectangle.
        :param top: The top of this NormalizedRectangle.
        :param alternate_name: The alternate_name of this NormalizedRectangle.
        :param bing_id: The bing_id of this NormalizedRectangle.
        :param description: The description of this NormalizedRectangle.
        :param image: The image of this NormalizedRectangle.
        :param name: The name of this NormalizedRectangle.
        :param url: The url of this NormalizedRectangle.
        :param read_link: The read_link of this NormalizedRectangle.
        :param web_search_url: The web_search_url of this NormalizedRectangle.
        :param id: The id of this NormalizedRectangle.
        :param type: The type of this NormalizedRectangle.
        """
        self.openapi_types = {
            'bottom': float,
            'left': float,
            'right': float,
            'top': float,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'bottom': 'bottom',
            'left': 'left',
            'right': 'right',
            'top': 'top',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._bottom = bottom
        self._left = left
        self._right = right
        self._top = top
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NormalizedRectangle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NormalizedRectangle of this NormalizedRectangle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom(self):
        """Gets the bottom of this NormalizedRectangle.

        The bottom coordinate

        :return: The bottom of this NormalizedRectangle.
        :rtype: float
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this NormalizedRectangle.

        The bottom coordinate

        :param bottom: The bottom of this NormalizedRectangle.
        :type bottom: float
        """
        if bottom is None:
            raise ValueError("Invalid value for `bottom`, must not be `None`")

        self._bottom = bottom

    @property
    def left(self):
        """Gets the left of this NormalizedRectangle.

        The left coordinate.

        :return: The left of this NormalizedRectangle.
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this NormalizedRectangle.

        The left coordinate.

        :param left: The left of this NormalizedRectangle.
        :type left: float
        """
        if left is None:
            raise ValueError("Invalid value for `left`, must not be `None`")

        self._left = left

    @property
    def right(self):
        """Gets the right of this NormalizedRectangle.

        The right coordinate

        :return: The right of this NormalizedRectangle.
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this NormalizedRectangle.

        The right coordinate

        :param right: The right of this NormalizedRectangle.
        :type right: float
        """
        if right is None:
            raise ValueError("Invalid value for `right`, must not be `None`")

        self._right = right

    @property
    def top(self):
        """Gets the top of this NormalizedRectangle.

        The top coordinate

        :return: The top of this NormalizedRectangle.
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this NormalizedRectangle.

        The top coordinate

        :param top: The top of this NormalizedRectangle.
        :type top: float
        """
        if top is None:
            raise ValueError("Invalid value for `top`, must not be `None`")

        self._top = top

    @property
    def alternate_name(self):
        """Gets the alternate_name of this NormalizedRectangle.

        An alias for the item

        :return: The alternate_name of this NormalizedRectangle.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this NormalizedRectangle.

        An alias for the item

        :param alternate_name: The alternate_name of this NormalizedRectangle.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this NormalizedRectangle.

        An ID that uniquely identifies this item.

        :return: The bing_id of this NormalizedRectangle.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this NormalizedRectangle.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this NormalizedRectangle.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this NormalizedRectangle.

        A short description of the item.

        :return: The description of this NormalizedRectangle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NormalizedRectangle.

        A short description of the item.

        :param description: The description of this NormalizedRectangle.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this NormalizedRectangle.


        :return: The image of this NormalizedRectangle.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this NormalizedRectangle.


        :param image: The image of this NormalizedRectangle.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this NormalizedRectangle.

        The name of the thing represented by this object.

        :return: The name of this NormalizedRectangle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NormalizedRectangle.

        The name of the thing represented by this object.

        :param name: The name of this NormalizedRectangle.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this NormalizedRectangle.

        The URL to get more information about the thing represented by this object.

        :return: The url of this NormalizedRectangle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NormalizedRectangle.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this NormalizedRectangle.
        :type url: str
        """

        self._url = url

    @property
    def read_link(self):
        """Gets the read_link of this NormalizedRectangle.

        The URL that returns this resource.

        :return: The read_link of this NormalizedRectangle.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this NormalizedRectangle.

        The URL that returns this resource.

        :param read_link: The read_link of this NormalizedRectangle.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this NormalizedRectangle.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this NormalizedRectangle.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this NormalizedRectangle.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this NormalizedRectangle.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this NormalizedRectangle.

        A String identifier.

        :return: The id of this NormalizedRectangle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NormalizedRectangle.

        A String identifier.

        :param id: The id of this NormalizedRectangle.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this NormalizedRectangle.


        :return: The type of this NormalizedRectangle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NormalizedRectangle.


        :param type: The type of this NormalizedRectangle.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
