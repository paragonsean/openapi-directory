# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_offer import AggregateOffer
from openapi_server.models.image_insights_image_caption import ImageInsightsImageCaption
from openapi_server.models.image_tags_module import ImageTagsModule
from openapi_server.models.images_module import ImagesModule
from openapi_server.models.query import Query
from openapi_server.models.recipes_module import RecipesModule
from openapi_server.models.recognized_entities_module import RecognizedEntitiesModule
from openapi_server.models.related_collections_module import RelatedCollectionsModule
from openapi_server.models.related_searches_module import RelatedSearchesModule
from openapi_server.models.response import Response
from openapi_server import util


class ImageInsights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_representative_query: Query=None, image_caption: ImageInsightsImageCaption=None, image_insights_token: str=None, image_tags: ImageTagsModule=None, pages_including: ImagesModule=None, recipes: RecipesModule=None, recognized_entity_groups: RecognizedEntitiesModule=None, related_collections: RelatedCollectionsModule=None, related_searches: RelatedSearchesModule=None, shopping_sources: AggregateOffer=None, visually_similar_images: ImagesModule=None, visually_similar_products: ImagesModule=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """ImageInsights - a model defined in OpenAPI

        :param best_representative_query: The best_representative_query of this ImageInsights.
        :param image_caption: The image_caption of this ImageInsights.
        :param image_insights_token: The image_insights_token of this ImageInsights.
        :param image_tags: The image_tags of this ImageInsights.
        :param pages_including: The pages_including of this ImageInsights.
        :param recipes: The recipes of this ImageInsights.
        :param recognized_entity_groups: The recognized_entity_groups of this ImageInsights.
        :param related_collections: The related_collections of this ImageInsights.
        :param related_searches: The related_searches of this ImageInsights.
        :param shopping_sources: The shopping_sources of this ImageInsights.
        :param visually_similar_images: The visually_similar_images of this ImageInsights.
        :param visually_similar_products: The visually_similar_products of this ImageInsights.
        :param read_link: The read_link of this ImageInsights.
        :param web_search_url: The web_search_url of this ImageInsights.
        :param id: The id of this ImageInsights.
        :param type: The type of this ImageInsights.
        """
        self.openapi_types = {
            'best_representative_query': Query,
            'image_caption': ImageInsightsImageCaption,
            'image_insights_token': str,
            'image_tags': ImageTagsModule,
            'pages_including': ImagesModule,
            'recipes': RecipesModule,
            'recognized_entity_groups': RecognizedEntitiesModule,
            'related_collections': RelatedCollectionsModule,
            'related_searches': RelatedSearchesModule,
            'shopping_sources': AggregateOffer,
            'visually_similar_images': ImagesModule,
            'visually_similar_products': ImagesModule,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'best_representative_query': 'bestRepresentativeQuery',
            'image_caption': 'imageCaption',
            'image_insights_token': 'imageInsightsToken',
            'image_tags': 'imageTags',
            'pages_including': 'pagesIncluding',
            'recipes': 'recipes',
            'recognized_entity_groups': 'recognizedEntityGroups',
            'related_collections': 'relatedCollections',
            'related_searches': 'relatedSearches',
            'shopping_sources': 'shoppingSources',
            'visually_similar_images': 'visuallySimilarImages',
            'visually_similar_products': 'visuallySimilarProducts',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._best_representative_query = best_representative_query
        self._image_caption = image_caption
        self._image_insights_token = image_insights_token
        self._image_tags = image_tags
        self._pages_including = pages_including
        self._recipes = recipes
        self._recognized_entity_groups = recognized_entity_groups
        self._related_collections = related_collections
        self._related_searches = related_searches
        self._shopping_sources = shopping_sources
        self._visually_similar_images = visually_similar_images
        self._visually_similar_products = visually_similar_products
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageInsights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageInsights of this ImageInsights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_representative_query(self):
        """Gets the best_representative_query of this ImageInsights.


        :return: The best_representative_query of this ImageInsights.
        :rtype: Query
        """
        return self._best_representative_query

    @best_representative_query.setter
    def best_representative_query(self, best_representative_query):
        """Sets the best_representative_query of this ImageInsights.


        :param best_representative_query: The best_representative_query of this ImageInsights.
        :type best_representative_query: Query
        """

        self._best_representative_query = best_representative_query

    @property
    def image_caption(self):
        """Gets the image_caption of this ImageInsights.


        :return: The image_caption of this ImageInsights.
        :rtype: ImageInsightsImageCaption
        """
        return self._image_caption

    @image_caption.setter
    def image_caption(self, image_caption):
        """Sets the image_caption of this ImageInsights.


        :param image_caption: The image_caption of this ImageInsights.
        :type image_caption: ImageInsightsImageCaption
        """

        self._image_caption = image_caption

    @property
    def image_insights_token(self):
        """Gets the image_insights_token of this ImageInsights.

        A token that you use in a subsequent call to the Image Search API to get more information about the image. For information about using this token, see the insightsToken query parameter. This token has the same usage as the token in the Image object.

        :return: The image_insights_token of this ImageInsights.
        :rtype: str
        """
        return self._image_insights_token

    @image_insights_token.setter
    def image_insights_token(self, image_insights_token):
        """Sets the image_insights_token of this ImageInsights.

        A token that you use in a subsequent call to the Image Search API to get more information about the image. For information about using this token, see the insightsToken query parameter. This token has the same usage as the token in the Image object.

        :param image_insights_token: The image_insights_token of this ImageInsights.
        :type image_insights_token: str
        """

        self._image_insights_token = image_insights_token

    @property
    def image_tags(self):
        """Gets the image_tags of this ImageInsights.


        :return: The image_tags of this ImageInsights.
        :rtype: ImageTagsModule
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags):
        """Sets the image_tags of this ImageInsights.


        :param image_tags: The image_tags of this ImageInsights.
        :type image_tags: ImageTagsModule
        """

        self._image_tags = image_tags

    @property
    def pages_including(self):
        """Gets the pages_including of this ImageInsights.


        :return: The pages_including of this ImageInsights.
        :rtype: ImagesModule
        """
        return self._pages_including

    @pages_including.setter
    def pages_including(self, pages_including):
        """Sets the pages_including of this ImageInsights.


        :param pages_including: The pages_including of this ImageInsights.
        :type pages_including: ImagesModule
        """

        self._pages_including = pages_including

    @property
    def recipes(self):
        """Gets the recipes of this ImageInsights.


        :return: The recipes of this ImageInsights.
        :rtype: RecipesModule
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this ImageInsights.


        :param recipes: The recipes of this ImageInsights.
        :type recipes: RecipesModule
        """

        self._recipes = recipes

    @property
    def recognized_entity_groups(self):
        """Gets the recognized_entity_groups of this ImageInsights.


        :return: The recognized_entity_groups of this ImageInsights.
        :rtype: RecognizedEntitiesModule
        """
        return self._recognized_entity_groups

    @recognized_entity_groups.setter
    def recognized_entity_groups(self, recognized_entity_groups):
        """Sets the recognized_entity_groups of this ImageInsights.


        :param recognized_entity_groups: The recognized_entity_groups of this ImageInsights.
        :type recognized_entity_groups: RecognizedEntitiesModule
        """

        self._recognized_entity_groups = recognized_entity_groups

    @property
    def related_collections(self):
        """Gets the related_collections of this ImageInsights.


        :return: The related_collections of this ImageInsights.
        :rtype: RelatedCollectionsModule
        """
        return self._related_collections

    @related_collections.setter
    def related_collections(self, related_collections):
        """Sets the related_collections of this ImageInsights.


        :param related_collections: The related_collections of this ImageInsights.
        :type related_collections: RelatedCollectionsModule
        """

        self._related_collections = related_collections

    @property
    def related_searches(self):
        """Gets the related_searches of this ImageInsights.


        :return: The related_searches of this ImageInsights.
        :rtype: RelatedSearchesModule
        """
        return self._related_searches

    @related_searches.setter
    def related_searches(self, related_searches):
        """Sets the related_searches of this ImageInsights.


        :param related_searches: The related_searches of this ImageInsights.
        :type related_searches: RelatedSearchesModule
        """

        self._related_searches = related_searches

    @property
    def shopping_sources(self):
        """Gets the shopping_sources of this ImageInsights.


        :return: The shopping_sources of this ImageInsights.
        :rtype: AggregateOffer
        """
        return self._shopping_sources

    @shopping_sources.setter
    def shopping_sources(self, shopping_sources):
        """Sets the shopping_sources of this ImageInsights.


        :param shopping_sources: The shopping_sources of this ImageInsights.
        :type shopping_sources: AggregateOffer
        """

        self._shopping_sources = shopping_sources

    @property
    def visually_similar_images(self):
        """Gets the visually_similar_images of this ImageInsights.


        :return: The visually_similar_images of this ImageInsights.
        :rtype: ImagesModule
        """
        return self._visually_similar_images

    @visually_similar_images.setter
    def visually_similar_images(self, visually_similar_images):
        """Sets the visually_similar_images of this ImageInsights.


        :param visually_similar_images: The visually_similar_images of this ImageInsights.
        :type visually_similar_images: ImagesModule
        """

        self._visually_similar_images = visually_similar_images

    @property
    def visually_similar_products(self):
        """Gets the visually_similar_products of this ImageInsights.


        :return: The visually_similar_products of this ImageInsights.
        :rtype: ImagesModule
        """
        return self._visually_similar_products

    @visually_similar_products.setter
    def visually_similar_products(self, visually_similar_products):
        """Sets the visually_similar_products of this ImageInsights.


        :param visually_similar_products: The visually_similar_products of this ImageInsights.
        :type visually_similar_products: ImagesModule
        """

        self._visually_similar_products = visually_similar_products

    @property
    def read_link(self):
        """Gets the read_link of this ImageInsights.

        The URL that returns this resource.

        :return: The read_link of this ImageInsights.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this ImageInsights.

        The URL that returns this resource.

        :param read_link: The read_link of this ImageInsights.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this ImageInsights.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this ImageInsights.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this ImageInsights.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this ImageInsights.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this ImageInsights.

        A String identifier.

        :return: The id of this ImageInsights.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageInsights.

        A String identifier.

        :param id: The id of this ImageInsights.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImageInsights.


        :return: The type of this ImageInsights.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageInsights.


        :param type: The type of this ImageInsights.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
