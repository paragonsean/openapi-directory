# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query import Query
from openapi_server import util


class ImageInsightsImageCaption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, data_source_url: str=None, related_searches: List[Query]=None):
        """ImageInsightsImageCaption - a model defined in OpenAPI

        :param caption: The caption of this ImageInsightsImageCaption.
        :param data_source_url: The data_source_url of this ImageInsightsImageCaption.
        :param related_searches: The related_searches of this ImageInsightsImageCaption.
        """
        self.openapi_types = {
            'caption': str,
            'data_source_url': str,
            'related_searches': List[Query]
        }

        self.attribute_map = {
            'caption': 'caption',
            'data_source_url': 'dataSourceUrl',
            'related_searches': 'relatedSearches'
        }

        self._caption = caption
        self._data_source_url = data_source_url
        self._related_searches = related_searches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageInsightsImageCaption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageInsightsImageCaption of this ImageInsightsImageCaption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this ImageInsightsImageCaption.

        A caption about the image.

        :return: The caption of this ImageInsightsImageCaption.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ImageInsightsImageCaption.

        A caption about the image.

        :param caption: The caption of this ImageInsightsImageCaption.
        :type caption: str
        """
        if caption is None:
            raise ValueError("Invalid value for `caption`, must not be `None`")

        self._caption = caption

    @property
    def data_source_url(self):
        """Gets the data_source_url of this ImageInsightsImageCaption.

        The URL to the website where the caption was found. You must attribute the caption to the source. For example, by displaying the domain name from the URL next to the caption and using the URL to link to the source website.

        :return: The data_source_url of this ImageInsightsImageCaption.
        :rtype: str
        """
        return self._data_source_url

    @data_source_url.setter
    def data_source_url(self, data_source_url):
        """Sets the data_source_url of this ImageInsightsImageCaption.

        The URL to the website where the caption was found. You must attribute the caption to the source. For example, by displaying the domain name from the URL next to the caption and using the URL to link to the source website.

        :param data_source_url: The data_source_url of this ImageInsightsImageCaption.
        :type data_source_url: str
        """
        if data_source_url is None:
            raise ValueError("Invalid value for `data_source_url`, must not be `None`")

        self._data_source_url = data_source_url

    @property
    def related_searches(self):
        """Gets the related_searches of this ImageInsightsImageCaption.

        A list of entities found in the caption. Use the contents of the Query object to find the entity in the caption and create a link. The link takes the user to images of the entity.

        :return: The related_searches of this ImageInsightsImageCaption.
        :rtype: List[Query]
        """
        return self._related_searches

    @related_searches.setter
    def related_searches(self, related_searches):
        """Sets the related_searches of this ImageInsightsImageCaption.

        A list of entities found in the caption. Use the contents of the Query object to find the entity in the caption and create a link. The link takes the user to images of the entity.

        :param related_searches: The related_searches of this ImageInsightsImageCaption.
        :type related_searches: List[Query]
        """
        if related_searches is None:
            raise ValueError("Invalid value for `related_searches`, must not be `None`")

        self._related_searches = related_searches
