# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_object import ImageObject
from openapi_server.models.pivot_suggestions import PivotSuggestions
from openapi_server.models.query import Query
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server import util


class Images(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_offset: int=None, pivot_suggestions: List[PivotSuggestions]=None, query_expansions: List[Query]=None, similar_terms: List[Query]=None, value: List[ImageObject]=None, total_estimated_matches: int=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """Images - a model defined in OpenAPI

        :param next_offset: The next_offset of this Images.
        :param pivot_suggestions: The pivot_suggestions of this Images.
        :param query_expansions: The query_expansions of this Images.
        :param similar_terms: The similar_terms of this Images.
        :param value: The value of this Images.
        :param total_estimated_matches: The total_estimated_matches of this Images.
        :param read_link: The read_link of this Images.
        :param web_search_url: The web_search_url of this Images.
        :param id: The id of this Images.
        :param type: The type of this Images.
        """
        self.openapi_types = {
            'next_offset': int,
            'pivot_suggestions': List[PivotSuggestions],
            'query_expansions': List[Query],
            'similar_terms': List[Query],
            'value': List[ImageObject],
            'total_estimated_matches': int,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'next_offset': 'nextOffset',
            'pivot_suggestions': 'pivotSuggestions',
            'query_expansions': 'queryExpansions',
            'similar_terms': 'similarTerms',
            'value': 'value',
            'total_estimated_matches': 'totalEstimatedMatches',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._next_offset = next_offset
        self._pivot_suggestions = pivot_suggestions
        self._query_expansions = query_expansions
        self._similar_terms = similar_terms
        self._value = value
        self._total_estimated_matches = total_estimated_matches
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Images':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Images of this Images.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_offset(self):
        """Gets the next_offset of this Images.

        Used as part of deduping. Tells client the next offset that client should use in the next pagination request

        :return: The next_offset of this Images.
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this Images.

        Used as part of deduping. Tells client the next offset that client should use in the next pagination request

        :param next_offset: The next_offset of this Images.
        :type next_offset: int
        """

        self._next_offset = next_offset

    @property
    def pivot_suggestions(self):
        """Gets the pivot_suggestions of this Images.

        A list of segments in the original query. For example, if the query was Red Flowers, Bing might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as Green Flowers and Yellow Flowers.

        :return: The pivot_suggestions of this Images.
        :rtype: List[PivotSuggestions]
        """
        return self._pivot_suggestions

    @pivot_suggestions.setter
    def pivot_suggestions(self, pivot_suggestions):
        """Sets the pivot_suggestions of this Images.

        A list of segments in the original query. For example, if the query was Red Flowers, Bing might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as Green Flowers and Yellow Flowers.

        :param pivot_suggestions: The pivot_suggestions of this Images.
        :type pivot_suggestions: List[PivotSuggestions]
        """

        self._pivot_suggestions = pivot_suggestions

    @property
    def query_expansions(self):
        """Gets the query_expansions of this Images.

        A list of expanded queries that narrows the original query. For example, if the query was Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone, and Microsoft Surface Hub.

        :return: The query_expansions of this Images.
        :rtype: List[Query]
        """
        return self._query_expansions

    @query_expansions.setter
    def query_expansions(self, query_expansions):
        """Sets the query_expansions of this Images.

        A list of expanded queries that narrows the original query. For example, if the query was Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone, and Microsoft Surface Hub.

        :param query_expansions: The query_expansions of this Images.
        :type query_expansions: List[Query]
        """

        self._query_expansions = query_expansions

    @property
    def similar_terms(self):
        """Gets the similar_terms of this Images.

        A list of terms that are similar in meaning to the user's query term.

        :return: The similar_terms of this Images.
        :rtype: List[Query]
        """
        return self._similar_terms

    @similar_terms.setter
    def similar_terms(self, similar_terms):
        """Sets the similar_terms of this Images.

        A list of terms that are similar in meaning to the user's query term.

        :param similar_terms: The similar_terms of this Images.
        :type similar_terms: List[Query]
        """

        self._similar_terms = similar_terms

    @property
    def value(self):
        """Gets the value of this Images.

        A list of image objects that are relevant to the query. If there are no results, the List is empty.

        :return: The value of this Images.
        :rtype: List[ImageObject]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Images.

        A list of image objects that are relevant to the query. If there are no results, the List is empty.

        :param value: The value of this Images.
        :type value: List[ImageObject]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def total_estimated_matches(self):
        """Gets the total_estimated_matches of this Images.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :return: The total_estimated_matches of this Images.
        :rtype: int
        """
        return self._total_estimated_matches

    @total_estimated_matches.setter
    def total_estimated_matches(self, total_estimated_matches):
        """Sets the total_estimated_matches of this Images.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :param total_estimated_matches: The total_estimated_matches of this Images.
        :type total_estimated_matches: int
        """

        self._total_estimated_matches = total_estimated_matches

    @property
    def read_link(self):
        """Gets the read_link of this Images.

        The URL that returns this resource.

        :return: The read_link of this Images.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this Images.

        The URL that returns this resource.

        :param read_link: The read_link of this Images.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Images.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Images.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Images.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Images.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Images.

        A String identifier.

        :return: The id of this Images.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Images.

        A String identifier.

        :param id: The id of this Images.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Images.


        :return: The type of this Images.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Images.


        :param type: The type of this Images.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
