/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognizedEntityGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognizedEntityGroup::OAIRecognizedEntityGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognizedEntityGroup::OAIRecognizedEntityGroup() {
    this->initializeModel();
}

OAIRecognizedEntityGroup::~OAIRecognizedEntityGroup() {}

void OAIRecognizedEntityGroup::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_recognized_entity_regions_isSet = false;
    m_recognized_entity_regions_isValid = false;
}

void OAIRecognizedEntityGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognizedEntityGroup::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recognized_entity_regions_isValid = ::OpenAPI::fromJsonValue(m_recognized_entity_regions, json[QString("recognizedEntityRegions")]);
    m_recognized_entity_regions_isSet = !json[QString("recognizedEntityRegions")].isNull() && m_recognized_entity_regions_isValid;
}

QString OAIRecognizedEntityGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognizedEntityGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recognized_entity_regions.size() > 0) {
        obj.insert(QString("recognizedEntityRegions"), ::OpenAPI::toJsonValue(m_recognized_entity_regions));
    }
    return obj;
}

QString OAIRecognizedEntityGroup::getName() const {
    return m_name;
}
void OAIRecognizedEntityGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecognizedEntityGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecognizedEntityGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRecognizedEntityRegion> OAIRecognizedEntityGroup::getRecognizedEntityRegions() const {
    return m_recognized_entity_regions;
}
void OAIRecognizedEntityGroup::setRecognizedEntityRegions(const QList<OAIRecognizedEntityRegion> &recognized_entity_regions) {
    m_recognized_entity_regions = recognized_entity_regions;
    m_recognized_entity_regions_isSet = true;
}

bool OAIRecognizedEntityGroup::is_recognized_entity_regions_Set() const{
    return m_recognized_entity_regions_isSet;
}

bool OAIRecognizedEntityGroup::is_recognized_entity_regions_Valid() const{
    return m_recognized_entity_regions_isValid;
}

bool OAIRecognizedEntityGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognized_entity_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognizedEntityGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_recognized_entity_regions_isValid && true;
}

} // namespace OpenAPI
