/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageGallery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageGallery::OAIImageGallery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageGallery::OAIImageGallery() {
    this->initializeModel();
}

OAIImageGallery::~OAIImageGallery() {}

void OAIImageGallery::initializeModel() {

    m_followers_count_isSet = false;
    m_followers_count_isValid = false;

    m_images_count_isSet = false;
    m_images_count_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImageGallery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageGallery::fromJsonObject(QJsonObject json) {

    m_followers_count_isValid = ::OpenAPI::fromJsonValue(m_followers_count, json[QString("followersCount")]);
    m_followers_count_isSet = !json[QString("followersCount")].isNull() && m_followers_count_isValid;

    m_images_count_isValid = ::OpenAPI::fromJsonValue(m_images_count, json[QString("imagesCount")]);
    m_images_count_isSet = !json[QString("imagesCount")].isNull() && m_images_count_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImageGallery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageGallery::asJsonObject() const {
    QJsonObject obj;
    if (m_followers_count_isSet) {
        obj.insert(QString("followersCount"), ::OpenAPI::toJsonValue(m_followers_count));
    }
    if (m_images_count_isSet) {
        obj.insert(QString("imagesCount"), ::OpenAPI::toJsonValue(m_images_count));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

qint64 OAIImageGallery::getFollowersCount() const {
    return m_followers_count;
}
void OAIImageGallery::setFollowersCount(const qint64 &followers_count) {
    m_followers_count = followers_count;
    m_followers_count_isSet = true;
}

bool OAIImageGallery::is_followers_count_Set() const{
    return m_followers_count_isSet;
}

bool OAIImageGallery::is_followers_count_Valid() const{
    return m_followers_count_isValid;
}

qint64 OAIImageGallery::getImagesCount() const {
    return m_images_count;
}
void OAIImageGallery::setImagesCount(const qint64 &images_count) {
    m_images_count = images_count;
    m_images_count_isSet = true;
}

bool OAIImageGallery::is_images_count_Set() const{
    return m_images_count_isSet;
}

bool OAIImageGallery::is_images_count_Valid() const{
    return m_images_count_isValid;
}

QString OAIImageGallery::getSource() const {
    return m_source;
}
void OAIImageGallery::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImageGallery::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImageGallery::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIImageGallery::getDatePublished() const {
    return m_date_published;
}
void OAIImageGallery::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIImageGallery::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIImageGallery::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QList<OAIThing> OAIImageGallery::getProvider() const {
    return m_provider;
}
void OAIImageGallery::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIImageGallery::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIImageGallery::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIImageGallery::getText() const {
    return m_text;
}
void OAIImageGallery::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIImageGallery::is_text_Set() const{
    return m_text_isSet;
}

bool OAIImageGallery::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIImageGallery::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIImageGallery::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIImageGallery::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIImageGallery::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIImageGallery::getAlternateName() const {
    return m_alternate_name;
}
void OAIImageGallery::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIImageGallery::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIImageGallery::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIImageGallery::getBingId() const {
    return m_bing_id;
}
void OAIImageGallery::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIImageGallery::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIImageGallery::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIImageGallery::getDescription() const {
    return m_description;
}
void OAIImageGallery::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageGallery::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageGallery::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIImageGallery::getImage() const {
    return m_image;
}
void OAIImageGallery::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageGallery::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageGallery::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImageGallery::getName() const {
    return m_name;
}
void OAIImageGallery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageGallery::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageGallery::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageGallery::getUrl() const {
    return m_url;
}
void OAIImageGallery::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageGallery::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageGallery::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIImageGallery::getReadLink() const {
    return m_read_link;
}
void OAIImageGallery::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImageGallery::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImageGallery::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImageGallery::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageGallery::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageGallery::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageGallery::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageGallery::getId() const {
    return m_id;
}
void OAIImageGallery::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageGallery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageGallery::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageGallery::getType() const {
    return m__type;
}
void OAIImageGallery::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageGallery::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageGallery::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImageGallery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_followers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageGallery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
