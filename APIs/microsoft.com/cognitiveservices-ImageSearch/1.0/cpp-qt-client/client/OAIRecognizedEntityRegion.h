/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecognizedEntityRegion.h
 *
 * Defines a region of the image where an entity was found and a list of entities that might match it.
 */

#ifndef OAIRecognizedEntityRegion_H
#define OAIRecognizedEntityRegion_H

#include <QJsonObject>

#include "OAINormalizedRectangle.h"
#include "OAIRecognizedEntity.h"
#include "OAIResponse.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecognizedEntity;
class OAINormalizedRectangle;

class OAIRecognizedEntityRegion : public OAIObject {
public:
    OAIRecognizedEntityRegion();
    OAIRecognizedEntityRegion(QString json);
    ~OAIRecognizedEntityRegion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIRecognizedEntity> getMatchingEntities() const;
    void setMatchingEntities(const QList<OAIRecognizedEntity> &matching_entities);
    bool is_matching_entities_Set() const;
    bool is_matching_entities_Valid() const;

    OAINormalizedRectangle getRegion() const;
    void setRegion(const OAINormalizedRectangle &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getReadLink() const;
    void setReadLink(const QString &read_link);
    bool is_read_link_Set() const;
    bool is_read_link_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIRecognizedEntity> m_matching_entities;
    bool m_matching_entities_isSet;
    bool m_matching_entities_isValid;

    OAINormalizedRectangle m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_read_link;
    bool m_read_link_isSet;
    bool m_read_link_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecognizedEntityRegion)

#endif // OAIRecognizedEntityRegion_H
