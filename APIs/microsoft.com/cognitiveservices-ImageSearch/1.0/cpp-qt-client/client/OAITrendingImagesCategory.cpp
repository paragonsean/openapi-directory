/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingImagesCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingImagesCategory::OAITrendingImagesCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingImagesCategory::OAITrendingImagesCategory() {
    this->initializeModel();
}

OAITrendingImagesCategory::~OAITrendingImagesCategory() {}

void OAITrendingImagesCategory::initializeModel() {

    m_tiles_isSet = false;
    m_tiles_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITrendingImagesCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingImagesCategory::fromJsonObject(QJsonObject json) {

    m_tiles_isValid = ::OpenAPI::fromJsonValue(m_tiles, json[QString("tiles")]);
    m_tiles_isSet = !json[QString("tiles")].isNull() && m_tiles_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAITrendingImagesCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingImagesCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_tiles.size() > 0) {
        obj.insert(QString("tiles"), ::OpenAPI::toJsonValue(m_tiles));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAITrendingImagesTile> OAITrendingImagesCategory::getTiles() const {
    return m_tiles;
}
void OAITrendingImagesCategory::setTiles(const QList<OAITrendingImagesTile> &tiles) {
    m_tiles = tiles;
    m_tiles_isSet = true;
}

bool OAITrendingImagesCategory::is_tiles_Set() const{
    return m_tiles_isSet;
}

bool OAITrendingImagesCategory::is_tiles_Valid() const{
    return m_tiles_isValid;
}

QString OAITrendingImagesCategory::getTitle() const {
    return m_title;
}
void OAITrendingImagesCategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITrendingImagesCategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAITrendingImagesCategory::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITrendingImagesCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingImagesCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tiles_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
