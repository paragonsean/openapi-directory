/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipe::OAIRecipe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipe::OAIRecipe() {
    this->initializeModel();
}

OAIRecipe::~OAIRecipe() {}

void OAIRecipe::initializeModel() {

    m_cook_time_isSet = false;
    m_cook_time_isValid = false;

    m_prep_time_isSet = false;
    m_prep_time_isValid = false;

    m_total_time_isSet = false;
    m_total_time_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIRecipe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipe::fromJsonObject(QJsonObject json) {

    m_cook_time_isValid = ::OpenAPI::fromJsonValue(m_cook_time, json[QString("cookTime")]);
    m_cook_time_isSet = !json[QString("cookTime")].isNull() && m_cook_time_isValid;

    m_prep_time_isValid = ::OpenAPI::fromJsonValue(m_prep_time, json[QString("prepTime")]);
    m_prep_time_isSet = !json[QString("prepTime")].isNull() && m_prep_time_isValid;

    m_total_time_isValid = ::OpenAPI::fromJsonValue(m_total_time, json[QString("totalTime")]);
    m_total_time_isSet = !json[QString("totalTime")].isNull() && m_total_time_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIRecipe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipe::asJsonObject() const {
    QJsonObject obj;
    if (m_cook_time_isSet) {
        obj.insert(QString("cookTime"), ::OpenAPI::toJsonValue(m_cook_time));
    }
    if (m_prep_time_isSet) {
        obj.insert(QString("prepTime"), ::OpenAPI::toJsonValue(m_prep_time));
    }
    if (m_total_time_isSet) {
        obj.insert(QString("totalTime"), ::OpenAPI::toJsonValue(m_total_time));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIRecipe::getCookTime() const {
    return m_cook_time;
}
void OAIRecipe::setCookTime(const QString &cook_time) {
    m_cook_time = cook_time;
    m_cook_time_isSet = true;
}

bool OAIRecipe::is_cook_time_Set() const{
    return m_cook_time_isSet;
}

bool OAIRecipe::is_cook_time_Valid() const{
    return m_cook_time_isValid;
}

QString OAIRecipe::getPrepTime() const {
    return m_prep_time;
}
void OAIRecipe::setPrepTime(const QString &prep_time) {
    m_prep_time = prep_time;
    m_prep_time_isSet = true;
}

bool OAIRecipe::is_prep_time_Set() const{
    return m_prep_time_isSet;
}

bool OAIRecipe::is_prep_time_Valid() const{
    return m_prep_time_isValid;
}

QString OAIRecipe::getTotalTime() const {
    return m_total_time;
}
void OAIRecipe::setTotalTime(const QString &total_time) {
    m_total_time = total_time;
    m_total_time_isSet = true;
}

bool OAIRecipe::is_total_time_Set() const{
    return m_total_time_isSet;
}

bool OAIRecipe::is_total_time_Valid() const{
    return m_total_time_isValid;
}

QString OAIRecipe::getDatePublished() const {
    return m_date_published;
}
void OAIRecipe::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIRecipe::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIRecipe::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QList<OAIThing> OAIRecipe::getProvider() const {
    return m_provider;
}
void OAIRecipe::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRecipe::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRecipe::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIRecipe::getText() const {
    return m_text;
}
void OAIRecipe::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRecipe::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRecipe::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIRecipe::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIRecipe::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIRecipe::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIRecipe::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIRecipe::getAlternateName() const {
    return m_alternate_name;
}
void OAIRecipe::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIRecipe::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIRecipe::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIRecipe::getBingId() const {
    return m_bing_id;
}
void OAIRecipe::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIRecipe::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIRecipe::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIRecipe::getDescription() const {
    return m_description;
}
void OAIRecipe::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecipe::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecipe::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIRecipe::getImage() const {
    return m_image;
}
void OAIRecipe::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIRecipe::is_image_Set() const{
    return m_image_isSet;
}

bool OAIRecipe::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIRecipe::getName() const {
    return m_name;
}
void OAIRecipe::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecipe::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecipe::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecipe::getUrl() const {
    return m_url;
}
void OAIRecipe::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRecipe::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRecipe::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRecipe::getReadLink() const {
    return m_read_link;
}
void OAIRecipe::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIRecipe::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIRecipe::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIRecipe::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIRecipe::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIRecipe::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIRecipe::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIRecipe::getId() const {
    return m_id;
}
void OAIRecipe::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecipe::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecipe::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecipe::getType() const {
    return m__type;
}
void OAIRecipe::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIRecipe::is__type_Set() const{
    return m__type_isSet;
}

bool OAIRecipe::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIRecipe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cook_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prep_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipe::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
