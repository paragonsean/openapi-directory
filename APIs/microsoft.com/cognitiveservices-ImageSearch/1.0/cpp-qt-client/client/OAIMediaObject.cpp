/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaObject::OAIMediaObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaObject::OAIMediaObject() {
    this->initializeModel();
}

OAIMediaObject::~OAIMediaObject() {}

void OAIMediaObject::initializeModel() {

    m_content_size_isSet = false;
    m_content_size_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_encoding_format_isSet = false;
    m_encoding_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_host_page_display_url_isSet = false;
    m_host_page_display_url_isValid = false;

    m_host_page_url_isSet = false;
    m_host_page_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIMediaObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaObject::fromJsonObject(QJsonObject json) {

    m_content_size_isValid = ::OpenAPI::fromJsonValue(m_content_size, json[QString("contentSize")]);
    m_content_size_isSet = !json[QString("contentSize")].isNull() && m_content_size_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_encoding_format_isValid = ::OpenAPI::fromJsonValue(m_encoding_format, json[QString("encodingFormat")]);
    m_encoding_format_isSet = !json[QString("encodingFormat")].isNull() && m_encoding_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_host_page_display_url_isValid = ::OpenAPI::fromJsonValue(m_host_page_display_url, json[QString("hostPageDisplayUrl")]);
    m_host_page_display_url_isSet = !json[QString("hostPageDisplayUrl")].isNull() && m_host_page_display_url_isValid;

    m_host_page_url_isValid = ::OpenAPI::fromJsonValue(m_host_page_url, json[QString("hostPageUrl")]);
    m_host_page_url_isSet = !json[QString("hostPageUrl")].isNull() && m_host_page_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIMediaObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaObject::asJsonObject() const {
    QJsonObject obj;
    if (m_content_size_isSet) {
        obj.insert(QString("contentSize"), ::OpenAPI::toJsonValue(m_content_size));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_encoding_format_isSet) {
        obj.insert(QString("encodingFormat"), ::OpenAPI::toJsonValue(m_encoding_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_host_page_display_url_isSet) {
        obj.insert(QString("hostPageDisplayUrl"), ::OpenAPI::toJsonValue(m_host_page_display_url));
    }
    if (m_host_page_url_isSet) {
        obj.insert(QString("hostPageUrl"), ::OpenAPI::toJsonValue(m_host_page_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIMediaObject::getContentSize() const {
    return m_content_size;
}
void OAIMediaObject::setContentSize(const QString &content_size) {
    m_content_size = content_size;
    m_content_size_isSet = true;
}

bool OAIMediaObject::is_content_size_Set() const{
    return m_content_size_isSet;
}

bool OAIMediaObject::is_content_size_Valid() const{
    return m_content_size_isValid;
}

QString OAIMediaObject::getContentUrl() const {
    return m_content_url;
}
void OAIMediaObject::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIMediaObject::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIMediaObject::is_content_url_Valid() const{
    return m_content_url_isValid;
}

QString OAIMediaObject::getEncodingFormat() const {
    return m_encoding_format;
}
void OAIMediaObject::setEncodingFormat(const QString &encoding_format) {
    m_encoding_format = encoding_format;
    m_encoding_format_isSet = true;
}

bool OAIMediaObject::is_encoding_format_Set() const{
    return m_encoding_format_isSet;
}

bool OAIMediaObject::is_encoding_format_Valid() const{
    return m_encoding_format_isValid;
}

qint32 OAIMediaObject::getHeight() const {
    return m_height;
}
void OAIMediaObject::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIMediaObject::is_height_Set() const{
    return m_height_isSet;
}

bool OAIMediaObject::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIMediaObject::getHostPageDisplayUrl() const {
    return m_host_page_display_url;
}
void OAIMediaObject::setHostPageDisplayUrl(const QString &host_page_display_url) {
    m_host_page_display_url = host_page_display_url;
    m_host_page_display_url_isSet = true;
}

bool OAIMediaObject::is_host_page_display_url_Set() const{
    return m_host_page_display_url_isSet;
}

bool OAIMediaObject::is_host_page_display_url_Valid() const{
    return m_host_page_display_url_isValid;
}

QString OAIMediaObject::getHostPageUrl() const {
    return m_host_page_url;
}
void OAIMediaObject::setHostPageUrl(const QString &host_page_url) {
    m_host_page_url = host_page_url;
    m_host_page_url_isSet = true;
}

bool OAIMediaObject::is_host_page_url_Set() const{
    return m_host_page_url_isSet;
}

bool OAIMediaObject::is_host_page_url_Valid() const{
    return m_host_page_url_isValid;
}

qint32 OAIMediaObject::getWidth() const {
    return m_width;
}
void OAIMediaObject::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIMediaObject::is_width_Set() const{
    return m_width_isSet;
}

bool OAIMediaObject::is_width_Valid() const{
    return m_width_isValid;
}

QString OAIMediaObject::getDatePublished() const {
    return m_date_published;
}
void OAIMediaObject::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIMediaObject::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIMediaObject::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QList<OAIThing> OAIMediaObject::getProvider() const {
    return m_provider;
}
void OAIMediaObject::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIMediaObject::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIMediaObject::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIMediaObject::getText() const {
    return m_text;
}
void OAIMediaObject::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMediaObject::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMediaObject::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIMediaObject::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIMediaObject::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIMediaObject::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIMediaObject::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIMediaObject::getAlternateName() const {
    return m_alternate_name;
}
void OAIMediaObject::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIMediaObject::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIMediaObject::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIMediaObject::getBingId() const {
    return m_bing_id;
}
void OAIMediaObject::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIMediaObject::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIMediaObject::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIMediaObject::getDescription() const {
    return m_description;
}
void OAIMediaObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMediaObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMediaObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIMediaObject::getImage() const {
    return m_image;
}
void OAIMediaObject::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIMediaObject::is_image_Set() const{
    return m_image_isSet;
}

bool OAIMediaObject::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIMediaObject::getName() const {
    return m_name;
}
void OAIMediaObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMediaObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMediaObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMediaObject::getUrl() const {
    return m_url;
}
void OAIMediaObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMediaObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMediaObject::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMediaObject::getReadLink() const {
    return m_read_link;
}
void OAIMediaObject::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIMediaObject::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIMediaObject::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIMediaObject::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIMediaObject::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIMediaObject::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIMediaObject::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIMediaObject::getId() const {
    return m_id;
}
void OAIMediaObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMediaObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMediaObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMediaObject::getType() const {
    return m__type;
}
void OAIMediaObject::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIMediaObject::is__type_Set() const{
    return m__type_isSet;
}

bool OAIMediaObject::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIMediaObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_page_display_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
