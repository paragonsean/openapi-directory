/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInsights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInsights::OAIImageInsights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInsights::OAIImageInsights() {
    this->initializeModel();
}

OAIImageInsights::~OAIImageInsights() {}

void OAIImageInsights::initializeModel() {

    m_best_representative_query_isSet = false;
    m_best_representative_query_isValid = false;

    m_image_caption_isSet = false;
    m_image_caption_isValid = false;

    m_image_insights_token_isSet = false;
    m_image_insights_token_isValid = false;

    m_image_tags_isSet = false;
    m_image_tags_isValid = false;

    m_pages_including_isSet = false;
    m_pages_including_isValid = false;

    m_recipes_isSet = false;
    m_recipes_isValid = false;

    m_recognized_entity_groups_isSet = false;
    m_recognized_entity_groups_isValid = false;

    m_related_collections_isSet = false;
    m_related_collections_isValid = false;

    m_related_searches_isSet = false;
    m_related_searches_isValid = false;

    m_shopping_sources_isSet = false;
    m_shopping_sources_isValid = false;

    m_visually_similar_images_isSet = false;
    m_visually_similar_images_isValid = false;

    m_visually_similar_products_isSet = false;
    m_visually_similar_products_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImageInsights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInsights::fromJsonObject(QJsonObject json) {

    m_best_representative_query_isValid = ::OpenAPI::fromJsonValue(m_best_representative_query, json[QString("bestRepresentativeQuery")]);
    m_best_representative_query_isSet = !json[QString("bestRepresentativeQuery")].isNull() && m_best_representative_query_isValid;

    m_image_caption_isValid = ::OpenAPI::fromJsonValue(m_image_caption, json[QString("imageCaption")]);
    m_image_caption_isSet = !json[QString("imageCaption")].isNull() && m_image_caption_isValid;

    m_image_insights_token_isValid = ::OpenAPI::fromJsonValue(m_image_insights_token, json[QString("imageInsightsToken")]);
    m_image_insights_token_isSet = !json[QString("imageInsightsToken")].isNull() && m_image_insights_token_isValid;

    m_image_tags_isValid = ::OpenAPI::fromJsonValue(m_image_tags, json[QString("imageTags")]);
    m_image_tags_isSet = !json[QString("imageTags")].isNull() && m_image_tags_isValid;

    m_pages_including_isValid = ::OpenAPI::fromJsonValue(m_pages_including, json[QString("pagesIncluding")]);
    m_pages_including_isSet = !json[QString("pagesIncluding")].isNull() && m_pages_including_isValid;

    m_recipes_isValid = ::OpenAPI::fromJsonValue(m_recipes, json[QString("recipes")]);
    m_recipes_isSet = !json[QString("recipes")].isNull() && m_recipes_isValid;

    m_recognized_entity_groups_isValid = ::OpenAPI::fromJsonValue(m_recognized_entity_groups, json[QString("recognizedEntityGroups")]);
    m_recognized_entity_groups_isSet = !json[QString("recognizedEntityGroups")].isNull() && m_recognized_entity_groups_isValid;

    m_related_collections_isValid = ::OpenAPI::fromJsonValue(m_related_collections, json[QString("relatedCollections")]);
    m_related_collections_isSet = !json[QString("relatedCollections")].isNull() && m_related_collections_isValid;

    m_related_searches_isValid = ::OpenAPI::fromJsonValue(m_related_searches, json[QString("relatedSearches")]);
    m_related_searches_isSet = !json[QString("relatedSearches")].isNull() && m_related_searches_isValid;

    m_shopping_sources_isValid = ::OpenAPI::fromJsonValue(m_shopping_sources, json[QString("shoppingSources")]);
    m_shopping_sources_isSet = !json[QString("shoppingSources")].isNull() && m_shopping_sources_isValid;

    m_visually_similar_images_isValid = ::OpenAPI::fromJsonValue(m_visually_similar_images, json[QString("visuallySimilarImages")]);
    m_visually_similar_images_isSet = !json[QString("visuallySimilarImages")].isNull() && m_visually_similar_images_isValid;

    m_visually_similar_products_isValid = ::OpenAPI::fromJsonValue(m_visually_similar_products, json[QString("visuallySimilarProducts")]);
    m_visually_similar_products_isSet = !json[QString("visuallySimilarProducts")].isNull() && m_visually_similar_products_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImageInsights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInsights::asJsonObject() const {
    QJsonObject obj;
    if (m_best_representative_query.isSet()) {
        obj.insert(QString("bestRepresentativeQuery"), ::OpenAPI::toJsonValue(m_best_representative_query));
    }
    if (m_image_caption.isSet()) {
        obj.insert(QString("imageCaption"), ::OpenAPI::toJsonValue(m_image_caption));
    }
    if (m_image_insights_token_isSet) {
        obj.insert(QString("imageInsightsToken"), ::OpenAPI::toJsonValue(m_image_insights_token));
    }
    if (m_image_tags.isSet()) {
        obj.insert(QString("imageTags"), ::OpenAPI::toJsonValue(m_image_tags));
    }
    if (m_pages_including.isSet()) {
        obj.insert(QString("pagesIncluding"), ::OpenAPI::toJsonValue(m_pages_including));
    }
    if (m_recipes.isSet()) {
        obj.insert(QString("recipes"), ::OpenAPI::toJsonValue(m_recipes));
    }
    if (m_recognized_entity_groups.isSet()) {
        obj.insert(QString("recognizedEntityGroups"), ::OpenAPI::toJsonValue(m_recognized_entity_groups));
    }
    if (m_related_collections.isSet()) {
        obj.insert(QString("relatedCollections"), ::OpenAPI::toJsonValue(m_related_collections));
    }
    if (m_related_searches.isSet()) {
        obj.insert(QString("relatedSearches"), ::OpenAPI::toJsonValue(m_related_searches));
    }
    if (m_shopping_sources.isSet()) {
        obj.insert(QString("shoppingSources"), ::OpenAPI::toJsonValue(m_shopping_sources));
    }
    if (m_visually_similar_images.isSet()) {
        obj.insert(QString("visuallySimilarImages"), ::OpenAPI::toJsonValue(m_visually_similar_images));
    }
    if (m_visually_similar_products.isSet()) {
        obj.insert(QString("visuallySimilarProducts"), ::OpenAPI::toJsonValue(m_visually_similar_products));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIQuery OAIImageInsights::getBestRepresentativeQuery() const {
    return m_best_representative_query;
}
void OAIImageInsights::setBestRepresentativeQuery(const OAIQuery &best_representative_query) {
    m_best_representative_query = best_representative_query;
    m_best_representative_query_isSet = true;
}

bool OAIImageInsights::is_best_representative_query_Set() const{
    return m_best_representative_query_isSet;
}

bool OAIImageInsights::is_best_representative_query_Valid() const{
    return m_best_representative_query_isValid;
}

OAIImageInsightsImageCaption OAIImageInsights::getImageCaption() const {
    return m_image_caption;
}
void OAIImageInsights::setImageCaption(const OAIImageInsightsImageCaption &image_caption) {
    m_image_caption = image_caption;
    m_image_caption_isSet = true;
}

bool OAIImageInsights::is_image_caption_Set() const{
    return m_image_caption_isSet;
}

bool OAIImageInsights::is_image_caption_Valid() const{
    return m_image_caption_isValid;
}

QString OAIImageInsights::getImageInsightsToken() const {
    return m_image_insights_token;
}
void OAIImageInsights::setImageInsightsToken(const QString &image_insights_token) {
    m_image_insights_token = image_insights_token;
    m_image_insights_token_isSet = true;
}

bool OAIImageInsights::is_image_insights_token_Set() const{
    return m_image_insights_token_isSet;
}

bool OAIImageInsights::is_image_insights_token_Valid() const{
    return m_image_insights_token_isValid;
}

OAIImageTagsModule OAIImageInsights::getImageTags() const {
    return m_image_tags;
}
void OAIImageInsights::setImageTags(const OAIImageTagsModule &image_tags) {
    m_image_tags = image_tags;
    m_image_tags_isSet = true;
}

bool OAIImageInsights::is_image_tags_Set() const{
    return m_image_tags_isSet;
}

bool OAIImageInsights::is_image_tags_Valid() const{
    return m_image_tags_isValid;
}

OAIImagesModule OAIImageInsights::getPagesIncluding() const {
    return m_pages_including;
}
void OAIImageInsights::setPagesIncluding(const OAIImagesModule &pages_including) {
    m_pages_including = pages_including;
    m_pages_including_isSet = true;
}

bool OAIImageInsights::is_pages_including_Set() const{
    return m_pages_including_isSet;
}

bool OAIImageInsights::is_pages_including_Valid() const{
    return m_pages_including_isValid;
}

OAIRecipesModule OAIImageInsights::getRecipes() const {
    return m_recipes;
}
void OAIImageInsights::setRecipes(const OAIRecipesModule &recipes) {
    m_recipes = recipes;
    m_recipes_isSet = true;
}

bool OAIImageInsights::is_recipes_Set() const{
    return m_recipes_isSet;
}

bool OAIImageInsights::is_recipes_Valid() const{
    return m_recipes_isValid;
}

OAIRecognizedEntitiesModule OAIImageInsights::getRecognizedEntityGroups() const {
    return m_recognized_entity_groups;
}
void OAIImageInsights::setRecognizedEntityGroups(const OAIRecognizedEntitiesModule &recognized_entity_groups) {
    m_recognized_entity_groups = recognized_entity_groups;
    m_recognized_entity_groups_isSet = true;
}

bool OAIImageInsights::is_recognized_entity_groups_Set() const{
    return m_recognized_entity_groups_isSet;
}

bool OAIImageInsights::is_recognized_entity_groups_Valid() const{
    return m_recognized_entity_groups_isValid;
}

OAIRelatedCollectionsModule OAIImageInsights::getRelatedCollections() const {
    return m_related_collections;
}
void OAIImageInsights::setRelatedCollections(const OAIRelatedCollectionsModule &related_collections) {
    m_related_collections = related_collections;
    m_related_collections_isSet = true;
}

bool OAIImageInsights::is_related_collections_Set() const{
    return m_related_collections_isSet;
}

bool OAIImageInsights::is_related_collections_Valid() const{
    return m_related_collections_isValid;
}

OAIRelatedSearchesModule OAIImageInsights::getRelatedSearches() const {
    return m_related_searches;
}
void OAIImageInsights::setRelatedSearches(const OAIRelatedSearchesModule &related_searches) {
    m_related_searches = related_searches;
    m_related_searches_isSet = true;
}

bool OAIImageInsights::is_related_searches_Set() const{
    return m_related_searches_isSet;
}

bool OAIImageInsights::is_related_searches_Valid() const{
    return m_related_searches_isValid;
}

OAIAggregateOffer OAIImageInsights::getShoppingSources() const {
    return m_shopping_sources;
}
void OAIImageInsights::setShoppingSources(const OAIAggregateOffer &shopping_sources) {
    m_shopping_sources = shopping_sources;
    m_shopping_sources_isSet = true;
}

bool OAIImageInsights::is_shopping_sources_Set() const{
    return m_shopping_sources_isSet;
}

bool OAIImageInsights::is_shopping_sources_Valid() const{
    return m_shopping_sources_isValid;
}

OAIImagesModule OAIImageInsights::getVisuallySimilarImages() const {
    return m_visually_similar_images;
}
void OAIImageInsights::setVisuallySimilarImages(const OAIImagesModule &visually_similar_images) {
    m_visually_similar_images = visually_similar_images;
    m_visually_similar_images_isSet = true;
}

bool OAIImageInsights::is_visually_similar_images_Set() const{
    return m_visually_similar_images_isSet;
}

bool OAIImageInsights::is_visually_similar_images_Valid() const{
    return m_visually_similar_images_isValid;
}

OAIImagesModule OAIImageInsights::getVisuallySimilarProducts() const {
    return m_visually_similar_products;
}
void OAIImageInsights::setVisuallySimilarProducts(const OAIImagesModule &visually_similar_products) {
    m_visually_similar_products = visually_similar_products;
    m_visually_similar_products_isSet = true;
}

bool OAIImageInsights::is_visually_similar_products_Set() const{
    return m_visually_similar_products_isSet;
}

bool OAIImageInsights::is_visually_similar_products_Valid() const{
    return m_visually_similar_products_isValid;
}

QString OAIImageInsights::getReadLink() const {
    return m_read_link;
}
void OAIImageInsights::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImageInsights::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImageInsights::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImageInsights::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageInsights::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageInsights::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageInsights::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageInsights::getId() const {
    return m_id;
}
void OAIImageInsights::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageInsights::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageInsights::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageInsights::getType() const {
    return m__type;
}
void OAIImageInsights::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageInsights::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageInsights::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImageInsights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_representative_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_caption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_insights_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_including.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognized_entity_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_collections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_searches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopping_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visually_similar_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visually_similar_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInsights::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
