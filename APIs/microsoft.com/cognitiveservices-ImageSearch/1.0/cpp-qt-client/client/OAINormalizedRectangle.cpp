/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINormalizedRectangle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINormalizedRectangle::OAINormalizedRectangle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINormalizedRectangle::OAINormalizedRectangle() {
    this->initializeModel();
}

OAINormalizedRectangle::~OAINormalizedRectangle() {}

void OAINormalizedRectangle::initializeModel() {

    m_bottom_isSet = false;
    m_bottom_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAINormalizedRectangle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINormalizedRectangle::fromJsonObject(QJsonObject json) {

    m_bottom_isValid = ::OpenAPI::fromJsonValue(m_bottom, json[QString("bottom")]);
    m_bottom_isSet = !json[QString("bottom")].isNull() && m_bottom_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAINormalizedRectangle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINormalizedRectangle::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_isSet) {
        obj.insert(QString("bottom"), ::OpenAPI::toJsonValue(m_bottom));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right_isSet) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

float OAINormalizedRectangle::getBottom() const {
    return m_bottom;
}
void OAINormalizedRectangle::setBottom(const float &bottom) {
    m_bottom = bottom;
    m_bottom_isSet = true;
}

bool OAINormalizedRectangle::is_bottom_Set() const{
    return m_bottom_isSet;
}

bool OAINormalizedRectangle::is_bottom_Valid() const{
    return m_bottom_isValid;
}

float OAINormalizedRectangle::getLeft() const {
    return m_left;
}
void OAINormalizedRectangle::setLeft(const float &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAINormalizedRectangle::is_left_Set() const{
    return m_left_isSet;
}

bool OAINormalizedRectangle::is_left_Valid() const{
    return m_left_isValid;
}

float OAINormalizedRectangle::getRight() const {
    return m_right;
}
void OAINormalizedRectangle::setRight(const float &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAINormalizedRectangle::is_right_Set() const{
    return m_right_isSet;
}

bool OAINormalizedRectangle::is_right_Valid() const{
    return m_right_isValid;
}

float OAINormalizedRectangle::getTop() const {
    return m_top;
}
void OAINormalizedRectangle::setTop(const float &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAINormalizedRectangle::is_top_Set() const{
    return m_top_isSet;
}

bool OAINormalizedRectangle::is_top_Valid() const{
    return m_top_isValid;
}

QString OAINormalizedRectangle::getAlternateName() const {
    return m_alternate_name;
}
void OAINormalizedRectangle::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAINormalizedRectangle::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAINormalizedRectangle::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAINormalizedRectangle::getBingId() const {
    return m_bing_id;
}
void OAINormalizedRectangle::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAINormalizedRectangle::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAINormalizedRectangle::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAINormalizedRectangle::getDescription() const {
    return m_description;
}
void OAINormalizedRectangle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINormalizedRectangle::is_description_Set() const{
    return m_description_isSet;
}

bool OAINormalizedRectangle::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAINormalizedRectangle::getImage() const {
    return m_image;
}
void OAINormalizedRectangle::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAINormalizedRectangle::is_image_Set() const{
    return m_image_isSet;
}

bool OAINormalizedRectangle::is_image_Valid() const{
    return m_image_isValid;
}

QString OAINormalizedRectangle::getName() const {
    return m_name;
}
void OAINormalizedRectangle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINormalizedRectangle::is_name_Set() const{
    return m_name_isSet;
}

bool OAINormalizedRectangle::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINormalizedRectangle::getUrl() const {
    return m_url;
}
void OAINormalizedRectangle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINormalizedRectangle::is_url_Set() const{
    return m_url_isSet;
}

bool OAINormalizedRectangle::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINormalizedRectangle::getReadLink() const {
    return m_read_link;
}
void OAINormalizedRectangle::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAINormalizedRectangle::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAINormalizedRectangle::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAINormalizedRectangle::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAINormalizedRectangle::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAINormalizedRectangle::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAINormalizedRectangle::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAINormalizedRectangle::getId() const {
    return m_id;
}
void OAINormalizedRectangle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINormalizedRectangle::is_id_Set() const{
    return m_id_isSet;
}

bool OAINormalizedRectangle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINormalizedRectangle::getType() const {
    return m__type;
}
void OAINormalizedRectangle::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAINormalizedRectangle::is__type_Set() const{
    return m__type_isSet;
}

bool OAINormalizedRectangle::is__type_Valid() const{
    return m__type_isValid;
}

bool OAINormalizedRectangle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINormalizedRectangle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bottom_isValid && m_left_isValid && m_right_isValid && m_top_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
