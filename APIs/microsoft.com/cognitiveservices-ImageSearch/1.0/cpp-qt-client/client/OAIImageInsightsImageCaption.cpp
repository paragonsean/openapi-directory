/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInsightsImageCaption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInsightsImageCaption::OAIImageInsightsImageCaption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInsightsImageCaption::OAIImageInsightsImageCaption() {
    this->initializeModel();
}

OAIImageInsightsImageCaption::~OAIImageInsightsImageCaption() {}

void OAIImageInsightsImageCaption::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_data_source_url_isSet = false;
    m_data_source_url_isValid = false;

    m_related_searches_isSet = false;
    m_related_searches_isValid = false;
}

void OAIImageInsightsImageCaption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInsightsImageCaption::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_data_source_url_isValid = ::OpenAPI::fromJsonValue(m_data_source_url, json[QString("dataSourceUrl")]);
    m_data_source_url_isSet = !json[QString("dataSourceUrl")].isNull() && m_data_source_url_isValid;

    m_related_searches_isValid = ::OpenAPI::fromJsonValue(m_related_searches, json[QString("relatedSearches")]);
    m_related_searches_isSet = !json[QString("relatedSearches")].isNull() && m_related_searches_isValid;
}

QString OAIImageInsightsImageCaption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInsightsImageCaption::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_data_source_url_isSet) {
        obj.insert(QString("dataSourceUrl"), ::OpenAPI::toJsonValue(m_data_source_url));
    }
    if (m_related_searches.size() > 0) {
        obj.insert(QString("relatedSearches"), ::OpenAPI::toJsonValue(m_related_searches));
    }
    return obj;
}

QString OAIImageInsightsImageCaption::getCaption() const {
    return m_caption;
}
void OAIImageInsightsImageCaption::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIImageInsightsImageCaption::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIImageInsightsImageCaption::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIImageInsightsImageCaption::getDataSourceUrl() const {
    return m_data_source_url;
}
void OAIImageInsightsImageCaption::setDataSourceUrl(const QString &data_source_url) {
    m_data_source_url = data_source_url;
    m_data_source_url_isSet = true;
}

bool OAIImageInsightsImageCaption::is_data_source_url_Set() const{
    return m_data_source_url_isSet;
}

bool OAIImageInsightsImageCaption::is_data_source_url_Valid() const{
    return m_data_source_url_isValid;
}

QList<OAIQuery> OAIImageInsightsImageCaption::getRelatedSearches() const {
    return m_related_searches;
}
void OAIImageInsightsImageCaption::setRelatedSearches(const QList<OAIQuery> &related_searches) {
    m_related_searches = related_searches;
    m_related_searches_isSet = true;
}

bool OAIImageInsightsImageCaption::is_related_searches_Set() const{
    return m_related_searches_isSet;
}

bool OAIImageInsightsImageCaption::is_related_searches_Valid() const{
    return m_related_searches_isValid;
}

bool OAIImageInsightsImageCaption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_searches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInsightsImageCaption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caption_isValid && m_data_source_url_isValid && m_related_searches_isValid && true;
}

} // namespace OpenAPI
