/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingImages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingImages::OAITrendingImages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingImages::OAITrendingImages() {
    this->initializeModel();
}

OAITrendingImages::~OAITrendingImages() {}

void OAITrendingImages::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAITrendingImages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingImages::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAITrendingImages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingImages::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAITrendingImagesCategory> OAITrendingImages::getCategories() const {
    return m_categories;
}
void OAITrendingImages::setCategories(const QList<OAITrendingImagesCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAITrendingImages::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAITrendingImages::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAITrendingImages::getReadLink() const {
    return m_read_link;
}
void OAITrendingImages::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAITrendingImages::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAITrendingImages::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAITrendingImages::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAITrendingImages::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAITrendingImages::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAITrendingImages::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAITrendingImages::getId() const {
    return m_id;
}
void OAITrendingImages::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrendingImages::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrendingImages::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrendingImages::getType() const {
    return m__type;
}
void OAITrendingImages::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAITrendingImages::is__type_Set() const{
    return m__type_isSet;
}

bool OAITrendingImages::is__type_Valid() const{
    return m__type_isValid;
}

bool OAITrendingImages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingImages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
