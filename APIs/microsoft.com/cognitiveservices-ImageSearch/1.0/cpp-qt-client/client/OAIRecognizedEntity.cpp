/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecognizedEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecognizedEntity::OAIRecognizedEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecognizedEntity::OAIRecognizedEntity() {
    this->initializeModel();
}

OAIRecognizedEntity::~OAIRecognizedEntity() {}

void OAIRecognizedEntity::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_match_confidence_isSet = false;
    m_match_confidence_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIRecognizedEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecognizedEntity::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_match_confidence_isValid = ::OpenAPI::fromJsonValue(m_match_confidence, json[QString("matchConfidence")]);
    m_match_confidence_isSet = !json[QString("matchConfidence")].isNull() && m_match_confidence_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIRecognizedEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecognizedEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_match_confidence_isSet) {
        obj.insert(QString("matchConfidence"), ::OpenAPI::toJsonValue(m_match_confidence));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIThing OAIRecognizedEntity::getEntity() const {
    return m_entity;
}
void OAIRecognizedEntity::setEntity(const OAIThing &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIRecognizedEntity::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIRecognizedEntity::is_entity_Valid() const{
    return m_entity_isValid;
}

float OAIRecognizedEntity::getMatchConfidence() const {
    return m_match_confidence;
}
void OAIRecognizedEntity::setMatchConfidence(const float &match_confidence) {
    m_match_confidence = match_confidence;
    m_match_confidence_isSet = true;
}

bool OAIRecognizedEntity::is_match_confidence_Set() const{
    return m_match_confidence_isSet;
}

bool OAIRecognizedEntity::is_match_confidence_Valid() const{
    return m_match_confidence_isValid;
}

QString OAIRecognizedEntity::getReadLink() const {
    return m_read_link;
}
void OAIRecognizedEntity::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIRecognizedEntity::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIRecognizedEntity::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIRecognizedEntity::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIRecognizedEntity::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIRecognizedEntity::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIRecognizedEntity::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIRecognizedEntity::getId() const {
    return m_id;
}
void OAIRecognizedEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecognizedEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecognizedEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecognizedEntity::getType() const {
    return m__type;
}
void OAIRecognizedEntity::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIRecognizedEntity::is__type_Set() const{
    return m__type_isSet;
}

bool OAIRecognizedEntity::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIRecognizedEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecognizedEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
