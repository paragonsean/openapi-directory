/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotSuggestions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotSuggestions::OAIPivotSuggestions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotSuggestions::OAIPivotSuggestions() {
    this->initializeModel();
}

OAIPivotSuggestions::~OAIPivotSuggestions() {}

void OAIPivotSuggestions::initializeModel() {

    m_pivot_isSet = false;
    m_pivot_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;
}

void OAIPivotSuggestions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotSuggestions::fromJsonObject(QJsonObject json) {

    m_pivot_isValid = ::OpenAPI::fromJsonValue(m_pivot, json[QString("pivot")]);
    m_pivot_isSet = !json[QString("pivot")].isNull() && m_pivot_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("suggestions")]);
    m_suggestions_isSet = !json[QString("suggestions")].isNull() && m_suggestions_isValid;
}

QString OAIPivotSuggestions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotSuggestions::asJsonObject() const {
    QJsonObject obj;
    if (m_pivot_isSet) {
        obj.insert(QString("pivot"), ::OpenAPI::toJsonValue(m_pivot));
    }
    if (m_suggestions.size() > 0) {
        obj.insert(QString("suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    return obj;
}

QString OAIPivotSuggestions::getPivot() const {
    return m_pivot;
}
void OAIPivotSuggestions::setPivot(const QString &pivot) {
    m_pivot = pivot;
    m_pivot_isSet = true;
}

bool OAIPivotSuggestions::is_pivot_Set() const{
    return m_pivot_isSet;
}

bool OAIPivotSuggestions::is_pivot_Valid() const{
    return m_pivot_isValid;
}

QList<OAIQuery> OAIPivotSuggestions::getSuggestions() const {
    return m_suggestions;
}
void OAIPivotSuggestions::setSuggestions(const QList<OAIQuery> &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAIPivotSuggestions::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAIPivotSuggestions::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

bool OAIPivotSuggestions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pivot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotSuggestions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pivot_isValid && m_suggestions_isValid && true;
}

} // namespace OpenAPI
