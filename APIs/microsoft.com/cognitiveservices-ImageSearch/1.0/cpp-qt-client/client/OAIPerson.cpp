/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_twitter_profile_isSet = false;
    m_twitter_profile_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_twitter_profile_isValid = ::OpenAPI::fromJsonValue(m_twitter_profile, json[QString("twitterProfile")]);
    m_twitter_profile_isSet = !json[QString("twitterProfile")].isNull() && m_twitter_profile_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_twitter_profile_isSet) {
        obj.insert(QString("twitterProfile"), ::OpenAPI::toJsonValue(m_twitter_profile));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIPerson::getJobTitle() const {
    return m_job_title;
}
void OAIPerson::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIPerson::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIPerson::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIPerson::getTwitterProfile() const {
    return m_twitter_profile;
}
void OAIPerson::setTwitterProfile(const QString &twitter_profile) {
    m_twitter_profile = twitter_profile;
    m_twitter_profile_isSet = true;
}

bool OAIPerson::is_twitter_profile_Set() const{
    return m_twitter_profile_isSet;
}

bool OAIPerson::is_twitter_profile_Valid() const{
    return m_twitter_profile_isValid;
}

QString OAIPerson::getAlternateName() const {
    return m_alternate_name;
}
void OAIPerson::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIPerson::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIPerson::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIPerson::getBingId() const {
    return m_bing_id;
}
void OAIPerson::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIPerson::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIPerson::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIPerson::getDescription() const {
    return m_description;
}
void OAIPerson::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPerson::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPerson::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIPerson::getImage() const {
    return m_image;
}
void OAIPerson::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPerson::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPerson::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPerson::getUrl() const {
    return m_url;
}
void OAIPerson::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPerson::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPerson::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPerson::getReadLink() const {
    return m_read_link;
}
void OAIPerson::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIPerson::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIPerson::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIPerson::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIPerson::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIPerson::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIPerson::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIPerson::getId() const {
    return m_id;
}
void OAIPerson::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerson::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPerson::getType() const {
    return m__type;
}
void OAIPerson::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIPerson::is__type_Set() const{
    return m__type_isSet;
}

bool OAIPerson::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
