/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseBase::OAIResponseBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseBase::OAIResponseBase() {
    this->initializeModel();
}

OAIResponseBase::~OAIResponseBase() {}

void OAIResponseBase::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIResponseBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseBase::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIResponseBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseBase::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIResponseBase::getType() const {
    return m__type;
}
void OAIResponseBase::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIResponseBase::is__type_Set() const{
    return m__type_isSet;
}

bool OAIResponseBase::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIResponseBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
