/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageSearchApi_H
#define OAI_OAIImageSearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIImages.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageSearchApi : public QObject {
    Q_OBJECT

public:
    OAIImageSearchApi(const int timeOut = 0);
    ~OAIImageSearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_bing_apis_sdk QString [required]
    * @param[in]  q QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  user_agent QString [optional]
    * @param[in]  x_ms_edge_client_id QString [optional]
    * @param[in]  x_ms_edge_client_ip QString [optional]
    * @param[in]  x_search_location QString [optional]
    * @param[in]  aspect QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  cc QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  freshness QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  id QString [optional]
    * @param[in]  image_content QString [optional]
    * @param[in]  image_type QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  mkt QString [optional]
    * @param[in]  max_file_size qint64 [optional]
    * @param[in]  max_height qint64 [optional]
    * @param[in]  max_width qint64 [optional]
    * @param[in]  min_file_size qint64 [optional]
    * @param[in]  min_height qint64 [optional]
    * @param[in]  min_width qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  safe_search QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  set_lang QString [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void imagesSearch(const QString &x_bing_apis_sdk, const QString &q, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_search_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aspect = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &freshness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mkt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &max_file_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_height = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_width = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &min_file_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &min_height = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &min_width = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &safe_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &set_lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void imagesSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void imagesSearchSignal(OAIImages summary);


    void imagesSearchSignalFull(OAIHttpRequestWorker *worker, OAIImages summary);

    Q_DECL_DEPRECATED_X("Use imagesSearchSignalError() instead")
    void imagesSearchSignalE(OAIImages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesSearchSignalError(OAIImages summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use imagesSearchSignalErrorFull() instead")
    void imagesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
