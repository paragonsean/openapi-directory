/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertiesItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertiesItem::OAIPropertiesItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertiesItem::OAIPropertiesItem() {
    this->initializeModel();
}

OAIPropertiesItem::~OAIPropertiesItem() {}

void OAIPropertiesItem::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPropertiesItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertiesItem::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIPropertiesItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertiesItem::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPropertiesItem::getType() const {
    return m__type;
}
void OAIPropertiesItem::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIPropertiesItem::is__type_Set() const{
    return m__type_isSet;
}

bool OAIPropertiesItem::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIPropertiesItem::getText() const {
    return m_text;
}
void OAIPropertiesItem::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPropertiesItem::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPropertiesItem::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPropertiesItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertiesItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
