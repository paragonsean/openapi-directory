/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingImagesTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingImagesTile::OAITrendingImagesTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingImagesTile::OAITrendingImagesTile() {
    this->initializeModel();
}

OAITrendingImagesTile::~OAITrendingImagesTile() {}

void OAITrendingImagesTile::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAITrendingImagesTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingImagesTile::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAITrendingImagesTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingImagesTile::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIImageObject OAITrendingImagesTile::getImage() const {
    return m_image;
}
void OAITrendingImagesTile::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITrendingImagesTile::is_image_Set() const{
    return m_image_isSet;
}

bool OAITrendingImagesTile::is_image_Valid() const{
    return m_image_isValid;
}

OAIQuery OAITrendingImagesTile::getQuery() const {
    return m_query;
}
void OAITrendingImagesTile::setQuery(const OAIQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITrendingImagesTile::is_query_Set() const{
    return m_query_isSet;
}

bool OAITrendingImagesTile::is_query_Valid() const{
    return m_query_isValid;
}

bool OAITrendingImagesTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingImagesTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
