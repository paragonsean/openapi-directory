/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ImageSearchClient);
  }
}(this, function(expect, ImageSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ImageSearchClient.ImageInsights();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageInsights', function() {
    it('should create an instance of ImageInsights', function() {
      // uncomment below and update the code to test ImageInsights
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be.a(ImageSearchClient.ImageInsights);
    });

    it('should have the property bestRepresentativeQuery (base name: "bestRepresentativeQuery")', function() {
      // uncomment below and update the code to test the property bestRepresentativeQuery
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property imageCaption (base name: "imageCaption")', function() {
      // uncomment below and update the code to test the property imageCaption
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property imageInsightsToken (base name: "imageInsightsToken")', function() {
      // uncomment below and update the code to test the property imageInsightsToken
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property imageTags (base name: "imageTags")', function() {
      // uncomment below and update the code to test the property imageTags
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property pagesIncluding (base name: "pagesIncluding")', function() {
      // uncomment below and update the code to test the property pagesIncluding
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property recipes (base name: "recipes")', function() {
      // uncomment below and update the code to test the property recipes
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property recognizedEntityGroups (base name: "recognizedEntityGroups")', function() {
      // uncomment below and update the code to test the property recognizedEntityGroups
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property relatedCollections (base name: "relatedCollections")', function() {
      // uncomment below and update the code to test the property relatedCollections
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property relatedSearches (base name: "relatedSearches")', function() {
      // uncomment below and update the code to test the property relatedSearches
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property shoppingSources (base name: "shoppingSources")', function() {
      // uncomment below and update the code to test the property shoppingSources
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property visuallySimilarImages (base name: "visuallySimilarImages")', function() {
      // uncomment below and update the code to test the property visuallySimilarImages
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

    it('should have the property visuallySimilarProducts (base name: "visuallySimilarProducts")', function() {
      // uncomment below and update the code to test the property visuallySimilarProducts
      //var instance = new ImageSearchClient.ImageInsights();
      //expect(instance).to.be();
    });

  });

}));
