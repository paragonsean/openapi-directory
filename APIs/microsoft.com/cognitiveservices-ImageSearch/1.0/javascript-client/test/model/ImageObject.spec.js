/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ImageSearchClient);
  }
}(this, function(expect, ImageSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ImageSearchClient.ImageObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageObject', function() {
    it('should create an instance of ImageObject', function() {
      // uncomment below and update the code to test ImageObject
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be.a(ImageSearchClient.ImageObject);
    });

    it('should have the property accentColor (base name: "accentColor")', function() {
      // uncomment below and update the code to test the property accentColor
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

    it('should have the property imageId (base name: "imageId")', function() {
      // uncomment below and update the code to test the property imageId
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

    it('should have the property imageInsightsToken (base name: "imageInsightsToken")', function() {
      // uncomment below and update the code to test the property imageInsightsToken
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

    it('should have the property insightsMetadata (base name: "insightsMetadata")', function() {
      // uncomment below and update the code to test the property insightsMetadata
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

    it('should have the property thumbnail (base name: "thumbnail")', function() {
      // uncomment below and update the code to test the property thumbnail
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

    it('should have the property visualWords (base name: "visualWords")', function() {
      // uncomment below and update the code to test the property visualWords
      //var instance = new ImageSearchClient.ImageObject();
      //expect(instance).to.be();
    });

  });

}));
