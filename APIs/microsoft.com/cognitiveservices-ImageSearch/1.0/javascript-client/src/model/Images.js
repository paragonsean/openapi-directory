/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageObject from './ImageObject';
import PivotSuggestions from './PivotSuggestions';
import Query from './Query';
import SearchResultsAnswer from './SearchResultsAnswer';

/**
 * The Images model module.
 * @module model/Images
 * @version 1.0
 */
class Images {
    /**
     * Constructs a new <code>Images</code>.
     * Defines an image answer
     * @alias module:model/Images
     * @extends module:model/SearchResultsAnswer
     * @implements module:model/SearchResultsAnswer
     * @param type {String} 
     */
    constructor(type) { 
        SearchResultsAnswer.initialize(this, type);
        Images.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Images</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Images} obj Optional instance to populate.
     * @return {module:model/Images} The populated <code>Images</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Images();
            SearchResultsAnswer.constructFromObject(data, obj);
            SearchResultsAnswer.constructFromObject(data, obj);

            if (data.hasOwnProperty('nextOffset')) {
                obj['nextOffset'] = ApiClient.convertToType(data['nextOffset'], 'Number');
            }
            if (data.hasOwnProperty('pivotSuggestions')) {
                obj['pivotSuggestions'] = ApiClient.convertToType(data['pivotSuggestions'], [PivotSuggestions]);
            }
            if (data.hasOwnProperty('queryExpansions')) {
                obj['queryExpansions'] = ApiClient.convertToType(data['queryExpansions'], [Query]);
            }
            if (data.hasOwnProperty('similarTerms')) {
                obj['similarTerms'] = ApiClient.convertToType(data['similarTerms'], [Query]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], [ImageObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Images</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Images</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Images.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['pivotSuggestions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivotSuggestions'])) {
                throw new Error("Expected the field `pivotSuggestions` to be an array in the JSON data but got " + data['pivotSuggestions']);
            }
            // validate the optional field `pivotSuggestions` (array)
            for (const item of data['pivotSuggestions']) {
                PivotSuggestions.validateJSON(item);
            };
        }
        if (data['queryExpansions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryExpansions'])) {
                throw new Error("Expected the field `queryExpansions` to be an array in the JSON data but got " + data['queryExpansions']);
            }
            // validate the optional field `queryExpansions` (array)
            for (const item of data['queryExpansions']) {
                Query.validateJSON(item);
            };
        }
        if (data['similarTerms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['similarTerms'])) {
                throw new Error("Expected the field `similarTerms` to be an array in the JSON data but got " + data['similarTerms']);
            }
            // validate the optional field `similarTerms` (array)
            for (const item of data['similarTerms']) {
                Query.validateJSON(item);
            };
        }
        if (data['value']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['value'])) {
                throw new Error("Expected the field `value` to be an array in the JSON data but got " + data['value']);
            }
            // validate the optional field `value` (array)
            for (const item of data['value']) {
                ImageObject.validateJSON(item);
            };
        }

        return true;
    }


}

Images.RequiredProperties = ["value", "_type"];

/**
 * Used as part of deduping. Tells client the next offset that client should use in the next pagination request
 * @member {Number} nextOffset
 */
Images.prototype['nextOffset'] = undefined;

/**
 * A list of segments in the original query. For example, if the query was Red Flowers, Bing might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as Green Flowers and Yellow Flowers.
 * @member {Array.<module:model/PivotSuggestions>} pivotSuggestions
 */
Images.prototype['pivotSuggestions'] = undefined;

/**
 * A list of expanded queries that narrows the original query. For example, if the query was Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone, and Microsoft Surface Hub.
 * @member {Array.<module:model/Query>} queryExpansions
 */
Images.prototype['queryExpansions'] = undefined;

/**
 * A list of terms that are similar in meaning to the user's query term.
 * @member {Array.<module:model/Query>} similarTerms
 */
Images.prototype['similarTerms'] = undefined;

/**
 * A list of image objects that are relevant to the query. If there are no results, the List is empty.
 * @member {Array.<module:model/ImageObject>} value
 */
Images.prototype['value'] = undefined;


// Implement SearchResultsAnswer interface:
/**
 * The URL that returns this resource.
 * @member {String} readLink
 */
SearchResultsAnswer.prototype['readLink'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
SearchResultsAnswer.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
SearchResultsAnswer.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
SearchResultsAnswer.prototype['_type'] = undefined;




export default Images;

