/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Query from './Query';

/**
 * The PivotSuggestions model module.
 * @module model/PivotSuggestions
 * @version 1.0
 */
class PivotSuggestions {
    /**
     * Constructs a new <code>PivotSuggestions</code>.
     * Defines the pivot segment.
     * @alias module:model/PivotSuggestions
     * @param pivot {String} The segment from the original query to pivot on.
     * @param suggestions {Array.<module:model/Query>} A list of suggested queries for the pivot.
     */
    constructor(pivot, suggestions) { 
        
        PivotSuggestions.initialize(this, pivot, suggestions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pivot, suggestions) { 
        obj['pivot'] = pivot;
        obj['suggestions'] = suggestions;
    }

    /**
     * Constructs a <code>PivotSuggestions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotSuggestions} obj Optional instance to populate.
     * @return {module:model/PivotSuggestions} The populated <code>PivotSuggestions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotSuggestions();

            if (data.hasOwnProperty('pivot')) {
                obj['pivot'] = ApiClient.convertToType(data['pivot'], 'String');
            }
            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = ApiClient.convertToType(data['suggestions'], [Query]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotSuggestions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotSuggestions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PivotSuggestions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pivot'] && !(typeof data['pivot'] === 'string' || data['pivot'] instanceof String)) {
            throw new Error("Expected the field `pivot` to be a primitive type in the JSON string but got " + data['pivot']);
        }
        if (data['suggestions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['suggestions'])) {
                throw new Error("Expected the field `suggestions` to be an array in the JSON data but got " + data['suggestions']);
            }
            // validate the optional field `suggestions` (array)
            for (const item of data['suggestions']) {
                Query.validateJSON(item);
            };
        }

        return true;
    }


}

PivotSuggestions.RequiredProperties = ["pivot", "suggestions"];

/**
 * The segment from the original query to pivot on.
 * @member {String} pivot
 */
PivotSuggestions.prototype['pivot'] = undefined;

/**
 * A list of suggested queries for the pivot.
 * @member {Array.<module:model/Query>} suggestions
 */
PivotSuggestions.prototype['suggestions'] = undefined;






export default PivotSuggestions;

