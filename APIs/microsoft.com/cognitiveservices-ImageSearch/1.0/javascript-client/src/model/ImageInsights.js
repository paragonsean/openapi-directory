/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregateOffer from './AggregateOffer';
import ImageInsightsImageCaption from './ImageInsightsImageCaption';
import ImageTagsModule from './ImageTagsModule';
import ImagesModule from './ImagesModule';
import Query from './Query';
import RecipesModule from './RecipesModule';
import RecognizedEntitiesModule from './RecognizedEntitiesModule';
import RelatedCollectionsModule from './RelatedCollectionsModule';
import RelatedSearchesModule from './RelatedSearchesModule';
import Response from './Response';

/**
 * The ImageInsights model module.
 * @module model/ImageInsights
 * @version 1.0
 */
class ImageInsights {
    /**
     * Constructs a new <code>ImageInsights</code>.
     * The top-level object that the response includes when an image insights request succeeds. For information about requesting image insights, see the [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken) query parameter. The modules query parameter affects the fields that Bing includes in the response. If you set [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested) to only Caption, then this object includes only the imageCaption field.
     * @alias module:model/ImageInsights
     * @extends module:model/Response
     * @implements module:model/Response
     * @param type {String} 
     */
    constructor(type) { 
        Response.initialize(this, type);
        ImageInsights.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ImageInsights</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageInsights} obj Optional instance to populate.
     * @return {module:model/ImageInsights} The populated <code>ImageInsights</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageInsights();
            Response.constructFromObject(data, obj);
            Response.constructFromObject(data, obj);

            if (data.hasOwnProperty('bestRepresentativeQuery')) {
                obj['bestRepresentativeQuery'] = Query.constructFromObject(data['bestRepresentativeQuery']);
            }
            if (data.hasOwnProperty('imageCaption')) {
                obj['imageCaption'] = ImageInsightsImageCaption.constructFromObject(data['imageCaption']);
            }
            if (data.hasOwnProperty('imageInsightsToken')) {
                obj['imageInsightsToken'] = ApiClient.convertToType(data['imageInsightsToken'], 'String');
            }
            if (data.hasOwnProperty('imageTags')) {
                obj['imageTags'] = ImageTagsModule.constructFromObject(data['imageTags']);
            }
            if (data.hasOwnProperty('pagesIncluding')) {
                obj['pagesIncluding'] = ImagesModule.constructFromObject(data['pagesIncluding']);
            }
            if (data.hasOwnProperty('recipes')) {
                obj['recipes'] = RecipesModule.constructFromObject(data['recipes']);
            }
            if (data.hasOwnProperty('recognizedEntityGroups')) {
                obj['recognizedEntityGroups'] = RecognizedEntitiesModule.constructFromObject(data['recognizedEntityGroups']);
            }
            if (data.hasOwnProperty('relatedCollections')) {
                obj['relatedCollections'] = RelatedCollectionsModule.constructFromObject(data['relatedCollections']);
            }
            if (data.hasOwnProperty('relatedSearches')) {
                obj['relatedSearches'] = RelatedSearchesModule.constructFromObject(data['relatedSearches']);
            }
            if (data.hasOwnProperty('shoppingSources')) {
                obj['shoppingSources'] = AggregateOffer.constructFromObject(data['shoppingSources']);
            }
            if (data.hasOwnProperty('visuallySimilarImages')) {
                obj['visuallySimilarImages'] = ImagesModule.constructFromObject(data['visuallySimilarImages']);
            }
            if (data.hasOwnProperty('visuallySimilarProducts')) {
                obj['visuallySimilarProducts'] = ImagesModule.constructFromObject(data['visuallySimilarProducts']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageInsights</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageInsights</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageInsights.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bestRepresentativeQuery`
        if (data['bestRepresentativeQuery']) { // data not null
          Query.validateJSON(data['bestRepresentativeQuery']);
        }
        // validate the optional field `imageCaption`
        if (data['imageCaption']) { // data not null
          ImageInsightsImageCaption.validateJSON(data['imageCaption']);
        }
        // ensure the json data is a string
        if (data['imageInsightsToken'] && !(typeof data['imageInsightsToken'] === 'string' || data['imageInsightsToken'] instanceof String)) {
            throw new Error("Expected the field `imageInsightsToken` to be a primitive type in the JSON string but got " + data['imageInsightsToken']);
        }
        // validate the optional field `imageTags`
        if (data['imageTags']) { // data not null
          ImageTagsModule.validateJSON(data['imageTags']);
        }
        // validate the optional field `pagesIncluding`
        if (data['pagesIncluding']) { // data not null
          ImagesModule.validateJSON(data['pagesIncluding']);
        }
        // validate the optional field `recipes`
        if (data['recipes']) { // data not null
          RecipesModule.validateJSON(data['recipes']);
        }
        // validate the optional field `recognizedEntityGroups`
        if (data['recognizedEntityGroups']) { // data not null
          RecognizedEntitiesModule.validateJSON(data['recognizedEntityGroups']);
        }
        // validate the optional field `relatedCollections`
        if (data['relatedCollections']) { // data not null
          RelatedCollectionsModule.validateJSON(data['relatedCollections']);
        }
        // validate the optional field `relatedSearches`
        if (data['relatedSearches']) { // data not null
          RelatedSearchesModule.validateJSON(data['relatedSearches']);
        }
        // validate the optional field `shoppingSources`
        if (data['shoppingSources']) { // data not null
          AggregateOffer.validateJSON(data['shoppingSources']);
        }
        // validate the optional field `visuallySimilarImages`
        if (data['visuallySimilarImages']) { // data not null
          ImagesModule.validateJSON(data['visuallySimilarImages']);
        }
        // validate the optional field `visuallySimilarProducts`
        if (data['visuallySimilarProducts']) { // data not null
          ImagesModule.validateJSON(data['visuallySimilarProducts']);
        }

        return true;
    }


}

ImageInsights.RequiredProperties = ["_type"];

/**
 * @member {module:model/Query} bestRepresentativeQuery
 */
ImageInsights.prototype['bestRepresentativeQuery'] = undefined;

/**
 * @member {module:model/ImageInsightsImageCaption} imageCaption
 */
ImageInsights.prototype['imageCaption'] = undefined;

/**
 * A token that you use in a subsequent call to the Image Search API to get more information about the image. For information about using this token, see the insightsToken query parameter. This token has the same usage as the token in the Image object.
 * @member {String} imageInsightsToken
 */
ImageInsights.prototype['imageInsightsToken'] = undefined;

/**
 * @member {module:model/ImageTagsModule} imageTags
 */
ImageInsights.prototype['imageTags'] = undefined;

/**
 * @member {module:model/ImagesModule} pagesIncluding
 */
ImageInsights.prototype['pagesIncluding'] = undefined;

/**
 * @member {module:model/RecipesModule} recipes
 */
ImageInsights.prototype['recipes'] = undefined;

/**
 * @member {module:model/RecognizedEntitiesModule} recognizedEntityGroups
 */
ImageInsights.prototype['recognizedEntityGroups'] = undefined;

/**
 * @member {module:model/RelatedCollectionsModule} relatedCollections
 */
ImageInsights.prototype['relatedCollections'] = undefined;

/**
 * @member {module:model/RelatedSearchesModule} relatedSearches
 */
ImageInsights.prototype['relatedSearches'] = undefined;

/**
 * @member {module:model/AggregateOffer} shoppingSources
 */
ImageInsights.prototype['shoppingSources'] = undefined;

/**
 * @member {module:model/ImagesModule} visuallySimilarImages
 */
ImageInsights.prototype['visuallySimilarImages'] = undefined;

/**
 * @member {module:model/ImagesModule} visuallySimilarProducts
 */
ImageInsights.prototype['visuallySimilarProducts'] = undefined;


// Implement Response interface:
/**
 * A String identifier.
 * @member {String} id
 */
Response.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
Response.prototype['_type'] = undefined;




export default ImageInsights;

