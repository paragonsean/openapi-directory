/**
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregateOffer from './AggregateOffer';

/**
 * The ImagesImageMetadata model module.
 * @module model/ImagesImageMetadata
 * @version 1.0
 */
class ImagesImageMetadata {
    /**
     * Constructs a new <code>ImagesImageMetadata</code>.
     * Defines a count of the number of websites where you can shop or perform other actions related to the image.
     * @alias module:model/ImagesImageMetadata
     */
    constructor() { 
        
        ImagesImageMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImagesImageMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImagesImageMetadata} obj Optional instance to populate.
     * @return {module:model/ImagesImageMetadata} The populated <code>ImagesImageMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImagesImageMetadata();

            if (data.hasOwnProperty('aggregateOffer')) {
                obj['aggregateOffer'] = AggregateOffer.constructFromObject(data['aggregateOffer']);
            }
            if (data.hasOwnProperty('recipeSourcesCount')) {
                obj['recipeSourcesCount'] = ApiClient.convertToType(data['recipeSourcesCount'], 'Number');
            }
            if (data.hasOwnProperty('shoppingSourcesCount')) {
                obj['shoppingSourcesCount'] = ApiClient.convertToType(data['shoppingSourcesCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImagesImageMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImagesImageMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregateOffer`
        if (data['aggregateOffer']) { // data not null
          AggregateOffer.validateJSON(data['aggregateOffer']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregateOffer} aggregateOffer
 */
ImagesImageMetadata.prototype['aggregateOffer'] = undefined;

/**
 * The number of websites that offer recipes of the food seen in the image.
 * @member {Number} recipeSourcesCount
 */
ImagesImageMetadata.prototype['recipeSourcesCount'] = undefined;

/**
 * The number of websites that offer goods of the products seen in the image.
 * @member {Number} shoppingSourcesCount
 */
ImagesImageMetadata.prototype['shoppingSourcesCount'] = undefined;






export default ImagesImageMetadata;

