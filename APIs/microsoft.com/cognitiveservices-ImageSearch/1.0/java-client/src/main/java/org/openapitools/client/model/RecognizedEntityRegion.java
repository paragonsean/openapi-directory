/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NormalizedRectangle;
import org.openapitools.client.model.RecognizedEntity;
import org.openapitools.client.model.Response;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a region of the image where an entity was found and a list of entities that might match it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognizedEntityRegion extends Response {
  public static final String SERIALIZED_NAME_MATCHING_ENTITIES = "matchingEntities";
  @SerializedName(SERIALIZED_NAME_MATCHING_ENTITIES)
  private List<RecognizedEntity> matchingEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private NormalizedRectangle region;

  public RecognizedEntityRegion() {
    this.type = this.getClass().getSimpleName();
  }

  public RecognizedEntityRegion(
     List<RecognizedEntity> matchingEntities, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.matchingEntities = matchingEntities;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * A list of entities that Bing believes match the entity found in the region. The entities are in descending order of confidence (see the matchConfidence field of RecognizedEntity).
   * @return matchingEntities
   */
  @javax.annotation.Nullable
  public List<RecognizedEntity> getMatchingEntities() {
    return matchingEntities;
  }



  public RecognizedEntityRegion region(NormalizedRectangle region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public NormalizedRectangle getRegion() {
    return region;
  }

  public void setRegion(NormalizedRectangle region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognizedEntityRegion recognizedEntityRegion = (RecognizedEntityRegion) o;
    return Objects.equals(this.matchingEntities, recognizedEntityRegion.matchingEntities) &&
        Objects.equals(this.region, recognizedEntityRegion.region) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchingEntities, region, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognizedEntityRegion {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    matchingEntities: ").append(toIndentedString(matchingEntities)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognizedEntityRegion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognizedEntityRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognizedEntityRegion is not found in the empty JSON string", RecognizedEntityRegion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognizedEntityRegion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognizedEntityRegion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecognizedEntityRegion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognizedEntityRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognizedEntityRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognizedEntityRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognizedEntityRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognizedEntityRegion>() {
           @Override
           public void write(JsonWriter out, RecognizedEntityRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognizedEntityRegion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognizedEntityRegion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognizedEntityRegion
   * @throws IOException if the JSON string is invalid with respect to RecognizedEntityRegion
   */
  public static RecognizedEntityRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognizedEntityRegion.class);
  }

  /**
   * Convert an instance of RecognizedEntityRegion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

