/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PropertiesItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a rating.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rating extends PropertiesItem {
  public static final String SERIALIZED_NAME_BEST_RATING = "bestRating";
  @SerializedName(SERIALIZED_NAME_BEST_RATING)
  private Float bestRating;

  public static final String SERIALIZED_NAME_RATING_VALUE = "ratingValue";
  @SerializedName(SERIALIZED_NAME_RATING_VALUE)
  private Float ratingValue;

  public Rating() {
    this.type = this.getClass().getSimpleName();
  }

  public Rating(
     Float bestRating, 
     String text
  ) {
    this();
    this.bestRating = bestRating;
    this.text = text;
  }

  /**
   * The highest rated review. The possible values are 1.0 through 5.0.
   * @return bestRating
   */
  @javax.annotation.Nullable
  public Float getBestRating() {
    return bestRating;
  }



  public Rating ratingValue(Float ratingValue) {
    this.ratingValue = ratingValue;
    return this;
  }

  /**
   * The mean (average) rating. The possible values are 1.0 through 5.0.
   * @return ratingValue
   */
  @javax.annotation.Nonnull
  public Float getRatingValue() {
    return ratingValue;
  }

  public void setRatingValue(Float ratingValue) {
    this.ratingValue = ratingValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rating rating = (Rating) o;
    return Objects.equals(this.bestRating, rating.bestRating) &&
        Objects.equals(this.ratingValue, rating.ratingValue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestRating, ratingValue, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rating {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bestRating: ").append(toIndentedString(bestRating)).append("\n");
    sb.append("    ratingValue: ").append(toIndentedString(ratingValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ratingValue");
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rating is not found in the empty JSON string", Rating.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "AggregateRating":
          AggregateRating.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Rating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rating
   * @throws IOException if the JSON string is invalid with respect to Rating
   */
  public static Rating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rating.class);
  }

  /**
   * Convert an instance of Rating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

