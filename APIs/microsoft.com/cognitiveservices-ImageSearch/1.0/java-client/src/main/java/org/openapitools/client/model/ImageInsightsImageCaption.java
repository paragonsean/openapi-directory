/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Query;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an image&#39;s caption.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageInsightsImageCaption {
  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_DATA_SOURCE_URL = "dataSourceUrl";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_URL)
  private String dataSourceUrl;

  public static final String SERIALIZED_NAME_RELATED_SEARCHES = "relatedSearches";
  @SerializedName(SERIALIZED_NAME_RELATED_SEARCHES)
  private List<Query> relatedSearches = new ArrayList<>();

  public ImageInsightsImageCaption() {
  }

  public ImageInsightsImageCaption caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * A caption about the image.
   * @return caption
   */
  @javax.annotation.Nonnull
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public ImageInsightsImageCaption dataSourceUrl(String dataSourceUrl) {
    this.dataSourceUrl = dataSourceUrl;
    return this;
  }

  /**
   * The URL to the website where the caption was found. You must attribute the caption to the source. For example, by displaying the domain name from the URL next to the caption and using the URL to link to the source website.
   * @return dataSourceUrl
   */
  @javax.annotation.Nonnull
  public String getDataSourceUrl() {
    return dataSourceUrl;
  }

  public void setDataSourceUrl(String dataSourceUrl) {
    this.dataSourceUrl = dataSourceUrl;
  }


  public ImageInsightsImageCaption relatedSearches(List<Query> relatedSearches) {
    this.relatedSearches = relatedSearches;
    return this;
  }

  public ImageInsightsImageCaption addRelatedSearchesItem(Query relatedSearchesItem) {
    if (this.relatedSearches == null) {
      this.relatedSearches = new ArrayList<>();
    }
    this.relatedSearches.add(relatedSearchesItem);
    return this;
  }

  /**
   * A list of entities found in the caption. Use the contents of the Query object to find the entity in the caption and create a link. The link takes the user to images of the entity.
   * @return relatedSearches
   */
  @javax.annotation.Nonnull
  public List<Query> getRelatedSearches() {
    return relatedSearches;
  }

  public void setRelatedSearches(List<Query> relatedSearches) {
    this.relatedSearches = relatedSearches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageInsightsImageCaption imageInsightsImageCaption = (ImageInsightsImageCaption) o;
    return Objects.equals(this.caption, imageInsightsImageCaption.caption) &&
        Objects.equals(this.dataSourceUrl, imageInsightsImageCaption.dataSourceUrl) &&
        Objects.equals(this.relatedSearches, imageInsightsImageCaption.relatedSearches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, dataSourceUrl, relatedSearches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageInsightsImageCaption {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    dataSourceUrl: ").append(toIndentedString(dataSourceUrl)).append("\n");
    sb.append("    relatedSearches: ").append(toIndentedString(relatedSearches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("dataSourceUrl");
    openapiFields.add("relatedSearches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caption");
    openapiRequiredFields.add("dataSourceUrl");
    openapiRequiredFields.add("relatedSearches");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageInsightsImageCaption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageInsightsImageCaption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageInsightsImageCaption is not found in the empty JSON string", ImageInsightsImageCaption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageInsightsImageCaption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageInsightsImageCaption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageInsightsImageCaption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (!jsonObj.get("dataSourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceUrl").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("relatedSearches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedSearches` to be an array in the JSON string but got `%s`", jsonObj.get("relatedSearches").toString()));
      }

      JsonArray jsonArrayrelatedSearches = jsonObj.getAsJsonArray("relatedSearches");
      // validate the required field `relatedSearches` (array)
      for (int i = 0; i < jsonArrayrelatedSearches.size(); i++) {
        Query.validateJsonElement(jsonArrayrelatedSearches.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageInsightsImageCaption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageInsightsImageCaption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageInsightsImageCaption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageInsightsImageCaption.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageInsightsImageCaption>() {
           @Override
           public void write(JsonWriter out, ImageInsightsImageCaption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageInsightsImageCaption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageInsightsImageCaption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageInsightsImageCaption
   * @throws IOException if the JSON string is invalid with respect to ImageInsightsImageCaption
   */
  public static ImageInsightsImageCaption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageInsightsImageCaption.class);
  }

  /**
   * Convert an instance of ImageInsightsImageCaption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

