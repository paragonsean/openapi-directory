/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImagesImageMetadata;
import org.openapitools.client.model.MediaObject;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an image
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageObject extends MediaObject {
  public static final String SERIALIZED_NAME_ACCENT_COLOR = "accentColor";
  @SerializedName(SERIALIZED_NAME_ACCENT_COLOR)
  private String accentColor;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IMAGE_INSIGHTS_TOKEN = "imageInsightsToken";
  @SerializedName(SERIALIZED_NAME_IMAGE_INSIGHTS_TOKEN)
  private String imageInsightsToken;

  public static final String SERIALIZED_NAME_INSIGHTS_METADATA = "insightsMetadata";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_METADATA)
  private ImagesImageMetadata insightsMetadata;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private ImageObject thumbnail;

  public static final String SERIALIZED_NAME_VISUAL_WORDS = "visualWords";
  @SerializedName(SERIALIZED_NAME_VISUAL_WORDS)
  private String visualWords;

  public ImageObject() {
    this.type = this.getClass().getSimpleName();
  }

  public ImageObject(
     String accentColor, 
     String imageId, 
     String imageInsightsToken, 
     String visualWords, 
     String contentSize, 
     String contentUrl, 
     String encodingFormat, 
     Integer height, 
     String hostPageDisplayUrl, 
     String hostPageUrl, 
     Integer width, 
     String datePublished, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String alternateName, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.accentColor = accentColor;
    this.imageId = imageId;
    this.imageInsightsToken = imageInsightsToken;
    this.visualWords = visualWords;
    this.contentSize = contentSize;
    this.contentUrl = contentUrl;
    this.encodingFormat = encodingFormat;
    this.height = height;
    this.hostPageDisplayUrl = hostPageDisplayUrl;
    this.hostPageUrl = hostPageUrl;
    this.width = width;
    this.datePublished = datePublished;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.alternateName = alternateName;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * A three-byte hexadecimal number that represents the color that dominates the image. Use the color as the temporary background in your client until the image is loaded.
   * @return accentColor
   */
  @javax.annotation.Nullable
  public String getAccentColor() {
    return accentColor;
  }



  /**
   * Unique Id for the image
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }



  /**
   * The token that you use in a subsequent call to the Image Search API to get additional information about the image. For information about using this token, see the insightsToken query parameter.
   * @return imageInsightsToken
   */
  @javax.annotation.Nullable
  public String getImageInsightsToken() {
    return imageInsightsToken;
  }



  public ImageObject insightsMetadata(ImagesImageMetadata insightsMetadata) {
    this.insightsMetadata = insightsMetadata;
    return this;
  }

  /**
   * Get insightsMetadata
   * @return insightsMetadata
   */
  @javax.annotation.Nullable
  public ImagesImageMetadata getInsightsMetadata() {
    return insightsMetadata;
  }

  public void setInsightsMetadata(ImagesImageMetadata insightsMetadata) {
    this.insightsMetadata = insightsMetadata;
  }


  public ImageObject thumbnail(ImageObject thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Get thumbnail
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public ImageObject getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(ImageObject thumbnail) {
    this.thumbnail = thumbnail;
  }


  /**
   * Visual representation of the image. Used for getting more sizes
   * @return visualWords
   */
  @javax.annotation.Nullable
  public String getVisualWords() {
    return visualWords;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageObject imageObject = (ImageObject) o;
    return Objects.equals(this.accentColor, imageObject.accentColor) &&
        Objects.equals(this.imageId, imageObject.imageId) &&
        Objects.equals(this.imageInsightsToken, imageObject.imageInsightsToken) &&
        Objects.equals(this.insightsMetadata, imageObject.insightsMetadata) &&
        Objects.equals(this.thumbnail, imageObject.thumbnail) &&
        Objects.equals(this.visualWords, imageObject.visualWords) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accentColor, imageId, imageInsightsToken, insightsMetadata, thumbnail, visualWords, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageObject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accentColor: ").append(toIndentedString(accentColor)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageInsightsToken: ").append(toIndentedString(imageInsightsToken)).append("\n");
    sb.append("    insightsMetadata: ").append(toIndentedString(insightsMetadata)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    visualWords: ").append(toIndentedString(visualWords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentSize");
    openapiFields.add("contentUrl");
    openapiFields.add("encodingFormat");
    openapiFields.add("height");
    openapiFields.add("hostPageDisplayUrl");
    openapiFields.add("hostPageUrl");
    openapiFields.add("width");
    openapiFields.add("datePublished");
    openapiFields.add("provider");
    openapiFields.add("text");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("alternateName");
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageObject is not found in the empty JSON string", ImageObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageObject>() {
           @Override
           public void write(JsonWriter out, ImageObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageObject
   * @throws IOException if the JSON string is invalid with respect to ImageObject
   */
  public static ImageObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageObject.class);
  }

  /**
   * Convert an instance of ImageObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

