/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeWork;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a media object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaObject extends CreativeWork {
  public static final String SERIALIZED_NAME_CONTENT_SIZE = "contentSize";
  @SerializedName(SERIALIZED_NAME_CONTENT_SIZE)
  private String contentSize;

  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_ENCODING_FORMAT = "encodingFormat";
  @SerializedName(SERIALIZED_NAME_ENCODING_FORMAT)
  private String encodingFormat;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HOST_PAGE_DISPLAY_URL = "hostPageDisplayUrl";
  @SerializedName(SERIALIZED_NAME_HOST_PAGE_DISPLAY_URL)
  private String hostPageDisplayUrl;

  public static final String SERIALIZED_NAME_HOST_PAGE_URL = "hostPageUrl";
  @SerializedName(SERIALIZED_NAME_HOST_PAGE_URL)
  private String hostPageUrl;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public MediaObject() {
    this.type = this.getClass().getSimpleName();
  }

  public MediaObject(
     String contentSize, 
     String contentUrl, 
     String encodingFormat, 
     Integer height, 
     String hostPageDisplayUrl, 
     String hostPageUrl, 
     Integer width, 
     String datePublished, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String alternateName, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.contentSize = contentSize;
    this.contentUrl = contentUrl;
    this.encodingFormat = encodingFormat;
    this.height = height;
    this.hostPageDisplayUrl = hostPageDisplayUrl;
    this.hostPageUrl = hostPageUrl;
    this.width = width;
    this.datePublished = datePublished;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.alternateName = alternateName;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Size of the media object content (use format \&quot;value unit\&quot; e.g \&quot;1024 B\&quot;).
   * @return contentSize
   */
  @javax.annotation.Nullable
  public String getContentSize() {
    return contentSize;
  }



  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).
   * @return contentUrl
   */
  @javax.annotation.Nullable
  public String getContentUrl() {
    return contentUrl;
  }



  /**
   * Encoding format (e.g mp3, mp4, jpeg, etc).
   * @return encodingFormat
   */
  @javax.annotation.Nullable
  public String getEncodingFormat() {
    return encodingFormat;
  }



  /**
   * The height of the source media object, in pixels.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }



  /**
   * Display URL of the page that hosts the media object.
   * @return hostPageDisplayUrl
   */
  @javax.annotation.Nullable
  public String getHostPageDisplayUrl() {
    return hostPageDisplayUrl;
  }



  /**
   * URL of the page that hosts the media object.
   * @return hostPageUrl
   */
  @javax.annotation.Nullable
  public String getHostPageUrl() {
    return hostPageUrl;
  }



  /**
   * The width of the source media object, in pixels.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaObject mediaObject = (MediaObject) o;
    return Objects.equals(this.contentSize, mediaObject.contentSize) &&
        Objects.equals(this.contentUrl, mediaObject.contentUrl) &&
        Objects.equals(this.encodingFormat, mediaObject.encodingFormat) &&
        Objects.equals(this.height, mediaObject.height) &&
        Objects.equals(this.hostPageDisplayUrl, mediaObject.hostPageDisplayUrl) &&
        Objects.equals(this.hostPageUrl, mediaObject.hostPageUrl) &&
        Objects.equals(this.width, mediaObject.width) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentSize, contentUrl, encodingFormat, height, hostPageDisplayUrl, hostPageUrl, width, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaObject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    contentSize: ").append(toIndentedString(contentSize)).append("\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    encodingFormat: ").append(toIndentedString(encodingFormat)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hostPageDisplayUrl: ").append(toIndentedString(hostPageDisplayUrl)).append("\n");
    sb.append("    hostPageUrl: ").append(toIndentedString(hostPageUrl)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datePublished");
    openapiFields.add("provider");
    openapiFields.add("text");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("alternateName");
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaObject is not found in the empty JSON string", MediaObject.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "ImageObject":
          ImageObject.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of MediaObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaObject
   * @throws IOException if the JSON string is invalid with respect to MediaObject
   */
  public static MediaObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaObject.class);
  }

  /**
   * Convert an instance of MediaObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

