/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregateOffer;
import org.openapitools.client.model.ImageInsightsImageCaption;
import org.openapitools.client.model.ImageTagsModule;
import org.openapitools.client.model.ImagesModule;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.RecipesModule;
import org.openapitools.client.model.RecognizedEntitiesModule;
import org.openapitools.client.model.RelatedCollectionsModule;
import org.openapitools.client.model.RelatedSearchesModule;
import org.openapitools.client.model.Response;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The top-level object that the response includes when an image insights request succeeds. For information about requesting image insights, see the [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken) query parameter. The modules query parameter affects the fields that Bing includes in the response. If you set [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested) to only Caption, then this object includes only the imageCaption field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageInsights extends Response {
  public static final String SERIALIZED_NAME_BEST_REPRESENTATIVE_QUERY = "bestRepresentativeQuery";
  @SerializedName(SERIALIZED_NAME_BEST_REPRESENTATIVE_QUERY)
  private Query bestRepresentativeQuery;

  public static final String SERIALIZED_NAME_IMAGE_CAPTION = "imageCaption";
  @SerializedName(SERIALIZED_NAME_IMAGE_CAPTION)
  private ImageInsightsImageCaption imageCaption;

  public static final String SERIALIZED_NAME_IMAGE_INSIGHTS_TOKEN = "imageInsightsToken";
  @SerializedName(SERIALIZED_NAME_IMAGE_INSIGHTS_TOKEN)
  private String imageInsightsToken;

  public static final String SERIALIZED_NAME_IMAGE_TAGS = "imageTags";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAGS)
  private ImageTagsModule imageTags;

  public static final String SERIALIZED_NAME_PAGES_INCLUDING = "pagesIncluding";
  @SerializedName(SERIALIZED_NAME_PAGES_INCLUDING)
  private ImagesModule pagesIncluding;

  public static final String SERIALIZED_NAME_RECIPES = "recipes";
  @SerializedName(SERIALIZED_NAME_RECIPES)
  private RecipesModule recipes;

  public static final String SERIALIZED_NAME_RECOGNIZED_ENTITY_GROUPS = "recognizedEntityGroups";
  @SerializedName(SERIALIZED_NAME_RECOGNIZED_ENTITY_GROUPS)
  private RecognizedEntitiesModule recognizedEntityGroups;

  public static final String SERIALIZED_NAME_RELATED_COLLECTIONS = "relatedCollections";
  @SerializedName(SERIALIZED_NAME_RELATED_COLLECTIONS)
  private RelatedCollectionsModule relatedCollections;

  public static final String SERIALIZED_NAME_RELATED_SEARCHES = "relatedSearches";
  @SerializedName(SERIALIZED_NAME_RELATED_SEARCHES)
  private RelatedSearchesModule relatedSearches;

  public static final String SERIALIZED_NAME_SHOPPING_SOURCES = "shoppingSources";
  @SerializedName(SERIALIZED_NAME_SHOPPING_SOURCES)
  private AggregateOffer shoppingSources;

  public static final String SERIALIZED_NAME_VISUALLY_SIMILAR_IMAGES = "visuallySimilarImages";
  @SerializedName(SERIALIZED_NAME_VISUALLY_SIMILAR_IMAGES)
  private ImagesModule visuallySimilarImages;

  public static final String SERIALIZED_NAME_VISUALLY_SIMILAR_PRODUCTS = "visuallySimilarProducts";
  @SerializedName(SERIALIZED_NAME_VISUALLY_SIMILAR_PRODUCTS)
  private ImagesModule visuallySimilarProducts;

  public ImageInsights() {
    this.type = this.getClass().getSimpleName();
  }

  public ImageInsights(
     String imageInsightsToken, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.imageInsightsToken = imageInsightsToken;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  public ImageInsights bestRepresentativeQuery(Query bestRepresentativeQuery) {
    this.bestRepresentativeQuery = bestRepresentativeQuery;
    return this;
  }

  /**
   * Get bestRepresentativeQuery
   * @return bestRepresentativeQuery
   */
  @javax.annotation.Nullable
  public Query getBestRepresentativeQuery() {
    return bestRepresentativeQuery;
  }

  public void setBestRepresentativeQuery(Query bestRepresentativeQuery) {
    this.bestRepresentativeQuery = bestRepresentativeQuery;
  }


  public ImageInsights imageCaption(ImageInsightsImageCaption imageCaption) {
    this.imageCaption = imageCaption;
    return this;
  }

  /**
   * Get imageCaption
   * @return imageCaption
   */
  @javax.annotation.Nullable
  public ImageInsightsImageCaption getImageCaption() {
    return imageCaption;
  }

  public void setImageCaption(ImageInsightsImageCaption imageCaption) {
    this.imageCaption = imageCaption;
  }


  /**
   * A token that you use in a subsequent call to the Image Search API to get more information about the image. For information about using this token, see the insightsToken query parameter. This token has the same usage as the token in the Image object.
   * @return imageInsightsToken
   */
  @javax.annotation.Nullable
  public String getImageInsightsToken() {
    return imageInsightsToken;
  }



  public ImageInsights imageTags(ImageTagsModule imageTags) {
    this.imageTags = imageTags;
    return this;
  }

  /**
   * Get imageTags
   * @return imageTags
   */
  @javax.annotation.Nullable
  public ImageTagsModule getImageTags() {
    return imageTags;
  }

  public void setImageTags(ImageTagsModule imageTags) {
    this.imageTags = imageTags;
  }


  public ImageInsights pagesIncluding(ImagesModule pagesIncluding) {
    this.pagesIncluding = pagesIncluding;
    return this;
  }

  /**
   * Get pagesIncluding
   * @return pagesIncluding
   */
  @javax.annotation.Nullable
  public ImagesModule getPagesIncluding() {
    return pagesIncluding;
  }

  public void setPagesIncluding(ImagesModule pagesIncluding) {
    this.pagesIncluding = pagesIncluding;
  }


  public ImageInsights recipes(RecipesModule recipes) {
    this.recipes = recipes;
    return this;
  }

  /**
   * Get recipes
   * @return recipes
   */
  @javax.annotation.Nullable
  public RecipesModule getRecipes() {
    return recipes;
  }

  public void setRecipes(RecipesModule recipes) {
    this.recipes = recipes;
  }


  public ImageInsights recognizedEntityGroups(RecognizedEntitiesModule recognizedEntityGroups) {
    this.recognizedEntityGroups = recognizedEntityGroups;
    return this;
  }

  /**
   * Get recognizedEntityGroups
   * @return recognizedEntityGroups
   */
  @javax.annotation.Nullable
  public RecognizedEntitiesModule getRecognizedEntityGroups() {
    return recognizedEntityGroups;
  }

  public void setRecognizedEntityGroups(RecognizedEntitiesModule recognizedEntityGroups) {
    this.recognizedEntityGroups = recognizedEntityGroups;
  }


  public ImageInsights relatedCollections(RelatedCollectionsModule relatedCollections) {
    this.relatedCollections = relatedCollections;
    return this;
  }

  /**
   * Get relatedCollections
   * @return relatedCollections
   */
  @javax.annotation.Nullable
  public RelatedCollectionsModule getRelatedCollections() {
    return relatedCollections;
  }

  public void setRelatedCollections(RelatedCollectionsModule relatedCollections) {
    this.relatedCollections = relatedCollections;
  }


  public ImageInsights relatedSearches(RelatedSearchesModule relatedSearches) {
    this.relatedSearches = relatedSearches;
    return this;
  }

  /**
   * Get relatedSearches
   * @return relatedSearches
   */
  @javax.annotation.Nullable
  public RelatedSearchesModule getRelatedSearches() {
    return relatedSearches;
  }

  public void setRelatedSearches(RelatedSearchesModule relatedSearches) {
    this.relatedSearches = relatedSearches;
  }


  public ImageInsights shoppingSources(AggregateOffer shoppingSources) {
    this.shoppingSources = shoppingSources;
    return this;
  }

  /**
   * Get shoppingSources
   * @return shoppingSources
   */
  @javax.annotation.Nullable
  public AggregateOffer getShoppingSources() {
    return shoppingSources;
  }

  public void setShoppingSources(AggregateOffer shoppingSources) {
    this.shoppingSources = shoppingSources;
  }


  public ImageInsights visuallySimilarImages(ImagesModule visuallySimilarImages) {
    this.visuallySimilarImages = visuallySimilarImages;
    return this;
  }

  /**
   * Get visuallySimilarImages
   * @return visuallySimilarImages
   */
  @javax.annotation.Nullable
  public ImagesModule getVisuallySimilarImages() {
    return visuallySimilarImages;
  }

  public void setVisuallySimilarImages(ImagesModule visuallySimilarImages) {
    this.visuallySimilarImages = visuallySimilarImages;
  }


  public ImageInsights visuallySimilarProducts(ImagesModule visuallySimilarProducts) {
    this.visuallySimilarProducts = visuallySimilarProducts;
    return this;
  }

  /**
   * Get visuallySimilarProducts
   * @return visuallySimilarProducts
   */
  @javax.annotation.Nullable
  public ImagesModule getVisuallySimilarProducts() {
    return visuallySimilarProducts;
  }

  public void setVisuallySimilarProducts(ImagesModule visuallySimilarProducts) {
    this.visuallySimilarProducts = visuallySimilarProducts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageInsights imageInsights = (ImageInsights) o;
    return Objects.equals(this.bestRepresentativeQuery, imageInsights.bestRepresentativeQuery) &&
        Objects.equals(this.imageCaption, imageInsights.imageCaption) &&
        Objects.equals(this.imageInsightsToken, imageInsights.imageInsightsToken) &&
        Objects.equals(this.imageTags, imageInsights.imageTags) &&
        Objects.equals(this.pagesIncluding, imageInsights.pagesIncluding) &&
        Objects.equals(this.recipes, imageInsights.recipes) &&
        Objects.equals(this.recognizedEntityGroups, imageInsights.recognizedEntityGroups) &&
        Objects.equals(this.relatedCollections, imageInsights.relatedCollections) &&
        Objects.equals(this.relatedSearches, imageInsights.relatedSearches) &&
        Objects.equals(this.shoppingSources, imageInsights.shoppingSources) &&
        Objects.equals(this.visuallySimilarImages, imageInsights.visuallySimilarImages) &&
        Objects.equals(this.visuallySimilarProducts, imageInsights.visuallySimilarProducts) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestRepresentativeQuery, imageCaption, imageInsightsToken, imageTags, pagesIncluding, recipes, recognizedEntityGroups, relatedCollections, relatedSearches, shoppingSources, visuallySimilarImages, visuallySimilarProducts, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageInsights {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bestRepresentativeQuery: ").append(toIndentedString(bestRepresentativeQuery)).append("\n");
    sb.append("    imageCaption: ").append(toIndentedString(imageCaption)).append("\n");
    sb.append("    imageInsightsToken: ").append(toIndentedString(imageInsightsToken)).append("\n");
    sb.append("    imageTags: ").append(toIndentedString(imageTags)).append("\n");
    sb.append("    pagesIncluding: ").append(toIndentedString(pagesIncluding)).append("\n");
    sb.append("    recipes: ").append(toIndentedString(recipes)).append("\n");
    sb.append("    recognizedEntityGroups: ").append(toIndentedString(recognizedEntityGroups)).append("\n");
    sb.append("    relatedCollections: ").append(toIndentedString(relatedCollections)).append("\n");
    sb.append("    relatedSearches: ").append(toIndentedString(relatedSearches)).append("\n");
    sb.append("    shoppingSources: ").append(toIndentedString(shoppingSources)).append("\n");
    sb.append("    visuallySimilarImages: ").append(toIndentedString(visuallySimilarImages)).append("\n");
    sb.append("    visuallySimilarProducts: ").append(toIndentedString(visuallySimilarProducts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageInsights
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageInsights.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageInsights is not found in the empty JSON string", ImageInsights.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageInsights.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageInsights` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageInsights.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageInsights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageInsights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageInsights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageInsights.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageInsights>() {
           @Override
           public void write(JsonWriter out, ImageInsights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageInsights read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageInsights given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageInsights
   * @throws IOException if the JSON string is invalid with respect to ImageInsights
   */
  public static ImageInsights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageInsights.class);
  }

  /**
   * Convert an instance of ImageInsights to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

