/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.PivotSuggestions;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.SearchResultsAnswer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an image answer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Images extends SearchResultsAnswer {
  public static final String SERIALIZED_NAME_NEXT_OFFSET = "nextOffset";
  @SerializedName(SERIALIZED_NAME_NEXT_OFFSET)
  private Integer nextOffset;

  public static final String SERIALIZED_NAME_PIVOT_SUGGESTIONS = "pivotSuggestions";
  @SerializedName(SERIALIZED_NAME_PIVOT_SUGGESTIONS)
  private List<PivotSuggestions> pivotSuggestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_EXPANSIONS = "queryExpansions";
  @SerializedName(SERIALIZED_NAME_QUERY_EXPANSIONS)
  private List<Query> queryExpansions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIMILAR_TERMS = "similarTerms";
  @SerializedName(SERIALIZED_NAME_SIMILAR_TERMS)
  private List<Query> similarTerms = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<ImageObject> value = new ArrayList<>();

  public Images() {
    this.type = this.getClass().getSimpleName();
  }

  public Images(
     Integer nextOffset, 
     List<PivotSuggestions> pivotSuggestions, 
     List<Query> queryExpansions, 
     List<Query> similarTerms, 
     Long totalEstimatedMatches, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.nextOffset = nextOffset;
    this.pivotSuggestions = pivotSuggestions;
    this.queryExpansions = queryExpansions;
    this.similarTerms = similarTerms;
    this.totalEstimatedMatches = totalEstimatedMatches;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Used as part of deduping. Tells client the next offset that client should use in the next pagination request
   * @return nextOffset
   */
  @javax.annotation.Nullable
  public Integer getNextOffset() {
    return nextOffset;
  }



  /**
   * A list of segments in the original query. For example, if the query was Red Flowers, Bing might segment the query into Red and Flowers. The Flowers pivot may contain query suggestions such as Red Peonies and Red Daisies, and the Red pivot may contain query suggestions such as Green Flowers and Yellow Flowers.
   * @return pivotSuggestions
   */
  @javax.annotation.Nullable
  public List<PivotSuggestions> getPivotSuggestions() {
    return pivotSuggestions;
  }



  /**
   * A list of expanded queries that narrows the original query. For example, if the query was Microsoft Surface, the expanded queries might be: Microsoft Surface Pro 3, Microsoft Surface RT, Microsoft Surface Phone, and Microsoft Surface Hub.
   * @return queryExpansions
   */
  @javax.annotation.Nullable
  public List<Query> getQueryExpansions() {
    return queryExpansions;
  }



  /**
   * A list of terms that are similar in meaning to the user&#39;s query term.
   * @return similarTerms
   */
  @javax.annotation.Nullable
  public List<Query> getSimilarTerms() {
    return similarTerms;
  }



  public Images value(List<ImageObject> value) {
    this.value = value;
    return this;
  }

  public Images addValueItem(ImageObject valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<>();
    }
    this.value.add(valueItem);
    return this;
  }

  /**
   * A list of image objects that are relevant to the query. If there are no results, the List is empty.
   * @return value
   */
  @javax.annotation.Nonnull
  public List<ImageObject> getValue() {
    return value;
  }

  public void setValue(List<ImageObject> value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Images images = (Images) o;
    return Objects.equals(this.nextOffset, images.nextOffset) &&
        Objects.equals(this.pivotSuggestions, images.pivotSuggestions) &&
        Objects.equals(this.queryExpansions, images.queryExpansions) &&
        Objects.equals(this.similarTerms, images.similarTerms) &&
        Objects.equals(this.value, images.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextOffset, pivotSuggestions, queryExpansions, similarTerms, value, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Images {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    nextOffset: ").append(toIndentedString(nextOffset)).append("\n");
    sb.append("    pivotSuggestions: ").append(toIndentedString(pivotSuggestions)).append("\n");
    sb.append("    queryExpansions: ").append(toIndentedString(queryExpansions)).append("\n");
    sb.append("    similarTerms: ").append(toIndentedString(similarTerms)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalEstimatedMatches");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Images
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Images.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Images is not found in the empty JSON string", Images.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Images.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Images` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Images.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Images.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Images' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Images> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Images.class));

       return (TypeAdapter<T>) new TypeAdapter<Images>() {
           @Override
           public void write(JsonWriter out, Images value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Images read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Images given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Images
   * @throws IOException if the JSON string is invalid with respect to Images
   */
  public static Images fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Images.class);
  }

  /**
   * Convert an instance of Images to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

