/*
 * Image Search Client
 * The Image Search API lets you send a search query to Bing and get back a list of relevant images. This section provides technical details about the query parameters and headers that you use to request images and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecognizedEntityRegion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a group of previously recognized entities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:59.700770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognizedEntityGroup {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECOGNIZED_ENTITY_REGIONS = "recognizedEntityRegions";
  @SerializedName(SERIALIZED_NAME_RECOGNIZED_ENTITY_REGIONS)
  private List<RecognizedEntityRegion> recognizedEntityRegions = new ArrayList<>();

  public RecognizedEntityGroup() {
  }

  public RecognizedEntityGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the group where images of the entity were also found. The following are possible groups. CelebRecognitionAnnotations: Similar to CelebrityAnnotations but provides a higher probability of an accurate match. CelebrityAnnotations: Contains celebrities such as actors, politicians, athletes, and historical figures.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RecognizedEntityGroup recognizedEntityRegions(List<RecognizedEntityRegion> recognizedEntityRegions) {
    this.recognizedEntityRegions = recognizedEntityRegions;
    return this;
  }

  public RecognizedEntityGroup addRecognizedEntityRegionsItem(RecognizedEntityRegion recognizedEntityRegionsItem) {
    if (this.recognizedEntityRegions == null) {
      this.recognizedEntityRegions = new ArrayList<>();
    }
    this.recognizedEntityRegions.add(recognizedEntityRegionsItem);
    return this;
  }

  /**
   * The regions of the image that contain entities.
   * @return recognizedEntityRegions
   */
  @javax.annotation.Nonnull
  public List<RecognizedEntityRegion> getRecognizedEntityRegions() {
    return recognizedEntityRegions;
  }

  public void setRecognizedEntityRegions(List<RecognizedEntityRegion> recognizedEntityRegions) {
    this.recognizedEntityRegions = recognizedEntityRegions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognizedEntityGroup recognizedEntityGroup = (RecognizedEntityGroup) o;
    return Objects.equals(this.name, recognizedEntityGroup.name) &&
        Objects.equals(this.recognizedEntityRegions, recognizedEntityGroup.recognizedEntityRegions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, recognizedEntityRegions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognizedEntityGroup {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recognizedEntityRegions: ").append(toIndentedString(recognizedEntityRegions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("recognizedEntityRegions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("recognizedEntityRegions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognizedEntityGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognizedEntityGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognizedEntityGroup is not found in the empty JSON string", RecognizedEntityGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognizedEntityGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognizedEntityGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecognizedEntityGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recognizedEntityRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recognizedEntityRegions` to be an array in the JSON string but got `%s`", jsonObj.get("recognizedEntityRegions").toString()));
      }

      JsonArray jsonArrayrecognizedEntityRegions = jsonObj.getAsJsonArray("recognizedEntityRegions");
      // validate the required field `recognizedEntityRegions` (array)
      for (int i = 0; i < jsonArrayrecognizedEntityRegions.size(); i++) {
        RecognizedEntityRegion.validateJsonElement(jsonArrayrecognizedEntityRegions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognizedEntityGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognizedEntityGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognizedEntityGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognizedEntityGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognizedEntityGroup>() {
           @Override
           public void write(JsonWriter out, RecognizedEntityGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognizedEntityGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognizedEntityGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognizedEntityGroup
   * @throws IOException if the JSON string is invalid with respect to RecognizedEntityGroup
   */
  public static RecognizedEntityGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognizedEntityGroup.class);
  }

  /**
   * Convert an instance of RecognizedEntityGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

