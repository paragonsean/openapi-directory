# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line import Line
from openapi_server import util


class TextRecognitionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clockwise_orientation: float=None, height: float=None, lines: List[Line]=None, page: int=None, unit: str=None, width: float=None):
        """TextRecognitionResult - a model defined in OpenAPI

        :param clockwise_orientation: The clockwise_orientation of this TextRecognitionResult.
        :param height: The height of this TextRecognitionResult.
        :param lines: The lines of this TextRecognitionResult.
        :param page: The page of this TextRecognitionResult.
        :param unit: The unit of this TextRecognitionResult.
        :param width: The width of this TextRecognitionResult.
        """
        self.openapi_types = {
            'clockwise_orientation': float,
            'height': float,
            'lines': List[Line],
            'page': int,
            'unit': str,
            'width': float
        }

        self.attribute_map = {
            'clockwise_orientation': 'clockwiseOrientation',
            'height': 'height',
            'lines': 'lines',
            'page': 'page',
            'unit': 'unit',
            'width': 'width'
        }

        self._clockwise_orientation = clockwise_orientation
        self._height = height
        self._lines = lines
        self._page = page
        self._unit = unit
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextRecognitionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextRecognitionResult of this TextRecognitionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clockwise_orientation(self):
        """Gets the clockwise_orientation of this TextRecognitionResult.

        The orientation of the image in degrees in the clockwise direction. Range between [0, 360).

        :return: The clockwise_orientation of this TextRecognitionResult.
        :rtype: float
        """
        return self._clockwise_orientation

    @clockwise_orientation.setter
    def clockwise_orientation(self, clockwise_orientation):
        """Sets the clockwise_orientation of this TextRecognitionResult.

        The orientation of the image in degrees in the clockwise direction. Range between [0, 360).

        :param clockwise_orientation: The clockwise_orientation of this TextRecognitionResult.
        :type clockwise_orientation: float
        """

        self._clockwise_orientation = clockwise_orientation

    @property
    def height(self):
        """Gets the height of this TextRecognitionResult.

        The height of the image in pixels or the PDF in inches.

        :return: The height of this TextRecognitionResult.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TextRecognitionResult.

        The height of the image in pixels or the PDF in inches.

        :param height: The height of this TextRecognitionResult.
        :type height: float
        """

        self._height = height

    @property
    def lines(self):
        """Gets the lines of this TextRecognitionResult.

        A list of recognized text lines.

        :return: The lines of this TextRecognitionResult.
        :rtype: List[Line]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this TextRecognitionResult.

        A list of recognized text lines.

        :param lines: The lines of this TextRecognitionResult.
        :type lines: List[Line]
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")

        self._lines = lines

    @property
    def page(self):
        """Gets the page of this TextRecognitionResult.

        The 1-based page number of the recognition result.

        :return: The page of this TextRecognitionResult.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TextRecognitionResult.

        The 1-based page number of the recognition result.

        :param page: The page of this TextRecognitionResult.
        :type page: int
        """

        self._page = page

    @property
    def unit(self):
        """Gets the unit of this TextRecognitionResult.

        The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is 'inch'.

        :return: The unit of this TextRecognitionResult.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TextRecognitionResult.

        The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is 'inch'.

        :param unit: The unit of this TextRecognitionResult.
        :type unit: str
        """
        allowed_values = [None,"pixel", "inch"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def width(self):
        """Gets the width of this TextRecognitionResult.

        The width of the image in pixels or the PDF in inches.

        :return: The width of this TextRecognitionResult.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TextRecognitionResult.

        The width of the image in pixels or the PDF in inches.

        :param width: The width of this TextRecognitionResult.
        :type width: float
        """

        self._width = width
