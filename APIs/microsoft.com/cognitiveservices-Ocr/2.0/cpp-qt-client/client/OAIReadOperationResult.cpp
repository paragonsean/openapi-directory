/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadOperationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadOperationResult::OAIReadOperationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadOperationResult::OAIReadOperationResult() {
    this->initializeModel();
}

OAIReadOperationResult::~OAIReadOperationResult() {}

void OAIReadOperationResult::initializeModel() {

    m_recognition_results_isSet = false;
    m_recognition_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIReadOperationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadOperationResult::fromJsonObject(QJsonObject json) {

    m_recognition_results_isValid = ::OpenAPI::fromJsonValue(m_recognition_results, json[QString("recognitionResults")]);
    m_recognition_results_isSet = !json[QString("recognitionResults")].isNull() && m_recognition_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIReadOperationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadOperationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_recognition_results.size() > 0) {
        obj.insert(QString("recognitionResults"), ::OpenAPI::toJsonValue(m_recognition_results));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAITextRecognitionResult> OAIReadOperationResult::getRecognitionResults() const {
    return m_recognition_results;
}
void OAIReadOperationResult::setRecognitionResults(const QList<OAITextRecognitionResult> &recognition_results) {
    m_recognition_results = recognition_results;
    m_recognition_results_isSet = true;
}

bool OAIReadOperationResult::is_recognition_results_Set() const{
    return m_recognition_results_isSet;
}

bool OAIReadOperationResult::is_recognition_results_Valid() const{
    return m_recognition_results_isValid;
}

OAIOperationStatus OAIReadOperationResult::getStatus() const {
    return m_status;
}
void OAIReadOperationResult::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReadOperationResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReadOperationResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIReadOperationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recognition_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadOperationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
