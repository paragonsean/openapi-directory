/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputerVisionError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputerVisionError::OAIComputerVisionError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputerVisionError::OAIComputerVisionError() {
    this->initializeModel();
}

OAIComputerVisionError::~OAIComputerVisionError() {}

void OAIComputerVisionError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIComputerVisionError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputerVisionError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIComputerVisionError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputerVisionError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIComputerVisionError::getCode() const {
    return m_code;
}
void OAIComputerVisionError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIComputerVisionError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIComputerVisionError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIComputerVisionError::getMessage() const {
    return m_message;
}
void OAIComputerVisionError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIComputerVisionError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIComputerVisionError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIComputerVisionError::getRequestId() const {
    return m_request_id;
}
void OAIComputerVisionError::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIComputerVisionError::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIComputerVisionError::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIComputerVisionError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputerVisionError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
