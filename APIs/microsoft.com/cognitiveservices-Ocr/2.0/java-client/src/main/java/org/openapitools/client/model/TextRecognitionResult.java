/*
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Line;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing a recognized text region
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:44.257182-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextRecognitionResult {
  public static final String SERIALIZED_NAME_CLOCKWISE_ORIENTATION = "clockwiseOrientation";
  @SerializedName(SERIALIZED_NAME_CLOCKWISE_ORIENTATION)
  private BigDecimal clockwiseOrientation;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<Line> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  /**
   * The unit used in the Width, Height and BoundingBox. For images, the unit is &#39;pixel&#39;. For PDF, the unit is &#39;inch&#39;.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    PIXEL("pixel"),
    
    INCH("inch");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public TextRecognitionResult() {
  }

  public TextRecognitionResult clockwiseOrientation(BigDecimal clockwiseOrientation) {
    this.clockwiseOrientation = clockwiseOrientation;
    return this;
  }

  /**
   * The orientation of the image in degrees in the clockwise direction. Range between [0, 360).
   * @return clockwiseOrientation
   */
  @javax.annotation.Nullable
  public BigDecimal getClockwiseOrientation() {
    return clockwiseOrientation;
  }

  public void setClockwiseOrientation(BigDecimal clockwiseOrientation) {
    this.clockwiseOrientation = clockwiseOrientation;
  }


  public TextRecognitionResult height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the image in pixels or the PDF in inches.
   * @return height
   */
  @javax.annotation.Nullable
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public TextRecognitionResult lines(List<Line> lines) {
    this.lines = lines;
    return this;
  }

  public TextRecognitionResult addLinesItem(Line linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * A list of recognized text lines.
   * @return lines
   */
  @javax.annotation.Nonnull
  public List<Line> getLines() {
    return lines;
  }

  public void setLines(List<Line> lines) {
    this.lines = lines;
  }


  public TextRecognitionResult page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * The 1-based page number of the recognition result.
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public TextRecognitionResult unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit used in the Width, Height and BoundingBox. For images, the unit is &#39;pixel&#39;. For PDF, the unit is &#39;inch&#39;.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public TextRecognitionResult width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the image in pixels or the PDF in inches.
   * @return width
   */
  @javax.annotation.Nullable
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextRecognitionResult textRecognitionResult = (TextRecognitionResult) o;
    return Objects.equals(this.clockwiseOrientation, textRecognitionResult.clockwiseOrientation) &&
        Objects.equals(this.height, textRecognitionResult.height) &&
        Objects.equals(this.lines, textRecognitionResult.lines) &&
        Objects.equals(this.page, textRecognitionResult.page) &&
        Objects.equals(this.unit, textRecognitionResult.unit) &&
        Objects.equals(this.width, textRecognitionResult.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clockwiseOrientation, height, lines, page, unit, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextRecognitionResult {\n");
    sb.append("    clockwiseOrientation: ").append(toIndentedString(clockwiseOrientation)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clockwiseOrientation");
    openapiFields.add("height");
    openapiFields.add("lines");
    openapiFields.add("page");
    openapiFields.add("unit");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lines");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextRecognitionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextRecognitionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextRecognitionResult is not found in the empty JSON string", TextRecognitionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextRecognitionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextRecognitionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextRecognitionResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
      }

      JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
      // validate the required field `lines` (array)
      for (int i = 0; i < jsonArraylines.size(); i++) {
        Line.validateJsonElement(jsonArraylines.get(i));
      };
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextRecognitionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextRecognitionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextRecognitionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextRecognitionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TextRecognitionResult>() {
           @Override
           public void write(JsonWriter out, TextRecognitionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextRecognitionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextRecognitionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextRecognitionResult
   * @throws IOException if the JSON string is invalid with respect to TextRecognitionResult
   */
  public static TextRecognitionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextRecognitionResult.class);
  }

  /**
   * Convert an instance of TextRecognitionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

