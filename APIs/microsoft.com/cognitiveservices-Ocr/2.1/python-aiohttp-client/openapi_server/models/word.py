# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Word(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: List[float]=None, confidence: str=None, text: str=None):
        """Word - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this Word.
        :param confidence: The confidence of this Word.
        :param text: The text of this Word.
        """
        self.openapi_types = {
            'bounding_box': List[float],
            'confidence': str,
            'text': str
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'confidence': 'confidence',
            'text': 'text'
        }

        self._bounding_box = bounding_box
        self._confidence = confidence
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Word':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Word of this Word.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this Word.

        Quadrangle bounding box, with coordinates in original image. The eight numbers represent the four points (x-coordinate, y-coordinate from the left-top corner of the image) of the detected rectangle from the left-top corner in the clockwise direction. For images, coordinates are in pixels. For PDF, coordinates are in inches.

        :return: The bounding_box of this Word.
        :rtype: List[float]
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this Word.

        Quadrangle bounding box, with coordinates in original image. The eight numbers represent the four points (x-coordinate, y-coordinate from the left-top corner of the image) of the detected rectangle from the left-top corner in the clockwise direction. For images, coordinates are in pixels. For PDF, coordinates are in inches.

        :param bounding_box: The bounding_box of this Word.
        :type bounding_box: List[float]
        """
        if bounding_box is None:
            raise ValueError("Invalid value for `bounding_box`, must not be `None`")

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this Word.

        Qualitative confidence measure.

        :return: The confidence of this Word.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Word.

        Qualitative confidence measure.

        :param confidence: The confidence of this Word.
        :type confidence: str
        """
        allowed_values = [None,"High", "Low"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def text(self):
        """Gets the text of this Word.

        The text content of the word.

        :return: The text of this Word.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Word.

        The text content of the word.

        :param text: The text of this Word.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
