/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Line from './Line';

/**
 * The TextRecognitionResult model module.
 * @module model/TextRecognitionResult
 * @version 2.1
 */
class TextRecognitionResult {
    /**
     * Constructs a new <code>TextRecognitionResult</code>.
     * An object representing a recognized text region
     * @alias module:model/TextRecognitionResult
     * @param lines {Array.<module:model/Line>} A list of recognized text lines.
     */
    constructor(lines) { 
        
        TextRecognitionResult.initialize(this, lines);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lines) { 
        obj['lines'] = lines;
    }

    /**
     * Constructs a <code>TextRecognitionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextRecognitionResult} obj Optional instance to populate.
     * @return {module:model/TextRecognitionResult} The populated <code>TextRecognitionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextRecognitionResult();

            if (data.hasOwnProperty('clockwiseOrientation')) {
                obj['clockwiseOrientation'] = ApiClient.convertToType(data['clockwiseOrientation'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [Line]);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextRecognitionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextRecognitionResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TextRecognitionResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                Line.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

TextRecognitionResult.RequiredProperties = ["lines"];

/**
 * The orientation of the image in degrees in the clockwise direction. Range between [0, 360).
 * @member {Number} clockwiseOrientation
 */
TextRecognitionResult.prototype['clockwiseOrientation'] = undefined;

/**
 * The height of the image in pixels or the PDF in inches.
 * @member {Number} height
 */
TextRecognitionResult.prototype['height'] = undefined;

/**
 * A list of recognized text lines.
 * @member {Array.<module:model/Line>} lines
 */
TextRecognitionResult.prototype['lines'] = undefined;

/**
 * The 1-based page number of the recognition result.
 * @member {Number} page
 */
TextRecognitionResult.prototype['page'] = undefined;

/**
 * The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is 'inch'.
 * @member {module:model/TextRecognitionResult.UnitEnum} unit
 */
TextRecognitionResult.prototype['unit'] = undefined;

/**
 * The width of the image in pixels or the PDF in inches.
 * @member {Number} width
 */
TextRecognitionResult.prototype['width'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
TextRecognitionResult['UnitEnum'] = {

    /**
     * value: "pixel"
     * @const
     */
    "pixel": "pixel",

    /**
     * value: "inch"
     * @const
     */
    "inch": "inch"
};



export default TextRecognitionResult;

