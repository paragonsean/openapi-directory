/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComputerVisionError from '../model/ComputerVisionError';
import ImageUrl from '../model/ImageUrl';
import ReadOperationResult from '../model/ReadOperationResult';
import TextOperationResult from '../model/TextOperationResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchReadFile operation.
     * @callback module:api/DefaultApi~batchReadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.â€‹
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {module:api/DefaultApi~batchReadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    batchReadFile(imageUrl, callback) {
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling batchReadFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/read/core/asyncBatchAnalyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadOperationResult operation.
     * @callback module:api/DefaultApi~getReadOperationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     * @param {String} operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @param {module:api/DefaultApi~getReadOperationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadOperationResult}
     */
    getReadOperationResult(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getReadOperationResult");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReadOperationResult;
      return this.apiClient.callApi(
        '/read/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextOperationResult operation.
     * @callback module:api/DefaultApi~getTextOperationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
     * @param {String} operationId Id of the text operation returned in the response of the 'Recognize Text'
     * @param {module:api/DefaultApi~getTextOperationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextOperationResult}
     */
    getTextOperationResult(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getTextOperationResult");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextOperationResult;
      return this.apiClient.callApi(
        '/textOperations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeText operation.
     * @callback module:api/DefaultApi~recognizeTextCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     * @param {module:model/String} mode Type of text to recognize.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {module:api/DefaultApi~recognizeTextCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recognizeText(mode, imageUrl, callback) {
      let postBody = imageUrl;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling recognizeText");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling recognizeText");
      }

      let pathParams = {
      };
      let queryParams = {
        'mode': mode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recognizeText', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
