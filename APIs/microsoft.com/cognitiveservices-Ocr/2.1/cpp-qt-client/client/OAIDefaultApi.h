/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComputerVisionError.h"
#include "OAIImageUrl.h"
#include "OAIReadOperationResult.h"
#include "OAITextOperationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    */
    virtual void batchReadFile(const OAIImageUrl &oai_image_url);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void getReadOperationResult(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void getTextOperationResult(const QString &operation_id);

    /**
    * @param[in]  mode QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    */
    virtual void recognizeText(const QString &mode, const OAIImageUrl &oai_image_url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void batchReadFileCallback(OAIHttpRequestWorker *worker);
    void getReadOperationResultCallback(OAIHttpRequestWorker *worker);
    void getTextOperationResultCallback(OAIHttpRequestWorker *worker);
    void recognizeTextCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void batchReadFileSignal();
    void getReadOperationResultSignal(OAIReadOperationResult summary);
    void getTextOperationResultSignal(OAITextOperationResult summary);
    void recognizeTextSignal();


    void batchReadFileSignalFull(OAIHttpRequestWorker *worker);
    void getReadOperationResultSignalFull(OAIHttpRequestWorker *worker, OAIReadOperationResult summary);
    void getTextOperationResultSignalFull(OAIHttpRequestWorker *worker, OAITextOperationResult summary);
    void recognizeTextSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use batchReadFileSignalError() instead")
    void batchReadFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void batchReadFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOperationResultSignalError() instead")
    void getReadOperationResultSignalE(OAIReadOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOperationResultSignalError(OAIReadOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextOperationResultSignalError() instead")
    void getTextOperationResultSignalE(OAITextOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextOperationResultSignalError(OAITextOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeTextSignalError() instead")
    void recognizeTextSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeTextSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use batchReadFileSignalErrorFull() instead")
    void batchReadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchReadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadOperationResultSignalErrorFull() instead")
    void getReadOperationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadOperationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextOperationResultSignalErrorFull() instead")
    void getTextOperationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextOperationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizeTextSignalErrorFull() instead")
    void recognizeTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizeTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
