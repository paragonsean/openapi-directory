/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextRecognitionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextRecognitionResult::OAITextRecognitionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextRecognitionResult::OAITextRecognitionResult() {
    this->initializeModel();
}

OAITextRecognitionResult::~OAITextRecognitionResult() {}

void OAITextRecognitionResult::initializeModel() {

    m_clockwise_orientation_isSet = false;
    m_clockwise_orientation_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAITextRecognitionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextRecognitionResult::fromJsonObject(QJsonObject json) {

    m_clockwise_orientation_isValid = ::OpenAPI::fromJsonValue(m_clockwise_orientation, json[QString("clockwiseOrientation")]);
    m_clockwise_orientation_isSet = !json[QString("clockwiseOrientation")].isNull() && m_clockwise_orientation_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAITextRecognitionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextRecognitionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_clockwise_orientation_isSet) {
        obj.insert(QString("clockwiseOrientation"), ::OpenAPI::toJsonValue(m_clockwise_orientation));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAITextRecognitionResult::getClockwiseOrientation() const {
    return m_clockwise_orientation;
}
void OAITextRecognitionResult::setClockwiseOrientation(const double &clockwise_orientation) {
    m_clockwise_orientation = clockwise_orientation;
    m_clockwise_orientation_isSet = true;
}

bool OAITextRecognitionResult::is_clockwise_orientation_Set() const{
    return m_clockwise_orientation_isSet;
}

bool OAITextRecognitionResult::is_clockwise_orientation_Valid() const{
    return m_clockwise_orientation_isValid;
}

double OAITextRecognitionResult::getHeight() const {
    return m_height;
}
void OAITextRecognitionResult::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAITextRecognitionResult::is_height_Set() const{
    return m_height_isSet;
}

bool OAITextRecognitionResult::is_height_Valid() const{
    return m_height_isValid;
}

QList<OAILine> OAITextRecognitionResult::getLines() const {
    return m_lines;
}
void OAITextRecognitionResult::setLines(const QList<OAILine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAITextRecognitionResult::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAITextRecognitionResult::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAITextRecognitionResult::getPage() const {
    return m_page;
}
void OAITextRecognitionResult::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAITextRecognitionResult::is_page_Set() const{
    return m_page_isSet;
}

bool OAITextRecognitionResult::is_page_Valid() const{
    return m_page_isValid;
}

QString OAITextRecognitionResult::getUnit() const {
    return m_unit;
}
void OAITextRecognitionResult::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAITextRecognitionResult::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAITextRecognitionResult::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAITextRecognitionResult::getWidth() const {
    return m_width;
}
void OAITextRecognitionResult::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAITextRecognitionResult::is_width_Set() const{
    return m_width_isSet;
}

bool OAITextRecognitionResult::is_width_Valid() const{
    return m_width_isValid;
}

bool OAITextRecognitionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clockwise_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextRecognitionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lines_isValid && true;
}

} // namespace OpenAPI
