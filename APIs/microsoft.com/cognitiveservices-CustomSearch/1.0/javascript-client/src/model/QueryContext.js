/**
 * Custom Search Client
 * The Bing Custom Search API lets you send a search query to Bing and get back search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryContext model module.
 * @module model/QueryContext
 * @version 1.0
 */
class QueryContext {
    /**
     * Constructs a new <code>QueryContext</code>.
     * Defines the query context that Bing used for the request.
     * @alias module:model/QueryContext
     * @param originalQuery {String} The query string as specified in the request.
     */
    constructor(originalQuery) { 
        
        QueryContext.initialize(this, originalQuery);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, originalQuery) { 
        obj['originalQuery'] = originalQuery;
    }

    /**
     * Constructs a <code>QueryContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryContext} obj Optional instance to populate.
     * @return {module:model/QueryContext} The populated <code>QueryContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryContext();

            if (data.hasOwnProperty('adultIntent')) {
                obj['adultIntent'] = ApiClient.convertToType(data['adultIntent'], 'Boolean');
            }
            if (data.hasOwnProperty('alterationOverrideQuery')) {
                obj['alterationOverrideQuery'] = ApiClient.convertToType(data['alterationOverrideQuery'], 'String');
            }
            if (data.hasOwnProperty('alteredQuery')) {
                obj['alteredQuery'] = ApiClient.convertToType(data['alteredQuery'], 'String');
            }
            if (data.hasOwnProperty('originalQuery')) {
                obj['originalQuery'] = ApiClient.convertToType(data['originalQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alterationOverrideQuery'] && !(typeof data['alterationOverrideQuery'] === 'string' || data['alterationOverrideQuery'] instanceof String)) {
            throw new Error("Expected the field `alterationOverrideQuery` to be a primitive type in the JSON string but got " + data['alterationOverrideQuery']);
        }
        // ensure the json data is a string
        if (data['alteredQuery'] && !(typeof data['alteredQuery'] === 'string' || data['alteredQuery'] instanceof String)) {
            throw new Error("Expected the field `alteredQuery` to be a primitive type in the JSON string but got " + data['alteredQuery']);
        }
        // ensure the json data is a string
        if (data['originalQuery'] && !(typeof data['originalQuery'] === 'string' || data['originalQuery'] instanceof String)) {
            throw new Error("Expected the field `originalQuery` to be a primitive type in the JSON string but got " + data['originalQuery']);
        }

        return true;
    }


}

QueryContext.RequiredProperties = ["originalQuery"];

/**
 * A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.
 * @member {Boolean} adultIntent
 */
QueryContext.prototype['adultIntent'] = undefined;

/**
 * The query string to use to force Bing to use the original string. For example, if the query string is \"saling downwind\", the override query string will be \"+saling downwind\". Remember to encode the query string which results in \"%2Bsaling+downwind\". This field is included only if the original query string contains a spelling mistake.
 * @member {String} alterationOverrideQuery
 */
QueryContext.prototype['alterationOverrideQuery'] = undefined;

/**
 * The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is \"saling downwind\", the altered query string will be \"sailing downwind\". This field is included only if the original query string contains a spelling mistake.
 * @member {String} alteredQuery
 */
QueryContext.prototype['alteredQuery'] = undefined;

/**
 * The query string as specified in the request.
 * @member {String} originalQuery
 */
QueryContext.prototype['originalQuery'] = undefined;






export default QueryContext;

