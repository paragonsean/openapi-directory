/**
 * Custom Search Client
 * The Bing Custom Search API lets you send a search query to Bing and get back search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreativeWork from './CreativeWork';
import Thing from './Thing';
import WebMetaTag from './WebMetaTag';
import WebPage from './WebPage';

/**
 * The WebPage model module.
 * @module model/WebPage
 * @version 1.0
 */
class WebPage {
    /**
     * Constructs a new <code>WebPage</code>.
     * Defines a webpage that is relevant to the query.
     * @alias module:model/WebPage
     * @extends module:model/CreativeWork
     * @implements module:model/CreativeWork
     * @param type {String} 
     */
    constructor(type) { 
        CreativeWork.initialize(this, type);
        WebPage.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>WebPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebPage} obj Optional instance to populate.
     * @return {module:model/WebPage} The populated <code>WebPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebPage();
            CreativeWork.constructFromObject(data, obj);
            CreativeWork.constructFromObject(data, obj);

            if (data.hasOwnProperty('dateLastCrawled')) {
                obj['dateLastCrawled'] = ApiClient.convertToType(data['dateLastCrawled'], 'String');
            }
            if (data.hasOwnProperty('deepLinks')) {
                obj['deepLinks'] = ApiClient.convertToType(data['deepLinks'], [WebPage]);
            }
            if (data.hasOwnProperty('displayUrl')) {
                obj['displayUrl'] = ApiClient.convertToType(data['displayUrl'], 'String');
            }
            if (data.hasOwnProperty('searchTags')) {
                obj['searchTags'] = ApiClient.convertToType(data['searchTags'], [WebMetaTag]);
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = ApiClient.convertToType(data['snippet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebPage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebPage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dateLastCrawled'] && !(typeof data['dateLastCrawled'] === 'string' || data['dateLastCrawled'] instanceof String)) {
            throw new Error("Expected the field `dateLastCrawled` to be a primitive type in the JSON string but got " + data['dateLastCrawled']);
        }
        if (data['deepLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deepLinks'])) {
                throw new Error("Expected the field `deepLinks` to be an array in the JSON data but got " + data['deepLinks']);
            }
            // validate the optional field `deepLinks` (array)
            for (const item of data['deepLinks']) {
                WebPage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayUrl'] && !(typeof data['displayUrl'] === 'string' || data['displayUrl'] instanceof String)) {
            throw new Error("Expected the field `displayUrl` to be a primitive type in the JSON string but got " + data['displayUrl']);
        }
        if (data['searchTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['searchTags'])) {
                throw new Error("Expected the field `searchTags` to be an array in the JSON data but got " + data['searchTags']);
            }
            // validate the optional field `searchTags` (array)
            for (const item of data['searchTags']) {
                WebMetaTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['snippet'] && !(typeof data['snippet'] === 'string' || data['snippet'] instanceof String)) {
            throw new Error("Expected the field `snippet` to be a primitive type in the JSON string but got " + data['snippet']);
        }

        return true;
    }


}

WebPage.RequiredProperties = ["_type"];

/**
 * The last time that Bing crawled the webpage. The date is in the form, YYYY-MM-DDTHH:MM:SS. For example, 2015-04-13T05:23:39.
 * @member {String} dateLastCrawled
 */
WebPage.prototype['dateLastCrawled'] = undefined;

/**
 * A list of links to related content that Bing found in the website that contains this webpage. The Webpage object in this context includes only the name, url, urlPingSuffix, and snippet fields.
 * @member {Array.<module:model/WebPage>} deepLinks
 */
WebPage.prototype['deepLinks'] = undefined;

/**
 * The display URL of the webpage. The URL is meant for display purposes only and is not well formed.
 * @member {String} displayUrl
 */
WebPage.prototype['displayUrl'] = undefined;

/**
 * A list of search tags that the webpage owner specified on the webpage. The API returns only indexed search tags. The name field of the MetaTag object contains the indexed search tag. Search tags begin with search.* (for example, search.assetId). The content field contains the tag's value.
 * @member {Array.<module:model/WebMetaTag>} searchTags
 */
WebPage.prototype['searchTags'] = undefined;

/**
 * A snippet of text from the webpage that describes its contents.
 * @member {String} snippet
 */
WebPage.prototype['snippet'] = undefined;


// Implement CreativeWork interface:
/**
 * An ID that uniquely identifies this item.
 * @member {String} bingId
 */
CreativeWork.prototype['bingId'] = undefined;
/**
 * A short description of the item.
 * @member {String} description
 */
CreativeWork.prototype['description'] = undefined;
/**
 * The name of the thing represented by this object.
 * @member {String} name
 */
CreativeWork.prototype['name'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
CreativeWork.prototype['url'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
CreativeWork.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
CreativeWork.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
CreativeWork.prototype['_type'] = undefined;




export default WebPage;

