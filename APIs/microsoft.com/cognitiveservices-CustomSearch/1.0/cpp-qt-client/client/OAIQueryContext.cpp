/**
 * Custom Search Client
 * The Bing Custom Search API lets you send a search query to Bing and get back search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryContext::OAIQueryContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryContext::OAIQueryContext() {
    this->initializeModel();
}

OAIQueryContext::~OAIQueryContext() {}

void OAIQueryContext::initializeModel() {

    m_adult_intent_isSet = false;
    m_adult_intent_isValid = false;

    m_alteration_override_query_isSet = false;
    m_alteration_override_query_isValid = false;

    m_altered_query_isSet = false;
    m_altered_query_isValid = false;

    m_original_query_isSet = false;
    m_original_query_isValid = false;
}

void OAIQueryContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryContext::fromJsonObject(QJsonObject json) {

    m_adult_intent_isValid = ::OpenAPI::fromJsonValue(m_adult_intent, json[QString("adultIntent")]);
    m_adult_intent_isSet = !json[QString("adultIntent")].isNull() && m_adult_intent_isValid;

    m_alteration_override_query_isValid = ::OpenAPI::fromJsonValue(m_alteration_override_query, json[QString("alterationOverrideQuery")]);
    m_alteration_override_query_isSet = !json[QString("alterationOverrideQuery")].isNull() && m_alteration_override_query_isValid;

    m_altered_query_isValid = ::OpenAPI::fromJsonValue(m_altered_query, json[QString("alteredQuery")]);
    m_altered_query_isSet = !json[QString("alteredQuery")].isNull() && m_altered_query_isValid;

    m_original_query_isValid = ::OpenAPI::fromJsonValue(m_original_query, json[QString("originalQuery")]);
    m_original_query_isSet = !json[QString("originalQuery")].isNull() && m_original_query_isValid;
}

QString OAIQueryContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryContext::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_intent_isSet) {
        obj.insert(QString("adultIntent"), ::OpenAPI::toJsonValue(m_adult_intent));
    }
    if (m_alteration_override_query_isSet) {
        obj.insert(QString("alterationOverrideQuery"), ::OpenAPI::toJsonValue(m_alteration_override_query));
    }
    if (m_altered_query_isSet) {
        obj.insert(QString("alteredQuery"), ::OpenAPI::toJsonValue(m_altered_query));
    }
    if (m_original_query_isSet) {
        obj.insert(QString("originalQuery"), ::OpenAPI::toJsonValue(m_original_query));
    }
    return obj;
}

bool OAIQueryContext::isAdultIntent() const {
    return m_adult_intent;
}
void OAIQueryContext::setAdultIntent(const bool &adult_intent) {
    m_adult_intent = adult_intent;
    m_adult_intent_isSet = true;
}

bool OAIQueryContext::is_adult_intent_Set() const{
    return m_adult_intent_isSet;
}

bool OAIQueryContext::is_adult_intent_Valid() const{
    return m_adult_intent_isValid;
}

QString OAIQueryContext::getAlterationOverrideQuery() const {
    return m_alteration_override_query;
}
void OAIQueryContext::setAlterationOverrideQuery(const QString &alteration_override_query) {
    m_alteration_override_query = alteration_override_query;
    m_alteration_override_query_isSet = true;
}

bool OAIQueryContext::is_alteration_override_query_Set() const{
    return m_alteration_override_query_isSet;
}

bool OAIQueryContext::is_alteration_override_query_Valid() const{
    return m_alteration_override_query_isValid;
}

QString OAIQueryContext::getAlteredQuery() const {
    return m_altered_query;
}
void OAIQueryContext::setAlteredQuery(const QString &altered_query) {
    m_altered_query = altered_query;
    m_altered_query_isSet = true;
}

bool OAIQueryContext::is_altered_query_Set() const{
    return m_altered_query_isSet;
}

bool OAIQueryContext::is_altered_query_Valid() const{
    return m_altered_query_isValid;
}

QString OAIQueryContext::getOriginalQuery() const {
    return m_original_query;
}
void OAIQueryContext::setOriginalQuery(const QString &original_query) {
    m_original_query = original_query;
    m_original_query_isSet = true;
}

bool OAIQueryContext::is_original_query_Set() const{
    return m_original_query_isSet;
}

bool OAIQueryContext::is_original_query_Valid() const{
    return m_original_query_isValid;
}

bool OAIQueryContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_intent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alteration_override_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altered_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_original_query_isValid && true;
}

} // namespace OpenAPI
