/*
 * Custom Search Client
 * The Bing Custom Search API lets you send a search query to Bing and get back search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.Response;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Answer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:30.446224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Answer extends Response {
  public static final String SERIALIZED_NAME_FOLLOW_UP_QUERIES = "followUpQueries";
  @SerializedName(SERIALIZED_NAME_FOLLOW_UP_QUERIES)
  private List<Query> followUpQueries = new ArrayList<>();

  public Answer() {
    this.type = this.getClass().getSimpleName();
  }

  public Answer(
     List<Query> followUpQueries, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.followUpQueries = followUpQueries;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Get followUpQueries
   * @return followUpQueries
   */
  @javax.annotation.Nullable
  public List<Query> getFollowUpQueries() {
    return followUpQueries;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Answer answer = (Answer) o;
    return Objects.equals(this.followUpQueries, answer.followUpQueries) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(followUpQueries, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Answer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    followUpQueries: ").append(toIndentedString(followUpQueries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Answer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Answer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Answer is not found in the empty JSON string", Answer.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "SearchResultsAnswer":
          SearchResultsAnswer.validateJsonElement(jsonElement);
          break;
        case "WebWebAnswer":
          WebWebAnswer.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Answer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Answer
   * @throws IOException if the JSON string is invalid with respect to Answer
   */
  public static Answer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Answer.class);
  }

  /**
   * Convert an instance of Answer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

