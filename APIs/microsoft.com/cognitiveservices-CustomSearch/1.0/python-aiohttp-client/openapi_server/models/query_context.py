# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult_intent: bool=None, alteration_override_query: str=None, altered_query: str=None, original_query: str=None):
        """QueryContext - a model defined in OpenAPI

        :param adult_intent: The adult_intent of this QueryContext.
        :param alteration_override_query: The alteration_override_query of this QueryContext.
        :param altered_query: The altered_query of this QueryContext.
        :param original_query: The original_query of this QueryContext.
        """
        self.openapi_types = {
            'adult_intent': bool,
            'alteration_override_query': str,
            'altered_query': str,
            'original_query': str
        }

        self.attribute_map = {
            'adult_intent': 'adultIntent',
            'alteration_override_query': 'alterationOverrideQuery',
            'altered_query': 'alteredQuery',
            'original_query': 'originalQuery'
        }

        self._adult_intent = adult_intent
        self._alteration_override_query = alteration_override_query
        self._altered_query = altered_query
        self._original_query = original_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryContext of this QueryContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult_intent(self):
        """Gets the adult_intent of this QueryContext.

        A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.

        :return: The adult_intent of this QueryContext.
        :rtype: bool
        """
        return self._adult_intent

    @adult_intent.setter
    def adult_intent(self, adult_intent):
        """Sets the adult_intent of this QueryContext.

        A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.

        :param adult_intent: The adult_intent of this QueryContext.
        :type adult_intent: bool
        """

        self._adult_intent = adult_intent

    @property
    def alteration_override_query(self):
        """Gets the alteration_override_query of this QueryContext.

        The query string to use to force Bing to use the original string. For example, if the query string is \"saling downwind\", the override query string will be \"+saling downwind\". Remember to encode the query string which results in \"%2Bsaling+downwind\". This field is included only if the original query string contains a spelling mistake.

        :return: The alteration_override_query of this QueryContext.
        :rtype: str
        """
        return self._alteration_override_query

    @alteration_override_query.setter
    def alteration_override_query(self, alteration_override_query):
        """Sets the alteration_override_query of this QueryContext.

        The query string to use to force Bing to use the original string. For example, if the query string is \"saling downwind\", the override query string will be \"+saling downwind\". Remember to encode the query string which results in \"%2Bsaling+downwind\". This field is included only if the original query string contains a spelling mistake.

        :param alteration_override_query: The alteration_override_query of this QueryContext.
        :type alteration_override_query: str
        """

        self._alteration_override_query = alteration_override_query

    @property
    def altered_query(self):
        """Gets the altered_query of this QueryContext.

        The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is \"saling downwind\", the altered query string will be \"sailing downwind\". This field is included only if the original query string contains a spelling mistake.

        :return: The altered_query of this QueryContext.
        :rtype: str
        """
        return self._altered_query

    @altered_query.setter
    def altered_query(self, altered_query):
        """Sets the altered_query of this QueryContext.

        The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is \"saling downwind\", the altered query string will be \"sailing downwind\". This field is included only if the original query string contains a spelling mistake.

        :param altered_query: The altered_query of this QueryContext.
        :type altered_query: str
        """

        self._altered_query = altered_query

    @property
    def original_query(self):
        """Gets the original_query of this QueryContext.

        The query string as specified in the request.

        :return: The original_query of this QueryContext.
        :rtype: str
        """
        return self._original_query

    @original_query.setter
    def original_query(self, original_query):
        """Sets the original_query of this QueryContext.

        The query string as specified in the request.

        :param original_query: The original_query of this QueryContext.
        :type original_query: str
        """
        if original_query is None:
            raise ValueError("Invalid value for `original_query`, must not be `None`")

        self._original_query = original_query
