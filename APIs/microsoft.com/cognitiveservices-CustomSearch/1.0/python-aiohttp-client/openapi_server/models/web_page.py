# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_work import CreativeWork
from openapi_server.models.thing import Thing
from openapi_server.models.web_meta_tag import WebMetaTag
from openapi_server import util


class WebPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_last_crawled: str=None, deep_links: List[WebPage]=None, display_url: str=None, search_tags: List[WebMetaTag]=None, snippet: str=None, provider: List[Thing]=None, text: str=None, thumbnail_url: str=None, bing_id: str=None, description: str=None, name: str=None, url: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """WebPage - a model defined in OpenAPI

        :param date_last_crawled: The date_last_crawled of this WebPage.
        :param deep_links: The deep_links of this WebPage.
        :param display_url: The display_url of this WebPage.
        :param search_tags: The search_tags of this WebPage.
        :param snippet: The snippet of this WebPage.
        :param provider: The provider of this WebPage.
        :param text: The text of this WebPage.
        :param thumbnail_url: The thumbnail_url of this WebPage.
        :param bing_id: The bing_id of this WebPage.
        :param description: The description of this WebPage.
        :param name: The name of this WebPage.
        :param url: The url of this WebPage.
        :param web_search_url: The web_search_url of this WebPage.
        :param id: The id of this WebPage.
        :param type: The type of this WebPage.
        """
        self.openapi_types = {
            'date_last_crawled': str,
            'deep_links': List[WebPage],
            'display_url': str,
            'search_tags': List[WebMetaTag],
            'snippet': str,
            'provider': List[Thing],
            'text': str,
            'thumbnail_url': str,
            'bing_id': str,
            'description': str,
            'name': str,
            'url': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'date_last_crawled': 'dateLastCrawled',
            'deep_links': 'deepLinks',
            'display_url': 'displayUrl',
            'search_tags': 'searchTags',
            'snippet': 'snippet',
            'provider': 'provider',
            'text': 'text',
            'thumbnail_url': 'thumbnailUrl',
            'bing_id': 'bingId',
            'description': 'description',
            'name': 'name',
            'url': 'url',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._date_last_crawled = date_last_crawled
        self._deep_links = deep_links
        self._display_url = display_url
        self._search_tags = search_tags
        self._snippet = snippet
        self._provider = provider
        self._text = text
        self._thumbnail_url = thumbnail_url
        self._bing_id = bing_id
        self._description = description
        self._name = name
        self._url = url
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebPage of this WebPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_last_crawled(self):
        """Gets the date_last_crawled of this WebPage.

        The last time that Bing crawled the webpage. The date is in the form, YYYY-MM-DDTHH:MM:SS. For example, 2015-04-13T05:23:39.

        :return: The date_last_crawled of this WebPage.
        :rtype: str
        """
        return self._date_last_crawled

    @date_last_crawled.setter
    def date_last_crawled(self, date_last_crawled):
        """Sets the date_last_crawled of this WebPage.

        The last time that Bing crawled the webpage. The date is in the form, YYYY-MM-DDTHH:MM:SS. For example, 2015-04-13T05:23:39.

        :param date_last_crawled: The date_last_crawled of this WebPage.
        :type date_last_crawled: str
        """

        self._date_last_crawled = date_last_crawled

    @property
    def deep_links(self):
        """Gets the deep_links of this WebPage.

        A list of links to related content that Bing found in the website that contains this webpage. The Webpage object in this context includes only the name, url, urlPingSuffix, and snippet fields.

        :return: The deep_links of this WebPage.
        :rtype: List[WebPage]
        """
        return self._deep_links

    @deep_links.setter
    def deep_links(self, deep_links):
        """Sets the deep_links of this WebPage.

        A list of links to related content that Bing found in the website that contains this webpage. The Webpage object in this context includes only the name, url, urlPingSuffix, and snippet fields.

        :param deep_links: The deep_links of this WebPage.
        :type deep_links: List[WebPage]
        """

        self._deep_links = deep_links

    @property
    def display_url(self):
        """Gets the display_url of this WebPage.

        The display URL of the webpage. The URL is meant for display purposes only and is not well formed.

        :return: The display_url of this WebPage.
        :rtype: str
        """
        return self._display_url

    @display_url.setter
    def display_url(self, display_url):
        """Sets the display_url of this WebPage.

        The display URL of the webpage. The URL is meant for display purposes only and is not well formed.

        :param display_url: The display_url of this WebPage.
        :type display_url: str
        """

        self._display_url = display_url

    @property
    def search_tags(self):
        """Gets the search_tags of this WebPage.

        A list of search tags that the webpage owner specified on the webpage. The API returns only indexed search tags. The name field of the MetaTag object contains the indexed search tag. Search tags begin with search.* (for example, search.assetId). The content field contains the tag's value.

        :return: The search_tags of this WebPage.
        :rtype: List[WebMetaTag]
        """
        return self._search_tags

    @search_tags.setter
    def search_tags(self, search_tags):
        """Sets the search_tags of this WebPage.

        A list of search tags that the webpage owner specified on the webpage. The API returns only indexed search tags. The name field of the MetaTag object contains the indexed search tag. Search tags begin with search.* (for example, search.assetId). The content field contains the tag's value.

        :param search_tags: The search_tags of this WebPage.
        :type search_tags: List[WebMetaTag]
        """

        self._search_tags = search_tags

    @property
    def snippet(self):
        """Gets the snippet of this WebPage.

        A snippet of text from the webpage that describes its contents.

        :return: The snippet of this WebPage.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this WebPage.

        A snippet of text from the webpage that describes its contents.

        :param snippet: The snippet of this WebPage.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def provider(self):
        """Gets the provider of this WebPage.

        The source of the creative work.

        :return: The provider of this WebPage.
        :rtype: List[Thing]
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this WebPage.

        The source of the creative work.

        :param provider: The provider of this WebPage.
        :type provider: List[Thing]
        """

        self._provider = provider

    @property
    def text(self):
        """Gets the text of this WebPage.


        :return: The text of this WebPage.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this WebPage.


        :param text: The text of this WebPage.
        :type text: str
        """

        self._text = text

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this WebPage.

        The URL to a thumbnail of the item.

        :return: The thumbnail_url of this WebPage.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this WebPage.

        The URL to a thumbnail of the item.

        :param thumbnail_url: The thumbnail_url of this WebPage.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def bing_id(self):
        """Gets the bing_id of this WebPage.

        An ID that uniquely identifies this item.

        :return: The bing_id of this WebPage.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this WebPage.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this WebPage.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this WebPage.

        A short description of the item.

        :return: The description of this WebPage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebPage.

        A short description of the item.

        :param description: The description of this WebPage.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this WebPage.

        The name of the thing represented by this object.

        :return: The name of this WebPage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebPage.

        The name of the thing represented by this object.

        :param name: The name of this WebPage.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this WebPage.

        The URL to get more information about the thing represented by this object.

        :return: The url of this WebPage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebPage.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this WebPage.
        :type url: str
        """

        self._url = url

    @property
    def web_search_url(self):
        """Gets the web_search_url of this WebPage.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this WebPage.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this WebPage.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this WebPage.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this WebPage.

        A String identifier.

        :return: The id of this WebPage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebPage.

        A String identifier.

        :param id: The id of this WebPage.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this WebPage.


        :return: The type of this WebPage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebPage.


        :param type: The type of this WebPage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
