# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_context import QueryContext
from openapi_server.models.response import Response
from openapi_server.models.web_web_answer import WebWebAnswer
from openapi_server import util


class SearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_context: QueryContext=None, web_pages: WebWebAnswer=None, web_search_url: str=None, id: str=None, type: str=None):
        """SearchResponse - a model defined in OpenAPI

        :param query_context: The query_context of this SearchResponse.
        :param web_pages: The web_pages of this SearchResponse.
        :param web_search_url: The web_search_url of this SearchResponse.
        :param id: The id of this SearchResponse.
        :param type: The type of this SearchResponse.
        """
        self.openapi_types = {
            'query_context': QueryContext,
            'web_pages': WebWebAnswer,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'query_context': 'queryContext',
            'web_pages': 'webPages',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._query_context = query_context
        self._web_pages = web_pages
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResponse of this SearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_context(self):
        """Gets the query_context of this SearchResponse.


        :return: The query_context of this SearchResponse.
        :rtype: QueryContext
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this SearchResponse.


        :param query_context: The query_context of this SearchResponse.
        :type query_context: QueryContext
        """

        self._query_context = query_context

    @property
    def web_pages(self):
        """Gets the web_pages of this SearchResponse.


        :return: The web_pages of this SearchResponse.
        :rtype: WebWebAnswer
        """
        return self._web_pages

    @web_pages.setter
    def web_pages(self, web_pages):
        """Sets the web_pages of this SearchResponse.


        :param web_pages: The web_pages of this SearchResponse.
        :type web_pages: WebWebAnswer
        """

        self._web_pages = web_pages

    @property
    def web_search_url(self):
        """Gets the web_search_url of this SearchResponse.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this SearchResponse.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this SearchResponse.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this SearchResponse.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this SearchResponse.

        A String identifier.

        :return: The id of this SearchResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchResponse.

        A String identifier.

        :param id: The id of this SearchResponse.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SearchResponse.


        :return: The type of this SearchResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchResponse.


        :param type: The type of this SearchResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
