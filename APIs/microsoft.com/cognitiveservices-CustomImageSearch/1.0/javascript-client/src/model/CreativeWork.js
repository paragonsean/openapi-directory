/**
 * Custom Image Search Client
 * The Bing Custom Image Search API lets you send an image search query to Bing and get back image search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageObject from './ImageObject';
import Thing from './Thing';

/**
 * The CreativeWork model module.
 * @module model/CreativeWork
 * @version 1.0
 */
class CreativeWork {
    /**
     * Constructs a new <code>CreativeWork</code>.
     * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
     * @alias module:model/CreativeWork
     * @extends module:model/Thing
     * @implements module:model/Thing
     * @param type {String} 
     */
    constructor(type) { 
        Thing.initialize(this, type);
        CreativeWork.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>CreativeWork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeWork} obj Optional instance to populate.
     * @return {module:model/CreativeWork} The populated <code>CreativeWork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeWork();
            Thing.constructFromObject(data, obj);
            Thing.constructFromObject(data, obj);

            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], [Thing]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thumbnailUrl')) {
                obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeWork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeWork</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreativeWork.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['provider']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['provider'])) {
                throw new Error("Expected the field `provider` to be an array in the JSON data but got " + data['provider']);
            }
            // validate the optional field `provider` (array)
            for (const item of data['provider']) {
                Thing.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['thumbnailUrl'] && !(typeof data['thumbnailUrl'] === 'string' || data['thumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got " + data['thumbnailUrl']);
        }

        return true;
    }


}

CreativeWork.RequiredProperties = ["_type"];

/**
 * The source of the creative work.
 * @member {Array.<module:model/Thing>} provider
 */
CreativeWork.prototype['provider'] = undefined;

/**
 * Text content of this creative work
 * @member {String} text
 */
CreativeWork.prototype['text'] = undefined;

/**
 * The URL to a thumbnail of the item.
 * @member {String} thumbnailUrl
 */
CreativeWork.prototype['thumbnailUrl'] = undefined;


// Implement Thing interface:
/**
 * The URL that returns this resource.
 * @member {String} readLink
 */
Thing.prototype['readLink'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
Thing.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
Thing.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
Thing.prototype['_type'] = undefined;




export default CreativeWork;

