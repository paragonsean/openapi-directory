/**
 * Custom Image Search Client
 * The Bing Custom Image Search API lets you send an image search query to Bing and get back image search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebPage::OAIWebPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebPage::OAIWebPage() {
    this->initializeModel();
}

OAIWebPage::~OAIWebPage() {}

void OAIWebPage::initializeModel() {

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIWebPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebPage::fromJsonObject(QJsonObject json) {

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIWebPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebPage::asJsonObject() const {
    QJsonObject obj;
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAIThing> OAIWebPage::getProvider() const {
    return m_provider;
}
void OAIWebPage::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIWebPage::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIWebPage::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIWebPage::getText() const {
    return m_text;
}
void OAIWebPage::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIWebPage::is_text_Set() const{
    return m_text_isSet;
}

bool OAIWebPage::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIWebPage::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIWebPage::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIWebPage::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIWebPage::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIWebPage::getAlternateName() const {
    return m_alternate_name;
}
void OAIWebPage::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIWebPage::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIWebPage::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIWebPage::getBingId() const {
    return m_bing_id;
}
void OAIWebPage::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIWebPage::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIWebPage::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIWebPage::getDescription() const {
    return m_description;
}
void OAIWebPage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebPage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebPage::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIWebPage::getImage() const {
    return m_image;
}
void OAIWebPage::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIWebPage::is_image_Set() const{
    return m_image_isSet;
}

bool OAIWebPage::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIWebPage::getName() const {
    return m_name;
}
void OAIWebPage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebPage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebPage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebPage::getUrl() const {
    return m_url;
}
void OAIWebPage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebPage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebPage::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebPage::getReadLink() const {
    return m_read_link;
}
void OAIWebPage::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIWebPage::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIWebPage::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIWebPage::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIWebPage::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIWebPage::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIWebPage::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIWebPage::getId() const {
    return m_id;
}
void OAIWebPage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebPage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebPage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebPage::getType() const {
    return m__type;
}
void OAIWebPage::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIWebPage::is__type_Set() const{
    return m__type_isSet;
}

bool OAIWebPage::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIWebPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
