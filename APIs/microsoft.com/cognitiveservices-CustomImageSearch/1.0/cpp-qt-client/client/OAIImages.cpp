/**
 * Custom Image Search Client
 * The Bing Custom Image Search API lets you send an image search query to Bing and get back image search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImages::OAIImages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImages::OAIImages() {
    this->initializeModel();
}

OAIImages::~OAIImages() {}

void OAIImages::initializeModel() {

    m_next_offset_isSet = false;
    m_next_offset_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_total_estimated_matches_isSet = false;
    m_total_estimated_matches_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImages::fromJsonObject(QJsonObject json) {

    m_next_offset_isValid = ::OpenAPI::fromJsonValue(m_next_offset, json[QString("nextOffset")]);
    m_next_offset_isSet = !json[QString("nextOffset")].isNull() && m_next_offset_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_total_estimated_matches_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_matches, json[QString("totalEstimatedMatches")]);
    m_total_estimated_matches_isSet = !json[QString("totalEstimatedMatches")].isNull() && m_total_estimated_matches_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImages::asJsonObject() const {
    QJsonObject obj;
    if (m_next_offset_isSet) {
        obj.insert(QString("nextOffset"), ::OpenAPI::toJsonValue(m_next_offset));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_total_estimated_matches_isSet) {
        obj.insert(QString("totalEstimatedMatches"), ::OpenAPI::toJsonValue(m_total_estimated_matches));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

qint32 OAIImages::getNextOffset() const {
    return m_next_offset;
}
void OAIImages::setNextOffset(const qint32 &next_offset) {
    m_next_offset = next_offset;
    m_next_offset_isSet = true;
}

bool OAIImages::is_next_offset_Set() const{
    return m_next_offset_isSet;
}

bool OAIImages::is_next_offset_Valid() const{
    return m_next_offset_isValid;
}

QList<OAIImageObject> OAIImages::getValue() const {
    return m_value;
}
void OAIImages::setValue(const QList<OAIImageObject> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIImages::is_value_Set() const{
    return m_value_isSet;
}

bool OAIImages::is_value_Valid() const{
    return m_value_isValid;
}

qint64 OAIImages::getTotalEstimatedMatches() const {
    return m_total_estimated_matches;
}
void OAIImages::setTotalEstimatedMatches(const qint64 &total_estimated_matches) {
    m_total_estimated_matches = total_estimated_matches;
    m_total_estimated_matches_isSet = true;
}

bool OAIImages::is_total_estimated_matches_Set() const{
    return m_total_estimated_matches_isSet;
}

bool OAIImages::is_total_estimated_matches_Valid() const{
    return m_total_estimated_matches_isValid;
}

QString OAIImages::getReadLink() const {
    return m_read_link;
}
void OAIImages::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImages::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImages::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImages::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImages::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImages::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImages::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImages::getId() const {
    return m_id;
}
void OAIImages::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImages::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImages::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImages::getType() const {
    return m__type;
}
void OAIImages::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImages::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImages::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
