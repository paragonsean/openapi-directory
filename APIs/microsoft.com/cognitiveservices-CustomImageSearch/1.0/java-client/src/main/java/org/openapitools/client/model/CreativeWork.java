/*
 * Custom Image Search Client
 * The Bing Custom Image Search API lets you send an image search query to Bing and get back image search results customized to meet your custom search definition.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:40.621386-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeWork extends Thing {
  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private List<Thing> provider = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public CreativeWork() {
    this.type = this.getClass().getSimpleName();
  }

  public CreativeWork(
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String alternateName, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.alternateName = alternateName;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * The source of the creative work.
   * @return provider
   */
  @javax.annotation.Nullable
  public List<Thing> getProvider() {
    return provider;
  }



  /**
   * Text content of this creative work
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }



  /**
   * The URL to a thumbnail of the item.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeWork creativeWork = (CreativeWork) o;
    return Objects.equals(this.provider, creativeWork.provider) &&
        Objects.equals(this.text, creativeWork.text) &&
        Objects.equals(this.thumbnailUrl, creativeWork.thumbnailUrl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, text, thumbnailUrl, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeWork {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateName");
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeWork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeWork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeWork is not found in the empty JSON string", CreativeWork.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "ImageObject":
          ImageObject.validateJsonElement(jsonElement);
          break;
        case "MediaObject":
          MediaObject.validateJsonElement(jsonElement);
          break;
        case "WebPage":
          WebPage.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of CreativeWork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeWork
   * @throws IOException if the JSON string is invalid with respect to CreativeWork
   */
  public static CreativeWork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeWork.class);
  }

  /**
   * Convert an instance of CreativeWork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

