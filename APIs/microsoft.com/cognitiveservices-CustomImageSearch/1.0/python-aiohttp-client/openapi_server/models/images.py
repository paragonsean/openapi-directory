# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_object import ImageObject
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server import util


class Images(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_offset: int=None, value: List[ImageObject]=None, total_estimated_matches: int=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """Images - a model defined in OpenAPI

        :param next_offset: The next_offset of this Images.
        :param value: The value of this Images.
        :param total_estimated_matches: The total_estimated_matches of this Images.
        :param read_link: The read_link of this Images.
        :param web_search_url: The web_search_url of this Images.
        :param id: The id of this Images.
        :param type: The type of this Images.
        """
        self.openapi_types = {
            'next_offset': int,
            'value': List[ImageObject],
            'total_estimated_matches': int,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'next_offset': 'nextOffset',
            'value': 'value',
            'total_estimated_matches': 'totalEstimatedMatches',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._next_offset = next_offset
        self._value = value
        self._total_estimated_matches = total_estimated_matches
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Images':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Images of this Images.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_offset(self):
        """Gets the next_offset of this Images.

        Used as part of deduping. Tells client the next offset that client should use in the next pagination request

        :return: The next_offset of this Images.
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this Images.

        Used as part of deduping. Tells client the next offset that client should use in the next pagination request

        :param next_offset: The next_offset of this Images.
        :type next_offset: int
        """

        self._next_offset = next_offset

    @property
    def value(self):
        """Gets the value of this Images.

        A list of image objects that are relevant to the query. If there are no results, the List is empty.

        :return: The value of this Images.
        :rtype: List[ImageObject]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Images.

        A list of image objects that are relevant to the query. If there are no results, the List is empty.

        :param value: The value of this Images.
        :type value: List[ImageObject]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def total_estimated_matches(self):
        """Gets the total_estimated_matches of this Images.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :return: The total_estimated_matches of this Images.
        :rtype: int
        """
        return self._total_estimated_matches

    @total_estimated_matches.setter
    def total_estimated_matches(self, total_estimated_matches):
        """Sets the total_estimated_matches of this Images.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :param total_estimated_matches: The total_estimated_matches of this Images.
        :type total_estimated_matches: int
        """

        self._total_estimated_matches = total_estimated_matches

    @property
    def read_link(self):
        """Gets the read_link of this Images.

        The URL that returns this resource.

        :return: The read_link of this Images.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this Images.

        The URL that returns this resource.

        :param read_link: The read_link of this Images.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Images.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Images.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Images.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Images.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Images.

        A String identifier.

        :return: The id of this Images.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Images.

        A String identifier.

        :param id: The id of this Images.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Images.


        :return: The type of this Images.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Images.


        :param type: The type of this Images.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
