# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.adult_info import AdultInfo
from openapi_server.models.category import Category
from openapi_server.models.color_info import ColorInfo
from openapi_server.models.detected_brand import DetectedBrand
from openapi_server.models.detected_object import DetectedObject
from openapi_server.models.face_description import FaceDescription
from openapi_server.models.image_description_details import ImageDescriptionDetails
from openapi_server.models.image_metadata import ImageMetadata
from openapi_server.models.image_tag import ImageTag
from openapi_server.models.image_type import ImageType
from openapi_server import util


class ImageAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult: AdultInfo=None, brands: List[DetectedBrand]=None, categories: List[Category]=None, color: ColorInfo=None, description: ImageDescriptionDetails=None, faces: List[FaceDescription]=None, image_type: ImageType=None, metadata: ImageMetadata=None, objects: List[DetectedObject]=None, request_id: str=None, tags: List[ImageTag]=None):
        """ImageAnalysis - a model defined in OpenAPI

        :param adult: The adult of this ImageAnalysis.
        :param brands: The brands of this ImageAnalysis.
        :param categories: The categories of this ImageAnalysis.
        :param color: The color of this ImageAnalysis.
        :param description: The description of this ImageAnalysis.
        :param faces: The faces of this ImageAnalysis.
        :param image_type: The image_type of this ImageAnalysis.
        :param metadata: The metadata of this ImageAnalysis.
        :param objects: The objects of this ImageAnalysis.
        :param request_id: The request_id of this ImageAnalysis.
        :param tags: The tags of this ImageAnalysis.
        """
        self.openapi_types = {
            'adult': AdultInfo,
            'brands': List[DetectedBrand],
            'categories': List[Category],
            'color': ColorInfo,
            'description': ImageDescriptionDetails,
            'faces': List[FaceDescription],
            'image_type': ImageType,
            'metadata': ImageMetadata,
            'objects': List[DetectedObject],
            'request_id': str,
            'tags': List[ImageTag]
        }

        self.attribute_map = {
            'adult': 'adult',
            'brands': 'brands',
            'categories': 'categories',
            'color': 'color',
            'description': 'description',
            'faces': 'faces',
            'image_type': 'imageType',
            'metadata': 'metadata',
            'objects': 'objects',
            'request_id': 'requestId',
            'tags': 'tags'
        }

        self._adult = adult
        self._brands = brands
        self._categories = categories
        self._color = color
        self._description = description
        self._faces = faces
        self._image_type = image_type
        self._metadata = metadata
        self._objects = objects
        self._request_id = request_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAnalysis of this ImageAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult(self):
        """Gets the adult of this ImageAnalysis.


        :return: The adult of this ImageAnalysis.
        :rtype: AdultInfo
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this ImageAnalysis.


        :param adult: The adult of this ImageAnalysis.
        :type adult: AdultInfo
        """

        self._adult = adult

    @property
    def brands(self):
        """Gets the brands of this ImageAnalysis.

        Array of brands detected in the image.

        :return: The brands of this ImageAnalysis.
        :rtype: List[DetectedBrand]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this ImageAnalysis.

        Array of brands detected in the image.

        :param brands: The brands of this ImageAnalysis.
        :type brands: List[DetectedBrand]
        """

        self._brands = brands

    @property
    def categories(self):
        """Gets the categories of this ImageAnalysis.

        An array indicating identified categories.

        :return: The categories of this ImageAnalysis.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ImageAnalysis.

        An array indicating identified categories.

        :param categories: The categories of this ImageAnalysis.
        :type categories: List[Category]
        """

        self._categories = categories

    @property
    def color(self):
        """Gets the color of this ImageAnalysis.


        :return: The color of this ImageAnalysis.
        :rtype: ColorInfo
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ImageAnalysis.


        :param color: The color of this ImageAnalysis.
        :type color: ColorInfo
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this ImageAnalysis.


        :return: The description of this ImageAnalysis.
        :rtype: ImageDescriptionDetails
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImageAnalysis.


        :param description: The description of this ImageAnalysis.
        :type description: ImageDescriptionDetails
        """

        self._description = description

    @property
    def faces(self):
        """Gets the faces of this ImageAnalysis.

        An array of possible faces within the image.

        :return: The faces of this ImageAnalysis.
        :rtype: List[FaceDescription]
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this ImageAnalysis.

        An array of possible faces within the image.

        :param faces: The faces of this ImageAnalysis.
        :type faces: List[FaceDescription]
        """

        self._faces = faces

    @property
    def image_type(self):
        """Gets the image_type of this ImageAnalysis.


        :return: The image_type of this ImageAnalysis.
        :rtype: ImageType
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this ImageAnalysis.


        :param image_type: The image_type of this ImageAnalysis.
        :type image_type: ImageType
        """

        self._image_type = image_type

    @property
    def metadata(self):
        """Gets the metadata of this ImageAnalysis.


        :return: The metadata of this ImageAnalysis.
        :rtype: ImageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ImageAnalysis.


        :param metadata: The metadata of this ImageAnalysis.
        :type metadata: ImageMetadata
        """

        self._metadata = metadata

    @property
    def objects(self):
        """Gets the objects of this ImageAnalysis.

        Array of objects describing what was detected in the image.

        :return: The objects of this ImageAnalysis.
        :rtype: List[DetectedObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this ImageAnalysis.

        Array of objects describing what was detected in the image.

        :param objects: The objects of this ImageAnalysis.
        :type objects: List[DetectedObject]
        """

        self._objects = objects

    @property
    def request_id(self):
        """Gets the request_id of this ImageAnalysis.

        Id of the REST API request.

        :return: The request_id of this ImageAnalysis.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ImageAnalysis.

        Id of the REST API request.

        :param request_id: The request_id of this ImageAnalysis.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def tags(self):
        """Gets the tags of this ImageAnalysis.

        A list of tags with confidence level.

        :return: The tags of this ImageAnalysis.
        :rtype: List[ImageTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImageAnalysis.

        A list of tags with confidence level.

        :param tags: The tags of this ImageAnalysis.
        :type tags: List[ImageTag]
        """

        self._tags = tags
