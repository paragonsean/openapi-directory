# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_rect import BoundingRect
from openapi_server.models.object_hierarchy import ObjectHierarchy
from openapi_server import util


class DetectedObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, object: str=None, parent: ObjectHierarchy=None, rectangle: BoundingRect=None):
        """DetectedObject - a model defined in OpenAPI

        :param confidence: The confidence of this DetectedObject.
        :param object: The object of this DetectedObject.
        :param parent: The parent of this DetectedObject.
        :param rectangle: The rectangle of this DetectedObject.
        """
        self.openapi_types = {
            'confidence': float,
            'object': str,
            'parent': ObjectHierarchy,
            'rectangle': BoundingRect
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'object': 'object',
            'parent': 'parent',
            'rectangle': 'rectangle'
        }

        self._confidence = confidence
        self._object = object
        self._parent = parent
        self._rectangle = rectangle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedObject of this DetectedObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this DetectedObject.

        Confidence score of having observed the object in the image, as a value ranging from 0 to 1.

        :return: The confidence of this DetectedObject.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DetectedObject.

        Confidence score of having observed the object in the image, as a value ranging from 0 to 1.

        :param confidence: The confidence of this DetectedObject.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def object(self):
        """Gets the object of this DetectedObject.

        Label for the object.

        :return: The object of this DetectedObject.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this DetectedObject.

        Label for the object.

        :param object: The object of this DetectedObject.
        :type object: str
        """

        self._object = object

    @property
    def parent(self):
        """Gets the parent of this DetectedObject.


        :return: The parent of this DetectedObject.
        :rtype: ObjectHierarchy
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DetectedObject.


        :param parent: The parent of this DetectedObject.
        :type parent: ObjectHierarchy
        """

        self._parent = parent

    @property
    def rectangle(self):
        """Gets the rectangle of this DetectedObject.


        :return: The rectangle of this DetectedObject.
        :rtype: BoundingRect
        """
        return self._rectangle

    @rectangle.setter
    def rectangle(self, rectangle):
        """Sets the rectangle of this DetectedObject.


        :param rectangle: The rectangle of this DetectedObject.
        :type rectangle: BoundingRect
        """

        self._rectangle = rectangle
