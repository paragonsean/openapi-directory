/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectResult::OAIDetectResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectResult::OAIDetectResult() {
    this->initializeModel();
}

OAIDetectResult::~OAIDetectResult() {}

void OAIDetectResult::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_objects_isSet = false;
    m_objects_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDetectResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectResult::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_objects_isValid = ::OpenAPI::fromJsonValue(m_objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIDetectResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectResult::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_objects.size() > 0) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(m_objects));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIImageMetadata OAIDetectResult::getMetadata() const {
    return m_metadata;
}
void OAIDetectResult::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDetectResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDetectResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIDetectedObject> OAIDetectResult::getObjects() const {
    return m_objects;
}
void OAIDetectResult::setObjects(const QList<OAIDetectedObject> &objects) {
    m_objects = objects;
    m_objects_isSet = true;
}

bool OAIDetectResult::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAIDetectResult::is_objects_Valid() const{
    return m_objects_isValid;
}

QString OAIDetectResult::getRequestId() const {
    return m_request_id;
}
void OAIDetectResult::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDetectResult::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDetectResult::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDetectResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
