/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorInfo::OAIColorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorInfo::OAIColorInfo() {
    this->initializeModel();
}

OAIColorInfo::~OAIColorInfo() {}

void OAIColorInfo::initializeModel() {

    m_accent_color_isSet = false;
    m_accent_color_isValid = false;

    m_dominant_color_background_isSet = false;
    m_dominant_color_background_isValid = false;

    m_dominant_color_foreground_isSet = false;
    m_dominant_color_foreground_isValid = false;

    m_dominant_colors_isSet = false;
    m_dominant_colors_isValid = false;

    m_is_bw_img_isSet = false;
    m_is_bw_img_isValid = false;
}

void OAIColorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorInfo::fromJsonObject(QJsonObject json) {

    m_accent_color_isValid = ::OpenAPI::fromJsonValue(m_accent_color, json[QString("accentColor")]);
    m_accent_color_isSet = !json[QString("accentColor")].isNull() && m_accent_color_isValid;

    m_dominant_color_background_isValid = ::OpenAPI::fromJsonValue(m_dominant_color_background, json[QString("dominantColorBackground")]);
    m_dominant_color_background_isSet = !json[QString("dominantColorBackground")].isNull() && m_dominant_color_background_isValid;

    m_dominant_color_foreground_isValid = ::OpenAPI::fromJsonValue(m_dominant_color_foreground, json[QString("dominantColorForeground")]);
    m_dominant_color_foreground_isSet = !json[QString("dominantColorForeground")].isNull() && m_dominant_color_foreground_isValid;

    m_dominant_colors_isValid = ::OpenAPI::fromJsonValue(m_dominant_colors, json[QString("dominantColors")]);
    m_dominant_colors_isSet = !json[QString("dominantColors")].isNull() && m_dominant_colors_isValid;

    m_is_bw_img_isValid = ::OpenAPI::fromJsonValue(m_is_bw_img, json[QString("isBWImg")]);
    m_is_bw_img_isSet = !json[QString("isBWImg")].isNull() && m_is_bw_img_isValid;
}

QString OAIColorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_accent_color_isSet) {
        obj.insert(QString("accentColor"), ::OpenAPI::toJsonValue(m_accent_color));
    }
    if (m_dominant_color_background_isSet) {
        obj.insert(QString("dominantColorBackground"), ::OpenAPI::toJsonValue(m_dominant_color_background));
    }
    if (m_dominant_color_foreground_isSet) {
        obj.insert(QString("dominantColorForeground"), ::OpenAPI::toJsonValue(m_dominant_color_foreground));
    }
    if (m_dominant_colors.size() > 0) {
        obj.insert(QString("dominantColors"), ::OpenAPI::toJsonValue(m_dominant_colors));
    }
    if (m_is_bw_img_isSet) {
        obj.insert(QString("isBWImg"), ::OpenAPI::toJsonValue(m_is_bw_img));
    }
    return obj;
}

QString OAIColorInfo::getAccentColor() const {
    return m_accent_color;
}
void OAIColorInfo::setAccentColor(const QString &accent_color) {
    m_accent_color = accent_color;
    m_accent_color_isSet = true;
}

bool OAIColorInfo::is_accent_color_Set() const{
    return m_accent_color_isSet;
}

bool OAIColorInfo::is_accent_color_Valid() const{
    return m_accent_color_isValid;
}

QString OAIColorInfo::getDominantColorBackground() const {
    return m_dominant_color_background;
}
void OAIColorInfo::setDominantColorBackground(const QString &dominant_color_background) {
    m_dominant_color_background = dominant_color_background;
    m_dominant_color_background_isSet = true;
}

bool OAIColorInfo::is_dominant_color_background_Set() const{
    return m_dominant_color_background_isSet;
}

bool OAIColorInfo::is_dominant_color_background_Valid() const{
    return m_dominant_color_background_isValid;
}

QString OAIColorInfo::getDominantColorForeground() const {
    return m_dominant_color_foreground;
}
void OAIColorInfo::setDominantColorForeground(const QString &dominant_color_foreground) {
    m_dominant_color_foreground = dominant_color_foreground;
    m_dominant_color_foreground_isSet = true;
}

bool OAIColorInfo::is_dominant_color_foreground_Set() const{
    return m_dominant_color_foreground_isSet;
}

bool OAIColorInfo::is_dominant_color_foreground_Valid() const{
    return m_dominant_color_foreground_isValid;
}

QList<QString> OAIColorInfo::getDominantColors() const {
    return m_dominant_colors;
}
void OAIColorInfo::setDominantColors(const QList<QString> &dominant_colors) {
    m_dominant_colors = dominant_colors;
    m_dominant_colors_isSet = true;
}

bool OAIColorInfo::is_dominant_colors_Set() const{
    return m_dominant_colors_isSet;
}

bool OAIColorInfo::is_dominant_colors_Valid() const{
    return m_dominant_colors_isValid;
}

bool OAIColorInfo::isIsBwImg() const {
    return m_is_bw_img;
}
void OAIColorInfo::setIsBwImg(const bool &is_bw_img) {
    m_is_bw_img = is_bw_img;
    m_is_bw_img_isSet = true;
}

bool OAIColorInfo::is_is_bw_img_Set() const{
    return m_is_bw_img_isSet;
}

bool OAIColorInfo::is_is_bw_img_Valid() const{
    return m_is_bw_img_isValid;
}

bool OAIColorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accent_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dominant_color_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dominant_color_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dominant_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bw_img_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
