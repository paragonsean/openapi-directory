/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListModelsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListModelsResult::OAIListModelsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListModelsResult::OAIListModelsResult() {
    this->initializeModel();
}

OAIListModelsResult::~OAIListModelsResult() {}

void OAIListModelsResult::initializeModel() {

    m_models_isSet = false;
    m_models_isValid = false;
}

void OAIListModelsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListModelsResult::fromJsonObject(QJsonObject json) {

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("models")]);
    m_models_isSet = !json[QString("models")].isNull() && m_models_isValid;
}

QString OAIListModelsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListModelsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_models.size() > 0) {
        obj.insert(QString("models"), ::OpenAPI::toJsonValue(m_models));
    }
    return obj;
}

QList<OAIModelDescription> OAIListModelsResult::getModels() const {
    return m_models;
}
void OAIListModelsResult::setModels(const QList<OAIModelDescription> &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAIListModelsResult::is_models_Set() const{
    return m_models_isSet;
}

bool OAIListModelsResult::is_models_Valid() const{
    return m_models_isValid;
}

bool OAIListModelsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListModelsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
