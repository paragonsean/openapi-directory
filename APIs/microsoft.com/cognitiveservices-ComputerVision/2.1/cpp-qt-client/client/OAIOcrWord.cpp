/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOcrWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOcrWord::OAIOcrWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOcrWord::OAIOcrWord() {
    this->initializeModel();
}

OAIOcrWord::~OAIOcrWord() {}

void OAIOcrWord::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIOcrWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOcrWord::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIOcrWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOcrWord::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box_isSet) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIOcrWord::getBoundingBox() const {
    return m_bounding_box;
}
void OAIOcrWord::setBoundingBox(const QString &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIOcrWord::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIOcrWord::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QString OAIOcrWord::getText() const {
    return m_text;
}
void OAIOcrWord::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIOcrWord::is_text_Set() const{
    return m_text_isSet;
}

bool OAIOcrWord::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIOcrWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOcrWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
