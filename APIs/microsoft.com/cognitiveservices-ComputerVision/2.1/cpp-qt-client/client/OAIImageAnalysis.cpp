/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnalysis::OAIImageAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnalysis::OAIImageAnalysis() {
    this->initializeModel();
}

OAIImageAnalysis::~OAIImageAnalysis() {}

void OAIImageAnalysis::initializeModel() {

    m_adult_isSet = false;
    m_adult_isValid = false;

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_faces_isSet = false;
    m_faces_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_objects_isSet = false;
    m_objects_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImageAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAnalysis::fromJsonObject(QJsonObject json) {

    m_adult_isValid = ::OpenAPI::fromJsonValue(m_adult, json[QString("adult")]);
    m_adult_isSet = !json[QString("adult")].isNull() && m_adult_isValid;

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("brands")]);
    m_brands_isSet = !json[QString("brands")].isNull() && m_brands_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_faces_isValid = ::OpenAPI::fromJsonValue(m_faces, json[QString("faces")]);
    m_faces_isSet = !json[QString("faces")].isNull() && m_faces_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_objects_isValid = ::OpenAPI::fromJsonValue(m_objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIImageAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_adult.isSet()) {
        obj.insert(QString("adult"), ::OpenAPI::toJsonValue(m_adult));
    }
    if (m_brands.size() > 0) {
        obj.insert(QString("brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_faces.size() > 0) {
        obj.insert(QString("faces"), ::OpenAPI::toJsonValue(m_faces));
    }
    if (m_image_type.isSet()) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_objects.size() > 0) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(m_objects));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAdultInfo OAIImageAnalysis::getAdult() const {
    return m_adult;
}
void OAIImageAnalysis::setAdult(const OAIAdultInfo &adult) {
    m_adult = adult;
    m_adult_isSet = true;
}

bool OAIImageAnalysis::is_adult_Set() const{
    return m_adult_isSet;
}

bool OAIImageAnalysis::is_adult_Valid() const{
    return m_adult_isValid;
}

QList<OAIDetectedBrand> OAIImageAnalysis::getBrands() const {
    return m_brands;
}
void OAIImageAnalysis::setBrands(const QList<OAIDetectedBrand> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIImageAnalysis::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIImageAnalysis::is_brands_Valid() const{
    return m_brands_isValid;
}

QList<OAICategory> OAIImageAnalysis::getCategories() const {
    return m_categories;
}
void OAIImageAnalysis::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIImageAnalysis::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIImageAnalysis::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIColorInfo OAIImageAnalysis::getColor() const {
    return m_color;
}
void OAIImageAnalysis::setColor(const OAIColorInfo &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIImageAnalysis::is_color_Set() const{
    return m_color_isSet;
}

bool OAIImageAnalysis::is_color_Valid() const{
    return m_color_isValid;
}

OAIImageDescriptionDetails OAIImageAnalysis::getDescription() const {
    return m_description;
}
void OAIImageAnalysis::setDescription(const OAIImageDescriptionDetails &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageAnalysis::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageAnalysis::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIFaceDescription> OAIImageAnalysis::getFaces() const {
    return m_faces;
}
void OAIImageAnalysis::setFaces(const QList<OAIFaceDescription> &faces) {
    m_faces = faces;
    m_faces_isSet = true;
}

bool OAIImageAnalysis::is_faces_Set() const{
    return m_faces_isSet;
}

bool OAIImageAnalysis::is_faces_Valid() const{
    return m_faces_isValid;
}

OAIImageType OAIImageAnalysis::getImageType() const {
    return m_image_type;
}
void OAIImageAnalysis::setImageType(const OAIImageType &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIImageAnalysis::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIImageAnalysis::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAIImageMetadata OAIImageAnalysis::getMetadata() const {
    return m_metadata;
}
void OAIImageAnalysis::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImageAnalysis::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImageAnalysis::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIDetectedObject> OAIImageAnalysis::getObjects() const {
    return m_objects;
}
void OAIImageAnalysis::setObjects(const QList<OAIDetectedObject> &objects) {
    m_objects = objects;
    m_objects_isSet = true;
}

bool OAIImageAnalysis::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAIImageAnalysis::is_objects_Valid() const{
    return m_objects_isValid;
}

QString OAIImageAnalysis::getRequestId() const {
    return m_request_id;
}
void OAIImageAnalysis::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIImageAnalysis::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIImageAnalysis::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<OAIImageTag> OAIImageAnalysis::getTags() const {
    return m_tags;
}
void OAIImageAnalysis::setTags(const QList<OAIImageTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImageAnalysis::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImageAnalysis::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImageAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_faces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
