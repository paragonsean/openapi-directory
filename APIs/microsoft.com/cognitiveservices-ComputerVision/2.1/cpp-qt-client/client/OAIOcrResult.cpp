/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOcrResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOcrResult::OAIOcrResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOcrResult::OAIOcrResult() {
    this->initializeModel();
}

OAIOcrResult::~OAIOcrResult() {}

void OAIOcrResult::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_text_angle_isSet = false;
    m_text_angle_isValid = false;
}

void OAIOcrResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOcrResult::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_text_angle_isValid = ::OpenAPI::fromJsonValue(m_text_angle, json[QString("textAngle")]);
    m_text_angle_isSet = !json[QString("textAngle")].isNull() && m_text_angle_isValid;
}

QString OAIOcrResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOcrResult::asJsonObject() const {
    QJsonObject obj;
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_text_angle_isSet) {
        obj.insert(QString("textAngle"), ::OpenAPI::toJsonValue(m_text_angle));
    }
    return obj;
}

QString OAIOcrResult::getLanguage() const {
    return m_language;
}
void OAIOcrResult::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIOcrResult::is_language_Set() const{
    return m_language_isSet;
}

bool OAIOcrResult::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIOcrResult::getOrientation() const {
    return m_orientation;
}
void OAIOcrResult::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIOcrResult::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIOcrResult::is_orientation_Valid() const{
    return m_orientation_isValid;
}

QList<OAIOcrRegion> OAIOcrResult::getRegions() const {
    return m_regions;
}
void OAIOcrResult::setRegions(const QList<OAIOcrRegion> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIOcrResult::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIOcrResult::is_regions_Valid() const{
    return m_regions_isValid;
}

double OAIOcrResult::getTextAngle() const {
    return m_text_angle;
}
void OAIOcrResult::setTextAngle(const double &text_angle) {
    m_text_angle = text_angle;
    m_text_angle_isSet = true;
}

bool OAIOcrResult::is_text_angle_Set() const{
    return m_text_angle_isSet;
}

bool OAIOcrResult::is_text_angle_Valid() const{
    return m_text_angle_isValid;
}

bool OAIOcrResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_angle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOcrResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
