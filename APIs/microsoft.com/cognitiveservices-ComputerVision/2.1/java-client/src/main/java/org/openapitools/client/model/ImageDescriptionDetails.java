/*
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageCaption;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:30.731561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageDescriptionDetails {
  public static final String SERIALIZED_NAME_CAPTIONS = "captions";
  @SerializedName(SERIALIZED_NAME_CAPTIONS)
  private List<ImageCaption> captions;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public ImageDescriptionDetails() {
  }

  public ImageDescriptionDetails captions(List<ImageCaption> captions) {
    this.captions = captions;
    return this;
  }

  public ImageDescriptionDetails addCaptionsItem(ImageCaption captionsItem) {
    if (this.captions == null) {
      this.captions = new ArrayList<>();
    }
    this.captions.add(captionsItem);
    return this;
  }

  /**
   * A list of captions, sorted by confidence level.
   * @return captions
   */
  @javax.annotation.Nullable
  public List<ImageCaption> getCaptions() {
    return captions;
  }

  public void setCaptions(List<ImageCaption> captions) {
    this.captions = captions;
  }


  public ImageDescriptionDetails tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ImageDescriptionDetails addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A collection of image tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDescriptionDetails imageDescriptionDetails = (ImageDescriptionDetails) o;
    return Objects.equals(this.captions, imageDescriptionDetails.captions) &&
        Objects.equals(this.tags, imageDescriptionDetails.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(captions, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDescriptionDetails {\n");
    sb.append("    captions: ").append(toIndentedString(captions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captions");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageDescriptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageDescriptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageDescriptionDetails is not found in the empty JSON string", ImageDescriptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageDescriptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageDescriptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("captions") != null && !jsonObj.get("captions").isJsonNull()) {
        JsonArray jsonArraycaptions = jsonObj.getAsJsonArray("captions");
        if (jsonArraycaptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("captions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `captions` to be an array in the JSON string but got `%s`", jsonObj.get("captions").toString()));
          }

          // validate the optional field `captions` (array)
          for (int i = 0; i < jsonArraycaptions.size(); i++) {
            ImageCaption.validateJsonElement(jsonArraycaptions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageDescriptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageDescriptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageDescriptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageDescriptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageDescriptionDetails>() {
           @Override
           public void write(JsonWriter out, ImageDescriptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageDescriptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageDescriptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageDescriptionDetails
   * @throws IOException if the JSON string is invalid with respect to ImageDescriptionDetails
   */
  public static ImageDescriptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageDescriptionDetails.class);
  }

  /**
   * Convert an instance of ImageDescriptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

