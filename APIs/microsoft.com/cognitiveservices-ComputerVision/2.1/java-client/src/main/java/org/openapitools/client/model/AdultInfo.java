/*
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object describing whether the image contains adult-oriented content and/or is racy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:30.731561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdultInfo {
  public static final String SERIALIZED_NAME_ADULT_SCORE = "adultScore";
  @SerializedName(SERIALIZED_NAME_ADULT_SCORE)
  private Double adultScore;

  public static final String SERIALIZED_NAME_GORE_SCORE = "goreScore";
  @SerializedName(SERIALIZED_NAME_GORE_SCORE)
  private Double goreScore;

  public static final String SERIALIZED_NAME_IS_ADULT_CONTENT = "isAdultContent";
  @SerializedName(SERIALIZED_NAME_IS_ADULT_CONTENT)
  private Boolean isAdultContent;

  public static final String SERIALIZED_NAME_IS_GORY_CONTENT = "isGoryContent";
  @SerializedName(SERIALIZED_NAME_IS_GORY_CONTENT)
  private Boolean isGoryContent;

  public static final String SERIALIZED_NAME_IS_RACY_CONTENT = "isRacyContent";
  @SerializedName(SERIALIZED_NAME_IS_RACY_CONTENT)
  private Boolean isRacyContent;

  public static final String SERIALIZED_NAME_RACY_SCORE = "racyScore";
  @SerializedName(SERIALIZED_NAME_RACY_SCORE)
  private Double racyScore;

  public AdultInfo() {
  }

  public AdultInfo adultScore(Double adultScore) {
    this.adultScore = adultScore;
    return this;
  }

  /**
   * Score from 0 to 1 that indicates how much the content is considered adult-oriented within the image.
   * @return adultScore
   */
  @javax.annotation.Nullable
  public Double getAdultScore() {
    return adultScore;
  }

  public void setAdultScore(Double adultScore) {
    this.adultScore = adultScore;
  }


  public AdultInfo goreScore(Double goreScore) {
    this.goreScore = goreScore;
    return this;
  }

  /**
   * Score from 0 to 1 that indicates how gory is the image.
   * @return goreScore
   */
  @javax.annotation.Nullable
  public Double getGoreScore() {
    return goreScore;
  }

  public void setGoreScore(Double goreScore) {
    this.goreScore = goreScore;
  }


  public AdultInfo isAdultContent(Boolean isAdultContent) {
    this.isAdultContent = isAdultContent;
    return this;
  }

  /**
   * A value indicating if the image contains adult-oriented content.
   * @return isAdultContent
   */
  @javax.annotation.Nullable
  public Boolean getIsAdultContent() {
    return isAdultContent;
  }

  public void setIsAdultContent(Boolean isAdultContent) {
    this.isAdultContent = isAdultContent;
  }


  public AdultInfo isGoryContent(Boolean isGoryContent) {
    this.isGoryContent = isGoryContent;
    return this;
  }

  /**
   * A value indicating if the image is gory.
   * @return isGoryContent
   */
  @javax.annotation.Nullable
  public Boolean getIsGoryContent() {
    return isGoryContent;
  }

  public void setIsGoryContent(Boolean isGoryContent) {
    this.isGoryContent = isGoryContent;
  }


  public AdultInfo isRacyContent(Boolean isRacyContent) {
    this.isRacyContent = isRacyContent;
    return this;
  }

  /**
   * A value indicating if the image is racy.
   * @return isRacyContent
   */
  @javax.annotation.Nullable
  public Boolean getIsRacyContent() {
    return isRacyContent;
  }

  public void setIsRacyContent(Boolean isRacyContent) {
    this.isRacyContent = isRacyContent;
  }


  public AdultInfo racyScore(Double racyScore) {
    this.racyScore = racyScore;
    return this;
  }

  /**
   * Score from 0 to 1 that indicates how suggestive is the image.
   * @return racyScore
   */
  @javax.annotation.Nullable
  public Double getRacyScore() {
    return racyScore;
  }

  public void setRacyScore(Double racyScore) {
    this.racyScore = racyScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdultInfo adultInfo = (AdultInfo) o;
    return Objects.equals(this.adultScore, adultInfo.adultScore) &&
        Objects.equals(this.goreScore, adultInfo.goreScore) &&
        Objects.equals(this.isAdultContent, adultInfo.isAdultContent) &&
        Objects.equals(this.isGoryContent, adultInfo.isGoryContent) &&
        Objects.equals(this.isRacyContent, adultInfo.isRacyContent) &&
        Objects.equals(this.racyScore, adultInfo.racyScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adultScore, goreScore, isAdultContent, isGoryContent, isRacyContent, racyScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdultInfo {\n");
    sb.append("    adultScore: ").append(toIndentedString(adultScore)).append("\n");
    sb.append("    goreScore: ").append(toIndentedString(goreScore)).append("\n");
    sb.append("    isAdultContent: ").append(toIndentedString(isAdultContent)).append("\n");
    sb.append("    isGoryContent: ").append(toIndentedString(isGoryContent)).append("\n");
    sb.append("    isRacyContent: ").append(toIndentedString(isRacyContent)).append("\n");
    sb.append("    racyScore: ").append(toIndentedString(racyScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adultScore");
    openapiFields.add("goreScore");
    openapiFields.add("isAdultContent");
    openapiFields.add("isGoryContent");
    openapiFields.add("isRacyContent");
    openapiFields.add("racyScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdultInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdultInfo is not found in the empty JSON string", AdultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AdultInfo>() {
           @Override
           public void write(JsonWriter out, AdultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdultInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdultInfo
   * @throws IOException if the JSON string is invalid with respect to AdultInfo
   */
  public static AdultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdultInfo.class);
  }

  /**
   * Convert an instance of AdultInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

