/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AreaOfInterestResult from '../model/AreaOfInterestResult';
import ComputerVisionError from '../model/ComputerVisionError';
import DetectResult from '../model/DetectResult';
import DomainModelResults from '../model/DomainModelResults';
import ImageAnalysis from '../model/ImageAnalysis';
import ImageDescription from '../model/ImageDescription';
import ImageUrl from '../model/ImageUrl';
import ListModelsResult from '../model/ListModelsResult';
import OcrResult from '../model/OcrResult';
import TagResult from '../model/TagResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyzeImage operation.
     * @callback module:api/DefaultApi~analyzeImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation extracts a rich set of visual features based on the image content.  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.  A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [visualFeatures] A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.
     * @param {Array.<module:model/String>} [details] A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.
     * @param {module:model/String} [language = 'en')] The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param {Array.<module:model/String>} [descriptionExclude] Turn off specified domain models when generating the description.
     * @param {module:api/DefaultApi~analyzeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAnalysis}
     */
    analyzeImage(imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling analyzeImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'visualFeatures': this.apiClient.buildCollectionParam(opts['visualFeatures'], 'csv'),
        'details': this.apiClient.buildCollectionParam(opts['details'], 'csv'),
        'language': opts['language'],
        'descriptionExclude': this.apiClient.buildCollectionParam(opts['descriptionExclude'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAnalysis;
      return this.apiClient.callApi(
        '/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyzeImageByDomain operation.
     * @callback module:api/DefaultApi~analyzeImageByDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.  A successful response will be returned in JSON.  If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {String} model The domain-specific content to recognize.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language = 'en')] The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param {module:api/DefaultApi~analyzeImageByDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainModelResults}
     */
    analyzeImageByDomain(model, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling analyzeImageByDomain");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling analyzeImageByDomain");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainModelResults;
      return this.apiClient.callApi(
        '/models/{model}/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImage operation.
     * @callback module:api/DefaultApi~describeImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.  A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCandidates = 1)] Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param {module:model/String} [language = 'en')] The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param {Array.<module:model/String>} [descriptionExclude] Turn off specified domain models when generating the description.
     * @param {module:api/DefaultApi~describeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageDescription}
     */
    describeImage(imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling describeImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxCandidates': opts['maxCandidates'],
        'language': opts['language'],
        'descriptionExclude': this.apiClient.buildCollectionParam(opts['descriptionExclude'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageDescription;
      return this.apiClient.callApi(
        '/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectObjects operation.
     * @callback module:api/DefaultApi~detectObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs object detection on the specified image.  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.  A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {module:api/DefaultApi~detectObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectResult}
     */
    detectObjects(imageUrl, callback) {
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling detectObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetectResult;
      return this.apiClient.callApi(
        '/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateThumbnail operation.
     * @callback module:api/DefaultApi~generateThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.  A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.  Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * @param {Number} width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param {Number} height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [smartCropping = false)] Boolean flag for enabling smart cropping.
     * @param {module:api/DefaultApi~generateThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    generateThumbnail(width, height, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling generateThumbnail");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling generateThumbnail");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling generateThumbnail");
      }

      let pathParams = {
      };
      let queryParams = {
        'width': width,
        'height': height,
        'smartCropping': opts['smartCropping']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/generateThumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAreaOfInterest operation.
     * @callback module:api/DefaultApi~getAreaOfInterestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AreaOfInterestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns a bounding box around the most important area of the image.  A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.  Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {module:api/DefaultApi~getAreaOfInterestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AreaOfInterestResult}
     */
    getAreaOfInterest(imageUrl, callback) {
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling getAreaOfInterest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AreaOfInterestResult;
      return this.apiClient.callApi(
        '/areaOfInterest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listModels operation.
     * @callback module:api/DefaultApi~listModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListModelsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.  A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {module:api/DefaultApi~listModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListModelsResult}
     */
    listModels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListModelsResult;
      return this.apiClient.callApi(
        '/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizePrintedText operation.
     * @callback module:api/DefaultApi~recognizePrintedTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OcrResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.  Upon success, the OCR results will be returned.  Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     * @param {Boolean} detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language = 'unk')] The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.
     * @param {module:api/DefaultApi~recognizePrintedTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OcrResult}
     */
    recognizePrintedText(detectOrientation, imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'detectOrientation' is set
      if (detectOrientation === undefined || detectOrientation === null) {
        throw new Error("Missing the required parameter 'detectOrientation' when calling recognizePrintedText");
      }
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling recognizePrintedText");
      }

      let pathParams = {
      };
      let queryParams = {
        'detectOrientation': detectOrientation,
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OcrResult;
      return this.apiClient.callApi(
        '/ocr', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagImage operation.
     * @callback module:api/DefaultApi~tagImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\".  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.  A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * @param {module:model/ImageUrl} imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [language = 'en')] The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param {module:api/DefaultApi~tagImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagResult}
     */
    tagImage(imageUrl, opts, callback) {
      opts = opts || {};
      let postBody = imageUrl;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling tagImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagResult;
      return this.apiClient.callApi(
        '/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
