/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ComputerVisionClient);
  }
}(this, function(expect, ComputerVisionClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ComputerVisionClient.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('analyzeImage', function() {
      it('should call analyzeImage successfully', function(done) {
        //uncomment below and update the code to test analyzeImage
        //instance.analyzeImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('analyzeImageByDomain', function() {
      it('should call analyzeImageByDomain successfully', function(done) {
        //uncomment below and update the code to test analyzeImageByDomain
        //instance.analyzeImageByDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImage', function() {
      it('should call describeImage successfully', function(done) {
        //uncomment below and update the code to test describeImage
        //instance.describeImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectObjects', function() {
      it('should call detectObjects successfully', function(done) {
        //uncomment below and update the code to test detectObjects
        //instance.detectObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateThumbnail', function() {
      it('should call generateThumbnail successfully', function(done) {
        //uncomment below and update the code to test generateThumbnail
        //instance.generateThumbnail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAreaOfInterest', function() {
      it('should call getAreaOfInterest successfully', function(done) {
        //uncomment below and update the code to test getAreaOfInterest
        //instance.getAreaOfInterest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModels', function() {
      it('should call listModels successfully', function(done) {
        //uncomment below and update the code to test listModels
        //instance.listModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recognizePrintedText', function() {
      it('should call recognizePrintedText successfully', function(done) {
        //uncomment below and update the code to test recognizePrintedText
        //instance.recognizePrintedText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagImage', function() {
      it('should call tagImage successfully', function(done) {
        //uncomment below and update the code to test tagImage
        //instance.tagImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
