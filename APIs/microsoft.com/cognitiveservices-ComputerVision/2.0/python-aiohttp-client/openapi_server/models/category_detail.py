# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.celebrities_model import CelebritiesModel
from openapi_server.models.landmarks_model import LandmarksModel
from openapi_server import util


class CategoryDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, celebrities: List[CelebritiesModel]=None, landmarks: List[LandmarksModel]=None):
        """CategoryDetail - a model defined in OpenAPI

        :param celebrities: The celebrities of this CategoryDetail.
        :param landmarks: The landmarks of this CategoryDetail.
        """
        self.openapi_types = {
            'celebrities': List[CelebritiesModel],
            'landmarks': List[LandmarksModel]
        }

        self.attribute_map = {
            'celebrities': 'celebrities',
            'landmarks': 'landmarks'
        }

        self._celebrities = celebrities
        self._landmarks = landmarks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryDetail of this CategoryDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def celebrities(self):
        """Gets the celebrities of this CategoryDetail.

        An array of celebrities if any identified.

        :return: The celebrities of this CategoryDetail.
        :rtype: List[CelebritiesModel]
        """
        return self._celebrities

    @celebrities.setter
    def celebrities(self, celebrities):
        """Sets the celebrities of this CategoryDetail.

        An array of celebrities if any identified.

        :param celebrities: The celebrities of this CategoryDetail.
        :type celebrities: List[CelebritiesModel]
        """

        self._celebrities = celebrities

    @property
    def landmarks(self):
        """Gets the landmarks of this CategoryDetail.

        An array of landmarks if any identified.

        :return: The landmarks of this CategoryDetail.
        :rtype: List[LandmarksModel]
        """
        return self._landmarks

    @landmarks.setter
    def landmarks(self, landmarks):
        """Sets the landmarks of this CategoryDetail.

        An array of landmarks if any identified.

        :param landmarks: The landmarks of this CategoryDetail.
        :type landmarks: List[LandmarksModel]
        """

        self._landmarks = landmarks
