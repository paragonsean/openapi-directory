# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ocr_region import OcrRegion
from openapi_server import util


class OcrResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, orientation: str=None, regions: List[OcrRegion]=None, text_angle: float=None):
        """OcrResult - a model defined in OpenAPI

        :param language: The language of this OcrResult.
        :param orientation: The orientation of this OcrResult.
        :param regions: The regions of this OcrResult.
        :param text_angle: The text_angle of this OcrResult.
        """
        self.openapi_types = {
            'language': str,
            'orientation': str,
            'regions': List[OcrRegion],
            'text_angle': float
        }

        self.attribute_map = {
            'language': 'language',
            'orientation': 'orientation',
            'regions': 'regions',
            'text_angle': 'textAngle'
        }

        self._language = language
        self._orientation = orientation
        self._regions = regions
        self._text_angle = text_angle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OcrResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OcrResult of this OcrResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this OcrResult.

        The BCP-47 language code of the text in the image.

        :return: The language of this OcrResult.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this OcrResult.

        The BCP-47 language code of the text in the image.

        :param language: The language of this OcrResult.
        :type language: str
        """

        self._language = language

    @property
    def orientation(self):
        """Gets the orientation of this OcrResult.

        Orientation of the text recognized in the image. The value (up, down, left, or right) refers to the direction that the top of the recognized text is facing, after the image has been rotated around its center according to the detected text angle (see textAngle property).

        :return: The orientation of this OcrResult.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this OcrResult.

        Orientation of the text recognized in the image. The value (up, down, left, or right) refers to the direction that the top of the recognized text is facing, after the image has been rotated around its center according to the detected text angle (see textAngle property).

        :param orientation: The orientation of this OcrResult.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def regions(self):
        """Gets the regions of this OcrResult.

        An array of objects, where each object represents a region of recognized text.

        :return: The regions of this OcrResult.
        :rtype: List[OcrRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this OcrResult.

        An array of objects, where each object represents a region of recognized text.

        :param regions: The regions of this OcrResult.
        :type regions: List[OcrRegion]
        """

        self._regions = regions

    @property
    def text_angle(self):
        """Gets the text_angle of this OcrResult.

        The angle, in degrees, of the detected text with respect to the closest horizontal or vertical direction. After rotating the input image clockwise by this angle, the recognized text lines become horizontal or vertical. In combination with the orientation property it can be used to overlay recognition results correctly on the original image, by rotating either the original image or recognition results by a suitable angle around the center of the original image. If the angle cannot be confidently detected, this property is not present. If the image contains text at different angles, only part of the text will be recognized correctly.

        :return: The text_angle of this OcrResult.
        :rtype: float
        """
        return self._text_angle

    @text_angle.setter
    def text_angle(self, text_angle):
        """Sets the text_angle of this OcrResult.

        The angle, in degrees, of the detected text with respect to the closest horizontal or vertical direction. After rotating the input image clockwise by this angle, the recognized text lines become horizontal or vertical. In combination with the orientation property it can be used to overlay recognition results correctly on the original image, by rotating either the original image or recognition results by a suitable angle around the center of the original image. If the angle cannot be confidently detected, this property is not present. If the image contains text at different angles, only part of the text will be recognized correctly.

        :param text_angle: The text_angle of this OcrResult.
        :type text_angle: float
        """

        self._text_angle = text_angle
