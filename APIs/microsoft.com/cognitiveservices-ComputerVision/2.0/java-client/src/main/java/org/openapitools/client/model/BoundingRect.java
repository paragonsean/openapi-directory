/*
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bounding box for an area inside an image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:33.477258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoundingRect {
  public static final String SERIALIZED_NAME_H = "h";
  @SerializedName(SERIALIZED_NAME_H)
  private Integer h;

  public static final String SERIALIZED_NAME_W = "w";
  @SerializedName(SERIALIZED_NAME_W)
  private Integer w;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private Integer x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private Integer y;

  public BoundingRect() {
  }

  public BoundingRect h(Integer h) {
    this.h = h;
    return this;
  }

  /**
   * Height measured from the top-left point of the area, in pixels.
   * @return h
   */
  @javax.annotation.Nullable
  public Integer getH() {
    return h;
  }

  public void setH(Integer h) {
    this.h = h;
  }


  public BoundingRect w(Integer w) {
    this.w = w;
    return this;
  }

  /**
   * Width measured from the top-left point of the area, in pixels.
   * @return w
   */
  @javax.annotation.Nullable
  public Integer getW() {
    return w;
  }

  public void setW(Integer w) {
    this.w = w;
  }


  public BoundingRect x(Integer x) {
    this.x = x;
    return this;
  }

  /**
   * X-coordinate of the top left point of the area, in pixels.
   * @return x
   */
  @javax.annotation.Nullable
  public Integer getX() {
    return x;
  }

  public void setX(Integer x) {
    this.x = x;
  }


  public BoundingRect y(Integer y) {
    this.y = y;
    return this;
  }

  /**
   * Y-coordinate of the top left point of the area, in pixels.
   * @return y
   */
  @javax.annotation.Nullable
  public Integer getY() {
    return y;
  }

  public void setY(Integer y) {
    this.y = y;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoundingRect boundingRect = (BoundingRect) o;
    return Objects.equals(this.h, boundingRect.h) &&
        Objects.equals(this.w, boundingRect.w) &&
        Objects.equals(this.x, boundingRect.x) &&
        Objects.equals(this.y, boundingRect.y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(h, w, x, y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoundingRect {\n");
    sb.append("    h: ").append(toIndentedString(h)).append("\n");
    sb.append("    w: ").append(toIndentedString(w)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("h");
    openapiFields.add("w");
    openapiFields.add("x");
    openapiFields.add("y");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoundingRect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoundingRect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoundingRect is not found in the empty JSON string", BoundingRect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoundingRect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoundingRect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoundingRect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoundingRect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoundingRect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoundingRect.class));

       return (TypeAdapter<T>) new TypeAdapter<BoundingRect>() {
           @Override
           public void write(JsonWriter out, BoundingRect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoundingRect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoundingRect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoundingRect
   * @throws IOException if the JSON string is invalid with respect to BoundingRect
   */
  public static BoundingRect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoundingRect.class);
  }

  /**
   * Convert an instance of BoundingRect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

