/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandmarksModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandmarksModel::OAILandmarksModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandmarksModel::OAILandmarksModel() {
    this->initializeModel();
}

OAILandmarksModel::~OAILandmarksModel() {}

void OAILandmarksModel::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILandmarksModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandmarksModel::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILandmarksModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandmarksModel::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

double OAILandmarksModel::getConfidence() const {
    return m_confidence;
}
void OAILandmarksModel::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAILandmarksModel::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAILandmarksModel::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAILandmarksModel::getName() const {
    return m_name;
}
void OAILandmarksModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILandmarksModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILandmarksModel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILandmarksModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandmarksModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
