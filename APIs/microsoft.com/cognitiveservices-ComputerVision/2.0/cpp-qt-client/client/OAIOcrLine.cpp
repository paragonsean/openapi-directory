/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOcrLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOcrLine::OAIOcrLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOcrLine::OAIOcrLine() {
    this->initializeModel();
}

OAIOcrLine::~OAIOcrLine() {}

void OAIOcrLine::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;
}

void OAIOcrLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOcrLine::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;
}

QString OAIOcrLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOcrLine::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box_isSet) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_words.size() > 0) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    return obj;
}

QString OAIOcrLine::getBoundingBox() const {
    return m_bounding_box;
}
void OAIOcrLine::setBoundingBox(const QString &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIOcrLine::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIOcrLine::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QList<OAIOcrWord> OAIOcrLine::getWords() const {
    return m_words;
}
void OAIOcrLine::setWords(const QList<OAIOcrWord> &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAIOcrLine::is_words_Set() const{
    return m_words_isSet;
}

bool OAIOcrLine::is_words_Valid() const{
    return m_words_isValid;
}

bool OAIOcrLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOcrLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
