/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFaceRectangle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFaceRectangle::OAIFaceRectangle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFaceRectangle::OAIFaceRectangle() {
    this->initializeModel();
}

OAIFaceRectangle::~OAIFaceRectangle() {}

void OAIFaceRectangle::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIFaceRectangle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFaceRectangle::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIFaceRectangle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFaceRectangle::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIFaceRectangle::getHeight() const {
    return m_height;
}
void OAIFaceRectangle::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIFaceRectangle::is_height_Set() const{
    return m_height_isSet;
}

bool OAIFaceRectangle::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIFaceRectangle::getLeft() const {
    return m_left;
}
void OAIFaceRectangle::setLeft(const qint32 &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAIFaceRectangle::is_left_Set() const{
    return m_left_isSet;
}

bool OAIFaceRectangle::is_left_Valid() const{
    return m_left_isValid;
}

qint32 OAIFaceRectangle::getTop() const {
    return m_top;
}
void OAIFaceRectangle::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIFaceRectangle::is_top_Set() const{
    return m_top_isSet;
}

bool OAIFaceRectangle::is_top_Valid() const{
    return m_top_isValid;
}

qint32 OAIFaceRectangle::getWidth() const {
    return m_width;
}
void OAIFaceRectangle::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIFaceRectangle::is_width_Set() const{
    return m_width_isSet;
}

bool OAIFaceRectangle::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIFaceRectangle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFaceRectangle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
