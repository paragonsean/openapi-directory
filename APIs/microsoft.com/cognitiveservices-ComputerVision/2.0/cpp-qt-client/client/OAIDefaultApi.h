/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAreaOfInterestResult.h"
#include "OAIComputerVisionError.h"
#include "OAIDetectResult.h"
#include "OAIDomainModelResults.h"
#include "OAIHttpFileElement.h"
#include "OAIImageAnalysis.h"
#include "OAIImageDescription.h"
#include "OAIImageUrl.h"
#include "OAIListModelsResult.h"
#include "OAIOcrResult.h"
#include "OAITagResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  visual_features QList<QString> [optional]
    * @param[in]  details QList<QString> [optional]
    * @param[in]  language QString [optional]
    */
    virtual void analyzeImage(const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QList<QString>> &visual_features = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &details = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model QString [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  language QString [optional]
    */
    virtual void analyzeImageByDomain(const QString &model, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  max_candidates qint32 [optional]
    * @param[in]  language QString [optional]
    */
    virtual void describeImage(const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<qint32> &max_candidates = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    */
    virtual void detectObjects(const OAIImageUrl &oai_image_url);

    /**
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  smart_cropping bool [optional]
    */
    virtual void generateThumbnail(const qint32 &width, const qint32 &height, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<bool> &smart_cropping = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    */
    virtual void getAreaOfInterest(const OAIImageUrl &oai_image_url);


    virtual void listModels();

    /**
    * @param[in]  detect_orientation bool [required]
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  language QString [optional]
    */
    virtual void recognizePrintedText(const bool &detect_orientation, const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_image_url OAIImageUrl [required]
    * @param[in]  language QString [optional]
    */
    virtual void tagImage(const OAIImageUrl &oai_image_url, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeImageCallback(OAIHttpRequestWorker *worker);
    void analyzeImageByDomainCallback(OAIHttpRequestWorker *worker);
    void describeImageCallback(OAIHttpRequestWorker *worker);
    void detectObjectsCallback(OAIHttpRequestWorker *worker);
    void generateThumbnailCallback(OAIHttpRequestWorker *worker);
    void getAreaOfInterestCallback(OAIHttpRequestWorker *worker);
    void listModelsCallback(OAIHttpRequestWorker *worker);
    void recognizePrintedTextCallback(OAIHttpRequestWorker *worker);
    void tagImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeImageSignal(OAIImageAnalysis summary);
    void analyzeImageByDomainSignal(OAIDomainModelResults summary);
    void describeImageSignal(OAIImageDescription summary);
    void detectObjectsSignal(OAIDetectResult summary);
    void generateThumbnailSignal(OAIHttpFileElement summary);
    void getAreaOfInterestSignal(OAIAreaOfInterestResult summary);
    void listModelsSignal(OAIListModelsResult summary);
    void recognizePrintedTextSignal(OAIOcrResult summary);
    void tagImageSignal(OAITagResult summary);


    void analyzeImageSignalFull(OAIHttpRequestWorker *worker, OAIImageAnalysis summary);
    void analyzeImageByDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainModelResults summary);
    void describeImageSignalFull(OAIHttpRequestWorker *worker, OAIImageDescription summary);
    void detectObjectsSignalFull(OAIHttpRequestWorker *worker, OAIDetectResult summary);
    void generateThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getAreaOfInterestSignalFull(OAIHttpRequestWorker *worker, OAIAreaOfInterestResult summary);
    void listModelsSignalFull(OAIHttpRequestWorker *worker, OAIListModelsResult summary);
    void recognizePrintedTextSignalFull(OAIHttpRequestWorker *worker, OAIOcrResult summary);
    void tagImageSignalFull(OAIHttpRequestWorker *worker, OAITagResult summary);

    Q_DECL_DEPRECATED_X("Use analyzeImageSignalError() instead")
    void analyzeImageSignalE(OAIImageAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageSignalError(OAIImageAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeImageByDomainSignalError() instead")
    void analyzeImageByDomainSignalE(OAIDomainModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageByDomainSignalError(OAIDomainModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeImageSignalError() instead")
    void describeImageSignalE(OAIImageDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeImageSignalError(OAIImageDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectsSignalError() instead")
    void detectObjectsSignalE(OAIDetectResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectsSignalError(OAIDetectResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateThumbnailSignalError() instead")
    void generateThumbnailSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateThumbnailSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAreaOfInterestSignalError() instead")
    void getAreaOfInterestSignalE(OAIAreaOfInterestResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAreaOfInterestSignalError(OAIAreaOfInterestResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalError() instead")
    void listModelsSignalE(OAIListModelsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalError(OAIListModelsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizePrintedTextSignalError() instead")
    void recognizePrintedTextSignalE(OAIOcrResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizePrintedTextSignalError(OAIOcrResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagImageSignalError() instead")
    void tagImageSignalE(OAITagResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagImageSignalError(OAITagResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeImageSignalErrorFull() instead")
    void analyzeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeImageByDomainSignalErrorFull() instead")
    void analyzeImageByDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeImageByDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeImageSignalErrorFull() instead")
    void describeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectObjectsSignalErrorFull() instead")
    void detectObjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectObjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateThumbnailSignalErrorFull() instead")
    void generateThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAreaOfInterestSignalErrorFull() instead")
    void getAreaOfInterestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAreaOfInterestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelsSignalErrorFull() instead")
    void listModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recognizePrintedTextSignalErrorFull() instead")
    void recognizePrintedTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recognizePrintedTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagImageSignalErrorFull() instead")
    void tagImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
