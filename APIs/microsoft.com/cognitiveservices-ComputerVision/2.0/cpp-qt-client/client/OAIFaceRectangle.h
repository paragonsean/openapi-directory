/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFaceRectangle.h
 *
 * An object describing face rectangle.
 */

#ifndef OAIFaceRectangle_H
#define OAIFaceRectangle_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFaceRectangle : public OAIObject {
public:
    OAIFaceRectangle();
    OAIFaceRectangle(QString json);
    ~OAIFaceRectangle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    qint32 getLeft() const;
    void setLeft(const qint32 &left);
    bool is_left_Set() const;
    bool is_left_Valid() const;

    qint32 getTop() const;
    void setTop(const qint32 &top);
    bool is_top_Set() const;
    bool is_top_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    qint32 m_left;
    bool m_left_isSet;
    bool m_left_isValid;

    qint32 m_top;
    bool m_top_isSet;
    bool m_top_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFaceRectangle)

#endif // OAIFaceRectangle_H
