/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandmarkResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandmarkResults::OAILandmarkResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandmarkResults::OAILandmarkResults() {
    this->initializeModel();
}

OAILandmarkResults::~OAILandmarkResults() {}

void OAILandmarkResults::initializeModel() {

    m_landmarks_isSet = false;
    m_landmarks_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAILandmarkResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandmarkResults::fromJsonObject(QJsonObject json) {

    m_landmarks_isValid = ::OpenAPI::fromJsonValue(m_landmarks, json[QString("landmarks")]);
    m_landmarks_isSet = !json[QString("landmarks")].isNull() && m_landmarks_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAILandmarkResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandmarkResults::asJsonObject() const {
    QJsonObject obj;
    if (m_landmarks.size() > 0) {
        obj.insert(QString("landmarks"), ::OpenAPI::toJsonValue(m_landmarks));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QList<OAILandmarksModel> OAILandmarkResults::getLandmarks() const {
    return m_landmarks;
}
void OAILandmarkResults::setLandmarks(const QList<OAILandmarksModel> &landmarks) {
    m_landmarks = landmarks;
    m_landmarks_isSet = true;
}

bool OAILandmarkResults::is_landmarks_Set() const{
    return m_landmarks_isSet;
}

bool OAILandmarkResults::is_landmarks_Valid() const{
    return m_landmarks_isValid;
}

OAIImageMetadata OAILandmarkResults::getMetadata() const {
    return m_metadata;
}
void OAILandmarkResults::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILandmarkResults::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILandmarkResults::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILandmarkResults::getRequestId() const {
    return m_request_id;
}
void OAILandmarkResults::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAILandmarkResults::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAILandmarkResults::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAILandmarkResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_landmarks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandmarkResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
