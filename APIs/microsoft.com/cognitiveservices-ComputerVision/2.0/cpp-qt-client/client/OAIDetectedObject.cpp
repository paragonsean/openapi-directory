/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedObject::OAIDetectedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedObject::OAIDetectedObject() {
    this->initializeModel();
}

OAIDetectedObject::~OAIDetectedObject() {}

void OAIDetectedObject::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_rectangle_isSet = false;
    m_rectangle_isValid = false;
}

void OAIDetectedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedObject::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_rectangle_isValid = ::OpenAPI::fromJsonValue(m_rectangle, json[QString("rectangle")]);
    m_rectangle_isSet = !json[QString("rectangle")].isNull() && m_rectangle_isValid;
}

QString OAIDetectedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_rectangle.isSet()) {
        obj.insert(QString("rectangle"), ::OpenAPI::toJsonValue(m_rectangle));
    }
    return obj;
}

double OAIDetectedObject::getConfidence() const {
    return m_confidence;
}
void OAIDetectedObject::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIDetectedObject::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIDetectedObject::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIDetectedObject::getObject() const {
    return m_object;
}
void OAIDetectedObject::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIDetectedObject::is_object_Set() const{
    return m_object_isSet;
}

bool OAIDetectedObject::is_object_Valid() const{
    return m_object_isValid;
}

OAIObjectHierarchy OAIDetectedObject::getParent() const {
    return m_parent;
}
void OAIDetectedObject::setParent(const OAIObjectHierarchy &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIDetectedObject::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIDetectedObject::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIBoundingRect OAIDetectedObject::getRectangle() const {
    return m_rectangle;
}
void OAIDetectedObject::setRectangle(const OAIBoundingRect &rectangle) {
    m_rectangle = rectangle;
    m_rectangle_isSet = true;
}

bool OAIDetectedObject::is_rectangle_Set() const{
    return m_rectangle_isSet;
}

bool OAIDetectedObject::is_rectangle_Valid() const{
    return m_rectangle_isValid;
}

bool OAIDetectedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rectangle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
