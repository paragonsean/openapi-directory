/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAreaOfInterestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAreaOfInterestResult::OAIAreaOfInterestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAreaOfInterestResult::OAIAreaOfInterestResult() {
    this->initializeModel();
}

OAIAreaOfInterestResult::~OAIAreaOfInterestResult() {}

void OAIAreaOfInterestResult::initializeModel() {

    m_area_of_interest_isSet = false;
    m_area_of_interest_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIAreaOfInterestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAreaOfInterestResult::fromJsonObject(QJsonObject json) {

    m_area_of_interest_isValid = ::OpenAPI::fromJsonValue(m_area_of_interest, json[QString("areaOfInterest")]);
    m_area_of_interest_isSet = !json[QString("areaOfInterest")].isNull() && m_area_of_interest_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIAreaOfInterestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAreaOfInterestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_area_of_interest.isSet()) {
        obj.insert(QString("areaOfInterest"), ::OpenAPI::toJsonValue(m_area_of_interest));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIBoundingRect OAIAreaOfInterestResult::getAreaOfInterest() const {
    return m_area_of_interest;
}
void OAIAreaOfInterestResult::setAreaOfInterest(const OAIBoundingRect &area_of_interest) {
    m_area_of_interest = area_of_interest;
    m_area_of_interest_isSet = true;
}

bool OAIAreaOfInterestResult::is_area_of_interest_Set() const{
    return m_area_of_interest_isSet;
}

bool OAIAreaOfInterestResult::is_area_of_interest_Valid() const{
    return m_area_of_interest_isValid;
}

OAIImageMetadata OAIAreaOfInterestResult::getMetadata() const {
    return m_metadata;
}
void OAIAreaOfInterestResult::setMetadata(const OAIImageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAreaOfInterestResult::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAreaOfInterestResult::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAreaOfInterestResult::getRequestId() const {
    return m_request_id;
}
void OAIAreaOfInterestResult::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIAreaOfInterestResult::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIAreaOfInterestResult::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIAreaOfInterestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_of_interest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAreaOfInterestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
