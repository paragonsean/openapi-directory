/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectHierarchy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectHierarchy::OAIObjectHierarchy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectHierarchy::OAIObjectHierarchy() {
    this->initializeModel();
}

OAIObjectHierarchy::~OAIObjectHierarchy() {}

void OAIObjectHierarchy::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAIObjectHierarchy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectHierarchy::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAIObjectHierarchy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectHierarchy::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

double OAIObjectHierarchy::getConfidence() const {
    return m_confidence;
}
void OAIObjectHierarchy::setConfidence(const double &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIObjectHierarchy::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIObjectHierarchy::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIObjectHierarchy::getObject() const {
    return m_object;
}
void OAIObjectHierarchy::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIObjectHierarchy::is_object_Set() const{
    return m_object_isSet;
}

bool OAIObjectHierarchy::is_object_Valid() const{
    return m_object_isValid;
}

OAIObjectHierarchy OAIObjectHierarchy::getParent() const {
    return m_parent;
}
void OAIObjectHierarchy::setParent(const OAIObjectHierarchy &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIObjectHierarchy::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIObjectHierarchy::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIObjectHierarchy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectHierarchy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
