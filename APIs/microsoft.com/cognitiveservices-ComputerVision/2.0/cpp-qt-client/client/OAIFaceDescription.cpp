/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFaceDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFaceDescription::OAIFaceDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFaceDescription::OAIFaceDescription() {
    this->initializeModel();
}

OAIFaceDescription::~OAIFaceDescription() {}

void OAIFaceDescription::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_face_rectangle_isSet = false;
    m_face_rectangle_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;
}

void OAIFaceDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFaceDescription::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_face_rectangle_isValid = ::OpenAPI::fromJsonValue(m_face_rectangle, json[QString("faceRectangle")]);
    m_face_rectangle_isSet = !json[QString("faceRectangle")].isNull() && m_face_rectangle_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;
}

QString OAIFaceDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFaceDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_face_rectangle.isSet()) {
        obj.insert(QString("faceRectangle"), ::OpenAPI::toJsonValue(m_face_rectangle));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    return obj;
}

qint32 OAIFaceDescription::getAge() const {
    return m_age;
}
void OAIFaceDescription::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIFaceDescription::is_age_Set() const{
    return m_age_isSet;
}

bool OAIFaceDescription::is_age_Valid() const{
    return m_age_isValid;
}

OAIFaceRectangle OAIFaceDescription::getFaceRectangle() const {
    return m_face_rectangle;
}
void OAIFaceDescription::setFaceRectangle(const OAIFaceRectangle &face_rectangle) {
    m_face_rectangle = face_rectangle;
    m_face_rectangle_isSet = true;
}

bool OAIFaceDescription::is_face_rectangle_Set() const{
    return m_face_rectangle_isSet;
}

bool OAIFaceDescription::is_face_rectangle_Valid() const{
    return m_face_rectangle_isValid;
}

QString OAIFaceDescription::getGender() const {
    return m_gender;
}
void OAIFaceDescription::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIFaceDescription::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIFaceDescription::is_gender_Valid() const{
    return m_gender_isValid;
}

bool OAIFaceDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_rectangle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFaceDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
