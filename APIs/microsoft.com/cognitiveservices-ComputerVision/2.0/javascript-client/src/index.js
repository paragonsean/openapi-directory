/**
 * Computer Vision Client
 * The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AdultInfo from './model/AdultInfo';
import AreaOfInterestResult from './model/AreaOfInterestResult';
import BoundingRect from './model/BoundingRect';
import Category from './model/Category';
import CategoryDetail from './model/CategoryDetail';
import CelebritiesModel from './model/CelebritiesModel';
import CelebrityResults from './model/CelebrityResults';
import ColorInfo from './model/ColorInfo';
import ComputerVisionError from './model/ComputerVisionError';
import DetectResult from './model/DetectResult';
import DetectedBrand from './model/DetectedBrand';
import DetectedObject from './model/DetectedObject';
import DomainModelResults from './model/DomainModelResults';
import FaceDescription from './model/FaceDescription';
import FaceRectangle from './model/FaceRectangle';
import ImageAnalysis from './model/ImageAnalysis';
import ImageCaption from './model/ImageCaption';
import ImageDescription from './model/ImageDescription';
import ImageDescriptionDetails from './model/ImageDescriptionDetails';
import ImageMetadata from './model/ImageMetadata';
import ImageTag from './model/ImageTag';
import ImageType from './model/ImageType';
import ImageUrl from './model/ImageUrl';
import LandmarkResults from './model/LandmarkResults';
import LandmarksModel from './model/LandmarksModel';
import ListModelsResult from './model/ListModelsResult';
import ModelDescription from './model/ModelDescription';
import ObjectHierarchy from './model/ObjectHierarchy';
import OcrLine from './model/OcrLine';
import OcrRegion from './model/OcrRegion';
import OcrResult from './model/OcrResult';
import OcrWord from './model/OcrWord';
import TagResult from './model/TagResult';
import DefaultApi from './api/DefaultApi';


/**
* The Computer Vision API provides state-of-the-art algorithms to process images and return information. For example, it can be used to determine if an image contains mature content, or it can be used to find all the faces in an image.  It also has other features like estimating dominant and accent colors, categorizing the content of images, and describing an image with complete English sentences.  Additionally, it can also intelligently generate images thumbnails for displaying large images effectively..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ComputerVisionClient = require('index'); // See note below*.
* var xxxSvc = new ComputerVisionClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ComputerVisionClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ComputerVisionClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ComputerVisionClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AdultInfo model constructor.
     * @property {module:model/AdultInfo}
     */
    AdultInfo,

    /**
     * The AreaOfInterestResult model constructor.
     * @property {module:model/AreaOfInterestResult}
     */
    AreaOfInterestResult,

    /**
     * The BoundingRect model constructor.
     * @property {module:model/BoundingRect}
     */
    BoundingRect,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The CategoryDetail model constructor.
     * @property {module:model/CategoryDetail}
     */
    CategoryDetail,

    /**
     * The CelebritiesModel model constructor.
     * @property {module:model/CelebritiesModel}
     */
    CelebritiesModel,

    /**
     * The CelebrityResults model constructor.
     * @property {module:model/CelebrityResults}
     */
    CelebrityResults,

    /**
     * The ColorInfo model constructor.
     * @property {module:model/ColorInfo}
     */
    ColorInfo,

    /**
     * The ComputerVisionError model constructor.
     * @property {module:model/ComputerVisionError}
     */
    ComputerVisionError,

    /**
     * The DetectResult model constructor.
     * @property {module:model/DetectResult}
     */
    DetectResult,

    /**
     * The DetectedBrand model constructor.
     * @property {module:model/DetectedBrand}
     */
    DetectedBrand,

    /**
     * The DetectedObject model constructor.
     * @property {module:model/DetectedObject}
     */
    DetectedObject,

    /**
     * The DomainModelResults model constructor.
     * @property {module:model/DomainModelResults}
     */
    DomainModelResults,

    /**
     * The FaceDescription model constructor.
     * @property {module:model/FaceDescription}
     */
    FaceDescription,

    /**
     * The FaceRectangle model constructor.
     * @property {module:model/FaceRectangle}
     */
    FaceRectangle,

    /**
     * The ImageAnalysis model constructor.
     * @property {module:model/ImageAnalysis}
     */
    ImageAnalysis,

    /**
     * The ImageCaption model constructor.
     * @property {module:model/ImageCaption}
     */
    ImageCaption,

    /**
     * The ImageDescription model constructor.
     * @property {module:model/ImageDescription}
     */
    ImageDescription,

    /**
     * The ImageDescriptionDetails model constructor.
     * @property {module:model/ImageDescriptionDetails}
     */
    ImageDescriptionDetails,

    /**
     * The ImageMetadata model constructor.
     * @property {module:model/ImageMetadata}
     */
    ImageMetadata,

    /**
     * The ImageTag model constructor.
     * @property {module:model/ImageTag}
     */
    ImageTag,

    /**
     * The ImageType model constructor.
     * @property {module:model/ImageType}
     */
    ImageType,

    /**
     * The ImageUrl model constructor.
     * @property {module:model/ImageUrl}
     */
    ImageUrl,

    /**
     * The LandmarkResults model constructor.
     * @property {module:model/LandmarkResults}
     */
    LandmarkResults,

    /**
     * The LandmarksModel model constructor.
     * @property {module:model/LandmarksModel}
     */
    LandmarksModel,

    /**
     * The ListModelsResult model constructor.
     * @property {module:model/ListModelsResult}
     */
    ListModelsResult,

    /**
     * The ModelDescription model constructor.
     * @property {module:model/ModelDescription}
     */
    ModelDescription,

    /**
     * The ObjectHierarchy model constructor.
     * @property {module:model/ObjectHierarchy}
     */
    ObjectHierarchy,

    /**
     * The OcrLine model constructor.
     * @property {module:model/OcrLine}
     */
    OcrLine,

    /**
     * The OcrRegion model constructor.
     * @property {module:model/OcrRegion}
     */
    OcrRegion,

    /**
     * The OcrResult model constructor.
     * @property {module:model/OcrResult}
     */
    OcrResult,

    /**
     * The OcrWord model constructor.
     * @property {module:model/OcrWord}
     */
    OcrWord,

    /**
     * The TagResult model constructor.
     * @property {module:model/TagResult}
     */
    TagResult,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
