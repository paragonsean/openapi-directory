/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageInfo::OAIImageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageInfo::OAIImageInfo() {
    this->initializeModel();
}

OAIImageInfo::~OAIImageInfo() {}

void OAIImageInfo::initializeModel() {

    m_crop_area_isSet = false;
    m_crop_area_isValid = false;

    m_image_insights_token_isSet = false;
    m_image_insights_token_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIImageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageInfo::fromJsonObject(QJsonObject json) {

    m_crop_area_isValid = ::OpenAPI::fromJsonValue(m_crop_area, json[QString("cropArea")]);
    m_crop_area_isSet = !json[QString("cropArea")].isNull() && m_crop_area_isValid;

    m_image_insights_token_isValid = ::OpenAPI::fromJsonValue(m_image_insights_token, json[QString("imageInsightsToken")]);
    m_image_insights_token_isSet = !json[QString("imageInsightsToken")].isNull() && m_image_insights_token_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIImageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_crop_area.isSet()) {
        obj.insert(QString("cropArea"), ::OpenAPI::toJsonValue(m_crop_area));
    }
    if (m_image_insights_token_isSet) {
        obj.insert(QString("imageInsightsToken"), ::OpenAPI::toJsonValue(m_image_insights_token));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAICropArea OAIImageInfo::getCropArea() const {
    return m_crop_area;
}
void OAIImageInfo::setCropArea(const OAICropArea &crop_area) {
    m_crop_area = crop_area;
    m_crop_area_isSet = true;
}

bool OAIImageInfo::is_crop_area_Set() const{
    return m_crop_area_isSet;
}

bool OAIImageInfo::is_crop_area_Valid() const{
    return m_crop_area_isValid;
}

QString OAIImageInfo::getImageInsightsToken() const {
    return m_image_insights_token;
}
void OAIImageInfo::setImageInsightsToken(const QString &image_insights_token) {
    m_image_insights_token = image_insights_token;
    m_image_insights_token_isSet = true;
}

bool OAIImageInfo::is_image_insights_token_Set() const{
    return m_image_insights_token_isSet;
}

bool OAIImageInfo::is_image_insights_token_Valid() const{
    return m_image_insights_token_isValid;
}

QString OAIImageInfo::getUrl() const {
    return m_url;
}
void OAIImageInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageInfo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIImageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_insights_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
