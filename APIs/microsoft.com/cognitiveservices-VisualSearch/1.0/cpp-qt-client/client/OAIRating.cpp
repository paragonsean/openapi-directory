/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRating::OAIRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRating::OAIRating() {
    this->initializeModel();
}

OAIRating::~OAIRating() {}

void OAIRating::initializeModel() {

    m_best_rating_isSet = false;
    m_best_rating_isValid = false;

    m_rating_value_isSet = false;
    m_rating_value_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRating::fromJsonObject(QJsonObject json) {

    m_best_rating_isValid = ::OpenAPI::fromJsonValue(m_best_rating, json[QString("bestRating")]);
    m_best_rating_isSet = !json[QString("bestRating")].isNull() && m_best_rating_isValid;

    m_rating_value_isValid = ::OpenAPI::fromJsonValue(m_rating_value, json[QString("ratingValue")]);
    m_rating_value_isSet = !json[QString("ratingValue")].isNull() && m_rating_value_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRating::asJsonObject() const {
    QJsonObject obj;
    if (m_best_rating_isSet) {
        obj.insert(QString("bestRating"), ::OpenAPI::toJsonValue(m_best_rating));
    }
    if (m_rating_value_isSet) {
        obj.insert(QString("ratingValue"), ::OpenAPI::toJsonValue(m_rating_value));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

float OAIRating::getBestRating() const {
    return m_best_rating;
}
void OAIRating::setBestRating(const float &best_rating) {
    m_best_rating = best_rating;
    m_best_rating_isSet = true;
}

bool OAIRating::is_best_rating_Set() const{
    return m_best_rating_isSet;
}

bool OAIRating::is_best_rating_Valid() const{
    return m_best_rating_isValid;
}

float OAIRating::getRatingValue() const {
    return m_rating_value;
}
void OAIRating::setRatingValue(const float &rating_value) {
    m_rating_value = rating_value;
    m_rating_value_isSet = true;
}

bool OAIRating::is_rating_value_Set() const{
    return m_rating_value_isSet;
}

bool OAIRating::is_rating_value_Valid() const{
    return m_rating_value_isValid;
}

QString OAIRating::getType() const {
    return m__type;
}
void OAIRating::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIRating::is__type_Set() const{
    return m__type_isSet;
}

bool OAIRating::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIRating::getText() const {
    return m_text;
}
void OAIRating::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRating::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRating::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_value_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
