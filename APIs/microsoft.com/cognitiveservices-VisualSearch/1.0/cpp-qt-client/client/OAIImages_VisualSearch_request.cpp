/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImages_VisualSearch_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImages_VisualSearch_request::OAIImages_VisualSearch_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImages_VisualSearch_request::OAIImages_VisualSearch_request() {
    this->initializeModel();
}

OAIImages_VisualSearch_request::~OAIImages_VisualSearch_request() {}

void OAIImages_VisualSearch_request::initializeModel() {

    m_knowledge_request_isSet = false;
    m_knowledge_request_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;
}

void OAIImages_VisualSearch_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImages_VisualSearch_request::fromJsonObject(QJsonObject json) {

    m_knowledge_request_isValid = ::OpenAPI::fromJsonValue(m_knowledge_request, json[QString("knowledgeRequest")]);
    m_knowledge_request_isSet = !json[QString("knowledgeRequest")].isNull() && m_knowledge_request_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;
}

QString OAIImages_VisualSearch_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImages_VisualSearch_request::asJsonObject() const {
    QJsonObject obj;
    if (m_knowledge_request_isSet) {
        obj.insert(QString("knowledgeRequest"), ::OpenAPI::toJsonValue(m_knowledge_request));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    return obj;
}

QString OAIImages_VisualSearch_request::getKnowledgeRequest() const {
    return m_knowledge_request;
}
void OAIImages_VisualSearch_request::setKnowledgeRequest(const QString &knowledge_request) {
    m_knowledge_request = knowledge_request;
    m_knowledge_request_isSet = true;
}

bool OAIImages_VisualSearch_request::is_knowledge_request_Set() const{
    return m_knowledge_request_isSet;
}

bool OAIImages_VisualSearch_request::is_knowledge_request_Valid() const{
    return m_knowledge_request_isValid;
}

OAIHttpFileElement OAIImages_VisualSearch_request::getImage() const {
    return m_image;
}
void OAIImages_VisualSearch_request::setImage(const OAIHttpFileElement &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImages_VisualSearch_request::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImages_VisualSearch_request::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIImages_VisualSearch_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_knowledge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImages_VisualSearch_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
