/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINormalizedQuadrilateral.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINormalizedQuadrilateral::OAINormalizedQuadrilateral(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINormalizedQuadrilateral::OAINormalizedQuadrilateral() {
    this->initializeModel();
}

OAINormalizedQuadrilateral::~OAINormalizedQuadrilateral() {}

void OAINormalizedQuadrilateral::initializeModel() {

    m_bottom_left_isSet = false;
    m_bottom_left_isValid = false;

    m_bottom_right_isSet = false;
    m_bottom_right_isValid = false;

    m_top_left_isSet = false;
    m_top_left_isValid = false;

    m_top_right_isSet = false;
    m_top_right_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAINormalizedQuadrilateral::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINormalizedQuadrilateral::fromJsonObject(QJsonObject json) {

    m_bottom_left_isValid = ::OpenAPI::fromJsonValue(m_bottom_left, json[QString("bottomLeft")]);
    m_bottom_left_isSet = !json[QString("bottomLeft")].isNull() && m_bottom_left_isValid;

    m_bottom_right_isValid = ::OpenAPI::fromJsonValue(m_bottom_right, json[QString("bottomRight")]);
    m_bottom_right_isSet = !json[QString("bottomRight")].isNull() && m_bottom_right_isValid;

    m_top_left_isValid = ::OpenAPI::fromJsonValue(m_top_left, json[QString("topLeft")]);
    m_top_left_isSet = !json[QString("topLeft")].isNull() && m_top_left_isValid;

    m_top_right_isValid = ::OpenAPI::fromJsonValue(m_top_right, json[QString("topRight")]);
    m_top_right_isSet = !json[QString("topRight")].isNull() && m_top_right_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAINormalizedQuadrilateral::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINormalizedQuadrilateral::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_left.isSet()) {
        obj.insert(QString("bottomLeft"), ::OpenAPI::toJsonValue(m_bottom_left));
    }
    if (m_bottom_right.isSet()) {
        obj.insert(QString("bottomRight"), ::OpenAPI::toJsonValue(m_bottom_right));
    }
    if (m_top_left.isSet()) {
        obj.insert(QString("topLeft"), ::OpenAPI::toJsonValue(m_top_left));
    }
    if (m_top_right.isSet()) {
        obj.insert(QString("topRight"), ::OpenAPI::toJsonValue(m_top_right));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIPoint2D OAINormalizedQuadrilateral::getBottomLeft() const {
    return m_bottom_left;
}
void OAINormalizedQuadrilateral::setBottomLeft(const OAIPoint2D &bottom_left) {
    m_bottom_left = bottom_left;
    m_bottom_left_isSet = true;
}

bool OAINormalizedQuadrilateral::is_bottom_left_Set() const{
    return m_bottom_left_isSet;
}

bool OAINormalizedQuadrilateral::is_bottom_left_Valid() const{
    return m_bottom_left_isValid;
}

OAIPoint2D OAINormalizedQuadrilateral::getBottomRight() const {
    return m_bottom_right;
}
void OAINormalizedQuadrilateral::setBottomRight(const OAIPoint2D &bottom_right) {
    m_bottom_right = bottom_right;
    m_bottom_right_isSet = true;
}

bool OAINormalizedQuadrilateral::is_bottom_right_Set() const{
    return m_bottom_right_isSet;
}

bool OAINormalizedQuadrilateral::is_bottom_right_Valid() const{
    return m_bottom_right_isValid;
}

OAIPoint2D OAINormalizedQuadrilateral::getTopLeft() const {
    return m_top_left;
}
void OAINormalizedQuadrilateral::setTopLeft(const OAIPoint2D &top_left) {
    m_top_left = top_left;
    m_top_left_isSet = true;
}

bool OAINormalizedQuadrilateral::is_top_left_Set() const{
    return m_top_left_isSet;
}

bool OAINormalizedQuadrilateral::is_top_left_Valid() const{
    return m_top_left_isValid;
}

OAIPoint2D OAINormalizedQuadrilateral::getTopRight() const {
    return m_top_right;
}
void OAINormalizedQuadrilateral::setTopRight(const OAIPoint2D &top_right) {
    m_top_right = top_right;
    m_top_right_isSet = true;
}

bool OAINormalizedQuadrilateral::is_top_right_Set() const{
    return m_top_right_isSet;
}

bool OAINormalizedQuadrilateral::is_top_right_Valid() const{
    return m_top_right_isValid;
}

QString OAINormalizedQuadrilateral::getAlternateName() const {
    return m_alternate_name;
}
void OAINormalizedQuadrilateral::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAINormalizedQuadrilateral::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAINormalizedQuadrilateral::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAINormalizedQuadrilateral::getBingId() const {
    return m_bing_id;
}
void OAINormalizedQuadrilateral::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAINormalizedQuadrilateral::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAINormalizedQuadrilateral::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAINormalizedQuadrilateral::getDescription() const {
    return m_description;
}
void OAINormalizedQuadrilateral::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINormalizedQuadrilateral::is_description_Set() const{
    return m_description_isSet;
}

bool OAINormalizedQuadrilateral::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAINormalizedQuadrilateral::getImage() const {
    return m_image;
}
void OAINormalizedQuadrilateral::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAINormalizedQuadrilateral::is_image_Set() const{
    return m_image_isSet;
}

bool OAINormalizedQuadrilateral::is_image_Valid() const{
    return m_image_isValid;
}

QString OAINormalizedQuadrilateral::getName() const {
    return m_name;
}
void OAINormalizedQuadrilateral::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINormalizedQuadrilateral::is_name_Set() const{
    return m_name_isSet;
}

bool OAINormalizedQuadrilateral::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINormalizedQuadrilateral::getUrl() const {
    return m_url;
}
void OAINormalizedQuadrilateral::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINormalizedQuadrilateral::is_url_Set() const{
    return m_url_isSet;
}

bool OAINormalizedQuadrilateral::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINormalizedQuadrilateral::getReadLink() const {
    return m_read_link;
}
void OAINormalizedQuadrilateral::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAINormalizedQuadrilateral::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAINormalizedQuadrilateral::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAINormalizedQuadrilateral::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAINormalizedQuadrilateral::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAINormalizedQuadrilateral::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAINormalizedQuadrilateral::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAINormalizedQuadrilateral::getId() const {
    return m_id;
}
void OAINormalizedQuadrilateral::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINormalizedQuadrilateral::is_id_Set() const{
    return m_id_isSet;
}

bool OAINormalizedQuadrilateral::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINormalizedQuadrilateral::getType() const {
    return m__type;
}
void OAINormalizedQuadrilateral::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAINormalizedQuadrilateral::is__type_Set() const{
    return m__type_isSet;
}

bool OAINormalizedQuadrilateral::is__type_Valid() const{
    return m__type_isValid;
}

bool OAINormalizedQuadrilateral::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bottom_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINormalizedQuadrilateral::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bottom_left_isValid && m_bottom_right_isValid && m_top_left_isValid && m_top_right_isValid && true;
}

} // namespace OpenAPI
