/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINormalizedQuadrilateral.h
 *
 * Defines a region of an image. The region is a convex quadrilateral defined by coordinates of its top left, top right, bottom left, and bottom right points. The coordinates are fractional values of the original image&#39;s width and height in the range 0.0 through 1.0.
 */

#ifndef OAINormalizedQuadrilateral_H
#define OAINormalizedQuadrilateral_H

#include <QJsonObject>

#include "OAIImageObject.h"
#include "OAIPoint2D.h"
#include "OAIStructuredValue.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPoint2D;
class OAIImageObject;

class OAINormalizedQuadrilateral : public OAIObject {
public:
    OAINormalizedQuadrilateral();
    OAINormalizedQuadrilateral(QString json);
    ~OAINormalizedQuadrilateral() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPoint2D getBottomLeft() const;
    void setBottomLeft(const OAIPoint2D &bottom_left);
    bool is_bottom_left_Set() const;
    bool is_bottom_left_Valid() const;

    OAIPoint2D getBottomRight() const;
    void setBottomRight(const OAIPoint2D &bottom_right);
    bool is_bottom_right_Set() const;
    bool is_bottom_right_Valid() const;

    OAIPoint2D getTopLeft() const;
    void setTopLeft(const OAIPoint2D &top_left);
    bool is_top_left_Set() const;
    bool is_top_left_Valid() const;

    OAIPoint2D getTopRight() const;
    void setTopRight(const OAIPoint2D &top_right);
    bool is_top_right_Set() const;
    bool is_top_right_Valid() const;

    QString getAlternateName() const;
    void setAlternateName(const QString &alternate_name);
    bool is_alternate_name_Set() const;
    bool is_alternate_name_Valid() const;

    QString getBingId() const;
    void setBingId(const QString &bing_id);
    bool is_bing_id_Set() const;
    bool is_bing_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIImageObject getImage() const;
    void setImage(const OAIImageObject &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getReadLink() const;
    void setReadLink(const QString &read_link);
    bool is_read_link_Set() const;
    bool is_read_link_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPoint2D m_bottom_left;
    bool m_bottom_left_isSet;
    bool m_bottom_left_isValid;

    OAIPoint2D m_bottom_right;
    bool m_bottom_right_isSet;
    bool m_bottom_right_isValid;

    OAIPoint2D m_top_left;
    bool m_top_left_isSet;
    bool m_top_left_isValid;

    OAIPoint2D m_top_right;
    bool m_top_right_isSet;
    bool m_top_right_isValid;

    QString m_alternate_name;
    bool m_alternate_name_isSet;
    bool m_alternate_name_isValid;

    QString m_bing_id;
    bool m_bing_id_isSet;
    bool m_bing_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIImageObject m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_read_link;
    bool m_read_link_isSet;
    bool m_read_link_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINormalizedQuadrilateral)

#endif // OAINormalizedQuadrilateral_H
