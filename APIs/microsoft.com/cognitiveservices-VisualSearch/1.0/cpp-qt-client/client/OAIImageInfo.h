/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageInfo.h
 *
 * A JSON object that identities the image to get insights of . It also includes the optional crop area that you use to identify the region of interest in the image.
 */

#ifndef OAIImageInfo_H
#define OAIImageInfo_H

#include <QJsonObject>

#include "OAICropArea.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICropArea;

class OAIImageInfo : public OAIObject {
public:
    OAIImageInfo();
    OAIImageInfo(QString json);
    ~OAIImageInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICropArea getCropArea() const;
    void setCropArea(const OAICropArea &crop_area);
    bool is_crop_area_Set() const;
    bool is_crop_area_Valid() const;

    QString getImageInsightsToken() const;
    void setImageInsightsToken(const QString &image_insights_token);
    bool is_image_insights_token_Set() const;
    bool is_image_insights_token_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICropArea m_crop_area;
    bool m_crop_area_isSet;
    bool m_crop_area_isValid;

    QString m_image_insights_token;
    bool m_image_insights_token_isSet;
    bool m_image_insights_token_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageInfo)

#endif // OAIImageInfo_H
