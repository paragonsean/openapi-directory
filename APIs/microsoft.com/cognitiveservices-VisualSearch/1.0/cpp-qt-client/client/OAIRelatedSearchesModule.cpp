/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedSearchesModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedSearchesModule::OAIRelatedSearchesModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedSearchesModule::OAIRelatedSearchesModule() {
    this->initializeModel();
}

OAIRelatedSearchesModule::~OAIRelatedSearchesModule() {}

void OAIRelatedSearchesModule::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRelatedSearchesModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedSearchesModule::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRelatedSearchesModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedSearchesModule::asJsonObject() const {
    QJsonObject obj;
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIQuery> OAIRelatedSearchesModule::getValue() const {
    return m_value;
}
void OAIRelatedSearchesModule::setValue(const QList<OAIQuery> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRelatedSearchesModule::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRelatedSearchesModule::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRelatedSearchesModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedSearchesModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
