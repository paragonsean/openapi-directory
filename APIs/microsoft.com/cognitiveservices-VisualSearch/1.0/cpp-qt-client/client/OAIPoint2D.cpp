/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint2D.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint2D::OAIPoint2D(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint2D::OAIPoint2D() {
    this->initializeModel();
}

OAIPoint2D::~OAIPoint2D() {}

void OAIPoint2D::initializeModel() {

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIPoint2D::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint2D::fromJsonObject(QJsonObject json) {

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIPoint2D::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint2D::asJsonObject() const {
    QJsonObject obj;
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

float OAIPoint2D::getX() const {
    return m_x;
}
void OAIPoint2D::setX(const float &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIPoint2D::is_x_Set() const{
    return m_x_isSet;
}

bool OAIPoint2D::is_x_Valid() const{
    return m_x_isValid;
}

float OAIPoint2D::getY() const {
    return m_y;
}
void OAIPoint2D::setY(const float &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIPoint2D::is_y_Set() const{
    return m_y_isSet;
}

bool OAIPoint2D::is_y_Valid() const{
    return m_y_isValid;
}

QString OAIPoint2D::getAlternateName() const {
    return m_alternate_name;
}
void OAIPoint2D::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIPoint2D::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIPoint2D::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIPoint2D::getBingId() const {
    return m_bing_id;
}
void OAIPoint2D::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIPoint2D::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIPoint2D::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIPoint2D::getDescription() const {
    return m_description;
}
void OAIPoint2D::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPoint2D::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPoint2D::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIPoint2D::getImage() const {
    return m_image;
}
void OAIPoint2D::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPoint2D::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPoint2D::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPoint2D::getName() const {
    return m_name;
}
void OAIPoint2D::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPoint2D::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPoint2D::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPoint2D::getUrl() const {
    return m_url;
}
void OAIPoint2D::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPoint2D::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPoint2D::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPoint2D::getReadLink() const {
    return m_read_link;
}
void OAIPoint2D::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIPoint2D::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIPoint2D::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIPoint2D::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIPoint2D::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIPoint2D::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIPoint2D::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIPoint2D::getId() const {
    return m_id;
}
void OAIPoint2D::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPoint2D::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPoint2D::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPoint2D::getType() const {
    return m__type;
}
void OAIPoint2D::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIPoint2D::is__type_Set() const{
    return m__type_isSet;
}

bool OAIPoint2D::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIPoint2D::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint2D::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
