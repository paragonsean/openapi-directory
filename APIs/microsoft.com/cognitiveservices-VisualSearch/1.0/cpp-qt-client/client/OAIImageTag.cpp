/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTag::OAIImageTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTag::OAIImageTag() {
    this->initializeModel();
}

OAIImageTag::~OAIImageTag() {}

void OAIImageTag::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImageTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTag::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImageTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTag::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_bounding_box.isSet()) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAIImageAction> OAIImageTag::getActions() const {
    return m_actions;
}
void OAIImageTag::setActions(const QList<OAIImageAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIImageTag::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIImageTag::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIImageTagRegion OAIImageTag::getBoundingBox() const {
    return m_bounding_box;
}
void OAIImageTag::setBoundingBox(const OAIImageTagRegion &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIImageTag::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIImageTag::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QString OAIImageTag::getDisplayName() const {
    return m_display_name;
}
void OAIImageTag::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImageTag::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImageTag::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIImageTag::getAlternateName() const {
    return m_alternate_name;
}
void OAIImageTag::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIImageTag::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIImageTag::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIImageTag::getBingId() const {
    return m_bing_id;
}
void OAIImageTag::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIImageTag::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIImageTag::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIImageTag::getDescription() const {
    return m_description;
}
void OAIImageTag::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageTag::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageTag::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIImageTag::getImage() const {
    return m_image;
}
void OAIImageTag::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageTag::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageTag::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImageTag::getName() const {
    return m_name;
}
void OAIImageTag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageTag::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageTag::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageTag::getUrl() const {
    return m_url;
}
void OAIImageTag::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageTag::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageTag::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIImageTag::getReadLink() const {
    return m_read_link;
}
void OAIImageTag::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImageTag::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImageTag::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImageTag::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageTag::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageTag::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageTag::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageTag::getId() const {
    return m_id;
}
void OAIImageTag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageTag::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageTag::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageTag::getType() const {
    return m__type;
}
void OAIImageTag::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageTag::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageTag::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImageTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
