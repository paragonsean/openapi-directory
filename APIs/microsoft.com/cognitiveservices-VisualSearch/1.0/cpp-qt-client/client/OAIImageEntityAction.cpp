/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageEntityAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageEntityAction::OAIImageEntityAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageEntityAction::OAIImageEntityAction() {
    this->initializeModel();
}

OAIImageEntityAction::~OAIImageEntityAction() {}

void OAIImageEntityAction::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_top_action_isSet = false;
    m_is_top_action_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIImageEntityAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageEntityAction::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_top_action_isValid = ::OpenAPI::fromJsonValue(m_is_top_action, json[QString("isTopAction")]);
    m_is_top_action_isSet = !json[QString("isTopAction")].isNull() && m_is_top_action_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIImageEntityAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageEntityAction::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_top_action_isSet) {
        obj.insert(QString("isTopAction"), ::OpenAPI::toJsonValue(m_is_top_action));
    }
    if (m_result.size() > 0) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIImageEntityAction::getType() const {
    return m__type;
}
void OAIImageEntityAction::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageEntityAction::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageEntityAction::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIImageEntityAction::getActionType() const {
    return m_action_type;
}
void OAIImageEntityAction::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIImageEntityAction::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIImageEntityAction::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIImageEntityAction::getDisplayName() const {
    return m_display_name;
}
void OAIImageEntityAction::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImageEntityAction::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImageEntityAction::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIImageEntityAction::isIsTopAction() const {
    return m_is_top_action;
}
void OAIImageEntityAction::setIsTopAction(const bool &is_top_action) {
    m_is_top_action = is_top_action;
    m_is_top_action_isSet = true;
}

bool OAIImageEntityAction::is_is_top_action_Set() const{
    return m_is_top_action_isSet;
}

bool OAIImageEntityAction::is_is_top_action_Valid() const{
    return m_is_top_action_isValid;
}

QList<OAIThing> OAIImageEntityAction::getResult() const {
    return m_result;
}
void OAIImageEntityAction::setResult(const QList<OAIThing> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIImageEntityAction::is_result_Set() const{
    return m_result_isSet;
}

bool OAIImageEntityAction::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIImageEntityAction::getServiceUrl() const {
    return m_service_url;
}
void OAIImageEntityAction::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIImageEntityAction::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIImageEntityAction::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QString OAIImageEntityAction::getDatePublished() const {
    return m_date_published;
}
void OAIImageEntityAction::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAIImageEntityAction::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAIImageEntityAction::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QList<OAIThing> OAIImageEntityAction::getProvider() const {
    return m_provider;
}
void OAIImageEntityAction::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIImageEntityAction::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIImageEntityAction::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIImageEntityAction::getText() const {
    return m_text;
}
void OAIImageEntityAction::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIImageEntityAction::is_text_Set() const{
    return m_text_isSet;
}

bool OAIImageEntityAction::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIImageEntityAction::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIImageEntityAction::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIImageEntityAction::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIImageEntityAction::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIImageEntityAction::getAlternateName() const {
    return m_alternate_name;
}
void OAIImageEntityAction::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIImageEntityAction::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIImageEntityAction::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIImageEntityAction::getBingId() const {
    return m_bing_id;
}
void OAIImageEntityAction::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIImageEntityAction::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIImageEntityAction::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIImageEntityAction::getDescription() const {
    return m_description;
}
void OAIImageEntityAction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageEntityAction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageEntityAction::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIImageEntityAction::getImage() const {
    return m_image;
}
void OAIImageEntityAction::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageEntityAction::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageEntityAction::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImageEntityAction::getName() const {
    return m_name;
}
void OAIImageEntityAction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageEntityAction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageEntityAction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageEntityAction::getUrl() const {
    return m_url;
}
void OAIImageEntityAction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageEntityAction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageEntityAction::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIImageEntityAction::getReadLink() const {
    return m_read_link;
}
void OAIImageEntityAction::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImageEntityAction::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImageEntityAction::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImageEntityAction::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageEntityAction::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageEntityAction::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageEntityAction::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageEntityAction::getId() const {
    return m_id;
}
void OAIImageEntityAction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageEntityAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageEntityAction::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIImageEntityAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_top_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageEntityAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
