/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageKnowledge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageKnowledge::OAIImageKnowledge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageKnowledge::OAIImageKnowledge() {
    this->initializeModel();
}

OAIImageKnowledge::~OAIImageKnowledge() {}

void OAIImageKnowledge::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImageKnowledge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageKnowledge::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImageKnowledge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageKnowledge::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIImageObject OAIImageKnowledge::getImage() const {
    return m_image;
}
void OAIImageKnowledge::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageKnowledge::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageKnowledge::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIImageTag> OAIImageKnowledge::getTags() const {
    return m_tags;
}
void OAIImageKnowledge::setTags(const QList<OAIImageTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImageKnowledge::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImageKnowledge::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIImageKnowledge::getReadLink() const {
    return m_read_link;
}
void OAIImageKnowledge::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIImageKnowledge::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIImageKnowledge::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIImageKnowledge::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageKnowledge::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageKnowledge::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageKnowledge::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageKnowledge::getId() const {
    return m_id;
}
void OAIImageKnowledge::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageKnowledge::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageKnowledge::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageKnowledge::getType() const {
    return m__type;
}
void OAIImageKnowledge::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageKnowledge::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageKnowledge::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImageKnowledge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageKnowledge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
