/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICropArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICropArea::OAICropArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICropArea::OAICropArea() {
    this->initializeModel();
}

OAICropArea::~OAICropArea() {}

void OAICropArea::initializeModel() {

    m_bottom_isSet = false;
    m_bottom_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAICropArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICropArea::fromJsonObject(QJsonObject json) {

    m_bottom_isValid = ::OpenAPI::fromJsonValue(m_bottom, json[QString("bottom")]);
    m_bottom_isSet = !json[QString("bottom")].isNull() && m_bottom_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::OpenAPI::fromJsonValue(m_right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAICropArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICropArea::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_isSet) {
        obj.insert(QString("bottom"), ::OpenAPI::toJsonValue(m_bottom));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_right_isSet) {
        obj.insert(QString("right"), ::OpenAPI::toJsonValue(m_right));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

float OAICropArea::getBottom() const {
    return m_bottom;
}
void OAICropArea::setBottom(const float &bottom) {
    m_bottom = bottom;
    m_bottom_isSet = true;
}

bool OAICropArea::is_bottom_Set() const{
    return m_bottom_isSet;
}

bool OAICropArea::is_bottom_Valid() const{
    return m_bottom_isValid;
}

float OAICropArea::getLeft() const {
    return m_left;
}
void OAICropArea::setLeft(const float &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAICropArea::is_left_Set() const{
    return m_left_isSet;
}

bool OAICropArea::is_left_Valid() const{
    return m_left_isValid;
}

float OAICropArea::getRight() const {
    return m_right;
}
void OAICropArea::setRight(const float &right) {
    m_right = right;
    m_right_isSet = true;
}

bool OAICropArea::is_right_Set() const{
    return m_right_isSet;
}

bool OAICropArea::is_right_Valid() const{
    return m_right_isValid;
}

float OAICropArea::getTop() const {
    return m_top;
}
void OAICropArea::setTop(const float &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAICropArea::is_top_Set() const{
    return m_top_isSet;
}

bool OAICropArea::is_top_Valid() const{
    return m_top_isValid;
}

bool OAICropArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICropArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bottom_isValid && m_left_isValid && m_right_isValid && m_top_isValid && true;
}

} // namespace OpenAPI
