/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VisualSearchClient);
  }
}(this, function(expect, VisualSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VisualSearchClient.NormalizedQuadrilateral();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NormalizedQuadrilateral', function() {
    it('should create an instance of NormalizedQuadrilateral', function() {
      // uncomment below and update the code to test NormalizedQuadrilateral
      //var instance = new VisualSearchClient.NormalizedQuadrilateral();
      //expect(instance).to.be.a(VisualSearchClient.NormalizedQuadrilateral);
    });

    it('should have the property bottomLeft (base name: "bottomLeft")', function() {
      // uncomment below and update the code to test the property bottomLeft
      //var instance = new VisualSearchClient.NormalizedQuadrilateral();
      //expect(instance).to.be();
    });

    it('should have the property bottomRight (base name: "bottomRight")', function() {
      // uncomment below and update the code to test the property bottomRight
      //var instance = new VisualSearchClient.NormalizedQuadrilateral();
      //expect(instance).to.be();
    });

    it('should have the property topLeft (base name: "topLeft")', function() {
      // uncomment below and update the code to test the property topLeft
      //var instance = new VisualSearchClient.NormalizedQuadrilateral();
      //expect(instance).to.be();
    });

    it('should have the property topRight (base name: "topRight")', function() {
      // uncomment below and update the code to test the property topRight
      //var instance = new VisualSearchClient.NormalizedQuadrilateral();
      //expect(instance).to.be();
    });

  });

}));
