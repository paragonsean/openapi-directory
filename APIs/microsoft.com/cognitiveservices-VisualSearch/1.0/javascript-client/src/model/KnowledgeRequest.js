/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filters from './Filters';

/**
 * The KnowledgeRequest model module.
 * @module model/KnowledgeRequest
 * @version 1.0
 */
class KnowledgeRequest {
    /**
     * Constructs a new <code>KnowledgeRequest</code>.
     * A JSON object containing information about the request, such as filters for the resulting actions.
     * @alias module:model/KnowledgeRequest
     */
    constructor() { 
        
        KnowledgeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KnowledgeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KnowledgeRequest} obj Optional instance to populate.
     * @return {module:model/KnowledgeRequest} The populated <code>KnowledgeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KnowledgeRequest();

            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KnowledgeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KnowledgeRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }

        return true;
    }


}



/**
 * @member {module:model/Filters} filters
 */
KnowledgeRequest.prototype['filters'] = undefined;






export default KnowledgeRequest;

