/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CropArea from './CropArea';

/**
 * The ImageInfo model module.
 * @module model/ImageInfo
 * @version 1.0
 */
class ImageInfo {
    /**
     * Constructs a new <code>ImageInfo</code>.
     * A JSON object that identities the image to get insights of . It also includes the optional crop area that you use to identify the region of interest in the image.
     * @alias module:model/ImageInfo
     */
    constructor() { 
        
        ImageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageInfo} obj Optional instance to populate.
     * @return {module:model/ImageInfo} The populated <code>ImageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageInfo();

            if (data.hasOwnProperty('cropArea')) {
                obj['cropArea'] = CropArea.constructFromObject(data['cropArea']);
            }
            if (data.hasOwnProperty('imageInsightsToken')) {
                obj['imageInsightsToken'] = ApiClient.convertToType(data['imageInsightsToken'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cropArea`
        if (data['cropArea']) { // data not null
          CropArea.validateJSON(data['cropArea']);
        }
        // ensure the json data is a string
        if (data['imageInsightsToken'] && !(typeof data['imageInsightsToken'] === 'string' || data['imageInsightsToken'] instanceof String)) {
            throw new Error("Expected the field `imageInsightsToken` to be a primitive type in the JSON string but got " + data['imageInsightsToken']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/CropArea} cropArea
 */
ImageInfo.prototype['cropArea'] = undefined;

/**
 * An image insights token. To get the insights token, call one of the Image Search APIs (for example, /images/search). In the search results, the [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image) object's [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken) field contains the token. The imageInsightsToken and url fields mutually exclusive; do not specify both. Do not specify an insights token if the request includes the image form data.
 * @member {String} imageInsightsToken
 */
ImageInfo.prototype['imageInsightsToken'] = undefined;

/**
 * The URL of the input image. The imageInsightsToken and url fields are mutually exclusive; do not specify both. Do not specify the URL if the request includes the image form data.
 * @member {String} url
 */
ImageInfo.prototype['url'] = undefined;






export default ImageInfo;

