/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImagesVisualSearchRequest model module.
 * @module model/ImagesVisualSearchRequest
 * @version 1.0
 */
class ImagesVisualSearchRequest {
    /**
     * Constructs a new <code>ImagesVisualSearchRequest</code>.
     * @alias module:model/ImagesVisualSearchRequest
     */
    constructor() { 
        
        ImagesVisualSearchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImagesVisualSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImagesVisualSearchRequest} obj Optional instance to populate.
     * @return {module:model/ImagesVisualSearchRequest} The populated <code>ImagesVisualSearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImagesVisualSearchRequest();

            if (data.hasOwnProperty('knowledgeRequest')) {
                obj['knowledgeRequest'] = ApiClient.convertToType(data['knowledgeRequest'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], File);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImagesVisualSearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImagesVisualSearchRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['knowledgeRequest'] && !(typeof data['knowledgeRequest'] === 'string' || data['knowledgeRequest'] instanceof String)) {
            throw new Error("Expected the field `knowledgeRequest` to be a primitive type in the JSON string but got " + data['knowledgeRequest']);
        }

        return true;
    }


}



/**
 * The form data is a JSON object that identifies the image using an insights token or URL to the image. The object may also include an optional crop area that identifies an area of interest in the image. The insights token and URL are mutually exclusive â€“ do not specify both. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only (it must not include an insights token or URL).
 * @member {String} knowledgeRequest
 */
ImagesVisualSearchRequest.prototype['knowledgeRequest'] = undefined;

/**
 * The form data is an image binary. The Content-Disposition header's name parameter must be set to \"image\". You must specify an image binary if you do not use knowledgeRequest form data to specify the image; you may not use both forms to specify an image. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only  (it must not include an insights token or URL).
 * @member {File} image
 */
ImagesVisualSearchRequest.prototype['image'] = undefined;






export default ImagesVisualSearchRequest;

