/**
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregateOffer from './AggregateOffer';
import ImageAction from './ImageAction';
import ImageObject from './ImageObject';
import Thing from './Thing';

/**
 * The ImageShoppingSourcesAction model module.
 * @module model/ImageShoppingSourcesAction
 * @version 1.0
 */
class ImageShoppingSourcesAction {
    /**
     * Constructs a new <code>ImageShoppingSourcesAction</code>.
     * Defines a shopping sources action.
     * @alias module:model/ImageShoppingSourcesAction
     * @extends module:model/ImageAction
     * @implements module:model/ImageAction
     */
    constructor() { 
        ImageAction.initialize(this);
        ImageShoppingSourcesAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageShoppingSourcesAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageShoppingSourcesAction} obj Optional instance to populate.
     * @return {module:model/ImageShoppingSourcesAction} The populated <code>ImageShoppingSourcesAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageShoppingSourcesAction();
            ImageAction.constructFromObject(data, obj);
            ImageAction.constructFromObject(data, obj);

            if (data.hasOwnProperty('data')) {
                obj['data'] = AggregateOffer.constructFromObject(data['data']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageShoppingSourcesAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageShoppingSourcesAction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `data`
        if (data['data']) { // data not null
          AggregateOffer.validateJSON(data['data']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregateOffer} data
 */
ImageShoppingSourcesAction.prototype['data'] = undefined;


// Implement ImageAction interface:
/**
 * A display name for the action.
 * @member {String} displayName
 */
ImageAction.prototype['displayName'] = undefined;
/**
 * A Boolean representing whether this result is the top action.
 * @member {Boolean} isTopAction
 */
ImageAction.prototype['isTopAction'] = undefined;
/**
 * The result produced in the action.
 * @member {Array.<module:model/Thing>} result
 */
ImageAction.prototype['result'] = undefined;
/**
 * Use this URL to get additional data to determine how to take the appropriate action. For example, the serviceUrl might return JSON along with an image URL.
 * @member {String} serviceUrl
 */
ImageAction.prototype['serviceUrl'] = undefined;
/**
 * The date on which the CreativeWork was published.
 * @member {String} datePublished
 */
ImageAction.prototype['datePublished'] = undefined;
/**
 * The source of the creative work.
 * @member {Array.<module:model/Thing>} provider
 */
ImageAction.prototype['provider'] = undefined;
/**
 * Text content of this creative work.
 * @member {String} text
 */
ImageAction.prototype['text'] = undefined;
/**
 * The URL to a thumbnail of the item.
 * @member {String} thumbnailUrl
 */
ImageAction.prototype['thumbnailUrl'] = undefined;
/**
 * An alias for the item.
 * @member {String} alternateName
 */
ImageAction.prototype['alternateName'] = undefined;
/**
 * An ID that uniquely identifies this item.
 * @member {String} bingId
 */
ImageAction.prototype['bingId'] = undefined;
/**
 * A short description of the item.
 * @member {String} description
 */
ImageAction.prototype['description'] = undefined;
/**
 * @member {module:model/ImageObject} image
 */
ImageAction.prototype['image'] = undefined;
/**
 * The name of the thing represented by this object.
 * @member {String} name
 */
ImageAction.prototype['name'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
ImageAction.prototype['url'] = undefined;
/**
 * The URL that returns this resource. To use the URL, append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header.
 * @member {String} readLink
 */
ImageAction.prototype['readLink'] = undefined;
/**
 * The URL to Bing's search result for this item.
 * @member {String} webSearchUrl
 */
ImageAction.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
ImageAction.prototype['id'] = undefined;
/**
 * Specifies the sub-class of the action.
 * @member {module:model/ImageAction.TypeEnum} _type
 */
ImageAction.prototype['_type'] = undefined;




export default ImageShoppingSourcesAction;

