# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.properties_item import PropertiesItem
from openapi_server import util


class Rating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_rating: float=None, rating_value: float=None, type: str=None, text: str=None):
        """Rating - a model defined in OpenAPI

        :param best_rating: The best_rating of this Rating.
        :param rating_value: The rating_value of this Rating.
        :param type: The type of this Rating.
        :param text: The text of this Rating.
        """
        self.openapi_types = {
            'best_rating': float,
            'rating_value': float,
            'type': str,
            'text': str
        }

        self.attribute_map = {
            'best_rating': 'bestRating',
            'rating_value': 'ratingValue',
            'type': '_type',
            'text': 'text'
        }

        self._best_rating = best_rating
        self._rating_value = rating_value
        self._type = type
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rating of this Rating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_rating(self):
        """Gets the best_rating of this Rating.

        The highest rated review. The possible values are 1.0 through 5.0.

        :return: The best_rating of this Rating.
        :rtype: float
        """
        return self._best_rating

    @best_rating.setter
    def best_rating(self, best_rating):
        """Sets the best_rating of this Rating.

        The highest rated review. The possible values are 1.0 through 5.0.

        :param best_rating: The best_rating of this Rating.
        :type best_rating: float
        """

        self._best_rating = best_rating

    @property
    def rating_value(self):
        """Gets the rating_value of this Rating.

        The mean (average) rating. The possible values are 1.0 through 5.0.

        :return: The rating_value of this Rating.
        :rtype: float
        """
        return self._rating_value

    @rating_value.setter
    def rating_value(self, rating_value):
        """Sets the rating_value of this Rating.

        The mean (average) rating. The possible values are 1.0 through 5.0.

        :param rating_value: The rating_value of this Rating.
        :type rating_value: float
        """
        if rating_value is None:
            raise ValueError("Invalid value for `rating_value`, must not be `None`")

        self._rating_value = rating_value

    @property
    def type(self):
        """Gets the type of this Rating.


        :return: The type of this Rating.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Rating.


        :param type: The type of this Rating.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def text(self):
        """Gets the text of this Rating.

        Text representation of an item.

        :return: The text of this Rating.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Rating.

        Text representation of an item.

        :param text: The text of this Rating.
        :type text: str
        """

        self._text = text
