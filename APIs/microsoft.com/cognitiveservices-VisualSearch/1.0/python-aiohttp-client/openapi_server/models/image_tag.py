# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_action import ImageAction
from openapi_server.models.image_object import ImageObject
from openapi_server.models.image_tag_region import ImageTagRegion
from openapi_server.models.thing import Thing
from openapi_server import util


class ImageTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[ImageAction]=None, bounding_box: ImageTagRegion=None, display_name: str=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """ImageTag - a model defined in OpenAPI

        :param actions: The actions of this ImageTag.
        :param bounding_box: The bounding_box of this ImageTag.
        :param display_name: The display_name of this ImageTag.
        :param alternate_name: The alternate_name of this ImageTag.
        :param bing_id: The bing_id of this ImageTag.
        :param description: The description of this ImageTag.
        :param image: The image of this ImageTag.
        :param name: The name of this ImageTag.
        :param url: The url of this ImageTag.
        :param read_link: The read_link of this ImageTag.
        :param web_search_url: The web_search_url of this ImageTag.
        :param id: The id of this ImageTag.
        :param type: The type of this ImageTag.
        """
        self.openapi_types = {
            'actions': List[ImageAction],
            'bounding_box': ImageTagRegion,
            'display_name': str,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'bounding_box': 'boundingBox',
            'display_name': 'displayName',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._actions = actions
        self._bounding_box = bounding_box
        self._display_name = display_name
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTag of this ImageTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ImageTag.

        Actions within this tag. The order of the items denotes the default ranking order of these actions, with the first action being the most likely user intent.

        :return: The actions of this ImageTag.
        :rtype: List[ImageAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ImageTag.

        Actions within this tag. The order of the items denotes the default ranking order of these actions, with the first action being the most likely user intent.

        :param actions: The actions of this ImageTag.
        :type actions: List[ImageAction]
        """

        self._actions = actions

    @property
    def bounding_box(self):
        """Gets the bounding_box of this ImageTag.


        :return: The bounding_box of this ImageTag.
        :rtype: ImageTagRegion
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this ImageTag.


        :param bounding_box: The bounding_box of this ImageTag.
        :type bounding_box: ImageTagRegion
        """

        self._bounding_box = bounding_box

    @property
    def display_name(self):
        """Gets the display_name of this ImageTag.

        Display name for this tag. For the default tag, the display name is empty.

        :return: The display_name of this ImageTag.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ImageTag.

        Display name for this tag. For the default tag, the display name is empty.

        :param display_name: The display_name of this ImageTag.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ImageTag.

        An alias for the item.

        :return: The alternate_name of this ImageTag.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ImageTag.

        An alias for the item.

        :param alternate_name: The alternate_name of this ImageTag.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this ImageTag.

        An ID that uniquely identifies this item.

        :return: The bing_id of this ImageTag.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this ImageTag.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this ImageTag.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this ImageTag.

        A short description of the item.

        :return: The description of this ImageTag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImageTag.

        A short description of the item.

        :param description: The description of this ImageTag.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this ImageTag.


        :return: The image of this ImageTag.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageTag.


        :param image: The image of this ImageTag.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this ImageTag.

        The name of the thing represented by this object.

        :return: The name of this ImageTag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageTag.

        The name of the thing represented by this object.

        :param name: The name of this ImageTag.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ImageTag.

        The URL to get more information about the thing represented by this object.

        :return: The url of this ImageTag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImageTag.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this ImageTag.
        :type url: str
        """

        self._url = url

    @property
    def read_link(self):
        """Gets the read_link of this ImageTag.

        The URL that returns this resource. To use the URL, append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header.

        :return: The read_link of this ImageTag.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this ImageTag.

        The URL that returns this resource. To use the URL, append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header.

        :param read_link: The read_link of this ImageTag.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this ImageTag.

        The URL to Bing's search result for this item.

        :return: The web_search_url of this ImageTag.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this ImageTag.

        The URL to Bing's search result for this item.

        :param web_search_url: The web_search_url of this ImageTag.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this ImageTag.

        A String identifier.

        :return: The id of this ImageTag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageTag.

        A String identifier.

        :param id: The id of this ImageTag.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImageTag.


        :return: The type of this ImageTag.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTag.


        :param type: The type of this ImageTag.
        :type type: str
        """

        self._type = type
