# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.normalized_quadrilateral import NormalizedQuadrilateral
from openapi_server import util


class ImageTagRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_rectangle: NormalizedQuadrilateral=None, query_rectangle: NormalizedQuadrilateral=None):
        """ImageTagRegion - a model defined in OpenAPI

        :param display_rectangle: The display_rectangle of this ImageTagRegion.
        :param query_rectangle: The query_rectangle of this ImageTagRegion.
        """
        self.openapi_types = {
            'display_rectangle': NormalizedQuadrilateral,
            'query_rectangle': NormalizedQuadrilateral
        }

        self.attribute_map = {
            'display_rectangle': 'displayRectangle',
            'query_rectangle': 'queryRectangle'
        }

        self._display_rectangle = display_rectangle
        self._query_rectangle = query_rectangle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTagRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTagRegion of this ImageTagRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_rectangle(self):
        """Gets the display_rectangle of this ImageTagRegion.


        :return: The display_rectangle of this ImageTagRegion.
        :rtype: NormalizedQuadrilateral
        """
        return self._display_rectangle

    @display_rectangle.setter
    def display_rectangle(self, display_rectangle):
        """Sets the display_rectangle of this ImageTagRegion.


        :param display_rectangle: The display_rectangle of this ImageTagRegion.
        :type display_rectangle: NormalizedQuadrilateral
        """
        if display_rectangle is None:
            raise ValueError("Invalid value for `display_rectangle`, must not be `None`")

        self._display_rectangle = display_rectangle

    @property
    def query_rectangle(self):
        """Gets the query_rectangle of this ImageTagRegion.


        :return: The query_rectangle of this ImageTagRegion.
        :rtype: NormalizedQuadrilateral
        """
        return self._query_rectangle

    @query_rectangle.setter
    def query_rectangle(self, query_rectangle):
        """Sets the query_rectangle of this ImageTagRegion.


        :param query_rectangle: The query_rectangle of this ImageTagRegion.
        :type query_rectangle: NormalizedQuadrilateral
        """
        if query_rectangle is None:
            raise ValueError("Invalid value for `query_rectangle`, must not be `None`")

        self._query_rectangle = query_rectangle
