/*
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImagesVisualSearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:56.690028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImagesVisualSearchRequest {
  public static final String SERIALIZED_NAME_KNOWLEDGE_REQUEST = "knowledgeRequest";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_REQUEST)
  private String knowledgeRequest;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private File image;

  public ImagesVisualSearchRequest() {
  }

  public ImagesVisualSearchRequest knowledgeRequest(String knowledgeRequest) {
    this.knowledgeRequest = knowledgeRequest;
    return this;
  }

  /**
   * The form data is a JSON object that identifies the image using an insights token or URL to the image. The object may also include an optional crop area that identifies an area of interest in the image. The insights token and URL are mutually exclusive â€“ do not specify both. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only (it must not include an insights token or URL).
   * @return knowledgeRequest
   */
  @javax.annotation.Nullable
  public String getKnowledgeRequest() {
    return knowledgeRequest;
  }

  public void setKnowledgeRequest(String knowledgeRequest) {
    this.knowledgeRequest = knowledgeRequest;
  }


  public ImagesVisualSearchRequest image(File image) {
    this.image = image;
    return this;
  }

  /**
   * The form data is an image binary. The Content-Disposition header&#39;s name parameter must be set to \&quot;image\&quot;. You must specify an image binary if you do not use knowledgeRequest form data to specify the image; you may not use both forms to specify an image. You may specify knowledgeRequest form data and image form data in the same request only if knowledgeRequest form data specifies the cropArea field only  (it must not include an insights token or URL).
   * @return image
   */
  @javax.annotation.Nullable
  public File getImage() {
    return image;
  }

  public void setImage(File image) {
    this.image = image;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagesVisualSearchRequest imagesVisualSearchRequest = (ImagesVisualSearchRequest) o;
    return Objects.equals(this.knowledgeRequest, imagesVisualSearchRequest.knowledgeRequest) &&
        Objects.equals(this.image, imagesVisualSearchRequest.image);
  }

  @Override
  public int hashCode() {
    return Objects.hash(knowledgeRequest, image);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagesVisualSearchRequest {\n");
    sb.append("    knowledgeRequest: ").append(toIndentedString(knowledgeRequest)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("knowledgeRequest");
    openapiFields.add("image");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImagesVisualSearchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImagesVisualSearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImagesVisualSearchRequest is not found in the empty JSON string", ImagesVisualSearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImagesVisualSearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImagesVisualSearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("knowledgeRequest") != null && !jsonObj.get("knowledgeRequest").isJsonNull()) && !jsonObj.get("knowledgeRequest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knowledgeRequest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knowledgeRequest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImagesVisualSearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImagesVisualSearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImagesVisualSearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImagesVisualSearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImagesVisualSearchRequest>() {
           @Override
           public void write(JsonWriter out, ImagesVisualSearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImagesVisualSearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImagesVisualSearchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImagesVisualSearchRequest
   * @throws IOException if the JSON string is invalid with respect to ImagesVisualSearchRequest
   */
  public static ImagesVisualSearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImagesVisualSearchRequest.class);
  }

  /**
   * Convert an instance of ImagesVisualSearchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

