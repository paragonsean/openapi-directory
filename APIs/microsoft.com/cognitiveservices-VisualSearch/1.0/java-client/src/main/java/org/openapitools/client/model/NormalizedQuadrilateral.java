/*
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.Point2D;
import org.openapitools.client.model.StructuredValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a region of an image. The region is a convex quadrilateral defined by coordinates of its top left, top right, bottom left, and bottom right points. The coordinates are fractional values of the original image&#39;s width and height in the range 0.0 through 1.0.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:56.690028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NormalizedQuadrilateral extends StructuredValue {
  public static final String SERIALIZED_NAME_BOTTOM_LEFT = "bottomLeft";
  @SerializedName(SERIALIZED_NAME_BOTTOM_LEFT)
  private Point2D bottomLeft;

  public static final String SERIALIZED_NAME_BOTTOM_RIGHT = "bottomRight";
  @SerializedName(SERIALIZED_NAME_BOTTOM_RIGHT)
  private Point2D bottomRight;

  public static final String SERIALIZED_NAME_TOP_LEFT = "topLeft";
  @SerializedName(SERIALIZED_NAME_TOP_LEFT)
  private Point2D topLeft;

  public static final String SERIALIZED_NAME_TOP_RIGHT = "topRight";
  @SerializedName(SERIALIZED_NAME_TOP_RIGHT)
  private Point2D topRight;

  public NormalizedQuadrilateral() {
    this.type = this.getClass().getSimpleName();
  }

  public NormalizedQuadrilateral(
     String alternateName, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.alternateName = alternateName;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  public NormalizedQuadrilateral bottomLeft(Point2D bottomLeft) {
    this.bottomLeft = bottomLeft;
    return this;
  }

  /**
   * Get bottomLeft
   * @return bottomLeft
   */
  @javax.annotation.Nonnull
  public Point2D getBottomLeft() {
    return bottomLeft;
  }

  public void setBottomLeft(Point2D bottomLeft) {
    this.bottomLeft = bottomLeft;
  }


  public NormalizedQuadrilateral bottomRight(Point2D bottomRight) {
    this.bottomRight = bottomRight;
    return this;
  }

  /**
   * Get bottomRight
   * @return bottomRight
   */
  @javax.annotation.Nonnull
  public Point2D getBottomRight() {
    return bottomRight;
  }

  public void setBottomRight(Point2D bottomRight) {
    this.bottomRight = bottomRight;
  }


  public NormalizedQuadrilateral topLeft(Point2D topLeft) {
    this.topLeft = topLeft;
    return this;
  }

  /**
   * Get topLeft
   * @return topLeft
   */
  @javax.annotation.Nonnull
  public Point2D getTopLeft() {
    return topLeft;
  }

  public void setTopLeft(Point2D topLeft) {
    this.topLeft = topLeft;
  }


  public NormalizedQuadrilateral topRight(Point2D topRight) {
    this.topRight = topRight;
    return this;
  }

  /**
   * Get topRight
   * @return topRight
   */
  @javax.annotation.Nonnull
  public Point2D getTopRight() {
    return topRight;
  }

  public void setTopRight(Point2D topRight) {
    this.topRight = topRight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormalizedQuadrilateral normalizedQuadrilateral = (NormalizedQuadrilateral) o;
    return Objects.equals(this.bottomLeft, normalizedQuadrilateral.bottomLeft) &&
        Objects.equals(this.bottomRight, normalizedQuadrilateral.bottomRight) &&
        Objects.equals(this.topLeft, normalizedQuadrilateral.topLeft) &&
        Objects.equals(this.topRight, normalizedQuadrilateral.topRight) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottomLeft, bottomRight, topLeft, topRight, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormalizedQuadrilateral {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bottomLeft: ").append(toIndentedString(bottomLeft)).append("\n");
    sb.append("    bottomRight: ").append(toIndentedString(bottomRight)).append("\n");
    sb.append("    topLeft: ").append(toIndentedString(topLeft)).append("\n");
    sb.append("    topRight: ").append(toIndentedString(topRight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateName");
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bottomLeft");
    openapiRequiredFields.add("bottomRight");
    openapiRequiredFields.add("topLeft");
    openapiRequiredFields.add("topRight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NormalizedQuadrilateral
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NormalizedQuadrilateral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormalizedQuadrilateral is not found in the empty JSON string", NormalizedQuadrilateral.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NormalizedQuadrilateral.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NormalizedQuadrilateral` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NormalizedQuadrilateral.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormalizedQuadrilateral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormalizedQuadrilateral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormalizedQuadrilateral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormalizedQuadrilateral.class));

       return (TypeAdapter<T>) new TypeAdapter<NormalizedQuadrilateral>() {
           @Override
           public void write(JsonWriter out, NormalizedQuadrilateral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NormalizedQuadrilateral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NormalizedQuadrilateral given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NormalizedQuadrilateral
   * @throws IOException if the JSON string is invalid with respect to NormalizedQuadrilateral
   */
  public static NormalizedQuadrilateral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormalizedQuadrilateral.class);
  }

  /**
   * Convert an instance of NormalizedQuadrilateral to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

