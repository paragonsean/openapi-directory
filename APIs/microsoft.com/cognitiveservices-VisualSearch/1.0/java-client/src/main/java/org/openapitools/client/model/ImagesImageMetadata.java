/*
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregateOffer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a count of the number of websites where you can shop or perform other actions related to the image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:56.690028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImagesImageMetadata {
  public static final String SERIALIZED_NAME_AGGREGATE_OFFER = "aggregateOffer";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_OFFER)
  private AggregateOffer aggregateOffer;

  public static final String SERIALIZED_NAME_RECIPE_SOURCES_COUNT = "recipeSourcesCount";
  @SerializedName(SERIALIZED_NAME_RECIPE_SOURCES_COUNT)
  private Integer recipeSourcesCount;

  public static final String SERIALIZED_NAME_SHOPPING_SOURCES_COUNT = "shoppingSourcesCount";
  @SerializedName(SERIALIZED_NAME_SHOPPING_SOURCES_COUNT)
  private Integer shoppingSourcesCount;

  public ImagesImageMetadata() {
  }

  public ImagesImageMetadata(
     Integer recipeSourcesCount, 
     Integer shoppingSourcesCount
  ) {
    this();
    this.recipeSourcesCount = recipeSourcesCount;
    this.shoppingSourcesCount = shoppingSourcesCount;
  }

  public ImagesImageMetadata aggregateOffer(AggregateOffer aggregateOffer) {
    this.aggregateOffer = aggregateOffer;
    return this;
  }

  /**
   * Get aggregateOffer
   * @return aggregateOffer
   */
  @javax.annotation.Nullable
  public AggregateOffer getAggregateOffer() {
    return aggregateOffer;
  }

  public void setAggregateOffer(AggregateOffer aggregateOffer) {
    this.aggregateOffer = aggregateOffer;
  }


  /**
   * The number of websites that offer recipes of the food seen in the image.
   * @return recipeSourcesCount
   */
  @javax.annotation.Nullable
  public Integer getRecipeSourcesCount() {
    return recipeSourcesCount;
  }



  /**
   * The number of websites that sell the products seen in the image.
   * @return shoppingSourcesCount
   */
  @javax.annotation.Nullable
  public Integer getShoppingSourcesCount() {
    return shoppingSourcesCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagesImageMetadata imagesImageMetadata = (ImagesImageMetadata) o;
    return Objects.equals(this.aggregateOffer, imagesImageMetadata.aggregateOffer) &&
        Objects.equals(this.recipeSourcesCount, imagesImageMetadata.recipeSourcesCount) &&
        Objects.equals(this.shoppingSourcesCount, imagesImageMetadata.shoppingSourcesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateOffer, recipeSourcesCount, shoppingSourcesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagesImageMetadata {\n");
    sb.append("    aggregateOffer: ").append(toIndentedString(aggregateOffer)).append("\n");
    sb.append("    recipeSourcesCount: ").append(toIndentedString(recipeSourcesCount)).append("\n");
    sb.append("    shoppingSourcesCount: ").append(toIndentedString(shoppingSourcesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateOffer");
    openapiFields.add("recipeSourcesCount");
    openapiFields.add("shoppingSourcesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImagesImageMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImagesImageMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImagesImageMetadata is not found in the empty JSON string", ImagesImageMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImagesImageMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImagesImageMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateOffer`
      if (jsonObj.get("aggregateOffer") != null && !jsonObj.get("aggregateOffer").isJsonNull()) {
        AggregateOffer.validateJsonElement(jsonObj.get("aggregateOffer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImagesImageMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImagesImageMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImagesImageMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImagesImageMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ImagesImageMetadata>() {
           @Override
           public void write(JsonWriter out, ImagesImageMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImagesImageMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImagesImageMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImagesImageMetadata
   * @throws IOException if the JSON string is invalid with respect to ImagesImageMetadata
   */
  public static ImagesImageMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImagesImageMetadata.class);
  }

  /**
   * Convert an instance of ImagesImageMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

