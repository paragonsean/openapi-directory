/*
 * Visual Search Client
 * Visual Search API lets you discover insights about an image such as visually similar images, shopping sources, and related searches. The API can also perform text recognition, identify entities (people, places, things), return other topical content for the user to explore, and more. For more information, see [Visual Search Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).  **NOTE:** To comply with the new EU Copyright Directive in France, the Bing Visual Search API must omit some content from certain EU News sources for French users. The removed content may include thumbnail images and videos, video previews, and snippets which accompany search results from these sources. As a consequence, the Bing APIs may serve fewer results with thumbnail images and videos, video previews, and snippets to French users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A JSON object consisting of coordinates specifying the four corners of a cropped rectangle within the input image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:56.690028-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CropArea {
  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private Float bottom;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Float left;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Float right;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Float top;

  public CropArea() {
  }

  public CropArea bottom(Float bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * The bottom coordinate of the region to be cropped. The coordinate is a fractional value of the original image&#39;s height and is measured from the top edge of the image. Specify the coordinate as a value from 0.0 through 1.0.
   * @return bottom
   */
  @javax.annotation.Nonnull
  public Float getBottom() {
    return bottom;
  }

  public void setBottom(Float bottom) {
    this.bottom = bottom;
  }


  public CropArea left(Float left) {
    this.left = left;
    return this;
  }

  /**
   * The left coordinate of the region to be cropped. The coordinate is a fractional value of the original image&#39;s width and is measured from the left edge of the image. Specify the coordinate as a value from 0.0 through 1.0.
   * @return left
   */
  @javax.annotation.Nonnull
  public Float getLeft() {
    return left;
  }

  public void setLeft(Float left) {
    this.left = left;
  }


  public CropArea right(Float right) {
    this.right = right;
    return this;
  }

  /**
   * The right coordinate of the region to be cropped. The coordinate is a fractional value of the original image&#39;s width and is measured from the left edge of the image. Specify the coordinate as a value from 0.0 through 1.0.
   * @return right
   */
  @javax.annotation.Nonnull
  public Float getRight() {
    return right;
  }

  public void setRight(Float right) {
    this.right = right;
  }


  public CropArea top(Float top) {
    this.top = top;
    return this;
  }

  /**
   * The top coordinate of the region to be cropped. The coordinate is a fractional value of the original image&#39;s height and is measured from the top edge of the image. Specify the coordinate as a value from 0.0 through 1.0.
   * @return top
   */
  @javax.annotation.Nonnull
  public Float getTop() {
    return top;
  }

  public void setTop(Float top) {
    this.top = top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CropArea cropArea = (CropArea) o;
    return Objects.equals(this.bottom, cropArea.bottom) &&
        Objects.equals(this.left, cropArea.left) &&
        Objects.equals(this.right, cropArea.right) &&
        Objects.equals(this.top, cropArea.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottom, left, right, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CropArea {\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bottom");
    openapiFields.add("left");
    openapiFields.add("right");
    openapiFields.add("top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bottom");
    openapiRequiredFields.add("left");
    openapiRequiredFields.add("right");
    openapiRequiredFields.add("top");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CropArea
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CropArea.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CropArea is not found in the empty JSON string", CropArea.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CropArea.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CropArea` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CropArea.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CropArea.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CropArea' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CropArea> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CropArea.class));

       return (TypeAdapter<T>) new TypeAdapter<CropArea>() {
           @Override
           public void write(JsonWriter out, CropArea value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CropArea read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CropArea given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CropArea
   * @throws IOException if the JSON string is invalid with respect to CropArea
   */
  public static CropArea fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CropArea.class);
  }

  /**
   * Convert an instance of CropArea to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

