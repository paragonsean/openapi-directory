# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, code: str='None', message: str=None, more_details: str=None, parameter: str=None, value: str=None):
        """Error - a model defined in OpenAPI

        :param type: The type of this Error.
        :param code: The code of this Error.
        :param message: The message of this Error.
        :param more_details: The more_details of this Error.
        :param parameter: The parameter of this Error.
        :param value: The value of this Error.
        """
        self.openapi_types = {
            'type': str,
            'code': str,
            'message': str,
            'more_details': str,
            'parameter': str,
            'value': str
        }

        self.attribute_map = {
            'type': '_type',
            'code': 'code',
            'message': 'message',
            'more_details': 'moreDetails',
            'parameter': 'parameter',
            'value': 'value'
        }

        self._type = type
        self._code = code
        self._message = message
        self._more_details = more_details
        self._parameter = parameter
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Error.


        :return: The type of this Error.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Error.


        :param type: The type of this Error.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def code(self):
        """Gets the code of this Error.

        The error code that identifies the category of error.

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        The error code that identifies the category of error.

        :param code: The code of this Error.
        :type code: str
        """
        allowed_values = ["None", "ServerError", "InvalidRequest", "RateLimitExceeded", "InvalidAuthorization", "InsufficientAuthorization"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this Error.

        A description of the error.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A description of the error.

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def more_details(self):
        """Gets the more_details of this Error.

        A description that provides additional information about the error.

        :return: The more_details of this Error.
        :rtype: str
        """
        return self._more_details

    @more_details.setter
    def more_details(self, more_details):
        """Sets the more_details of this Error.

        A description that provides additional information about the error.

        :param more_details: The more_details of this Error.
        :type more_details: str
        """

        self._more_details = more_details

    @property
    def parameter(self):
        """Gets the parameter of this Error.

        The parameter in the request that caused the error.

        :return: The parameter of this Error.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Error.

        The parameter in the request that caused the error.

        :param parameter: The parameter of this Error.
        :type parameter: str
        """

        self._parameter = parameter

    @property
    def value(self):
        """Gets the value of this Error.

        The parameter's value in the request that was not valid.

        :return: The value of this Error.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Error.

        The parameter's value in the request that was not valid.

        :param value: The value of this Error.
        :type value: str
        """

        self._value = value
