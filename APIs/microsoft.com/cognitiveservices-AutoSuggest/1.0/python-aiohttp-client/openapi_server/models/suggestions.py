# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.query_context import QueryContext
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server.models.suggestions_suggestion_group import SuggestionsSuggestionGroup
from openapi_server import util


class Suggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggestion_groups: List[SuggestionsSuggestionGroup]=None, query_context: QueryContext=None, adaptive_card: str=None, immediate_action: List[Action]=None, potential_action: List[Action]=None, preferred_clickthrough_url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """Suggestions - a model defined in OpenAPI

        :param suggestion_groups: The suggestion_groups of this Suggestions.
        :param query_context: The query_context of this Suggestions.
        :param adaptive_card: The adaptive_card of this Suggestions.
        :param immediate_action: The immediate_action of this Suggestions.
        :param potential_action: The potential_action of this Suggestions.
        :param preferred_clickthrough_url: The preferred_clickthrough_url of this Suggestions.
        :param read_link: The read_link of this Suggestions.
        :param web_search_url: The web_search_url of this Suggestions.
        :param id: The id of this Suggestions.
        :param type: The type of this Suggestions.
        """
        self.openapi_types = {
            'suggestion_groups': List[SuggestionsSuggestionGroup],
            'query_context': QueryContext,
            'adaptive_card': str,
            'immediate_action': List[Action],
            'potential_action': List[Action],
            'preferred_clickthrough_url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'suggestion_groups': 'suggestionGroups',
            'query_context': 'queryContext',
            'adaptive_card': 'adaptiveCard',
            'immediate_action': 'immediateAction',
            'potential_action': 'potentialAction',
            'preferred_clickthrough_url': 'preferredClickthroughUrl',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._suggestion_groups = suggestion_groups
        self._query_context = query_context
        self._adaptive_card = adaptive_card
        self._immediate_action = immediate_action
        self._potential_action = potential_action
        self._preferred_clickthrough_url = preferred_clickthrough_url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Suggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Suggestions of this Suggestions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggestion_groups(self):
        """Gets the suggestion_groups of this Suggestions.


        :return: The suggestion_groups of this Suggestions.
        :rtype: List[SuggestionsSuggestionGroup]
        """
        return self._suggestion_groups

    @suggestion_groups.setter
    def suggestion_groups(self, suggestion_groups):
        """Sets the suggestion_groups of this Suggestions.


        :param suggestion_groups: The suggestion_groups of this Suggestions.
        :type suggestion_groups: List[SuggestionsSuggestionGroup]
        """
        if suggestion_groups is None:
            raise ValueError("Invalid value for `suggestion_groups`, must not be `None`")

        self._suggestion_groups = suggestion_groups

    @property
    def query_context(self):
        """Gets the query_context of this Suggestions.


        :return: The query_context of this Suggestions.
        :rtype: QueryContext
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this Suggestions.


        :param query_context: The query_context of this Suggestions.
        :type query_context: QueryContext
        """

        self._query_context = query_context

    @property
    def adaptive_card(self):
        """Gets the adaptive_card of this Suggestions.


        :return: The adaptive_card of this Suggestions.
        :rtype: str
        """
        return self._adaptive_card

    @adaptive_card.setter
    def adaptive_card(self, adaptive_card):
        """Sets the adaptive_card of this Suggestions.


        :param adaptive_card: The adaptive_card of this Suggestions.
        :type adaptive_card: str
        """

        self._adaptive_card = adaptive_card

    @property
    def immediate_action(self):
        """Gets the immediate_action of this Suggestions.


        :return: The immediate_action of this Suggestions.
        :rtype: List[Action]
        """
        return self._immediate_action

    @immediate_action.setter
    def immediate_action(self, immediate_action):
        """Sets the immediate_action of this Suggestions.


        :param immediate_action: The immediate_action of this Suggestions.
        :type immediate_action: List[Action]
        """

        self._immediate_action = immediate_action

    @property
    def potential_action(self):
        """Gets the potential_action of this Suggestions.


        :return: The potential_action of this Suggestions.
        :rtype: List[Action]
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this Suggestions.


        :param potential_action: The potential_action of this Suggestions.
        :type potential_action: List[Action]
        """

        self._potential_action = potential_action

    @property
    def preferred_clickthrough_url(self):
        """Gets the preferred_clickthrough_url of this Suggestions.


        :return: The preferred_clickthrough_url of this Suggestions.
        :rtype: str
        """
        return self._preferred_clickthrough_url

    @preferred_clickthrough_url.setter
    def preferred_clickthrough_url(self, preferred_clickthrough_url):
        """Sets the preferred_clickthrough_url of this Suggestions.


        :param preferred_clickthrough_url: The preferred_clickthrough_url of this Suggestions.
        :type preferred_clickthrough_url: str
        """

        self._preferred_clickthrough_url = preferred_clickthrough_url

    @property
    def read_link(self):
        """Gets the read_link of this Suggestions.

        The URL that returns this resource.

        :return: The read_link of this Suggestions.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this Suggestions.

        The URL that returns this resource.

        :param read_link: The read_link of this Suggestions.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Suggestions.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Suggestions.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Suggestions.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Suggestions.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Suggestions.

        A String identifier.

        :return: The id of this Suggestions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Suggestions.

        A String identifier.

        :param id: The id of this Suggestions.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Suggestions.


        :return: The type of this Suggestions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Suggestions.


        :param type: The type of this Suggestions.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
