# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_action import SearchAction
from openapi_server import util


class SuggestionsSuggestionGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, name: str='Unknown', search_suggestions: List[SearchAction]=None):
        """SuggestionsSuggestionGroup - a model defined in OpenAPI

        :param type: The type of this SuggestionsSuggestionGroup.
        :param name: The name of this SuggestionsSuggestionGroup.
        :param search_suggestions: The search_suggestions of this SuggestionsSuggestionGroup.
        """
        self.openapi_types = {
            'type': str,
            'name': str,
            'search_suggestions': List[SearchAction]
        }

        self.attribute_map = {
            'type': '_type',
            'name': 'name',
            'search_suggestions': 'searchSuggestions'
        }

        self._type = type
        self._name = name
        self._search_suggestions = search_suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestionsSuggestionGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestionsSuggestionGroup of this SuggestionsSuggestionGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SuggestionsSuggestionGroup.


        :return: The type of this SuggestionsSuggestionGroup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SuggestionsSuggestionGroup.


        :param type: The type of this SuggestionsSuggestionGroup.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def name(self):
        """Gets the name of this SuggestionsSuggestionGroup.


        :return: The name of this SuggestionsSuggestionGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuggestionsSuggestionGroup.


        :param name: The name of this SuggestionsSuggestionGroup.
        :type name: str
        """
        allowed_values = ["Unknown", "Web", "StoreApps", "SearchHistory", "PersonalSearchDocuments", "PersonalSearchTags", "Custom"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def search_suggestions(self):
        """Gets the search_suggestions of this SuggestionsSuggestionGroup.


        :return: The search_suggestions of this SuggestionsSuggestionGroup.
        :rtype: List[SearchAction]
        """
        return self._search_suggestions

    @search_suggestions.setter
    def search_suggestions(self, search_suggestions):
        """Sets the search_suggestions of this SuggestionsSuggestionGroup.


        :param search_suggestions: The search_suggestions of this SuggestionsSuggestionGroup.
        :type search_suggestions: List[SearchAction]
        """
        if search_suggestions is None:
            raise ValueError("Invalid value for `search_suggestions`, must not be `None`")

        self._search_suggestions = search_suggestions
