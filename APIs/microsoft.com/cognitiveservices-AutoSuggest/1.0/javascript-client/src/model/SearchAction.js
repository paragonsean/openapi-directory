/**
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import Thing from './Thing';

/**
 * The SearchAction model module.
 * @module model/SearchAction
 * @version 1.0
 */
class SearchAction {
    /**
     * Constructs a new <code>SearchAction</code>.
     * @alias module:model/SearchAction
     * @extends module:model/Action
     * @implements module:model/Action
     * @param type {String} 
     */
    constructor(type) { 
        Action.initialize(this, type);
        SearchAction.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['searchKind'] = 'WebSearch';
    }

    /**
     * Constructs a <code>SearchAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchAction} obj Optional instance to populate.
     * @return {module:model/SearchAction} The populated <code>SearchAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchAction();
            Action.constructFromObject(data, obj);
            Action.constructFromObject(data, obj);

            if (data.hasOwnProperty('displayText')) {
                obj['displayText'] = ApiClient.convertToType(data['displayText'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('searchKind')) {
                obj['searchKind'] = ApiClient.convertToType(data['searchKind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayText'] && !(typeof data['displayText'] === 'string' || data['displayText'] instanceof String)) {
            throw new Error("Expected the field `displayText` to be a primitive type in the JSON string but got " + data['displayText']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['searchKind'] && !(typeof data['searchKind'] === 'string' || data['searchKind'] instanceof String)) {
            throw new Error("Expected the field `searchKind` to be a primitive type in the JSON string but got " + data['searchKind']);
        }

        return true;
    }


}

SearchAction.RequiredProperties = ["_type"];

/**
 * @member {String} displayText
 */
SearchAction.prototype['displayText'] = undefined;

/**
 * @member {String} query
 */
SearchAction.prototype['query'] = undefined;

/**
 * @member {module:model/SearchAction.SearchKindEnum} searchKind
 * @default 'WebSearch'
 */
SearchAction.prototype['searchKind'] = 'WebSearch';


// Implement Action interface:
/**
 * For internal use only.
 * @member {Array.<module:model/Thing>} about
 */
Action.prototype['about'] = undefined;
/**
 * @member {Number} commentCount
 */
Action.prototype['commentCount'] = undefined;
/**
 * @member {module:model/Thing} copyrightHolder
 */
Action.prototype['copyrightHolder'] = undefined;
/**
 * @member {Number} copyrightYear
 */
Action.prototype['copyrightYear'] = undefined;
/**
 * @member {module:model/Thing} creator
 */
Action.prototype['creator'] = undefined;
/**
 * @member {String} disclaimer
 */
Action.prototype['disclaimer'] = undefined;
/**
 * @member {String} discussionUrl
 */
Action.prototype['discussionUrl'] = undefined;
/**
 * @member {Array.<String>} genre
 */
Action.prototype['genre'] = undefined;
/**
 * @member {String} headLine
 */
Action.prototype['headLine'] = undefined;
/**
 * @member {Boolean} isAccessibleForFree
 */
Action.prototype['isAccessibleForFree'] = undefined;
/**
 * @member {Boolean} isFamilyFriendly
 */
Action.prototype['isFamilyFriendly'] = undefined;
/**
 * @member {module:model/Thing} mainEntity
 */
Action.prototype['mainEntity'] = undefined;
/**
 * For internal use only.
 * @member {Array.<module:model/Thing>} mentions
 */
Action.prototype['mentions'] = undefined;
/**
 * The source of the creative work.
 * @member {Array.<module:model/Thing>} provider
 */
Action.prototype['provider'] = undefined;
/**
 * Text content of this creative work
 * @member {String} text
 */
Action.prototype['text'] = undefined;
/**
 * The URL to a thumbnail of the item.
 * @member {String} thumbnailUrl
 */
Action.prototype['thumbnailUrl'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
Action.prototype['url'] = undefined;
/**
 * @member {String} adaptiveCard
 */
Action.prototype['adaptiveCard'] = undefined;
/**
 * @member {Array.<module:model/Action>} immediateAction
 */
Action.prototype['immediateAction'] = undefined;
/**
 * @member {Array.<module:model/Action>} potentialAction
 */
Action.prototype['potentialAction'] = undefined;
/**
 * @member {String} preferredClickthroughUrl
 */
Action.prototype['preferredClickthroughUrl'] = undefined;
/**
 * The URL that returns this resource.
 * @member {String} readLink
 */
Action.prototype['readLink'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
Action.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
Action.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
Action.prototype['_type'] = undefined;



/**
 * Allowed values for the <code>searchKind</code> property.
 * @enum {String}
 * @readonly
 */
SearchAction['SearchKindEnum'] = {

    /**
     * value: "WebSearch"
     * @const
     */
    "WebSearch": "WebSearch",

    /**
     * value: "HistorySearch"
     * @const
     */
    "HistorySearch": "HistorySearch",

    /**
     * value: "DocumentSearch"
     * @const
     */
    "DocumentSearch": "DocumentSearch",

    /**
     * value: "TagSearch"
     * @const
     */
    "TagSearch": "TagSearch",

    /**
     * value: "LocationSearch"
     * @const
     */
    "LocationSearch": "LocationSearch",

    /**
     * value: "CustomSearch"
     * @const
     */
    "CustomSearch": "CustomSearch"
};



export default SearchAction;

