/**
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeWork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeWork::OAICreativeWork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeWork::OAICreativeWork() {
    this->initializeModel();
}

OAICreativeWork::~OAICreativeWork() {}

void OAICreativeWork::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_copyright_holder_isSet = false;
    m_copyright_holder_isValid = false;

    m_copyright_year_isSet = false;
    m_copyright_year_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_disclaimer_isSet = false;
    m_disclaimer_isValid = false;

    m_discussion_url_isSet = false;
    m_discussion_url_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_head_line_isSet = false;
    m_head_line_isValid = false;

    m_is_accessible_for_free_isSet = false;
    m_is_accessible_for_free_isValid = false;

    m_is_family_friendly_isSet = false;
    m_is_family_friendly_isValid = false;

    m_main_entity_isSet = false;
    m_main_entity_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAICreativeWork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeWork::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_copyright_holder_isValid = ::OpenAPI::fromJsonValue(m_copyright_holder, json[QString("copyrightHolder")]);
    m_copyright_holder_isSet = !json[QString("copyrightHolder")].isNull() && m_copyright_holder_isValid;

    m_copyright_year_isValid = ::OpenAPI::fromJsonValue(m_copyright_year, json[QString("copyrightYear")]);
    m_copyright_year_isSet = !json[QString("copyrightYear")].isNull() && m_copyright_year_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_disclaimer_isValid = ::OpenAPI::fromJsonValue(m_disclaimer, json[QString("disclaimer")]);
    m_disclaimer_isSet = !json[QString("disclaimer")].isNull() && m_disclaimer_isValid;

    m_discussion_url_isValid = ::OpenAPI::fromJsonValue(m_discussion_url, json[QString("discussionUrl")]);
    m_discussion_url_isSet = !json[QString("discussionUrl")].isNull() && m_discussion_url_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_head_line_isValid = ::OpenAPI::fromJsonValue(m_head_line, json[QString("headLine")]);
    m_head_line_isSet = !json[QString("headLine")].isNull() && m_head_line_isValid;

    m_is_accessible_for_free_isValid = ::OpenAPI::fromJsonValue(m_is_accessible_for_free, json[QString("isAccessibleForFree")]);
    m_is_accessible_for_free_isSet = !json[QString("isAccessibleForFree")].isNull() && m_is_accessible_for_free_isValid;

    m_is_family_friendly_isValid = ::OpenAPI::fromJsonValue(m_is_family_friendly, json[QString("isFamilyFriendly")]);
    m_is_family_friendly_isSet = !json[QString("isFamilyFriendly")].isNull() && m_is_family_friendly_isValid;

    m_main_entity_isValid = ::OpenAPI::fromJsonValue(m_main_entity, json[QString("mainEntity")]);
    m_main_entity_isSet = !json[QString("mainEntity")].isNull() && m_main_entity_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAICreativeWork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeWork::asJsonObject() const {
    QJsonObject obj;
    if (m_about.size() > 0) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_copyright_holder.isSet()) {
        obj.insert(QString("copyrightHolder"), ::OpenAPI::toJsonValue(m_copyright_holder));
    }
    if (m_copyright_year_isSet) {
        obj.insert(QString("copyrightYear"), ::OpenAPI::toJsonValue(m_copyright_year));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_disclaimer_isSet) {
        obj.insert(QString("disclaimer"), ::OpenAPI::toJsonValue(m_disclaimer));
    }
    if (m_discussion_url_isSet) {
        obj.insert(QString("discussionUrl"), ::OpenAPI::toJsonValue(m_discussion_url));
    }
    if (m_genre.size() > 0) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_head_line_isSet) {
        obj.insert(QString("headLine"), ::OpenAPI::toJsonValue(m_head_line));
    }
    if (m_is_accessible_for_free_isSet) {
        obj.insert(QString("isAccessibleForFree"), ::OpenAPI::toJsonValue(m_is_accessible_for_free));
    }
    if (m_is_family_friendly_isSet) {
        obj.insert(QString("isFamilyFriendly"), ::OpenAPI::toJsonValue(m_is_family_friendly));
    }
    if (m_main_entity.isSet()) {
        obj.insert(QString("mainEntity"), ::OpenAPI::toJsonValue(m_main_entity));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAIThing> OAICreativeWork::getAbout() const {
    return m_about;
}
void OAICreativeWork::setAbout(const QList<OAIThing> &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAICreativeWork::is_about_Set() const{
    return m_about_isSet;
}

bool OAICreativeWork::is_about_Valid() const{
    return m_about_isValid;
}

qint32 OAICreativeWork::getCommentCount() const {
    return m_comment_count;
}
void OAICreativeWork::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAICreativeWork::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAICreativeWork::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

OAIThing OAICreativeWork::getCopyrightHolder() const {
    return m_copyright_holder;
}
void OAICreativeWork::setCopyrightHolder(const OAIThing &copyright_holder) {
    m_copyright_holder = copyright_holder;
    m_copyright_holder_isSet = true;
}

bool OAICreativeWork::is_copyright_holder_Set() const{
    return m_copyright_holder_isSet;
}

bool OAICreativeWork::is_copyright_holder_Valid() const{
    return m_copyright_holder_isValid;
}

qint32 OAICreativeWork::getCopyrightYear() const {
    return m_copyright_year;
}
void OAICreativeWork::setCopyrightYear(const qint32 &copyright_year) {
    m_copyright_year = copyright_year;
    m_copyright_year_isSet = true;
}

bool OAICreativeWork::is_copyright_year_Set() const{
    return m_copyright_year_isSet;
}

bool OAICreativeWork::is_copyright_year_Valid() const{
    return m_copyright_year_isValid;
}

OAIThing OAICreativeWork::getCreator() const {
    return m_creator;
}
void OAICreativeWork::setCreator(const OAIThing &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAICreativeWork::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAICreativeWork::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAICreativeWork::getDisclaimer() const {
    return m_disclaimer;
}
void OAICreativeWork::setDisclaimer(const QString &disclaimer) {
    m_disclaimer = disclaimer;
    m_disclaimer_isSet = true;
}

bool OAICreativeWork::is_disclaimer_Set() const{
    return m_disclaimer_isSet;
}

bool OAICreativeWork::is_disclaimer_Valid() const{
    return m_disclaimer_isValid;
}

QString OAICreativeWork::getDiscussionUrl() const {
    return m_discussion_url;
}
void OAICreativeWork::setDiscussionUrl(const QString &discussion_url) {
    m_discussion_url = discussion_url;
    m_discussion_url_isSet = true;
}

bool OAICreativeWork::is_discussion_url_Set() const{
    return m_discussion_url_isSet;
}

bool OAICreativeWork::is_discussion_url_Valid() const{
    return m_discussion_url_isValid;
}

QList<QString> OAICreativeWork::getGenre() const {
    return m_genre;
}
void OAICreativeWork::setGenre(const QList<QString> &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAICreativeWork::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAICreativeWork::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAICreativeWork::getHeadLine() const {
    return m_head_line;
}
void OAICreativeWork::setHeadLine(const QString &head_line) {
    m_head_line = head_line;
    m_head_line_isSet = true;
}

bool OAICreativeWork::is_head_line_Set() const{
    return m_head_line_isSet;
}

bool OAICreativeWork::is_head_line_Valid() const{
    return m_head_line_isValid;
}

bool OAICreativeWork::isIsAccessibleForFree() const {
    return m_is_accessible_for_free;
}
void OAICreativeWork::setIsAccessibleForFree(const bool &is_accessible_for_free) {
    m_is_accessible_for_free = is_accessible_for_free;
    m_is_accessible_for_free_isSet = true;
}

bool OAICreativeWork::is_is_accessible_for_free_Set() const{
    return m_is_accessible_for_free_isSet;
}

bool OAICreativeWork::is_is_accessible_for_free_Valid() const{
    return m_is_accessible_for_free_isValid;
}

bool OAICreativeWork::isIsFamilyFriendly() const {
    return m_is_family_friendly;
}
void OAICreativeWork::setIsFamilyFriendly(const bool &is_family_friendly) {
    m_is_family_friendly = is_family_friendly;
    m_is_family_friendly_isSet = true;
}

bool OAICreativeWork::is_is_family_friendly_Set() const{
    return m_is_family_friendly_isSet;
}

bool OAICreativeWork::is_is_family_friendly_Valid() const{
    return m_is_family_friendly_isValid;
}

OAIThing OAICreativeWork::getMainEntity() const {
    return m_main_entity;
}
void OAICreativeWork::setMainEntity(const OAIThing &main_entity) {
    m_main_entity = main_entity;
    m_main_entity_isSet = true;
}

bool OAICreativeWork::is_main_entity_Set() const{
    return m_main_entity_isSet;
}

bool OAICreativeWork::is_main_entity_Valid() const{
    return m_main_entity_isValid;
}

QList<OAIThing> OAICreativeWork::getMentions() const {
    return m_mentions;
}
void OAICreativeWork::setMentions(const QList<OAIThing> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAICreativeWork::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAICreativeWork::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QList<OAIThing> OAICreativeWork::getProvider() const {
    return m_provider;
}
void OAICreativeWork::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICreativeWork::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICreativeWork::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAICreativeWork::getText() const {
    return m_text;
}
void OAICreativeWork::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICreativeWork::is_text_Set() const{
    return m_text_isSet;
}

bool OAICreativeWork::is_text_Valid() const{
    return m_text_isValid;
}

QString OAICreativeWork::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAICreativeWork::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAICreativeWork::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAICreativeWork::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAICreativeWork::getUrl() const {
    return m_url;
}
void OAICreativeWork::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreativeWork::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreativeWork::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICreativeWork::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAICreativeWork::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAICreativeWork::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAICreativeWork::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAICreativeWork::getImmediateAction() const {
    return m_immediate_action;
}
void OAICreativeWork::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAICreativeWork::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAICreativeWork::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAICreativeWork::getPotentialAction() const {
    return m_potential_action;
}
void OAICreativeWork::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAICreativeWork::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAICreativeWork::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAICreativeWork::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAICreativeWork::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAICreativeWork::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAICreativeWork::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAICreativeWork::getReadLink() const {
    return m_read_link;
}
void OAICreativeWork::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAICreativeWork::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAICreativeWork::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAICreativeWork::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAICreativeWork::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAICreativeWork::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAICreativeWork::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAICreativeWork::getId() const {
    return m_id;
}
void OAICreativeWork::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreativeWork::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreativeWork::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreativeWork::getType() const {
    return m__type;
}
void OAICreativeWork::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAICreativeWork::is__type_Set() const{
    return m__type_isSet;
}

bool OAICreativeWork::is__type_Valid() const{
    return m__type_isValid;
}

bool OAICreativeWork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclaimer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discussion_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_accessible_for_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_family_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeWork::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
