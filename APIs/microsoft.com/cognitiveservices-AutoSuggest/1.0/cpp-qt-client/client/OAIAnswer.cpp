/**
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswer::OAIAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswer::OAIAnswer() {
    this->initializeModel();
}

OAIAnswer::~OAIAnswer() {}

void OAIAnswer::initializeModel() {

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswer::fromJsonObject(QJsonObject json) {

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIAnswer::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAIAnswer::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAIAnswer::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAIAnswer::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAIAnswer::getImmediateAction() const {
    return m_immediate_action;
}
void OAIAnswer::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAIAnswer::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAIAnswer::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAIAnswer::getPotentialAction() const {
    return m_potential_action;
}
void OAIAnswer::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAIAnswer::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAIAnswer::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAIAnswer::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAIAnswer::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAIAnswer::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAIAnswer::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAIAnswer::getReadLink() const {
    return m_read_link;
}
void OAIAnswer::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIAnswer::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIAnswer::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIAnswer::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIAnswer::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIAnswer::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIAnswer::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIAnswer::getId() const {
    return m_id;
}
void OAIAnswer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnswer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnswer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnswer::getType() const {
    return m__type;
}
void OAIAnswer::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIAnswer::is__type_Set() const{
    return m__type_isSet;
}

bool OAIAnswer::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
