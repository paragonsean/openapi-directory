/**
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAction::OAISearchAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAction::OAISearchAction() {
    this->initializeModel();
}

OAISearchAction::~OAISearchAction() {}

void OAISearchAction::initializeModel() {

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_search_kind_isSet = false;
    m_search_kind_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_top_action_isSet = false;
    m_is_top_action_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_about_isSet = false;
    m_about_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_copyright_holder_isSet = false;
    m_copyright_holder_isValid = false;

    m_copyright_year_isSet = false;
    m_copyright_year_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_disclaimer_isSet = false;
    m_disclaimer_isValid = false;

    m_discussion_url_isSet = false;
    m_discussion_url_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_head_line_isSet = false;
    m_head_line_isValid = false;

    m_is_accessible_for_free_isSet = false;
    m_is_accessible_for_free_isValid = false;

    m_is_family_friendly_isSet = false;
    m_is_family_friendly_isValid = false;

    m_main_entity_isSet = false;
    m_main_entity_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAISearchAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAction::fromJsonObject(QJsonObject json) {

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("displayText")]);
    m_display_text_isSet = !json[QString("displayText")].isNull() && m_display_text_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_search_kind_isValid = ::OpenAPI::fromJsonValue(m_search_kind, json[QString("searchKind")]);
    m_search_kind_isSet = !json[QString("searchKind")].isNull() && m_search_kind_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_top_action_isValid = ::OpenAPI::fromJsonValue(m_is_top_action, json[QString("isTopAction")]);
    m_is_top_action_isSet = !json[QString("isTopAction")].isNull() && m_is_top_action_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_copyright_holder_isValid = ::OpenAPI::fromJsonValue(m_copyright_holder, json[QString("copyrightHolder")]);
    m_copyright_holder_isSet = !json[QString("copyrightHolder")].isNull() && m_copyright_holder_isValid;

    m_copyright_year_isValid = ::OpenAPI::fromJsonValue(m_copyright_year, json[QString("copyrightYear")]);
    m_copyright_year_isSet = !json[QString("copyrightYear")].isNull() && m_copyright_year_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_disclaimer_isValid = ::OpenAPI::fromJsonValue(m_disclaimer, json[QString("disclaimer")]);
    m_disclaimer_isSet = !json[QString("disclaimer")].isNull() && m_disclaimer_isValid;

    m_discussion_url_isValid = ::OpenAPI::fromJsonValue(m_discussion_url, json[QString("discussionUrl")]);
    m_discussion_url_isSet = !json[QString("discussionUrl")].isNull() && m_discussion_url_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_head_line_isValid = ::OpenAPI::fromJsonValue(m_head_line, json[QString("headLine")]);
    m_head_line_isSet = !json[QString("headLine")].isNull() && m_head_line_isValid;

    m_is_accessible_for_free_isValid = ::OpenAPI::fromJsonValue(m_is_accessible_for_free, json[QString("isAccessibleForFree")]);
    m_is_accessible_for_free_isSet = !json[QString("isAccessibleForFree")].isNull() && m_is_accessible_for_free_isValid;

    m_is_family_friendly_isValid = ::OpenAPI::fromJsonValue(m_is_family_friendly, json[QString("isFamilyFriendly")]);
    m_is_family_friendly_isSet = !json[QString("isFamilyFriendly")].isNull() && m_is_family_friendly_isValid;

    m_main_entity_isValid = ::OpenAPI::fromJsonValue(m_main_entity, json[QString("mainEntity")]);
    m_main_entity_isSet = !json[QString("mainEntity")].isNull() && m_main_entity_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAISearchAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAction::asJsonObject() const {
    QJsonObject obj;
    if (m_display_text_isSet) {
        obj.insert(QString("displayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_search_kind_isSet) {
        obj.insert(QString("searchKind"), ::OpenAPI::toJsonValue(m_search_kind));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_top_action_isSet) {
        obj.insert(QString("isTopAction"), ::OpenAPI::toJsonValue(m_is_top_action));
    }
    if (m_result.size() > 0) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_about.size() > 0) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_copyright_holder.isSet()) {
        obj.insert(QString("copyrightHolder"), ::OpenAPI::toJsonValue(m_copyright_holder));
    }
    if (m_copyright_year_isSet) {
        obj.insert(QString("copyrightYear"), ::OpenAPI::toJsonValue(m_copyright_year));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_disclaimer_isSet) {
        obj.insert(QString("disclaimer"), ::OpenAPI::toJsonValue(m_disclaimer));
    }
    if (m_discussion_url_isSet) {
        obj.insert(QString("discussionUrl"), ::OpenAPI::toJsonValue(m_discussion_url));
    }
    if (m_genre.size() > 0) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_head_line_isSet) {
        obj.insert(QString("headLine"), ::OpenAPI::toJsonValue(m_head_line));
    }
    if (m_is_accessible_for_free_isSet) {
        obj.insert(QString("isAccessibleForFree"), ::OpenAPI::toJsonValue(m_is_accessible_for_free));
    }
    if (m_is_family_friendly_isSet) {
        obj.insert(QString("isFamilyFriendly"), ::OpenAPI::toJsonValue(m_is_family_friendly));
    }
    if (m_main_entity.isSet()) {
        obj.insert(QString("mainEntity"), ::OpenAPI::toJsonValue(m_main_entity));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAISearchAction::getDisplayText() const {
    return m_display_text;
}
void OAISearchAction::setDisplayText(const QString &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAISearchAction::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAISearchAction::is_display_text_Valid() const{
    return m_display_text_isValid;
}

QString OAISearchAction::getQuery() const {
    return m_query;
}
void OAISearchAction::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchAction::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchAction::is_query_Valid() const{
    return m_query_isValid;
}

QString OAISearchAction::getSearchKind() const {
    return m_search_kind;
}
void OAISearchAction::setSearchKind(const QString &search_kind) {
    m_search_kind = search_kind;
    m_search_kind_isSet = true;
}

bool OAISearchAction::is_search_kind_Set() const{
    return m_search_kind_isSet;
}

bool OAISearchAction::is_search_kind_Valid() const{
    return m_search_kind_isValid;
}

QString OAISearchAction::getDisplayName() const {
    return m_display_name;
}
void OAISearchAction::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISearchAction::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISearchAction::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAISearchAction::isIsTopAction() const {
    return m_is_top_action;
}
void OAISearchAction::setIsTopAction(const bool &is_top_action) {
    m_is_top_action = is_top_action;
    m_is_top_action_isSet = true;
}

bool OAISearchAction::is_is_top_action_Set() const{
    return m_is_top_action_isSet;
}

bool OAISearchAction::is_is_top_action_Valid() const{
    return m_is_top_action_isValid;
}

QList<OAIThing> OAISearchAction::getResult() const {
    return m_result;
}
void OAISearchAction::setResult(const QList<OAIThing> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAISearchAction::is_result_Set() const{
    return m_result_isSet;
}

bool OAISearchAction::is_result_Valid() const{
    return m_result_isValid;
}

QString OAISearchAction::getServiceUrl() const {
    return m_service_url;
}
void OAISearchAction::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAISearchAction::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAISearchAction::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QList<OAIThing> OAISearchAction::getAbout() const {
    return m_about;
}
void OAISearchAction::setAbout(const QList<OAIThing> &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAISearchAction::is_about_Set() const{
    return m_about_isSet;
}

bool OAISearchAction::is_about_Valid() const{
    return m_about_isValid;
}

qint32 OAISearchAction::getCommentCount() const {
    return m_comment_count;
}
void OAISearchAction::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAISearchAction::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAISearchAction::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

OAIThing OAISearchAction::getCopyrightHolder() const {
    return m_copyright_holder;
}
void OAISearchAction::setCopyrightHolder(const OAIThing &copyright_holder) {
    m_copyright_holder = copyright_holder;
    m_copyright_holder_isSet = true;
}

bool OAISearchAction::is_copyright_holder_Set() const{
    return m_copyright_holder_isSet;
}

bool OAISearchAction::is_copyright_holder_Valid() const{
    return m_copyright_holder_isValid;
}

qint32 OAISearchAction::getCopyrightYear() const {
    return m_copyright_year;
}
void OAISearchAction::setCopyrightYear(const qint32 &copyright_year) {
    m_copyright_year = copyright_year;
    m_copyright_year_isSet = true;
}

bool OAISearchAction::is_copyright_year_Set() const{
    return m_copyright_year_isSet;
}

bool OAISearchAction::is_copyright_year_Valid() const{
    return m_copyright_year_isValid;
}

OAIThing OAISearchAction::getCreator() const {
    return m_creator;
}
void OAISearchAction::setCreator(const OAIThing &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAISearchAction::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAISearchAction::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAISearchAction::getDisclaimer() const {
    return m_disclaimer;
}
void OAISearchAction::setDisclaimer(const QString &disclaimer) {
    m_disclaimer = disclaimer;
    m_disclaimer_isSet = true;
}

bool OAISearchAction::is_disclaimer_Set() const{
    return m_disclaimer_isSet;
}

bool OAISearchAction::is_disclaimer_Valid() const{
    return m_disclaimer_isValid;
}

QString OAISearchAction::getDiscussionUrl() const {
    return m_discussion_url;
}
void OAISearchAction::setDiscussionUrl(const QString &discussion_url) {
    m_discussion_url = discussion_url;
    m_discussion_url_isSet = true;
}

bool OAISearchAction::is_discussion_url_Set() const{
    return m_discussion_url_isSet;
}

bool OAISearchAction::is_discussion_url_Valid() const{
    return m_discussion_url_isValid;
}

QList<QString> OAISearchAction::getGenre() const {
    return m_genre;
}
void OAISearchAction::setGenre(const QList<QString> &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAISearchAction::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAISearchAction::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAISearchAction::getHeadLine() const {
    return m_head_line;
}
void OAISearchAction::setHeadLine(const QString &head_line) {
    m_head_line = head_line;
    m_head_line_isSet = true;
}

bool OAISearchAction::is_head_line_Set() const{
    return m_head_line_isSet;
}

bool OAISearchAction::is_head_line_Valid() const{
    return m_head_line_isValid;
}

bool OAISearchAction::isIsAccessibleForFree() const {
    return m_is_accessible_for_free;
}
void OAISearchAction::setIsAccessibleForFree(const bool &is_accessible_for_free) {
    m_is_accessible_for_free = is_accessible_for_free;
    m_is_accessible_for_free_isSet = true;
}

bool OAISearchAction::is_is_accessible_for_free_Set() const{
    return m_is_accessible_for_free_isSet;
}

bool OAISearchAction::is_is_accessible_for_free_Valid() const{
    return m_is_accessible_for_free_isValid;
}

bool OAISearchAction::isIsFamilyFriendly() const {
    return m_is_family_friendly;
}
void OAISearchAction::setIsFamilyFriendly(const bool &is_family_friendly) {
    m_is_family_friendly = is_family_friendly;
    m_is_family_friendly_isSet = true;
}

bool OAISearchAction::is_is_family_friendly_Set() const{
    return m_is_family_friendly_isSet;
}

bool OAISearchAction::is_is_family_friendly_Valid() const{
    return m_is_family_friendly_isValid;
}

OAIThing OAISearchAction::getMainEntity() const {
    return m_main_entity;
}
void OAISearchAction::setMainEntity(const OAIThing &main_entity) {
    m_main_entity = main_entity;
    m_main_entity_isSet = true;
}

bool OAISearchAction::is_main_entity_Set() const{
    return m_main_entity_isSet;
}

bool OAISearchAction::is_main_entity_Valid() const{
    return m_main_entity_isValid;
}

QList<OAIThing> OAISearchAction::getMentions() const {
    return m_mentions;
}
void OAISearchAction::setMentions(const QList<OAIThing> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAISearchAction::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAISearchAction::is_mentions_Valid() const{
    return m_mentions_isValid;
}

QList<OAIThing> OAISearchAction::getProvider() const {
    return m_provider;
}
void OAISearchAction::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAISearchAction::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAISearchAction::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAISearchAction::getText() const {
    return m_text;
}
void OAISearchAction::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISearchAction::is_text_Set() const{
    return m_text_isSet;
}

bool OAISearchAction::is_text_Valid() const{
    return m_text_isValid;
}

QString OAISearchAction::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAISearchAction::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAISearchAction::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAISearchAction::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAISearchAction::getUrl() const {
    return m_url;
}
void OAISearchAction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISearchAction::is_url_Set() const{
    return m_url_isSet;
}

bool OAISearchAction::is_url_Valid() const{
    return m_url_isValid;
}

QString OAISearchAction::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAISearchAction::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAISearchAction::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAISearchAction::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAISearchAction::getImmediateAction() const {
    return m_immediate_action;
}
void OAISearchAction::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAISearchAction::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAISearchAction::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAISearchAction::getPotentialAction() const {
    return m_potential_action;
}
void OAISearchAction::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAISearchAction::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAISearchAction::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAISearchAction::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAISearchAction::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAISearchAction::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAISearchAction::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAISearchAction::getReadLink() const {
    return m_read_link;
}
void OAISearchAction::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAISearchAction::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAISearchAction::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAISearchAction::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAISearchAction::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAISearchAction::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAISearchAction::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAISearchAction::getId() const {
    return m_id;
}
void OAISearchAction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchAction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchAction::getType() const {
    return m__type;
}
void OAISearchAction::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAISearchAction::is__type_Set() const{
    return m__type_isSet;
}

bool OAISearchAction::is__type_Valid() const{
    return m__type_isValid;
}

bool OAISearchAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_top_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_about.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclaimer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discussion_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_accessible_for_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_family_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
