/**
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestionsSuggestionGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestionsSuggestionGroup::OAISuggestionsSuggestionGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestionsSuggestionGroup::OAISuggestionsSuggestionGroup() {
    this->initializeModel();
}

OAISuggestionsSuggestionGroup::~OAISuggestionsSuggestionGroup() {}

void OAISuggestionsSuggestionGroup::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_search_suggestions_isSet = false;
    m_search_suggestions_isValid = false;
}

void OAISuggestionsSuggestionGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestionsSuggestionGroup::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_search_suggestions_isValid = ::OpenAPI::fromJsonValue(m_search_suggestions, json[QString("searchSuggestions")]);
    m_search_suggestions_isSet = !json[QString("searchSuggestions")].isNull() && m_search_suggestions_isValid;
}

QString OAISuggestionsSuggestionGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestionsSuggestionGroup::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_search_suggestions.size() > 0) {
        obj.insert(QString("searchSuggestions"), ::OpenAPI::toJsonValue(m_search_suggestions));
    }
    return obj;
}

QString OAISuggestionsSuggestionGroup::getType() const {
    return m__type;
}
void OAISuggestionsSuggestionGroup::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAISuggestionsSuggestionGroup::is__type_Set() const{
    return m__type_isSet;
}

bool OAISuggestionsSuggestionGroup::is__type_Valid() const{
    return m__type_isValid;
}

QString OAISuggestionsSuggestionGroup::getName() const {
    return m_name;
}
void OAISuggestionsSuggestionGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISuggestionsSuggestionGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAISuggestionsSuggestionGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISearchAction> OAISuggestionsSuggestionGroup::getSearchSuggestions() const {
    return m_search_suggestions;
}
void OAISuggestionsSuggestionGroup::setSearchSuggestions(const QList<OAISearchAction> &search_suggestions) {
    m_search_suggestions = search_suggestions;
    m_search_suggestions_isSet = true;
}

bool OAISuggestionsSuggestionGroup::is_search_suggestions_Set() const{
    return m_search_suggestions_isSet;
}

bool OAISuggestionsSuggestionGroup::is_search_suggestions_Valid() const{
    return m_search_suggestions_isValid;
}

bool OAISuggestionsSuggestionGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestionsSuggestionGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && m_name_isValid && m_search_suggestions_isValid && true;
}

} // namespace OpenAPI
