/*
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuggestionsSuggestionGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:55.460162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestionsSuggestionGroup {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  /**
   * Gets or Sets name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    UNKNOWN("Unknown"),
    
    WEB("Web"),
    
    STORE_APPS("StoreApps"),
    
    SEARCH_HISTORY("SearchHistory"),
    
    PERSONAL_SEARCH_DOCUMENTS("PersonalSearchDocuments"),
    
    PERSONAL_SEARCH_TAGS("PersonalSearchTags"),
    
    CUSTOM("Custom");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name = NameEnum.UNKNOWN;

  public static final String SERIALIZED_NAME_SEARCH_SUGGESTIONS = "searchSuggestions";
  @SerializedName(SERIALIZED_NAME_SEARCH_SUGGESTIONS)
  private List<SearchAction> searchSuggestions = new ArrayList<>();

  public SuggestionsSuggestionGroup() {
    this.type = this.getClass().getSimpleName();
  }

  public SuggestionsSuggestionGroup type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SuggestionsSuggestionGroup name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }


  public SuggestionsSuggestionGroup searchSuggestions(List<SearchAction> searchSuggestions) {
    this.searchSuggestions = searchSuggestions;
    return this;
  }

  public SuggestionsSuggestionGroup addSearchSuggestionsItem(SearchAction searchSuggestionsItem) {
    if (this.searchSuggestions == null) {
      this.searchSuggestions = new ArrayList<>();
    }
    this.searchSuggestions.add(searchSuggestionsItem);
    return this;
  }

  /**
   * Get searchSuggestions
   * @return searchSuggestions
   */
  @javax.annotation.Nonnull
  public List<SearchAction> getSearchSuggestions() {
    return searchSuggestions;
  }

  public void setSearchSuggestions(List<SearchAction> searchSuggestions) {
    this.searchSuggestions = searchSuggestions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionsSuggestionGroup suggestionsSuggestionGroup = (SuggestionsSuggestionGroup) o;
    return Objects.equals(this.type, suggestionsSuggestionGroup.type) &&
        Objects.equals(this.name, suggestionsSuggestionGroup.name) &&
        Objects.equals(this.searchSuggestions, suggestionsSuggestionGroup.searchSuggestions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, name, searchSuggestions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionsSuggestionGroup {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    searchSuggestions: ").append(toIndentedString(searchSuggestions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("name");
    openapiFields.add("searchSuggestions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("searchSuggestions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestionsSuggestionGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestionsSuggestionGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionsSuggestionGroup is not found in the empty JSON string", SuggestionsSuggestionGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestionsSuggestionGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionsSuggestionGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuggestionsSuggestionGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionsSuggestionGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionsSuggestionGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionsSuggestionGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionsSuggestionGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionsSuggestionGroup>() {
           @Override
           public void write(JsonWriter out, SuggestionsSuggestionGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionsSuggestionGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestionsSuggestionGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestionsSuggestionGroup
   * @throws IOException if the JSON string is invalid with respect to SuggestionsSuggestionGroup
   */
  public static SuggestionsSuggestionGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionsSuggestionGroup.class);
  }

  /**
   * Convert an instance of SuggestionsSuggestionGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

