/*
 * AutoSuggest Client
 * Autosuggest supplies search terms derived from a root text sent to the service.  The terms Autosuggest supplies are related to the root text based on similarity and their frequency or ratings of usefulness in other searches. For examples that show how to use Autosuggest, see [Search using AutoSuggest](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-autosuggest-api-v7-reference).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:55.460162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchAction extends Action {
  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "displayText";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  /**
   * Gets or Sets searchKind
   */
  @JsonAdapter(SearchKindEnum.Adapter.class)
  public enum SearchKindEnum {
    WEB_SEARCH("WebSearch"),
    
    HISTORY_SEARCH("HistorySearch"),
    
    DOCUMENT_SEARCH("DocumentSearch"),
    
    TAG_SEARCH("TagSearch"),
    
    LOCATION_SEARCH("LocationSearch"),
    
    CUSTOM_SEARCH("CustomSearch");

    private String value;

    SearchKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchKindEnum fromValue(String value) {
      for (SearchKindEnum b : SearchKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_KIND = "searchKind";
  @SerializedName(SERIALIZED_NAME_SEARCH_KIND)
  private SearchKindEnum searchKind = SearchKindEnum.WEB_SEARCH;

  public SearchAction() {
    this.type = this.getClass().getSimpleName();
  }

  public SearchAction(
     String displayText, 
     String query, 
     SearchKindEnum searchKind, 
     String displayName, 
     Boolean isTopAction, 
     List<Thing> result, 
     String serviceUrl, 
     List<Thing> about, 
     Integer commentCount, 
     Integer copyrightYear, 
     String disclaimer, 
     String discussionUrl, 
     List<String> genre, 
     String headLine, 
     Boolean isAccessibleForFree, 
     Boolean isFamilyFriendly, 
     List<Thing> mentions, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String url, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.displayText = displayText;
    this.query = query;
    this.searchKind = searchKind;
    this.displayName = displayName;
    this.isTopAction = isTopAction;
    this.result = result;
    this.serviceUrl = serviceUrl;
    this.about = about;
    this.commentCount = commentCount;
    this.copyrightYear = copyrightYear;
    this.disclaimer = disclaimer;
    this.discussionUrl = discussionUrl;
    this.genre = genre;
    this.headLine = headLine;
    this.isAccessibleForFree = isAccessibleForFree;
    this.isFamilyFriendly = isFamilyFriendly;
    this.mentions = mentions;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.url = url;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Get displayText
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }



  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }



  /**
   * Get searchKind
   * @return searchKind
   */
  @javax.annotation.Nullable
  public SearchKindEnum getSearchKind() {
    return searchKind;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAction searchAction = (SearchAction) o;
    return Objects.equals(this.displayText, searchAction.displayText) &&
        Objects.equals(this.query, searchAction.query) &&
        Objects.equals(this.searchKind, searchAction.searchKind) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayText, query, searchKind, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    searchKind: ").append(toIndentedString(searchKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("isTopAction");
    openapiFields.add("result");
    openapiFields.add("serviceUrl");
    openapiFields.add("about");
    openapiFields.add("commentCount");
    openapiFields.add("copyrightHolder");
    openapiFields.add("copyrightYear");
    openapiFields.add("creator");
    openapiFields.add("disclaimer");
    openapiFields.add("discussionUrl");
    openapiFields.add("genre");
    openapiFields.add("headLine");
    openapiFields.add("isAccessibleForFree");
    openapiFields.add("isFamilyFriendly");
    openapiFields.add("mainEntity");
    openapiFields.add("mentions");
    openapiFields.add("provider");
    openapiFields.add("text");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("url");
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAction is not found in the empty JSON string", SearchAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAction.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAction>() {
           @Override
           public void write(JsonWriter out, SearchAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAction
   * @throws IOException if the JSON string is invalid with respect to SearchAction
   */
  public static SearchAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAction.class);
  }

  /**
   * Convert an instance of SearchAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

