/*
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewsTopic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:53.501943-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewsTopic extends Thing {
  public static final String SERIALIZED_NAME_IS_BREAKING_NEWS = "isBreakingNews";
  @SerializedName(SERIALIZED_NAME_IS_BREAKING_NEWS)
  private Boolean isBreakingNews;

  public static final String SERIALIZED_NAME_NEWS_SEARCH_URL = "newsSearchUrl";
  @SerializedName(SERIALIZED_NAME_NEWS_SEARCH_URL)
  private String newsSearchUrl;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private Query query;

  public NewsTopic() {
    this.type = this.getClass().getSimpleName();
  }

  public NewsTopic(
     Boolean isBreakingNews, 
     String newsSearchUrl, 
     String alternateName, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.isBreakingNews = isBreakingNews;
    this.newsSearchUrl = newsSearchUrl;
    this.alternateName = alternateName;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * A Boolean value that indicates whether the topic is considered breaking news. If the topic is considered breaking news, the value is true.
   * @return isBreakingNews
   */
  @javax.annotation.Nullable
  public Boolean getIsBreakingNews() {
    return isBreakingNews;
  }



  /**
   * The URL to the Bing News search results for the search query term
   * @return newsSearchUrl
   */
  @javax.annotation.Nullable
  public String getNewsSearchUrl() {
    return newsSearchUrl;
  }



  public NewsTopic query(Query query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public Query getQuery() {
    return query;
  }

  public void setQuery(Query query) {
    this.query = query;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewsTopic newsTopic = (NewsTopic) o;
    return Objects.equals(this.isBreakingNews, newsTopic.isBreakingNews) &&
        Objects.equals(this.newsSearchUrl, newsTopic.newsSearchUrl) &&
        Objects.equals(this.query, newsTopic.query) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBreakingNews, newsSearchUrl, query, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewsTopic {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isBreakingNews: ").append(toIndentedString(isBreakingNews)).append("\n");
    sb.append("    newsSearchUrl: ").append(toIndentedString(newsSearchUrl)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateName");
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewsTopic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewsTopic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewsTopic is not found in the empty JSON string", NewsTopic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewsTopic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewsTopic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewsTopic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewsTopic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewsTopic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewsTopic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewsTopic.class));

       return (TypeAdapter<T>) new TypeAdapter<NewsTopic>() {
           @Override
           public void write(JsonWriter out, NewsTopic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewsTopic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewsTopic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewsTopic
   * @throws IOException if the JSON string is invalid with respect to NewsTopic
   */
  public static NewsTopic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewsTopic.class);
  }

  /**
   * Convert an instance of NewsTopic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

