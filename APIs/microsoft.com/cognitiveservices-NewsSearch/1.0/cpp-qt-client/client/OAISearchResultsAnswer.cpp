/**
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResultsAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResultsAnswer::OAISearchResultsAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResultsAnswer::OAISearchResultsAnswer() {
    this->initializeModel();
}

OAISearchResultsAnswer::~OAISearchResultsAnswer() {}

void OAISearchResultsAnswer::initializeModel() {

    m_total_estimated_matches_isSet = false;
    m_total_estimated_matches_isValid = false;

    m_follow_up_queries_isSet = false;
    m_follow_up_queries_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAISearchResultsAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResultsAnswer::fromJsonObject(QJsonObject json) {

    m_total_estimated_matches_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_matches, json[QString("totalEstimatedMatches")]);
    m_total_estimated_matches_isSet = !json[QString("totalEstimatedMatches")].isNull() && m_total_estimated_matches_isValid;

    m_follow_up_queries_isValid = ::OpenAPI::fromJsonValue(m_follow_up_queries, json[QString("followUpQueries")]);
    m_follow_up_queries_isSet = !json[QString("followUpQueries")].isNull() && m_follow_up_queries_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAISearchResultsAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResultsAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_total_estimated_matches_isSet) {
        obj.insert(QString("totalEstimatedMatches"), ::OpenAPI::toJsonValue(m_total_estimated_matches));
    }
    if (m_follow_up_queries.size() > 0) {
        obj.insert(QString("followUpQueries"), ::OpenAPI::toJsonValue(m_follow_up_queries));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

qint64 OAISearchResultsAnswer::getTotalEstimatedMatches() const {
    return m_total_estimated_matches;
}
void OAISearchResultsAnswer::setTotalEstimatedMatches(const qint64 &total_estimated_matches) {
    m_total_estimated_matches = total_estimated_matches;
    m_total_estimated_matches_isSet = true;
}

bool OAISearchResultsAnswer::is_total_estimated_matches_Set() const{
    return m_total_estimated_matches_isSet;
}

bool OAISearchResultsAnswer::is_total_estimated_matches_Valid() const{
    return m_total_estimated_matches_isValid;
}

QList<OAIQuery> OAISearchResultsAnswer::getFollowUpQueries() const {
    return m_follow_up_queries;
}
void OAISearchResultsAnswer::setFollowUpQueries(const QList<OAIQuery> &follow_up_queries) {
    m_follow_up_queries = follow_up_queries;
    m_follow_up_queries_isSet = true;
}

bool OAISearchResultsAnswer::is_follow_up_queries_Set() const{
    return m_follow_up_queries_isSet;
}

bool OAISearchResultsAnswer::is_follow_up_queries_Valid() const{
    return m_follow_up_queries_isValid;
}

QString OAISearchResultsAnswer::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAISearchResultsAnswer::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAISearchResultsAnswer::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAISearchResultsAnswer::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAISearchResultsAnswer::getId() const {
    return m_id;
}
void OAISearchResultsAnswer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchResultsAnswer::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchResultsAnswer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchResultsAnswer::getType() const {
    return m__type;
}
void OAISearchResultsAnswer::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAISearchResultsAnswer::is__type_Set() const{
    return m__type_isSet;
}

bool OAISearchResultsAnswer::is__type_Valid() const{
    return m__type_isValid;
}

bool OAISearchResultsAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_estimated_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResultsAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
