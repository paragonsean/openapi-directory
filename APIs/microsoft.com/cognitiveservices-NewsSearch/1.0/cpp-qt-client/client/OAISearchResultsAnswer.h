/**
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchResultsAnswer.h
 *
 * Defines a search result answer.
 */

#ifndef OAISearchResultsAnswer_H
#define OAISearchResultsAnswer_H

#include <QJsonObject>

#include "OAIAnswer.h"
#include "OAIQuery.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQuery;

class OAISearchResultsAnswer : public OAIObject {
public:
    OAISearchResultsAnswer();
    OAISearchResultsAnswer(QString json);
    ~OAISearchResultsAnswer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getTotalEstimatedMatches() const;
    void setTotalEstimatedMatches(const qint64 &total_estimated_matches);
    bool is_total_estimated_matches_Set() const;
    bool is_total_estimated_matches_Valid() const;

    QList<OAIQuery> getFollowUpQueries() const;
    void setFollowUpQueries(const QList<OAIQuery> &follow_up_queries);
    bool is_follow_up_queries_Set() const;
    bool is_follow_up_queries_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_total_estimated_matches;
    bool m_total_estimated_matches_isSet;
    bool m_total_estimated_matches_isValid;

    QList<OAIQuery> m_follow_up_queries;
    bool m_follow_up_queries_isSet;
    bool m_follow_up_queries_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchResultsAnswer)

#endif // OAISearchResultsAnswer_H
