/**
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINews.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINews::OAINews(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINews::OAINews() {
    this->initializeModel();
}

OAINews::~OAINews() {}

void OAINews::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_total_estimated_matches_isSet = false;
    m_total_estimated_matches_isValid = false;

    m_follow_up_queries_isSet = false;
    m_follow_up_queries_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAINews::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINews::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_total_estimated_matches_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_matches, json[QString("totalEstimatedMatches")]);
    m_total_estimated_matches_isSet = !json[QString("totalEstimatedMatches")].isNull() && m_total_estimated_matches_isValid;

    m_follow_up_queries_isValid = ::OpenAPI::fromJsonValue(m_follow_up_queries, json[QString("followUpQueries")]);
    m_follow_up_queries_isSet = !json[QString("followUpQueries")].isNull() && m_follow_up_queries_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAINews::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINews::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_total_estimated_matches_isSet) {
        obj.insert(QString("totalEstimatedMatches"), ::OpenAPI::toJsonValue(m_total_estimated_matches));
    }
    if (m_follow_up_queries.size() > 0) {
        obj.insert(QString("followUpQueries"), ::OpenAPI::toJsonValue(m_follow_up_queries));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAINews::getLocation() const {
    return m_location;
}
void OAINews::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAINews::is_location_Set() const{
    return m_location_isSet;
}

bool OAINews::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAINewsArticle> OAINews::getValue() const {
    return m_value;
}
void OAINews::setValue(const QList<OAINewsArticle> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINews::is_value_Set() const{
    return m_value_isSet;
}

bool OAINews::is_value_Valid() const{
    return m_value_isValid;
}

qint64 OAINews::getTotalEstimatedMatches() const {
    return m_total_estimated_matches;
}
void OAINews::setTotalEstimatedMatches(const qint64 &total_estimated_matches) {
    m_total_estimated_matches = total_estimated_matches;
    m_total_estimated_matches_isSet = true;
}

bool OAINews::is_total_estimated_matches_Set() const{
    return m_total_estimated_matches_isSet;
}

bool OAINews::is_total_estimated_matches_Valid() const{
    return m_total_estimated_matches_isValid;
}

QList<OAIQuery> OAINews::getFollowUpQueries() const {
    return m_follow_up_queries;
}
void OAINews::setFollowUpQueries(const QList<OAIQuery> &follow_up_queries) {
    m_follow_up_queries = follow_up_queries;
    m_follow_up_queries_isSet = true;
}

bool OAINews::is_follow_up_queries_Set() const{
    return m_follow_up_queries_isSet;
}

bool OAINews::is_follow_up_queries_Valid() const{
    return m_follow_up_queries_isValid;
}

QString OAINews::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAINews::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAINews::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAINews::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAINews::getId() const {
    return m_id;
}
void OAINews::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINews::is_id_Set() const{
    return m_id_isSet;
}

bool OAINews::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINews::getType() const {
    return m__type;
}
void OAINews::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAINews::is__type_Set() const{
    return m__type_isSet;
}

bool OAINews::is__type_Valid() const{
    return m__type_isValid;
}

bool OAINews::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINews::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
