/**
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewsArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewsArticle::OAINewsArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewsArticle::OAINewsArticle() {
    this->initializeModel();
}

OAINewsArticle::~OAINewsArticle() {}

void OAINewsArticle::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_clustered_articles_isSet = false;
    m_clustered_articles_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;

    m_date_published_isSet = false;
    m_date_published_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAINewsArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewsArticle::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_clustered_articles_isValid = ::OpenAPI::fromJsonValue(m_clustered_articles, json[QString("clusteredArticles")]);
    m_clustered_articles_isSet = !json[QString("clusteredArticles")].isNull() && m_clustered_articles_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("wordCount")]);
    m_word_count_isSet = !json[QString("wordCount")].isNull() && m_word_count_isValid;

    m_date_published_isValid = ::OpenAPI::fromJsonValue(m_date_published, json[QString("datePublished")]);
    m_date_published_isSet = !json[QString("datePublished")].isNull() && m_date_published_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAINewsArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewsArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_clustered_articles.size() > 0) {
        obj.insert(QString("clusteredArticles"), ::OpenAPI::toJsonValue(m_clustered_articles));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("wordCount"), ::OpenAPI::toJsonValue(m_word_count));
    }
    if (m_date_published_isSet) {
        obj.insert(QString("datePublished"), ::OpenAPI::toJsonValue(m_date_published));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAINewsArticle::getCategory() const {
    return m_category;
}
void OAINewsArticle::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINewsArticle::is_category_Set() const{
    return m_category_isSet;
}

bool OAINewsArticle::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAINewsArticle> OAINewsArticle::getClusteredArticles() const {
    return m_clustered_articles;
}
void OAINewsArticle::setClusteredArticles(const QList<OAINewsArticle> &clustered_articles) {
    m_clustered_articles = clustered_articles;
    m_clustered_articles_isSet = true;
}

bool OAINewsArticle::is_clustered_articles_Set() const{
    return m_clustered_articles_isSet;
}

bool OAINewsArticle::is_clustered_articles_Valid() const{
    return m_clustered_articles_isValid;
}

bool OAINewsArticle::isHeadline() const {
    return m_headline;
}
void OAINewsArticle::setHeadline(const bool &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAINewsArticle::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAINewsArticle::is_headline_Valid() const{
    return m_headline_isValid;
}

qint32 OAINewsArticle::getWordCount() const {
    return m_word_count;
}
void OAINewsArticle::setWordCount(const qint32 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAINewsArticle::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAINewsArticle::is_word_count_Valid() const{
    return m_word_count_isValid;
}

QString OAINewsArticle::getDatePublished() const {
    return m_date_published;
}
void OAINewsArticle::setDatePublished(const QString &date_published) {
    m_date_published = date_published;
    m_date_published_isSet = true;
}

bool OAINewsArticle::is_date_published_Set() const{
    return m_date_published_isSet;
}

bool OAINewsArticle::is_date_published_Valid() const{
    return m_date_published_isValid;
}

QList<OAIThing> OAINewsArticle::getProvider() const {
    return m_provider;
}
void OAINewsArticle::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAINewsArticle::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAINewsArticle::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAINewsArticle::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAINewsArticle::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAINewsArticle::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAINewsArticle::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

OAIVideoObject OAINewsArticle::getVideo() const {
    return m_video;
}
void OAINewsArticle::setVideo(const OAIVideoObject &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAINewsArticle::is_video_Set() const{
    return m_video_isSet;
}

bool OAINewsArticle::is_video_Valid() const{
    return m_video_isValid;
}

QString OAINewsArticle::getAlternateName() const {
    return m_alternate_name;
}
void OAINewsArticle::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAINewsArticle::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAINewsArticle::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAINewsArticle::getBingId() const {
    return m_bing_id;
}
void OAINewsArticle::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAINewsArticle::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAINewsArticle::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAINewsArticle::getDescription() const {
    return m_description;
}
void OAINewsArticle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewsArticle::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewsArticle::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAINewsArticle::getImage() const {
    return m_image;
}
void OAINewsArticle::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAINewsArticle::is_image_Set() const{
    return m_image_isSet;
}

bool OAINewsArticle::is_image_Valid() const{
    return m_image_isValid;
}

QString OAINewsArticle::getName() const {
    return m_name;
}
void OAINewsArticle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewsArticle::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewsArticle::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewsArticle::getUrl() const {
    return m_url;
}
void OAINewsArticle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINewsArticle::is_url_Set() const{
    return m_url_isSet;
}

bool OAINewsArticle::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINewsArticle::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAINewsArticle::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAINewsArticle::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAINewsArticle::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAINewsArticle::getId() const {
    return m_id;
}
void OAINewsArticle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINewsArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAINewsArticle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINewsArticle::getType() const {
    return m__type;
}
void OAINewsArticle::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAINewsArticle::is__type_Set() const{
    return m__type_isSet;
}

bool OAINewsArticle::is__type_Valid() const{
    return m__type_isValid;
}

bool OAINewsArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clustered_articles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewsArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
